[{"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substring='code') -> bool:\n    \"\"\"Check if a given string contains a specific substring\"\"\"\n    return substring in s\ndef g(substring='code'):\n    return f\"I love {substring} challenges\"\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 46, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substring='code') -> bool:\n    \"\"\"Check if a given string contains a specific substring\"\"\"\n    return substring in s", "solution_func": "def g(substring='code'):\n    return f\"I love {substring} challenges\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=5) -> bool:\n    \"\"\"Check if a number is a perfect square\"\"\"\n    return math.isqrt(n)**2 == n\ndef g(x=5):\n    return x**2\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 46, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, x=5) -> bool:\n    \"\"\"Check if a number is a perfect square\"\"\"\n    return math.isqrt(n)**2 == n", "solution_func": "def g(x=5):\n    return x**2", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: list, target=100) -> bool:\n    \"\"\"Check if any two numbers in a given list add up to a target number\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(target=100):\n    return [50, 25, 30, 20, 5, 15]\nassert f(g())\n", "emb": null, "idx_generation": 46, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: list, target=100) -> bool:\n    \"\"\"Check if any two numbers in a given list add up to a target number\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g(target=100):\n    return [50, 25, 30, 20, 5, 15]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], a=0, s=3, e=100) -> bool:\n    \"\"\"Create a list that is a subrange of an arithmetic sequence.\"\"\"\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] for i in range(len(x) - 1)])\n\ndef g(a=0, s=3, e=100):\n    return list(range(a, e + 1, s))\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 46, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], a=0, s=3, e=100) -> bool:\n    \"\"\"Create a list that is a subrange of an arithmetic sequence.\"\"\"\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] for i in range(len(x) - 1)])", "solution_func": "def g(a=0, s=3, e=100):\n    return list(range(a, e + 1, s))", "map_ix": [1, 1, 0, 0, 0, 0, 1, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], a=100, s=-2, e=-100) -> bool:\n    \"\"\"Create a list that is a subrange of an arithmetic sequence.\"\"\"\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] for i in range(len(x) - 1)])\n\ndef g(a=100, s=-2, e=-100):\n    return list(range(a, e - 1, s))\n\nassert f(g())\n", "emb": null, "idx_generation": 46, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], a=100, s=-2, e=-100) -> bool:\n    \"\"\"Create a list that is a subrange of an arithmetic sequence.\"\"\"\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] for i in range(len(x) - 1)])", "solution_func": "def g(a=100, s=-2, e=-100):\n    return list(range(a, e - 1, s))", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], a=1, s=1, e=1000) -> bool:\n    \"\"\"Create a list that is a subrange of an arithmetic sequence.\"\"\"\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] for i in range(len(x) - 1)])\n\ndef g(a=1, s=1, e=1000):\n    return list(range(a, e + 1, s))\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 46, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], a=1, s=1, e=1000) -> bool:\n    \"\"\"Create a list that is a subrange of an arithmetic sequence.\"\"\"\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] for i in range(len(x) - 1)])", "solution_func": "def g(a=1, s=1, e=1000):\n    return list(range(a, e + 1, s))", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, nums=[74357, 12589, 93457], upper_bound=100000) -> bool:\n    \"\"\"Check if all numbers in the list are less than or equal to a given upper bound.\"\"\"\n    return all((i <= n for i in nums)) and n <= upper_bound\ndef g(nums=[74357, 12589, 93457], upper_bound=100000):\n    return max(nums)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 46, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[74357, 12589, 93457], upper_bound=100000) -> bool:\n    \"\"\"Check if all numbers in the list are less than or equal to a given upper bound.\"\"\"\n    return all((i <= n for i in nums)) and n <= upper_bound", "solution_func": "def g(nums=[74357, 12589, 93457], upper_bound=100000):\n    return max(nums)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, word='programming', min_len=5) -> bool:\n    \"\"\"Check if the word is a substring of the given string and its length is greater than or equal to a given minimum length.\"\"\"\n    return word in s and len(word) >= min_len\ndef g(word='programming', min_len=5):\n    return word\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 46, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, word='programming', min_len=5) -> bool:\n    \"\"\"Check if the word is a substring of the given string and its length is greater than or equal to a given minimum length.\"\"\"\n    return word in s and len(word) >= min_len", "solution_func": "def g(word='programming', min_len=5):\n    return word", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, nums=[12, 6, 9], multiple=3) -> bool:\n    \"\"\"Check if all numbers in the list are multiples of a given number.\"\"\"\n    return all((i % n == 0 for i in nums)) and n == multiple\ndef g(nums=[12, 6, 9], multiple=3):\n    return multiple\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 46, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[12, 6, 9], multiple=3) -> bool:\n    \"\"\"Check if all numbers in the list are multiples of a given number.\"\"\"\n    return all((i % n == 0 for i in nums)) and n == multiple", "solution_func": "def g(nums=[12, 6, 9], multiple=3):\n    return multiple", "map_ix": [1, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, primes=[2,3,5,7,11,13,17]) -> bool:\n    \"\"\"Check if the given number is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for prime in primes:\n        if n % prime == 0:\n            return False\n    for i in range(19, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef g(n = 19):\n    return n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 46, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, primes=[2,3,5,7,11,13,17]) -> bool:\n    \"\"\"Check if the given number is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for prime in primes:\n        if n % prime == 0:\n            return False\n    for i in range(19, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True", "solution_func": "def g(n = 19):\n    return n", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]):\n    return nums\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 47, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False", "solution_func": "def g(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]):\n    return nums", "map_ix": [1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if the given matrix is a magic square\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diag_sum1 = sum(matrix[i][i] for i in range(n))\n    diag_sum2 = sum(matrix[i][n-1-i] for i in range(n))\n    return row_sums == col_sums == [diag_sum1, diag_sum2]\ndef g(n = 3):\n    matrix = [[8, 1, 6], [3, 5, 7], [4, 9, 2]]\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 47, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if the given matrix is a magic square\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diag_sum1 = sum(matrix[i][i] for i in range(n))\n    diag_sum2 = sum(matrix[i][n-1-i] for i in range(n))\n    return row_sums == col_sums == [diag_sum1, diag_sum2]", "solution_func": "def g(n = 3):\n    matrix = [[8, 1, 6], [3, 5, 7], [4, 9, 2]]\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"Check if the target word appears in the string\"\"\"\n    return target in s\ndef g(s = 'I love python programming'):\n    return s\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 47, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"Check if the target word appears in the string\"\"\"\n    return target in s", "solution_func": "def g(s = 'I love python programming'):\n    return s", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int, res=[1]) -> bool:\n    \"\"\"Find the indices of two numbers in a list that add up to a target\"\"\"\n    for i, num in enumerate(nums):\n        if target - num in nums[i+1:]:\n            res[0] = i\n            return True\n    return False\n\ndef g(nums=[3, 9, 4, 5, 2, 7, 8], target=12):\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 47, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int, res=[1]) -> bool:\n    \"\"\"Find the indices of two numbers in a list that add up to a target\"\"\"\n    for i, num in enumerate(nums):\n        if target - num in nums[i+1:]:\n            res[0] = i\n            return True\n    return False", "solution_func": "def g(nums=[3, 9, 4, 5, 2, 7, 8], target=12):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], res=[0]) -> bool:\n    \"\"\"Find the index of the first number in a list that is not greater than its preceding number\"\"\"\n    for i in range(1, len(nums)):\n        if nums[i] <= nums[i-1]:\n            res[0] = i\n            return True\n    return False\n\ndef g(nums=[1, 2, 3, 5, 4, 6, 7]):\n    return nums\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 47, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], res=[0]) -> bool:\n    \"\"\"Find the index of the first number in a list that is not greater than its preceding number\"\"\"\n    for i in range(1, len(nums)):\n        if nums[i] <= nums[i-1]:\n            res[0] = i\n            return True\n    return False", "solution_func": "def g(nums=[1, 2, 3, 5, 4, 6, 7]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int, res=[0]) -> bool:\n    \"\"\"Find the index of a number in a list that is closest to the target\"\"\"\n    diff = abs(nums[0] - target)\n    for i, num in enumerate(nums):\n        if abs(num - target) < diff:\n            diff = abs(num - target)\n            res[0] = i\n    return True\n\ndef g(nums=[2, 4, 6, 8, 10], target=7):\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 47, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int, res=[0]) -> bool:\n    \"\"\"Find the index of a number in a list that is closest to the target\"\"\"\n    diff = abs(nums[0] - target)\n    for i, num in enumerate(nums):\n        if abs(num - target) < diff:\n            diff = abs(num - target)\n            res[0] = i\n    return True", "solution_func": "def g(nums=[2, 4, 6, 8, 10], target=7):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(num: float, power=3, result=729.0) -> bool:\n    \"\"\"Raise a number to a certain power and check if it matches the result\"\"\"\n    return math.isclose(math.pow(num, power), result)\n\ndef g(power=3):\n    num = math.pow(3, 1/power)\n    return num\nassert f(g())\n", "emb": null, "idx_generation": 47, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(num: float, power=3, result=729.0) -> bool:\n    \"\"\"Raise a number to a certain power and check if it matches the result\"\"\"\n    return math.isclose(math.pow(num, power), result)", "solution_func": "def g(power=3):\n    num = math.pow(3, 1/power)\n    return num", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date: str, format='%Y-%m-%d', result='1999-12-31') -> bool:\n    \"\"\"Convert a date string to a certain format and check if it matches the result\"\"\"\n    return datetime.strptime(date, format).strftime(format) == result\n\ndef g(format='%Y-%m-%d'):\n    date = datetime.strptime('1999-12-31', format)\n    return date.strftime(format)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 47, "target_skills": null, "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(date: str, format='%Y-%m-%d', result='1999-12-31') -> bool:\n    \"\"\"Convert a date string to a certain format and check if it matches the result\"\"\"\n    return datetime.strptime(date, format).strftime(format) == result", "solution_func": "def g(format='%Y-%m-%d'):\n    date = datetime.strptime('1999-12-31', format)\n    return date.strftime(format)", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\n\ndef f(li: List[int], seed=1234, result=[4, 3, 2, 1]) -> bool:\n    \"\"\"Sort a list of integers in descending order and check if it matches the result\"\"\"\n    random.seed(seed)\n    return sorted(li, reverse=True) == result\n\ndef g(seed=1234):\n    random.seed(seed)\n    li = random.sample(range(1, 5), 4)\n    return li\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], "idx_generation": 47, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(li: List[int], seed=1234, result=[4, 3, 2, 1]) -> bool:\n    \"\"\"Sort a list of integers in descending order and check if it matches the result\"\"\"\n    random.seed(seed)\n    return sorted(li, reverse=True) == result", "solution_func": "def g(seed=1234):\n    random.seed(seed)\n    li = random.sample(range(1, 5), 4)\n    return li", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 1]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_sum = 15) -> bool:\n    \"\"\"Check if there exists a path in the matrix that sums up to the target sum.\"\"\"\n    m, n = len(matrix), len(matrix[0])\n    \n    def dfs(i, j, curr_sum):\n        if i < 0 or i >= m or j < 0 or j >= n:\n            return False\n        curr_sum += matrix[i][j]\n        if curr_sum == target_sum:\n            return True\n        return dfs(i+1, j, curr_sum) or dfs(i, j+1, curr_sum)\n    \n    return dfs(0, 0, 0)\n    \ndef g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target_sum = 15):\n    return matrix\n\nassert f(g())\n", "emb": null, "idx_generation": 47, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_sum = 15) -> bool:\n    \"\"\"Check if there exists a path in the matrix that sums up to the target sum.\"\"\"\n    m, n = len(matrix), len(matrix[0])\n    \n    def dfs(i, j, curr_sum):\n        if i < 0 or i >= m or j < 0 or j >= n:\n            return False\n        curr_sum += matrix[i][j]\n        if curr_sum == target_sum:\n            return True\n        return dfs(i+1, j, curr_sum) or dfs(i, j+1, curr_sum)\n    \n    return dfs(0, 0, 0)", "solution_func": "def g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target_sum = 15):\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, a='goodbye', b='hello') -> bool:\n    \"\"\"Check if the string contains both 'hello' and 'goodbye'\"\"\"\n    return a in s and b in s\ndef g(a='goodbye', b='hello'):\n    return a + ' ' + b\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 48, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, a='goodbye', b='hello') -> bool:\n    \"\"\"Check if the string contains both 'hello' and 'goodbye'\"\"\"\n    return a in s and b in s", "solution_func": "def g(a='goodbye', b='hello'):\n    return a + ' ' + b", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, lst=[3, 5, 7, 9, 11]) -> bool:\n    \"\"\"Check if n is a multiple of all the numbers in the list\"\"\"\n    return all(n % num == 0 for num in lst)\ndef g(lst=[3, 5, 7, 9, 11]):\n    n = 1\n    while True:\n        if all(n % num == 0 for num in lst):\n            return n\n        n += 1\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 48, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst=[3, 5, 7, 9, 11]) -> bool:\n    \"\"\"Check if n is a multiple of all the numbers in the list\"\"\"\n    return all(n % num == 0 for num in lst)", "solution_func": "def g(lst=[3, 5, 7, 9, 11]):\n    n = 1\n    while True:\n        if all(n % num == 0 for num in lst):\n            return n\n        n += 1", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(lst: List[int], a=10, b=3) -> bool:\n    \"\"\"Check if the sum of the list is divisible by both a and b\"\"\"\n    return sum(lst) % a == 0 and sum(lst) % b == 0\ndef g(a=10, b=3):\n    return [a, b]\nassert f(g())\n", "emb": null, "idx_generation": 48, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int], a=10, b=3) -> bool:\n    \"\"\"Check if the sum of the list is divisible by both a and b\"\"\"\n    return sum(lst) % a == 0 and sum(lst) % b == 0", "solution_func": "def g(a=10, b=3):\n    return [a, b]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(string: str, sub: str, count=3) -> bool:\n    \"\"\"Check if a substring appears at least a certain number of times in a given string.\"\"\"\n    return string.count(sub) >= count\ndef g(string='hellohellohello', sub='hello', count=3):\n    return string\nassert f(g())\n", "emb": null, "idx_generation": 48, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, sub: str, count=3) -> bool:\n    \"\"\"Check if a substring appears at least a certain number of times in a given string.\"\"\"\n    return string.count(sub) >= count", "solution_func": "def g(string='hellohellohello', sub='hello', count=3):\n    return string", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_sum=30) -> bool:\n    \"\"\"Check if any row or column in a matrix has a sum equal to the target sum.\"\"\"\n    for row in matrix:\n        if sum(row) == target_sum:\n            return True\n    for col in zip(*matrix):\n        if sum(col) == target_sum:\n            return True\n    return False\ndef g(matrix=[[2, 6, 9], [1, 4, 10], [3, 5, 7]]):\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 48, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_sum=30) -> bool:\n    \"\"\"Check if any row or column in a matrix has a sum equal to the target sum.\"\"\"\n    for row in matrix:\n        if sum(row) == target_sum:\n            return True\n    for col in zip(*matrix):\n        if sum(col) == target_sum:\n            return True\n    return False", "solution_func": "def g(matrix=[[2, 6, 9], [1, 4, 10], [3, 5, 7]]):\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(string: str, substring: str, k=2) -> bool:\n    \"\"\"Check if a substring appears at least k times in a given string.\"\"\"\n    count = 0\n    start = 0\n    while start != -1:\n        start = string.find(substring, start)\n        if start != -1:\n            count += 1\n            start += 1\n    return count >= k\ndef g(string='abababab', substring='ab', k=2):\n    return string\nassert f(g())\n", "emb": null, "idx_generation": 48, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, substring: str, k=2) -> bool:\n    \"\"\"Check if a substring appears at least k times in a given string.\"\"\"\n    count = 0\n    start = 0\n    while start != -1:\n        start = string.find(substring, start)\n        if start != -1:\n            count += 1\n            start += 1\n    return count >= k", "solution_func": "def g(string='abababab', substring='ab', k=2):\n    return string", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if s contains a substring of length n that is a palindrome\"\"\"\n    return any(s[i:i+n] == s[i:i+n][::-1] for i in range(len(s)-n+1))\ndef g(n = 5):\n    return 'madam' + 'a'*(n-5)\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 48, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if s contains a substring of length n that is a palindrome\"\"\"\n    return any(s[i:i+n] == s[i:i+n][::-1] for i in range(len(s)-n+1))", "solution_func": "def g(n = 5):\n    return 'madam' + 'a'*(n-5)", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there is a pair of numbers in nums that sums up to target\"\"\"\n    return any(target - num in nums for num in nums)\ndef g(target = 10):\n    return list(range(1, target))\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 48, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there is a pair of numbers in nums that sums up to target\"\"\"\n    return any(target - num in nums for num in nums)", "solution_func": "def g(target = 10):\n    return list(range(1, target))", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=16) -> bool:\n    \"\"\"Check if there is a pair of numbers in matrix that sums up to target\"\"\"\n    nums = [num for row in matrix for num in row]\n    return any(target - num in nums for num in nums)\ndef g(target = 16):\n    return [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, target-9-10-11]]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 48, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=16) -> bool:\n    \"\"\"Check if there is a pair of numbers in matrix that sums up to target\"\"\"\n    nums = [num for row in matrix for num in row]\n    return any(target - num in nums for num in nums)", "solution_func": "def g(target = 16):\n    return [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, target-9-10-11]]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: List[int], n=4, s=10) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a >= 0 for a in x])\ndef g(n = 4, s = 10):\n    x = [0] * n\n    for i in range(n):\n        x[i] = s // n\n    return x\nassert f(g())\n", "emb": null, "idx_generation": 48, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], n=4, s=10) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a >= 0 for a in x])", "solution_func": "def g(n = 4, s = 10):\n    x = [0] * n\n    for i in range(n):\n        x[i] = s // n\n    return x", "map_ix": null}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10, k=3) -> bool:\n    \"\"\"Find k numbers in the list that add up to the target value.\"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, k):\n        if sum(combo) == target:\n            return True\n    return False\ndef g(target = 10, k = 3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 49, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10, k=3) -> bool:\n    \"\"\"Find k numbers in the list that add up to the target value.\"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, k):\n        if sum(combo) == target:\n            return True\n    return False", "solution_func": "def g(target = 10, k = 3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(words: List[str], letter='e', length=5) -> bool:\n    \"\"\"Find words in the list that start with the given letter and have the given length.\"\"\"\n    return all(len(word) == length and word[0] == letter for word in words)\ndef g(letter = 'e', length = 5):\n    return ['elephant', 'eagle', 'emu', 'elk', 'evoke']\nassert f(g())\n", "emb": null, "idx_generation": 49, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], letter='e', length=5) -> bool:\n    \"\"\"Find words in the list that start with the given letter and have the given length.\"\"\"\n    return all(len(word) == length and word[0] == letter for word in words)", "solution_func": "def g(letter = 'e', length = 5):\n    return ['elephant', 'eagle', 'emu', 'elk', 'evoke']", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find two numbers in the list that multiply to give the target value.\"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, 2):\n        if combo[0] * combo[1] == target:\n            return True\n    return False\ndef g(target = 100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\nassert f(g())\n", "emb": null, "idx_generation": 49, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find two numbers in the list that multiply to give the target value.\"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, 2):\n        if combo[0] * combo[1] == target:\n            return True\n    return False", "solution_func": "def g(target = 100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Check if a target number exists in a matrix. The matrix is sorted row-wise and column-wise in non-decreasing order.\n    \"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n\n    i = 0\n    j = n - 1\n\n    while i < m and j >= 0:\n        if matrix[i][j] == target:\n            return True\n        elif matrix[i][j] < target:\n            i += 1\n        else:\n            j -= 1\n\n    return False\n\ndef g(matrix: List[List[int]], target: int):\n    return matrix, target\n\n# Example usage:\nmatrix = [\n    [1, 4, 7, 11, 15],\n    [2, 5, 8, 12, 19],\n    [3, 6, 9, 16, 22],\n    [10, 13, 14, 17, 24],\n    [18, 21, 23, 26, 30]\n]\n\ntarget = 9\n\nassert f(*g(matrix, target))\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 49, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Check if a target number exists in a matrix. The matrix is sorted row-wise and column-wise in non-decreasing order.\n    \"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n\n    i = 0\n    j = n - 1\n\n    while i < m and j >= 0:\n        if matrix[i][j] == target:\n            return True\n        elif matrix[i][j] < target:\n            i += 1\n        else:\n            j -= 1\n\n    return False", "solution_func": "def g(matrix: List[List[int]], target: int):\n    return matrix, target\n\n# Example usage:\nmatrix = [\n    [1, 4, 7, 11, 15],\n    [2, 5, 8, 12, 19],\n    [3, 6, 9, 16, 22],\n    [10, 13, 14, 17, 24],\n    [18, 21, 23, 26, 30]\n]\n\ntarget = 9", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom collections import Counter\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Check if there are any two distinct elements in the list that sum up to k.\n    \"\"\"\n    counter = Counter(nums)\n\n    for num in nums:\n        complement = k - num\n        if complement in counter and (complement != num or counter[num] > 1):\n            return True\n    \n    return False\n\ndef g(nums: List[int], k: int):\n    return nums, k\n\n# Example usage:\nnums = [1, 2, 3, 4, 5]\nk = 7\n\nassert f(*g(nums, k))\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 49, "target_skills": null, "problem_func": "from typing import*\nfrom collections import Counter\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Check if there are any two distinct elements in the list that sum up to k.\n    \"\"\"\n    counter = Counter(nums)\n\n    for num in nums:\n        complement = k - num\n        if complement in counter and (complement != num or counter[num] > 1):\n            return True\n    \n    return False", "solution_func": "def g(nums: List[int], k: int):\n    return nums, k\n\n# Example usage:\nnums = [1, 2, 3, 4, 5]\nk = 7", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"\n    Check if two strings are isomorphic, meaning each character in s can be replaced by a character in t while preserving the order.\n    \"\"\"\n    if len(s) != len(t):\n        return False\n    \n    mapping = {}\n    used = set()\n\n    for i in range(len(s)):\n        if s[i] not in mapping:\n            if t[i] in used:\n                return False\n            mapping[s[i]] = t[i]\n            used.add(t[i])\n        else:\n            if mapping[s[i]] != t[i]:\n                return False\n    \n    return True\n\ndef g(s: str, t: str):\n    return s, t\n\n# Example usage:\ns = \"egg\"\nt = \"add\"\n\nassert f(*g(s, t))\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 49, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"\n    Check if two strings are isomorphic, meaning each character in s can be replaced by a character in t while preserving the order.\n    \"\"\"\n    if len(s) != len(t):\n        return False\n    \n    mapping = {}\n    used = set()\n\n    for i in range(len(s)):\n        if s[i] not in mapping:\n            if t[i] in used:\n                return False\n            mapping[s[i]] = t[i]\n            used.add(t[i])\n        else:\n            if mapping[s[i]] != t[i]:\n                return False\n    \n    return True", "solution_func": "def g(s: str, t: str):\n    return s, t\n\n# Example usage:\ns = \"egg\"\nt = \"add\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"\n    Given a list of integers, find a subsequence that sums up to the target value.\n    \"\"\"\n    dp = [False] * (target + 1)\n    dp[0] = True\n    for num in arr:\n        for i in range(target, num - 1, -1):\n            dp[i] = dp[i] or dp[i - num]\n    return dp[target]\n\ndef g(arr: List[int]):\n    \"\"\"\n    Generate a list of integers with a subsequence that sums up to 100.\n    \"\"\"\n    import random\n\n    while True:\n        nums = random.choices(range(-100, 101), k=random.randint(1, 10))\n        if sum(nums) >= 100:\n            return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 49, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"\n    Given a list of integers, find a subsequence that sums up to the target value.\n    \"\"\"\n    dp = [False] * (target + 1)\n    dp[0] = True\n    for num in arr:\n        for i in range(target, num - 1, -1):\n            dp[i] = dp[i] or dp[i - num]\n    return dp[target]", "solution_func": "def g(arr: List[int]):\n    \"\"\"\n    Generate a list of integers with a subsequence that sums up to 100.\n    \"\"\"\n    import random\n\n    while True:\n        nums = random.choices(range(-100, 101), k=random.randint(1, 10))\n        if sum(nums) >= 100:\n            return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(s: str, k=5) -> bool:\n    \"\"\"\n    Given a string, find if there exists a substring of length k that contains only distinct characters.\n    \"\"\"\n    for i in range(len(s) - k + 1):\n        if len(set(s[i:i+k])) == k:\n            return True\n    return False\n\ndef g(s: str):\n    \"\"\"\n    Generate a string with a substring of length 5 that contains only distinct characters.\n    \"\"\"\n    import random\n    import string\n\n    while True:\n        substr = random.choices(string.ascii_lowercase, k=5)\n        if len(set(substr)) == 5:\n            return s + ''.join(substr)\n\nassert f(g())\n", "emb": null, "idx_generation": 49, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(s: str, k=5) -> bool:\n    \"\"\"\n    Given a string, find if there exists a substring of length k that contains only distinct characters.\n    \"\"\"\n    for i in range(len(s) - k + 1):\n        if len(set(s[i:i+k])) == k:\n            return True\n    return False", "solution_func": "def g(s: str):\n    \"\"\"\n    Generate a string with a substring of length 5 that contains only distinct characters.\n    \"\"\"\n    import random\n    import string\n\n    while True:\n        substr = random.choices(string.ascii_lowercase, k=5)\n        if len(set(substr)) == 5:\n            return s + ''.join(substr)", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"\n    Given a matrix of integers, find if there exists a path from the top-left cell to the bottom-right cell\n    such that the sum of the path elements is equal to the target value.\n    \"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n\n    dp = [[False] * (target + 1) for _ in range(m)]\n\n    dp[0][matrix[0][0]] = True\n\n    for i in range(1, m):\n        for j in range(target + 1):\n            if dp[i-1][j] and j + matrix[i][0] <= target:\n                dp[i][j + matrix[i][0]] = True\n\n    for j in range(1, n):\n        for i in range(target + 1):\n            if dp[0][i] and i + matrix[0][j] <= target:\n                dp[0][i + matrix[0][j]] = True\n\n    for i in range(1, m):\n        for j in range(1, n):\n            for k in range(target + 1):\n                if dp[i - 1][k] and k + matrix[i][j] <= target:\n                    dp[i][k + matrix[i][j]] = True\n                if dp[i][k] and k + matrix[i][j] <= target:\n                    dp[i][k + matrix[i][j]] = True\n\n    return dp[m - 1][n - 1]\n\ndef g(matrix: List[List[int]]):\n    \"\"\"\n    Generate a matrix of integers with a path from the top-left cell to the bottom-right cell\n    such that the sum of the path elements is equal to 10.\n    \"\"\"\n    import random\n\n    while True:\n        m = random.randint(1, 5)\n        n = random.randint(1, 5)\n        matrix = [[random.randint(1, 5) for _ in range(n)] for _ in range(m)]\n        if f(matrix):\n            return matrix\n\nassert f(g())\n", "emb": null, "idx_generation": 49, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"\n    Given a matrix of integers, find if there exists a path from the top-left cell to the bottom-right cell\n    such that the sum of the path elements is equal to the target value.\n    \"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n\n    dp = [[False] * (target + 1) for _ in range(m)]\n\n    dp[0][matrix[0][0]] = True\n\n    for i in range(1, m):\n        for j in range(target + 1):\n            if dp[i-1][j] and j + matrix[i][0] <= target:\n                dp[i][j + matrix[i][0]] = True\n\n    for j in range(1, n):\n        for i in range(target + 1):\n            if dp[0][i] and i + matrix[0][j] <= target:\n                dp[0][i + matrix[0][j]] = True\n\n    for i in range(1, m):\n        for j in range(1, n):\n            for k in range(target + 1):\n                if dp[i - 1][k] and k + matrix[i][j] <= target:\n                    dp[i][k + matrix[i][j]] = True\n                if dp[i][k] and k + matrix[i][j] <= target:\n                    dp[i][k + matrix[i][j]] = True\n\n    return dp[m - 1][n - 1]", "solution_func": "def g(matrix: List[List[int]]):\n    \"\"\"\n    Generate a matrix of integers with a path from the top-left cell to the bottom-right cell\n    such that the sum of the path elements is equal to 10.\n    \"\"\"\n    import random\n\n    while True:\n        m = random.randint(1, 5)\n        n = random.randint(1, 5)\n        matrix = [[random.randint(1, 5) for _ in range(n)] for _ in range(m)]\n        if f(matrix):\n            return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: list, target=15) -> bool:\n    \"\"\"\n    Given a list of integers, find two numbers that add up to a target value.\n\n    Sample Input:\n    arr = [2, 4, 6, 8, 10]\n    target = 12\n\n    Sample Output:\n    True\n    \"\"\"\n    arr = np.array(arr)\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(arr=[2, 4, 6, 8, 10], target=15):\n    arr = np.array(arr)\n    return np.any(arr[:, None] + arr == target)\n\nassert f(g())\n", "emb": null, "idx_generation": 49, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: list, target=15) -> bool:\n    \"\"\"\n    Given a list of integers, find two numbers that add up to a target value.\n\n    Sample Input:\n    arr = [2, 4, 6, 8, 10]\n    target = 12\n\n    Sample Output:\n    True\n    \"\"\"\n    arr = np.array(arr)\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g(arr=[2, 4, 6, 8, 10], target=15):\n    arr = np.array(arr)\n    return np.any(arr[:, None] + arr == target)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: List[int], a=-10, b=10) -> bool:\n    \"\"\"Check if the list contains all elements from a to b (inclusive).\"\"\"\n    return set(range(a, b+1)).issubset(set(x))\ndef g(a=-10, b=10):\n    return list(range(a, b+1))\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 50, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], a=-10, b=10) -> bool:\n    \"\"\"Check if the list contains all elements from a to b (inclusive).\"\"\"\n    return set(range(a, b+1)).issubset(set(x))", "solution_func": "def g(a=-10, b=10):\n    return list(range(a, b+1))", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: List[int], a=-1000, b=1000) -> bool:\n    \"\"\"Check if the sum of the list is equal to the sum of the arithmetic sequence from a to b (inclusive).\"\"\"\n    return sum(x) == (b - a + 1) * (a + b) / 2\ndef g(a=-1000, b=1000):\n    return list(range(a, b+1))\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 50, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], a=-1000, b=1000) -> bool:\n    \"\"\"Check if the sum of the list is equal to the sum of the arithmetic sequence from a to b (inclusive).\"\"\"\n    return sum(x) == (b - a + 1) * (a + b) / 2", "solution_func": "def g(a=-1000, b=1000):\n    return list(range(a, b+1))", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: List[int], n=3) -> bool:\n    \"\"\"Check if the list contains three consecutive elements that form a geometric progression.\"\"\"\n    return any(x[i] * x[i+2] == x[i+1] * x[i+1] for i in range(len(x)-2))\ndef g(n=3):\n    return [1] * n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 50, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], n=3) -> bool:\n    \"\"\"Check if the list contains three consecutive elements that form a geometric progression.\"\"\"\n    return any(x[i] * x[i+2] == x[i+1] * x[i+1] for i in range(len(x)-2))", "solution_func": "def g(n=3):\n    return [1] * n", "map_ix": [0, 0, 0, 0, 0, 0, 1, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, m=2, s=10) -> bool:\n    \"\"\"Find two numbers whose sum is equal to s and whose product is equal to m\"\"\"\n    return n * m == s and n + m == s\ndef g(m=2, s=10):\n    n = s - m\n    return n\nassert f(g())\n", "emb": null, "idx_generation": 50, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m=2, s=10) -> bool:\n    \"\"\"Find two numbers whose sum is equal to s and whose product is equal to m\"\"\"\n    return n * m == s and n + m == s", "solution_func": "def g(m=2, s=10):\n    n = s - m\n    return n", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(a: List[int], b: List[int], c: List[int]) -> bool:\n    \"\"\"Check if the sum of elements in list a is equal to the sum of elements in list b multiplied by the sum of elements in list c\"\"\"\n    return sum(a) == sum(b) * sum(c)\ndef g():\n    a = [1, 2, 3]\n    b = [4, 5]\n    c = [6, 7, 8]\n    return a, b, c\nassert f(*g())\n", "emb": null, "idx_generation": 50, "target_skills": null, "problem_func": "from typing import*\ndef f(a: List[int], b: List[int], c: List[int]) -> bool:\n    \"\"\"Check if the sum of elements in list a is equal to the sum of elements in list b multiplied by the sum of elements in list c\"\"\"\n    return sum(a) == sum(b) * sum(c)", "solution_func": "def g():\n    a = [1, 2, 3]\n    b = [4, 5]\n    c = [6, 7, 8]\n    return a, b, c", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=5, c='a') -> bool:\n    \"\"\"Check if the character c appears n times consecutively in the string s\"\"\"\n    return c * n in s\ndef g(n=5, c='a'):\n    return c * n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 50, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=5, c='a') -> bool:\n    \"\"\"Check if the character c appears n times consecutively in the string s\"\"\"\n    return c * n in s", "solution_func": "def g(n=5, c='a'):\n    return c * n", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exist two elements in the list that sum up to the target value.\"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums=[1, 5, 7, 3, 9]):\n    return nums\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 50, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exist two elements in the list that sum up to the target value.\"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(nums=[1, 5, 7, 3, 9]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Check if a target value exists in the given matrix.\"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    row = 0\n    col = n - 1\n    while row < m and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            row += 1\n        else:\n            col -= 1\n    return False\n\ndef g(matrix=[\n    [1, 3, 5, 7],\n    [2, 4, 6, 8],\n    [3, 6, 9, 12],\n]):\n    return matrix\nassert f(g())\n", "emb": [1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 50, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Check if a target value exists in the given matrix.\"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    row = 0\n    col = n - 1\n    while row < m and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            row += 1\n        else:\n            col -= 1\n    return False", "solution_func": "def g(matrix=[\n    [1, 3, 5, 7],\n    [2, 4, 6, 8],\n    [3, 6, 9, 12],\n]):\n    return matrix", "map_ix": [1, 0, 1, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exist k elements in the list that sum up to zero.\"\"\"\n    from itertools import combinations\n    for comb in combinations(nums, k):\n        if sum(comb) == 0:\n            return True\n    return False\n\ndef g(nums=[-1, 2, 3, -4, 5, -6]):\n    return nums\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 50, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exist k elements in the list that sum up to zero.\"\"\"\n    from itertools import combinations\n    for comb in combinations(nums, k):\n        if sum(comb) == 0:\n            return True\n    return False", "solution_func": "def g(nums=[-1, 2, 3, -4, 5, -6]):\n    return nums", "map_ix": [0, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10, k=3) -> bool:\n    \"\"\"Find if there exists k elements in the list nums that sum up to the target.\"\"\"\n    combinations = itertools.combinations(nums, k)\n    for combination in combinations:\n        if sum(combination) == target:\n            return True\n    return False\n\ndef g(nums = [1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 50, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10, k=3) -> bool:\n    \"\"\"Find if there exists k elements in the list nums that sum up to the target.\"\"\"\n    combinations = itertools.combinations(nums, k)\n    for combination in combinations:\n        if sum(combination) == target:\n            return True\n    return False", "solution_func": "def g(nums = [1, 2, 3, 4, 5]):\n    return nums", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport numpy as np\n\ndef f(mat: np.ndarray, target=3) -> bool:\n    \"\"\"Check if the sum of each row in a matrix is equal to a given target\"\"\"\n    row_sums = np.sum(mat, axis=1)\n    return np.all(row_sums == target)\n\ndef g(target=3, size=(2, 2)):\n    return np.ones(size) * target\n\nassert f(g())\n", "emb": null, "idx_generation": 51, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\n\ndef f(mat: np.ndarray, target=3) -> bool:\n    \"\"\"Check if the sum of each row in a matrix is equal to a given target\"\"\"\n    row_sums = np.sum(mat, axis=1)\n    return np.all(row_sums == target)", "solution_func": "def g(target=3, size=(2, 2)):\n    return np.ones(size) * target", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target=\"world\") -> bool:\n    \"\"\"Check if a given string ends with a specific target string\"\"\"\n    return s.endswith(target)\n\ndef g(target=\"world\"):\n    return \"Hello \" + target\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 51, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target=\"world\") -> bool:\n    \"\"\"Check if a given string ends with a specific target string\"\"\"\n    return s.endswith(target)", "solution_func": "def g(target=\"world\"):\n    return \"Hello \" + target", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport itertools\n\ndef f(lst: List[int], target=5) -> bool:\n    \"\"\"Check if there exists a combination of elements in a list that sums up to a given target\"\"\"\n    for r in range(1, len(lst) + 1):\n        for c in itertools.combinations(lst, r):\n            if sum(c) == target:\n                return True\n    return False\n\ndef g(target=5):\n    return [1, 2, 3, 4]\n\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 51, "target_skills": null, "problem_func": "from typing import*\nimport itertools\n\ndef f(lst: List[int], target=5) -> bool:\n    \"\"\"Check if there exists a combination of elements in a list that sums up to a given target\"\"\"\n    for r in range(1, len(lst) + 1):\n        for c in itertools.combinations(lst, r):\n            if sum(c) == target:\n                return True\n    return False", "solution_func": "def g(target=5):\n    return [1, 2, 3, 4]", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=3, b=5) -> bool:\n    \"\"\"Check if n is a multiple of either a or b.\"\"\"\n    return n % a == 0 or n % b == 0\n\ndef g(a=3, b=5):\n    return math.lcm(a, b)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 51, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, a=3, b=5) -> bool:\n    \"\"\"Check if n is a multiple of either a or b.\"\"\"\n    return n % a == 0 or n % b == 0", "solution_func": "def g(a=3, b=5):\n    return math.lcm(a, b)", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray) -> bool:\n    \"\"\"Check if the sum of each column in the 2D array is equal to its corresponding row sum.\"\"\"\n    return np.sum(arr, axis=0) == np.sum(arr, axis=1)\n\ndef g():\n    return np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nassert f(g())\n", "emb": null, "idx_generation": 51, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray) -> bool:\n    \"\"\"Check if the sum of each column in the 2D array is equal to its corresponding row sum.\"\"\"\n    return np.sum(arr, axis=0) == np.sum(arr, axis=1)", "solution_func": "def g():\n    return np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\n\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target.\"\"\"\n    return any(target - x in lst for x in lst)\n\ndef g(n=10, target=15):\n    random.seed(0)\n    return random.choices(range(n), k=n)\nassert f(g(), target=15)\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 51, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target.\"\"\"\n    return any(target - x in lst for x in lst)", "solution_func": "def g(n=10, target=15):\n    random.seed(0)\n    return random.choices(range(n), k=n)", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=3, words=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grapefruit']) -> bool:\n    \"\"\"Check if a given string has at least n words from a list of words.\"\"\"\n    count = sum((word in s for word in words))\n    return count >= n\ndef g(n = 3, words = ['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grapefruit']):\n    return ' '.join(words[:n])\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 51, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=3, words=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grapefruit']) -> bool:\n    \"\"\"Check if a given string has at least n words from a list of words.\"\"\"\n    count = sum((word in s for word in words))\n    return count >= n", "solution_func": "def g(n = 3, words = ['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grapefruit']):\n    return ' '.join(words[:n])", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, k=4, words=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grapefruit']) -> bool:\n    \"\"\"Check if a given string has exactly k words from a list of words.\"\"\"\n    count = sum((word in s for word in words))\n    return count == k\ndef g(k = 4, words = ['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grapefruit']):\n    return ' '.join(words[:k])\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 51, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, k=4, words=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grapefruit']) -> bool:\n    \"\"\"Check if a given string has exactly k words from a list of words.\"\"\"\n    count = sum((word in s for word in words))\n    return count == k", "solution_func": "def g(k = 4, words = ['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grapefruit']):\n    return ' '.join(words[:k])", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: List[int], target=100, a=0, b=1) -> bool:\n    \"\"\"Find the two numbers in a list whose sum is equal to target.\"\"\"\n    return x[a] + x[b] == target\ndef g(target = 100, a = 0, b = 1):\n    x = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n    return x\nassert f(g())\n", "emb": null, "idx_generation": 51, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], target=100, a=0, b=1) -> bool:\n    \"\"\"Find the two numbers in a list whose sum is equal to target.\"\"\"\n    return x[a] + x[b] == target", "solution_func": "def g(target = 100, a = 0, b = 1):\n    x = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n    return x", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target: str) -> bool:\n    \"\"\"\n    Check if a string s contains the target string.\n\n    Example:\n    s = \"hello world\"\n    target = \"world\"\n    f(s, target) -> True\n    \"\"\"\n    return target in s\n\ndef g(s=\"hello world\", target=\"world\"):\n    return s, target\n\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 51, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target: str) -> bool:\n    \"\"\"\n    Check if a string s contains the target string.\n\n    Example:\n    s = \"hello world\"\n    target = \"world\"\n    f(s, target) -> True\n    \"\"\"\n    return target in s", "solution_func": "def g(s=\"hello world\", target=\"world\"):\n    return s, target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target=10, start=0, end=10) -> bool:\n    \"\"\"Check if the sum of a sublist is equal to the target\"\"\"\n    sub_arr = arr[start:end]\n    return sum(sub_arr) == target\ndef g(target = 10, start = 0, end = 10):\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    return arr\nassert f(g())\n", "emb": null, "idx_generation": 52, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=10, start=0, end=10) -> bool:\n    \"\"\"Check if the sum of a sublist is equal to the target\"\"\"\n    sub_arr = arr[start:end]\n    return sum(sub_arr) == target", "solution_func": "def g(target = 10, start = 0, end = 10):\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    return arr", "map_ix": null}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\nfrom itertools import combinations\ndef f(s: str, length=3) -> bool:\n    \"\"\"Check if a substring of length appears in the string\"\"\"\n    substrings = [s[i:j] for i, j in combinations(range(len(s)+1), r=2)]\n    return any([len(substring) == length for substring in substrings])\ndef g(length = 3):\n    return \"banana\"\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 52, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\nfrom itertools import combinations\ndef f(s: str, length=3) -> bool:\n    \"\"\"Check if a substring of length appears in the string\"\"\"\n    substrings = [s[i:j] for i, j in combinations(range(len(s)+1), r=2)]\n    return any([len(substring) == length for substring in substrings])", "solution_func": "def g(length = 3):\n    return \"banana\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], k=2) -> bool:\n    \"\"\"Check if there are k consecutive numbers in the array\"\"\"\n    for i in range(len(arr)-k+1):\n        if arr[i:i+k] == list(range(arr[i], arr[i]+k)):\n            return True\n    return False\ndef g(k = 2):\n    return [1, 2, 4, 5, 6, 8, 9]\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 52, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], k=2) -> bool:\n    \"\"\"Check if there are k consecutive numbers in the array\"\"\"\n    for i in range(len(arr)-k+1):\n        if arr[i:i+k] == list(range(arr[i], arr[i]+k)):\n            return True\n    return False", "solution_func": "def g(k = 2):\n    return [1, 2, 4, 5, 6, 8, 9]", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, t=['c', 'o', 'd', 'e'], n=4) -> bool:\n    \"\"\"Check if the given string is a substring of the list of characters in t\"\"\"\n    return s in ''.join(t)\ndef g(t = ['c', 'o', 'd', 'e'], n = 4):\n    return ''.join(t)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 52, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, t=['c', 'o', 'd', 'e'], n=4) -> bool:\n    \"\"\"Check if the given string is a substring of the list of characters in t\"\"\"\n    return s in ''.join(t)", "solution_func": "def g(t = ['c', 'o', 'd', 'e'], n = 4):\n    return ''.join(t)", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists two numbers in the list whose sum is equal to the target\"\"\"\n    return any([(nums[i] + nums[j]) == target for i in range(len(nums)) for j in range(i+1, len(nums))])\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n", "emb": null, "idx_generation": 52, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists two numbers in the list whose sum is equal to the target\"\"\"\n    return any([(nums[i] + nums[j]) == target for i in range(len(nums)) for j in range(i+1, len(nums))])", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5], lower_bound=2) -> bool:\n    \"\"\"Check if all the elements in the list of integers are divisible by n\"\"\"\n    return all([(i % n) == 0 for i in nums]) and n >= lower_bound\ndef g(nums = [1, 2, 3, 4, 5], lower_bound = 2):\n    return max(nums)\nassert f(g())\n", "emb": null, "idx_generation": 52, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5], lower_bound=2) -> bool:\n    \"\"\"Check if all the elements in the list of integers are divisible by n\"\"\"\n    return all([(i % n) == 0 for i in nums]) and n >= lower_bound", "solution_func": "def g(nums = [1, 2, 3, 4, 5], lower_bound = 2):\n    return max(nums)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers, find two numbers that add up to the target value.\n\n    Sample Input:\n    [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target = 10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n", "emb": null, "idx_generation": 52, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers, find two numbers that add up to the target value.\n\n    Sample Input:\n    [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))", "solution_func": "def g(target = 10):\n    return [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Given a matrix of integers, find whether there is a subarray with the target sum.\n\n    Sample Input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    m, n = len(matrix), len(matrix[0])\n    for i in range(m):\n        for j in range(n):\n            for k in range(i, m):\n                for l in range(j, n):\n                    subarray_sum = sum(matrix[x][y] for x in range(i, k+1) for y in range(j, l+1))\n                    if subarray_sum == target:\n                        return True\n    return False\ndef g(target = 0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n", "emb": null, "idx_generation": 52, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Given a matrix of integers, find whether there is a subarray with the target sum.\n\n    Sample Input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    m, n = len(matrix), len(matrix[0])\n    for i in range(m):\n        for j in range(n):\n            for k in range(i, m):\n                for l in range(j, n):\n                    subarray_sum = sum(matrix[x][y] for x in range(i, k+1) for y in range(j, l+1))\n                    if subarray_sum == target:\n                        return True\n    return False", "solution_func": "def g(target = 0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], n=5) -> bool:\n    \"\"\"\n    Given a list of integers, find whether there is a subsequence of length n that is non-decreasing.\n\n    Sample Input:\n    [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    return any((nums[i] <= nums[i+1] <= nums[i+2] <= nums[i+3] <= nums[i+4]) for i in range(len(nums)-n+1))\ndef g(n = 5):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 52, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], n=5) -> bool:\n    \"\"\"\n    Given a list of integers, find whether there is a subsequence of length n that is non-decreasing.\n\n    Sample Input:\n    [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    return any((nums[i] <= nums[i+1] <= nums[i+2] <= nums[i+3] <= nums[i+4]) for i in range(len(nums)-n+1))", "solution_func": "def g(n = 5):\n    return [1, 2, 3, 4, 5]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target_sum=10) -> bool:\n    \"\"\"\n    Subset Sum Problem\n\n    Given an array of integers, determine if there is a subset of the array that adds up to a target sum.\n\n    Example:\n    arr = [1, 2, 3, 4, 5]\n    target_sum = 9\n    output: True (subset [2, 3, 4] adds up to 9)\n    \"\"\"\n    dp = [[False] * (target_sum + 1) for _ in range(len(arr) + 1)]\n    for i in range(len(arr) + 1):\n        dp[i][0] = True\n    for i in range(1, len(arr) + 1):\n        for j in range(1, target_sum + 1):\n            if j < arr[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]\n    return dp[len(arr)][target_sum]\n    \ndef g(arr=[1, 2, 3, 4, 5], target_sum=10):\n    def subset_sum(arr, n, target_sum):\n        if target_sum == 0:\n            return True\n        if n == 0:\n            return False\n        if arr[n - 1] > target_sum:\n            return subset_sum(arr, n - 1, target_sum)\n        return subset_sum(arr, n - 1, target_sum) or subset_sum(arr, n - 1, target_sum - arr[n - 1])\n\n    return subset_sum(arr, len(arr), target_sum)\n\nassert f(g())\n", "emb": null, "idx_generation": 52, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target_sum=10) -> bool:\n    \"\"\"\n    Subset Sum Problem\n\n    Given an array of integers, determine if there is a subset of the array that adds up to a target sum.\n\n    Example:\n    arr = [1, 2, 3, 4, 5]\n    target_sum = 9\n    output: True (subset [2, 3, 4] adds up to 9)\n    \"\"\"\n    dp = [[False] * (target_sum + 1) for _ in range(len(arr) + 1)]\n    for i in range(len(arr) + 1):\n        dp[i][0] = True\n    for i in range(1, len(arr) + 1):\n        for j in range(1, target_sum + 1):\n            if j < arr[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]\n    return dp[len(arr)][target_sum]", "solution_func": "def g(arr=[1, 2, 3, 4, 5], target_sum=10):\n    def subset_sum(arr, n, target_sum):\n        if target_sum == 0:\n            return True\n        if n == 0:\n            return False\n        if arr[n - 1] > target_sum:\n            return subset_sum(arr, n - 1, target_sum)\n        return subset_sum(arr, n - 1, target_sum) or subset_sum(arr, n - 1, target_sum - arr[n - 1])\n\n    return subset_sum(arr, len(arr), target_sum)", "map_ix": null}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers that add up to the target value\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for r in range(1, len(nums)+1) for comb in combinations(nums, r))\ndef g(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]):\n    return nums\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 53, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers that add up to the target value\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for r in range(1, len(nums)+1) for comb in combinations(nums, r))", "solution_func": "def g(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]):\n    return nums", "map_ix": [0, 1, 0, 0, 0, 0, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Find a pair of numbers from the matrix whose sum is equal to the target value\"\"\"\n    from itertools import product\n    return any(sum(pair) == target for pair in product(*matrix))\ndef g(matrix = [[2, 4, 6], [8, 10, 12], [14, 16, 18]]):\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 53, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Find a pair of numbers from the matrix whose sum is equal to the target value\"\"\"\n    from itertools import product\n    return any(sum(pair) == target for pair in product(*matrix))", "solution_func": "def g(matrix = [[2, 4, 6], [8, 10, 12], [14, 16, 18]]):\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substr='apple') -> bool:\n    \"\"\"Find if a substring is present in the given string\"\"\"\n    return substr in s\ndef g(s = 'I like to eat apple'):\n    return s\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 53, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substr='apple') -> bool:\n    \"\"\"Find if a substring is present in the given string\"\"\"\n    return substr in s", "solution_func": "def g(s = 'I like to eat apple'):\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Find the sum of all elements in the matrix that are greater than the target value.\"\"\"\n    return sum(sum([1 for num in row if num > target]) for row in matrix)\ndef g(matrix: List[List[int]], target=15):\n    return sum([num for row in matrix for num in row if num > target])\nassert f(g())\n", "emb": null, "idx_generation": 53, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Find the sum of all elements in the matrix that are greater than the target value.\"\"\"\n    return sum(sum([1 for num in row if num > target]) for row in matrix)", "solution_func": "def g(matrix: List[List[int]], target=15):\n    return sum([num for row in matrix for num in row if num > target])", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(n: int, nums=[2, 4, 6, 8, 10]) -> bool:\n    \"\"\"Check if the sum of the square roots of the numbers is equal to n.\"\"\"\n    return sum(math.sqrt(num) for num in nums) == n\ndef g(nums=[2, 4, 6, 8, 10]):\n    return int(sum(math.sqrt(num) for num in nums))\nassert f(g())\n", "emb": null, "idx_generation": 53, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, nums=[2, 4, 6, 8, 10]) -> bool:\n    \"\"\"Check if the sum of the square roots of the numbers is equal to n.\"\"\"\n    return sum(math.sqrt(num) for num in nums) == n", "solution_func": "def g(nums=[2, 4, 6, 8, 10]):\n    return int(sum(math.sqrt(num) for num in nums))", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there are k consecutive numbers in the list.\"\"\"\n    return any(nums[i:i+k] == list(range(nums[i], nums[i]+k)) for i in range(len(nums)-k+1))\ndef g(nums: List[int], k=3):\n    return sorted(nums)\nassert f(g())\n", "emb": null, "idx_generation": 53, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there are k consecutive numbers in the list.\"\"\"\n    return any(nums[i:i+k] == list(range(nums[i], nums[i]+k)) for i in range(len(nums)-k+1))", "solution_func": "def g(nums: List[int], k=3):\n    return sorted(nums)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer, determine if there are three integers in the list that sum up to the target.\n    \"\"\"\n    for i in range(len(nums)-2):\n        for j in range(i+1, len(nums)-1):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(nums: List[int], target: int):\n    return nums, target\nassert f(g())\n", "emb": null, "idx_generation": 53, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer, determine if there are three integers in the list that sum up to the target.\n    \"\"\"\n    for i in range(len(nums)-2):\n        for j in range(i+1, len(nums)-1):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False", "solution_func": "def g(nums: List[int], target: int):\n    return nums, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer, determine if there are two integers in the list that sum up to the target.\n    \"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set and num != complement:\n            return True\n    return False\ndef g(nums: List[int], target: int):\n    return nums, target\nassert f(g())\n", "emb": null, "idx_generation": 53, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer, determine if there are two integers in the list that sum up to the target.\n    \"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set and num != complement:\n            return True\n    return False", "solution_func": "def g(nums: List[int], target: int):\n    return nums, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer, find the two indices of the numbers that sum up to the target.\n    \"\"\"\n    num_map = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_map:\n            return [num_map[complement], i]\n        num_map[num] = i\n    return []\ndef g(nums: List[int], target: int):\n    return nums, target\nassert f(g())\n", "emb": null, "idx_generation": 53, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer, find the two indices of the numbers that sum up to the target.\n    \"\"\"\n    num_map = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_map:\n            return [num_map[complement], i]\n        num_map[num] = i\n    return []", "solution_func": "def g(nums: List[int], target: int):\n    return nums, target", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, m: int, s: str, x=3, y=5) -> bool:\n    \"\"\"\n    Given two integers n and m and a string s, determine if the number of occurrences of the character 'a' in the first\n    n characters of s is divisible by x and the number of occurrences of the character 'b' in the last m characters of s\n    is divisible by y.\n\n    Sample Input:\n    n = 6\n    m = 7\n    s = 'abcaabbbbb'\n\n    Sample Output:\n    True\n    \"\"\"\n    first_half = s[:n]\n    second_half = s[-m:]\n    count_a = first_half.count('a')\n    count_b = second_half.count('b')\n    return count_a % x == 0 and count_b % y == 0\ndef g(n = 6, m = 7, s = 'abcaabbbbb', x = 3, y = 5):\n    return n, m, s, x, y\nassert f(*g())\n", "emb": [0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 53, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m: int, s: str, x=3, y=5) -> bool:\n    \"\"\"\n    Given two integers n and m and a string s, determine if the number of occurrences of the character 'a' in the first\n    n characters of s is divisible by x and the number of occurrences of the character 'b' in the last m characters of s\n    is divisible by y.\n\n    Sample Input:\n    n = 6\n    m = 7\n    s = 'abcaabbbbb'\n\n    Sample Output:\n    True\n    \"\"\"\n    first_half = s[:n]\n    second_half = s[-m:]\n    count_a = first_half.count('a')\n    count_b = second_half.count('b')\n    return count_a % x == 0 and count_b % y == 0", "solution_func": "def g(n = 6, m = 7, s = 'abcaabbbbb', x = 3, y = 5):\n    return n, m, s, x, y", "map_ix": [0, 1, 0, 1, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(a: List[int], n=3, target=10) -> bool:\n    \"\"\"Find if there exists a subset of length n in the list that sums up to the target value.\n\n    Sample Input:\n    a = [2, 4, 6, 8, 10]\n    n = 4\n    target = 20\n\n    Sample Output:\n    True\n    \"\"\"\n    subsets = combinations(a, n)\n    for subset in subsets:\n        if sum(subset) == target:\n            return True\n    return False\ndef g(a = [2, 4, 6, 8, 10], n = 3, target = 10):\n    return a\nassert f(g())\n", "emb": null, "idx_generation": 54, "target_skills": null, "problem_func": "from typing import*\ndef f(a: List[int], n=3, target=10) -> bool:\n    \"\"\"Find if there exists a subset of length n in the list that sums up to the target value.\n\n    Sample Input:\n    a = [2, 4, 6, 8, 10]\n    n = 4\n    target = 20\n\n    Sample Output:\n    True\n    \"\"\"\n    subsets = combinations(a, n)\n    for subset in subsets:\n        if sum(subset) == target:\n            return True\n    return False", "solution_func": "def g(a = [2, 4, 6, 8, 10], n = 3, target = 10):\n    return a", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, target='hello') -> bool:\n    \"\"\"Check if the given string is a permutation of the target string.\n\n    Sample Input:\n    s = 'lohle'\n    target = 'hello'\n\n    Sample Output:\n    True\n    \"\"\"\n    return Counter(s) == Counter(target)\ndef g(s = 'hello', target = 'hello'):\n    return ''.join(sample(s, len(s)))\nassert f(g())\n", "emb": null, "idx_generation": 54, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='hello') -> bool:\n    \"\"\"Check if the given string is a permutation of the target string.\n\n    Sample Input:\n    s = 'lohle'\n    target = 'hello'\n\n    Sample Output:\n    True\n    \"\"\"\n    return Counter(s) == Counter(target)", "solution_func": "def g(s = 'hello', target = 'hello'):\n    return ''.join(sample(s, len(s)))", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=3, target=15) -> bool:\n    \"\"\"Check if there exists a submatrix of size n x n in the given matrix that sums up to the target value.\n\n    Sample Input:\n    matrix = [\n        [1, 2, 3, 4],\n        [5, 6, 7, 8],\n        [9, 10, 11, 12],\n        [13, 14, 15, 16]\n    ]\n    n = 2\n    target = 26\n\n    Sample Output:\n    True\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows - n + 1):\n        for j in range(cols - n + 1):\n            submatrix = [row[j:j+n] for row in matrix[i:i+n]]\n            if sum(sum(row) for row in submatrix) == target:\n                return True\n    return False\ndef g(matrix = [\n    [1, 2, 3, 4],\n    [5, 6, 7, 8],\n    [9, 10, 11, 12],\n    [13, 14, 15, 16]\n], n = 3, target = 15):\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 54, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n=3, target=15) -> bool:\n    \"\"\"Check if there exists a submatrix of size n x n in the given matrix that sums up to the target value.\n\n    Sample Input:\n    matrix = [\n        [1, 2, 3, 4],\n        [5, 6, 7, 8],\n        [9, 10, 11, 12],\n        [13, 14, 15, 16]\n    ]\n    n = 2\n    target = 26\n\n    Sample Output:\n    True\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows - n + 1):\n        for j in range(cols - n + 1):\n            submatrix = [row[j:j+n] for row in matrix[i:i+n]]\n            if sum(sum(row) for row in submatrix) == target:\n                return True\n    return False", "solution_func": "def g(matrix = [\n    [1, 2, 3, 4],\n    [5, 6, 7, 8],\n    [9, 10, 11, 12],\n    [13, 14, 15, 16]\n], n = 3, target = 15):\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target_sum=1000) -> bool:\n    \"\"\"\n    Given a list of integers, find a pair of numbers that sum up to the target_sum.\n    \"\"\"\n    seen = set()\n    for num in arr:\n        complement = target_sum - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(arr: List[int], target_sum=1000):\n    return arr\nassert f(g())\n", "emb": null, "idx_generation": 54, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target_sum=1000) -> bool:\n    \"\"\"\n    Given a list of integers, find a pair of numbers that sum up to the target_sum.\n    \"\"\"\n    seen = set()\n    for num in arr:\n        complement = target_sum - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(arr: List[int], target_sum=1000):\n    return arr", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], k=2) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer k, find if there are two distinct indices i and j\n    in the list such that nums[i] = nums[j] and the absolute difference between i and j is at most k.\n    \"\"\"\n    num_dict = {}\n    for i, num in enumerate(nums):\n        if num in num_dict and i - num_dict[num] <= k:\n            return True\n        num_dict[num] = i\n    return False\n\ndef g(nums: List[int], k=2):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 54, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], k=2) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer k, find if there are two distinct indices i and j\n    in the list such that nums[i] = nums[j] and the absolute difference between i and j is at most k.\n    \"\"\"\n    num_dict = {}\n    for i, num in enumerate(nums):\n        if num in num_dict and i - num_dict[num] <= k:\n            return True\n        num_dict[num] = i\n    return False", "solution_func": "def g(nums: List[int], k=2):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=9) -> bool:\n    \"\"\"\n    Given a 2D matrix of integers and a target integer, determine if the target exists in the matrix.\n    The matrix is guaranteed to be sorted in non-decreasing order.\n    \"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    i = 0\n    j = n - 1\n    while i < m and j >= 0:\n        curr = matrix[i][j]\n        if curr == target:\n            return True\n        if curr < target:\n            i += 1\n        else:\n            j -= 1\n    return False\n\ndef g(matrix: List[List[int]], target=9):\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 54, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=9) -> bool:\n    \"\"\"\n    Given a 2D matrix of integers and a target integer, determine if the target exists in the matrix.\n    The matrix is guaranteed to be sorted in non-decreasing order.\n    \"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    i = 0\n    j = n - 1\n    while i < m and j >= 0:\n        curr = matrix[i][j]\n        if curr == target:\n            return True\n        if curr < target:\n            i += 1\n        else:\n            j -= 1\n    return False", "solution_func": "def g(matrix: List[List[int]], target=9):\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\n\ndef f(lst: list, n=5) -> bool:\n    \"\"\"Check if a list contains a specific number.\"\"\"\n    return n in lst\n\ndef g(n=5):\n    lst = random.sample(range(10), 7)\n    return lst\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 54, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(lst: list, n=5) -> bool:\n    \"\"\"Check if a list contains a specific number.\"\"\"\n    return n in lst", "solution_func": "def g(n=5):\n    lst = random.sample(range(10), 7)\n    return lst", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n=2) -> bool:\n    \"\"\"Check if a string contains a specific character n times.\"\"\"\n    return s.count('a') == n\n\ndef g(n=2):\n    s = 'abracadabra'\n    return s\n\nassert f(g())\n", "emb": null, "idx_generation": 54, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=2) -> bool:\n    \"\"\"Check if a string contains a specific character n times.\"\"\"\n    return s.count('a') == n", "solution_func": "def g(n=2):\n    s = 'abracadabra'\n    return s", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if a string contains exactly n uppercase letters.\"\"\"\n    return sum(1 for c in s if c.isupper()) == n\n\ndef g(n=5):\n    s = 'HeLLoWoRLD'\n    return s\n\nassert f(g())\n", "emb": null, "idx_generation": 54, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if a string contains exactly n uppercase letters.\"\"\"\n    return sum(1 for c in s if c.isupper()) == n", "solution_func": "def g(n=5):\n    s = 'HeLLoWoRLD'\n    return s", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that sum up to the target\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(numbers: List[int], target=0):\n    return numbers, target\n\nassert f(g())\n", "emb": null, "idx_generation": 54, "target_skills": null, "problem_func": "from typing import*\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that sum up to the target\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False", "solution_func": "def g(numbers: List[int], target=0):\n    return numbers, target", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\ndef f(s: str, n=4) -> bool:\n    \"\"\"Is the square root of n an integer?\"\"\"\n    return math.isqrt(n) ** 2 == n\ndef g(n = 4):\n    return str(math.isqrt(n))\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 55, "target_skills": null, "problem_func": "from typing import*\nimport math\ndef f(s: str, n=4) -> bool:\n    \"\"\"Is the square root of n an integer?\"\"\"\n    return math.isqrt(n) ** 2 == n", "solution_func": "def g(n = 4):\n    return str(math.isqrt(n))", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Is the average of the list lst greater than or equal to n?\"\"\"\n    return sum(lst) / len(lst) >= int(s)\ndef g(lst=[1, 2, 3, 4, 5]):\n    return str(sum(lst) // len(lst))\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 55, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Is the average of the list lst greater than or equal to n?\"\"\"\n    return sum(lst) / len(lst) >= int(s)", "solution_func": "def g(lst=[1, 2, 3, 4, 5]):\n    return str(sum(lst) // len(lst))", "map_ix": [0, 0, 0, 1, 0, 1, 0, 0, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\ndef f(s: str, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Is the number n in the list lst?\"\"\"\n    return int(s) in lst\ndef g(lst=[1, 2, 3, 4, 5]):\n    return str(random.choice(lst))\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 55, "target_skills": null, "problem_func": "from typing import*\nimport random\ndef f(s: str, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Is the number n in the list lst?\"\"\"\n    return int(s) in lst", "solution_func": "def g(lst=[1, 2, 3, 4, 5]):\n    return str(random.choice(lst))", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], target=999999) -> bool:\n    \"\"\"Find a subset of the list whose sum is equal to the target value\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    \n    return subset_sum(x, target)\n\ndef g(target=999999):\n    return [i for i in range(target)]\n\nassert f(g())\n", "emb": null, "idx_generation": 55, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], target=999999) -> bool:\n    \"\"\"Find a subset of the list whose sum is equal to the target value\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    \n    return subset_sum(x, target)", "solution_func": "def g(target=999999):\n    return [i for i in range(target)]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\n\ndef f(n: int, target=1000000) -> bool:\n    \"\"\"Find n random integers whose sum is equal to the target value\"\"\"\n    def generate_random_numbers(n, target):\n        nums = []\n        for _ in range(n - 1):\n            num = random.randint(0, target)\n            nums.append(num)\n            target -= num\n        nums.append(target)\n        return nums\n    \n    nums = generate_random_numbers(n, target)\n    return sum(nums) == target\n\ndef g(target=1000000):\n    return random.randint(1, target)\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 55, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(n: int, target=1000000) -> bool:\n    \"\"\"Find n random integers whose sum is equal to the target value\"\"\"\n    def generate_random_numbers(n, target):\n        nums = []\n        for _ in range(n - 1):\n            num = random.randint(0, target)\n            nums.append(num)\n            target -= num\n        nums.append(target)\n        return nums\n    \n    nums = generate_random_numbers(n, target)\n    return sum(nums) == target", "solution_func": "def g(target=1000000):\n    return random.randint(1, target)", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom datetime import datetime, timedelta\n\ndef f(x: datetime, days=365) -> bool:\n    \"\"\"Check if the given date is n days ahead of the current date\"\"\"\n    current_date = datetime.now()\n    target_date = current_date + timedelta(days=days)\n    return x == target_date\n\ndef g(days=365):\n    current_date = datetime.now()\n    target_date = current_date + timedelta(days=days)\n    return target_date\n\nassert f(g())\n", "emb": null, "idx_generation": 55, "target_skills": null, "problem_func": "from typing import*\nfrom datetime import datetime, timedelta\n\ndef f(x: datetime, days=365) -> bool:\n    \"\"\"Check if the given date is n days ahead of the current date\"\"\"\n    current_date = datetime.now()\n    target_date = current_date + timedelta(days=days)\n    return x == target_date", "solution_func": "def g(days=365):\n    current_date = datetime.now()\n    target_date = current_date + timedelta(days=days)\n    return target_date", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, target: str, x='abc', y='def') -> bool:\n    \"\"\"Check if the target string exists in s after replacing 'abc' with 'def'\"\"\"\n    return target in s.replace(x, y)\ndef g(s = '', target = '', x = 'abc', y = 'def'):\n    return s.replace(x, y)\nassert f(g())\n", "emb": null, "idx_generation": 55, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target: str, x='abc', y='def') -> bool:\n    \"\"\"Check if the target string exists in s after replacing 'abc' with 'def'\"\"\"\n    return target in s.replace(x, y)", "solution_func": "def g(s = '', target = '', x = 'abc', y = 'def'):\n    return s.replace(x, y)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int, a = 0, b = 1) -> bool:\n    \"\"\"Check if there is a pair of numbers in nums that sum up to the target\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(nums = [], target = 0, a = 0, b = 1):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 55, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int, a = 0, b = 1) -> bool:\n    \"\"\"Check if there is a pair of numbers in nums that sum up to the target\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))", "solution_func": "def g(nums = [], target = 0, a = 0, b = 1):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, target: str, a = '', b = '') -> bool:\n    \"\"\"Check if the target string exists in s after removing all characters in a and replacing b with a\"\"\"\n    return target in s.replace(a, '').replace(b, a)\ndef g(s = '', target = '', a = '', b = ''):\n    return s.replace(a, '').replace(b, a)\nassert f(g())\n", "emb": null, "idx_generation": 55, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target: str, a = '', b = '') -> bool:\n    \"\"\"Check if the target string exists in s after removing all characters in a and replacing b with a\"\"\"\n    return target in s.replace(a, '').replace(b, a)", "solution_func": "def g(s = '', target = '', a = '', b = ''):\n    return s.replace(a, '').replace(b, a)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a pair of integers in a list that sum up to a target value\"\"\"\n    return any(i + j == target_sum for i in arr for j in arr if i != j)\ndef g(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target_sum = 100):\n    return arr\nassert f(g())\n", "emb": null, "idx_generation": 55, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a pair of integers in a list that sum up to a target value\"\"\"\n    return any(i + j == target_sum for i in arr for j in arr if i != j)", "solution_func": "def g(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target_sum = 100):\n    return arr", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], n = 10) -> bool:\n    \"\"\"Check if the sum of n random numbers is equal to the given target\"\"\"\n    target = sum(nums)\n    return len(nums) == n and sum(random.choices(range(1, 100), k=n)) == target\n\ndef g(n = 10):\n    return random.choices(range(1, 100), k=n)\n\nassert f(g())\n", "emb": null, "idx_generation": 56, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(nums: List[int], n = 10) -> bool:\n    \"\"\"Check if the sum of n random numbers is equal to the given target\"\"\"\n    target = sum(nums)\n    return len(nums) == n and sum(random.choices(range(1, 100), k=n)) == target", "solution_func": "def g(n = 10):\n    return random.choices(range(1, 100), k=n)", "map_ix": null}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\nimport string\n\ndef f(string: str, substring = 'abc', count = 5, length = 15) -> bool:\n    \"\"\"Check if the given string contains a certain number of copies of a given substring and has a specific length\"\"\"\n    return string.count(substring) == count and len(string) == length\n\ndef g(substring = 'abc', count = 5, length = 15):\n    chars = string.ascii_lowercase\n    return substring * count + ''.join(random.choice(chars) for _ in range(length - len(substring) * count))\n\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 56, "target_skills": null, "problem_func": "import random\nfrom typing import*\nimport string\n\ndef f(string: str, substring = 'abc', count = 5, length = 15) -> bool:\n    \"\"\"Check if the given string contains a certain number of copies of a given substring and has a specific length\"\"\"\n    return string.count(substring) == count and len(string) == length", "solution_func": "def g(substring = 'abc', count = 5, length = 15):\n    chars = string.ascii_lowercase\n    return substring * count + ''.join(random.choice(chars) for _ in range(length - len(substring) * count))", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(ls: List[int], target = 10) -> bool:\n    \"\"\"Find the two elements in the list that sum up to the target number\"\"\"\n    return any(x + y == target for x in ls for y in ls if x != y)\n\ndef g(target = 10):\n    return random.sample(range(1, 20), 5)\n\nassert f(g())\n", "emb": null, "idx_generation": 56, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(ls: List[int], target = 10) -> bool:\n    \"\"\"Find the two elements in the list that sum up to the target number\"\"\"\n    return any(x + y == target for x in ls for y in ls if x != y)", "solution_func": "def g(target = 10):\n    return random.sample(range(1, 20), 5)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target: int, k: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, find if there exists a pair of integers in the list whose sum is equal to the target value.\n    Additionally, there should be at least k pairs of integers that satisfy this condition.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n    target = 6\n    k = 2\n\n    Sample Output:\n    True\n    \"\"\"\n    count = 0\n    for i, num1 in enumerate(arr):\n        for j, num2 in enumerate(arr[i+1:], start=i+1):\n            if num1 + num2 == target:\n                count += 1\n                if count == k:\n                    return True\n    return False\n\ndef g(arr = [1, 2, 3, 4, 5], target = 6, k = 2):\n    return arr\n\nassert f(g())\n", "emb": null, "idx_generation": 56, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int, k: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, find if there exists a pair of integers in the list whose sum is equal to the target value.\n    Additionally, there should be at least k pairs of integers that satisfy this condition.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n    target = 6\n    k = 2\n\n    Sample Output:\n    True\n    \"\"\"\n    count = 0\n    for i, num1 in enumerate(arr):\n        for j, num2 in enumerate(arr[i+1:], start=i+1):\n            if num1 + num2 == target:\n                count += 1\n                if count == k:\n                    return True\n    return False", "solution_func": "def g(arr = [1, 2, 3, 4, 5], target = 6, k = 2):\n    return arr", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, substr: str, replacement: str) -> bool:\n    \"\"\"\n    Given a string, replace all occurrences of a substring with a replacement string and return the modified string.\n\n    Sample Input:\n    s = \"I like apples and oranges\"\n    substr = \"apples\"\n    replacement = \"bananas\"\n\n    Sample Output:\n    \"I like bananas and oranges\"\n    \"\"\"\n    return s.replace(substr, replacement)\n\ndef g(s = \"I like apples and oranges\", substr = \"apples\", replacement = \"bananas\"):\n    return s\n\nassert f(g())\n", "emb": null, "idx_generation": 56, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substr: str, replacement: str) -> bool:\n    \"\"\"\n    Given a string, replace all occurrences of a substring with a replacement string and return the modified string.\n\n    Sample Input:\n    s = \"I like apples and oranges\"\n    substr = \"apples\"\n    replacement = \"bananas\"\n\n    Sample Output:\n    \"I like bananas and oranges\"\n    \"\"\"\n    return s.replace(substr, replacement)", "solution_func": "def g(s = \"I like apples and oranges\", substr = \"apples\", replacement = \"bananas\"):\n    return s", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers, find the kth smallest element in the list.\n\n    Sample Input:\n    arr = [4, 2, 6, 1, 5]\n    k = 3\n\n    Sample Output:\n    4\n    \"\"\"\n    arr.sort()\n    return arr[k-1]\n\ndef g(arr = [4, 2, 6, 1, 5], k = 3):\n    return arr\n\nassert f(g())\n", "emb": null, "idx_generation": 56, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers, find the kth smallest element in the list.\n\n    Sample Input:\n    arr = [4, 2, 6, 1, 5]\n    k = 3\n\n    Sample Output:\n    4\n    \"\"\"\n    arr.sort()\n    return arr[k-1]", "solution_func": "def g(arr = [4, 2, 6, 1, 5], k = 3):\n    return arr", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target_sum=10, num_elements=2) -> bool:\n    \"\"\"\n    Find if there exists a pair of numbers in the given list that sum up to a target value.\n\n    Example:\n    arr = [1, 2, 3, 4, 5]\n    target_sum = 7\n    num_elements = 2\n    output: True\n    \"\"\"\n    return any(sum(comb) == target_sum for comb in combinations(arr, num_elements))\ndef g(arr=[1, 2, 3, 4, 5], num_elements=2):\n    return arr\nassert f(g())\n", "emb": null, "idx_generation": 56, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target_sum=10, num_elements=2) -> bool:\n    \"\"\"\n    Find if there exists a pair of numbers in the given list that sum up to a target value.\n\n    Example:\n    arr = [1, 2, 3, 4, 5]\n    target_sum = 7\n    num_elements = 2\n    output: True\n    \"\"\"\n    return any(sum(comb) == target_sum for comb in combinations(arr, num_elements))", "solution_func": "def g(arr=[1, 2, 3, 4, 5], num_elements=2):\n    return arr", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target_product=24, num_elements=3) -> bool:\n    \"\"\"\n    Find if there exists a group of numbers in the given list that multiply to a target value.\n\n    Example:\n    arr = [1, 2, 3, 4, 5]\n    target_product = 60\n    num_elements = 3\n    output: True\n    \"\"\"\n    return any(prod(comb) == target_product for comb in combinations(arr, num_elements))\ndef g(arr=[1, 2, 3, 4, 5], num_elements=3):\n    return arr\nassert f(g())\n", "emb": null, "idx_generation": 56, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target_product=24, num_elements=3) -> bool:\n    \"\"\"\n    Find if there exists a group of numbers in the given list that multiply to a target value.\n\n    Example:\n    arr = [1, 2, 3, 4, 5]\n    target_product = 60\n    num_elements = 3\n    output: True\n    \"\"\"\n    return any(prod(comb) == target_product for comb in combinations(arr, num_elements))", "solution_func": "def g(arr=[1, 2, 3, 4, 5], num_elements=3):\n    return arr", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], num_elements=2) -> bool:\n    \"\"\"\n    Find if there exists a subsequence of the given list with a target number of elements.\n\n    Example:\n    arr = [1, 2, 3, 4, 5]\n    num_elements = 3\n    output: True\n    \"\"\"\n    return len(arr) >= num_elements\ndef g(arr=[1, 2, 3, 4, 5], num_elements=3):\n    return arr\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 56, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], num_elements=2) -> bool:\n    \"\"\"\n    Find if there exists a subsequence of the given list with a target number of elements.\n\n    Example:\n    arr = [1, 2, 3, 4, 5]\n    num_elements = 3\n    output: True\n    \"\"\"\n    return len(arr) >= num_elements", "solution_func": "def g(arr=[1, 2, 3, 4, 5], num_elements=3):\n    return arr", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[float], threshold=0.5) -> bool:\n    \"\"\"\n    Given a list of floating-point numbers, return True if all numbers in the list are greater than or equal to the threshold,\n    otherwise return False.\n    \"\"\"\n    return all(x >= threshold for x in lst)\n\ndef g(threshold=0.5):\n    return [0.6, 0.7, 0.8, 0.9]\n\nassert f(g())\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 56, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(lst: List[float], threshold=0.5) -> bool:\n    \"\"\"\n    Given a list of floating-point numbers, return True if all numbers in the list are greater than or equal to the threshold,\n    otherwise return False.\n    \"\"\"\n    return all(x >= threshold for x in lst)", "solution_func": "def g(threshold=0.5):\n    return [0.6, 0.7, 0.8, 0.9]", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=102) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to target.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(target = 102):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n", "emb": null, "idx_generation": 57, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=102) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to target.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))", "solution_func": "def g(target = 102):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(words: List[str], target_length=5) -> bool:\n    \"\"\"Check if all the words in the list have a length greater than target_length.\"\"\"\n    return all((len(word) > target_length for word in words))\ndef g(target_length = 5):\n    return [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]\nassert f(g())\n", "emb": null, "idx_generation": 57, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], target_length=5) -> bool:\n    \"\"\"Check if all the words in the list have a length greater than target_length.\"\"\"\n    return all((len(word) > target_length for word in words))", "solution_func": "def g(target_length = 5):\n    return [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a subsequence of the list that sums up to target.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i-1] > j:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-nums[i-1]]\n    return dp[n][target]\ndef g(target = 20):\n    return [2, 5, 8, 10, 12, 14]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 57, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a subsequence of the list that sums up to target.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i-1] > j:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-nums[i-1]]\n    return dp[n][target]", "solution_func": "def g(target = 20):\n    return [2, 5, 8, 10, 12, 14]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(x: int, y: int, z: int, result=0) -> bool:\n    \"\"\"Check if the result of a mathematical operation is equal to a given value\"\"\"\n    return math.pow(x, y) + z == result\n\ndef g(x=2, y=3, z=5, result=0):\n    return math.pow(x, y) + z\n\nassert f(g(), result=13)\n", "emb": null, "idx_generation": 57, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: int, y: int, z: int, result=0) -> bool:\n    \"\"\"Check if the result of a mathematical operation is equal to a given value\"\"\"\n    return math.pow(x, y) + z == result", "solution_func": "def g(x=2, y=3, z=5, result=0):\n    return math.pow(x, y) + z", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(numbers: list, target: int, length: int, count: int) -> bool:\n    \"\"\"Check if a list contains a certain number of elements that add up to a target value\"\"\"\n    return sum(numbers[:length]) == target and numbers.count(numbers[0]) == count\n\ndef g(target=20, length=4, count=2):\n    numbers = [random.randint(1, 10) for _ in range(10)]\n    return numbers\n\nassert f(g(), target=20, length=4, count=2)\n", "emb": null, "idx_generation": 57, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(numbers: list, target: int, length: int, count: int) -> bool:\n    \"\"\"Check if a list contains a certain number of elements that add up to a target value\"\"\"\n    return sum(numbers[:length]) == target and numbers.count(numbers[0]) == count", "solution_func": "def g(target=20, length=4, count=2):\n    numbers = [random.randint(1, 10) for _ in range(10)]\n    return numbers", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport datetime\n\ndef f(date: str, year: int, month: int, day: int) -> bool:\n    \"\"\"Check if a given date is equal to a specific year, month, and day\"\"\"\n    return datetime.datetime.strptime(date, \"%Y-%m-%d\").year == year and datetime.datetime.strptime(date, \"%Y-%m-%d\").month == month and datetime.datetime.strptime(date, \"%Y-%m-%d\").day == day\n\ndef g(year=2021, month=12, day=25):\n    return datetime.datetime(year, month, day).strftime(\"%Y-%m-%d\")\n\nassert f(g(), year=2021, month=12, day=25)\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 57, "target_skills": null, "problem_func": "from typing import*\nimport datetime\n\ndef f(date: str, year: int, month: int, day: int) -> bool:\n    \"\"\"Check if a given date is equal to a specific year, month, and day\"\"\"\n    return datetime.datetime.strptime(date, \"%Y-%m-%d\").year == year and datetime.datetime.strptime(date, \"%Y-%m-%d\").month == month and datetime.datetime.strptime(date, \"%Y-%m-%d\").day == day", "solution_func": "def g(year=2021, month=12, day=25):\n    return datetime.datetime(year, month, day).strftime(\"%Y-%m-%d\")", "map_ix": [0, 0, 0, 1, 0, 1, 0, 0, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: int, a=987654321) -> bool:\n    \"\"\"Compute an integer that when squared equals perfect-square a.\"\"\"\n    return x ** 2 == a\ndef g(a = 987654321):\n    return int(a ** 0.5)\nassert f(g())\n", "emb": null, "idx_generation": 57, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, a=987654321) -> bool:\n    \"\"\"Compute an integer that when squared equals perfect-square a.\"\"\"\n    return x ** 2 == a", "solution_func": "def g(a = 987654321):\n    return int(a ** 0.5)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, perm='abcdefghijklmnopqrstuvwxyz', target='python is great') -> bool:\n    \"\"\"Find a string that, when a given permutation of characters is applied, has a given result.\"\"\"\n    return ''.join((perm[(perm.index(c) + 1) % len(perm)] if c in perm else c for c in s)) == target\ndef g(perm = 'abcdefghijklmnopqrstuvwxyz', target = 'python is great'):\n    return \"\".join((perm[(perm.index(c) - 1) % len(perm)] if c in perm else c) for c in target)\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 57, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, perm='abcdefghijklmnopqrstuvwxyz', target='python is great') -> bool:\n    \"\"\"Find a string that, when a given permutation of characters is applied, has a given result.\"\"\"\n    return ''.join((perm[(perm.index(c) + 1) % len(perm)] if c in perm else c for c in s)) == target", "solution_func": "def g(perm = 'abcdefghijklmnopqrstuvwxyz', target = 'python is great'):\n    return \"\".join((perm[(perm.index(c) - 1) % len(perm)] if c in perm else c) for c in target)", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(res: int, m=99887766554433221100, n=10) -> bool:\n    \"\"\"\n    Find the result of applying the following operation to integer m, n times: if the last digit is zero, remove\n    the zero, otherwise subtract 1.\n    \"\"\"\n    for i in range(n):\n        m = m - 1 if m % 10 else m // 10\n    return res == m\ndef g(m = 99887766554433221100, n = 10):\n    for i in range(n):\n        m = (m - 1 if m % 10 else m // 10)\n    return m\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 57, "target_skills": null, "problem_func": "from typing import*\ndef f(res: int, m=99887766554433221100, n=10) -> bool:\n    \"\"\"\n    Find the result of applying the following operation to integer m, n times: if the last digit is zero, remove\n    the zero, otherwise subtract 1.\n    \"\"\"\n    for i in range(n):\n        m = m - 1 if m % 10 else m // 10\n    return res == m", "solution_func": "def g(m = 99887766554433221100, n = 10):\n    for i in range(n):\n        m = (m - 1 if m % 10 else m // 10)\n    return m", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray) -> bool:\n    \"\"\"Check if a matrix is symmetric.\"\"\"\n    return np.array_equal(matrix, matrix.T)\n\ndef g():\n    matrix = np.array([[1, 2, 3], [2, 4, 5], [3, 5, 6]])\n    return matrix\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 57, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray) -> bool:\n    \"\"\"Check if a matrix is symmetric.\"\"\"\n    return np.array_equal(matrix, matrix.T)", "solution_func": "def g():\n    matrix = np.array([[1, 2, 3], [2, 4, 5], [3, 5, 6]])\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums = [2, 7, 11, 15], target = 9):\n    return nums, target\n\nassert f(*g())\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 58, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(nums = [2, 7, 11, 15], target = 9):\n    return nums, target", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if any two numbers in the list have a sum that is a perfect square.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if math.isqrt(nums[i] + nums[j])**2 == (nums[i] + nums[j]):\n                return True\n    return False\n\ndef g(nums = [1, 2, 3, 4, 5], target = 5):\n    return nums, target\n\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 58, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if any two numbers in the list have a sum that is a perfect square.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if math.isqrt(nums[i] + nums[j])**2 == (nums[i] + nums[j]):\n                return True\n    return False", "solution_func": "def g(nums = [1, 2, 3, 4, 5], target = 5):\n    return nums, target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are three numbers in the list that add up to the target.\"\"\"\n    nums.sort()\n    for i in range(len(nums)-2):\n        left = i + 1\n        right = len(nums) - 1\n        while left < right:\n            current_sum = nums[i] + nums[left] + nums[right]\n            if current_sum == target:\n                return True\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False\n\ndef g(nums = [1, 2, 3, 4, 5], target = 9):\n    return nums, target\n\nassert f(*g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 58, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are three numbers in the list that add up to the target.\"\"\"\n    nums.sort()\n    for i in range(len(nums)-2):\n        left = i + 1\n        right = len(nums) - 1\n        while left < right:\n            current_sum = nums[i] + nums[left] + nums[right]\n            if current_sum == target:\n                return True\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False", "solution_func": "def g(nums = [1, 2, 3, 4, 5], target = 9):\n    return nums, target", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, li=[5, 9, 2, 7, 4, 1, 8, 3, 6], k=3) -> bool:\n    \"\"\"Check if the sum of every kth element in a list is divisible by n\"\"\"\n    return sum(li[i] for i in range(k - 1, len(li), k)) % n == 0\ndef g(li=[5, 9, 2, 7, 4, 1, 8, 3, 6], k=3):\n    return li\nassert f(g())\n", "emb": null, "idx_generation": 58, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, li=[5, 9, 2, 7, 4, 1, 8, 3, 6], k=3) -> bool:\n    \"\"\"Check if the sum of every kth element in a list is divisible by n\"\"\"\n    return sum(li[i] for i in range(k - 1, len(li), k)) % n == 0", "solution_func": "def g(li=[5, 9, 2, 7, 4, 1, 8, 3, 6], k=3):\n    return li", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, li=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20], k=5) -> bool:\n    \"\"\"Check if the product of every kth element in a list is divisible by n\"\"\"\n    return all(x % n == 0 for x in (li[i] for i in range(k - 1, len(li), k)))\ndef g(li=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20], k=5):\n    return li\nassert f(g())\n", "emb": null, "idx_generation": 58, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, li=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20], k=5) -> bool:\n    \"\"\"Check if the product of every kth element in a list is divisible by n\"\"\"\n    return all(x % n == 0 for x in (li[i] for i in range(k - 1, len(li), k)))", "solution_func": "def g(li=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20], k=5):\n    return li", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, li=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k=2) -> bool:\n    \"\"\"\n    Check if there exists a pair of elements in a list that sums up to n. The elements must be at positions\n    that are multiples of k.\n    \"\"\"\n    return any(x + y == n for i, x in enumerate(li) for j, y in enumerate(li) if i % k == 0 and j % k == 0)\ndef g(li=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k=2):\n    return li\nassert f(g())\n", "emb": null, "idx_generation": 58, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, li=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k=2) -> bool:\n    \"\"\"\n    Check if there exists a pair of elements in a list that sums up to n. The elements must be at positions\n    that are multiples of k.\n    \"\"\"\n    return any(x + y == n for i, x in enumerate(li) for j, y in enumerate(li) if i % k == 0 and j % k == 0)", "solution_func": "def g(li=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k=2):\n    return li", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], target: int) -> bool:\n    \"\"\"Check if a target number can be obtained by adding up elements from a list of integers\"\"\"\n    return sum(x) == target\ndef g(target: int):\n    x = [1, 2, 3, 4, 5]\n    return x\nassert f(g())\n", "emb": null, "idx_generation": 58, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], target: int) -> bool:\n    \"\"\"Check if a target number can be obtained by adding up elements from a list of integers\"\"\"\n    return sum(x) == target", "solution_func": "def g(target: int):\n    x = [1, 2, 3, 4, 5]\n    return x", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int]) -> bool:\n    \"\"\"Check if a list of integers is in increasing order\"\"\"\n    return x == sorted(x)\ndef g():\n    return [5, 4, 3, 2, 1]\nassert f(g())\n", "emb": null, "idx_generation": 58, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(x: List[int]) -> bool:\n    \"\"\"Check if a list of integers is in increasing order\"\"\"\n    return x == sorted(x)", "solution_func": "def g():\n    return [5, 4, 3, 2, 1]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int]) -> bool:\n    \"\"\"Check if the sum of the even numbers in a list is greater than the sum of the odd numbers\"\"\"\n    even_sum = sum(num for num in x if num % 2 == 0)\n    odd_sum = sum(num for num in x if num % 2 != 0)\n    return even_sum > odd_sum\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g())\n", "emb": null, "idx_generation": 58, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(x: List[int]) -> bool:\n    \"\"\"Check if the sum of the even numbers in a list is greater than the sum of the odd numbers\"\"\"\n    even_sum = sum(num for num in x if num % 2 == 0)\n    odd_sum = sum(num for num in x if num % 2 != 0)\n    return even_sum > odd_sum", "solution_func": "def g():\n    return [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, target: str) -> bool:\n    \"\"\"Check if a string contains a target substring\"\"\"\n    return target in s\ndef g(target: str):\n    return \"This is a sample string that contains the target substring.\" if target else \"This is a sample string.\"\nassert f(g())\n", "emb": null, "idx_generation": 58, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target: str) -> bool:\n    \"\"\"Check if a string contains a target substring\"\"\"\n    return target in s", "solution_func": "def g(target: str):\n    return \"This is a sample string that contains the target substring.\" if target else \"This is a sample string.\"", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, a=3, b=4, c=5) -> bool:\n    \"\"\"Find n such that n**2 + a * n + b = c\"\"\"\n    return n**2 + a * n + b == c\ndef g(a=3, b=4, c=5):\n    discriminant = a**2 - 4 * b\n    if discriminant < 0:\n        return None\n    elif discriminant == 0:\n        return -a / 2\n    else:\n        root_1 = (-a + discriminant**0.5) / 2\n        root_2 = (-a - discriminant**0.5) / 2\n        return root_1, root_2\nassert f(g())\n", "emb": null, "idx_generation": 59, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=3, b=4, c=5) -> bool:\n    \"\"\"Find n such that n**2 + a * n + b = c\"\"\"\n    return n**2 + a * n + b == c", "solution_func": "def g(a=3, b=4, c=5):\n    discriminant = a**2 - 4 * b\n    if discriminant < 0:\n        return None\n    elif discriminant == 0:\n        return -a / 2\n    else:\n        root_1 = (-a + discriminant**0.5) / 2\n        root_2 = (-a - discriminant**0.5) / 2\n        return root_1, root_2", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, a=5, b=10) -> bool:\n    \"\"\"Find n such that the sum of the first n integers is equal to a*b\"\"\"\n    return sum(range(1, n+1)) == a * b\ndef g(a=5, b=10):\n    return a * b // 2 + 1\nassert f(g())\n", "emb": null, "idx_generation": 59, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=5, b=10) -> bool:\n    \"\"\"Find n such that the sum of the first n integers is equal to a*b\"\"\"\n    return sum(range(1, n+1)) == a * b", "solution_func": "def g(a=5, b=10):\n    return a * b // 2 + 1", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, a=3, b=4, c=5) -> bool:\n    \"\"\"Find n such that n**2 + a * n + b = c\"\"\"\n    return n**2 + a * n + b == c\ndef g(a=3, b=4, c=5):\n    return (c - b) / a\nassert f(g())\n", "emb": null, "idx_generation": 59, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=3, b=4, c=5) -> bool:\n    \"\"\"Find n such that n**2 + a * n + b = c\"\"\"\n    return n**2 + a * n + b == c", "solution_func": "def g(a=3, b=4, c=5):\n    return (c - b) / a", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, pattern: str=\"abab\", first_letter=\"a\", second_letter=\"b\") -> bool:\n    \"\"\"Check if a string follows a given pattern, where the first letter and the second letter of the pattern are represented by 'a' and 'b' respectively.\"\"\"\n    mapping = {}\n    words = s.split()\n    if len(words) != len(pattern):\n        return False\n    for i in range(len(pattern)):\n        if pattern[i] not in mapping:\n            if words[i] in mapping.values():\n                return False\n            mapping[pattern[i]] = words[i]\n        elif mapping[pattern[i]] != words[i]:\n            return False\n    return True\ndef g(pattern = \"abab\", first_letter = \"a\", second_letter = \"b\"):\n    return pattern\nassert f(g())\n", "emb": null, "idx_generation": 59, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, pattern: str=\"abab\", first_letter=\"a\", second_letter=\"b\") -> bool:\n    \"\"\"Check if a string follows a given pattern, where the first letter and the second letter of the pattern are represented by 'a' and 'b' respectively.\"\"\"\n    mapping = {}\n    words = s.split()\n    if len(words) != len(pattern):\n        return False\n    for i in range(len(pattern)):\n        if pattern[i] not in mapping:\n            if words[i] in mapping.values():\n                return False\n            mapping[pattern[i]] = words[i]\n        elif mapping[pattern[i]] != words[i]:\n            return False\n    return True", "solution_func": "def g(pattern = \"abab\", first_letter = \"a\", second_letter = \"b\"):\n    return pattern", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(num: int, k=2) -> bool:\n    \"\"\"Check if a number is a power of k.\"\"\"\n    if num <= 0:\n        return False\n    while num > 1:\n        if num % k != 0:\n            return False\n        num //= k\n    return True\ndef g(k = 2):\n    return k**3\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 59, "target_skills": null, "problem_func": "from typing import*\ndef f(num: int, k=2) -> bool:\n    \"\"\"Check if a number is a power of k.\"\"\"\n    if num <= 0:\n        return False\n    while num > 1:\n        if num % k != 0:\n            return False\n        num //= k\n    return True", "solution_func": "def g(k = 2):\n    return k**3", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], m=3, n=3) -> bool:\n    \"\"\"Check if the given matrix is a magic square, where the sum of each row, each column, and each diagonal is the same.\"\"\"\n    target_sum = sum(matrix[0])\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    for col in range(n):\n        if sum(matrix[i][col] for i in range(m)) != target_sum:\n            return False\n    if sum(matrix[i][i] for i in range(m)) != target_sum:\n        return False\n    if sum(matrix[i][m-i-1] for i in range(m)) != target_sum:\n        return False\n    return True\ndef g(m = 3, n = 3):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n", "emb": null, "idx_generation": 59, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], m=3, n=3) -> bool:\n    \"\"\"Check if the given matrix is a magic square, where the sum of each row, each column, and each diagonal is the same.\"\"\"\n    target_sum = sum(matrix[0])\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    for col in range(n):\n        if sum(matrix[i][col] for i in range(m)) != target_sum:\n            return False\n    if sum(matrix[i][i] for i in range(m)) != target_sum:\n        return False\n    if sum(matrix[i][m-i-1] for i in range(m)) != target_sum:\n        return False\n    return True", "solution_func": "def g(m = 3, n = 3):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=14, k=3) -> bool:\n    \"\"\"\n    Find a sublist of length k from the list nums such that the sum of the sublist is equal to the target.\n    \"\"\"\n    for i in range(len(nums)):\n        sublist = nums[i:i+k]\n        if sum(sublist) == target:\n            return True\n    return False\ndef g(target = 14, k = 3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n", "emb": null, "idx_generation": 59, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=14, k=3) -> bool:\n    \"\"\"\n    Find a sublist of length k from the list nums such that the sum of the sublist is equal to the target.\n    \"\"\"\n    for i in range(len(nums)):\n        sublist = nums[i:i+k]\n        if sum(sublist) == target:\n            return True\n    return False", "solution_func": "def g(target = 14, k = 3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(word: str, num_vowels=3) -> bool:\n    \"\"\"\n    Check if a word contains at least num_vowels number of vowels.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in word:\n        if char.lower() in vowels:\n            count += 1\n    return count >= num_vowels\ndef g(num_vowels = 3):\n    return \"python\"\nassert f(g())\n", "emb": null, "idx_generation": 59, "target_skills": null, "problem_func": "from typing import*\ndef f(word: str, num_vowels=3) -> bool:\n    \"\"\"\n    Check if a word contains at least num_vowels number of vowels.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in word:\n        if char.lower() in vowels:\n            count += 1\n    return count >= num_vowels", "solution_func": "def g(num_vowels = 3):\n    return \"python\"", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Check if there exists two numbers in the list nums such that their sum is equal to the target.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target = 10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 59, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Check if there exists two numbers in the list nums such that their sum is equal to the target.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target = 10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target\"\"\"\n    return any((x + y == target for x in nums for y in nums))\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 59, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target\"\"\"\n    return any((x + y == target for x in nums for y in nums))", "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(x: int, a=17, b=3) -> bool:\n    \"\"\"Check if a number is a perfect square and its square root is divisible by b.\"\"\"\n    return math.isqrt(x) ** 2 == x and math.isqrt(x) % b == 0\n\ndef g(a = 17, b = 3):\n    return b ** 2\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 60, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: int, a=17, b=3) -> bool:\n    \"\"\"Check if a number is a perfect square and its square root is divisible by b.\"\"\"\n    return math.isqrt(x) ** 2 == x and math.isqrt(x) % b == 0", "solution_func": "def g(a = 17, b = 3):\n    return b ** 2", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(lst: list, a=3, b=7) -> bool:\n    \"\"\"Check if the sum of two randomly-selected numbers from the list is equal to a and the difference is equal to b.\"\"\"\n    num1 = random.choice(lst)\n    num2 = random.choice(lst)\n    return num1 + num2 == a and abs(num1 - num2) == b\n\ndef g(a = 3, b = 7):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n", "emb": null, "idx_generation": 60, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(lst: list, a=3, b=7) -> bool:\n    \"\"\"Check if the sum of two randomly-selected numbers from the list is equal to a and the difference is equal to b.\"\"\"\n    num1 = random.choice(lst)\n    num2 = random.choice(lst)\n    return num1 + num2 == a and abs(num1 - num2) == b", "solution_func": "def g(a = 3, b = 7):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, a=2022, b=1) -> bool:\n    \"\"\"Check if the year of the date is equal to a and the month is equal to b.\"\"\"\n    return date.year == a and date.month == b\n\ndef g(a = 2022, b = 1):\n    return datetime.date.today()\n\nassert f(g())\n", "emb": null, "idx_generation": 60, "target_skills": null, "problem_func": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, a=2022, b=1) -> bool:\n    \"\"\"Check if the year of the date is equal to a and the month is equal to b.\"\"\"\n    return date.year == a and date.month == b", "solution_func": "def g(a = 2022, b = 1):\n    return datetime.date.today()", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, k=5) -> bool:\n    \"\"\"\n    Check if the sum of any k consecutive elements in the array is equal to k.\n    \"\"\"\n    for i in range(len(arr) - k + 1):\n        if np.sum(arr[i:i+k]) == k:\n            return True\n    return False\n\ndef g(arr=np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]), k=5):\n    return arr\n\nassert f(g())\n", "emb": null, "idx_generation": 60, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, k=5) -> bool:\n    \"\"\"\n    Check if the sum of any k consecutive elements in the array is equal to k.\n    \"\"\"\n    for i in range(len(arr) - k + 1):\n        if np.sum(arr[i:i+k]) == k:\n            return True\n    return False", "solution_func": "def g(arr=np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]), k=5):\n    return arr", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, k=3) -> bool:\n    \"\"\"\n    Check if the binary representation of the number n contains exactly k consecutive 1s.\n    \"\"\"\n    binary = bin(n)[2:]\n    return str(k * '1') in binary\n\ndef g(k=3):\n    return int(k * '1', 2)\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 60, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, k=3) -> bool:\n    \"\"\"\n    Check if the binary representation of the number n contains exactly k consecutive 1s.\n    \"\"\"\n    binary = bin(n)[2:]\n    return str(k * '1') in binary", "solution_func": "def g(k=3):\n    return int(k * '1', 2)", "map_ix": [1, 1, 0, 0, 1, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, t='abcdefghijklmnopqrstuvwxyz') -> bool:\n    \"\"\"\n    Check if all characters in string s are present in string t.\n    \"\"\"\n    return all(c in t for c in s)\n\ndef g(t='abcdefghijklmnopqrstuvwxyz'):\n    return t\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 60, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, t='abcdefghijklmnopqrstuvwxyz') -> bool:\n    \"\"\"\n    Check if all characters in string s are present in string t.\n    \"\"\"\n    return all(c in t for c in s)", "solution_func": "def g(t='abcdefghijklmnopqrstuvwxyz'):\n    return t", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(li: List[int], target=[]) -> bool:\n    \"\"\"Find a list that when added element-wise to target list gives the result [0, 0, 0, 0]\"\"\"\n    return [x + y for x, y in zip(li, target)] == [0, 0, 0, 0]\n\ndef g(target=[0, 0, 0, 0]):\n    return [-x for x in target]\n\nassert f(g())\n", "emb": null, "idx_generation": 60, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(li: List[int], target=[]) -> bool:\n    \"\"\"Find a list that when added element-wise to target list gives the result [0, 0, 0, 0]\"\"\"\n    return [x + y for x, y in zip(li, target)] == [0, 0, 0, 0]", "solution_func": "def g(target=[0, 0, 0, 0]):\n    return [-x for x in target]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(li: List[int], target=[]) -> bool:\n    \"\"\"Check if the list contains two elements that sum up to the target number\"\"\"\n    for i, num1 in enumerate(li):\n        for num2 in li[i+1:]:\n            if num1 + num2 == target:\n                return True\n    return False\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n", "emb": null, "idx_generation": 60, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(li: List[int], target=[]) -> bool:\n    \"\"\"Check if the list contains two elements that sum up to the target number\"\"\"\n    for i, num1 in enumerate(li):\n        for num2 in li[i+1:]:\n            if num1 + num2 == target:\n                return True\n    return False", "solution_func": "def g(target=0):\n    return [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(li: List[int], target=[]) -> bool:\n    \"\"\"Check if the list contains two consecutive elements that sum up to the target number\"\"\"\n    for i in range(len(li) - 1):\n        if li[i] + li[i+1] == target:\n            return True\n    return False\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n", "emb": null, "idx_generation": 60, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(li: List[int], target=[]) -> bool:\n    \"\"\"Check if the list contains two consecutive elements that sum up to the target number\"\"\"\n    for i in range(len(li) - 1):\n        if li[i] + li[i+1] == target:\n            return True\n    return False", "solution_func": "def g(target=0):\n    return [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(n: int, nums=[5, 10, 15], lower_bound=100) -> bool:\n    \"\"\"Check if the sum of the square roots of a list of numbers is greater than or equal to a given value.\"\"\"\n    return sum(math.sqrt(i) for i in nums) >= n and all(i >= lower_bound for i in nums)\n\ndef g(nums=[5, 10, 15], lower_bound=100):\n    return sum(math.sqrt(i) for i in nums)\n\nassert f(g())\n", "emb": null, "idx_generation": 60, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, nums=[5, 10, 15], lower_bound=100) -> bool:\n    \"\"\"Check if the sum of the square roots of a list of numbers is greater than or equal to a given value.\"\"\"\n    return sum(math.sqrt(i) for i in nums) >= n and all(i >= lower_bound for i in nums)", "solution_func": "def g(nums=[5, 10, 15], lower_bound=100):\n    return sum(math.sqrt(i) for i in nums)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=0.5, b=0.25) -> bool:\n    \"\"\"Check if the square root of x divided by a is equal to b\"\"\"\n    return math.sqrt(x) / a == b\n\ndef g(a=0.5, b=0.25):\n    return (b * a) ** 2\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 61, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, a=0.5, b=0.25) -> bool:\n    \"\"\"Check if the square root of x divided by a is equal to b\"\"\"\n    return math.sqrt(x) / a == b", "solution_func": "def g(a=0.5, b=0.25):\n    return (b * a) ** 2", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\n\ndef f(x: int, a=10, b=20) -> bool:\n    \"\"\"Check if x is a random number between a and b\"\"\"\n    return a <= x <= b\n\ndef g(a=10, b=20):\n    return random.randint(a, b)\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 61, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(x: int, a=10, b=20) -> bool:\n    \"\"\"Check if x is a random number between a and b\"\"\"\n    return a <= x <= b", "solution_func": "def g(a=10, b=20):\n    return random.randint(a, b)", "map_ix": [1, 1, 0, 1, 0, 0, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport datetime\n\ndef f(n: int, a=2022, b=1, c=1) -> bool:\n    \"\"\"Check if the current date is January 1, 2022\"\"\"\n    now = datetime.datetime.now()\n    return now.year == a and now.month == b and now.day == c\n\ndef g(a=2022, b=1, c=1):\n    return 0\n\nassert f(g())\n", "emb": null, "idx_generation": 61, "target_skills": null, "problem_func": "from typing import*\nimport datetime\n\ndef f(n: int, a=2022, b=1, c=1) -> bool:\n    \"\"\"Check if the current date is January 1, 2022\"\"\"\n    now = datetime.datetime.now()\n    return now.year == a and now.month == b and now.day == c", "solution_func": "def g(a=2022, b=1, c=1):\n    return 0", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target.\"\"\"\n    return any(target - num in nums for num in nums)\ndef g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target\nassert f(*g())\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 61, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target.\"\"\"\n    return any(target - num in nums for num in nums)", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if the given number is a palindrome.\"\"\"\n    return str(n) == str(n)[::-1]\ndef g(n=12321):\n    return n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 61, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if the given number is a palindrome.\"\"\"\n    return str(n) == str(n)[::-1]", "solution_func": "def g(n=12321):\n    return n", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a symmetric matrix.\"\"\"\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix[0])))\ndef g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 61, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a symmetric matrix.\"\"\"\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix[0])))", "solution_func": "def g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=5, b=8) -> bool:\n    \"\"\"Check if the number n is divisible by both a and b.\"\"\"\n    return n % a == 0 and n % b == 0\ndef g(a=5, b=8):\n    n = a * b\n    return n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 61, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=5, b=8) -> bool:\n    \"\"\"Check if the number n is divisible by both a and b.\"\"\"\n    return n % a == 0 and n % b == 0", "solution_func": "def g(a=5, b=8):\n    n = a * b\n    return n", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, substr='python') -> bool:\n    \"\"\"Check if the given substring is present in the string.\"\"\"\n    return substr in string\ndef g(substr='python'):\n    string = 'Hello, I love python programming!'\n    return string\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 61, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, substr='python') -> bool:\n    \"\"\"Check if the given substring is present in the string.\"\"\"\n    return substr in string", "solution_func": "def g(substr='python'):\n    string = 'Hello, I love python programming!'\n    return string", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date: datetime, year=2022) -> bool:\n    \"\"\"Check if the given date is in the future compared to the specified year.\"\"\"\n    return date.year > year\ndef g(year=2022):\n    current_date = datetime.now()\n    future_date = current_date.replace(year=year + 1)\n    return future_date\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 61, "target_skills": null, "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(date: datetime, year=2022) -> bool:\n    \"\"\"Check if the given date is in the future compared to the specified year.\"\"\"\n    return date.year > year", "solution_func": "def g(year=2022):\n    current_date = datetime.now()\n    future_date = current_date.replace(year=year + 1)\n    return future_date", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target: int, k: int = 3) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, find if there exists a subarray of length k whose sum is equal to the target value.\n    \"\"\"\n    return any(sum(arr[i:i+k]) == target for i in range(len(arr)-k+1))\ndef g(arr: List[int], target: int, k: int = 3):\n    return arr, target, k\nassert f(g())\n", "emb": null, "idx_generation": 61, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int, k: int = 3) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, find if there exists a subarray of length k whose sum is equal to the target value.\n    \"\"\"\n    return any(sum(arr[i:i+k]) == target for i in range(len(arr)-k+1))", "solution_func": "def g(arr: List[int], target: int, k: int = 3):\n    return arr, target, k", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, num_list=[2, 4, 6, 8, 10]) -> bool:\n    \"\"\"Check if a number is divisible by all the numbers in a list\"\"\"\n    return all(n % num == 0 for num in num_list)\ndef g(num_list=[2, 4, 6, 8, 10]):\n    n = 1\n    for num in num_list:\n        n *= num\n    return n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 62, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, num_list=[2, 4, 6, 8, 10]) -> bool:\n    \"\"\"Check if a number is divisible by all the numbers in a list\"\"\"\n    return all(n % num == 0 for num in num_list)", "solution_func": "def g(num_list=[2, 4, 6, 8, 10]):\n    n = 1\n    for num in num_list:\n        n *= num\n    return n", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(n: int, radius=10, height=20, volume=12566.37) -> bool:\n    \"\"\"Check if the volume of a cylinder is equal to a given value\"\"\"\n    return math.isclose(math.pi * radius ** 2 * height, volume)\ndef g(radius=10, height=20, volume=12566.37):\n    return volume / (math.pi * radius ** 2)\nassert f(g())\n", "emb": null, "idx_generation": 62, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, radius=10, height=20, volume=12566.37) -> bool:\n    \"\"\"Check if the volume of a cylinder is equal to a given value\"\"\"\n    return math.isclose(math.pi * radius ** 2 * height, volume)", "solution_func": "def g(radius=10, height=20, volume=12566.37):\n    return volume / (math.pi * radius ** 2)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, num_list=[1, 2, 3, 4, 5, 6]) -> bool:\n    \"\"\"Check if a number is present in a list\"\"\"\n    return n in num_list\ndef g(num_list=[1, 2, 3, 4, 5, 6]):\n    return num_list[0]\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 62, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, num_list=[1, 2, 3, 4, 5, 6]) -> bool:\n    \"\"\"Check if a number is present in a list\"\"\"\n    return n in num_list", "solution_func": "def g(num_list=[1, 2, 3, 4, 5, 6]):\n    return num_list[0]", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=0):\n    nums = [1, 3, 5, 7, 9]\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 62, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(target=0):\n    nums = [1, 3, 5, 7, 9]\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target number exists in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(target=0):\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n    return matrix\n\nassert f(g())\n", "emb": null, "idx_generation": 62, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target number exists in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(target=0):\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exist three numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)-2):\n        for j in range(i+1, len(nums)-1):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=0):\n    nums = [1, 2, 3, 4, 5]\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 62, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exist three numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)-2):\n        for j in range(i+1, len(nums)-1):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False", "solution_func": "def g(target=0):\n    nums = [1, 2, 3, 4, 5]\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "import math\nfrom typing import*\nfrom math import gcd\n\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"Check if it's possible to combine the numbers using basic arithmetic operations (+, -, *, /) to get the target\"\"\"\n    if len(nums) == 1:\n        return nums[0] == target\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            if i != j:\n                new_nums = [nums[k] for k in range(len(nums)) if k != i and k != j]\n                new_nums.append(nums[i] + nums[j])\n                if f(new_nums, target):\n                    return True\n                new_nums.pop()\n                new_nums.append(nums[i] - nums[j])\n                if f(new_nums, target):\n                    return True\n                new_nums.pop()\n                new_nums.append(nums[i] * nums[j])\n                if f(new_nums, target):\n                    return True\n                new_nums.pop()\n                if nums[j] != 0 and nums[i] % nums[j] == 0:\n                    new_nums.append(nums[i] // nums[j])\n                    if f(new_nums, target):\n                        return True\n                    new_nums.pop()\n    return False\n\ndef g(nums=[4, 3, 2, 1]):\n    return nums\n\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 62, "target_skills": null, "problem_func": "import math\nfrom typing import*\nfrom math import gcd\n\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"Check if it's possible to combine the numbers using basic arithmetic operations (+, -, *, /) to get the target\"\"\"\n    if len(nums) == 1:\n        return nums[0] == target\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            if i != j:\n                new_nums = [nums[k] for k in range(len(nums)) if k != i and k != j]\n                new_nums.append(nums[i] + nums[j])\n                if f(new_nums, target):\n                    return True\n                new_nums.pop()\n                new_nums.append(nums[i] - nums[j])\n                if f(new_nums, target):\n                    return True\n                new_nums.pop()\n                new_nums.append(nums[i] * nums[j])\n                if f(new_nums, target):\n                    return True\n                new_nums.pop()\n                if nums[j] != 0 and nums[i] % nums[j] == 0:\n                    new_nums.append(nums[i] // nums[j])\n                    if f(new_nums, target):\n                        return True\n                    new_nums.pop()\n    return False", "solution_func": "def g(nums=[4, 3, 2, 1]):\n    return nums", "map_ix": [0, 1, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if there is a row or column in the matrix that adds up to the target\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    for col in zip(*matrix):\n        if sum(col) == target:\n            return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g())\n", "emb": null, "idx_generation": 62, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if there is a row or column in the matrix that adds up to the target\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    for col in zip(*matrix):\n        if sum(col) == target:\n            return True\n    return False", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there are three numbers in the list that form a Pythagorean triple\"\"\"\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            for k in range(len(nums)):\n                if i != j and i != k and j != k:\n                    a = nums[i]\n                    b = nums[j]\n                    c = nums[k]\n                    if a ** 2 + b ** 2 == c ** 2:\n                        return True\n    return False\n\ndef g(nums=[3, 4, 5, 6, 7]):\n    return nums\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 62, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there are three numbers in the list that form a Pythagorean triple\"\"\"\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            for k in range(len(nums)):\n                if i != j and i != k and j != k:\n                    a = nums[i]\n                    b = nums[j]\n                    c = nums[k]\n                    if a ** 2 + b ** 2 == c ** 2:\n                        return True\n    return False", "solution_func": "def g(nums=[3, 4, 5, 6, 7]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, count=2, letter='a') -> bool:\n    \"\"\"Check if a specific letter appears a certain number of times in a string\"\"\"\n    return s.count(letter) == count\ndef g(count=2, letter='a'):\n    return 'a' * count\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 62, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, count=2, letter='a') -> bool:\n    \"\"\"Check if a specific letter appears a certain number of times in a string\"\"\"\n    return s.count(letter) == count", "solution_func": "def g(count=2, letter='a'):\n    return 'a' * count", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: List[int]) -> bool:\n    \"\"\"Find a list of three integers whose sum is 0.\"\"\"\n    return len(x) == 3 and sum(x) == 0\ndef g():\n    return [-1, 0, 1]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 63, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int]) -> bool:\n    \"\"\"Find a list of three integers whose sum is 0.\"\"\"\n    return len(x) == 3 and sum(x) == 0", "solution_func": "def g():\n    return [-1, 0, 1]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\ndef f(n: int, year_len=365) -> bool:\n    \"\"\"Find n such that the probability of two people having the same birthday in a group of n is near 1/2.\"\"\"\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 0.5) ** 2 <= year_len\ndef g(year_len=365):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 63, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(n: int, year_len=365) -> bool:\n    \"\"\"Find n such that the probability of two people having the same birthday in a group of n is near 1/2.\"\"\"\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 0.5) ** 2 <= year_len", "solution_func": "def g(year_len=365):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]", "map_ix": [0, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: str, parts=['numegixuly', 'koxyfihimurukothasyl'], string='numegixulypyjetkoxyfihimurukothasyl') -> bool:\n    \"\"\"\n    Find a separator that when used to join a given string gives a certain result.\n    This is related to the previous problem but there are some edge cases that differ.\n    \"\"\"\n    return x.join(parts) == string\ndef g(parts=['numegixuly', 'koxyfihimurukothasyl'], string='numegixulypyjetkoxyfihimurukothasyl'):\n    if len(parts) <= 1:\n        return \"\"\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 63, "target_skills": null, "problem_func": "from typing import*\ndef f(x: str, parts=['numegixuly', 'koxyfihimurukothasyl'], string='numegixulypyjetkoxyfihimurukothasyl') -> bool:\n    \"\"\"\n    Find a separator that when used to join a given string gives a certain result.\n    This is related to the previous problem but there are some edge cases that differ.\n    \"\"\"\n    return x.join(parts) == string", "solution_func": "def g(parts=['numegixuly', 'koxyfihimurukothasyl'], string='numegixulypyjetkoxyfihimurukothasyl'):\n    if len(parts) <= 1:\n        return \"\"\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Return True if there exists a subarray of length k in nums that contains only even numbers\"\"\"\n    return any(all(num % 2 == 0 for num in nums[i:i+k]) for i in range(len(nums) - k + 1))\ndef g(k = 3):\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\nassert f(g())\n", "emb": [1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 63, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Return True if there exists a subarray of length k in nums that contains only even numbers\"\"\"\n    return any(all(num % 2 == 0 for num in nums[i:i+k]) for i in range(len(nums) - k + 1))", "solution_func": "def g(k = 3):\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]", "map_ix": [1, 1, 1, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(words: List[str], length=5) -> bool:\n    \"\"\"Return True if all words in the list have a length greater than or equal to length\"\"\"\n    return all(len(word) >= length for word in words)\ndef g(length = 5):\n    return [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]\nassert f(g())\n", "emb": null, "idx_generation": 63, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], length=5) -> bool:\n    \"\"\"Return True if all words in the list have a length greater than or equal to length\"\"\"\n    return all(len(word) >= length for word in words)", "solution_func": "def g(length = 5):\n    return [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Return True if there exists a row in the matrix that contains the target number\"\"\"\n    return any(target in row for row in matrix)\ndef g(target = 10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n", "emb": null, "idx_generation": 63, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Return True if there exists a row in the matrix that contains the target number\"\"\"\n    return any(target in row for row in matrix)", "solution_func": "def g(target = 10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find if there are three numbers in a list that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums: List[int], target: int):\n    return nums, target\n\nassert f(g([1, 2, 3, 4, 5, 6], 9))\n", "emb": null, "idx_generation": 63, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find if there are three numbers in a list that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False", "solution_func": "def g(nums: List[int], target: int):\n    return nums, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find if there are two numbers in a list that multiply to give the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g(nums: List[int], target: int):\n    return nums, target\n\nassert f(g([1, 2, 3, 4, 5, 6], 12))\n", "emb": null, "idx_generation": 63, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find if there are two numbers in a list that multiply to give the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums: List[int], target: int):\n    return nums, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, substr: str = 'abc') -> bool:\n    \"\"\"Check if a substring exists in a string.\"\"\"\n    return substr in s\n\ndef g(s: str, substr: str):\n    return s, substr\n\nassert f(g('abcdefg', 'cde'))\n", "emb": null, "idx_generation": 63, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substr: str = 'abc') -> bool:\n    \"\"\"Check if a substring exists in a string.\"\"\"\n    return substr in s", "solution_func": "def g(s: str, substr: str):\n    return s, substr", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], k=3, target=10) -> bool:\n    \"\"\"Find if there exists a k-element subset of nums that sums up to target.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, k))\ndef g(k=3, target=10):\n    return (k, target)\nassert f(g())\n", "emb": null, "idx_generation": 63, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], k=3, target=10) -> bool:\n    \"\"\"Find if there exists a k-element subset of nums that sums up to target.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, k))", "solution_func": "def g(k=3, target=10):\n    return (k, target)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Check if a given substring is present in a string.\"\"\"\n    return substring in s\ndef g(substring='abc'):\n    return substring\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 64, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Check if a given substring is present in a string.\"\"\"\n    return substring in s", "solution_func": "def g(substring='abc'):\n    return substring", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, divisor=7, power=3) -> bool:\n    \"\"\"Check if a number is divisible by a power of a given divisor.\"\"\"\n    return n % (divisor ** power) == 0\ndef g(divisor=7, power=3):\n    return divisor ** power\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 64, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, divisor=7, power=3) -> bool:\n    \"\"\"Check if a number is divisible by a power of a given divisor.\"\"\"\n    return n % (divisor ** power) == 0", "solution_func": "def g(divisor=7, power=3):\n    return divisor ** power", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(lst: List[int], target_sum=100, num_elements=3) -> bool:\n    \"\"\"Check if there exists a sublist of a list whose sum is equal to a target sum.\"\"\"\n    from itertools import combinations\n    for comb in combinations(lst, num_elements):\n        if sum(comb) == target_sum:\n            return True\n    return False\ndef g(target_sum=100, num_elements=3):\n    return target_sum, num_elements\nassert f(g())\n", "emb": null, "idx_generation": 64, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(lst: List[int], target_sum=100, num_elements=3) -> bool:\n    \"\"\"Check if there exists a sublist of a list whose sum is equal to a target sum.\"\"\"\n    from itertools import combinations\n    for comb in combinations(lst, num_elements):\n        if sum(comb) == target_sum:\n            return True\n    return False", "solution_func": "def g(target_sum=100, num_elements=3):\n    return target_sum, num_elements", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is symmetric along its main diagonal\"\"\"\n    n = len(matrix)\n    return all(matrix[i][j] == matrix[j][i] for i in range(n) for j in range(n))\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\nassert f(g())\n", "emb": [1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 64, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is symmetric along its main diagonal\"\"\"\n    n = len(matrix)\n    return all(matrix[i][j] == matrix[j][i] for i in range(n) for j in range(n))", "solution_func": "def g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]", "map_ix": [1, 0, 1, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(words: List[str], prefix='pre', suffix='fix') -> bool:\n    \"\"\"Check if all words have the given prefix and suffix\"\"\"\n    return all(word.startswith(prefix) and word.endswith(suffix) for word in words)\ndef g(prefix='pre', suffix='fix'):\n    return ['prefix', 'suffix', 'prefixsuffix']\nassert f(g())\n", "emb": null, "idx_generation": 64, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], prefix='pre', suffix='fix') -> bool:\n    \"\"\"Check if all words have the given prefix and suffix\"\"\"\n    return all(word.startswith(prefix) and word.endswith(suffix) for word in words)", "solution_func": "def g(prefix='pre', suffix='fix'):\n    return ['prefix', 'suffix', 'prefixsuffix']", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target=100, operations=['+', '-']) -> bool:\n    \"\"\"Check if it is possible to reach the target number by performing operations on the given numbers\"\"\"\n    import itertools\n    for ops in itertools.product(operations, repeat=len(numbers)-1):\n        expression = ''.join('{}{}{}'.format(n, op, b) for n, op, b in zip(numbers, ops, numbers[1:]))\n        if eval(expression) == target:\n            return True\n    return False\ndef g(target=100, operations=['+', '-']):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n", "emb": null, "idx_generation": 64, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target=100, operations=['+', '-']) -> bool:\n    \"\"\"Check if it is possible to reach the target number by performing operations on the given numbers\"\"\"\n    import itertools\n    for ops in itertools.product(operations, repeat=len(numbers)-1):\n        expression = ''.join('{}{}{}'.format(n, op, b) for n, op, b in zip(numbers, ops, numbers[1:]))\n        if eval(expression) == target:\n            return True\n    return False", "solution_func": "def g(target=100, operations=['+', '-']):\n    return [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, k=5, m=3) -> bool:\n    \"\"\"Check if a number is a multiple of k and is greater than m.\"\"\"\n    return n % k == 0 and n > m\ndef g(k = 5, m = 3):\n    return k * (m + 1)\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 64, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, k=5, m=3) -> bool:\n    \"\"\"Check if a number is a multiple of k and is greater than m.\"\"\"\n    return n % k == 0 and n > m", "solution_func": "def g(k = 5, m = 3):\n    return k * (m + 1)", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, substring='abc') -> bool:\n    \"\"\"Check if a string contains a specific substring.\"\"\"\n    return substring in string\ndef g(substring = 'abc'):\n    return substring * 2\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 64, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, substring='abc') -> bool:\n    \"\"\"Check if a string contains a specific substring.\"\"\"\n    return substring in string", "solution_func": "def g(substring = 'abc'):\n    return substring * 2", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in a list that sum up to a given target.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target = 10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n", "emb": null, "idx_generation": 64, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in a list that sum up to a given target.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))", "solution_func": "def g(target = 10):\n    return [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=100) -> bool:\n    \"\"\"\n    Given a matrix of integers, find if there exists a path from the top left corner to the bottom right corner\n    such that the sum of the integers along the path is equal to the target.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    def dfs(i, j, curr_sum):\n        if i == rows - 1 and j == cols - 1:\n            return curr_sum + matrix[i][j] == target\n        if i < rows - 1 and dfs(i + 1, j, curr_sum + matrix[i][j]):\n            return True\n        if j < cols - 1 and dfs(i, j + 1, curr_sum + matrix[i][j]):\n            return True\n        return False\n\n    return dfs(0, 0, 0)\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=100):\n    return matrix\nassert f(g()) == True", "emb": null, "idx_generation": 64, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=100) -> bool:\n    \"\"\"\n    Given a matrix of integers, find if there exists a path from the top left corner to the bottom right corner\n    such that the sum of the integers along the path is equal to the target.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    def dfs(i, j, curr_sum):\n        if i == rows - 1 and j == cols - 1:\n            return curr_sum + matrix[i][j] == target\n        if i < rows - 1 and dfs(i + 1, j, curr_sum + matrix[i][j]):\n            return True\n        if j < cols - 1 and dfs(i, j + 1, curr_sum + matrix[i][j]):\n            return True\n        return False\n\n    return dfs(0, 0, 0)", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=100):\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, m: int, x: int, y: int) -> bool:\n    \"\"\"\n    Check if a number is divisible by the product of two other numbers\n    \"\"\"\n    return n % (x * y) == 0 and m % (x * y) == 0\n\ndef g(x: int, y: int):\n    return int(sqrt(x * y)), int(sqrt(x * y))\n\nassert f(g())\n", "emb": null, "idx_generation": 65, "target_skills": null, "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, m: int, x: int, y: int) -> bool:\n    \"\"\"\n    Check if a number is divisible by the product of two other numbers\n    \"\"\"\n    return n % (x * y) == 0 and m % (x * y) == 0", "solution_func": "def g(x: int, y: int):\n    return int(sqrt(x * y)), int(sqrt(x * y))", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: str, m: str, x: str) -> bool:\n    \"\"\"\n    Check if a string is a substring of another string\n    \"\"\"\n    return x in n or x in m\n\ndef g(n: str, m: str):\n    return n + m\n\nassert f(g())\n", "emb": null, "idx_generation": 65, "target_skills": null, "problem_func": "from typing import*\ndef f(n: str, m: str, x: str) -> bool:\n    \"\"\"\n    Check if a string is a substring of another string\n    \"\"\"\n    return x in n or x in m", "solution_func": "def g(n: str, m: str):\n    return n + m", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, m: int, x: int, y: int) -> bool:\n    \"\"\"\n    Check if two numbers have the same remainder when divided by another number\n    \"\"\"\n    return n % x == m % x and n % y == m % y\n\ndef g(x: int, y: int):\n    return x, y\n\nassert f(g())\n", "emb": null, "idx_generation": 65, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m: int, x: int, y: int) -> bool:\n    \"\"\"\n    Check if two numbers have the same remainder when divided by another number\n    \"\"\"\n    return n % x == m % x and n % y == m % y", "solution_func": "def g(x: int, y: int):\n    return x, y", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, char_count=4, target_count=3) -> bool:\n    \"\"\"Find a character that occurs at least target_count times in every block of char_count characters in the string.\"\"\"\n    return all(s[i:i+char_count].count(s[i]) >= target_count for i in range(len(s)-char_count+1))\ndef g(char_count = 4, target_count = 3):\n    from collections import Counter\n    s = \"abracadabra\"\n    return max(Counter(s[i:i+char_count]) for i in range(len(s)-char_count+1), key=lambda x: sum(x.values()))\nassert f(g())\n", "emb": null, "idx_generation": 65, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, char_count=4, target_count=3) -> bool:\n    \"\"\"Find a character that occurs at least target_count times in every block of char_count characters in the string.\"\"\"\n    return all(s[i:i+char_count].count(s[i]) >= target_count for i in range(len(s)-char_count+1))", "solution_func": "def g(char_count = 4, target_count = 3):\n    from collections import Counter\n    s = \"abracadabra\"\n    return max(Counter(s[i:i+char_count]) for i in range(len(s)-char_count+1), key=lambda x: sum(x.values()))", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(words: List[str], target_length=7, target_count=2) -> bool:\n    \"\"\"Find a target_count number of words that have a length of target_length.\"\"\"\n    return sum(len(word) == target_length for word in words) >= target_count\ndef g(target_length = 7, target_count = 2):\n    words = [\"apple\", \"banana\", \"orange\", \"grape\", \"watermelon\", \"pineapple\"]\n    return [word for word in words if len(word) == target_length][:target_count]\nassert f(g())\n", "emb": null, "idx_generation": 65, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], target_length=7, target_count=2) -> bool:\n    \"\"\"Find a target_count number of words that have a length of target_length.\"\"\"\n    return sum(len(word) == target_length for word in words) >= target_count", "solution_func": "def g(target_length = 7, target_count = 2):\n    words = [\"apple\", \"banana\", \"orange\", \"grape\", \"watermelon\", \"pineapple\"]\n    return [word for word in words if len(word) == target_length][:target_count]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=100, target_count=3) -> bool:\n    \"\"\"Find a target_count number of numbers that have a sum of target_sum.\"\"\"\n    return sum(numbers) == target_sum and len(numbers) == target_count\ndef g(target_sum = 100, target_count = 3):\n    numbers = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    return [number for number in numbers if number <= target_sum][:target_count]\nassert f(g())\n", "emb": null, "idx_generation": 65, "target_skills": null, "problem_func": "from typing import*\ndef f(numbers: List[int], target_sum=100, target_count=3) -> bool:\n    \"\"\"Find a target_count number of numbers that have a sum of target_sum.\"\"\"\n    return sum(numbers) == target_sum and len(numbers) == target_count", "solution_func": "def g(target_sum = 100, target_count = 3):\n    numbers = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    return [number for number in numbers if number <= target_sum][:target_count]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, m: int, ans=-1) -> bool:\n    \"\"\"Check if n divided by m is equal to ans\"\"\"\n    return n / m == ans\ndef g(n=10, m=2, ans=-1):\n    return n / m\nassert f(g())\n", "emb": null, "idx_generation": 65, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m: int, ans=-1) -> bool:\n    \"\"\"Check if n divided by m is equal to ans\"\"\"\n    return n / m == ans", "solution_func": "def g(n=10, m=2, ans=-1):\n    return n / m", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target='abc') -> bool:\n    \"\"\"Check if the subsequence 'abc' exists in the string s\"\"\"\n    return target in s\ndef g(target='abc'):\n    return target\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 65, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='abc') -> bool:\n    \"\"\"Check if the subsequence 'abc' exists in the string s\"\"\"\n    return target in s", "solution_func": "def g(target='abc'):\n    return target", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target=9) -> bool:\n    \"\"\"Find two numbers in the list that sum up to target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(target=9):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 65, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=9) -> bool:\n    \"\"\"Find two numbers in the list that sum up to target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g(target=9):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=16) -> bool:\n    \"\"\"\n    Given a list of integers, find a pair of numbers whose sum is equal to the target value.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    pairs = [(x, y) for x in nums for y in nums if x + y == target]\n    return len(pairs) > 0\ndef g(nums = [1, 2, 3, 4, 5]):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 65, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=16) -> bool:\n    \"\"\"\n    Given a list of integers, find a pair of numbers whose sum is equal to the target value.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    pairs = [(x, y) for x in nums for y in nums if x + y == target]\n    return len(pairs) > 0", "solution_func": "def g(nums = [1, 2, 3, 4, 5]):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list contains three consecutive numbers\"\"\"\n    return any(nums[i] + 1 == nums[i+1] == nums[i+2] for i in range(len(nums)-2))\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n", "emb": null, "idx_generation": 66, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list contains three consecutive numbers\"\"\"\n    return any(nums[i] + 1 == nums[i+1] == nums[i+2] for i in range(len(nums)-2))", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(names: List[str], target: str) -> bool:\n    \"\"\"Check if the given target string exists as a substring in any of the names\"\"\"\n    return any(target in name for name in names)\ndef g(target = 'John'):\n    return ['John Smith', 'Jane Doe', 'Michael Johnson']\nassert f(g())\n", "emb": null, "idx_generation": 66, "target_skills": null, "problem_func": "from typing import*\ndef f(names: List[str], target: str) -> bool:\n    \"\"\"Check if the given target string exists as a substring in any of the names\"\"\"\n    return any(target in name for name in names)", "solution_func": "def g(target = 'John'):\n    return ['John Smith', 'Jane Doe', 'Michael Johnson']", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome\"\"\"\n    return nums == nums[::-1]\ndef g():\n    return [1, 2, 3, 2, 1]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 66, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome\"\"\"\n    return nums == nums[::-1]", "solution_func": "def g():\n    return [1, 2, 3, 2, 1]", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, lst=[23, 56, 12, 34, 78, 45]) -> bool:\n    \"\"\"\n    Check if a given number is present in a list\n    \"\"\"\n    return n in lst\ndef g(lst=[23, 56, 12, 34, 78, 45]):\n    return lst[0]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 66, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst=[23, 56, 12, 34, 78, 45]) -> bool:\n    \"\"\"\n    Check if a given number is present in a list\n    \"\"\"\n    return n in lst", "solution_func": "def g(lst=[23, 56, 12, 34, 78, 45]):\n    return lst[0]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=100) -> bool:\n    \"\"\"\n    Check if the sum of all elements in a matrix is equal to a given target number\n    \"\"\"\n    return sum(sum(row) for row in matrix) == target\ndef g(target=100):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n", "emb": null, "idx_generation": 66, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=100) -> bool:\n    \"\"\"\n    Check if the sum of all elements in a matrix is equal to a given target number\n    \"\"\"\n    return sum(sum(row) for row in matrix) == target", "solution_func": "def g(target=100):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(a: int, b: int, c: int, d=2) -> bool:\n    \"\"\"\n    Check if the given numbers satisfy the equation: a^b + c = d\n    \"\"\"\n    return math.pow(a, b) + c == d\ndef g(d=2):\n    return (1, 1, d-1)\nassert f(g())\n", "emb": null, "idx_generation": 66, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(a: int, b: int, c: int, d=2) -> bool:\n    \"\"\"\n    Check if the given numbers satisfy the equation: a^b + c = d\n    \"\"\"\n    return math.pow(a, b) + c == d", "solution_func": "def g(d=2):\n    return (1, 1, d-1)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target='abcdefg', replacement='123') -> bool:\n    \"\"\"Replace characters in a string with a given replacement string.\"\"\"\n    return s.replace(target, replacement) == replacement\ndef g(target = 'abcdefg', replacement = '123'):\n    return target\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0], "idx_generation": 66, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='abcdefg', replacement='123') -> bool:\n    \"\"\"Replace characters in a string with a given replacement string.\"\"\"\n    return s.replace(target, replacement) == replacement", "solution_func": "def g(target = 'abcdefg', replacement = '123'):\n    return target", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: List[int], n=5) -> bool:\n    \"\"\"Find the sum of the n smallest positive integers in a list.\"\"\"\n    return sum(sorted([v for v in x if v > 0])[:n]) == n * (n + 1) // 2\ndef g(n = 5):\n    return [1, 0, 2, 3, 4, 5]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 66, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], n=5) -> bool:\n    \"\"\"Find the sum of the n smallest positive integers in a list.\"\"\"\n    return sum(sorted([v for v in x if v > 0])[:n]) == n * (n + 1) // 2", "solution_func": "def g(n = 5):\n    return [1, 0, 2, 3, 4, 5]", "map_ix": [1, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=10, b=20) -> bool:\n    \"\"\"Check if a number is a multiple of either a or b.\"\"\"\n    return n % a == 0 or n % b == 0\ndef g(a = 10, b = 20):\n    return a * b\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 66, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=10, b=20) -> bool:\n    \"\"\"Check if a number is a multiple of either a or b.\"\"\"\n    return n % a == 0 or n % b == 0", "solution_func": "def g(a = 10, b = 20):\n    return a * b", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: str, y: str, z: str, result=\"ABC\") -> bool:\n    \"\"\"Find a combination of three strings that gives a certain result\"\"\"\n    return x + y + z == result\ndef g(result = \"ABC\"):\n    x = \"\"\n    y = \"\"\n    z = \"\"\n    for i in result:\n        if i == \"A\":\n            x += \"A\"\n        elif i == \"B\":\n            y += \"B\"\n        elif i == \"C\":\n            z += \"C\"\n    return x, y, z\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 66, "target_skills": null, "problem_func": "from typing import*\ndef f(x: str, y: str, z: str, result=\"ABC\") -> bool:\n    \"\"\"Find a combination of three strings that gives a certain result\"\"\"\n    return x + y + z == result", "solution_func": "def g(result = \"ABC\"):\n    x = \"\"\n    y = \"\"\n    z = \"\"\n    for i in result:\n        if i == \"A\":\n            x += \"A\"\n        elif i == \"B\":\n            y += \"B\"\n        elif i == \"C\":\n            z += \"C\"\n    return x, y, z", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(lst: List[int], target_sum=100) -> bool:\n    \"\"\"\n    Given a list of integers and a target sum, find a sublist of the list such that the sum of its elements is equal to the target sum.\n    \"\"\"\n    for i in range(len(lst)):\n        current_sum = lst[i]\n        if current_sum == target_sum:\n            return True\n        for j in range(i + 1, len(lst)):\n            current_sum += lst[j]\n            if current_sum == target_sum:\n                return True\n            elif current_sum > target_sum:\n                break\n    return False\ndef g(target_sum=100):\n    lst = [10, 25, 30, 15, 5, 20]\n    return lst\nassert f(g())\n", "emb": null, "idx_generation": 67, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int], target_sum=100) -> bool:\n    \"\"\"\n    Given a list of integers and a target sum, find a sublist of the list such that the sum of its elements is equal to the target sum.\n    \"\"\"\n    for i in range(len(lst)):\n        current_sum = lst[i]\n        if current_sum == target_sum:\n            return True\n        for j in range(i + 1, len(lst)):\n            current_sum += lst[j]\n            if current_sum == target_sum:\n                return True\n            elif current_sum > target_sum:\n                break\n    return False", "solution_func": "def g(target_sum=100):\n    lst = [10, 25, 30, 15, 5, 20]\n    return lst", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target_length=6) -> bool:\n    \"\"\"\n    Given a string and a target length, find a substring of the string that has the same length as the target length.\n    \"\"\"\n    for i in range(len(s) - target_length + 1):\n        substring = s[i:i+target_length]\n        if len(substring) == target_length:\n            return True\n    return False\ndef g(target_length=6):\n    s = \"Hello, world!\"\n    return s\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 67, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target_length=6) -> bool:\n    \"\"\"\n    Given a string and a target length, find a substring of the string that has the same length as the target length.\n    \"\"\"\n    for i in range(len(s) - target_length + 1):\n        substring = s[i:i+target_length]\n        if len(substring) == target_length:\n            return True\n    return False", "solution_func": "def g(target_length=6):\n    s = \"Hello, world!\"\n    return s", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix (a list of lists of integers), check if the sum of each row is equal to the sum of each column.\n    \"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    return row_sums == col_sums\ndef g():\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 67, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix (a list of lists of integers), check if the sum of each row is equal to the sum of each column.\n    \"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    return row_sums == col_sums", "solution_func": "def g():\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=19) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a pair of numbers in the list such that their sum is equal to the target number.\n    Return True if such a pair exists, False otherwise.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=19):\n    nums = [2, 7, 11, 15, 5, 3, 9]\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 67, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=19) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a pair of numbers in the list such that their sum is equal to the target number.\n    Return True if such a pair exists, False otherwise.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target=19):\n    nums = [2, 7, 11, 15, 5, 3, 9]\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(words: List[str], prefix=\"th\", suffix=\"ing\") -> bool:\n    \"\"\"\n    Given a list of words, check if there exists a word in the list that starts with the given prefix and ends with the given suffix.\n    Return True if such a word exists, False otherwise.\n    \"\"\"\n    for word in words:\n        if word.startswith(prefix) and word.endswith(suffix):\n            return True\n    return False\n\ndef g(prefix=\"th\", suffix=\"ing\"):\n    words = [\"running\", \"swimming\", \"jumping\", \"throwing\", \"eating\", \"thinking\"]\n    return words\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 67, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], prefix=\"th\", suffix=\"ing\") -> bool:\n    \"\"\"\n    Given a list of words, check if there exists a word in the list that starts with the given prefix and ends with the given suffix.\n    Return True if such a word exists, False otherwise.\n    \"\"\"\n    for word in words:\n        if word.startswith(prefix) and word.endswith(suffix):\n            return True\n    return False", "solution_func": "def g(prefix=\"th\", suffix=\"ing\"):\n    words = [\"running\", \"swimming\", \"jumping\", \"throwing\", \"eating\", \"thinking\"]\n    return words", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=8) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if there exists a row in the matrix such that the sum of its elements is equal to the target number.\n    Returns True if such a row exists, False otherwise.\n    \"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    return False\n\ndef g(target=8):\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    return matrix\n\nassert f(g())\n", "emb": null, "idx_generation": 67, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=8) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if there exists a row in the matrix such that the sum of its elements is equal to the target number.\n    Returns True if such a row exists, False otherwise.\n    \"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    return False", "solution_func": "def g(target=8):\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, values: List[int], k=2) -> bool:\n    \"\"\"\n    Kth Smallest Element\n\n    Given a list of integers, find the kth smallest element in the list.\n\n    Example:\n    values = [1, 5, 3, 2, 4]\n    k = 2\n    output: 2\n    \"\"\"\n    assert k <= len(values) and all((v in values for v in values))\n    return sorted(values)[k-1] == n\ndef g(values = [1, 5, 3, 2, 4], k = 2):\n    return min(values)\nassert f(g())\n", "emb": null, "idx_generation": 67, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, values: List[int], k=2) -> bool:\n    \"\"\"\n    Kth Smallest Element\n\n    Given a list of integers, find the kth smallest element in the list.\n\n    Example:\n    values = [1, 5, 3, 2, 4]\n    k = 2\n    output: 2\n    \"\"\"\n    assert k <= len(values) and all((v in values for v in values))\n    return sorted(values)[k-1] == n", "solution_func": "def g(values = [1, 5, 3, 2, 4], k = 2):\n    return min(values)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substr='world') -> bool:\n    \"\"\"Check if a string contains a given substring\"\"\"\n    return substr in s\ndef g(substr = 'world'):\n    return 'hello' + substr\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 67, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substr='world') -> bool:\n    \"\"\"Check if a string contains a given substring\"\"\"\n    return substr in s", "solution_func": "def g(substr = 'world'):\n    return 'hello' + substr", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, pattern='ABC') -> bool:\n    \"\"\"\n    Check if a string matches a given pattern\n\n    The pattern is defined using the following rules:\n    - 'A' represents one or more uppercase letters\n    - 'B' represents one or more lowercase letters\n    - 'C' represents one or more digits\n\n    Example:\n    pattern = 'ABC'\n    s = 'HelloWorld123'\n    output: True\n    \"\"\"\n    assert all((c in 'ABC' for c in pattern))\n    if pattern == 'ABC':\n        return s.isalnum()\n    elif pattern == 'AB':\n        return s.isalpha()\n    elif pattern == 'AC':\n        return s.isdigit()\n    elif pattern == 'BC':\n        return s.islower()\n    elif pattern == 'A':\n        return s.isupper()\n    elif pattern == 'B':\n        return s.islower() or s.isupper()\n    elif pattern == 'C':\n        return s.isdigit()\n    else:\n        return False\ndef g(pattern = 'ABC'):\n    return 'HelloWorld123'\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 67, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, pattern='ABC') -> bool:\n    \"\"\"\n    Check if a string matches a given pattern\n\n    The pattern is defined using the following rules:\n    - 'A' represents one or more uppercase letters\n    - 'B' represents one or more lowercase letters\n    - 'C' represents one or more digits\n\n    Example:\n    pattern = 'ABC'\n    s = 'HelloWorld123'\n    output: True\n    \"\"\"\n    assert all((c in 'ABC' for c in pattern))\n    if pattern == 'ABC':\n        return s.isalnum()\n    elif pattern == 'AB':\n        return s.isalpha()\n    elif pattern == 'AC':\n        return s.isdigit()\n    elif pattern == 'BC':\n        return s.islower()\n    elif pattern == 'A':\n        return s.isupper()\n    elif pattern == 'B':\n        return s.islower() or s.isupper()\n    elif pattern == 'C':\n        return s.isdigit()\n    else:\n        return False", "solution_func": "def g(pattern = 'ABC'):\n    return 'HelloWorld123'", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, a='hello', b='world') -> bool:\n    \"\"\"Check if a string is a concatenation of two other strings\"\"\"\n    return s == a + b\ndef g(a='hello', b='world'):\n    return a + b\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 67, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, a='hello', b='world') -> bool:\n    \"\"\"Check if a string is a concatenation of two other strings\"\"\"\n    return s == a + b", "solution_func": "def g(a='hello', b='world'):\n    return a + b", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=30) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target sum.\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums))))\n    \ndef g(target = 30):\n    nums = [1, 2, 3, 4, 5]\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 68, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=30) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target sum.\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums))))", "solution_func": "def g(target = 30):\n    nums = [1, 2, 3, 4, 5]\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(num: int) -> bool:\n    \"\"\"Check if a number is a perfect square.\"\"\"\n    return math.isqrt(num) ** 2 == num\n\ndef g():\n    num = 25\n    return num\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 68, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(num: int) -> bool:\n    \"\"\"Check if a number is a perfect square.\"\"\"\n    return math.isqrt(num) ** 2 == num", "solution_func": "def g():\n    num = 25\n    return num", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target sum.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\n\n    \ndef g(target = 10):\n    nums = [1, 2, 3, 4, 5]\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 68, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target sum.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))", "solution_func": "def g(target = 10):\n    nums = [1, 2, 3, 4, 5]\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(equation: str, x=3, y=4, z=5) -> bool:\n    \"\"\"Evaluate the given equation with the provided values for x, y, and z.\"\"\"\n    return eval(equation) == 42\ndef g(x=3, y=4, z=5):\n    equation = \"2*x + 3*y - 4*z\"\n    return eval(equation)\nassert f(g())\n", "emb": null, "idx_generation": 68, "target_skills": null, "problem_func": "from typing import*\ndef f(equation: str, x=3, y=4, z=5) -> bool:\n    \"\"\"Evaluate the given equation with the provided values for x, y, and z.\"\"\"\n    return eval(equation) == 42", "solution_func": "def g(x=3, y=4, z=5):\n    equation = \"2*x + 3*y - 4*z\"\n    return eval(equation)", "map_ix": null}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers that adds up to the target.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for r in range(1, len(numbers) + 1) for comb in combinations(numbers, r))\ndef g(numbers=[10, 20, 30, 40, 50]):\n    return numbers\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 68, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers that adds up to the target.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for r in range(1, len(numbers) + 1) for comb in combinations(numbers, r))", "solution_func": "def g(numbers=[10, 20, 30, 40, 50]):\n    return numbers", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=50) -> bool:\n    \"\"\"Find a pair of numbers in the matrix that adds up to the target.\"\"\"\n    return any(target - num in row for row in matrix for num in row)\ndef g(matrix=[[10, 20, 30], [40, 50, 60], [70, 80, 90]]):\n    return matrix\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 68, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=50) -> bool:\n    \"\"\"Find a pair of numbers in the matrix that adds up to the target.\"\"\"\n    return any(target - num in row for row in matrix for num in row)", "solution_func": "def g(matrix=[[10, 20, 30], [40, 50, 60], [70, 80, 90]]):\n    return matrix", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: List[int], a=0, b=0) -> bool:\n    \"\"\"Check if the list contains a pair of numbers that sums up to a given target\"\"\"\n    target = a + b\n    for i in range(len(x)):\n        for j in range(i+1, len(x)):\n            if x[i] + x[j] == target:\n                return True\n    return False\ndef g(a=0, b=0):\n    x = [1, 2, 3, 4, 5]\n    return x\nassert f(g())\n", "emb": null, "idx_generation": 68, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], a=0, b=0) -> bool:\n    \"\"\"Check if the list contains a pair of numbers that sums up to a given target\"\"\"\n    target = a + b\n    for i in range(len(x)):\n        for j in range(i+1, len(x)):\n            if x[i] + x[j] == target:\n                return True\n    return False", "solution_func": "def g(a=0, b=0):\n    x = [1, 2, 3, 4, 5]\n    return x", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: List[int], n=3) -> bool:\n    \"\"\"Check if the list contains a subsequence of length n that is in ascending order\"\"\"\n    for i in range(len(x) - n + 1):\n        if sorted(x[i:i+n]) == x[i:i+n]:\n            return True\n    return False\ndef g(n=3):\n    x = [5, 3, 8, 2, 9, 1, 6]\n    return x\nassert f(g())\n", "emb": null, "idx_generation": 68, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], n=3) -> bool:\n    \"\"\"Check if the list contains a subsequence of length n that is in ascending order\"\"\"\n    for i in range(len(x) - n + 1):\n        if sorted(x[i:i+n]) == x[i:i+n]:\n            return True\n    return False", "solution_func": "def g(n=3):\n    x = [5, 3, 8, 2, 9, 1, 6]\n    return x", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: List[int], n=3) -> bool:\n    \"\"\"Check if the list contains a subsequence of length n that is in descending order\"\"\"\n    for i in range(len(x) - n + 1):\n        if sorted(x[i:i+n], reverse=True) == x[i:i+n]:\n            return True\n    return False\ndef g(n=3):\n    x = [7, 4, 9, 1, 6, 3, 8]\n    return x\nassert f(g())\n", "emb": null, "idx_generation": 68, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], n=3) -> bool:\n    \"\"\"Check if the list contains a subsequence of length n that is in descending order\"\"\"\n    for i in range(len(x) - n + 1):\n        if sorted(x[i:i+n], reverse=True) == x[i:i+n]:\n            return True\n    return False", "solution_func": "def g(n=3):\n    x = [7, 4, 9, 1, 6, 3, 8]\n    return x", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, a=1, b=9554566410382856, c=2) -> bool:\n    \"\"\"Solve a division problem\"\"\"\n    return (b // n) * c == a\ndef g(a = 1, b = 9554566410382856, c = 2):\n    if a == 0:\n        return 2 * b * c\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if (b // n) * c == a:\n            return n\nassert f(g())\n", "emb": null, "idx_generation": 68, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=1, b=9554566410382856, c=2) -> bool:\n    \"\"\"Solve a division problem\"\"\"\n    return (b // n) * c == a", "solution_func": "def g(a = 1, b = 9554566410382856, c = 2):\n    if a == 0:\n        return 2 * b * c\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if (b // n) * c == a:\n            return n", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Find a list of 1000 distinct numbers where the sum of the first half is equal to the sum of the second half.\"\"\"\n    return sum(nums[:len(nums)//2]) == sum(nums[len(nums)//2:])\ndef g():\n    return list(range(1, 1001))\nassert f(g())\n", "emb": null, "idx_generation": 69, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Find a list of 1000 distinct numbers where the sum of the first half is equal to the sum of the second half.\"\"\"\n    return sum(nums[:len(nums)//2]) == sum(nums[len(nums)//2:])", "solution_func": "def g():\n    return list(range(1, 1001))", "map_ix": null}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(perm: Tuple[int]) -> bool:\n    \"\"\"Find a permutation of (1, 2, 3, 4, 5) where the product of the first three elements is equal to the sum of the last two elements.\"\"\"\n    return perm[0] * perm[1] * perm[2] == sum(perm[3:])\ndef g():\n    return next(perm for perm in permutations(range(1, 6)) if perm[0] * perm[1] * perm[2] == sum(perm[3:]))\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 69, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(perm: Tuple[int]) -> bool:\n    \"\"\"Find a permutation of (1, 2, 3, 4, 5) where the product of the first three elements is equal to the sum of the last two elements.\"\"\"\n    return perm[0] * perm[1] * perm[2] == sum(perm[3:])", "solution_func": "def g():\n    return next(perm for perm in permutations(range(1, 6)) if perm[0] * perm[1] * perm[2] == sum(perm[3:]))", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string contains all vowels (a, e, i, o, u) in order.\"\"\"\n    vowels = 'aeiou'\n    pos = 0\n    for char in s:\n        if char == vowels[pos]:\n            pos += 1\n        if pos == len(vowels):\n            return True\n    return False\ndef g():\n    return 'aieoub'\nassert f(g())\n", "emb": null, "idx_generation": 69, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string contains all vowels (a, e, i, o, u) in order.\"\"\"\n    vowels = 'aeiou'\n    pos = 0\n    for char in s:\n        if char == vowels[pos]:\n            pos += 1\n        if pos == len(vowels):\n            return True\n    return False", "solution_func": "def g():\n    return 'aieoub'", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=100, b=200, c=300) -> bool:\n    \"\"\"Check if a number is within a specified range\"\"\"\n    return a <= n <= b or b <= n <= c\ndef g(a=100, b=200, c=300):\n    if a <= b:\n        return a + 10\n    else:\n        return c - 10\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 69, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=100, b=200, c=300) -> bool:\n    \"\"\"Check if a number is within a specified range\"\"\"\n    return a <= n <= b or b <= n <= c", "solution_func": "def g(a=100, b=200, c=300):\n    if a <= b:\n        return a + 10\n    else:\n        return c - 10", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=3, b=5, c=7) -> bool:\n    \"\"\"Check if a number is a perfect square\"\"\"\n    return n == a**2 or n == b**2 or n == c**2\ndef g(a=3, b=5, c=7):\n    return int(math.sqrt(a**2 + b**2 + c**2))\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 69, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, a=3, b=5, c=7) -> bool:\n    \"\"\"Check if a number is a perfect square\"\"\"\n    return n == a**2 or n == b**2 or n == c**2", "solution_func": "def g(a=3, b=5, c=7):\n    return int(math.sqrt(a**2 + b**2 + c**2))", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(s: str, a='hello', b='world') -> bool:\n    \"\"\"Check if a string contains two specified words\"\"\"\n    return a in s and b in s\ndef g(a='hello', b='world'):\n    words = ['hello', 'world', 'python', 'programming', 'puzzle']\n    return random.choice(words)\nassert f(g())\n", "emb": null, "idx_generation": 69, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(s: str, a='hello', b='world') -> bool:\n    \"\"\"Check if a string contains two specified words\"\"\"\n    return a in s and b in s", "solution_func": "def g(a='hello', b='world'):\n    words = ['hello', 'world', 'python', 'programming', 'puzzle']\n    return random.choice(words)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, nums=[7, 14, 21, 28, 35], upper_bound=1000) -> bool:\n    \"\"\"Check if n is divisible by all numbers in nums and is less than or equal to the upper_bound.\"\"\"\n    return all((n % i == 0 for i in nums)) and 0 < n <= upper_bound\ndef g(nums = [7, 14, 21, 28, 35], upper_bound = 1000):\n    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 69, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[7, 14, 21, 28, 35], upper_bound=1000) -> bool:\n    \"\"\"Check if n is divisible by all numbers in nums and is less than or equal to the upper_bound.\"\"\"\n    return all((n % i == 0 for i in nums)) and 0 < n <= upper_bound", "solution_func": "def g(nums = [7, 14, 21, 28, 35], upper_bound = 1000):\n    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans", "map_ix": [1, 1, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(squares: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Position min(m, n) <= 5 queens on an m x n chess board so that no pair is attacking each other.\"\"\"\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 3 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})\ndef g(m = 5, n = 5):\n    # brute force\n    k = min(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 3 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for i, j in enumerate(p)]\nassert f(g())\n", "emb": null, "idx_generation": 69, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(squares: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Position min(m, n) <= 5 queens on an m x n chess board so that no pair is attacking each other.\"\"\"\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 3 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})", "solution_func": "def g(m = 5, n = 5):\n    # brute force\n    k = min(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 3 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for i, j in enumerate(p)]", "map_ix": null}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(stamps: List[int], target=50, max_stamps=5, options=[10, 20, 30, 40, 50]) -> bool:\n    \"\"\"Find a selection of at most max_stamps stamps whose total worth is the target value.\"\"\"\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target\ndef g(target = 50, max_stamps = 5, options = [10, 20, 30, 40, 50]):\n    from itertools import combinations_with_replacement\n    for n in range(max_stamps + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 69, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(stamps: List[int], target=50, max_stamps=5, options=[10, 20, 30, 40, 50]) -> bool:\n    \"\"\"Find a selection of at most max_stamps stamps whose total worth is the target value.\"\"\"\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target", "solution_func": "def g(target = 50, max_stamps = 5, options = [10, 20, 30, 40, 50]):\n    from itertools import combinations_with_replacement\n    for n in range(max_stamps + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(a: int, b: int, c: int, x: int) -> bool:\n    \"\"\"Check if the equation ax^2 + bx + c = 0 has a real solution\"\"\"\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return False\n    elif discriminant == 0:\n        return True\n    else:\n        return True\ndef g(a: int, b: int, c: int) -> int:\n    \"\"\"Solve the equation ax^2 + bx + c = 0\"\"\"\n    x1 = (-b + math.sqrt(b**2 - 4*a*c)) / (2*a)\n    x2 = (-b - math.sqrt(b**2 - 4*a*c)) / (2*a)\n    return x1, x2\nassert f(g())\n", "emb": null, "idx_generation": 69, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(a: int, b: int, c: int, x: int) -> bool:\n    \"\"\"Check if the equation ax^2 + bx + c = 0 has a real solution\"\"\"\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return False\n    elif discriminant == 0:\n        return True\n    else:\n        return True", "solution_func": "def g(a: int, b: int, c: int) -> int:\n    \"\"\"Solve the equation ax^2 + bx + c = 0\"\"\"\n    x1 = (-b + math.sqrt(b**2 - 4*a*c)) / (2*a)\n    x2 = (-b - math.sqrt(b**2 - 4*a*c)) / (2*a)\n    return x1, x2", "map_ix": null}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int, k=3) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, find if there exists a combination of k numbers from the list that add up\n    to the target value.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 10\n    k = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    from itertools import combinations\n    for comb in combinations(nums, k):\n        if sum(comb) == target:\n            return True\n    return False\ndef g(nums = [1, 2, 3, 4, 5], target = 10, k = 3):\n    return nums, target, k\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 70, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int, k=3) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, find if there exists a combination of k numbers from the list that add up\n    to the target value.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 10\n    k = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    from itertools import combinations\n    for comb in combinations(nums, k):\n        if sum(comb) == target:\n            return True\n    return False", "solution_func": "def g(nums = [1, 2, 3, 4, 5], target = 10, k = 3):\n    return nums, target, k", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, pattern: str) -> bool:\n    \"\"\"\n    Given a string and a pattern, determine if the string follows the pattern. Each character in the pattern maps to a\n    non-empty word in the string.\n\n    Sample Input:\n    s = \"catcatgocatgo\"\n    pattern = \"abba\"\n\n    Sample Output:\n    True\n    \"\"\"\n    words = s.split()\n    if len(pattern) != len(words):\n        return False\n    mapping = {}\n    for i in range(len(pattern)):\n        if pattern[i] not in mapping:\n            if words[i] in mapping.values():\n                return False\n            mapping[pattern[i]] = words[i]\n        elif mapping[pattern[i]] != words[i]:\n            return False\n    return True\ndef g(s = \"cat cat go cat go\", pattern = \"abba\"):\n    return s, pattern\nassert f(*g())\n", "emb": null, "idx_generation": 70, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, pattern: str) -> bool:\n    \"\"\"\n    Given a string and a pattern, determine if the string follows the pattern. Each character in the pattern maps to a\n    non-empty word in the string.\n\n    Sample Input:\n    s = \"catcatgocatgo\"\n    pattern = \"abba\"\n\n    Sample Output:\n    True\n    \"\"\"\n    words = s.split()\n    if len(pattern) != len(words):\n        return False\n    mapping = {}\n    for i in range(len(pattern)):\n        if pattern[i] not in mapping:\n            if words[i] in mapping.values():\n                return False\n            mapping[pattern[i]] = words[i]\n        elif mapping[pattern[i]] != words[i]:\n            return False\n    return True", "solution_func": "def g(s = \"cat cat go cat go\", pattern = \"abba\"):\n    return s, pattern", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, k: int, nums: List[int]) -> bool:\n    \"\"\"\n    Given a non-empty list of integers and two integers n and k, find if there exists two distinct indices i and j in the\n    list such that nums[i] = nums[j] and abs(i - j) <= k.\n\n    Sample Input:\n    n = 6\n    k = 2\n    nums = [1, 2, 3, 1, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    seen = {}\n    for i in range(n):\n        if nums[i] in seen and i - seen[nums[i]] <= k:\n            return True\n        seen[nums[i]] = i\n    return False\ndef g(n = 6, k = 2, nums = [1, 2, 3, 1, 4, 5]):\n    return n, k, nums\nassert f(*g())\n", "emb": null, "idx_generation": 70, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, k: int, nums: List[int]) -> bool:\n    \"\"\"\n    Given a non-empty list of integers and two integers n and k, find if there exists two distinct indices i and j in the\n    list such that nums[i] = nums[j] and abs(i - j) <= k.\n\n    Sample Input:\n    n = 6\n    k = 2\n    nums = [1, 2, 3, 1, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    seen = {}\n    for i in range(n):\n        if nums[i] in seen and i - seen[nums[i]] <= k:\n            return True\n        seen[nums[i]] = i\n    return False", "solution_func": "def g(n = 6, k = 2, nums = [1, 2, 3, 1, 4, 5]):\n    return n, k, nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(n: int, x: float, y: float, r: float) -> bool:\n    \"\"\"\n    Given a point (x, y) and a radius r, determine if the point lies within the circle.\n\n    Sample Input:\n    x = 3\n    y = 4\n    r = 5\n\n    Sample Output:\n    True\n    \"\"\"\n    distance = math.sqrt((x - 0)**2 + (y - 0)**2)\n    return distance <= r\n\ndef g(x: float = 3, y: float = 4, r: float = 5):\n    return x, y, r\n\nassert f(*g())\n", "emb": null, "idx_generation": 70, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, x: float, y: float, r: float) -> bool:\n    \"\"\"\n    Given a point (x, y) and a radius r, determine if the point lies within the circle.\n\n    Sample Input:\n    x = 3\n    y = 4\n    r = 5\n\n    Sample Output:\n    True\n    \"\"\"\n    distance = math.sqrt((x - 0)**2 + (y - 0)**2)\n    return distance <= r", "solution_func": "def g(x: float = 3, y: float = 4, r: float = 5):\n    return x, y, r", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: list) -> bool:\n    \"\"\"\n    Given a matrix, check if it is a symmetric matrix.\n\n    Sample Input:\n    matrix = [[1, 2, 3],\n              [2, 4, 5],\n              [3, 5, 6]]\n\n    Sample Output:\n    False\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix: list = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 70, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: list) -> bool:\n    \"\"\"\n    Given a matrix, check if it is a symmetric matrix.\n\n    Sample Input:\n    matrix = [[1, 2, 3],\n              [2, 4, 5],\n              [3, 5, 6]]\n\n    Sample Output:\n    False\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "solution_func": "def g(matrix: list = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix", "map_ix": [1, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, k: int, nums: list) -> bool:\n    \"\"\"\n    Given a list of integers and two integers n and k, determine if there exists two distinct indices i and j in the list\n    such that nums[i] + nums[j] = k.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    n = 5\n    k = 7\n\n    Sample Output:\n    True\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if k - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums: list = [1, 2, 3, 4, 5], n: int = 5, k: int = 7):\n    return n, k, nums\n\nassert f(*g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 70, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, k: int, nums: list) -> bool:\n    \"\"\"\n    Given a list of integers and two integers n and k, determine if there exists two distinct indices i and j in the list\n    such that nums[i] + nums[j] = k.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    n = 5\n    k = 7\n\n    Sample Output:\n    True\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if k - num in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(nums: list = [1, 2, 3, 4, 5], n: int = 5, k: int = 7):\n    return n, k, nums", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: list, target=20) -> bool:\n    \"\"\"Check if there exists a pair of integers in the list that sum up to the target number.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(arr = [3, 8, 12, 5, 9, 2]):\n    return arr\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 70, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: list, target=20) -> bool:\n    \"\"\"Check if there exists a pair of integers in the list that sum up to the target number.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g(arr = [3, 8, 12, 5, 9, 2]):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, nums=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29], upper_bound=100) -> bool:\n    \"\"\"Check if a number is prime.\"\"\"\n    return n in nums and n <= upper_bound\ndef g(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29], upper_bound = 100):\n    return nums[-1]\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 70, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29], upper_bound=100) -> bool:\n    \"\"\"Check if a number is prime.\"\"\"\n    return n in nums and n <= upper_bound", "solution_func": "def g(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29], upper_bound = 100):\n    return nums[-1]", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], upper_bound=20) -> bool:\n    \"\"\"Check if a number is divisible by any number in a given list.\"\"\"\n    return any((n % i == 0 for i in nums)) and 0 < n <= upper_bound\ndef g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], upper_bound = 20):\n    ans = 1\n    for i in nums:\n        ans *= i\n    return ans\nassert f(g())\n", "emb": null, "idx_generation": 70, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], upper_bound=20) -> bool:\n    \"\"\"Check if a number is divisible by any number in a given list.\"\"\"\n    return any((n % i == 0 for i in nums)) and 0 < n <= upper_bound", "solution_func": "def g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], upper_bound = 20):\n    ans = 1\n    for i in nums:\n        ans *= i\n    return ans", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"\n    Given a list of integers, find two numbers that sum up to the target value.\n\n    Sample input:\n    [2, 4, 7, 11, 15], 9\n\n    Sample output:\n    True\n\n    Explanation:\n    The pair of numbers [2, 7] sum up to 9.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums: List[int] = [2, 4, 7, 11, 15], target: int = 9) -> List[int]:\n    \"\"\"\n    Generate a list of integers and a target value.\n    \"\"\"\n    return nums, target\n\nassert f(*g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0], "idx_generation": 70, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"\n    Given a list of integers, find two numbers that sum up to the target value.\n\n    Sample input:\n    [2, 4, 7, 11, 15], 9\n\n    Sample output:\n    True\n\n    Explanation:\n    The pair of numbers [2, 7] sum up to 9.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(nums: List[int] = [2, 4, 7, 11, 15], target: int = 9) -> List[int]:\n    \"\"\"\n    Generate a list of integers and a target value.\n    \"\"\"\n    return nums, target", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 1]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, r: float) -> bool:\n    \"\"\"Check if a point (x, y, z) lies inside a sphere with radius r centered at the origin (0, 0, 0)\"\"\"\n    distance = math.sqrt(x**2 + y**2 + z**2)\n    return distance < r\n\ndef g(x: float, y: float, z: float, r: float):\n    return x, y, z, r\n\nassert f(g())\n", "emb": null, "idx_generation": 71, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, r: float) -> bool:\n    \"\"\"Check if a point (x, y, z) lies inside a sphere with radius r centered at the origin (0, 0, 0)\"\"\"\n    distance = math.sqrt(x**2 + y**2 + z**2)\n    return distance < r", "solution_func": "def g(x: float, y: float, z: float, r: float):\n    return x, y, z, r", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if the target number is a sum of any two numbers in the given list.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(arr: List[int], target: int):\n    return arr, target\n\nassert f(g())\n", "emb": null, "idx_generation": 71, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if the target number is a sum of any two numbers in the given list.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g(arr: List[int], target: int):\n    return arr, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, m: int, k: int) -> bool:\n    \"\"\"Check if n is divisible by m and the remainder is less than or equal to k.\"\"\"\n    return n % m <= k\n\ndef g(n: int, m: int, k: int):\n    return n, m, k\n\nassert f(g())\n", "emb": null, "idx_generation": 71, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m: int, k: int) -> bool:\n    \"\"\"Check if n is divisible by m and the remainder is less than or equal to k.\"\"\"\n    return n % m <= k", "solution_func": "def g(n: int, m: int, k: int):\n    return n, m, k", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, a=10, b=3) -> bool:\n    \"\"\"Check if a number is divisible by another number.\"\"\"\n    return n % b == 0 and a % b == 0 and n % a == 0\ndef g(a = 10, b = 3):\n    return a * b\nassert f(g())\n", "emb": null, "idx_generation": 71, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=10, b=3) -> bool:\n    \"\"\"Check if a number is divisible by another number.\"\"\"\n    return n % b == 0 and a % b == 0 and n % a == 0", "solution_func": "def g(a = 10, b = 3):\n    return a * b", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, strings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'kiwi', 'lemon']) -> bool:\n    \"\"\"Check if a string is a substring of any string in a list.\"\"\"\n    return any(s in string for string in strings)\ndef g(strings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'kiwi', 'lemon']):\n    return s + strings[0]\nassert f(g())\n", "emb": null, "idx_generation": 71, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, strings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'kiwi', 'lemon']) -> bool:\n    \"\"\"Check if a string is a substring of any string in a list.\"\"\"\n    return any(s in string for string in strings)", "solution_func": "def g(strings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'kiwi', 'lemon']):\n    return s + strings[0]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: List[int], a=5, b=10, c=2) -> bool:\n    \"\"\"Check if a list of numbers is sorted in increasing order and follows a specific pattern.\"\"\"\n    return all(x[i] + a * b == x[i + 1] for i in range(len(x) - 1)) and all(x[i] % c == 0 for i in range(len(x)))\ndef g(a=5, b=10, c=2):\n    return [i * b + a for i in range(10)]\nassert f(g())\n", "emb": null, "idx_generation": 71, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], a=5, b=10, c=2) -> bool:\n    \"\"\"Check if a list of numbers is sorted in increasing order and follows a specific pattern.\"\"\"\n    return all(x[i] + a * b == x[i + 1] for i in range(len(x) - 1)) and all(x[i] % c == 0 for i in range(len(x)))", "solution_func": "def g(a=5, b=10, c=2):\n    return [i * b + a for i in range(10)]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(words: List[str], target_word: str) -> bool:\n    \"\"\"\n    Given a list of words, determine if the target word is a concatenation of any two words in the list.\n\n    Example:\n    words = ['hello', 'world', 'python', 'programming']\n    target_word = 'helloworld'\n\n    Output:\n    True\n    \"\"\"\n    word_set = set(words)\n    n = len(target_word)\n    for i in range(1, n):\n        prefix = target_word[:i]\n        suffix = target_word[i:]\n        if prefix in word_set and suffix in word_set:\n            return True\n    return False\n\ndef g(words = ['hello', 'world', 'python', 'programming'], target_word = 'helloworld'):\n    return words, target_word\n\nassert f(g())\n", "emb": null, "idx_generation": 71, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], target_word: str) -> bool:\n    \"\"\"\n    Given a list of words, determine if the target word is a concatenation of any two words in the list.\n\n    Example:\n    words = ['hello', 'world', 'python', 'programming']\n    target_word = 'helloworld'\n\n    Output:\n    True\n    \"\"\"\n    word_set = set(words)\n    n = len(target_word)\n    for i in range(1, n):\n        prefix = target_word[:i]\n        suffix = target_word[i:]\n        if prefix in word_set and suffix in word_set:\n            return True\n    return False", "solution_func": "def g(words = ['hello', 'world', 'python', 'programming'], target_word = 'helloworld'):\n    return words, target_word", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find two numbers that add up to the target number.\n\n    Example:\n    nums = [2, 7, 11, 15]\n    target = 9\n\n    Output:\n    True\n    \"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False\n\ndef g(nums = [2, 7, 11, 15], target = 9):\n    return nums, target\n\nassert f(g())\n", "emb": null, "idx_generation": 71, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find two numbers that add up to the target number.\n\n    Example:\n    nums = [2, 7, 11, 15]\n    target = 9\n\n    Output:\n    True\n    \"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False", "solution_func": "def g(nums = [2, 7, 11, 15], target = 9):\n    return nums, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a 2D matrix of integers, determine if the target number exists in the matrix.\n\n    Example:\n    matrix = [\n        [1, 3, 5, 7],\n        [10, 11, 16, 20],\n        [23, 30, 34, 50]\n    ]\n    target = 34\n\n    Output:\n    True\n    \"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    low = 0\n    high = m * n - 1\n    while low <= high:\n        mid = (low + high) // 2\n        num = matrix[mid // n][mid % n]\n        if num == target:\n            return True\n        elif num < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False\n\ndef g(matrix = [\n    [1, 3, 5, 7],\n    [10, 11, 16, 20],\n    [23, 30, 34, 50]\n], target = 34):\n    return matrix, target\n\nassert f(g())\n", "emb": null, "idx_generation": 71, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a 2D matrix of integers, determine if the target number exists in the matrix.\n\n    Example:\n    matrix = [\n        [1, 3, 5, 7],\n        [10, 11, 16, 20],\n        [23, 30, 34, 50]\n    ]\n    target = 34\n\n    Output:\n    True\n    \"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    low = 0\n    high = m * n - 1\n    while low <= high:\n        mid = (low + high) // 2\n        num = matrix[mid // n][mid % n]\n        if num == target:\n            return True\n        elif num < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False", "solution_func": "def g(matrix = [\n    [1, 3, 5, 7],\n    [10, 11, 16, 20],\n    [23, 30, 34, 50]\n], target = 34):\n    return matrix, target", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if the sum of each row and each column in a square matrix is equal to n.\"\"\"\n    return all((sum(row) == n for row in matrix)) and all((sum(col) == n for col in zip(*matrix)))\ndef g(n=3):\n    matrix = [[1]*n for _ in range(n)]\n    return matrix\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 71, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if the sum of each row and each column in a square matrix is equal to n.\"\"\"\n    return all((sum(row) == n for row in matrix)) and all((sum(col) == n for col in zip(*matrix)))", "solution_func": "def g(n=3):\n    matrix = [[1]*n for _ in range(n)]\n    return matrix", "map_ix": [1, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(li: List[int], k=4) -> bool:\n    \"\"\"Check if there exists a subarray in the given list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    prefix_sums = {0}\n    for num in li:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False\ndef g(li = [12, 23, 45, 67, 89]):\n    return li\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 72, "target_skills": null, "problem_func": "from typing import*\ndef f(li: List[int], k=4) -> bool:\n    \"\"\"Check if there exists a subarray in the given list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    prefix_sums = {0}\n    for num in li:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False", "solution_func": "def g(li = [12, 23, 45, 67, 89]):\n    return li", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, k=2) -> bool:\n    \"\"\"Check if the given string is a palindrome and has at least k vowels.\"\"\"\n    vowels = 'aeiou'\n    vowel_count = 0\n    for c in s:\n        if c.lower() in vowels:\n            vowel_count += 1\n    return s.lower() == s.lower()[::-1] and vowel_count >= k\ndef g(s = 'radar'):\n    return s\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 72, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, k=2) -> bool:\n    \"\"\"Check if the given string is a palindrome and has at least k vowels.\"\"\"\n    vowels = 'aeiou'\n    vowel_count = 0\n    for c in s:\n        if c.lower() in vowels:\n            vowel_count += 1\n    return s.lower() == s.lower()[::-1] and vowel_count >= k", "solution_func": "def g(s = 'radar'):\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(li: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the given list whose sum is equal to target.\"\"\"\n    num_set = set()\n    for num in li:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\ndef g(li = [2, 4, 6, 8, 10]):\n    return li\nassert f(g())\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 72, "target_skills": null, "problem_func": "from typing import*\ndef f(li: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the given list whose sum is equal to target.\"\"\"\n    num_set = set()\n    for num in li:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(li = [2, 4, 6, 8, 10]):\n    return li", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], n=5, k=10) -> bool:\n    \"\"\"\n    Given a list of integers arr, find if there exists a pair of numbers whose sum is equal to k.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == k:\n                return True\n    return False\n\ndef g(n=5, k=10):\n    arr = [i for i in range(1, n+1)]\n    return arr\n\nassert f(g())\n", "emb": null, "idx_generation": 72, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], n=5, k=10) -> bool:\n    \"\"\"\n    Given a list of integers arr, find if there exists a pair of numbers whose sum is equal to k.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == k:\n                return True\n    return False", "solution_func": "def g(n=5, k=10):\n    arr = [i for i in range(1, n+1)]\n    return arr", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"\n    Given a string s, check if it is a palindrome of length n.\n\n    Sample Input:\n    s = \"abcba\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return s == s[::-1] and len(s) == n\n\ndef g(n=3):\n    s = \"abcba\"\n    while len(s) < n:\n        s += s[::-1]\n    return s[:n]\n\nassert f(g())\n", "emb": null, "idx_generation": 72, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"\n    Given a string s, check if it is a palindrome of length n.\n\n    Sample Input:\n    s = \"abcba\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return s == s[::-1] and len(s) == n", "solution_func": "def g(n=3):\n    s = \"abcba\"\n    while len(s) < n:\n        s += s[::-1]\n    return s[:n]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], n=5, k=10) -> bool:\n    \"\"\"\n    Given a list of integers arr, find the kth smallest element in the list.\n\n    Sample Input:\n    arr = [5, 2, 9, 6, 1]\n\n    Sample Output:\n    5\n    \"\"\"\n    arr.sort()\n    return arr[k-1]\n\ndef g(n=5, k=10):\n    arr = [i for i in range(1, n+1)]\n    return arr\n\nassert f(g())\n", "emb": null, "idx_generation": 72, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], n=5, k=10) -> bool:\n    \"\"\"\n    Given a list of integers arr, find the kth smallest element in the list.\n\n    Sample Input:\n    arr = [5, 2, 9, 6, 1]\n\n    Sample Output:\n    5\n    \"\"\"\n    arr.sort()\n    return arr[k-1]", "solution_func": "def g(n=5, k=10):\n    arr = [i for i in range(1, n+1)]\n    return arr", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target_sum.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False\ndef g(nums=[2, 5, 8, 3, 6, 4]):\n    return nums\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 72, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target_sum.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False", "solution_func": "def g(nums=[2, 5, 8, 3, 6, 4]):\n    return nums", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_value=0) -> bool:\n    \"\"\"Find if the target_value is present in the matrix.\"\"\"\n    for row in matrix:\n        if target_value in row:\n            return True\n    return False\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 72, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_value=0) -> bool:\n    \"\"\"Find if the target_value is present in the matrix.\"\"\"\n    for row in matrix:\n        if target_value in row:\n            return True\n    return False", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target_value=10) -> bool:\n    \"\"\"Find if the target_value is present in the list.\"\"\"\n    return target_value in nums\ndef g(nums=[1, 3, 5, 7, 9, 11]):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 72, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target_value=10) -> bool:\n    \"\"\"Find if the target_value is present in the list.\"\"\"\n    return target_value in nums", "solution_func": "def g(nums=[1, 3, 5, 7, 9, 11]):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(a: str, b: str, c: str, d: str) -> bool:\n    \"\"\"Check if the concatenation of strings a, b, c, and d is a palindrome.\"\"\"\n    return (a + b + c + d) == (a + b + c + d)[::-1]\ndef g(a = 'race', b = 'car', c = 'madam', d = 'radar'):\n    return a, b, c, d\nassert f(*g())\n", "emb": null, "idx_generation": 72, "target_skills": null, "problem_func": "from typing import*\ndef f(a: str, b: str, c: str, d: str) -> bool:\n    \"\"\"Check if the concatenation of strings a, b, c, and d is a palindrome.\"\"\"\n    return (a + b + c + d) == (a + b + c + d)[::-1]", "solution_func": "def g(a = 'race', b = 'car', c = 'madam', d = 'radar'):\n    return a, b, c, d", "map_ix": null}, {"fitness": 1.0, "program_str": "import math\nfrom typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Check if a number is divisible by all the numbers in a list.\"\"\"\n    return all(n % num == 0 for num in nums)\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    from math import prod\n    product = prod(nums)\n    return product\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 73, "target_skills": null, "problem_func": "import math\nfrom typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Check if a number is divisible by all the numbers in a list.\"\"\"\n    return all(n % num == 0 for num in nums)", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    from math import prod\n    product = prod(nums)\n    return product", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(string: str, substrings=['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx', 'yz']) -> bool:\n    \"\"\"Check if a given string contains all the specified substrings.\"\"\"\n    return all(substring in string for substring in substrings)\ndef g(substrings=['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx', 'yz']):\n    from random import choice\n    string = ''.join(choice('abcdefghijklmnopqrstuvwxyz') for _ in range(100))\n    return string\nassert f(g())\n", "emb": null, "idx_generation": 73, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(string: str, substrings=['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx', 'yz']) -> bool:\n    \"\"\"Check if a given string contains all the specified substrings.\"\"\"\n    return all(substring in string for substring in substrings)", "solution_func": "def g(substrings=['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx', 'yz']):\n    from random import choice\n    string = ''.join(choice('abcdefghijklmnopqrstuvwxyz') for _ in range(100))\n    return string", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if the sum of any three numbers in a list is equal to the target.\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\ndef g():\n    from random import randint\n    nums = [randint(1, 100) for _ in range(10)]\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 73, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if the sum of any three numbers in a list is equal to the target.\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))", "solution_func": "def g():\n    from random import randint\n    nums = [randint(1, 100) for _ in range(10)]\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"\n    Find a subset of the given list of integers where the sum of the elements is equal to the target value\n    \"\"\"\n    return sum(arr) == target\ndef g(target=0):\n    return [target]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 73, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"\n    Find a subset of the given list of integers where the sum of the elements is equal to the target value\n    \"\"\"\n    return sum(arr) == target", "solution_func": "def g(target=0):\n    return [target]", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target='') -> bool:\n    \"\"\"\n    Find a substring of the given string that matches the target value\n    \"\"\"\n    return s.find(target) != -1\ndef g(target=''):\n    return target\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 73, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='') -> bool:\n    \"\"\"\n    Find a substring of the given string that matches the target value\n    \"\"\"\n    return s.find(target) != -1", "solution_func": "def g(target=''):\n    return target", "map_ix": [0, 0, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Find a pair of integers from the given list where their sum is equal to the target value\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=0):\n    return [target, 0]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 73, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Find a pair of integers from the given list where their sum is equal to the target value\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target=0):\n    return [target, 0]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Return True if there is a pair of numbers in nums that adds up to the target.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(nums=[1, 2, 3, 4, 5], target=0):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 73, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Return True if there is a pair of numbers in nums that adds up to the target.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=0):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(strings: List[str], substring='') -> bool:\n    \"\"\"Return True if any of the strings in the list contains the given substring.\"\"\"\n    return any((substring in s for s in strings))\ndef g(strings=['apple', 'banana', 'cherry'], substring=''):\n    return strings\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 73, "target_skills": null, "problem_func": "from typing import*\ndef f(strings: List[str], substring='') -> bool:\n    \"\"\"Return True if any of the strings in the list contains the given substring.\"\"\"\n    return any((substring in s for s in strings))", "solution_func": "def g(strings=['apple', 'banana', 'cherry'], substring=''):\n    return strings", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], n=0) -> bool:\n    \"\"\"Return True if there are n unique numbers in the list.\"\"\"\n    return len(set(nums)) == n\ndef g(nums=[1, 2, 3, 4, 5, 5, 6], n=0):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 73, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], n=0) -> bool:\n    \"\"\"Return True if there are n unique numbers in the list.\"\"\"\n    return len(set(nums)) == n", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 5, 6], n=0):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a reversible string\"\"\"\n    return s == s[::-1]\ndef g():\n    return 'reversible'\nassert f(g())\n", "emb": null, "idx_generation": 73, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a reversible string\"\"\"\n    return s == s[::-1]", "solution_func": "def g():\n    return 'reversible'", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Check if n is a multiple of m\"\"\"\n    return n % m == 0\ndef g(m = 10):\n    return m*2\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 74, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Check if n is a multiple of m\"\"\"\n    return n % m == 0", "solution_func": "def g(m = 10):\n    return m*2", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import math\nfrom typing import*\nfrom math import gcd\n\ndef f(a: int, b: int, c: int) -> bool:\n    \"\"\"Check if a^2 + b^2 = c^2\"\"\"\n    return a**2 + b**2 == c**2\ndef g(a = 3, b = 4, c = 5):\n    return (a, b, c) if gcd(a, b, c) == 1 else (a*2, b*2, c*2)\nassert f(g())\n", "emb": null, "idx_generation": 74, "target_skills": null, "problem_func": "import math\nfrom typing import*\nfrom math import gcd\n\ndef f(a: int, b: int, c: int) -> bool:\n    \"\"\"Check if a^2 + b^2 = c^2\"\"\"\n    return a**2 + b**2 == c**2", "solution_func": "def g(a = 3, b = 4, c = 5):\n    return (a, b, c) if gcd(a, b, c) == 1 else (a*2, b*2, c*2)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n=7012) -> bool:\n    \"\"\"Check if s is a palindrome\"\"\"\n    return s == s[::-1]\ndef g(n = 7012):\n    return str(n)[::-1]\nassert f(g())\n", "emb": null, "idx_generation": 74, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=7012) -> bool:\n    \"\"\"Check if s is a palindrome\"\"\"\n    return s == s[::-1]", "solution_func": "def g(n = 7012):\n    return str(n)[::-1]", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(words: List[str], target_word='programming') -> bool:\n    \"\"\"Rearrange the letters of the words to form the target word.\"\"\"\n    perm = permutations(words)\n    for p in perm:\n        if ''.join(p) == target_word:\n            return True\n    return False\n\ndef g(words=['p', 'r', 'o', 'g', 'a', 'm', 'i', 'n']):\n    return words\n\nassert f(g())\n", "emb": null, "idx_generation": 74, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(words: List[str], target_word='programming') -> bool:\n    \"\"\"Rearrange the letters of the words to form the target word.\"\"\"\n    perm = permutations(words)\n    for p in perm:\n        if ''.join(p) == target_word:\n            return True\n    return False", "solution_func": "def g(words=['p', 'r', 'o', 'g', 'a', 'm', 'i', 'n']):\n    return words", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_sum=100) -> bool:\n    \"\"\"Find a pair of numbers from the matrix that sums up to the target sum.\"\"\"\n    for row in matrix:\n        for i in range(len(row)):\n            for j in range(i+1, len(row)):\n                if row[i] + row[j] == target_sum:\n                    return True\n    return False\n\ndef g(target_sum=100):\n    return [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]\n\nassert f(g())\n", "emb": null, "idx_generation": 74, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_sum=100) -> bool:\n    \"\"\"Find a pair of numbers from the matrix that sums up to the target sum.\"\"\"\n    for row in matrix:\n        for i in range(len(row)):\n            for j in range(i+1, len(row)):\n                if row[i] + row[j] == target_sum:\n                    return True\n    return False", "solution_func": "def g(target_sum=100):\n    return [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, target_char='a') -> bool:\n    \"\"\"Check if the target character is present in the string.\"\"\"\n    return target_char in s\n\ndef g(target_char='a'):\n    return \"Hello, world!\"\n\nassert f(g())\n", "emb": null, "idx_generation": 74, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target_char='a') -> bool:\n    \"\"\"Check if the target character is present in the string.\"\"\"\n    return target_char in s", "solution_func": "def g(target_char='a'):\n    return \"Hello, world!\"", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the array that sums up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target = 0):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n", "emb": null, "idx_generation": 74, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the array that sums up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g(target = 0):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if there exists a row in the matrix whose sum is equal to the target value.\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    return False\n\ndef g(target = 0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n", "emb": null, "idx_generation": 74, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if there exists a row in the matrix whose sum is equal to the target value.\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    return False", "solution_func": "def g(target = 0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(words: List[str], target=5) -> bool:\n    \"\"\"Check if there exists a word in the list whose length is equal to the target value.\"\"\"\n    for word in words:\n        if len(word) == target:\n            return True\n    return False\n\ndef g(target = 5):\n    return [\"apple\", \"banana\", \"cherry\", \"durian\"]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 74, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], target=5) -> bool:\n    \"\"\"Check if there exists a word in the list whose length is equal to the target value.\"\"\"\n    for word in words:\n        if len(word) == target:\n            return True\n    return False", "solution_func": "def g(target = 5):\n    return [\"apple\", \"banana\", \"cherry\", \"durian\"]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, primes = [2, 3, 5, 7, 11, 13]) -> bool:\n    \"\"\"Check if n is divisible by any of the primes.\"\"\"\n    return any(n % prime == 0 for prime in primes)\ndef g(primes = [2, 3, 5, 7, 11, 13]):\n    return primes[-1] + 1\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 74, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, primes = [2, 3, 5, 7, 11, 13]) -> bool:\n    \"\"\"Check if n is divisible by any of the primes.\"\"\"\n    return any(n % prime == 0 for prime in primes)", "solution_func": "def g(primes = [2, 3, 5, 7, 11, 13]):\n    return primes[-1] + 1", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=3, m=5) -> bool:\n    \"\"\"\n    Check if the given string s has at least n vowels and m consonants.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_count = sum(1 for char in s if char.lower() in vowels)\n    consonant_count = sum(1 for char in s if char.isalpha() and char.lower() not in vowels)\n    return vowel_count >= n and consonant_count >= m\ndef g(n = 3, m = 5):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    consonants = [chr(i) for i in range(ord('a'), ord('z')+1) if chr(i) not in vowels]\n    s = ''.join(vowels[:n] + consonants[:m])\n    return s\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 75, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=3, m=5) -> bool:\n    \"\"\"\n    Check if the given string s has at least n vowels and m consonants.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_count = sum(1 for char in s if char.lower() in vowels)\n    consonant_count = sum(1 for char in s if char.isalpha() and char.lower() not in vowels)\n    return vowel_count >= n and consonant_count >= m", "solution_func": "def g(n = 3, m = 5):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    consonants = [chr(i) for i in range(ord('a'), ord('z')+1) if chr(i) not in vowels]\n    s = ''.join(vowels[:n] + consonants[:m])\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import math\nfrom typing import*\ndef f(n: int, m=5, x=11) -> bool:\n    \"\"\"\n    Check if the sum of m consecutive integers starting from 1 is equal to n, and the product of x consecutive integers\n    starting from 1 is equal to n.\n    \"\"\"\n    sum_of_consecutive_integers = n == m * (m + 1) // 2\n    product_of_consecutive_integers = n == math.factorial(x)\n    return sum_of_consecutive_integers and product_of_consecutive_integers\ndef g(m = 5, x = 11):\n    sum_of_consecutive_integers = m * (m + 1) // 2\n    product_of_consecutive_integers = math.factorial(x)\n    return sum_of_consecutive_integers + product_of_consecutive_integers\nassert f(g())\n", "emb": null, "idx_generation": 75, "target_skills": null, "problem_func": "import math\nfrom typing import*\ndef f(n: int, m=5, x=11) -> bool:\n    \"\"\"\n    Check if the sum of m consecutive integers starting from 1 is equal to n, and the product of x consecutive integers\n    starting from 1 is equal to n.\n    \"\"\"\n    sum_of_consecutive_integers = n == m * (m + 1) // 2\n    product_of_consecutive_integers = n == math.factorial(x)\n    return sum_of_consecutive_integers and product_of_consecutive_integers", "solution_func": "def g(m = 5, x = 11):\n    sum_of_consecutive_integers = m * (m + 1) // 2\n    product_of_consecutive_integers = math.factorial(x)\n    return sum_of_consecutive_integers + product_of_consecutive_integers", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, a=4, b=7, c=11) -> bool:\n    \"\"\"\n    Check if the given integer n is divisible by a, b, and c, and the sum of a, b, and c is equal to n.\n    \"\"\"\n    divisible_by_abc = all(n % num == 0 for num in [a, b, c])\n    sum_of_abc = a + b + c == n\n    return divisible_by_abc and sum_of_abc\ndef g(a = 4, b = 7, c = 11):\n    n = a * b * c\n    return n\nassert f(g())\n", "emb": null, "idx_generation": 75, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=4, b=7, c=11) -> bool:\n    \"\"\"\n    Check if the given integer n is divisible by a, b, and c, and the sum of a, b, and c is equal to n.\n    \"\"\"\n    divisible_by_abc = all(n % num == 0 for num in [a, b, c])\n    sum_of_abc = a + b + c == n\n    return divisible_by_abc and sum_of_abc", "solution_func": "def g(a = 4, b = 7, c = 11):\n    n = a * b * c\n    return n", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=54, start=0, end=3, step=1) -> bool:\n    \"\"\"\n    Given a list of integers arr, check if the sum of a subarray specified by the start, end,\n    and step parameters is equal to the target value.\n\n    Sample Input:\n    arr = [10, 20, 30, 40, 50, 60]\n    start = 1\n    end = 4\n    step = 2\n    target = 70\n\n    Sample Output:\n    True\n    \"\"\"\n    subarray_sum = sum(arr[start:end:step])\n    return subarray_sum == target\n\ndef g(arr = [10, 20, 30, 40, 50, 60], target = 54, start = 0, end = 3, step = 1):\n    return arr\n\nassert f(g())\n", "emb": null, "idx_generation": 75, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=54, start=0, end=3, step=1) -> bool:\n    \"\"\"\n    Given a list of integers arr, check if the sum of a subarray specified by the start, end,\n    and step parameters is equal to the target value.\n\n    Sample Input:\n    arr = [10, 20, 30, 40, 50, 60]\n    start = 1\n    end = 4\n    step = 2\n    target = 70\n\n    Sample Output:\n    True\n    \"\"\"\n    subarray_sum = sum(arr[start:end:step])\n    return subarray_sum == target", "solution_func": "def g(arr = [10, 20, 30, 40, 50, 60], target = 54, start = 0, end = 3, step = 1):\n    return arr", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=0, start=0, end=0, step=1) -> bool:\n    \"\"\"\n    Given a list of integers arr, check if there is a subarray specified by the start, end,\n    and step parameters that sums up to the target value.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n    start = 1\n    end = 4\n    step = 1\n    target = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(start, end, step):\n        for j in range(i + 1, end, step):\n            if sum(arr[i:j:step]) == target:\n                return True\n    return False\n\ndef g(arr = [1, 2, 3, 4, 5], target = 0, start = 0, end = 0, step = 1):\n    return arr\n\nassert f(g())\n", "emb": null, "idx_generation": 75, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=0, start=0, end=0, step=1) -> bool:\n    \"\"\"\n    Given a list of integers arr, check if there is a subarray specified by the start, end,\n    and step parameters that sums up to the target value.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n    start = 1\n    end = 4\n    step = 1\n    target = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(start, end, step):\n        for j in range(i + 1, end, step):\n            if sum(arr[i:j:step]) == target:\n                return True\n    return False", "solution_func": "def g(arr = [1, 2, 3, 4, 5], target = 0, start = 0, end = 0, step = 1):\n    return arr", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target=\"Hello World!\") -> bool:\n    \"\"\"\n    Given a string s, check if it is equal to the target string.\n\n    Sample Input:\n    s = \"Hello World!\"\n    target = \"Hello World!\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return s == target\n\ndef g(target = \"Hello World!\"):\n    return target\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 75, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target=\"Hello World!\") -> bool:\n    \"\"\"\n    Given a string s, check if it is equal to the target string.\n\n    Sample Input:\n    s = \"Hello World!\"\n    target = \"Hello World!\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return s == target", "solution_func": "def g(target = \"Hello World!\"):\n    return target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, m: int, k: int, result: int) -> bool:\n    \"\"\"Check if the result is equal to the sum of n and the product of m and k.\"\"\"\n    return result == n + (m * k)\ndef g(n: int, m: int, k: int):\n    result = n + (m * k)\n    return result\nassert f(g(5, 2, 3))\n", "emb": null, "idx_generation": 75, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m: int, k: int, result: int) -> bool:\n    \"\"\"Check if the result is equal to the sum of n and the product of m and k.\"\"\"\n    return result == n + (m * k)", "solution_func": "def g(n: int, m: int, k: int):\n    result = n + (m * k)\n    return result", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, substring: str) -> bool:\n    \"\"\"Check if the substring is present in the string.\"\"\"\n    return substring in s\ndef g(s: str, substring: str):\n    return s + substring\nassert f(g(\"Hello\", \"lo\"))\n", "emb": null, "idx_generation": 75, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substring: str) -> bool:\n    \"\"\"Check if the substring is present in the string.\"\"\"\n    return substring in s", "solution_func": "def g(s: str, substring: str):\n    return s + substring", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, m: int, nums: List[int]) -> bool:\n    \"\"\"Check if the sum of the first n numbers in the list is equal to m.\"\"\"\n    return sum(nums[:n]) == m\ndef g(n: int, m: int, nums: List[int]):\n    return nums[:n] + nums\nassert f(g(3, 10, [1, 2, 3, 4, 5]))\n", "emb": null, "idx_generation": 75, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m: int, nums: List[int]) -> bool:\n    \"\"\"Check if the sum of the first n numbers in the list is equal to m.\"\"\"\n    return sum(nums[:n]) == m", "solution_func": "def g(n: int, m: int, nums: List[int]):\n    return nums[:n] + nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, target='world', max_len=20) -> bool:\n    \"\"\"\n    Check if a string starts with a certain prefix, ends with a certain suffix, and has a length less than or equal to\n    a given maximum length.\n    \"\"\"\n    return s.startswith(target) and s.endswith(target[::-1]) and len(s) <= max_len\ndef g(target = 'world', max_len = 20):\n    return target + '!' * (max_len - len(target) - 1) + target[::-1]\nassert f(g())\n", "emb": null, "idx_generation": 75, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='world', max_len=20) -> bool:\n    \"\"\"\n    Check if a string starts with a certain prefix, ends with a certain suffix, and has a length less than or equal to\n    a given maximum length.\n    \"\"\"\n    return s.startswith(target) and s.endswith(target[::-1]) and len(s) <= max_len", "solution_func": "def g(target = 'world', max_len = 20):\n    return target + '!' * (max_len - len(target) - 1) + target[::-1]", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(n: int, arr: List[int]) -> bool:\n    \"\"\"Check if there exists a subarray in arr of length n, such that the sum of its elements is divisible by n.\"\"\"\n    for i in range(len(arr) - n + 1):\n        subarray = arr[i:i+n]\n        if sum(subarray) % n == 0:\n            return True\n    return False\ndef g(n = 0, arr = []):\n    from random import randint\n    arr = [randint(1, 100) for _ in range(n)]\n    return (n, arr)\nassert f(*g())\n", "emb": null, "idx_generation": 76, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(n: int, arr: List[int]) -> bool:\n    \"\"\"Check if there exists a subarray in arr of length n, such that the sum of its elements is divisible by n.\"\"\"\n    for i in range(len(arr) - n + 1):\n        subarray = arr[i:i+n]\n        if sum(subarray) % n == 0:\n            return True\n    return False", "solution_func": "def g(n = 0, arr = []):\n    from random import randint\n    arr = [randint(1, 100) for _ in range(n)]\n    return (n, arr)", "map_ix": null}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\ndef f(n: int, arr: List[int]) -> bool:\n    \"\"\"Check if the elements of arr can be rearranged to form a palindrome.\"\"\"\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    odd_count = 0\n    for count in freq.values():\n        if count % 2 == 1:\n            odd_count += 1\n    return odd_count <= 1\ndef g(n = 0, arr = []):\n    from random import randint\n    arr = [randint(1, 100) for _ in range(n)]\n    return (n, arr)\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 76, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(n: int, arr: List[int]) -> bool:\n    \"\"\"Check if the elements of arr can be rearranged to form a palindrome.\"\"\"\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    odd_count = 0\n    for count in freq.values():\n        if count % 2 == 1:\n            odd_count += 1\n    return odd_count <= 1", "solution_func": "def g(n = 0, arr = []):\n    from random import randint\n    arr = [randint(1, 100) for _ in range(n)]\n    return (n, arr)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"Check if s1 and s2 are anagrams of each other.\"\"\"\n    return sorted(s1) == sorted(s2)\ndef g(s1 = '', s2 = ''):\n    from random import shuffle\n    s1 = ''.join(chr(ord('a') + i) for i in range(26))\n    s2 = list(s1)\n    shuffle(s2)\n    return (s1, ''.join(s2))\nassert f(*g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 76, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"Check if s1 and s2 are anagrams of each other.\"\"\"\n    return sorted(s1) == sorted(s2)", "solution_func": "def g(s1 = '', s2 = ''):\n    from random import shuffle\n    s1 = ''.join(chr(ord('a') + i) for i in range(26))\n    s2 = list(s1)\n    shuffle(s2)\n    return (s1, ''.join(s2))", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: int, li=[4, 8, 12, 16, 20, 24]) -> bool:\n    \"\"\"Check if a value is divisible by all elements in a list.\"\"\"\n    return all(x % num == 0 for num in li)\ndef g(li=[4, 8, 12, 16, 20, 24]):\n    return max(li) * 3\nassert f(g())\n", "emb": null, "idx_generation": 76, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, li=[4, 8, 12, 16, 20, 24]) -> bool:\n    \"\"\"Check if a value is divisible by all elements in a list.\"\"\"\n    return all(x % num == 0 for num in li)", "solution_func": "def g(li=[4, 8, 12, 16, 20, 24]):\n    return max(li) * 3", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, char='a') -> bool:\n    \"\"\"Check if a given character is in a string and if the string is empty.\"\"\"\n    return char in s and len(s) == 0\ndef g(char='a'):\n    return char * 0\nassert f(g())\n", "emb": null, "idx_generation": 76, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, char='a') -> bool:\n    \"\"\"Check if a given character is in a string and if the string is empty.\"\"\"\n    return char in s and len(s) == 0", "solution_func": "def g(char='a'):\n    return char * 0", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: int, li=[1, 2, 3, 4, 5], target=6) -> bool:\n    \"\"\"Check if the sum of two numbers in a list is equal to a target number.\"\"\"\n    return any(x + num == target for num in li)\ndef g(li=[1, 2, 3, 4, 5], target=6):\n    return target - max(li)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 76, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, li=[1, 2, 3, 4, 5], target=6) -> bool:\n    \"\"\"Check if the sum of two numbers in a list is equal to a target number.\"\"\"\n    return any(x + num == target for num in li)", "solution_func": "def g(li=[1, 2, 3, 4, 5], target=6):\n    return target - max(li)", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(nums: List[int], target=1000) -> bool:\n    \"\"\"Find three distinct integers in nums that sum up to target\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\ndef g(nums):\n    return [nums[i] for i in range(len(nums)) if math.isqrt(nums[i]) ** 2 == nums[i] and math.isqrt(nums[i]) != 1][:3]\nassert f(g())\n", "emb": null, "idx_generation": 76, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(nums: List[int], target=1000) -> bool:\n    \"\"\"Find three distinct integers in nums that sum up to target\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))", "solution_func": "def g(nums):\n    return [nums[i] for i in range(len(nums)) if math.isqrt(nums[i]) ** 2 == nums[i] and math.isqrt(nums[i]) != 1][:3]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find two distinct integers in nums that sum up to target\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(nums):\n    return [nums[i] for i in range(len(nums)) if nums[i] ** 2 % 10 == 9][:2]\nassert f(g())\n", "emb": null, "idx_generation": 76, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find two distinct integers in nums that sum up to target\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))", "solution_func": "def g(nums):\n    return [nums[i] for i in range(len(nums)) if nums[i] ** 2 % 10 == 9][:2]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport itertools\n\ndef f(nums: List[str], target='python') -> bool:\n    \"\"\"Find the permutation of letters in target that can be found in nums\"\"\"\n    return any(''.join(p) in ''.join(nums) for p in itertools.permutations(target))\ndef g(nums):\n    return [num for num in nums if len(num) == 6 and num[0] == 'p' and num[1] == 'y' and num[2] == 't' and num[3] == 'h' and num[4] == 'o' and num[5] == 'n'][:len(target)]\nassert f(g())\n", "emb": null, "idx_generation": 76, "target_skills": null, "problem_func": "from typing import*\nimport itertools\n\ndef f(nums: List[str], target='python') -> bool:\n    \"\"\"Find the permutation of letters in target that can be found in nums\"\"\"\n    return any(''.join(p) in ''.join(nums) for p in itertools.permutations(target))", "solution_func": "def g(nums):\n    return [num for num in nums if len(num) == 6 and num[0] == 'p' and num[1] == 'y' and num[2] == 't' and num[3] == 'h' and num[4] == 'o' and num[5] == 'n'][:len(target)]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date: str, format='%Y-%m-%d') -> bool:\n    \"\"\"Check if the given date is a valid date in the specified format\"\"\"\n    try:\n        datetime.strptime(date, format)\n        return True\n    except ValueError:\n        return False\n\ndef g(format='%Y-%m-%d'):\n    return datetime.now().strftime(format)\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 76, "target_skills": null, "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(date: str, format='%Y-%m-%d') -> bool:\n    \"\"\"Check if the given date is a valid date in the specified format\"\"\"\n    try:\n        datetime.strptime(date, format)\n        return True\n    except ValueError:\n        return False", "solution_func": "def g(format='%Y-%m-%d'):\n    return datetime.now().strftime(format)", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"\n    Find two numbers in the list whose sum is equal to the target.\n    \"\"\"\n    return any((arr[i] + arr[j] == target for i in range(len(arr)) for j in range(i+1, len(arr))))\ndef g(arr: List[int]):\n    return arr\nassert f(g())\n", "emb": null, "idx_generation": 77, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"\n    Find two numbers in the list whose sum is equal to the target.\n    \"\"\"\n    return any((arr[i] + arr[j] == target for i in range(len(arr)) for j in range(i+1, len(arr))))", "solution_func": "def g(arr: List[int]):\n    return arr", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(n: int, m=10) -> bool:\n    \"\"\"\n    Check if n is a power of m.\n    \"\"\"\n    return math.log(n, m).is_integer()\ndef g(m: int = 10):\n    return m ** 3\nassert f(g())\n", "emb": null, "idx_generation": 77, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, m=10) -> bool:\n    \"\"\"\n    Check if n is a power of m.\n    \"\"\"\n    return math.log(n, m).is_integer()", "solution_func": "def g(m: int = 10):\n    return m ** 3", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substring='hello') -> bool:\n    \"\"\"\n    Check if a substring exists in the given string.\n    \"\"\"\n    return substring in s\ndef g(substring='hello'):\n    return \"This is a test string that contains the word 'hello'.\"\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 77, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substring='hello') -> bool:\n    \"\"\"\n    Check if a substring exists in the given string.\n    \"\"\"\n    return substring in s", "solution_func": "def g(substring='hello'):\n    return \"This is a test string that contains the word 'hello'.\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=976, b=123) -> bool:\n    \"\"\"\n    Check if a number is a multiple of another number.\n    \"\"\"\n    return n % a == 0 and n % b == 0\ndef g(a=976, b=123):\n    return a * b\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 77, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=976, b=123) -> bool:\n    \"\"\"\n    Check if a number is a multiple of another number.\n    \"\"\"\n    return n % a == 0 and n % b == 0", "solution_func": "def g(a=976, b=123):\n    return a * b", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, a=\"race\", b=\"car\") -> bool:\n    \"\"\"\n    Check if a string is a palindrome after removing some characters.\n    \"\"\"\n    s = s.replace(a, \"\").replace(b, \"\")\n    return s == s[::-1]\ndef g(a=\"race\", b=\"car\"):\n    return a + b\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0], "idx_generation": 77, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, a=\"race\", b=\"car\") -> bool:\n    \"\"\"\n    Check if a string is a palindrome after removing some characters.\n    \"\"\"\n    s = s.replace(a, \"\").replace(b, \"\")\n    return s == s[::-1]", "solution_func": "def g(a=\"race\", b=\"car\"):\n    return a + b", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=987654, b=123456) -> bool:\n    \"\"\"\n    Determine if a number is divisible by the sum of its digits.\n    \"\"\"\n    return n % sum(int(d) for d in str(n)) == 0 and n % a == 0 and n % b == 0\ndef g(a=987654, b=123456):\n    return a * b\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 77, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=987654, b=123456) -> bool:\n    \"\"\"\n    Determine if a number is divisible by the sum of its digits.\n    \"\"\"\n    return n % sum(int(d) for d in str(n)) == 0 and n % a == 0 and n % b == 0", "solution_func": "def g(a=987654, b=123456):\n    return a * b", "map_ix": [1, 1, 0, 1, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, word='python') -> bool:\n    \"\"\"Check if all characters in word appear in s\"\"\"\n    for char in word:\n        if char not in s:\n            return False\n    return True\ndef g(word='python'):\n    return word\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 77, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, word='python') -> bool:\n    \"\"\"Check if all characters in word appear in s\"\"\"\n    for char in word:\n        if char not in s:\n            return False\n    return True", "solution_func": "def g(word='python'):\n    return word", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import math\nfrom typing import*\nfrom math import gcd\n\ndef f(a: int, b: int, c: int, d: int) -> bool:\n    \"\"\"Check if a/b == c/d\"\"\"\n    if b == 0 or d == 0:\n        return False\n    return a * d == b * c\ndef g(a=12, b=16, c=3, d=4):\n    common_divisor = gcd(a, b)\n    a //= common_divisor\n    b //= common_divisor\n\n    common_divisor = gcd(c, d)\n    c //= common_divisor\n    d //= common_divisor\n    \n    return a, b, c, d\nassert f(g())\n", "emb": null, "idx_generation": 77, "target_skills": null, "problem_func": "import math\nfrom typing import*\nfrom math import gcd\n\ndef f(a: int, b: int, c: int, d: int) -> bool:\n    \"\"\"Check if a/b == c/d\"\"\"\n    if b == 0 or d == 0:\n        return False\n    return a * d == b * c", "solution_func": "def g(a=12, b=16, c=3, d=4):\n    common_divisor = gcd(a, b)\n    a //= common_divisor\n    b //= common_divisor\n\n    common_divisor = gcd(c, d)\n    c //= common_divisor\n    d //= common_divisor\n    \n    return a, b, c, d", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, m: int, x: int, y: int) -> bool:\n    \"\"\"Check if (x + y) is equal to n multiplied by m\"\"\"\n    return (x + y) == n * m\ndef g(n=5, m=3, x=7, y=8):\n    return n, m, x, y\nassert f(g())\n", "emb": null, "idx_generation": 77, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m: int, x: int, y: int) -> bool:\n    \"\"\"Check if (x + y) is equal to n multiplied by m\"\"\"\n    return (x + y) == n * m", "solution_func": "def g(n=5, m=3, x=7, y=8):\n    return n, m, x, y", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(a: List[int], b: List[int], threshold=5) -> bool:\n    \"\"\"Check if the sum of elements in both lists is greater than threshold\"\"\"\n    sum_a = sum(a)\n    sum_b = sum(b)\n    return sum_a + sum_b > threshold\ndef g(a=[1, 2, 3], b=[4, 5, 6], threshold=5):\n    return a, b\nassert f(g())\n", "emb": null, "idx_generation": 77, "target_skills": null, "problem_func": "from typing import*\ndef f(a: List[int], b: List[int], threshold=5) -> bool:\n    \"\"\"Check if the sum of elements in both lists is greater than threshold\"\"\"\n    sum_a = sum(a)\n    sum_b = sum(b)\n    return sum_a + sum_b > threshold", "solution_func": "def g(a=[1, 2, 3], b=[4, 5, 6], threshold=5):\n    return a, b", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums = [1, 2, 3, 4, 5]):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 78, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums = [1, 2, 3, 4, 5]):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Check if the target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 78, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Check if the target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Check if there is a subset of numbers in the list that sum up to the target\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\ndef g(lst = [10, 20, 30, 40, 50]):\n    return lst\nassert f(g())\n", "emb": null, "idx_generation": 78, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Check if there is a subset of numbers in the list that sum up to the target\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False", "solution_func": "def g(lst = [10, 20, 30, 40, 50]):\n    return lst", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, a=5, b=10, c=20) -> bool:\n    \"\"\"\n    Given three numbers, check if the product of n, a, and b is equal to c.\n    \"\"\"\n    return n * a * b == c\n\ndef g(a=5, b=10, c=20):\n    return c // (a * b)\n\nassert f(g())\n", "emb": null, "idx_generation": 78, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=5, b=10, c=20) -> bool:\n    \"\"\"\n    Given three numbers, check if the product of n, a, and b is equal to c.\n    \"\"\"\n    return n * a * b == c", "solution_func": "def g(a=5, b=10, c=20):\n    return c // (a * b)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=3, b=7, c=21) -> bool:\n    \"\"\"\n    Given three numbers, check if the sum of n, a, and b is equal to c.\n    \"\"\"\n    return n + a + b == c\n\ndef g(a=3, b=7, c=21):\n    return c - (a + b)\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 78, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=3, b=7, c=21) -> bool:\n    \"\"\"\n    Given three numbers, check if the sum of n, a, and b is equal to c.\n    \"\"\"\n    return n + a + b == c", "solution_func": "def g(a=3, b=7, c=21):\n    return c - (a + b)", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=2, b=10, c=100) -> bool:\n    \"\"\"\n    Given three numbers, check if the logarithm of n to the base a, multiplied by b, is equal to c.\n    \"\"\"\n    return math.log(n, a) * b == c\n\ndef g(a=2, b=10, c=100):\n    return a ** (c / b)\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 78, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, a=2, b=10, c=100) -> bool:\n    \"\"\"\n    Given three numbers, check if the logarithm of n to the base a, multiplied by b, is equal to c.\n    \"\"\"\n    return math.log(n, a) * b == c", "solution_func": "def g(a=2, b=10, c=100):\n    return a ** (c / b)", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in a list that add up to a given target.\"\"\"\n    return any(target - num in nums for num in nums)\ndef g(nums = [1, 2, 3, 4, 5, 6]):\n    return nums\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 78, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in a list that add up to a given target.\"\"\"\n    return any(target - num in nums for num in nums)", "solution_func": "def g(nums = [1, 2, 3, 4, 5, 6]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(word: str, n=3) -> bool:\n    \"\"\"Check if a word contains a certain number of vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return sum(1 for char in word if char.lower() in vowels) == n\ndef g(n = 3):\n    return \"hello\"\nassert f(g())\n", "emb": null, "idx_generation": 78, "target_skills": null, "problem_func": "from typing import*\ndef f(word: str, n=3) -> bool:\n    \"\"\"Check if a word contains a certain number of vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return sum(1 for char in word if char.lower() in vowels) == n", "solution_func": "def g(n = 3):\n    return \"hello\"", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if a target number is present in a matrix.\"\"\"\n    return any(target in row for row in matrix)\ndef g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 78, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if a target number is present in a matrix.\"\"\"\n    return any(target in row for row in matrix)", "solution_func": "def g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"\n    24 Game Solver\n\n    Given a list of four integers, determine if it is possible to combine the four numbers using the basic\n    arithmetic operations (+, -, *, /) to obtain the target value of 24.\n\n    Example:\n    nums = [4, 1, 8, 7]\n    output: True (4 * 7 - 8 * 1 = 24)\n    \"\"\"\n    assert len(nums) == 4 and all((isinstance(n, int) for n in nums))\n    def helper(nums):\n        if len(nums) == 1:\n            return abs(nums[0] - target) < 1e-6\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                a, b = nums[i], nums[j]\n                new_nums = [x for k, x in enumerate(nums) if k != i and k != j]\n                if helper(new_nums + [a + b]) or helper(new_nums + [a - b]) or helper(new_nums + [b - a]) or helper(new_nums + [a * b]) or (b != 0 and helper(new_nums + [a / b])) or (a != 0 and helper(new_nums + [b / a])):\n                    return True\n        return False\n    return helper(nums)\ndef g(target=24):\n    return [4, 1, 8, 7]\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 78, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"\n    24 Game Solver\n\n    Given a list of four integers, determine if it is possible to combine the four numbers using the basic\n    arithmetic operations (+, -, *, /) to obtain the target value of 24.\n\n    Example:\n    nums = [4, 1, 8, 7]\n    output: True (4 * 7 - 8 * 1 = 24)\n    \"\"\"\n    assert len(nums) == 4 and all((isinstance(n, int) for n in nums))\n    def helper(nums):\n        if len(nums) == 1:\n            return abs(nums[0] - target) < 1e-6\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                a, b = nums[i], nums[j]\n                new_nums = [x for k, x in enumerate(nums) if k != i and k != j]\n                if helper(new_nums + [a + b]) or helper(new_nums + [a - b]) or helper(new_nums + [b - a]) or helper(new_nums + [a * b]) or (b != 0 and helper(new_nums + [a / b])) or (a != 0 and helper(new_nums + [b / a])):\n                    return True\n        return False\n    return helper(nums)", "solution_func": "def g(target=24):\n    return [4, 1, 8, 7]", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], k=5, target=27) -> bool:\n    \"\"\"Find if there exists a submatrix of size k x k whose sum equals the target.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows - k + 1):\n        for j in range(cols - k + 1):\n            submatrix_sum = sum(sum(matrix[i + x][j + y] for x in range(k)) for y in range(k))\n            if submatrix_sum == target:\n                return True\n    return False\n\ndef g(matrix = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], k = 5, target = 27):\n    return matrix\n\nassert f(g())\n", "emb": null, "idx_generation": 79, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], k=5, target=27) -> bool:\n    \"\"\"Find if there exists a submatrix of size k x k whose sum equals the target.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows - k + 1):\n        for j in range(cols - k + 1):\n            submatrix_sum = sum(sum(matrix[i + x][j + y] for x in range(k)) for y in range(k))\n            if submatrix_sum == target:\n                return True\n    return False", "solution_func": "def g(matrix = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], k = 5, target = 27):\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Find if there exists a subset of numbers whose sum equals the target.\"\"\"\n    n = len(numbers)\n    possible_sums = set()\n    possible_sums.add(0)\n    for num in numbers:\n        new_sums = set()\n        for sum in possible_sums:\n            new_sums.add(sum + num)\n        possible_sums.update(new_sums)\n    return target in possible_sums\n\ndef g(numbers = [10, 20, 30, 40, 50]):\n    return numbers\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 79, "target_skills": null, "problem_func": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Find if there exists a subset of numbers whose sum equals the target.\"\"\"\n    n = len(numbers)\n    possible_sums = set()\n    possible_sums.add(0)\n    for num in numbers:\n        new_sums = set()\n        for sum in possible_sums:\n            new_sums.add(sum + num)\n        possible_sums.update(new_sums)\n    return target in possible_sums", "solution_func": "def g(numbers = [10, 20, 30, 40, 50]):\n    return numbers", "map_ix": [1, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Find if there exists a row whose sum equals the target.\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    return False\n\ndef g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target = 0):\n    return matrix\n\nassert f(g())\n", "emb": null, "idx_generation": 79, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Find if there exists a row whose sum equals the target.\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    return False", "solution_func": "def g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target = 0):\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: List[int], a=10, s=3, e=100) -> bool:\n    \"\"\"Check if the list contains an arithmetic sequence with a common difference of s and starting number a.\"\"\"\n    return all([x[i] + s == x[i + 1] for i in range(len(x) - 1)]) and a in x and x[-1] <= e\ndef g(a=10, s=3, e=100):\n    return list(range(a, e + 1, s))\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 79, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], a=10, s=3, e=100) -> bool:\n    \"\"\"Check if the list contains an arithmetic sequence with a common difference of s and starting number a.\"\"\"\n    return all([x[i] + s == x[i + 1] for i in range(len(x) - 1)]) and a in x and x[-1] <= e", "solution_func": "def g(a=10, s=3, e=100):\n    return list(range(a, e + 1, s))", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"Check if the string contains each substring in the given order.\"\"\"\n    return all([sub in s for sub in substrings])\ndef g(substrings=['apple', 'banana', 'cherry', 'date']):\n    return \"\".join(substrings)\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 79, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"Check if the string contains each substring in the given order.\"\"\"\n    return all([sub in s for sub in substrings])", "solution_func": "def g(substrings=['apple', 'banana', 'cherry', 'date']):\n    return \"\".join(substrings)", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(path: List[int], weights=[{0: 2, 1: 1, 2: 3}, {0: 5, 3: 2}, {4: 1}, {1: 1, 2: 2}, {3: 1, 5: 3}, {1: 2, 5: 1}], bound=8) -> bool:\n    \"\"\"\n    Check if there exists a path from node 0 to node 5 in the given directed graph,\n    such that the sum of the weights of the edges in the path does not exceed the bound.\n    \"\"\"\n    return path[0] == 0 and path[-1] == 5 and (sum([weights[path[i]][path[i+1]] for i in range(len(path)-1)]) <= bound)\ndef g(weights=[{0: 2, 1: 1, 2: 3}, {0: 5, 3: 2}, {4: 1}, {1: 1, 2: 2}, {3: 1, 5: 3}, {1: 2, 5: 1}], bound=8):\n    # Depth-first search\n    stack = [(0, [0])]\n    while stack:\n        node, path = stack.pop()\n        if node == 5:\n            return path\n        for neighbor in weights[node]:\n            if neighbor not in path:\n                stack.append((neighbor, path + [neighbor]))\n    return []\nassert f(g())\n", "emb": [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 79, "target_skills": null, "problem_func": "from typing import*\ndef f(path: List[int], weights=[{0: 2, 1: 1, 2: 3}, {0: 5, 3: 2}, {4: 1}, {1: 1, 2: 2}, {3: 1, 5: 3}, {1: 2, 5: 1}], bound=8) -> bool:\n    \"\"\"\n    Check if there exists a path from node 0 to node 5 in the given directed graph,\n    such that the sum of the weights of the edges in the path does not exceed the bound.\n    \"\"\"\n    return path[0] == 0 and path[-1] == 5 and (sum([weights[path[i]][path[i+1]] for i in range(len(path)-1)]) <= bound)", "solution_func": "def g(weights=[{0: 2, 1: 1, 2: 3}, {0: 5, 3: 2}, {4: 1}, {1: 1, 2: 2}, {3: 1, 5: 3}, {1: 2, 5: 1}], bound=8):\n    # Depth-first search\n    stack = [(0, [0])]\n    while stack:\n        node, path = stack.pop()\n        if node == 5:\n            return path\n        for neighbor in weights[node]:\n            if neighbor not in path:\n                stack.append((neighbor, path + [neighbor]))\n    return []", "map_ix": [0, 0, 1, 0, 0, 0, 0, 0, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: list, target_sum=100, num_elements=3) -> bool:\n    \"\"\"Find a sublist of num_elements consecutive elements in arr whose sum is equal to target_sum\"\"\"\n    for i in range(len(arr) - num_elements + 1):\n        if sum(arr[i:i+num_elements]) == target_sum:\n            return True\n    return False\n\ndef g(target_sum=100, num_elements=3):\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return arr\n\nassert f(g())\n", "emb": null, "idx_generation": 79, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: list, target_sum=100, num_elements=3) -> bool:\n    \"\"\"Find a sublist of num_elements consecutive elements in arr whose sum is equal to target_sum\"\"\"\n    for i in range(len(arr) - num_elements + 1):\n        if sum(arr[i:i+num_elements]) == target_sum:\n            return True\n    return False", "solution_func": "def g(target_sum=100, num_elements=3):\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return arr", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, epsilon=0.0001) -> bool:\n    \"\"\"Check if x^y is approximately equal to z with a given epsilon\"\"\"\n    return math.isclose(x**y, z, rel_tol=epsilon)\n\ndef g(x: float, y: float, epsilon=0.0001):\n    return math.sqrt(x**y)\n\nassert f(g())\n", "emb": null, "idx_generation": 79, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, epsilon=0.0001) -> bool:\n    \"\"\"Check if x^y is approximately equal to z with a given epsilon\"\"\"\n    return math.isclose(x**y, z, rel_tol=epsilon)", "solution_func": "def g(x: float, y: float, epsilon=0.0001):\n    return math.sqrt(x**y)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: list, target: int) -> bool:\n    \"\"\"Find two numbers in arr that sum up to target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target: int):\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return arr\n\nassert f(g())\n", "emb": null, "idx_generation": 79, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: list, target: int) -> bool:\n    \"\"\"Find two numbers in arr that sum up to target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g(target: int):\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return arr", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, m=1000000) -> bool:\n    \"\"\"Check if n is a prime number\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef g(m=1000000):\n    for i in range(m):\n        if f(i):\n            return i\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 79, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m=1000000) -> bool:\n    \"\"\"Check if n is a prime number\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "solution_func": "def g(m=1000000):\n    for i in range(m):\n        if f(i):\n            return i", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=0, k=3) -> bool:\n    \"\"\"Find a combination of k numbers from the list that adds up to the target value.\"\"\"\n    return sum(nums) == target and len(nums) >= k\ndef g(nums=[1, 2, 3, 4, 5, 6], target=9, k=3):\n    from itertools import combinations\n    for c in combinations(nums, k):\n        if sum(c) == target:\n            return list(c)\nassert f(g())\n", "emb": null, "idx_generation": 80, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=0, k=3) -> bool:\n    \"\"\"Find a combination of k numbers from the list that adds up to the target value.\"\"\"\n    return sum(nums) == target and len(nums) >= k", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6], target=9, k=3):\n    from itertools import combinations\n    for c in combinations(nums, k):\n        if sum(c) == target:\n            return list(c)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return s == s[::-1]\ndef g(s=\"racecar\"):\n    return s\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 80, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return s == s[::-1]", "solution_func": "def g(s=\"racecar\"):\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target value.\"\"\"\n    return any(i + j == target for i in nums for j in nums)\ndef g(nums=[1, 2, 3, 4, 5, 6], target=9):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 80, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target value.\"\"\"\n    return any(i + j == target for i in nums for j in nums)", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6], target=9):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=50, length=3) -> bool:\n    \"\"\"Find a list of 'length' distinct numbers from nums whose sum is equal to the target.\"\"\"\n    assert len(nums) >= length\n    return any(sum(c) == target for c in combinations(nums, length))\ndef g(target=50, length=3):\n    nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 80, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=50, length=3) -> bool:\n    \"\"\"Find a list of 'length' distinct numbers from nums whose sum is equal to the target.\"\"\"\n    assert len(nums) >= length\n    return any(sum(c) == target for c in combinations(nums, length))", "solution_func": "def g(target=50, length=3):\n    nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(words: List[str], char='e', count=3) -> bool:\n    \"\"\"Find a list of 'count' words from words that contain the character 'char'.\"\"\"\n    return len([w for w in words if char in w]) >= count\ndef g(char='e', count=3):\n    words = ['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape']\n    return words\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 80, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], char='e', count=3) -> bool:\n    \"\"\"Find a list of 'count' words from words that contain the character 'char'.\"\"\"\n    return len([w for w in words if char in w]) >= count", "solution_func": "def g(char='e', count=3):\n    words = ['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape']\n    return words", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Find a pair of numbers in the matrix that sum up to the target value.\"\"\"\n    for row in matrix:\n        for num in row:\n            if target - num in row:\n                return True\n    return False\ndef g(target=20):\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 80, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Find a pair of numbers in the matrix that sum up to the target value.\"\"\"\n    for row in matrix:\n        for num in row:\n            if target - num in row:\n                return True\n    return False", "solution_func": "def g(target=20):\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers, find two numbers whose sum is equal to the target number.\n    \"\"\"\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            if s[i] + s[j] == target:\n                return True\n    return False\ndef g(target = 10):\n    return [2, 4, 6, 8]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 80, "target_skills": null, "problem_func": "from typing import*\ndef f(s: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers, find two numbers whose sum is equal to the target number.\n    \"\"\"\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            if s[i] + s[j] == target:\n                return True\n    return False", "solution_func": "def g(target = 10):\n    return [2, 4, 6, 8]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"\n    Check if a target string is a palindrome.\n    \"\"\"\n    return s == s[::-1]\ndef g(target = 'python'):\n    return target[::-1]\nassert f(g())\n", "emb": null, "idx_generation": 80, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"\n    Check if a target string is a palindrome.\n    \"\"\"\n    return s == s[::-1]", "solution_func": "def g(target = 'python'):\n    return target[::-1]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"\n    Check if a target string is an anagram of the given string.\n    \"\"\"\n    return sorted(s) == sorted(target)\ndef g(target = 'python'):\n    return ''.join(sorted(target, reverse=True))\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 80, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"\n    Check if a target string is an anagram of the given string.\n    \"\"\"\n    return sorted(s) == sorted(target)", "solution_func": "def g(target = 'python'):\n    return ''.join(sorted(target, reverse=True))", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(seq: List[int], n=5, length=3) -> bool:\n    \"\"\"Find a sequence of 1's and 2's of a given length that that adds up to n\"\"\"\n    return all((i in [1, 2] for i in seq)) and sum(seq) == n and (len(seq) == length)\ndef g(n = 5, length = 3):\n    return [2] * (n - length) + [1] * (2 * length - n)\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 80, "target_skills": null, "problem_func": "from typing import*\ndef f(seq: List[int], n=5, length=3) -> bool:\n    \"\"\"Find a sequence of 1's and 2's of a given length that that adds up to n\"\"\"\n    return all((i in [1, 2] for i in seq)) and sum(seq) == n and (len(seq) == length)", "solution_func": "def g(n = 5, length = 3):\n    return [2] * (n - length) + [1] * (2 * length - n)", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], t=30, n=3) -> bool:\n    \"\"\"Find n distinct integers that sum to target\"\"\"\n    return len(arr) == len(set(arr)) == n and sum(arr) == t\ndef g(t=30, n=3):\n    return list(range(1, n+1))\nassert f(g())\n", "emb": null, "idx_generation": 81, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], t=30, n=3) -> bool:\n    \"\"\"Find n distinct integers that sum to target\"\"\"\n    return len(arr) == len(set(arr)) == n and sum(arr) == t", "solution_func": "def g(t=30, n=3):\n    return list(range(1, n+1))", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=100, n=5) -> bool:\n    \"\"\"Find n distinct integers that sum to target\"\"\"\n    return len(arr) == len(set(arr)) == n and sum(arr) == target\ndef g(target=100, n=5):\n    return list(range(1, n+1)) + [target - sum(range(1, n+1))]\nassert f(g())\n", "emb": null, "idx_generation": 81, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=100, n=5) -> bool:\n    \"\"\"Find n distinct integers that sum to target\"\"\"\n    return len(arr) == len(set(arr)) == n and sum(arr) == target", "solution_func": "def g(target=100, n=5):\n    return list(range(1, n+1)) + [target - sum(range(1, n+1))]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=50, n=4) -> bool:\n    \"\"\"Find n distinct integers that sum to target\"\"\"\n    return len(arr) == len(set(arr)) == n and sum(arr) == target\ndef g(target=50, n=4):\n    return [5] * (n-1) + [target - 5*(n-1)]\nassert f(g())\n", "emb": null, "idx_generation": 81, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=50, n=4) -> bool:\n    \"\"\"Find n distinct integers that sum to target\"\"\"\n    return len(arr) == len(set(arr)) == n and sum(arr) == target", "solution_func": "def g(target=50, n=4):\n    return [5] * (n-1) + [target - 5*(n-1)]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=7, b=11, c=13, d=17) -> bool:\n    \"\"\"Find n that satisfies the equation (n * a + b) % (c * d) == 0\"\"\"\n    return (n * a + b) % (c * d) == 0\ndef g(a=7, b=11, c=13, d=17):\n    return (c * d - b) // a\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 81, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=7, b=11, c=13, d=17) -> bool:\n    \"\"\"Find n that satisfies the equation (n * a + b) % (c * d) == 0\"\"\"\n    return (n * a + b) % (c * d) == 0", "solution_func": "def g(a=7, b=11, c=13, d=17):\n    return (c * d - b) // a", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers from the list that adds up to the target number\"\"\"\n    from itertools import combinations\n    for i in range(len(nums)):\n        for comb in combinations(nums, i+1):\n            if sum(comb) == target:\n                return True\n    return False\ndef g(nums=[10, 20, 30, 40, 50]):\n    return nums\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 81, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers from the list that adds up to the target number\"\"\"\n    from itertools import combinations\n    for i in range(len(nums)):\n        for comb in combinations(nums, i+1):\n            if sum(comb) == target:\n                return True\n    return False", "solution_func": "def g(nums=[10, 20, 30, 40, 50]):\n    return nums", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target='hello') -> bool:\n    \"\"\"Check if the target string is a substring of s\"\"\"\n    return target in s\ndef g(s='hello world'):\n    return s\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 81, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='hello') -> bool:\n    \"\"\"Check if the target string is a substring of s\"\"\"\n    return target in s", "solution_func": "def g(s='hello world'):\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(lst: List[int], n=100) -> bool:\n    \"\"\"Check if the list contains a number divisible by n.\"\"\"\n    for num in lst:\n        if num % n == 0:\n            return True\n    return False\n\ndef g(n=100):\n    return [i for i in range(1, n+1)]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 81, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int], n=100) -> bool:\n    \"\"\"Check if the list contains a number divisible by n.\"\"\"\n    for num in lst:\n        if num % n == 0:\n            return True\n    return False", "solution_func": "def g(n=100):\n    return [i for i in range(1, n+1)]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, ch='a') -> bool:\n    \"\"\"Check if the given character is the first character of the string.\"\"\"\n    return s[0] == ch\n\ndef g(ch='a'):\n    return ch + 'bcde'\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 81, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, ch='a') -> bool:\n    \"\"\"Check if the given character is the first character of the string.\"\"\"\n    return s[0] == ch", "solution_func": "def g(ch='a'):\n    return ch + 'bcde'", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=2, y=3) -> bool:\n    \"\"\"Check if the given number is a perfect power of x raised to the power of y.\"\"\"\n    root = n ** (1 / y)\n    return math.isclose(root, round(root)) and root ** y == n\n\ndef g(x=2, y=3):\n    return x ** y\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0], "idx_generation": 81, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, x=2, y=3) -> bool:\n    \"\"\"Check if the given number is a perfect power of x raised to the power of y.\"\"\"\n    root = n ** (1 / y)\n    return math.isclose(root, round(root)) and root ** y == n", "solution_func": "def g(x=2, y=3):\n    return x ** y", "map_ix": [0, 0, 0, 1, 0, 0, 0, 1, 0, 1]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target: int, start=0, end=len(arr)-1) -> bool:\n    \"\"\"Check if the target integer is present in the array.\"\"\"\n    if start > end:\n        return False\n    mid = (start + end) // 2\n    if arr[mid] == target:\n        return True\n    elif arr[mid] < target:\n        return f(arr, target, mid + 1, end)\n    else:\n        return f(arr, target, start, mid - 1)\ndef g(arr: List[int], target: int):\n    return arr\nassert f(g([1, 2, 3, 4, 5], 3))\n", "emb": null, "idx_generation": 81, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int, start=0, end=len(arr)-1) -> bool:\n    \"\"\"Check if the target integer is present in the array.\"\"\"\n    if start > end:\n        return False\n    mid = (start + end) // 2\n    if arr[mid] == target:\n        return True\n    elif arr[mid] < target:\n        return f(arr, target, mid + 1, end)\n    else:\n        return f(arr, target, start, mid - 1)", "solution_func": "def g(arr: List[int], target: int):\n    return arr", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=25.3) -> bool:\n    \"\"\"Check if the square root of x is equal to a\"\"\"\n    return math.isclose(math.sqrt(x), a)\n    \ndef g(a=25.3):\n    return a ** 2\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 82, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, a=25.3) -> bool:\n    \"\"\"Check if the square root of x is equal to a\"\"\"\n    return math.isclose(math.sqrt(x), a)", "solution_func": "def g(a=25.3):\n    return a ** 2", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: int, a=7, b=7) -> bool:\n    \"\"\"Check if the modulo of x divided by a is equal to b\"\"\"\n    return x % a == b\n\ndef g(a=7, b=7):\n    return (a * b) + b\n\nassert f(g())\n", "emb": null, "idx_generation": 82, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, a=7, b=7) -> bool:\n    \"\"\"Check if the modulo of x divided by a is equal to b\"\"\"\n    return x % a == b", "solution_func": "def g(a=7, b=7):\n    return (a * b) + b", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\n\ndef f(x: float, a=42.5, b=36.8) -> bool:\n    \"\"\"Check if the absolute difference between x and a is less than b\"\"\"\n    return abs(x - a) < b\n\ndef g(a=42.5, b=36.8):\n    return random.uniform(a-b, a+b)\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 82, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(x: float, a=42.5, b=36.8) -> bool:\n    \"\"\"Check if the absolute difference between x and a is less than b\"\"\"\n    return abs(x - a) < b", "solution_func": "def g(a=42.5, b=36.8):\n    return random.uniform(a-b, a+b)", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: list, target: int) -> bool:\n    \"\"\"\n    Check if there are two numbers in a given list that add up to a target number.\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5], target=9):\n    \"\"\"\n    Find two numbers in the list that add up to the target number.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\nassert f(g())\n", "emb": null, "idx_generation": 82, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: list, target: int) -> bool:\n    \"\"\"\n    Check if there are two numbers in a given list that add up to a target number.\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(arr=[1, 2, 3, 4, 5], target=9):\n    \"\"\"\n    Find two numbers in the list that add up to the target number.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if a given string is a palindrome.\n    \"\"\"\n    return s == s[::-1]\n\ndef g(s=\"racecar\"):\n    \"\"\"\n    Reverse the given string.\n    \"\"\"\n    return s[::-1]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 82, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if a given string is a palindrome.\n    \"\"\"\n    return s == s[::-1]", "solution_func": "def g(s=\"racecar\"):\n    \"\"\"\n    Reverse the given string.\n    \"\"\"\n    return s[::-1]", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(num: int) -> bool:\n    \"\"\"\n    Check if a given number is a perfect square.\n    \"\"\"\n    return math.isqrt(num)**2 == num\n\ndef g(num=16):\n    \"\"\"\n    Find the square root of the given number.\n    \"\"\"\n    return int(math.sqrt(num))\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 82, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(num: int) -> bool:\n    \"\"\"\n    Check if a given number is a perfect square.\n    \"\"\"\n    return math.isqrt(num)**2 == num", "solution_func": "def g(num=16):\n    \"\"\"\n    Find the square root of the given number.\n    \"\"\"\n    return int(math.sqrt(num))", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(num_list: List[int], target_sum=100) -> bool:\n    \"\"\"Find a subset of num_list whose sum is equal to target_sum\"\"\"\n    n = len(num_list)\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n    for i in range(1, n + 1):\n        for j in range(target_sum + 1):\n            dp[i][j] = dp[i - 1][j]\n            if j >= num_list[i - 1]:\n                dp[i][j] = dp[i][j] or dp[i - 1][j - num_list[i - 1]]\n    return dp[n][target_sum]\ndef g(num_list = [1, 2, 3, 4, 5]):\n    return num_list\nassert f(g())\n", "emb": null, "idx_generation": 82, "target_skills": null, "problem_func": "from typing import*\ndef f(num_list: List[int], target_sum=100) -> bool:\n    \"\"\"Find a subset of num_list whose sum is equal to target_sum\"\"\"\n    n = len(num_list)\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n    for i in range(1, n + 1):\n        for j in range(target_sum + 1):\n            dp[i][j] = dp[i - 1][j]\n            if j >= num_list[i - 1]:\n                dp[i][j] = dp[i][j] or dp[i - 1][j - num_list[i - 1]]\n    return dp[n][target_sum]", "solution_func": "def g(num_list = [1, 2, 3, 4, 5]):\n    return num_list", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_sum=100) -> bool:\n    \"\"\"Find a path in the matrix whose sum is equal to target_sum\"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n\n    def dfs(i, j, curr_sum):\n        if i < 0 or i >= m or j < 0 or j >= n:\n            return False\n        curr_sum += matrix[i][j]\n        if curr_sum == target_sum:\n            return True\n        return dfs(i + 1, j, curr_sum) or dfs(i, j + 1, curr_sum)\n\n    return dfs(0, 0, 0)\ndef g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 82, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_sum=100) -> bool:\n    \"\"\"Find a path in the matrix whose sum is equal to target_sum\"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n\n    def dfs(i, j, curr_sum):\n        if i < 0 or i >= m or j < 0 or j >= n:\n            return False\n        curr_sum += matrix[i][j]\n        if curr_sum == target_sum:\n            return True\n        return dfs(i + 1, j, curr_sum) or dfs(i, j + 1, curr_sum)\n\n    return dfs(0, 0, 0)", "solution_func": "def g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Find the largest prime number less than n\"\"\"\n    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x ** 0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    for x in range(n - 1, 1, -1):\n        if is_prime(x):\n            return x\n    return -1\ndef g(n = 20, m = 10):\n    return n\nassert f(g())\n", "emb": null, "idx_generation": 82, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Find the largest prime number less than n\"\"\"\n    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x ** 0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    for x in range(n - 1, 1, -1):\n        if is_prime(x):\n            return x\n    return -1", "solution_func": "def g(n = 20, m = 10):\n    return n", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=2, b=3, c=4, d=5) -> bool:\n    \"\"\"\n    Check if a number n can be expressed as the sum of a, b, c, and d.\n\n    Sample Input:\n    n = 16\n\n    Sample Output:\n    True\n    \"\"\"\n    return n == a + b + c + d\ndef g(a=2, b=3, c=4, d=5):\n    return a + b + c + d\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 82, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=2, b=3, c=4, d=5) -> bool:\n    \"\"\"\n    Check if a number n can be expressed as the sum of a, b, c, and d.\n\n    Sample Input:\n    n = 16\n\n    Sample Output:\n    True\n    \"\"\"\n    return n == a + b + c + d", "solution_func": "def g(a=2, b=3, c=4, d=5):\n    return a + b + c + d", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int, k=3) -> bool:\n    \"\"\"Find k numbers in nums that add up to the target.\"\"\"\n    import itertools\n    combinations = itertools.combinations(nums, k)\n    for combination in combinations:\n        if sum(combination) == target:\n            return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5], target=9, k=3):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 83, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int, k=3) -> bool:\n    \"\"\"Find k numbers in nums that add up to the target.\"\"\"\n    import itertools\n    combinations = itertools.combinations(nums, k)\n    for combination in combinations:\n        if sum(combination) == target:\n            return True\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=9, k=3):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"Find the longest word in words that contains all the letters in target.\"\"\"\n    longest_word = ''\n    for word in words:\n        letters = set(target)\n        if all(letter in word for letter in letters) and len(word) > len(longest_word):\n            longest_word = word\n    return longest_word\ndef g(words=['python', 'programming', 'puzzle', 'computer']):\n    return words\nassert f(g())\n", "emb": null, "idx_generation": 83, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"Find the longest word in words that contains all the letters in target.\"\"\"\n    longest_word = ''\n    for word in words:\n        letters = set(target)\n        if all(letter in word for letter in letters) and len(word) > len(longest_word):\n            longest_word = word\n    return longest_word", "solution_func": "def g(words=['python', 'programming', 'puzzle', 'computer']):\n    return words", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Find the number of occurrences of the target in the matrix.\"\"\"\n    count = 0\n    for row in matrix:\n        count += row.count(target)\n    return count\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=5):\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 83, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Find the number of occurrences of the target in the matrix.\"\"\"\n    count = 0\n    for row in matrix:\n        count += row.count(target)\n    return count", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=5):\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(n: int, k=3) -> bool:\n    \"\"\"Determine if n is a prime number.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g(k=3):\n    n = k\n    primes = []\n    while len(primes) < k:\n        if f(n):\n            primes.append(n)\n        n += 1\n    return primes[-1]\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 83, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, k=3) -> bool:\n    \"\"\"Determine if n is a prime number.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True", "solution_func": "def g(k=3):\n    n = k\n    primes = []\n    while len(primes) < k:\n        if f(n):\n            primes.append(n)\n        n += 1\n    return primes[-1]", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\n\ndef f(arr: list, target: int) -> bool:\n    \"\"\"Determine if there are two numbers in the array that sum up to the target.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(arr=[random.randint(1, 10) for _ in range(5)], target=random.randint(1, 20)):\n    return arr, target\n\nassert f(*g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 83, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(arr: list, target: int) -> bool:\n    \"\"\"Determine if there are two numbers in the array that sum up to the target.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g(arr=[random.randint(1, 10) for _ in range(5)], target=random.randint(1, 20)):\n    return arr, target", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport datetime\n\ndef f(date: str, day: str) -> bool:\n    \"\"\"Determine if the given date falls on the given day of the week.\"\"\"\n    days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n    given_date = datetime.datetime.strptime(date, \"%Y-%m-%d\")\n    return days[given_date.weekday()] == day\n\ndef g(day='Monday'):\n    current_date = datetime.datetime.today().strftime(\"%Y-%m-%d\")\n    return current_date, day\n\nassert f(*g())\n", "emb": null, "idx_generation": 83, "target_skills": null, "problem_func": "from typing import*\nimport datetime\n\ndef f(date: str, day: str) -> bool:\n    \"\"\"Determine if the given date falls on the given day of the week.\"\"\"\n    days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n    given_date = datetime.datetime.strptime(date, \"%Y-%m-%d\")\n    return days[given_date.weekday()] == day", "solution_func": "def g(day='Monday'):\n    current_date = datetime.datetime.today().strftime(\"%Y-%m-%d\")\n    return current_date, day", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(n: int, lst: list) -> bool:\n    \"\"\"Check if a given number is present in a list.\"\"\"\n    return n in lst\n\ndef g(lst: list) -> int:\n    \"\"\"Generate a random number between 1 and 100.\"\"\"\n    return random.randint(1, 100)\n\n# Test case\nlst = [1, 2, 3, 4, 5]\nassert f(g(lst), lst)\n", "emb": null, "idx_generation": 83, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(n: int, lst: list) -> bool:\n    \"\"\"Check if a given number is present in a list.\"\"\"\n    return n in lst", "solution_func": "def g(lst: list) -> int:\n    \"\"\"Generate a random number between 1 and 100.\"\"\"\n    return random.randint(1, 100)\n\n# Test case\nlst = [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\nimport math\n\ndef f(x: float, y: float, r: float) -> bool:\n    \"\"\"Check if a given point is inside a circle with a given radius.\"\"\"\n    return math.sqrt(x**2 + y**2) <= r\n\ndef g(x: float, y: float) -> float:\n    \"\"\"Generate a random radius between 1 and 10.\"\"\"\n    return random.uniform(1, 10)\n\n# Test case\nx, y = 3, 4\nassert f(x, y, g(x, y))\n", "emb": null, "idx_generation": 83, "target_skills": null, "problem_func": "import random\nfrom typing import*\nimport math\n\ndef f(x: float, y: float, r: float) -> bool:\n    \"\"\"Check if a given point is inside a circle with a given radius.\"\"\"\n    return math.sqrt(x**2 + y**2) <= r", "solution_func": "def g(x: float, y: float) -> float:\n    \"\"\"Generate a random radius between 1 and 10.\"\"\"\n    return random.uniform(1, 10)\n\n# Test case\nx, y = 3, 4", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(n: int, lst: list) -> bool:\n    \"\"\"Check if all elements in a list are divisible by a given number.\"\"\"\n    return all(elem % n == 0 for elem in lst)\n\ndef g(lst: list) -> int:\n    \"\"\"Generate a random number between 1 and 10.\"\"\"\n    return random.randint(1, 10)\n\n# Test case\nlst = [10, 20, 30, 40, 50]\nassert f(g(lst), lst)\n", "emb": null, "idx_generation": 83, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(n: int, lst: list) -> bool:\n    \"\"\"Check if all elements in a list are divisible by a given number.\"\"\"\n    return all(elem % n == 0 for elem in lst)", "solution_func": "def g(lst: list) -> int:\n    \"\"\"Generate a random number between 1 and 10.\"\"\"\n    return random.randint(1, 10)\n\n# Test case\nlst = [10, 20, 30, 40, 50]", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nimport random\nfrom typing import*\ndef f(x: List[int], target: int, n: int = 4) -> bool:\n    \"\"\"\n    Check if there exists a combination of n elements from the list x that adds up to the target.\n    \"\"\"\n    from itertools import combinations\n    for combination in combinations(x, n):\n        if sum(combination) == target:\n            return True\n    return False\ndef g(x: List[int], target: int, n: int = 4):\n    \"\"\"\n    Generate a list of n elements from the list x that adds up to the target.\n    \"\"\"\n    from random import sample\n    return sample(x, n)\nassert f(g([1, 2, 3, 4, 5], 9))\n", "emb": null, "idx_generation": 83, "target_skills": null, "problem_func": "import itertools\nimport random\nfrom typing import*\ndef f(x: List[int], target: int, n: int = 4) -> bool:\n    \"\"\"\n    Check if there exists a combination of n elements from the list x that adds up to the target.\n    \"\"\"\n    from itertools import combinations\n    for combination in combinations(x, n):\n        if sum(combination) == target:\n            return True\n    return False", "solution_func": "def g(x: List[int], target: int, n: int = 4):\n    \"\"\"\n    Generate a list of n elements from the list x that adds up to the target.\n    \"\"\"\n    from random import sample\n    return sample(x, n)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, lst=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if n is a prime number\"\"\"\n    return n in lst\ndef g(lst=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return lst[0]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 84, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if n is a prime number\"\"\"\n    return n in lst", "solution_func": "def g(lst=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return lst[0]", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substr='python') -> bool:\n    \"\"\"Check if a string contains a substring\"\"\"\n    return substr in s.lower()\ndef g(substr='python'):\n    return substr.upper()\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 84, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substr='python') -> bool:\n    \"\"\"Check if a string contains a substring\"\"\"\n    return substr in s.lower()", "solution_func": "def g(substr='python'):\n    return substr.upper()", "map_ix": [0, 0, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if n is a perfect square\"\"\"\n    return math.isqrt(n)**2 == n\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return lst[-1]**2\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 84, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if n is a perfect square\"\"\"\n    return math.isqrt(n)**2 == n", "solution_func": "def g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return lst[-1]**2", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=18) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(len(nums)) if i != j))\ndef g(target = 18):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 84, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=18) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(len(nums)) if i != j))", "solution_func": "def g(target = 18):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(words: List[str], prefix='pre', suffix='ix') -> bool:\n    \"\"\"Find words that start with the given prefix and end with the given suffix.\"\"\"\n    return all((word.startswith(prefix) and word.endswith(suffix) for word in words))\ndef g(prefix='pre', suffix='ix'):\n    return ['prefix', 'suffix', 'middle', 'prefixsuffix']\nassert f(g())\n", "emb": null, "idx_generation": 84, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], prefix='pre', suffix='ix') -> bool:\n    \"\"\"Find words that start with the given prefix and end with the given suffix.\"\"\"\n    return all((word.startswith(prefix) and word.endswith(suffix) for word in words))", "solution_func": "def g(prefix='pre', suffix='ix'):\n    return ['prefix', 'suffix', 'middle', 'prefixsuffix']", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], row_sum=15, col_sum=15) -> bool:\n    \"\"\"Check if the sum of each row and each column in the matrix is equal to the given row_sum and col_sum respectively.\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    return all((s == row_sum for s in row_sums)) and all((s == col_sum for s in col_sums))\ndef g(row_sum=15, col_sum=15):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n", "emb": null, "idx_generation": 84, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], row_sum=15, col_sum=15) -> bool:\n    \"\"\"Check if the sum of each row and each column in the matrix is equal to the given row_sum and col_sum respectively.\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    return all((s == row_sum for s in row_sums)) and all((s == col_sum for s in col_sums))", "solution_func": "def g(row_sum=15, col_sum=15):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target_char='e') -> bool:\n    \"\"\"Check if a given character appears in the string.\"\"\"\n    return target_char in s\ndef g(target_char = 'e'):\n    return 'Hello World!'\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 84, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target_char='e') -> bool:\n    \"\"\"Check if a given character appears in the string.\"\"\"\n    return target_char in s", "solution_func": "def g(target_char = 'e'):\n    return 'Hello World!'", "map_ix": [0, 0, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(radius: float, volume=100) -> bool:\n    \"\"\"Check if the volume of a sphere is equal to the given volume.\"\"\"\n    return (4/3) * math.pi * (radius ** 3) == volume\ndef g(volume = 100):\n    radius = ((3 * volume) / (4 * math.pi)) ** (1/3)\n    return radius\nassert f(g())\n", "emb": null, "idx_generation": 84, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(radius: float, volume=100) -> bool:\n    \"\"\"Check if the volume of a sphere is equal to the given volume.\"\"\"\n    return (4/3) * math.pi * (radius ** 3) == volume", "solution_func": "def g(volume = 100):\n    radius = ((3 * volume) / (4 * math.pi)) ** (1/3)\n    return radius", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, digit_sum=10) -> bool:\n    \"\"\"Check if the sum of the digits of a number is equal to the given digit_sum.\"\"\"\n    return sum(int(digit) for digit in str(n)) == digit_sum\ndef g(digit_sum = 10):\n    n = int(str(digit_sum) * (digit_sum // 9))\n    return n\nassert f(g())\n", "emb": null, "idx_generation": 84, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, digit_sum=10) -> bool:\n    \"\"\"Check if the sum of the digits of a number is equal to the given digit_sum.\"\"\"\n    return sum(int(digit) for digit in str(n)) == digit_sum", "solution_func": "def g(digit_sum = 10):\n    n = int(str(digit_sum) * (digit_sum // 9))\n    return n", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if a string is a palindrome and contains a certain number of vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return s == s[::-1] and sum(1 for c in s if c.lower() in vowels) == n\ndef g(n = 5):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return \"\".join(vowels[:n]) + \"\".join(vowels[:n][::-1])\nassert f(g())\n", "emb": null, "idx_generation": 84, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if a string is a palindrome and contains a certain number of vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return s == s[::-1] and sum(1 for c in s if c.lower() in vowels) == n", "solution_func": "def g(n = 5):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return \"\".join(vowels[:n]) + \"\".join(vowels[:n][::-1])", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(path: List[int], edges=[[0, 1], [0, 2], [1, 3], [2, 4]], u=0, v=4, bound=2) -> bool:\n    \"\"\"Find a path from node u to node v, of a bounded length, in the given digraph on vertices 0, 1,..., n.\"\"\"\n    assert path[0] == u and path[-1] == v and all(([i, j] in edges for (i, j) in zip(path, path[1:])))\n    return len(path) <= bound\ndef g(edges = [[0, 1], [0, 2], [1, 3], [2, 4]], u = 0, v = 4, bound = 2):\n    # Dijkstra's algorithm\n    import heapq\n    from collections import defaultdict\n    queue = [(0, u, u)]  # distance, node, trail\n\n    trails = {}\n    neighbors = defaultdict(set)\n    for (i, j) in edges:\n        neighbors[i].add(j)\n\n    while queue:\n        dist, i, j = heapq.heappop(queue)\n        if i in trails:\n            continue\n        trails[i] = j\n        if i == v:\n            break\n        for j in neighbors[i]:\n            if j not in trails:\n                heapq.heappush(queue, (dist + 1, j, i))\n    if v in trails:\n        rev_path = [v]\n        while rev_path[-1] != u:\n            rev_path.append(trails[rev_path[-1]])\n        return rev_path[::-1]\nassert f(g())\n", "emb": null, "idx_generation": 85, "target_skills": null, "problem_func": "from typing import*\ndef f(path: List[int], edges=[[0, 1], [0, 2], [1, 3], [2, 4]], u=0, v=4, bound=2) -> bool:\n    \"\"\"Find a path from node u to node v, of a bounded length, in the given digraph on vertices 0, 1,..., n.\"\"\"\n    assert path[0] == u and path[-1] == v and all(([i, j] in edges for (i, j) in zip(path, path[1:])))\n    return len(path) <= bound", "solution_func": "def g(edges = [[0, 1], [0, 2], [1, 3], [2, 4]], u = 0, v = 4, bound = 2):\n    # Dijkstra's algorithm\n    import heapq\n    from collections import defaultdict\n    queue = [(0, u, u)]  # distance, node, trail\n\n    trails = {}\n    neighbors = defaultdict(set)\n    for (i, j) in edges:\n        neighbors[i].add(j)\n\n    while queue:\n        dist, i, j = heapq.heappop(queue)\n        if i in trails:\n            continue\n        trails[i] = j\n        if i == v:\n            break\n        for j in neighbors[i]:\n            if j not in trails:\n                heapq.heappush(queue, (dist + 1, j, i))\n    if v in trails:\n        rev_path = [v]\n        while rev_path[-1] != u:\n            rev_path.append(trails[rev_path[-1]])\n        return rev_path[::-1]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(sides: List[int], options=[1, 2, 3, 4], n=24, max_dim=4) -> bool:\n    \"\"\"\n    Find the side lengths of a box in fewest dimensions (dimension <= max_dim) whose volume is n,\n     where each side length is in options\n    \"\"\"\n    prod = 1\n    for b in sides:\n        prod *= b\n    return prod == n and set(sides) <= set(options) and (len(sides) <= max_dim)\ndef g(options = [1, 2, 3, 4], n = 24, max_dim = 4):\n    options = sorted(set(options))\n    base = options[0]\n    logs = []\n    for i in options + [n]:\n        j = 1\n        log = 0\n        while j < i:\n            log +=1\n            j *= base\n        assert j == i, \"All numbers must be a power of the smallest number\"\n        logs.append(log)\n    denominations, n = logs[:-1], logs[-1]\n\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [base ** k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g())\n", "emb": null, "idx_generation": 85, "target_skills": null, "problem_func": "from typing import*\ndef f(sides: List[int], options=[1, 2, 3, 4], n=24, max_dim=4) -> bool:\n    \"\"\"\n    Find the side lengths of a box in fewest dimensions (dimension <= max_dim) whose volume is n,\n     where each side length is in options\n    \"\"\"\n    prod = 1\n    for b in sides:\n        prod *= b\n    return prod == n and set(sides) <= set(options) and (len(sides) <= max_dim)", "solution_func": "def g(options = [1, 2, 3, 4], n = 24, max_dim = 4):\n    options = sorted(set(options))\n    base = options[0]\n    logs = []\n    for i in options + [n]:\n        j = 1\n        log = 0\n        while j < i:\n            log +=1\n            j *= base", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(path: List[int], edges=[[0, 11], [0, 7], [7, 5], [0, 22], [11, 22], [11, 33], [22, 33]], u=0, v=33, bound=5) -> bool:\n    \"\"\"Find a path from node u to node v, of a bounded length, in the given digraph on vertices 0, 1,..., n.\"\"\"\n    assert path[0] == u and path[-1] == v and all(([i, j] in edges for (i, j) in zip(path, path[1:])))\n    return len(path) <= bound\ndef g(edges = [[0, 11], [0, 7], [7, 5], [0, 22], [11, 22], [11, 33], [22, 33]], u = 0, v = 33, bound = 5):\n    # Dijkstra's algorithm\n    import heapq\n    from collections import defaultdict\n    queue = [(0, u, u)]  # distance, node, trail\n\n    trails = {}\n    neighbors = defaultdict(set)\n    for (i, j) in edges:\n        neighbors[i].add(j)\n\n    while queue:\n        dist, i, j = heapq.heappop(queue)\n        if i in trails:\n            continue\n        trails[i] = j\n        if i == v:\n            break\n        for j in neighbors[i]:\n            if j not in trails:\n                heapq.heappush(queue, (dist + 1, j, i))\n    if v in trails:\n        rev_path = [v]\n        while rev_path[-1] != u:\n            rev_path.append(trails[rev_path[-1]])\n        return rev_path[::-1]\nassert f(g())\n", "emb": [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 85, "target_skills": null, "problem_func": "from typing import*\ndef f(path: List[int], edges=[[0, 11], [0, 7], [7, 5], [0, 22], [11, 22], [11, 33], [22, 33]], u=0, v=33, bound=5) -> bool:\n    \"\"\"Find a path from node u to node v, of a bounded length, in the given digraph on vertices 0, 1,..., n.\"\"\"\n    assert path[0] == u and path[-1] == v and all(([i, j] in edges for (i, j) in zip(path, path[1:])))\n    return len(path) <= bound", "solution_func": "def g(edges = [[0, 11], [0, 7], [7, 5], [0, 22], [11, 22], [11, 33], [22, 33]], u = 0, v = 33, bound = 5):\n    # Dijkstra's algorithm\n    import heapq\n    from collections import defaultdict\n    queue = [(0, u, u)]  # distance, node, trail\n\n    trails = {}\n    neighbors = defaultdict(set)\n    for (i, j) in edges:\n        neighbors[i].add(j)\n\n    while queue:\n        dist, i, j = heapq.heappop(queue)\n        if i in trails:\n            continue\n        trails[i] = j\n        if i == v:\n            break\n        for j in neighbors[i]:\n            if j not in trails:\n                heapq.heappush(queue, (dist + 1, j, i))\n    if v in trails:\n        rev_path = [v]\n        while rev_path[-1] != u:\n            rev_path.append(trails[rev_path[-1]])\n        return rev_path[::-1]", "map_ix": [0, 0, 1, 0, 0, 0, 0, 0, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there is a subset of nums that adds up to target\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n    return dp[n][target]\n\ndef g(n=10, target=10):\n    return random.choices(range(1, 10), k=n)\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 85, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there is a subset of nums that adds up to target\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n    return dp[n][target]", "solution_func": "def g(n=10, target=10):\n    return random.choices(range(1, 10), k=n)", "map_ix": [1, 1, 0, 0, 0, 0, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there is a pair of numbers in nums that adds up to target\"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 85, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there is a pair of numbers in nums that adds up to target\"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5]):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(grid: List[List[int]]) -> bool:\n    \"\"\"Check if the given grid forms a magic square\"\"\"\n    n = len(grid)\n    target_sum = sum(grid[0])\n    for row in grid:\n        if sum(row) != target_sum:\n            return False\n    for col in range(n):\n        col_sum = sum(grid[row][col] for row in range(n))\n        if col_sum != target_sum:\n            return False\n    diag_sum1 = sum(grid[i][i] for i in range(n))\n    diag_sum2 = sum(grid[i][n - i - 1] for i in range(n))\n    if diag_sum1 != target_sum or diag_sum2 != target_sum:\n        return False\n    return True\n\ndef g(grid=[[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return grid\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 85, "target_skills": null, "problem_func": "from typing import*\ndef f(grid: List[List[int]]) -> bool:\n    \"\"\"Check if the given grid forms a magic square\"\"\"\n    n = len(grid)\n    target_sum = sum(grid[0])\n    for row in grid:\n        if sum(row) != target_sum:\n            return False\n    for col in range(n):\n        col_sum = sum(grid[row][col] for row in range(n))\n        if col_sum != target_sum:\n            return False\n    diag_sum1 = sum(grid[i][i] for i in range(n))\n    diag_sum2 = sum(grid[i][n - i - 1] for i in range(n))\n    if diag_sum1 != target_sum or diag_sum2 != target_sum:\n        return False\n    return True", "solution_func": "def g(grid=[[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return grid", "map_ix": [0, 0, 0, 0, 0, 0, 1, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, x=100, y=200) -> bool:\n    \"\"\"Check if the sum of two numbers is divisible by a given number.\"\"\"\n    return (x + y) % n == 0\ndef g(x=100, y=200, n=5):\n    return n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 85, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, x=100, y=200) -> bool:\n    \"\"\"Check if the sum of two numbers is divisible by a given number.\"\"\"\n    return (x + y) % n == 0", "solution_func": "def g(x=100, y=200, n=5):\n    return n", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s1: str, s2='python') -> bool:\n    \"\"\"Check if a given string is a substring of another string.\"\"\"\n    return s1 in s2\ndef g(s1='py', s2='python'):\n    return s1\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 85, "target_skills": null, "problem_func": "from typing import*\ndef f(s1: str, s2='python') -> bool:\n    \"\"\"Check if a given string is a substring of another string.\"\"\"\n    return s1 in s2", "solution_func": "def g(s1='py', s2='python'):\n    return s1", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, m=1, p=1) -> bool:\n    \"\"\"Check if a given number is divisible by another number raised to a power.\"\"\"\n    return n % (m ** p) == 0\ndef g(n=100, m=10, p=2):\n    return n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 85, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m=1, p=1) -> bool:\n    \"\"\"Check if a given number is divisible by another number raised to a power.\"\"\"\n    return n % (m ** p) == 0", "solution_func": "def g(n=100, m=10, p=2):\n    return n", "map_ix": [0, 0, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if there are two numbers in the array whose sum is equal to the product of the other two numbers.\"\"\"\n    import itertools\n    pairs = list(itertools.combinations(arr, 2))\n    for pair in pairs:\n        product = pair[0] * pair[1]\n        if product in arr and pair[0] + pair[1] == product:\n            return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g())\n", "emb": null, "idx_generation": 85, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if there are two numbers in the array whose sum is equal to the product of the other two numbers.\"\"\"\n    import itertools\n    pairs = list(itertools.combinations(arr, 2))\n    for pair in pairs:\n        product = pair[0] * pair[1]\n        if product in arr and pair[0] + pair[1] == product:\n            return True\n    return False", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], t: int, target=2022) -> bool:\n    \"\"\"Find a pair of distinct indices i and j such that x[i] + x[j] = target\"\"\"\n    for i in range(len(x)):\n        for j in range(i+1, len(x)):\n            if x[i] + x[j] == target:\n                return True\n    return False\n\ndef g(t: int, target=2022):\n    return [target - t, t]\n\nassert f(g())\n", "emb": null, "idx_generation": 86, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], t: int, target=2022) -> bool:\n    \"\"\"Find a pair of distinct indices i and j such that x[i] + x[j] = target\"\"\"\n    for i in range(len(x)):\n        for j in range(i+1, len(x)):\n            if x[i] + x[j] == target:\n                return True\n    return False", "solution_func": "def g(t: int, target=2022):\n    return [target - t, t]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n: int, target=\"python\") -> bool:\n    \"\"\"Check if the target string is contained in s, at least n times\"\"\"\n    return s.count(target) >= n\n\ndef g(n: int, target=\"python\"):\n    return target * n\n\nassert f(g())\n", "emb": null, "idx_generation": 86, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n: int, target=\"python\") -> bool:\n    \"\"\"Check if the target string is contained in s, at least n times\"\"\"\n    return s.count(target) >= n", "solution_func": "def g(n: int, target=\"python\"):\n    return target * n", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of distinct indices i and j such that arr[i] + arr[j] = target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target=0):\n    return [target, -target]\n\nassert f(g())\n", "emb": [1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 86, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of distinct indices i and j such that arr[i] + arr[j] = target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g(target=0):\n    return [target, -target]", "map_ix": [1, 1, 1, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a list that add up to the target.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums: List[int], target: int):\n    return (nums, target)\n\n# Test case\nassert f(g([2, 4, 6, 8], 10))\n", "emb": null, "idx_generation": 86, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a list that add up to the target.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(nums: List[int], target: int):\n    return (nums, target)\n\n# Test case", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is symmetric.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix: List[List[int]]):\n    return matrix\n\n# Test case\nassert f(g([[1, 2, 3], [2, 4, 5], [3, 5, 6]]))\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 86, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is symmetric.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "solution_func": "def g(matrix: List[List[int]]):\n    return matrix\n\n# Test case", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"Check if two strings are isomorphic.\"\"\"\n    if len(s) != len(t):\n        return False\n    s_dict = {}\n    t_dict = {}\n    for i in range(len(s)):\n        if s[i] in s_dict and s_dict[s[i]] != t[i]:\n            return False\n        if t[i] in t_dict and t_dict[t[i]] != s[i]:\n            return False\n        s_dict[s[i]] = t[i]\n        t_dict[t[i]] = s[i]\n    return True\n\ndef g(s: str, t: str):\n    return (s, t)\n\n# Test case\nassert f(g(\"egg\", \"add\"))", "emb": null, "idx_generation": 86, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"Check if two strings are isomorphic.\"\"\"\n    if len(s) != len(t):\n        return False\n    s_dict = {}\n    t_dict = {}\n    for i in range(len(s)):\n        if s[i] in s_dict and s_dict[s[i]] != t[i]:\n            return False\n        if t[i] in t_dict and t_dict[t[i]] != s[i]:\n            return False\n        s_dict[s[i]] = t[i]\n        t_dict[t[i]] = s[i]\n    return True", "solution_func": "def g(s: str, t: str):\n    return (s, t)\n\n# Test case", "map_ix": null}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(n: int, nums=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29], target=100) -> bool:\n    \"\"\"\n    Find a list of prime numbers whose sum is equal to the target number\n    \"\"\"\n    primes = [num for num in nums if num <= target]\n    for i in range(1, len(primes) + 1):\n        for combination in itertools.combinations(primes, i):\n            if sum(combination) == target:\n                return True\n    return False\ndef g(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29], target = 100):\n    return nums\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 86, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(n: int, nums=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29], target=100) -> bool:\n    \"\"\"\n    Find a list of prime numbers whose sum is equal to the target number\n    \"\"\"\n    primes = [num for num in nums if num <= target]\n    for i in range(1, len(primes) + 1):\n        for combination in itertools.combinations(primes, i):\n            if sum(combination) == target:\n                return True\n    return False", "solution_func": "def g(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29], target = 100):\n    return nums", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, s1='a', s2='b', count1=50, count2=30) -> bool:\n    \"\"\"\n    Find a string that has count1 occurrences of s1 and count2 occurrences of s2 and contains\n    at least one occurrence of a substring 'aba'\n    \"\"\"\n    return s.count(s1) == count1 and s.count(s2) == count2 and 'aba' in s\ndef g(s1 = 'a', s2 = 'b', count1 = 50, count2 = 30):\n    if s1 == s2:\n        ans = (s1 + \"?\") * count1\n    elif s1.count(s2):\n        ans = (s1 + \"?\") * count1\n        ans += (s2 + \"?\") * (count2 - ans.count(s2))\n    else:\n        ans = (s2 + \"?\") * count2\n        ans += (s1 + \"?\") * (count1 - ans.count(s1))\n    return ans\nassert f(g())\n", "emb": null, "idx_generation": 86, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, s1='a', s2='b', count1=50, count2=30) -> bool:\n    \"\"\"\n    Find a string that has count1 occurrences of s1 and count2 occurrences of s2 and contains\n    at least one occurrence of a substring 'aba'\n    \"\"\"\n    return s.count(s1) == count1 and s.count(s2) == count2 and 'aba' in s", "solution_func": "def g(s1 = 'a', s2 = 'b', count1 = 50, count2 = 30):\n    if s1 == s2:\n        ans = (s1 + \"?\") * count1\n    elif s1.count(s2):\n        ans = (s1 + \"?\") * count1\n        ans += (s2 + \"?\") * (count2 - ans.count(s2))\n    else:\n        ans = (s2 + \"?\") * count2\n        ans += (s1 + \"?\") * (count1 - ans.count(s1))\n    return ans", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nimport math\nfrom typing import*\ndef f(n: int, nums=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29], target=100) -> bool:\n    \"\"\"\n    Find a list of prime numbers whose product is equal to the target number\n    \"\"\"\n    primes = [num for num in nums if num <= target]\n    for i in range(1, len(primes) + 1):\n        for combination in itertools.combinations(primes, i):\n            if math.prod(combination) == target:\n                return True\n    return False\ndef g(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29], target = 100):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 86, "target_skills": null, "problem_func": "import itertools\nimport math\nfrom typing import*\ndef f(n: int, nums=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29], target=100) -> bool:\n    \"\"\"\n    Find a list of prime numbers whose product is equal to the target number\n    \"\"\"\n    primes = [num for num in nums if num <= target]\n    for i in range(1, len(primes) + 1):\n        for combination in itertools.combinations(primes, i):\n            if math.prod(combination) == target:\n                return True\n    return False", "solution_func": "def g(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29], target = 100):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the string s contains exactly n vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count == n\ndef g(n=3):\n    return 'aeiou' * n\nassert f(g())\n", "emb": null, "idx_generation": 86, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the string s contains exactly n vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count == n", "solution_func": "def g(n=3):\n    return 'aeiou' * n", "map_ix": null}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int = 10, k: int = 3) -> bool:\n    \"\"\"Find k numbers from the list that sum up to the target\"\"\"\n    from itertools import combinations\n\n    for comb in combinations(nums, k):\n        if sum(comb) == target:\n            return True\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 10, k: int = 3):\n    return nums\n\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 87, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int = 10, k: int = 3) -> bool:\n    \"\"\"Find k numbers from the list that sum up to the target\"\"\"\n    from itertools import combinations\n\n    for comb in combinations(nums, k):\n        if sum(comb) == target:\n            return True\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 10, k: int = 3):\n    return nums", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(books: List[dict], min_pages: int = 300) -> bool:\n    \"\"\"Check if there is a book in the list with more than min_pages pages\"\"\"\n    for book in books:\n        if book.get('pages', 0) > min_pages:\n            return True\n    return False\n\ndef g(books: List[dict] = [{\"title\": \"Book 1\", \"pages\": 250}, {\"title\": \"Book 2\", \"pages\": 350}]):\n    return books\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 87, "target_skills": null, "problem_func": "from typing import*\ndef f(books: List[dict], min_pages: int = 300) -> bool:\n    \"\"\"Check if there is a book in the list with more than min_pages pages\"\"\"\n    for book in books:\n        if book.get('pages', 0) > min_pages:\n            return True\n    return False", "solution_func": "def g(books: List[dict] = [{\"title\": \"Book 1\", \"pages\": 250}, {\"title\": \"Book 2\", \"pages\": 350}]):\n    return books", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s1: str, s2: str, ignore_case: bool = False) -> bool:\n    \"\"\"Check if the two strings are identical, optionally ignoring case\"\"\"\n    if ignore_case:\n        return s1.lower() == s2.lower()\n    else:\n        return s1 == s2\n\ndef g(s1: str = \"Hello\", s2: str = \"hello\", ignore_case: bool = False):\n    return s1, s2\n\nassert f(*g())\n", "emb": null, "idx_generation": 87, "target_skills": null, "problem_func": "from typing import*\ndef f(s1: str, s2: str, ignore_case: bool = False) -> bool:\n    \"\"\"Check if the two strings are identical, optionally ignoring case\"\"\"\n    if ignore_case:\n        return s1.lower() == s2.lower()\n    else:\n        return s1 == s2", "solution_func": "def g(s1: str = \"Hello\", s2: str = \"hello\", ignore_case: bool = False):\n    return s1, s2", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, target_sum=0) -> bool:\n    \"\"\"Check if any row or column of a given matrix has a sum equal to the target_sum\"\"\"\n    rows = np.sum(matrix, axis=1)\n    cols = np.sum(matrix, axis=0)\n    return target_sum in rows or target_sum in cols\n\ndef g(target_sum=0):\n    matrix = np.random.randint(0, 10, size=(5, 5))\n    return matrix\n\nassert f(g())\n", "emb": null, "idx_generation": 87, "target_skills": null, "problem_func": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, target_sum=0) -> bool:\n    \"\"\"Check if any row or column of a given matrix has a sum equal to the target_sum\"\"\"\n    rows = np.sum(matrix, axis=1)\n    cols = np.sum(matrix, axis=0)\n    return target_sum in rows or target_sum in cols", "solution_func": "def g(target_sum=0):\n    matrix = np.random.randint(0, 10, size=(5, 5))\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\nfrom itertools import combinations\n\ndef f(numbers: list, target=10) -> bool:\n    \"\"\"Check if any combination of numbers in a given list adds up to the target\"\"\"\n    for r in range(1, len(numbers) + 1):\n        for comb in combinations(numbers, r):\n            if sum(comb) == target:\n                return True\n    return False\n\ndef g(target=10):\n    numbers = [1, 2, 3, 4, 5]\n    return numbers\n\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 87, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\nfrom itertools import combinations\n\ndef f(numbers: list, target=10) -> bool:\n    \"\"\"Check if any combination of numbers in a given list adds up to the target\"\"\"\n    for r in range(1, len(numbers) + 1):\n        for comb in combinations(numbers, r):\n            if sum(comb) == target:\n                return True\n    return False", "solution_func": "def g(target=10):\n    numbers = [1, 2, 3, 4, 5]\n    return numbers", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(sentence: str, target_word=\"hello\") -> bool:\n    \"\"\"Check if the target word is present in a given sentence\"\"\"\n    return target_word in sentence.lower().split()\n\ndef g(target_word=\"hello\"):\n    sentence = \"Hello, how are you today?\"\n    return sentence\n\nassert f(g())\n", "emb": null, "idx_generation": 87, "target_skills": null, "problem_func": "from typing import*\ndef f(sentence: str, target_word=\"hello\") -> bool:\n    \"\"\"Check if the target word is present in a given sentence\"\"\"\n    return target_word in sentence.lower().split()", "solution_func": "def g(target_word=\"hello\"):\n    sentence = \"Hello, how are you today?\"\n    return sentence", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, m: int) -> bool:\n    \"\"\"\n    Given two positive integers n and m, determine if n can be expressed as the sum of distinct powers of m.\n\n    Example:\n    n = 21, m = 2\n    output: True\n    Explanation: 21 can be expressed as 2^0 + 2^2 + 2^4\n    \"\"\"\n    powers = []\n    while n > 0:\n        power = 0\n        while m**power <= n:\n            power += 1\n        power -= 1\n        powers.append(power)\n        n -= m**power\n    return len(powers) == len(set(powers))\ndef g(n = 21, m = 2):\n    powers = []\n    power = 0\n    while m**power <= n:\n        powers.append(power)\n        power += 1\n    powers.reverse()\n    ans = []\n    for p in powers:\n        if n >= m**p:\n            ans.append(p)\n            n -= m**p\n    return ans\nassert f(g())\n", "emb": null, "idx_generation": 87, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m: int) -> bool:\n    \"\"\"\n    Given two positive integers n and m, determine if n can be expressed as the sum of distinct powers of m.\n\n    Example:\n    n = 21, m = 2\n    output: True\n    Explanation: 21 can be expressed as 2^0 + 2^2 + 2^4\n    \"\"\"\n    powers = []\n    while n > 0:\n        power = 0\n        while m**power <= n:\n            power += 1\n        power -= 1\n        powers.append(power)\n        n -= m**power\n    return len(powers) == len(set(powers))", "solution_func": "def g(n = 21, m = 2):\n    powers = []\n    power = 0\n    while m**power <= n:\n        powers.append(power)\n        power += 1\n    powers.reverse()\n    ans = []\n    for p in powers:\n        if n >= m**p:\n            ans.append(p)\n            n -= m**p\n    return ans", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string s consisting of lowercase English letters, determine if it is a palindrome after removing exactly\n    one character.\n\n    Example:\n    s = \"racecar\"\n    output: True\n    Explanation: Removing the 'e' results in the string \"racar\" which is a palindrome.\n    \"\"\"\n    return s == s[::-1] or any(s[i+1:] == s[i+1:][::-1] for i in range(len(s)))\ndef g(s = \"racecar\"):\n    for i in range(len(s)):\n        if s[:i] + s[i+1:] == (s[:i] + s[i+1:])[::-1]:\n            return s[:i] + s[i+1:]\n    return \"\"\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 87, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string s consisting of lowercase English letters, determine if it is a palindrome after removing exactly\n    one character.\n\n    Example:\n    s = \"racecar\"\n    output: True\n    Explanation: Removing the 'e' results in the string \"racar\" which is a palindrome.\n    \"\"\"\n    return s == s[::-1] or any(s[i+1:] == s[i+1:][::-1] for i in range(len(s)))", "solution_func": "def g(s = \"racecar\"):\n    for i in range(len(s)):\n        if s[:i] + s[i+1:] == (s[:i] + s[i+1:])[::-1]:\n            return s[:i] + s[i+1:]\n    return \"\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers nums, determine if it can be partitioned into two non-empty subsets such that the sum of\n    the elements in both subsets is equal.\n\n    Example:\n    nums = [1, 5, 11, 5]\n    output: True\n    Explanation: The list can be partitioned into [1, 5, 5] and [11] with equal sums.\n    \"\"\"\n    total_sum = sum(nums)\n    if total_sum % 2 != 0:\n        return False\n    target = total_sum // 2\n    dp = [False] * (target + 1)\n    dp[0] = True\n    for num in nums:\n        for i in range(target, num - 1, -1):\n            dp[i] = dp[i] or dp[i - num]\n    return dp[target]\ndef g(nums = [1, 5, 11, 5]):\n    total_sum = sum(nums)\n    if total_sum % 2 != 0:\n        return []\n    target = total_sum // 2\n    dp = [[False] * (target + 1) for _ in range(len(nums) + 1)]\n    for i in range(len(nums) + 1):\n        dp[i][0] = True\n    for i in range(1, len(nums) + 1):\n        for j in range(1, target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n    if not dp[-1][-1]:\n        return []\n    subset = []\n    i, j = len(nums), target\n    while i > 0 and j > 0:\n        if dp[i - 1][j]:\n            i -= 1\n        else:\n            subset.append(nums[i - 1])\n            j -= nums[i - 1]\n            i -= 1\n    return subset[::-1]\nassert f(g())\n", "emb": null, "idx_generation": 87, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers nums, determine if it can be partitioned into two non-empty subsets such that the sum of\n    the elements in both subsets is equal.\n\n    Example:\n    nums = [1, 5, 11, 5]\n    output: True\n    Explanation: The list can be partitioned into [1, 5, 5] and [11] with equal sums.\n    \"\"\"\n    total_sum = sum(nums)\n    if total_sum % 2 != 0:\n        return False\n    target = total_sum // 2\n    dp = [False] * (target + 1)\n    dp[0] = True\n    for num in nums:\n        for i in range(target, num - 1, -1):\n            dp[i] = dp[i] or dp[i - num]\n    return dp[target]", "solution_func": "def g(nums = [1, 5, 11, 5]):\n    total_sum = sum(nums)\n    if total_sum % 2 != 0:\n        return []\n    target = total_sum // 2\n    dp = [[False] * (target + 1) for _ in range(len(nums) + 1)]\n    for i in range(len(nums) + 1):\n        dp[i][0] = True\n    for i in range(1, len(nums) + 1):\n        for j in range(1, target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n    if not dp[-1][-1]:\n        return []\n    subset = []\n    i, j = len(nums), target\n    while i > 0 and j > 0:\n        if dp[i - 1][j]:\n            i -= 1\n        else:\n            subset.append(nums[i - 1])\n            j -= nums[i - 1]\n            i -= 1\n    return subset[::-1]", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the array that sum up to the target\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(arr, 3))\ndef g(target = 100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n", "emb": null, "idx_generation": 87, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the array that sum up to the target\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(arr, 3))", "solution_func": "def g(target = 100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], a=-10, b=10, count=5) -> bool:\n    \"\"\"Find a list of count or more different numbers each between a and b that are divisible by 3\"\"\"\n    assert all((n % 3 == 0 for n in nums))\n    return len(set(nums)) >= count\ndef g(a=-10, b=10, count=5):\n    return [n for n in range(a, b + 1) if n % 3 == 0]\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 88, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], a=-10, b=10, count=5) -> bool:\n    \"\"\"Find a list of count or more different numbers each between a and b that are divisible by 3\"\"\"\n    assert all((n % 3 == 0 for n in nums))\n    return len(set(nums)) >= count", "solution_func": "def g(a=-10, b=10, count=5):\n    return [n for n in range(a, b + 1) if n % 3 == 0]", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: int, a=2, b=20) -> bool:\n    \"\"\"Check if a number is a perfect square within a range\"\"\"\n    return x ** 0.5 == int(x ** 0.5) and a <= x <= b\ndef g(a=2, b=20):\n    return a ** 2\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 88, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, a=2, b=20) -> bool:\n    \"\"\"Check if a number is a perfect square within a range\"\"\"\n    return x ** 0.5 == int(x ** 0.5) and a <= x <= b", "solution_func": "def g(a=2, b=20):\n    return a ** 2", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(e: List[int], a=5, b=7, c=3, d=1) -> bool:\n    \"\"\"\n    Check if the given numbers are the coefficients of the equation y = ax + b and y = cx + d,\n    and if they intersect at a point with integer coordinates.\n    \"\"\"\n    x = (d - b) / (a - c)\n    return x.is_integer() and (a * x + b).is_integer() and (c * x + d).is_integer()\ndef g(a=5, b=7, c=3, d=1):\n    return [a, b, c, d]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 88, "target_skills": null, "problem_func": "from typing import*\ndef f(e: List[int], a=5, b=7, c=3, d=1) -> bool:\n    \"\"\"\n    Check if the given numbers are the coefficients of the equation y = ax + b and y = cx + d,\n    and if they intersect at a point with integer coordinates.\n    \"\"\"\n    x = (d - b) / (a - c)\n    return x.is_integer() and (a * x + b).is_integer() and (c * x + d).is_integer()", "solution_func": "def g(a=5, b=7, c=3, d=1):\n    return [a, b, c, d]", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"\n    Check if there exists a subarray of length k whose sum is divisible by k\n    \"\"\"\n    return any(sum(nums[i:i+k]) % k == 0 for i in range(len(nums)-k+1))\ndef g(k=3):\n    return [i for i in range(1, k+1)]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 88, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"\n    Check if there exists a subarray of length k whose sum is divisible by k\n    \"\"\"\n    return any(sum(nums[i:i+k]) % k == 0 for i in range(len(nums)-k+1))", "solution_func": "def g(k=3):\n    return [i for i in range(1, k+1)]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(words: List[str], s='abracadabra') -> bool:\n    \"\"\"\n    Check if all words in the list can be formed by rearranging the characters in s\n    \"\"\"\n    return all(set(word) <= set(s) and all(word.count(char) <= s.count(char) for char in set(word)) for word in words)\ndef g(s='abracadabra'):\n    return sorted(set(s))\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 88, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], s='abracadabra') -> bool:\n    \"\"\"\n    Check if all words in the list can be formed by rearranging the characters in s\n    \"\"\"\n    return all(set(word) <= set(s) and all(word.count(char) <= s.count(char) for char in set(word)) for word in words)", "solution_func": "def g(s='abracadabra'):\n    return sorted(set(s))", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list whose sum is equal to the target\n    \"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=10):\n    return [i for i in range(1, target//2+1)]\nassert f(g())\n", "emb": null, "idx_generation": 88, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list whose sum is equal to the target\n    \"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))", "solution_func": "def g(target=10):\n    return [i for i in range(1, target//2+1)]", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(matrix: List[List[int]], target=7, max_nums=3) -> bool:\n    \"\"\"Find a selection of at most max_nums numbers whose sum is the target value.\"\"\"\n    for row in matrix:\n        for num in row:\n            assert isinstance(num, int)\n    nums = [num for row in matrix for num in row]\n    return len(nums) <= max_nums and sum(nums) == target\ndef g(target = 7, max_nums = 3):\n    from itertools import combinations\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    for n in range(max_nums + 1):\n        for c in combinations(matrix, n):\n            nums = [num for row in c for num in row]\n            if sum(nums) == target:\n                return list(nums)\nassert f(g())\n", "emb": null, "idx_generation": 88, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(matrix: List[List[int]], target=7, max_nums=3) -> bool:\n    \"\"\"Find a selection of at most max_nums numbers whose sum is the target value.\"\"\"\n    for row in matrix:\n        for num in row:\n            assert isinstance(num, int)\n    nums = [num for row in matrix for num in row]\n    return len(nums) <= max_nums and sum(nums) == target", "solution_func": "def g(target = 7, max_nums = 3):\n    from itertools import combinations\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    for n in range(max_nums + 1):\n        for c in combinations(matrix, n):\n            nums = [num for row in c for num in row]\n            if sum(nums) == target:\n                return list(nums)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=50, max_comb=2) -> bool:\n    \"\"\"Find a combination of at most max_comb numbers whose product is the target value.\"\"\"\n    for num in nums:\n        assert isinstance(num, int)\n    return len(nums) <= max_comb and any(product == target for product in (a*b for a,b in combinations(nums, 2)))\ndef g(target = 50, max_comb = 2):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    for n in range(1, max_comb + 1):\n        for c in combinations(nums, n):\n            if any(product == target for product in (a*b for a,b in combinations(c, 2))):\n                return list(c)\nassert f(g())\n", "emb": null, "idx_generation": 88, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=50, max_comb=2) -> bool:\n    \"\"\"Find a combination of at most max_comb numbers whose product is the target value.\"\"\"\n    for num in nums:\n        assert isinstance(num, int)\n    return len(nums) <= max_comb and any(product == target for product in (a*b for a,b in combinations(nums, 2)))", "solution_func": "def g(target = 50, max_comb = 2):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    for n in range(1, max_comb + 1):\n        for c in combinations(nums, n):\n            if any(product == target for product in (a*b for a,b in combinations(c, 2))):\n                return list(c)", "map_ix": null}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\ndef f(string: str, target='Hello World!', max_changes=3) -> bool:\n    \"\"\"Find a string with at most max_changes changes that matches the target value.\"\"\"\n    assert len(string) == len(target)\n    return sum(a != b for a, b in zip(string, target)) <= max_changes\ndef g(target = 'Hello World!', max_changes = 3):\n    import random\n    string = 'Hello World!'\n    for i in range(max_changes):\n        index = random.randint(0, len(string) - 1)\n        string = string[:index] + random.choice('abcdefghijklmnopqrstuvwxyz') + string[index+1:]\n    return string\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 88, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(string: str, target='Hello World!', max_changes=3) -> bool:\n    \"\"\"Find a string with at most max_changes changes that matches the target value.\"\"\"\n    assert len(string) == len(target)\n    return sum(a != b for a, b in zip(string, target)) <= max_changes", "solution_func": "def g(target = 'Hello World!', max_changes = 3):\n    import random\n    string = 'Hello World!'\n    for i in range(max_changes):\n        index = random.randint(0, len(string) - 1)\n        string = string[:index] + random.choice('abcdefghijklmnopqrstuvwxyz') + string[index+1:]\n    return string", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(arr: List[int], target=250, max_nums=5) -> bool:\n    \"\"\"Find a selection of at most max_nums numbers whose total is the target value.\"\"\"\n    return len(arr) <= max_nums and sum(arr) == target\ndef g(target=250, max_nums=5):\n    from itertools import combinations_with_replacement\n    for n in range(max_nums + 1):\n        for c in combinations_with_replacement(range(1, 101), n):\n            if sum(c) == target:\n                return list(c)\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 88, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(arr: List[int], target=250, max_nums=5) -> bool:\n    \"\"\"Find a selection of at most max_nums numbers whose total is the target value.\"\"\"\n    return len(arr) <= max_nums and sum(arr) == target", "solution_func": "def g(target=250, max_nums=5):\n    from itertools import combinations_with_replacement\n    for n in range(max_nums + 1):\n        for c in combinations_with_replacement(range(1, 101), n):\n            if sum(c) == target:\n                return list(c)", "map_ix": [0, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, c='a') -> bool:\n    \"\"\"\n    Check if a given character is present in a string.\n    \"\"\"\n    return c in s\ndef g(c = 'a'):\n    return \"Hello, world!\"\nassert f(g())\n", "emb": null, "idx_generation": 89, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, c='a') -> bool:\n    \"\"\"\n    Check if a given character is present in a string.\n    \"\"\"\n    return c in s", "solution_func": "def g(c = 'a'):\n    return \"Hello, world!\"", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, d=5) -> bool:\n    \"\"\"\n    Check if a given number is divisible by another number.\n    \"\"\"\n    return n % d == 0\ndef g(d = 5):\n    return 100\nassert f(g())\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 89, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, d=5) -> bool:\n    \"\"\"\n    Check if a given number is divisible by another number.\n    \"\"\"\n    return n % d == 0", "solution_func": "def g(d = 5):\n    return 100", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(di: dict, k=20) -> bool:\n    \"\"\"\n    Check if a given key is present in a dictionary.\n    \"\"\"\n    return k in di\ndef g(k = 20):\n    return {'a': 1, 'b': 2, 'c': 3}\nassert f(g())\n", "emb": null, "idx_generation": 89, "target_skills": null, "problem_func": "from typing import*\ndef f(di: dict, k=20) -> bool:\n    \"\"\"\n    Check if a given key is present in a dictionary.\n    \"\"\"\n    return k in di", "solution_func": "def g(k = 20):\n    return {'a': 1, 'b': 2, 'c': 3}", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"Check if the string s can be split into n equal parts\"\"\"\n    return len(s) % n == 0 and all([s[i:i+len(s)//n] == s[:len(s)//n] for i in range(0, len(s), len(s)//n)])\ndef g(n: int):\n    s = \"abcdefghij\" * n\n    return s\nassert f(g(), 10)\n", "emb": null, "idx_generation": 89, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"Check if the string s can be split into n equal parts\"\"\"\n    return len(s) % n == 0 and all([s[i:i+len(s)//n] == s[:len(s)//n] for i in range(0, len(s), len(s)//n)])", "solution_func": "def g(n: int):\n    s = \"abcdefghij\" * n\n    return s", "map_ix": null}, {"fitness": -Infinity, "program_str": "import math\nfrom typing import*\nfrom math import gcd\n\ndef f(a: int, b: int, c: int) -> bool:\n    \"\"\"Check if the gcd of a and b is equal to c\"\"\"\n    return gcd(a, b) == c\ndef g(c: int):\n    a = 2 * c\n    b = 3 * c\n    return a, b\nassert f(*g())\n", "emb": null, "idx_generation": 89, "target_skills": null, "problem_func": "import math\nfrom typing import*\nfrom math import gcd\n\ndef f(a: int, b: int, c: int) -> bool:\n    \"\"\"Check if the gcd of a and b is equal to c\"\"\"\n    return gcd(a, b) == c", "solution_func": "def g(c: int):\n    a = 2 * c\n    b = 3 * c\n    return a, b", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: List[int]) -> bool:\n    \"\"\"Check if the list x is a palindrome\"\"\"\n    return x == x[::-1]\ndef g():\n    return [1, 2, 3, 4, 5, 4, 3, 2, 1]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 89, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int]) -> bool:\n    \"\"\"Check if the list x is a palindrome\"\"\"\n    return x == x[::-1]", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 4, 3, 2, 1]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], a = 0, b = 100, count = 10) -> bool:\n    \"\"\"Check if there are count or more numbers in the list nums that are divisible by a and not divisible by b\"\"\"\n    return sum((1 for n in nums if n % a == 0 and n % b != 0)) >= count\ndef g(a = 2, b = 3, count = 10):\n    return [n for n in range(1, 1000) if n % a == 0 and n % b != 0]\nassert f(g())\n", "emb": null, "idx_generation": 89, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], a = 0, b = 100, count = 10) -> bool:\n    \"\"\"Check if there are count or more numbers in the list nums that are divisible by a and not divisible by b\"\"\"\n    return sum((1 for n in nums if n % a == 0 and n % b != 0)) >= count", "solution_func": "def g(a = 2, b = 3, count = 10):\n    return [n for n in range(1, 1000) if n % a == 0 and n % b != 0]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], n = 3, m = 3) -> bool:\n    \"\"\"Check if the given matrix is an n x m matrix of consecutive numbers starting from 1\"\"\"\n    return matrix == [[i * m + j + 1 for j in range(m)] for i in range(n)]\ndef g(n = 3, m = 3):\n    return [[i * m + j + 1 for j in range(m)] for i in range(n)]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 89, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n = 3, m = 3) -> bool:\n    \"\"\"Check if the given matrix is an n x m matrix of consecutive numbers starting from 1\"\"\"\n    return matrix == [[i * m + j + 1 for j in range(m)] for i in range(n)]", "solution_func": "def g(n = 3, m = 3):\n    return [[i * m + j + 1 for j in range(m)] for i in range(n)]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substrings=['abc', 'def', 'ghi']) -> bool:\n    \"\"\"Check if the string s contains each substring in substrings in any order\"\"\"\n    return all((sub in s for sub in substrings))\ndef g(substrings = ['abc', 'def', 'ghi']):\n    return \"\".join(substrings)\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 89, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substrings=['abc', 'def', 'ghi']) -> bool:\n    \"\"\"Check if the string s contains each substring in substrings in any order\"\"\"\n    return all((sub in s for sub in substrings))", "solution_func": "def g(substrings = ['abc', 'def', 'ghi']):\n    return \"\".join(substrings)", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in lst that add up to n.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] + lst[j] == n:\n                return True\n    return False\n\ndef g(lst: List[int]):\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] + lst[j] == 0:\n                return [lst[i], lst[j]]\n    return []\n    \nassert f(g())\n", "emb": null, "idx_generation": 89, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in lst that add up to n.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] + lst[j] == n:\n                return True\n    return False", "solution_func": "def g(lst: List[int]):\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] + lst[j] == 0:\n                return [lst[i], lst[j]]\n    return []", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there are three numbers in a list that add up to a target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90]):\n    return nums\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 90, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there are three numbers in a list that add up to a target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False", "solution_func": "def g(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(words: List[str], char='a') -> bool:\n    \"\"\"Check if all words in a list start with a given character\"\"\"\n    return all(word.startswith(char) for word in words)\n\ndef g(words = ['apple', 'banana', 'avocado', 'apricot']):\n    return words\n\nassert f(g())\n", "emb": null, "idx_generation": 90, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], char='a') -> bool:\n    \"\"\"Check if all words in a list start with a given character\"\"\"\n    return all(word.startswith(char) for word in words)", "solution_func": "def g(words = ['apple', 'banana', 'avocado', 'apricot']):\n    return words", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], num=10) -> bool:\n    \"\"\"Check if a number is present in a 2D matrix\"\"\"\n    return any(num in row for row in matrix)\n\ndef g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g())\n", "emb": null, "idx_generation": 90, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], num=10) -> bool:\n    \"\"\"Check if a number is present in a 2D matrix\"\"\"\n    return any(num in row for row in matrix)", "solution_func": "def g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(num: int, li=[23, 14, 9, 36, 42, 17, 5, 11, 29], target=58) -> bool:\n    \"\"\"Check if the sum of three numbers in a list is equal to a target number\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            for k in range(j+1, len(li)):\n                if li[i] + li[j] + li[k] == target:\n                    return True\n    return False\ndef g(li=[23, 14, 9, 36, 42, 17, 5, 11, 29], target=58):\n    return li\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 90, "target_skills": null, "problem_func": "from typing import*\ndef f(num: int, li=[23, 14, 9, 36, 42, 17, 5, 11, 29], target=58) -> bool:\n    \"\"\"Check if the sum of three numbers in a list is equal to a target number\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            for k in range(j+1, len(li)):\n                if li[i] + li[j] + li[k] == target:\n                    return True\n    return False", "solution_func": "def g(li=[23, 14, 9, 36, 42, 17, 5, 11, 29], target=58):\n    return li", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, li=[2, 7, 12, 16, 21, 25, 29, 34, 39, 43], target=55) -> bool:\n    \"\"\"Check if the product of two numbers in a list is equal to a target number\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i] * li[j] == target:\n                return True\n    return False\ndef g(li=[2, 7, 12, 16, 21, 25, 29, 34, 39, 43], target=55):\n    return li\nassert f(g())\n", "emb": null, "idx_generation": 90, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, li=[2, 7, 12, 16, 21, 25, 29, 34, 39, 43], target=55) -> bool:\n    \"\"\"Check if the product of two numbers in a list is equal to a target number\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i] * li[j] == target:\n                return True\n    return False", "solution_func": "def g(li=[2, 7, 12, 16, 21, 25, 29, 34, 39, 43], target=55):\n    return li", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(num: int, li=[13, 22, 31, 45, 52, 67, 73, 84, 91, 100], target=80) -> bool:\n    \"\"\"Check if the difference between two numbers in a list is equal to a target number\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if abs(li[i] - li[j]) == target:\n                return True\n    return False\ndef g(li=[13, 22, 31, 45, 52, 67, 73, 84, 91, 100], target=80):\n    return li\nassert f(g())\n", "emb": null, "idx_generation": 90, "target_skills": null, "problem_func": "from typing import*\ndef f(num: int, li=[13, 22, 31, 45, 52, 67, 73, 84, 91, 100], target=80) -> bool:\n    \"\"\"Check if the difference between two numbers in a list is equal to a target number\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if abs(li[i] - li[j]) == target:\n                return True\n    return False", "solution_func": "def g(li=[13, 22, 31, 45, 52, 67, 73, 84, 91, 100], target=80):\n    return li", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=7) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a pair of numbers such that their sum is equal to a given target.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums=[2, 5, 3, 1, 4]):\n    return nums\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 90, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=7) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a pair of numbers such that their sum is equal to a given target.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(nums=[2, 5, 3, 1, 4]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, word='python', max_len=10) -> bool:\n    \"\"\"\n    Check if a given word is a substring of a string, but with a maximum length restriction.\n    \"\"\"\n    return word[:max_len] in s\n\ndef g(word='python', max_len=10):\n    return word\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 90, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, word='python', max_len=10) -> bool:\n    \"\"\"\n    Check if a given word is a substring of a string, but with a maximum length restriction.\n    \"\"\"\n    return word[:max_len] in s", "solution_func": "def g(word='python', max_len=10):\n    return word", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a triplet of numbers such that their sum is equal to a given target.\n    \"\"\"\n    nums.sort()\n    n = len(nums)\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            curr_sum = nums[i] + nums[left] + nums[right]\n            if curr_sum == target:\n                return True\n            elif curr_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False\n\ndef g(nums=[2, 5, 3, 1, 4]):\n    return nums\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 90, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a triplet of numbers such that their sum is equal to a given target.\n    \"\"\"\n    nums.sort()\n    n = len(nums)\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            curr_sum = nums[i] + nums[left] + nums[right]\n            if curr_sum == target:\n                return True\n            elif curr_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False", "solution_func": "def g(nums=[2, 5, 3, 1, 4]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, k=4, substr='python') -> bool:\n    \"\"\"Check if a substring appears k times in a string\"\"\"\n    return s.count(substr) >= k\ndef g(k = 4, substr = 'python'):\n    return substr * k\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 90, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, k=4, substr='python') -> bool:\n    \"\"\"Check if a substring appears k times in a string\"\"\"\n    return s.count(substr) >= k", "solution_func": "def g(k = 4, substr = 'python'):\n    return substr * k", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, nums=[2, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list nums that sum up to n\n    \"\"\"\n    return any(nums[i] + nums[j] == n for i in range(len(nums)) for j in range(i + 1, len(nums)))\ndef g(nums = [2, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20]):\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == n:\n                return True\n    return False\nassert f(g())\n", "emb": null, "idx_generation": 91, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[2, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list nums that sum up to n\n    \"\"\"\n    return any(nums[i] + nums[j] == n for i in range(len(nums)) for j in range(i + 1, len(nums)))", "solution_func": "def g(nums = [2, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20]):\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == n:\n                return True\n    return False", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substring='abcde') -> bool:\n    \"\"\"\n    Check if the given substring is present in the string s\n    \"\"\"\n    return substring in s\ndef g(substring = 'abcde'):\n    return ''.join(chr(ord('a') + i) for i in range(len(substring)))\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 91, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substring='abcde') -> bool:\n    \"\"\"\n    Check if the given substring is present in the string s\n    \"\"\"\n    return substring in s", "solution_func": "def g(substring = 'abcde'):\n    return ''.join(chr(ord('a') + i) for i in range(len(substring)))", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(d: datetime, days=30) -> bool:\n    \"\"\"\n    Check if the given datetime is within the last n days\n    \"\"\"\n    return (datetime.now() - d).days <= days\ndef g(days = 30):\n    return datetime.now() - timedelta(days=days)\nassert f(g())\n", "emb": null, "idx_generation": 91, "target_skills": null, "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(d: datetime, days=30) -> bool:\n    \"\"\"\n    Check if the given datetime is within the last n days\n    \"\"\"\n    return (datetime.now() - d).days <= days", "solution_func": "def g(days = 30):\n    return datetime.now() - timedelta(days=days)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=4, b=3) -> bool:\n    \"\"\"Check if the square root of a number is a perfect square\"\"\"\n    return math.isqrt(a * x + b) ** 2 == a * x + b\n\ndef g(a=4, b=3):\n    x = 0\n    while True:\n        if math.isqrt(a * x + b) ** 2 == a * x + b:\n            return x\n        x += 1\n\nassert f(g())\n", "emb": null, "idx_generation": 91, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, a=4, b=3) -> bool:\n    \"\"\"Check if the square root of a number is a perfect square\"\"\"\n    return math.isqrt(a * x + b) ** 2 == a * x + b", "solution_func": "def g(a=4, b=3):\n    x = 0\n    while True:\n        if math.isqrt(a * x + b) ** 2 == a * x + b:\n            return x\n        x += 1", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, x=5, y=2) -> bool:\n    \"\"\"Check if a substring is repeated a certain number of times in a string\"\"\"\n    return s.count(s[:x]) == y\n\ndef g(x=5, y=2):\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    return s * y\n\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 91, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, x=5, y=2) -> bool:\n    \"\"\"Check if a substring is repeated a certain number of times in a string\"\"\"\n    return s.count(s[:x]) == y", "solution_func": "def g(x=5, y=2):\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    return s * y", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: int, a=2, b=3) -> bool:\n    \"\"\"Check if the sum of two numbers is equal to a given number\"\"\"\n    return x == a + b\n\ndef g(a=2, b=3):\n    return a + b\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 91, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, a=2, b=3) -> bool:\n    \"\"\"Check if the sum of two numbers is equal to a given number\"\"\"\n    return x == a + b", "solution_func": "def g(a=2, b=3):\n    return a + b", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], k=3, target=10) -> bool:\n    \"\"\"Find if there exists a sublist of length k in nums whose sum is equal to target\"\"\"\n    return any(sum(nums[i:i+k]) == target for i in range(len(nums)-k+1))\ndef g(k=3, target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n", "emb": null, "idx_generation": 91, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], k=3, target=10) -> bool:\n    \"\"\"Find if there exists a sublist of length k in nums whose sum is equal to target\"\"\"\n    return any(sum(nums[i:i+k]) == target for i in range(len(nums)-k+1))", "solution_func": "def g(k=3, target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=3, target=20) -> bool:\n    \"\"\"Find if there exists a submatrix of size n x n in matrix whose sum is equal to target\"\"\"\n    m = len(matrix)\n    for i in range(m-n+1):\n        for j in range(m-n+1):\n            if sum(matrix[i+x][j+y] for x in range(n) for y in range(n)) == target:\n                return True\n    return False\ndef g(n=3, target=20):\n    return [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]]\nassert f(g())\n", "emb": null, "idx_generation": 91, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n=3, target=20) -> bool:\n    \"\"\"Find if there exists a submatrix of size n x n in matrix whose sum is equal to target\"\"\"\n    m = len(matrix)\n    for i in range(m-n+1):\n        for j in range(m-n+1):\n            if sum(matrix[i+x][j+y] for x in range(n) for y in range(n)) == target:\n                return True\n    return False", "solution_func": "def g(n=3, target=20):\n    return [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(words: List[str], prefix=\"pre\", suffix=\"fix\") -> bool:\n    \"\"\"Find if there exists a word in words that starts with prefix and ends with suffix\"\"\"\n    return any(word.startswith(prefix) and word.endswith(suffix) for word in words)\ndef g(prefix=\"pre\", suffix=\"fix\"):\n    return [\"prefix\", \"infix\", \"suffix\"]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 91, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], prefix=\"pre\", suffix=\"fix\") -> bool:\n    \"\"\"Find if there exists a word in words that starts with prefix and ends with suffix\"\"\"\n    return any(word.startswith(prefix) and word.endswith(suffix) for word in words)", "solution_func": "def g(prefix=\"pre\", suffix=\"fix\"):\n    return [\"prefix\", \"infix\", \"suffix\"]", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\ndef f(a: float, b: float, c: float) -> bool:\n    \"\"\"Check if the given values form the sides of a right-angled triangle.\"\"\"\n    sides = [a, b, c]\n    sides.sort()\n    return math.isclose(sides[0]**2 + sides[1]**2, sides[2]**2, rel_tol=1e-9)\ndef g(a=3, b=4):\n    return [a, b, math.sqrt(a**2 + b**2)]\nassert f(g())\n", "emb": null, "idx_generation": 91, "target_skills": null, "problem_func": "from typing import*\nimport math\ndef f(a: float, b: float, c: float) -> bool:\n    \"\"\"Check if the given values form the sides of a right-angled triangle.\"\"\"\n    sides = [a, b, c]\n    sides.sort()\n    return math.isclose(sides[0]**2 + sides[1]**2, sides[2]**2, rel_tol=1e-9)", "solution_func": "def g(a=3, b=4):\n    return [a, b, math.sqrt(a**2 + b**2)]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target='hello') -> bool:\n    \"\"\"Check if a given string contains a specific target substring\"\"\"\n    return target in s\ndef g(target='hello'):\n    return f\"This is a {target} world.\"\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 92, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='hello') -> bool:\n    \"\"\"Check if a given string contains a specific target substring\"\"\"\n    return target in s", "solution_func": "def g(target='hello'):\n    return f\"This is a {target} world.\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(lst: List[int], target=5) -> bool:\n    \"\"\"Find if there are two numbers in a given list that sum up to a given target\"\"\"\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\ndef g(target=5):\n    return [1, 2, 3, 4, target - 2]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 92, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int], target=5) -> bool:\n    \"\"\"Find if there are two numbers in a given list that sum up to a given target\"\"\"\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False", "solution_func": "def g(target=5):\n    return [1, 2, 3, 4, target - 2]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(n: int, target=100) -> bool:\n    \"\"\"Check if a given number is a perfect square and its square root is less than a target value\"\"\"\n    return math.isqrt(n) ** 2 == n and math.isqrt(n) < target\ndef g(target=100):\n    return int(math.sqrt(target - 1)) ** 2\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 92, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, target=100) -> bool:\n    \"\"\"Check if a given number is a perfect square and its square root is less than a target value\"\"\"\n    return math.isqrt(n) ** 2 == n and math.isqrt(n) < target", "solution_func": "def g(target=100):\n    return int(math.sqrt(target - 1)) ** 2", "map_ix": [0, 0, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Find two numbers in arr that sum up to target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target=100):\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return arr\n\nassert f(g())\n", "emb": null, "idx_generation": 92, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Find two numbers in arr that sum up to target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g(target=100):\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return arr", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if s contains all permutations of length n\"\"\"\n    perms = [''.join(p) for p in permutations(s, n)]\n    return all(p in s for p in perms)\n\ndef g(n=3):\n    s = 'abcde'\n    return s\n\nassert f(g())\n", "emb": null, "idx_generation": 92, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if s contains all permutations of length n\"\"\"\n    perms = [''.join(p) for p in permutations(s, n)]\n    return all(p in s for p in perms)", "solution_func": "def g(n=3):\n    s = 'abcde'\n    return s", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in arr that multiply to target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return arr\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 92, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in arr that multiply to target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] == target:\n                return True\n    return False", "solution_func": "def g(target=10):\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return arr", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(numbers: List[int], target=1000) -> bool:\n    \"\"\"\n    Find a pair of numbers from the list that adds up to the target value.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g():\n    numbers = [234, 897, 456, 123, 678, 345, 789]\n    return numbers\n\nassert f(g())\n", "emb": null, "idx_generation": 92, "target_skills": null, "problem_func": "from typing import*\ndef f(numbers: List[int], target=1000) -> bool:\n    \"\"\"\n    Find a pair of numbers from the list that adds up to the target value.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False", "solution_func": "def g():\n    numbers = [234, 897, 456, 123, 678, 345, 789]\n    return numbers", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is symmetric.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    matrix = [[1, 2, 3],\n              [2, 4, 5],\n              [3, 5, 6]]\n    return matrix\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 92, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is symmetric.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "solution_func": "def g():\n    matrix = [[1, 2, 3],\n              [2, 4, 5],\n              [3, 5, 6]]\n    return matrix", "map_ix": [1, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(string: str, substring='python') -> bool:\n    \"\"\"\n    Check if the given string contains the specified substring.\n    \"\"\"\n    return substring in string\n\ndef g():\n    string = 'I love Python programming.'\n    return string\n\nassert f(g())\n", "emb": null, "idx_generation": 92, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, substring='python') -> bool:\n    \"\"\"\n    Check if the given string contains the specified substring.\n    \"\"\"\n    return substring in string", "solution_func": "def g():\n    string = 'I love Python programming.'\n    return string", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: int, a=5, b=17, c=31) -> bool:\n    \"\"\"Check if the number is divisible by a, b, and c\"\"\"\n    return x % a == 0 and x % b == 0 and x % c == 0\ndef g(a = 5, b = 17, c = 31):\n    x = a * b * c\n    return x\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 92, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, a=5, b=17, c=31) -> bool:\n    \"\"\"Check if the number is divisible by a, b, and c\"\"\"\n    return x % a == 0 and x % b == 0 and x % c == 0", "solution_func": "def g(a = 5, b = 17, c = 31):\n    x = a * b * c\n    return x", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"\n    Find three numbers in a list that add up to the target value.\n    \"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    \"\"\"\n    Generate all possible combinations of three numbers in the list.\n    \"\"\"\n    return itertools.combinations(nums, 3)\nassert f(g())\n", "emb": null, "idx_generation": 93, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"\n    Find three numbers in a list that add up to the target value.\n    \"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    \"\"\"\n    Generate all possible combinations of three numbers in the list.\n    \"\"\"\n    return itertools.combinations(nums, 3)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a square matrix is symmetric.\n    \"\"\"\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix[i])))\ndef g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    \"\"\"\n    Generate the transpose of the matrix.\n    \"\"\"\n    return [[matrix[j][i] for j in range(len(matrix[i]))] for i in range(len(matrix))]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 93, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a square matrix is symmetric.\n    \"\"\"\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix[i])))", "solution_func": "def g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    \"\"\"\n    Generate the transpose of the matrix.\n    \"\"\"\n    return [[matrix[j][i] for j in range(len(matrix[i]))] for i in range(len(matrix))]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, m: int, a: int) -> bool:\n    \"\"\"\n    Check if it is possible to fill a rectangular area of size n x m with tiles of size a x a without any overlaps or gaps.\n    \"\"\"\n    return n % a == 0 and m % a == 0\ndef g(n=10, m=5, a=2):\n    \"\"\"\n    Calculate the remainder when n is divided by a and m is divided by a.\n    \"\"\"\n    return n % a, m % a\nassert f(g())\n", "emb": null, "idx_generation": 93, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m: int, a: int) -> bool:\n    \"\"\"\n    Check if it is possible to fill a rectangular area of size n x m with tiles of size a x a without any overlaps or gaps.\n    \"\"\"\n    return n % a == 0 and m % a == 0", "solution_func": "def g(n=10, m=5, a=2):\n    \"\"\"\n    Calculate the remainder when n is divided by a and m is divided by a.\n    \"\"\"\n    return n % a, m % a", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 93, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, m=3) -> bool:\n    \"\"\"Check if the number is divisible by the given divisor\"\"\"\n    return n % m == 0\ndef g(m=3):\n    return m\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 93, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m=3) -> bool:\n    \"\"\"Check if the number is divisible by the given divisor\"\"\"\n    return n % m == 0", "solution_func": "def g(m=3):\n    return m", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(word: str, letter='a') -> bool:\n    \"\"\"Check if the given letter is present in the word\"\"\"\n    return letter in word\ndef g(word='apple'):\n    return word\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 93, "target_skills": null, "problem_func": "from typing import*\ndef f(word: str, letter='a') -> bool:\n    \"\"\"Check if the given letter is present in the word\"\"\"\n    return letter in word", "solution_func": "def g(word='apple'):\n    return word", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, sub=\"abc\") -> bool:\n    \"\"\"Check if a given string contains a specific substring.\"\"\"\n    return sub in s\ndef g(sub=\"abc\"):\n    return \"abcdefg\"\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 93, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, sub=\"abc\") -> bool:\n    \"\"\"Check if a given string contains a specific substring.\"\"\"\n    return sub in s", "solution_func": "def g(sub=\"abc\"):\n    return \"abcdefg\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: int, y: int, z: int, t=100) -> bool:\n    \"\"\"Check if the sum of three numbers is equal to a target number.\"\"\"\n    return x + y + z == t\ndef g(t=100):\n    return 40, 30, 30\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 93, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, y: int, z: int, t=100) -> bool:\n    \"\"\"Check if the sum of three numbers is equal to a target number.\"\"\"\n    return x + y + z == t", "solution_func": "def g(t=100):\n    return 40, 30, 30", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Check if there exists three elements in a list that sum up to a target number.\"\"\"\n    return any([lst[i] + lst[j] + lst[k] == target for i in range(len(lst)) for j in range(i + 1, len(lst)) for k in range(j + 1, len(lst))])\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 93, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Check if there exists three elements in a list that sum up to a target number.\"\"\"\n    return any([lst[i] + lst[j] + lst[k] == target for i in range(len(lst)) for j in range(i + 1, len(lst)) for k in range(j + 1, len(lst))])", "solution_func": "def g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], n=5, s=20) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\n\ndef g(n=5, s=20):\n    x = []\n    for i in range(n):\n        x.append(s // n)\n    return x\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 93, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], n=5, s=20) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])", "solution_func": "def g(n=5, s=20):\n    x = []\n    for i in range(n):\n        x.append(s // n)\n    return x", "map_ix": [1, 1, 0, 1, 0, 0, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find if there are three numbers in the list that add up to the target\"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, 3):\n        if sum(combo) == target:\n            return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5], target=0):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 94, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find if there are three numbers in the list that add up to the target\"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, 3):\n        if sum(combo) == target:\n            return True\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=0):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, substring='hello') -> bool:\n    \"\"\"Check if the substring appears in the string\"\"\"\n    return substring in string\ndef g(string='hello world', substring='hello'):\n    return string\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 94, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, substring='hello') -> bool:\n    \"\"\"Check if the substring appears in the string\"\"\"\n    return substring in string", "solution_func": "def g(string='hello world', substring='hello'):\n    return string", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Find if the target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=0):\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 94, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Find if the target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=0):\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Find a pair of numbers in the list that adds up to the target sum.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False\n\ndef g(nums: List[int], target_sum=100):\n    return nums\n\nassert f(g([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n", "emb": null, "idx_generation": 94, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Find a pair of numbers in the list that adds up to the target sum.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False", "solution_func": "def g(nums: List[int], target_sum=100):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, target_length=10) -> bool:\n    \"\"\"\n    Check if a string can be transformed into another string by removing characters.\n    The transformed string must have a length of target_length.\n\n    Sample Input:\n    s = \"hello world\"\n    target_length = 5\n\n    Sample Output:\n    True\n    \"\"\"\n    return len(s) - s.count(' ') == target_length\n\ndef g(s: str, target_length=10):\n    return s[:target_length]\n\nassert f(g(\"hello world\"))\n", "emb": null, "idx_generation": 94, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target_length=10) -> bool:\n    \"\"\"\n    Check if a string can be transformed into another string by removing characters.\n    The transformed string must have a length of target_length.\n\n    Sample Input:\n    s = \"hello world\"\n    target_length = 5\n\n    Sample Output:\n    True\n    \"\"\"\n    return len(s) - s.count(' ') == target_length", "solution_func": "def g(s: str, target_length=10):\n    return s[:target_length]", "map_ix": null}, {"fitness": -Infinity, "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, target_sum=100) -> bool:\n    \"\"\"Check if a number is a perfect square and the sum of its digits is equal to the target sum.\"\"\"\n    if sqrt(n) % 1 != 0:\n        return False\n    digit_sum = sum([int(digit) for digit in str(n)])\n    return digit_sum == target_sum\n\ndef g(n: int, target_sum=100):\n    return n\n\nassert f(g(49))\n", "emb": null, "idx_generation": 94, "target_skills": null, "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, target_sum=100) -> bool:\n    \"\"\"Check if a number is a perfect square and the sum of its digits is equal to the target sum.\"\"\"\n    if sqrt(n) % 1 != 0:\n        return False\n    digit_sum = sum([int(digit) for digit in str(n)])\n    return digit_sum == target_sum", "solution_func": "def g(n: int, target_sum=100):\n    return n", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(n: float, a=2.5, b=3.7) -> bool:\n    \"\"\"Check if the floor of n multiplied by a is equal to the ceiling of n multiplied by b\"\"\"\n    return math.floor(n * a) == math.ceil(n * b)\n\ndef g(a=2.5, b=3.7):\n    return 10.0\n\nassert f(g())\n", "emb": null, "idx_generation": 94, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: float, a=2.5, b=3.7) -> bool:\n    \"\"\"Check if the floor of n multiplied by a is equal to the ceiling of n multiplied by b\"\"\"\n    return math.floor(n * a) == math.ceil(n * b)", "solution_func": "def g(a=2.5, b=3.7):\n    return 10.0", "map_ix": null}, {"fitness": 1.0, "program_str": "import math\nfrom typing import*\nimport random\n\ndef f(n: list, a=5, b=10) -> bool:\n    \"\"\"Check if the sum of n is divisible by a and the product of n is divisible by b\"\"\"\n    return sum(n) % a == 0 and math.prod(n) % b == 0\n\ndef g(a=5, b=10):\n    return [random.randint(1, 10) for _ in range(5)]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 94, "target_skills": null, "problem_func": "import math\nfrom typing import*\nimport random\n\ndef f(n: list, a=5, b=10) -> bool:\n    \"\"\"Check if the sum of n is divisible by a and the product of n is divisible by b\"\"\"\n    return sum(n) % a == 0 and math.prod(n) % b == 0", "solution_func": "def g(a=5, b=10):\n    return [random.randint(1, 10) for _ in range(5)]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport numpy as np\n\ndef f(n: np.ndarray, a=2, b=5) -> bool:\n    \"\"\"Check if the sum of the diagonal elements of n is divisible by a and the product of n is divisible by b\"\"\"\n    return np.trace(n) % a == 0 and np.prod(n) % b == 0\n\ndef g(a=2, b=5):\n    return np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n\nassert f(g())\n", "emb": null, "idx_generation": 94, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\n\ndef f(n: np.ndarray, a=2, b=5) -> bool:\n    \"\"\"Check if the sum of the diagonal elements of n is divisible by a and the product of n is divisible by b\"\"\"\n    return np.trace(n) % a == 0 and np.prod(n) % b == 0", "solution_func": "def g(a=2, b=5):\n    return np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer, return True if there are two numbers in the list that add up to\n    the target, and False otherwise.\n    \"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set and num != complement:\n            return True\n    return False\n\ndef g(target = 0):\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g())\n", "emb": null, "idx_generation": 94, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer, return True if there are two numbers in the list that add up to\n    the target, and False otherwise.\n    \"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set and num != complement:\n            return True\n    return False", "solution_func": "def g(target = 0):\n    return [1, 2, 3, 4, 5, 6]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, nums=[4, 9, 16, 25, 36], target=[5, 10, 15, 20, 25]) -> bool:\n    \"\"\"Check if the sum of a list of numbers is equal to the target number\"\"\"\n    return sum(nums) == target\ndef g(nums=[4, 9, 16, 25, 36], target=[5, 10, 15, 20, 25]):\n    return sum(nums)\nassert f(g())\n", "emb": null, "idx_generation": 95, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[4, 9, 16, 25, 36], target=[5, 10, 15, 20, 25]) -> bool:\n    \"\"\"Check if the sum of a list of numbers is equal to the target number\"\"\"\n    return sum(nums) == target", "solution_func": "def g(nums=[4, 9, 16, 25, 36], target=[5, 10, 15, 20, 25]):\n    return sum(nums)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, substr=\"python\") -> bool:\n    \"\"\"Check if a given substring is present in a string\"\"\"\n    return substr in string\ndef g(string=\"I love python\"):\n    return string\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 95, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, substr=\"python\") -> bool:\n    \"\"\"Check if a given substring is present in a string\"\"\"\n    return substr in string", "solution_func": "def g(string=\"I love python\"):\n    return string", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Check if a number is divisible by another number\"\"\"\n    return n % m == 0\ndef g(m=10):\n    return m\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 95, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Check if a number is divisible by another number\"\"\"\n    return n % m == 0", "solution_func": "def g(m=10):\n    return m", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target=10, k=2) -> bool:\n    \"\"\"\n    Find if there exist two elements in the array whose sum equals the target.\n\n    Example:\n    arr = [1, 2, 3, 4, 5]\n    target = 5\n    output: True (1 + 4 = 5)\n    \"\"\"\n    return any((arr[i] + arr[j] == target) for i in range(len(arr)) for j in range(i+1, len(arr)))\ndef g(arr = [1, 2, 3, 4, 5], target = 10, k = 2):\n    return arr\nassert f(g())\n", "emb": null, "idx_generation": 95, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=10, k=2) -> bool:\n    \"\"\"\n    Find if there exist two elements in the array whose sum equals the target.\n\n    Example:\n    arr = [1, 2, 3, 4, 5]\n    target = 5\n    output: True (1 + 4 = 5)\n    \"\"\"\n    return any((arr[i] + arr[j] == target) for i in range(len(arr)) for j in range(i+1, len(arr)))", "solution_func": "def g(arr = [1, 2, 3, 4, 5], target = 10, k = 2):\n    return arr", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=2, k=3) -> bool:\n    \"\"\"\n    Find if there exist n consecutive digits in the string that sum to k.\n\n    Example:\n    s = '123456789'\n    n = 3\n    k = 15\n    output: True (6 + 7 + 8 = 21)\n    \"\"\"\n    return any((sum(map(int, s[i:i+n])) == k) for i in range(len(s)-n+1))\ndef g(s = '123456789', n = 2, k = 3):\n    return s\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 95, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=2, k=3) -> bool:\n    \"\"\"\n    Find if there exist n consecutive digits in the string that sum to k.\n\n    Example:\n    s = '123456789'\n    n = 3\n    k = 15\n    output: True (6 + 7 + 8 = 21)\n    \"\"\"\n    return any((sum(map(int, s[i:i+n])) == k) for i in range(len(s)-n+1))", "solution_func": "def g(s = '123456789', n = 2, k = 3):\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"\n    Find if there exist a pair of numbers, one from each row, that sum to the target.\n\n    Example:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    target = 10\n    output: True (3 + 7 = 10)\n    \"\"\"\n    return any((any((matrix[i][j] + matrix[i+1][j] == target) for j in range(len(matrix[0])))) for i in range(len(matrix)-1))\ndef g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target = 10):\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 95, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"\n    Find if there exist a pair of numbers, one from each row, that sum to the target.\n\n    Example:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    target = 10\n    output: True (3 + 7 = 10)\n    \"\"\"\n    return any((any((matrix[i][j] + matrix[i+1][j] == target) for j in range(len(matrix[0])))) for i in range(len(matrix)-1))", "solution_func": "def g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target = 10):\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\nfrom typing import List\n\ndef f(x: List[int], target=100) -> bool:\n    \"\"\"Check if any combination of numbers in the list x can sum up to the target\"\"\"\n    return any([sum(combination) == target for r in range(len(x) + 1) for combination in combinations(x, r)])\n    \ndef g(x = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]):\n    from itertools import combinations\n    return x\n    \nassert f(g())\n", "emb": null, "idx_generation": 95, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\nfrom typing import List\n\ndef f(x: List[int], target=100) -> bool:\n    \"\"\"Check if any combination of numbers in the list x can sum up to the target\"\"\"\n    return any([sum(combination) == target for r in range(len(x) + 1) for combination in combinations(x, r)])", "solution_func": "def g(x = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]):\n    from itertools import combinations\n    return x", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[str], target=\"apple\") -> bool:\n    \"\"\"Check if any of the strings in the list x contain the target string\"\"\"\n    return any([target in string for string in x])\n\ndef g(x = [\"banana\", \"grape\", \"orange\", \"apple\"]):\n    return x\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 95, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(x: List[str], target=\"apple\") -> bool:\n    \"\"\"Check if any of the strings in the list x contain the target string\"\"\"\n    return any([target in string for string in x])", "solution_func": "def g(x = [\"banana\", \"grape\", \"orange\", \"apple\"]):\n    return x", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: int, target=1000) -> bool:\n    \"\"\"Check if x is divisible by any number in the range from 2 to target\"\"\"\n    return any([x % i == 0 for i in range(2, target)])\n\ndef g(x = 5040):\n    return x\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 95, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, target=1000) -> bool:\n    \"\"\"Check if x is divisible by any number in the range from 2 to target\"\"\"\n    return any([x % i == 0 for i in range(2, target)])", "solution_func": "def g(x = 5040):\n    return x", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, length=10) -> bool:\n    \"\"\"Check if a string has a length greater than or equal to a specific value.\"\"\"\n    return len(s) >= length\ndef g(length=10):\n    return 'x' * length\nassert f(g())\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 95, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, length=10) -> bool:\n    \"\"\"Check if a string has a length greater than or equal to a specific value.\"\"\"\n    return len(s) >= length", "solution_func": "def g(length=10):\n    return 'x' * length", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substrings=['ab', 'cd', 'ef', 'gh']) -> bool:\n    \"\"\"\n    Find a string that contains each string in substrings in reverse order, e.g., 'hgfedcba' for 'ab' and 'cd'\n    \"\"\"\n    return all((sub[::-1] in s[i::len(substrings)] for (i, sub) in enumerate(substrings)))\ndef g(substrings = ['ab', 'cd', 'ef', 'gh']):\n    m = max(len(s) for s in substrings)\n    return \"\".join([(s[::-1][i] if i < len(s) else \" \") for i in range(m) for s in substrings])\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 96, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substrings=['ab', 'cd', 'ef', 'gh']) -> bool:\n    \"\"\"\n    Find a string that contains each string in substrings in reverse order, e.g., 'hgfedcba' for 'ab' and 'cd'\n    \"\"\"\n    return all((sub[::-1] in s[i::len(substrings)] for (i, sub) in enumerate(substrings)))", "solution_func": "def g(substrings = ['ab', 'cd', 'ef', 'gh']):\n    m = max(len(s) for s in substrings)\n    return \"\".join([(s[::-1][i] if i < len(s) else \" \") for i in range(m) for s in substrings])", "map_ix": [0, 1, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, a=1234, b=5678, c=91011) -> bool:\n    \"\"\"Find a string with a specified number of a's, b's, and c's\"\"\"\n    return s.count('a') == a and s.count('b') == b and s.count('c') == c and (len(s) == a + b + c)\ndef g(a = 1234, b = 5678, c = 91011):\n    return \"a\" * a + \"b\" * b + \"c\" * c\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 96, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, a=1234, b=5678, c=91011) -> bool:\n    \"\"\"Find a string with a specified number of a's, b's, and c's\"\"\"\n    return s.count('a') == a and s.count('b') == b and s.count('c') == c and (len(s) == a + b + c)", "solution_func": "def g(a = 1234, b = 5678, c = 91011):\n    return \"a\" * a + \"b\" * b + \"c\" * c", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(inds: List[int], string='abcdefghijklmn') -> bool:\n    \"\"\"Find indices to make the given string palindrome\"\"\"\n    return inds == inds[::-1] and ''.join((string[i] for i in inds)) == string\ndef g(string = 'abcdefghijklmn'):\n    n = len(string)\n    return list(range(n)) + list(range(n-1, -1, -1))\nassert f(g())\n", "emb": null, "idx_generation": 96, "target_skills": null, "problem_func": "from typing import*\ndef f(inds: List[int], string='abcdefghijklmn') -> bool:\n    \"\"\"Find indices to make the given string palindrome\"\"\"\n    return inds == inds[::-1] and ''.join((string[i] for i in inds)) == string", "solution_func": "def g(string = 'abcdefghijklmn'):\n    n = len(string)\n    return list(range(n)) + list(range(n-1, -1, -1))", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, target: str) -> bool:\n    \"\"\"Check if a string can be transformed into a target string by rearranging its characters.\"\"\"\n    return sorted(s) == sorted(target)\ndef g(target: str):\n    return ''.join(sorted(target, reverse=True))\nassert f(g())\n", "emb": null, "idx_generation": 96, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target: str) -> bool:\n    \"\"\"Check if a string can be transformed into a target string by rearranging its characters.\"\"\"\n    return sorted(s) == sorted(target)", "solution_func": "def g(target: str):\n    return ''.join(sorted(target, reverse=True))", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, primes: List[int]) -> bool:\n    \"\"\"Check if n can be expressed as a sum of two prime numbers from a given list of primes.\"\"\"\n    return any((n - p) in primes for p in primes)\ndef g(primes: List[int]):\n    return sum(primes)\nassert f(g())\n", "emb": null, "idx_generation": 96, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, primes: List[int]) -> bool:\n    \"\"\"Check if n can be expressed as a sum of two prime numbers from a given list of primes.\"\"\"\n    return any((n - p) in primes for p in primes)", "solution_func": "def g(primes: List[int]):\n    return sum(primes)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, k: int, m: int) -> bool:\n    \"\"\"Check if there exists a k-digit number that is divisible by m.\"\"\"\n    return any(i for i in range(10 ** (k - 1), 10 ** k) if i % m == 0)\ndef g(k: int, m: int):\n    return m * 10 ** (k - 1)\nassert f(g())\n", "emb": null, "idx_generation": 96, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, k: int, m: int) -> bool:\n    \"\"\"Check if there exists a k-digit number that is divisible by m.\"\"\"\n    return any(i for i in range(10 ** (k - 1), 10 ** k) if i % m == 0)", "solution_func": "def g(k: int, m: int):\n    return m * 10 ** (k - 1)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substr='python') -> bool:\n    \"\"\"Check if a given substring is present in the string\"\"\"\n    return substr in s\ndef g(substr='python'):\n    return \"I love programming in \" + substr\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 96, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substr='python') -> bool:\n    \"\"\"Check if a given substring is present in the string\"\"\"\n    return substr in s", "solution_func": "def g(substr='python'):\n    return \"I love programming in \" + substr", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], rows=3, cols=3) -> bool:\n    \"\"\"Check if the sum of each row and column is the same\"\"\"\n    row_sum = sum(matrix[0])\n    for i in range(rows):\n        if sum(matrix[i]) != row_sum:\n            return False\n    for j in range(cols):\n        col_sum = 0\n        for i in range(rows):\n            col_sum += matrix[i][j]\n        if col_sum != row_sum:\n            return False\n    return True\ndef g(rows=3, cols=3):\n    matrix = []\n    for i in range(rows):\n        row = []\n        for j in range(cols):\n            row.append((i + 1) * (j + 1))\n        matrix.append(row)\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 96, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], rows=3, cols=3) -> bool:\n    \"\"\"Check if the sum of each row and column is the same\"\"\"\n    row_sum = sum(matrix[0])\n    for i in range(rows):\n        if sum(matrix[i]) != row_sum:\n            return False\n    for j in range(cols):\n        col_sum = 0\n        for i in range(rows):\n            col_sum += matrix[i][j]\n        if col_sum != row_sum:\n            return False\n    return True", "solution_func": "def g(rows=3, cols=3):\n    matrix = []\n    for i in range(rows):\n        row = []\n        for j in range(cols):\n            row.append((i + 1) * (j + 1))\n        matrix.append(row)\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if there are three numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(target=50):\n    return list(range(1, target + 1))\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 96, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if there are three numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False", "solution_func": "def g(target=50):\n    return list(range(1, target + 1))", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers that sums up to the target value\"\"\"\n    def check_combination(comb):\n        return sum(comb) == target\n    \n    def generate_combinations(nums, target, combination):\n        if target == 0:\n            return check_combination(combination)\n        if target < 0 or not nums:\n            return False\n        \n        for i in range(len(nums)):\n            if generate_combinations(nums[i+1:], target-nums[i], combination + [nums[i]]):\n                return True\n        \n        return False\n    \n    return generate_combinations(nums, target, [])\n\ndef g(nums = [10, 20, 30, 40, 50]):\n    return nums\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 96, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers that sums up to the target value\"\"\"\n    def check_combination(comb):\n        return sum(comb) == target\n    \n    def generate_combinations(nums, target, combination):\n        if target == 0:\n            return check_combination(combination)\n        if target < 0 or not nums:\n            return False\n        \n        for i in range(len(nums)):\n            if generate_combinations(nums[i+1:], target-nums[i], combination + [nums[i]]):\n                return True\n        \n        return False\n    \n    return generate_combinations(nums, target, [])", "solution_func": "def g(nums = [10, 20, 30, 40, 50]):\n    return nums", "map_ix": [1, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(num: int, n=15) -> bool:\n    \"\"\"\n    Check if a given number is a perfect square and if it is divisible by a given number.\n    \"\"\"\n    return sqrt(num) == int(sqrt(num)) and num % n == 0\n\ndef g(n=15):\n    return n**2\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 97, "target_skills": null, "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(num: int, n=15) -> bool:\n    \"\"\"\n    Check if a given number is a perfect square and if it is divisible by a given number.\n    \"\"\"\n    return sqrt(num) == int(sqrt(num)) and num % n == 0", "solution_func": "def g(n=15):\n    return n**2", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, vowels='aeiou') -> bool:\n    \"\"\"\n    Check if a given string contains all the vowels in a given order.\n    \"\"\"\n    return vowels in s\n\ndef g(vowels='aeiou'):\n    return ''.join(vowels)\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 97, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, vowels='aeiou') -> bool:\n    \"\"\"\n    Check if a given string contains all the vowels in a given order.\n    \"\"\"\n    return vowels in s", "solution_func": "def g(vowels='aeiou'):\n    return ''.join(vowels)", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(li: List[int], n=7) -> bool:\n    \"\"\"\n    Check if there exist two numbers in the list that sum up to a given number.\n    \"\"\"\n    for i, num in enumerate(li):\n        if n - num in li[i+1:]:\n            return True\n    return False\n\ndef g(n=7):\n    return [1, 2, 3, 4, 5, 6, 7]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 97, "target_skills": null, "problem_func": "from typing import*\ndef f(li: List[int], n=7) -> bool:\n    \"\"\"\n    Check if there exist two numbers in the list that sum up to a given number.\n    \"\"\"\n    for i, num in enumerate(li):\n        if n - num in li[i+1:]:\n            return True\n    return False", "solution_func": "def g(n=7):\n    return [1, 2, 3, 4, 5, 6, 7]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=7, b=5, c=10) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(c)])\ndef g(a = 7, b = 5, c = 10):\n    return -a + sum([b * i for i in range(c)])\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 97, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=7, b=5, c=10) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(c)])", "solution_func": "def g(a = 7, b = 5, c = 10):\n    return -a + sum([b * i for i in range(c)])", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(substrings: List[str], s='helloworldhowareyou', count=5) -> bool:\n    \"\"\"Find a list of >= count distinct strings that are all contained in s\"\"\"\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings))\ndef g(s = 'helloworldhowareyou', count = 5):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 97, "target_skills": null, "problem_func": "from typing import*\ndef f(substrings: List[str], s='helloworldhowareyou', count=5) -> bool:\n    \"\"\"Find a list of >= count distinct strings that are all contained in s\"\"\"\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings))", "solution_func": "def g(s = 'helloworldhowareyou', count = 5):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(hands: List[int], target_angle=90) -> bool:\n    \"\"\"Find clock hands = [hour, min] such that the angle is target_angle degrees.\"\"\"\n    (h, m) = hands\n    assert 0 < h <= 12 and 0 <= m < 60\n    hour_angle = 30 * h + m / 2\n    minute_angle = 6 * m\n    return abs(hour_angle - minute_angle) in [target_angle, 360 - target_angle]\ndef g(target_angle = 90):\n    for h in range(1, 13):\n        for m in range(60):\n            hour_angle = 30 * h + m / 2\n            minute_angle = 6 * m\n            if abs(hour_angle - minute_angle) % 360 in [target_angle, 360 - target_angle]:\n                return [h, m]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 97, "target_skills": null, "problem_func": "from typing import*\ndef f(hands: List[int], target_angle=90) -> bool:\n    \"\"\"Find clock hands = [hour, min] such that the angle is target_angle degrees.\"\"\"\n    (h, m) = hands\n    assert 0 < h <= 12 and 0 <= m < 60\n    hour_angle = 30 * h + m / 2\n    minute_angle = 6 * m\n    return abs(hour_angle - minute_angle) in [target_angle, 360 - target_angle]", "solution_func": "def g(target_angle = 90):\n    for h in range(1, 13):\n        for m in range(60):\n            hour_angle = 30 * h + m / 2\n            minute_angle = 6 * m\n            if abs(hour_angle - minute_angle) % 360 in [target_angle, 360 - target_angle]:\n                return [h, m]", "map_ix": [0, 0, 0, 1, 0, 0, 1, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, word='nojapoxe') -> bool:\n    \"\"\"Check if the given string is a palindrome\"\"\"\n    return s == s[::-1]\ndef g(word='nojapoxe'):\n    return word + word[::-1]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 97, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, word='nojapoxe') -> bool:\n    \"\"\"Check if the given string is a palindrome\"\"\"\n    return s == s[::-1]", "solution_func": "def g(word='nojapoxe'):\n    return word + word[::-1]", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k=5) -> bool:\n    \"\"\"Check if the sum of the first k numbers is greater than n\"\"\"\n    return sum(numbers[:k]) > n\ndef g(numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k=5):\n    return sum(numbers)\nassert f(g())\n", "emb": null, "idx_generation": 97, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k=5) -> bool:\n    \"\"\"Check if the sum of the first k numbers is greater than n\"\"\"\n    return sum(numbers[:k]) > n", "solution_func": "def g(numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k=5):\n    return sum(numbers)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k=3) -> bool:\n    \"\"\"Check if the sum of the first k elements in the list is divisible by n\"\"\"\n    return sum(lst[:k]) % n == 0\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k=3):\n    return sum(lst)\nassert f(g())\n", "emb": null, "idx_generation": 97, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k=3) -> bool:\n    \"\"\"Check if the sum of the first k elements in the list is divisible by n\"\"\"\n    return sum(lst[:k]) % n == 0", "solution_func": "def g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k=3):\n    return sum(lst)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Determine if there are two numbers in the given list that add up to the target value.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums = [5, 7, 3, 9, 2, 1], target = 10):\n    return nums, target\n\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 97, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Determine if there are two numbers in the given list that add up to the target value.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(nums = [5, 7, 3, 9, 2, 1], target = 10):\n    return nums, target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if s is a palindrome and has a length of n\"\"\"\n    return s == s[::-1] and len(s) == n\ndef g(n = 3):\n    return \"a\" * n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 98, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if s is a palindrome and has a length of n\"\"\"\n    return s == s[::-1] and len(s) == n", "solution_func": "def g(n = 3):\n    return \"a\" * n", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, a=3, b=4, c=5) -> bool:\n    \"\"\"Check if the sum of a, b, and c is equal to the length of s\"\"\"\n    return len(s) == a + b + c\ndef g(a = 3, b = 4, c = 5):\n    return \"x\" * a + \"y\" * b + \"z\" * c\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 98, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, a=3, b=4, c=5) -> bool:\n    \"\"\"Check if the sum of a, b, and c is equal to the length of s\"\"\"\n    return len(s) == a + b + c", "solution_func": "def g(a = 3, b = 4, c = 5):\n    return \"x\" * a + \"y\" * b + \"z\" * c", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n=10) -> bool:\n    \"\"\"Check if the sum of the ASCII values of the characters in s is divisible by n\"\"\"\n    ascii_sum = sum(ord(char) for char in s)\n    return ascii_sum % n == 0\ndef g(n = 10):\n    return \"hello\"\nassert f(g())\n", "emb": null, "idx_generation": 98, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=10) -> bool:\n    \"\"\"Check if the sum of the ASCII values of the characters in s is divisible by n\"\"\"\n    ascii_sum = sum(ord(char) for char in s)\n    return ascii_sum % n == 0", "solution_func": "def g(n = 10):\n    return \"hello\"", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(numbers: list, target: int, num1=5, num2=10, num3=15) -> bool:\n    \"\"\"Check if the sum of three numbers in the list equals the target\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target:\n                    return True\n    return False\ndef g(numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=30):\n    return numbers\nassert f(g())\n", "emb": null, "idx_generation": 98, "target_skills": null, "problem_func": "from typing import*\ndef f(numbers: list, target: int, num1=5, num2=10, num3=15) -> bool:\n    \"\"\"Check if the sum of three numbers in the list equals the target\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target:\n                    return True\n    return False", "solution_func": "def g(numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=30):\n    return numbers", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n: int, substr='abc') -> bool:\n    \"\"\"Check if the substring 'abc' appears n times in the string s\"\"\"\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] == substr:\n            count += 1\n    return count == n\ndef g(n=3, substr='abc'):\n    return substr * n\nassert f(g())\n", "emb": null, "idx_generation": 98, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n: int, substr='abc') -> bool:\n    \"\"\"Check if the substring 'abc' appears n times in the string s\"\"\"\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] == substr:\n            count += 1\n    return count == n", "solution_func": "def g(n=3, substr='abc'):\n    return substr * n", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(numbers: list, target: int, num1=2, num2=4, num3=6, num4=8) -> bool:\n    \"\"\"Check if the sum of four numbers in the list equals the target\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                for l in range(k+1, len(numbers)):\n                    if numbers[i] + numbers[j] + numbers[k] + numbers[l] == target:\n                        return True\n    return False\ndef g(numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=30):\n    return numbers\nassert f(g())\n", "emb": null, "idx_generation": 98, "target_skills": null, "problem_func": "from typing import*\ndef f(numbers: list, target: int, num1=2, num2=4, num3=6, num4=8) -> bool:\n    \"\"\"Check if the sum of four numbers in the list equals the target\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                for l in range(k+1, len(numbers)):\n                    if numbers[i] + numbers[j] + numbers[k] + numbers[l] == target:\n                        return True\n    return False", "solution_func": "def g(numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=30):\n    return numbers", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, a=\"Hello World!\") -> bool:\n    \"\"\"Check if string s is a palindrome.\"\"\"\n    return s == s[::-1]\ndef g(a=\"Hello World!\"):\n    return a[::-1]\nassert f(g())\n", "emb": null, "idx_generation": 98, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, a=\"Hello World!\") -> bool:\n    \"\"\"Check if string s is a palindrome.\"\"\"\n    return s == s[::-1]", "solution_func": "def g(a=\"Hello World!\"):\n    return a[::-1]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], a=10) -> bool:\n    \"\"\"Check if the sum of elements in arr is equal to a.\"\"\"\n    return sum(arr) == a\ndef g(a=10):\n    return [a]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 98, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], a=10) -> bool:\n    \"\"\"Check if the sum of elements in arr is equal to a.\"\"\"\n    return sum(arr) == a", "solution_func": "def g(a=10):\n    return [a]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], a=2, b=3) -> bool:\n    \"\"\"Check if all elements in arr are divisible by both a and b.\"\"\"\n    return all(x % a == 0 and x % b == 0 for x in arr)\ndef g(a=2, b=3):\n    return [a, b]\nassert f(g())\n", "emb": null, "idx_generation": 98, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], a=2, b=3) -> bool:\n    \"\"\"Check if all elements in arr are divisible by both a and b.\"\"\"\n    return all(x % a == 0 and x % b == 0 for x in arr)", "solution_func": "def g(a=2, b=3):\n    return [a, b]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n=2, m=4) -> bool:\n    \"\"\"Check if there exists a substring of length n that occurs at least m times in the given string.\"\"\"\n    counts = {}\n    for i in range(len(s) - n + 1):\n        substring = s[i:i+n]\n        if substring in counts:\n            counts[substring] += 1\n        else:\n            counts[substring] = 1\n        if counts[substring] >= m:\n            return True\n    return False\n\ndef g(n=2, m=4):\n    s = \"abababa\"\n    return s\n\nassert f(g())\n", "emb": null, "idx_generation": 98, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=2, m=4) -> bool:\n    \"\"\"Check if there exists a substring of length n that occurs at least m times in the given string.\"\"\"\n    counts = {}\n    for i in range(len(s) - n + 1):\n        substring = s[i:i+n]\n        if substring in counts:\n            counts[substring] += 1\n        else:\n            counts[substring] = 1\n        if counts[substring] >= m:\n            return True\n    return False", "solution_func": "def g(n=2, m=4):\n    s = \"abababa\"\n    return s", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Find two numbers in the array that sum up to the target value.\"\"\"\n    return any(target - num in arr for num in arr)\n    \ndef g(arr: List[int], target: int):\n    \"\"\"Return the two numbers that sum up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return [arr[i], arr[j]]\n    return []\n    \nassert f(g([1, 2, 3, 4, 5], 7))\n", "emb": null, "idx_generation": 99, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Find two numbers in the array that sum up to the target value.\"\"\"\n    return any(target - num in arr for num in arr)", "solution_func": "def g(arr: List[int], target: int):\n    \"\"\"Return the two numbers that sum up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return [arr[i], arr[j]]\n    return []", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k: int) -> bool:\n    \"\"\"Check if there exists a subarray of length k whose sum is divisible by k.\"\"\"\n    for i in range(len(arr) - k + 1):\n        subarray = arr[i:i + k]\n        if sum(subarray) % k == 0:\n            return True\n    return False\n    \ndef g(arr: List[int], k: int):\n    \"\"\"Return the subarray of length k whose sum is divisible by k.\"\"\"\n    for i in range(len(arr) - k + 1):\n        subarray = arr[i:i + k]\n        if sum(subarray) % k == 0:\n            return subarray\n    return []\n    \nassert f(g([1, 2, 3, 4, 5], 3))\n", "emb": null, "idx_generation": 99, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k: int) -> bool:\n    \"\"\"Check if there exists a subarray of length k whose sum is divisible by k.\"\"\"\n    for i in range(len(arr) - k + 1):\n        subarray = arr[i:i + k]\n        if sum(subarray) % k == 0:\n            return True\n    return False", "solution_func": "def g(arr: List[int], k: int):\n    \"\"\"Return the subarray of length k whose sum is divisible by k.\"\"\"\n    for i in range(len(arr) - k + 1):\n        subarray = arr[i:i + k]\n        if sum(subarray) % k == 0:\n            return subarray\n    return []", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], n: int) -> bool:\n    \"\"\"Check if there exists a subarray whose sum is equal to n.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr) + 1):\n            if sum(arr[i:j]) == n:\n                return True\n    return False\n    \ndef g(arr: List[int], n: int):\n    \"\"\"Return the subarray whose sum is equal to n.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr) + 1):\n            if sum(arr[i:j]) == n:\n                return arr[i:j]\n    return []\n    \nassert f(g([1, 2, 3, 4, 5], 7))\n", "emb": null, "idx_generation": 99, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], n: int) -> bool:\n    \"\"\"Check if there exists a subarray whose sum is equal to n.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr) + 1):\n            if sum(arr[i:j]) == n:\n                return True\n    return False", "solution_func": "def g(arr: List[int], n: int):\n    \"\"\"Return the subarray whose sum is equal to n.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr) + 1):\n            if sum(arr[i:j]) == n:\n                return arr[i:j]\n    return []", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(li: List[int]) -> bool:\n    \"\"\"\n    Find a list of integers such that the sum of the first three elements is equal to the product of the last three elements.\n    \"\"\"\n    return sum(li[:3]) == li[-3] * li[-2] * li[-1]\ndef g():\n    return [1, 1, 1, 2, 2, 3]\nassert f(g())\n", "emb": null, "idx_generation": 99, "target_skills": null, "problem_func": "from typing import*\ndef f(li: List[int]) -> bool:\n    \"\"\"\n    Find a list of integers such that the sum of the first three elements is equal to the product of the last three elements.\n    \"\"\"\n    return sum(li[:3]) == li[-3] * li[-2] * li[-1]", "solution_func": "def g():\n    return [1, 1, 1, 2, 2, 3]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10, 12, 14, 16, 18], upper_bound=20) -> bool:\n    \"\"\"Find a number that is divisible by n and greater than the maximum value in the list of integers.\"\"\"\n    return any((i % n == 0 for i in nums)) and max(nums) < upper_bound\ndef g(nums=[2, 4, 6, 8, 10, 12, 14, 16, 18], upper_bound=20):\n    return max(nums) + n\nassert f(g())\n", "emb": null, "idx_generation": 99, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10, 12, 14, 16, 18], upper_bound=20) -> bool:\n    \"\"\"Find a number that is divisible by n and greater than the maximum value in the list of integers.\"\"\"\n    return any((i % n == 0 for i in nums)) and max(nums) < upper_bound", "solution_func": "def g(nums=[2, 4, 6, 8, 10, 12, 14, 16, 18], upper_bound=20):\n    return max(nums) + n", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target=4) -> bool:\n    \"\"\"\n    Given a string consisting of 'a's, 'b's and 'c's, find any substring of length 4 or greater that contains at least\n    two different characters.\n\n    Sample Input:\n    `\"abbbbbcc\"`\n\n    Sample Output:\n    `\"abbbb\"`\n    \"\"\"\n    substrings = [s[i:i+target] for i in range(len(s)-target+1)]\n    return any(len(set(sub)) >= 2 for sub in substrings)\ndef g(target=4):\n    return \"ab\" + \"b\" * (target-2)\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 99, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target=4) -> bool:\n    \"\"\"\n    Given a string consisting of 'a's, 'b's and 'c's, find any substring of length 4 or greater that contains at least\n    two different characters.\n\n    Sample Input:\n    `\"abbbbbcc\"`\n\n    Sample Output:\n    `\"abbbb\"`\n    \"\"\"\n    substrings = [s[i:i+target] for i in range(len(s)-target+1)]\n    return any(len(set(sub)) >= 2 for sub in substrings)", "solution_func": "def g(target=4):\n    return \"ab\" + \"b\" * (target-2)", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], n=100) -> bool:\n    \"\"\"Find two integers whose sum is equal to n\"\"\"\n    return len(nums) >= 2 and any((nums[i] + nums[j] == n for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(n = 100):\n    m = n\n    nums = [i for i in range(1, m) if i < m-i]\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 99, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], n=100) -> bool:\n    \"\"\"Find two integers whose sum is equal to n\"\"\"\n    return len(nums) >= 2 and any((nums[i] + nums[j] == n for i in range(len(nums)) for j in range(i+1, len(nums))))", "solution_func": "def g(n = 100):\n    m = n\n    nums = [i for i in range(1, m) if i < m-i]\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], n=100) -> bool:\n    \"\"\"Find three integers whose sum is equal to n\"\"\"\n    return len(nums) >= 3 and any((nums[i] + nums[j] + nums[k] == n for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums))))\ndef g(n = 100):\n    m = n\n    nums = [i for i in range(1, m) if i < m-i]\n    return nums\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 99, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], n=100) -> bool:\n    \"\"\"Find three integers whose sum is equal to n\"\"\"\n    return len(nums) >= 3 and any((nums[i] + nums[j] + nums[k] == n for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums))))", "solution_func": "def g(n = 100):\n    m = n\n    nums = [i for i in range(1, m) if i < m-i]\n    return nums", "map_ix": [1, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], n=100) -> bool:\n    \"\"\"Find four integers whose sum is equal to n\"\"\"\n    return len(nums) >= 4 and any((nums[i] + nums[j] + nums[k] + nums[l] == n for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)) for l in range(k+1, len(nums))))\ndef g(n = 100):\n    m = n\n    nums = [i for i in range(1, m) if i < m-i]\n    return nums\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 99, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], n=100) -> bool:\n    \"\"\"Find four integers whose sum is equal to n\"\"\"\n    return len(nums) >= 4 and any((nums[i] + nums[j] + nums[k] + nums[l] == n for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)) for l in range(k+1, len(nums))))", "solution_func": "def g(n = 100):\n    m = n\n    nums = [i for i in range(1, m) if i < m-i]\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(arr: List[int], target: int, k=3) -> bool:\n    \"\"\"\n    Find if there exists k elements in arr that sum up to target.\n\n    Example:\n    arr = [1, 5, 2, 8, 9]\n    target = 12\n    k = 3\n    output: True\n    \"\"\"\n    assert all((type(x) == int for x in arr)) and len(arr) >= k\n    return any((sum(comb) == target for comb in itertools.combinations(arr, k)))\ndef g(arr=[1, 5, 2, 8, 9], target=12, k=3):\n    return arr\nassert f(g())\n", "emb": null, "idx_generation": 99, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(arr: List[int], target: int, k=3) -> bool:\n    \"\"\"\n    Find if there exists k elements in arr that sum up to target.\n\n    Example:\n    arr = [1, 5, 2, 8, 9]\n    target = 12\n    k = 3\n    output: True\n    \"\"\"\n    assert all((type(x) == int for x in arr)) and len(arr) >= k\n    return any((sum(comb) == target for comb in itertools.combinations(arr, k)))", "solution_func": "def g(arr=[1, 5, 2, 8, 9], target=12, k=3):\n    return arr", "map_ix": null}, {"fitness": -Infinity, "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(nums: List[int], threshold=100) -> bool:\n    \"\"\"Check if the sum of the square roots of the numbers in the list is greater than the threshold\"\"\"\n    return sum([sqrt(n) for n in nums]) > threshold\n\ndef g(threshold=100):\n    return [n**2 for n in range(10) if n**2 > threshold]\n\nassert f(g())\n", "emb": null, "idx_generation": 100, "target_skills": null, "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(nums: List[int], threshold=100) -> bool:\n    \"\"\"Check if the sum of the square roots of the numbers in the list is greater than the threshold\"\"\"\n    return sum([sqrt(n) for n in nums]) > threshold", "solution_func": "def g(threshold=100):\n    return [n**2 for n in range(10) if n**2 > threshold]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, start_char='a', end_char='z') -> bool:\n    \"\"\"Check if the string starts with the start_char and ends with the end_char\"\"\"\n    return s.startswith(start_char) and s.endswith(end_char)\n\ndef g(start_char='a', end_char='z'):\n    return start_char + 'bcde' + end_char\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 100, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, start_char='a', end_char='z') -> bool:\n    \"\"\"Check if the string starts with the start_char and ends with the end_char\"\"\"\n    return s.startswith(start_char) and s.endswith(end_char)", "solution_func": "def g(start_char='a', end_char='z'):\n    return start_char + 'bcde' + end_char", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(li: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target_sum\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i] + li[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 100, "target_skills": null, "problem_func": "from typing import*\ndef f(li: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target_sum\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i] + li[j] == target_sum:\n                return True\n    return False", "solution_func": "def g(target_sum=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, strings=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Find the longest string in a list that contains the second letter of the alphabet.\"\"\"\n    return max(strings, key=len).count('b') > 0\ndef g(strings = ['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return sorted(strings, key=len)[-1]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 100, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, strings=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Find the longest string in a list that contains the second letter of the alphabet.\"\"\"\n    return max(strings, key=len).count('b') > 0", "solution_func": "def g(strings = ['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return sorted(strings, key=len)[-1]", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(i: int) -> bool:\n    \"\"\"Find a number whose square root is an integer.\"\"\"\n    return math.sqrt(i).is_integer()\ndef g():\n    return 16\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 100, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(i: int) -> bool:\n    \"\"\"Find a number whose square root is an integer.\"\"\"\n    return math.sqrt(i).is_integer()", "solution_func": "def g():\n    return 16", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, strings=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Find a string in a list that starts with the last letter of another string.\"\"\"\n    return any(t.startswith(s[-1]) for t in strings)\ndef g(strings = ['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return strings[2]\nassert f(g())\n", "emb": null, "idx_generation": 100, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, strings=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Find a string in a list that starts with the last letter of another string.\"\"\"\n    return any(t.startswith(s[-1]) for t in strings)", "solution_func": "def g(strings = ['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return strings[2]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    return any(target - num in nums for num in nums)\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5]\n    return nums\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 100, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    return any(target - num in nums for num in nums)", "solution_func": "def g(target=10):\n    nums = [1, 2, 3, 4, 5]\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Check if there is a pair of numbers in the matrix that add up to the target\"\"\"\n    nums = [num for row in matrix for num in row]\n    return any(target - num in nums for num in nums)\ndef g(target=15):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 100, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Check if there is a pair of numbers in the matrix that add up to the target\"\"\"\n    nums = [num for row in matrix for num in row]\n    return any(target - num in nums for num in nums)", "solution_func": "def g(target=15):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"Check if any word in the list is a substring of the target\"\"\"\n    return any(word in target for word in words)\ndef g(target='python'):\n    words = ['py', 'th', 'on']\n    return words\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 100, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"Check if any word in the list is a substring of the target\"\"\"\n    return any(word in target for word in words)", "solution_func": "def g(target='python'):\n    words = ['py', 'th', 'on']\n    return words", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, l=[3, 5, 7, 9]) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in a list that sums up to a given number.\n\n    Sample Input:\n    n = 12\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == n:\n                return True\n    return False\ndef g(l = [3, 5, 7, 9]):\n    return sum(l[:-1])\nassert f(g())\n", "emb": null, "idx_generation": 100, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, l=[3, 5, 7, 9]) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in a list that sums up to a given number.\n\n    Sample Input:\n    n = 12\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == n:\n                return True\n    return False", "solution_func": "def g(l = [3, 5, 7, 9]):\n    return sum(l[:-1])", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s1: str, s2: str, k: int) -> bool:\n    \"\"\"Check if it is possible to transform s1 into s2 with at most k operations.\"\"\"\n    if abs(len(s1) - len(s2)) > k:\n        return False\n    dp = [[0] * (len(s2) + 1) for _ in range(len(s1) + 1)]\n    for i in range(len(s1) + 1):\n        dp[i][0] = i\n    for j in range(len(s2) + 1):\n        dp[0][j] = j\n    for i in range(1, len(s1) + 1):\n        for j in range(1, len(s2) + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = 1 + min(dp[i - 1][j - 1], dp[i][j - 1], dp[i - 1][j])\n    return dp[len(s1)][len(s2)] <= k\ndef g(s1 = \"kitten\", s2 = \"sitting\", k = 3):\n    return s1, s2, k\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 101, "target_skills": null, "problem_func": "from typing import*\ndef f(s1: str, s2: str, k: int) -> bool:\n    \"\"\"Check if it is possible to transform s1 into s2 with at most k operations.\"\"\"\n    if abs(len(s1) - len(s2)) > k:\n        return False\n    dp = [[0] * (len(s2) + 1) for _ in range(len(s1) + 1)]\n    for i in range(len(s1) + 1):\n        dp[i][0] = i\n    for j in range(len(s2) + 1):\n        dp[0][j] = j\n    for i in range(1, len(s1) + 1):\n        for j in range(1, len(s2) + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = 1 + min(dp[i - 1][j - 1], dp[i][j - 1], dp[i - 1][j])\n    return dp[len(s1)][len(s2)] <= k", "solution_func": "def g(s1 = \"kitten\", s2 = \"sitting\", k = 3):\n    return s1, s2, k", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of elements in arr that sum up to the target value.\"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(arr = [1, 2, 3, 4, 5], target = 7):\n    return arr, target\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 101, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of elements in arr that sum up to the target value.\"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(arr = [1, 2, 3, 4, 5], target = 7):\n    return arr, target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there exists a subarray of nums that has a sum equal to 0.\"\"\"\n    prefix_sum = 0\n    seen = set()\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == 0 or prefix_sum in seen:\n            return True\n        seen.add(prefix_sum)\n    return False\ndef g(nums = [4, -6, 3, -1, 5, -2, 2]):\n    return nums\nassert f(*g())\n", "emb": null, "idx_generation": 101, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there exists a subarray of nums that has a sum equal to 0.\"\"\"\n    prefix_sum = 0\n    seen = set()\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == 0 or prefix_sum in seen:\n            return True\n        seen.add(prefix_sum)\n    return False", "solution_func": "def g(nums = [4, -6, 3, -1, 5, -2, 2]):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists two numbers in the list that add up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target = 10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 101, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists two numbers in the list that add up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target = 10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], n=3) -> bool:\n    \"\"\"Check if there exists n consecutive numbers in the list that are multiples of 5\"\"\"\n    for i in range(len(nums)-n+1):\n        if all(nums[i+j] % 5 == 0 for j in range(n)):\n            return True\n    return False\ndef g(n = 3):\n    return [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 101, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], n=3) -> bool:\n    \"\"\"Check if there exists n consecutive numbers in the list that are multiples of 5\"\"\"\n    for i in range(len(nums)-n+1):\n        if all(nums[i+j] % 5 == 0 for j in range(n)):\n            return True\n    return False", "solution_func": "def g(n = 3):\n    return [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a subset of the list that adds up to the target value\"\"\"\n    def check_subset(nums, target, i, current_sum):\n        if current_sum == target:\n            return True\n        if i == len(nums):\n            return False\n        return check_subset(nums, target, i+1, current_sum) or check_subset(nums, target, i+1, current_sum+nums[i])\n    return check_subset(nums, target, 0, 0)\ndef g(target = 50):\n    return [10, 20, 30, 40, 50]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 101, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a subset of the list that adds up to the target value\"\"\"\n    def check_subset(nums, target, i, current_sum):\n        if current_sum == target:\n            return True\n        if i == len(nums):\n            return False\n        return check_subset(nums, target, i+1, current_sum) or check_subset(nums, target, i+1, current_sum+nums[i])\n    return check_subset(nums, target, 0, 0)", "solution_func": "def g(target = 50):\n    return [10, 20, 30, 40, 50]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, target: str) -> bool:\n    \"\"\"Check if a target string is a substring of a given string.\"\"\"\n    return target in s\ndef g(s: str, target: str):\n    return s + target\nassert f(g(\"Hello, World!\", \"World\"))\n", "emb": null, "idx_generation": 101, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target: str) -> bool:\n    \"\"\"Check if a target string is a substring of a given string.\"\"\"\n    return target in s", "solution_func": "def g(s: str, target: str):\n    return s + target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if two numbers in a list add up to a target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums: List[int], target: int):\n    return nums\nassert f(g([2, 4, 6, 8], 10))\n", "emb": null, "idx_generation": 101, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if two numbers in a list add up to a target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums: List[int], target: int):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are three numbers in a list that add up to a target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(nums: List[int], target: int):\n    return nums\nassert f(g([1, 2, 3, 4, 5], 9))\n", "emb": null, "idx_generation": 101, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are three numbers in a list that add up to a target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False", "solution_func": "def g(nums: List[int], target: int):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n=2, m=3) -> bool:\n    \"\"\"Check if the given string can be split into n equal parts, each of length m\"\"\"\n    return all([s[i*m:(i+1)*m] == s[(i+1)*m:(i+2)*m] for i in range(n-1)])\ndef g(n=2, m=3):\n    string = \"abcdefghijklmnopqrstuvwxyz\" * (n * m) # create a string with length n*m\n    return string\nassert f(g())\n", "emb": null, "idx_generation": 101, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=2, m=3) -> bool:\n    \"\"\"Check if the given string can be split into n equal parts, each of length m\"\"\"\n    return all([s[i*m:(i+1)*m] == s[(i+1)*m:(i+2)*m] for i in range(n-1)])", "solution_func": "def g(n=2, m=3):\n    string = \"abcdefghijklmnopqrstuvwxyz\" * (n * m) # create a string with length n*m\n    return string", "map_ix": null}, {"fitness": 1.0, "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, x: float) -> bool:\n    \"\"\"Check if the square root of n is greater than x\"\"\"\n    return sqrt(n) > x\n\ndef g(x: float):\n    return x**2 + 1\n\nassert f(g(x=3), x=2)\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 102, "target_skills": null, "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, x: float) -> bool:\n    \"\"\"Check if the square root of n is greater than x\"\"\"\n    return sqrt(n) > x", "solution_func": "def g(x: float):\n    return x**2 + 1", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if n is the sum of any two numbers in the list\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == n:\n                return True\n    return False\n\ndef g(lst: List[int]):\n    return lst + [sum(lst)]\n\nassert f(g([1, 2, 3, 4]), [1, 2, 3, 4])\n", "emb": null, "idx_generation": 102, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if n is the sum of any two numbers in the list\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == n:\n                return True\n    return False", "solution_func": "def g(lst: List[int]):\n    return lst + [sum(lst)]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom datetime import date\n\ndef f(d: date, year: int) -> bool:\n    \"\"\"Check if the year of the date equals the given year\"\"\"\n    return d.year == year\n\ndef g(year: int):\n    return date(year, 1, 1)\n\nassert f(g(2022), 2022)\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 102, "target_skills": null, "problem_func": "from typing import*\nfrom datetime import date\n\ndef f(d: date, year: int) -> bool:\n    \"\"\"Check if the year of the date equals the given year\"\"\"\n    return d.year == year", "solution_func": "def g(year: int):\n    return date(year, 1, 1)", "map_ix": [0, 0, 0, 1, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a pair of numbers whose sum is equal to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=100):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 102, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a pair of numbers whose sum is equal to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target=100):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target=50) -> bool:\n    \"\"\"Find a subarray whose sum is equal to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if sum(arr[i:j+1]) == target:\n                return True\n    return False\ndef g(target=50):\n    arr = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n    return arr\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 102, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=50) -> bool:\n    \"\"\"Find a subarray whose sum is equal to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if sum(arr[i:j+1]) == target:\n                return True\n    return False", "solution_func": "def g(target=50):\n    arr = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=100) -> bool:\n    \"\"\"Find a pair of numbers from different rows whose sum is equal to the target\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix)):\n            if i != j:\n                for num1 in matrix[i]:\n                    for num2 in matrix[j]:\n                        if num1 + num2 == target:\n                            return True\n    return False\ndef g(target=100):\n    matrix = [[1, 2, 3, 4, 5],\n              [6, 7, 8, 9, 10],\n              [11, 12, 13, 14, 15],\n              [16, 17, 18, 19, 20]]\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 102, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=100) -> bool:\n    \"\"\"Find a pair of numbers from different rows whose sum is equal to the target\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix)):\n            if i != j:\n                for num1 in matrix[i]:\n                    for num2 in matrix[j]:\n                        if num1 + num2 == target:\n                            return True\n    return False", "solution_func": "def g(target=100):\n    matrix = [[1, 2, 3, 4, 5],\n              [6, 7, 8, 9, 10],\n              [11, 12, 13, 14, 15],\n              [16, 17, 18, 19, 20]]\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, digits = [2, 4, 6, 8]) -> bool:\n    \"\"\"Check if the given number contains only even digits.\"\"\"\n    str_n = str(n)\n    for digit in str_n:\n        if int(digit) not in digits:\n            return False\n    return True\ndef g(digits = [2, 4, 6, 8]):\n    return int(''.join(map(str, digits)))\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 102, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, digits = [2, 4, 6, 8]) -> bool:\n    \"\"\"Check if the given number contains only even digits.\"\"\"\n    str_n = str(n)\n    for digit in str_n:\n        if int(digit) not in digits:\n            return False\n    return True", "solution_func": "def g(digits = [2, 4, 6, 8]):\n    return int(''.join(map(str, digits)))", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(numbers: List[int], threshold = 100) -> bool:\n    \"\"\"Check if the sum of the square roots of the numbers is greater than a threshold.\"\"\"\n    sum_sqrt = sum(math.sqrt(num) for num in numbers)\n    return sum_sqrt > threshold\ndef g(numbers = [4, 9, 16, 25, 36]):\n    return numbers\nassert f(g())\n", "emb": null, "idx_generation": 102, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(numbers: List[int], threshold = 100) -> bool:\n    \"\"\"Check if the sum of the square roots of the numbers is greater than a threshold.\"\"\"\n    sum_sqrt = sum(math.sqrt(num) for num in numbers)\n    return sum_sqrt > threshold", "solution_func": "def g(numbers = [4, 9, 16, 25, 36]):\n    return numbers", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(string: str, substr = \"hello\") -> bool:\n    \"\"\"Check if the given string contains a specific substring.\"\"\"\n    return substr in string\ndef g(substr = \"hello\"):\n    return \"This is a test string.\"\nassert f(g())\n", "emb": null, "idx_generation": 102, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, substr = \"hello\") -> bool:\n    \"\"\"Check if the given string contains a specific substring.\"\"\"\n    return substr in string", "solution_func": "def g(substr = \"hello\"):\n    return \"This is a test string.\"", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n", "emb": null, "idx_generation": 102, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, s: str, m=2) -> bool:\n    \"\"\"Check if a string contains at least n occurrences of a substring s\"\"\"\n    return s.count(s) >= n\ndef g(n=2, s='abc'):\n    return n, s\nassert f(g())\n", "emb": null, "idx_generation": 103, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, s: str, m=2) -> bool:\n    \"\"\"Check if a string contains at least n occurrences of a substring s\"\"\"\n    return s.count(s) >= n", "solution_func": "def g(n=2, s='abc'):\n    return n, s", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(a: int, b: int, c: int, d: int, e: int, f: int, g=20, h=10) -> bool:\n    \"\"\"Check if a given equation is satisfied\"\"\"\n    return a + b - c * d / e + f == g - h\ndef g(a=2, b=3, c=4, d=5, e=6, f=7):\n    return a, b, c, d, e, f\nassert f(g())\n", "emb": null, "idx_generation": 103, "target_skills": null, "problem_func": "from typing import*\ndef f(a: int, b: int, c: int, d: int, e: int, f: int, g=20, h=10) -> bool:\n    \"\"\"Check if a given equation is satisfied\"\"\"\n    return a + b - c * d / e + f == g - h", "solution_func": "def g(a=2, b=3, c=4, d=5, e=6, f=7):\n    return a, b, c, d, e, f", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(lst: List[int], target: int, n=3) -> bool:\n    \"\"\"Check if there are exactly n elements in a list that sum up to a target\"\"\"\n    return len([i for i in lst if i <= target]) == n\ndef g(lst=[1, 2, 3, 4, 5], target=10):\n    return lst, target\nassert f(g())\n", "emb": null, "idx_generation": 103, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int], target: int, n=3) -> bool:\n    \"\"\"Check if there are exactly n elements in a list that sum up to a target\"\"\"\n    return len([i for i in lst if i <= target]) == n", "solution_func": "def g(lst=[1, 2, 3, 4, 5], target=10):\n    return lst, target", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the given string contains n consecutive letters in alphabetical order.\"\"\"\n\n    def consecutive_letters(s: str) -> bool:\n        for i in range(len(s) - n + 1):\n            if all(ord(s[i + j]) == ord(s[i]) + j for j in range(n)):\n                return True\n        return False\n    return consecutive_letters(s)\ndef g(n = 3):\n    import string\n    return string.ascii_lowercase\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 103, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the given string contains n consecutive letters in alphabetical order.\"\"\"\n\n    def consecutive_letters(s: str) -> bool:\n        for i in range(len(s) - n + 1):\n            if all(ord(s[i + j]) == ord(s[i]) + j for j in range(n)):\n                return True\n        return False\n    return consecutive_letters(s)", "solution_func": "def g(n = 3):\n    import string\n    return string.ascii_lowercase", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, arr=[2, 5, 7, 8, 10, 13, 15, 17, 19, 20, 25, 30, 35, 40, 45, 50]) -> bool:\n    \"\"\"Check if the given number is divisible by all the elements in the list.\"\"\"\n\n    def divisible_by_all(n: int) -> bool:\n        return all(n % x == 0 for x in arr)\n    return divisible_by_all(n)\ndef g(arr = [2, 5, 7, 8, 10, 13, 15, 17, 19, 20, 25, 30, 35, 40, 45, 50]):\n    n = 1\n    while True:\n        if all(n % x == 0 for x in arr):\n            return n\n        n += 1\nassert f(g())\n", "emb": null, "idx_generation": 103, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, arr=[2, 5, 7, 8, 10, 13, 15, 17, 19, 20, 25, 30, 35, 40, 45, 50]) -> bool:\n    \"\"\"Check if the given number is divisible by all the elements in the list.\"\"\"\n\n    def divisible_by_all(n: int) -> bool:\n        return all(n % x == 0 for x in arr)\n    return divisible_by_all(n)", "solution_func": "def g(arr = [2, 5, 7, 8, 10, 13, 15, 17, 19, 20, 25, 30, 35, 40, 45, 50]):\n    n = 1\n    while True:\n        if all(n % x == 0 for x in arr):\n            return n\n        n += 1", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if there exists a row in the matrix where the sum of all elements is equal to the target.\"\"\"\n\n    def row_with_sum(matrix: List[List[int]]) -> bool:\n        for row in matrix:\n            if sum(row) == target:\n                return True\n        return False\n    return row_with_sum(matrix)\ndef g(target = 0):\n    import random\n    matrix = [[random.randint(0, 9) for _ in range(5)] for _ in range(5)]\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 103, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if there exists a row in the matrix where the sum of all elements is equal to the target.\"\"\"\n\n    def row_with_sum(matrix: List[List[int]]) -> bool:\n        for row in matrix:\n            if sum(row) == target:\n                return True\n        return False\n    return row_with_sum(matrix)", "solution_func": "def g(target = 0):\n    import random\n    matrix = [[random.randint(0, 9) for _ in range(5)] for _ in range(5)]\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, t: str, mapping={'a': '1', 'b': '2', 'c': '3', 'd': '4', 'e': '5'}) -> bool:\n    \"\"\"\n    Given two strings `s` and `t`, determine if they have a common isomorphic mapping. \n    A mapping is considered isomorphic if it maps each character in `s` to a unique character in `t`,\n    and vice versa. The mapping is defined using the `mapping` dictionary, where the keys are characters in `s`\n    and the values are characters in `t`.\n    \"\"\"\n    if len(s) != len(t):\n        return False\n    \n    for i in range(len(s)):\n        if s[i] in mapping and t[i] != mapping[s[i]]:\n            return False\n        if t[i] in mapping.values() and s[i] != list(mapping.keys())[list(mapping.values()).index(t[i])]:\n            return False\n    \n    return True\n\ndef g(s: str, t: str, mapping={'a': '1', 'b': '2', 'c': '3', 'd': '4', 'e': '5'}):\n    return f(s, t, mapping)\nassert f(g())\n", "emb": null, "idx_generation": 103, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, t: str, mapping={'a': '1', 'b': '2', 'c': '3', 'd': '4', 'e': '5'}) -> bool:\n    \"\"\"\n    Given two strings `s` and `t`, determine if they have a common isomorphic mapping. \n    A mapping is considered isomorphic if it maps each character in `s` to a unique character in `t`,\n    and vice versa. The mapping is defined using the `mapping` dictionary, where the keys are characters in `s`\n    and the values are characters in `t`.\n    \"\"\"\n    if len(s) != len(t):\n        return False\n    \n    for i in range(len(s)):\n        if s[i] in mapping and t[i] != mapping[s[i]]:\n            return False\n        if t[i] in mapping.values() and s[i] != list(mapping.keys())[list(mapping.values()).index(t[i])]:\n            return False\n    \n    return True", "solution_func": "def g(s: str, t: str, mapping={'a': '1', 'b': '2', 'c': '3', 'd': '4', 'e': '5'}):\n    return f(s, t, mapping)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int, k: int = 3) -> bool:\n    \"\"\"\n    Given a list of integers `nums`, find if there exists three elements in the list\n    such that their sum is equal to `target`. The function also takes an optional argument `k`,\n    which determines the number of elements that should sum to `target`.\n    \"\"\"\n    def helper(nums, target, k, curr_sum, start):\n        if k == 0 and curr_sum == target:\n            return True\n        if k < 0:\n            return False\n        for i in range(start, len(nums)):\n            if helper(nums, target, k-1, curr_sum + nums[i], i+1):\n                return True\n        return False\n    \n    return helper(nums, target, k, 0, 0)\n\ndef g(nums: List[int], target: int, k: int = 3):\n    return f(nums, target, k)\nassert f(g())\n", "emb": null, "idx_generation": 103, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int, k: int = 3) -> bool:\n    \"\"\"\n    Given a list of integers `nums`, find if there exists three elements in the list\n    such that their sum is equal to `target`. The function also takes an optional argument `k`,\n    which determines the number of elements that should sum to `target`.\n    \"\"\"\n    def helper(nums, target, k, curr_sum, start):\n        if k == 0 and curr_sum == target:\n            return True\n        if k < 0:\n            return False\n        for i in range(start, len(nums)):\n            if helper(nums, target, k-1, curr_sum + nums[i], i+1):\n                return True\n        return False\n    \n    return helper(nums, target, k, 0, 0)", "solution_func": "def g(nums: List[int], target: int, k: int = 3):\n    return f(nums, target, k)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a sorted 2D matrix `matrix` and a target value `target`, determine if the target value exists in the matrix.\n    The matrix is sorted in non-decreasing order, both row-wise and column-wise.\n    \"\"\"\n    if not matrix or not matrix[0]:\n        return False\n    \n    m, n = len(matrix), len(matrix[0])\n    row, col = m-1, 0\n    \n    while row >= 0 and col < n:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] > target:\n            row -= 1\n        else:\n            col += 1\n    \n    return False\n\ndef g(matrix: List[List[int]], target: int):\n    return f(matrix, target)\nassert f(g())", "emb": null, "idx_generation": 103, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a sorted 2D matrix `matrix` and a target value `target`, determine if the target value exists in the matrix.\n    The matrix is sorted in non-decreasing order, both row-wise and column-wise.\n    \"\"\"\n    if not matrix or not matrix[0]:\n        return False\n    \n    m, n = len(matrix), len(matrix[0])\n    row, col = m-1, 0\n    \n    while row >= 0 and col < n:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] > target:\n            row -= 1\n        else:\n            col += 1\n    \n    return False", "solution_func": "def g(matrix: List[List[int]], target: int):\n    return f(matrix, target)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target_len=10) -> bool:\n    \"\"\"Check if a string can be modified to have the target length by adding or removing characters.\"\"\"\n    return len(s) == target_len\ndef g(target_len = 10):\n    return \"?\" * target_len\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 103, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target_len=10) -> bool:\n    \"\"\"Check if a string can be modified to have the target length by adding or removing characters.\"\"\"\n    return len(s) == target_len", "solution_func": "def g(target_len = 10):\n    return \"?\" * target_len", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, c='a'):\n    \"\"\"Check if a given character is present in a string.\"\"\"\n    return c in s\n\ndef g(s='Hello, world!', c='a'):\n    return s\nassert f(g())\n", "emb": null, "idx_generation": 104, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, c='a'):\n    \"\"\"Check if a given character is present in a string.\"\"\"\n    return c in s", "solution_func": "def g(s='Hello, world!', c='a'):\n    return s", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(lst: List[int], n=5):\n    \"\"\"Find the sum of the first n elements in a list.\"\"\"\n    return sum(lst[:n])\n\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n=5):\n    return lst\nassert f(g())\n", "emb": null, "idx_generation": 104, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int], n=5):\n    \"\"\"Find the sum of the first n elements in a list.\"\"\"\n    return sum(lst[:n])", "solution_func": "def g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n=5):\n    return lst", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: float, n=3):\n    \"\"\"Round a number to n decimal places.\"\"\"\n    return round(x, n)\n\ndef g(x=3.14159, n=3):\n    return x\nassert f(g())\n", "emb": null, "idx_generation": 104, "target_skills": null, "problem_func": "from typing import*\ndef f(x: float, n=3):\n    \"\"\"Round a number to n decimal places.\"\"\"\n    return round(x, n)", "solution_func": "def g(x=3.14159, n=3):\n    return x", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"Check if a given string s contains a palindrome of length n.\"\"\"\n    for i in range(len(s)-n+1):\n        substring = s[i:i+n]\n        if substring == substring[::-1]:\n            return True\n    return False\ndef g(s = \"racecar\", n = 3):\n    return s\nassert f(g(), 3)\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0], "idx_generation": 104, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"Check if a given string s contains a palindrome of length n.\"\"\"\n    for i in range(len(s)-n+1):\n        substring = s[i:i+n]\n        if substring == substring[::-1]:\n            return True\n    return False", "solution_func": "def g(s = \"racecar\", n = 3):\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 1, 0, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers contains a pair whose sum is equal to 10.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == 10:\n                return True\n    return False\ndef g(nums = [1, 2, 3, 4, 5, 6]):\n    return nums\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 104, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers contains a pair whose sum is equal to 10.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == 10:\n                return True\n    return False", "solution_func": "def g(nums = [1, 2, 3, 4, 5, 6]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if the given number n is a prime number.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\ndef g(n = 17):\n    return n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 104, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if the given number n is a prime number.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True", "solution_func": "def g(n = 17):\n    return n", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target=50) -> bool:\n    \"\"\"\n    Given a list of integers arr and a target number, find three different integers in the list\n    whose sum is equal to the target number. Return True if such a triplet exists, False otherwise.\n    \"\"\"\n    n = len(arr)\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g(target=50):\n    return [10, 20, target - 30]\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 104, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=50) -> bool:\n    \"\"\"\n    Given a list of integers arr and a target number, find three different integers in the list\n    whose sum is equal to the target number. Return True if such a triplet exists, False otherwise.\n    \"\"\"\n    n = len(arr)\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False", "solution_func": "def g(target=50):\n    return [10, 20, target - 30]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, return True if the sum of each row is equal to the sum of each column,\n    False otherwise.\n    \"\"\"\n    n = len(matrix)\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    return row_sums == col_sums\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n", "emb": null, "idx_generation": 104, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, return True if the sum of each row is equal to the sum of each column,\n    False otherwise.\n    \"\"\"\n    n = len(matrix)\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    return row_sums == col_sums", "solution_func": "def g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(num1: int, num2: int) -> bool:\n    \"\"\"\n    Given two integers num1 and num2, return True if their sum is divisible by 3, False otherwise.\n    \"\"\"\n    return (num1 + num2) % 3 == 0\n\ndef g():\n    return 2, 4\n\nassert f(*g())\n", "emb": [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 104, "target_skills": null, "problem_func": "from typing import*\ndef f(num1: int, num2: int) -> bool:\n    \"\"\"\n    Given two integers num1 and num2, return True if their sum is divisible by 3, False otherwise.\n    \"\"\"\n    return (num1 + num2) % 3 == 0", "solution_func": "def g():\n    return 2, 4", "map_ix": [1, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n=5, target=\"hello\") -> bool:\n    \"\"\"Check if a string contains a target substring\"\"\"\n    return target in s and len(s) == n\ndef g(n=5, target=\"hello\"):\n    return target * n\nassert f(g())\n", "emb": null, "idx_generation": 104, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=5, target=\"hello\") -> bool:\n    \"\"\"Check if a string contains a target substring\"\"\"\n    return target in s and len(s) == n", "solution_func": "def g(n=5, target=\"hello\"):\n    return target * n", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a subset of numbers that add up to the target\"\"\"\n    def subset_sum(numbers, target, partial=[]):\n        s = sum(partial)\n\n        # check if the partial sum is equal to target\n        if s == target:\n            return True\n\n        # if the partial sum is greater than the target, no need to continue\n        if s > target:\n            return False\n\n        # iterate through the remaining numbers\n        for i in range(len(numbers)):\n            n = numbers[i]\n            remaining = numbers[i+1:]\n            if subset_sum(remaining, target, partial + [n]):\n                return True\n        \n        return False\n\n    return subset_sum(nums, target)\ndef g(target=100):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 105, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a subset of numbers that add up to the target\"\"\"\n    def subset_sum(numbers, target, partial=[]):\n        s = sum(partial)\n\n        # check if the partial sum is equal to target\n        if s == target:\n            return True\n\n        # if the partial sum is greater than the target, no need to continue\n        if s > target:\n            return False\n\n        # iterate through the remaining numbers\n        for i in range(len(numbers)):\n            n = numbers[i]\n            remaining = numbers[i+1:]\n            if subset_sum(remaining, target, partial + [n]):\n                return True\n        \n        return False\n\n    return subset_sum(nums, target)", "solution_func": "def g(target=100):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "import math\nfrom typing import*\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"Find a mathematical expression using the numbers that evaluates to the target value\"\"\"\n    def evaluate(expression):\n        try:\n            return eval(expression)\n        except:\n            return None\n\n    def find_expression(nums, target, expression=\"\"):\n        if len(nums) == 1:\n            if evaluate(expression + str(nums[0])) == target:\n                return True\n            else:\n                return False\n\n        for i in range(len(nums)):\n            remaining = nums[:i] + nums[i+1:]\n            \n            if find_expression(remaining, target, expression + str(nums[i]) + \" + \"):\n                return True\n            if find_expression(remaining, target, expression + str(nums[i]) + \" - \"):\n                return True\n            if find_expression(remaining, target, expression + str(nums[i]) + \" * \"):\n                return True\n            if find_expression(remaining, target, expression + str(nums[i]) + \" / \"):\n                return True\n            \n        return False\n\n    return find_expression(nums, target)\ndef g(target=24):\n    nums = [1, 2, 3, 4, 5, 6]\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 105, "target_skills": null, "problem_func": "import math\nfrom typing import*\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"Find a mathematical expression using the numbers that evaluates to the target value\"\"\"\n    def evaluate(expression):\n        try:\n            return eval(expression)\n        except:\n            return None\n\n    def find_expression(nums, target, expression=\"\"):\n        if len(nums) == 1:\n            if evaluate(expression + str(nums[0])) == target:\n                return True\n            else:\n                return False\n\n        for i in range(len(nums)):\n            remaining = nums[:i] + nums[i+1:]\n            \n            if find_expression(remaining, target, expression + str(nums[i]) + \" + \"):\n                return True\n            if find_expression(remaining, target, expression + str(nums[i]) + \" - \"):\n                return True\n            if find_expression(remaining, target, expression + str(nums[i]) + \" * \"):\n                return True\n            if find_expression(remaining, target, expression + str(nums[i]) + \" / \"):\n                return True\n            \n        return False\n\n    return find_expression(nums, target)", "solution_func": "def g(target=24):\n    nums = [1, 2, 3, 4, 5, 6]\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers that multiply to the target\"\"\"\n    def find_combination(nums, target, combination=[]):\n        product = 1\n        for num in combination:\n            product *= num\n\n        if product == target:\n            return True\n\n        if product > target:\n            return False\n\n        for i in range(len(nums)):\n            remaining = nums[i+1:]\n            if find_combination(remaining, target, combination + [nums[i]]):\n                return True\n\n        return False\n\n    return find_combination(nums, target)\ndef g(target=100):\n    nums = [2, 3, 5, 10]\n    return nums\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 105, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers that multiply to the target\"\"\"\n    def find_combination(nums, target, combination=[]):\n        product = 1\n        for num in combination:\n            product *= num\n\n        if product == target:\n            return True\n\n        if product > target:\n            return False\n\n        for i in range(len(nums)):\n            remaining = nums[i+1:]\n            if find_combination(remaining, target, combination + [nums[i]]):\n                return True\n\n        return False\n\n    return find_combination(nums, target)", "solution_func": "def g(target=100):\n    nums = [2, 3, 5, 10]\n    return nums", "map_ix": [0, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray) -> bool:\n    \"\"\"\n    Check if the input array is a magic square. A magic square is a square matrix in which the sum of each\n    row, each column, and both diagonals is the same.\n    \"\"\"\n    n = arr.shape[0]\n    target_sum = n * (n**2 + 1) // 2\n\n    # Check rows\n    row_sums = np.sum(arr, axis=1)\n    if not np.all(row_sums == target_sum):\n        return False\n\n    # Check columns\n    col_sums = np.sum(arr, axis=0)\n    if not np.all(col_sums == target_sum):\n        return False\n\n    # Check diagonal\n    diagonal_sum = np.trace(arr)\n    if diagonal_sum != target_sum:\n        return False\n\n    # Check anti-diagonal\n    anti_diagonal_sum = np.trace(np.fliplr(arr))\n    if anti_diagonal_sum != target_sum:\n        return False\n\n    return True\n\ndef g(n=3):\n    arr = np.zeros((n, n))\n    arr[:n//2, :n//2] = 1\n    arr[n//2:, n//2:] = 2\n    return arr\n\nassert f(g())\n", "emb": null, "idx_generation": 105, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray) -> bool:\n    \"\"\"\n    Check if the input array is a magic square. A magic square is a square matrix in which the sum of each\n    row, each column, and both diagonals is the same.\n    \"\"\"\n    n = arr.shape[0]\n    target_sum = n * (n**2 + 1) // 2\n\n    # Check rows\n    row_sums = np.sum(arr, axis=1)\n    if not np.all(row_sums == target_sum):\n        return False\n\n    # Check columns\n    col_sums = np.sum(arr, axis=0)\n    if not np.all(col_sums == target_sum):\n        return False\n\n    # Check diagonal\n    diagonal_sum = np.trace(arr)\n    if diagonal_sum != target_sum:\n        return False\n\n    # Check anti-diagonal\n    anti_diagonal_sum = np.trace(np.fliplr(arr))\n    if anti_diagonal_sum != target_sum:\n        return False\n\n    return True", "solution_func": "def g(n=3):\n    arr = np.zeros((n, n))\n    arr[:n//2, :n//2] = 1\n    arr[n//2:, n//2:] = 2\n    return arr", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport pandas as pd\n\ndef f(df: pd.DataFrame, col_name: str, threshold: float) -> bool:\n    \"\"\"\n    Check if the mean value of a specific column in a dataframe is above a certain threshold.\n    \"\"\"\n    col_mean = df[col_name].mean()\n    return col_mean > threshold\n\ndef g(col_name='column', threshold=10.0):\n    df = pd.DataFrame({col_name: [1, 2, 3, 4, 5]})\n    return df\n\nassert f(g())\n", "emb": null, "idx_generation": 105, "target_skills": null, "problem_func": "from typing import*\nimport pandas as pd\n\ndef f(df: pd.DataFrame, col_name: str, threshold: float) -> bool:\n    \"\"\"\n    Check if the mean value of a specific column in a dataframe is above a certain threshold.\n    \"\"\"\n    col_mean = df[col_name].mean()\n    return col_mean > threshold", "solution_func": "def g(col_name='column', threshold=10.0):\n    df = pd.DataFrame({col_name: [1, 2, 3, 4, 5]})\n    return df", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\nfrom itertools import combinations\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Find if there exist two elements in the input list that sum up to the target value.\n    \"\"\"\n    for pair in combinations(nums, 2):\n        if sum(pair) == target:\n            return True\n    return False\n\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5]\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 105, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\nfrom itertools import combinations\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Find if there exist two elements in the input list that sum up to the target value.\n    \"\"\"\n    for pair in combinations(nums, 2):\n        if sum(pair) == target:\n            return True\n    return False", "solution_func": "def g(target=10):\n    nums = [1, 2, 3, 4, 5]\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int, n: int = 0) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the given list whose sum is equal to the target\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))) and len(nums) == n\ndef g(nums: List[int], target: int, n: int = 0):\n    return nums\nassert f(g([2, 4, 6, 8], 10, 4), target=10)\n", "emb": null, "idx_generation": 105, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int, n: int = 0) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the given list whose sum is equal to the target\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))) and len(nums) == n", "solution_func": "def g(nums: List[int], target: int, n: int = 0):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, target: int = 0, count: int = 0) -> bool:\n    \"\"\"Count the number of occurrences of a given character in a string\"\"\"\n    return s.count(target) == count\ndef g(s: str, target: int = 0, count: int = 0):\n    return s\nassert f(g(\"hello\", target=\"l\", count=2))\n", "emb": null, "idx_generation": 105, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target: int = 0, count: int = 0) -> bool:\n    \"\"\"Count the number of occurrences of a given character in a string\"\"\"\n    return s.count(target) == count", "solution_func": "def g(s: str, target: int = 0, count: int = 0):\n    return s", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int, n: int = 0) -> bool:\n    \"\"\"Find the index of the first occurrence of the target number in the given list\"\"\"\n    return nums.index(target) == n\ndef g(nums: List[int], target: int, n: int = 0):\n    return nums\nassert f(g([1, 2, 3, 4, 5], 3, 2))\n", "emb": null, "idx_generation": 105, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int, n: int = 0) -> bool:\n    \"\"\"Find the index of the first occurrence of the target number in the given list\"\"\"\n    return nums.index(target) == n", "solution_func": "def g(nums: List[int], target: int, n: int = 0):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int, k: int, options=[1, 2, 3, 4, 5, 6]) -> bool:\n    \"\"\"Find a combination of k numbers from nums that sums up to the target value.\"\"\"\n    return sum(nums) == target and len(nums) >= k and all(num in options for num in nums)\ndef g(target = 10, k = 3, options = [1, 2, 3, 4, 5, 6]):\n    from itertools import combinations\n    nums = [num for num in options for _ in range(k)]\n    for c in combinations(nums, k):\n        if sum(c) == target:\n            return list(c)\nassert f(g())\n", "emb": null, "idx_generation": 105, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int, k: int, options=[1, 2, 3, 4, 5, 6]) -> bool:\n    \"\"\"Find a combination of k numbers from nums that sums up to the target value.\"\"\"\n    return sum(nums) == target and len(nums) >= k and all(num in options for num in nums)", "solution_func": "def g(target = 10, k = 3, options = [1, 2, 3, 4, 5, 6]):\n    from itertools import combinations\n    nums = [num for num in options for _ in range(k)]\n    for c in combinations(nums, k):\n        if sum(c) == target:\n            return list(c)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(x: int, y: int, z: int) -> bool:\n    \"\"\"Check if x, y, and z form a Pythagorean triple\"\"\"\n    return x ** 2 + y ** 2 == z ** 2\n\ndef g():\n    x = 3\n    y = 4\n    z = 5\n    return x, y, z\n\nassert f(*g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 106, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: int, y: int, z: int) -> bool:\n    \"\"\"Check if x, y, and z form a Pythagorean triple\"\"\"\n    return x ** 2 + y ** 2 == z ** 2", "solution_func": "def g():\n    x = 3\n    y = 4\n    z = 5\n    return x, y, z", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: str) -> bool:\n    \"\"\"Check if a string is a palindrome\"\"\"\n    return x == x[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 106, "target_skills": null, "problem_func": "from typing import*\ndef f(x: str) -> bool:\n    \"\"\"Check if a string is a palindrome\"\"\"\n    return x == x[::-1]", "solution_func": "def g():\n    return \"racecar\"", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: int, y: int) -> bool:\n    \"\"\"Check if x is a multiple of y\"\"\"\n    return x % y == 0\n\ndef g():\n    x = 15\n    y = 3\n    return x, y\n\nassert f(*g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 106, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, y: int) -> bool:\n    \"\"\"Check if x is a multiple of y\"\"\"\n    return x % y == 0", "solution_func": "def g():\n    x = 15\n    y = 3\n    return x, y", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, a=3, b=4) -> bool:\n    \"\"\"Check if a string contains a certain number of 'a' and 'b' characters\"\"\"\n    return s.count('a') == a and s.count('b') == b\ndef g(a=3, b=4):\n    return \"a\" * a + \"b\" * b\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 106, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, a=3, b=4) -> bool:\n    \"\"\"Check if a string contains a certain number of 'a' and 'b' characters\"\"\"\n    return s.count('a') == a and s.count('b') == b", "solution_func": "def g(a=3, b=4):\n    return \"a\" * a + \"b\" * b", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, lst: List[int], k=2) -> bool:\n    \"\"\"Check if there are exactly k numbers in a list that are divisible by n\"\"\"\n    return sum(1 for num in lst if num % n == 0) == k\ndef g(n=3, lst=[1, 2, 3, 4, 5, 6]):\n    return lst\nassert f(g())\n", "emb": null, "idx_generation": 106, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst: List[int], k=2) -> bool:\n    \"\"\"Check if there are exactly k numbers in a list that are divisible by n\"\"\"\n    return sum(1 for num in lst if num % n == 0) == k", "solution_func": "def g(n=3, lst=[1, 2, 3, 4, 5, 6]):\n    return lst", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, c=3) -> bool:\n    \"\"\"Check if a string contains exactly c number of unique characters\"\"\"\n    return len(set(s)) == c\ndef g(c=3):\n    import string\n    return string.ascii_lowercase[:c]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 106, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, c=3) -> bool:\n    \"\"\"Check if a string contains exactly c number of unique characters\"\"\"\n    return len(set(s)) == c", "solution_func": "def g(c=3):\n    import string\n    return string.ascii_lowercase[:c]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, m: int, arr: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a subarray of length m in the given array arr, such that the sum of its elements\n    is divisible by n.\n    \"\"\"\n    for i in range(len(arr) - m + 1):\n        if sum(arr[i:i+m]) % n == 0:\n            return True\n    return False\n\ndef g(n=3, m=4):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(n=3, m=4, arr=g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 106, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m: int, arr: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a subarray of length m in the given array arr, such that the sum of its elements\n    is divisible by n.\n    \"\"\"\n    for i in range(len(arr) - m + 1):\n        if sum(arr[i:i+m]) % n == 0:\n            return True\n    return False", "solution_func": "def g(n=3, m=4):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, k: int) -> bool:\n    \"\"\"\n    Check if it is possible to partition the string s into k non-empty substrings, such that each substring\n    contains only unique characters.\n    \"\"\"\n    if k == 1:\n        return len(set(s)) == len(s)\n    elif k > len(s):\n        return False\n    else:\n        return len(set(s)) >= k\n\ndef g(k=3):\n    return \"programming\"\n\nassert f(s=g(), k=3)\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 106, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, k: int) -> bool:\n    \"\"\"\n    Check if it is possible to partition the string s into k non-empty substrings, such that each substring\n    contains only unique characters.\n    \"\"\"\n    if k == 1:\n        return len(set(s)) == len(s)\n    elif k > len(s):\n        return False\n    else:\n        return len(set(s)) >= k", "solution_func": "def g(k=3):\n    return \"programming\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Check if it is possible to select a subarray from the given array arr, such that the sum of its elements\n    is equal to the target value.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            if sum(arr[i:j]) == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(arr=g(), target=10)\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 106, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Check if it is possible to select a subarray from the given array arr, such that the sum of its elements\n    is equal to the target value.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            if sum(arr[i:j]) == target:\n                return True\n    return False", "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3]) -> bool:\n    \"\"\"Check if n is in the list\"\"\"\n    return n in lst\ndef g(lst=[1, 2, 3]):\n    return lst[0]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 106, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst=[1, 2, 3]) -> bool:\n    \"\"\"Check if n is in the list\"\"\"\n    return n in lst", "solution_func": "def g(lst=[1, 2, 3]):\n    return lst[0]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if a number is a prime number\"\"\"\n    if n < 2:\n        return False\n    for prime in primes:\n        if n % prime == 0:\n            return False\n    return True\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    n = primes[-1] + 2\n    while not f(n, primes):\n        n += 2\n    return n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 107, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if a number is a prime number\"\"\"\n    if n < 2:\n        return False\n    for prime in primes:\n        if n % prime == 0:\n            return False\n    return True", "solution_func": "def g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    n = primes[-1] + 2\n    while not f(n, primes):\n        n += 2\n    return n", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=3, y=5) -> bool:\n    \"\"\"Check if a number is a perfect square or a perfect cube\"\"\"\n    sqrt = math.isqrt(n)\n    cbrt = round(n ** (1/3))\n    return sqrt ** 2 == n or cbrt ** 3 == n\ndef g(x=3, y=5):\n    n = max(x, y)\n    while not f(n, x, y):\n        n += 1\n    return n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 107, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, x=3, y=5) -> bool:\n    \"\"\"Check if a number is a perfect square or a perfect cube\"\"\"\n    sqrt = math.isqrt(n)\n    cbrt = round(n ** (1/3))\n    return sqrt ** 2 == n or cbrt ** 3 == n", "solution_func": "def g(x=3, y=5):\n    n = max(x, y)\n    while not f(n, x, y):\n        n += 1\n    return n", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substr='python') -> bool:\n    \"\"\"Check if a string contains a specific substring\"\"\"\n    return substr in s\ndef g(substr='python'):\n    s = \"Hello, world!\"\n    return s + substr\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 107, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substr='python') -> bool:\n    \"\"\"Check if a string contains a specific substring\"\"\"\n    return substr in s", "solution_func": "def g(substr='python'):\n    s = \"Hello, world!\"\n    return s + substr", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(num: int, target: int) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list that sum up to the target number.\"\"\"\n    return any(num[i] + num[j] == target for i in range(len(num)) for j in range(i+1, len(num)))\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g(), 15)\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 107, "target_skills": null, "problem_func": "from typing import*\ndef f(num: int, target: int) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list that sum up to the target number.\"\"\"\n    return any(num[i] + num[j] == target for i in range(len(num)) for j in range(i+1, len(num)))", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import math\nfrom typing import*\nfrom math import factorial\n\ndef f(num: int, target: int) -> bool:\n    \"\"\"Find if the number is a factorial of the target number.\"\"\"\n    return factorial(target) == num\ndef g(target: int) -> int:\n    return factorial(target)\nassert f(g(5), 120)\n", "emb": null, "idx_generation": 107, "target_skills": null, "problem_func": "import math\nfrom typing import*\nfrom math import factorial\n\ndef f(num: int, target: int) -> bool:\n    \"\"\"Find if the number is a factorial of the target number.\"\"\"\n    return factorial(target) == num", "solution_func": "def g(target: int) -> int:\n    return factorial(target)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(grades: List[int], threshold: int) -> bool:\n    \"\"\"Check if the average of the grades is above the threshold.\"\"\"\n    return sum(grades) / len(grades) > threshold\ndef g():\n    return [85, 90, 78, 92, 88, 95]\nassert f(g(), 90)\n", "emb": null, "idx_generation": 107, "target_skills": null, "problem_func": "from typing import*\ndef f(grades: List[int], threshold: int) -> bool:\n    \"\"\"Check if the average of the grades is above the threshold.\"\"\"\n    return sum(grades) / len(grades) > threshold", "solution_func": "def g():\n    return [85, 90, 78, 92, 88, 95]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [i for i in range(target)]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 107, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target=10):\n    return [i for i in range(target)]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Determine if a string contains a repeating substring of length n\"\"\"\n    for i in range(len(s)-n+1):\n        if s[i:i+n] in s[i+n:]:\n            return True\n    return False\ndef g(n=3):\n    return \"ab\" * n\nassert f(g())\n", "emb": null, "idx_generation": 107, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Determine if a string contains a repeating substring of length n\"\"\"\n    for i in range(len(s)-n+1):\n        if s[i:i+n] in s[i+n:]:\n            return True\n    return False", "solution_func": "def g(n=3):\n    return \"ab\" * n", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Determine if a string contains a palindrome of length n\"\"\"\n    for i in range(len(s)-n+1):\n        if s[i:i+n] == s[i:i+n][::-1]:\n            return True\n    return False\ndef g(n=3):\n    return \"ab\" * (n//2) + \"x\"\nassert f(g())\n", "emb": null, "idx_generation": 107, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Determine if a string contains a palindrome of length n\"\"\"\n    for i in range(len(s)-n+1):\n        if s[i:i+n] == s[i:i+n][::-1]:\n            return True\n    return False", "solution_func": "def g(n=3):\n    return \"ab\" * (n//2) + \"x\"", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target value.\"\"\"\n    return any(target - num in nums for num in nums)\ndef g(nums = [1, 2, 3, 4, 5], target = 7):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 107, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target value.\"\"\"\n    return any(target - num in nums for num in nums)", "solution_func": "def g(nums = [1, 2, 3, 4, 5], target = 7):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\ndef f(n: int, m: int) -> bool:\n    \"\"\"Find the smallest integer x such that x^2 + (x+n)^2 = m^2\"\"\"\n    return any(x for x in range(1, m+1) if math.isqrt(x**2 + (x+n)**2) == m)\ndef g(n = 2, m = 5):\n    return n, m\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 108, "target_skills": null, "problem_func": "from typing import*\nimport math\ndef f(n: int, m: int) -> bool:\n    \"\"\"Find the smallest integer x such that x^2 + (x+n)^2 = m^2\"\"\"\n    return any(x for x in range(1, m+1) if math.isqrt(x**2 + (x+n)**2) == m)", "solution_func": "def g(n = 2, m = 5):\n    return n, m", "map_ix": [0, 0, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"Determine if it is possible to rearrange the elements of lst to form a target value\"\"\"\n    random.shuffle(lst)\n    return sum(lst) == target\ndef g(target = 10):\n    return list(range(1, target+1))\nassert f(g())\n", "emb": null, "idx_generation": 108, "target_skills": null, "problem_func": "from typing import*\nimport random\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"Determine if it is possible to rearrange the elements of lst to form a target value\"\"\"\n    random.shuffle(lst)\n    return sum(lst) == target", "solution_func": "def g(target = 10):\n    return list(range(1, target+1))", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(lst1: List[int], lst2: List[int]) -> bool:\n    \"\"\"Find the common elements between lst1 and lst2\"\"\"\n    return any(x for x in lst1 if x in lst2)\ndef g():\n    return [1, 2, 3, 4, 5], [4, 5, 6, 7, 8]\nassert f(*g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 108, "target_skills": null, "problem_func": "from typing import*\ndef f(lst1: List[int], lst2: List[int]) -> bool:\n    \"\"\"Find the common elements between lst1 and lst2\"\"\"\n    return any(x for x in lst1 if x in lst2)", "solution_func": "def g():\n    return [1, 2, 3, 4, 5], [4, 5, 6, 7, 8]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, target=0) -> bool:\n    \"\"\"\n    Check if there exists a row or column in the matrix where the sum of its elements is equal to the target value.\n    \"\"\"\n    rows_sum = np.sum(matrix, axis=1)\n    cols_sum = np.sum(matrix, axis=0)\n    \n    return target in rows_sum or target in cols_sum\n\ndef g(target=0):\n    matrix = np.array([[1, 2, 3],\n                       [4, 5, 6],\n                       [7, 8, 9]])\n    return matrix\n\nassert f(g())\n", "emb": null, "idx_generation": 108, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, target=0) -> bool:\n    \"\"\"\n    Check if there exists a row or column in the matrix where the sum of its elements is equal to the target value.\n    \"\"\"\n    rows_sum = np.sum(matrix, axis=1)\n    cols_sum = np.sum(matrix, axis=0)\n    \n    return target in rows_sum or target in cols_sum", "solution_func": "def g(target=0):\n    matrix = np.array([[1, 2, 3],\n                       [4, 5, 6],\n                       [7, 8, 9]])\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list that sum up to the target value.\n    \"\"\"\n    nums_set = set(nums)\n    \n    for num in nums:\n        complement = target - num\n        if complement in nums_set:\n            return True\n    \n    return False\n\ndef g(target=0):\n    nums = [1, 2, 3, 4, 5]\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 108, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list that sum up to the target value.\n    \"\"\"\n    nums_set = set(nums)\n    \n    for num in nums:\n        complement = target - num\n        if complement in nums_set:\n            return True\n    \n    return False", "solution_func": "def g(target=0):\n    nums = [1, 2, 3, 4, 5]\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, sub='Python') -> bool:\n    \"\"\"\n    Check if a given substring is present in the string.\n    \"\"\"\n    return sub in string\n\ndef g(sub='Python'):\n    string = \"I love Python programming\"\n    return string\n\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 108, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, sub='Python') -> bool:\n    \"\"\"\n    Check if a given substring is present in the string.\n    \"\"\"\n    return sub in string", "solution_func": "def g(sub='Python'):\n    string = \"I love Python programming\"\n    return string", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, lst=['a', 'b', 'c', 'd', 'e'], k=3) -> bool:\n    \"\"\"\n    Given a list of strings and an integer k, determine if the number of strings\n    that start with a vowel is at least k.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_count = sum(1 for s in lst if s[0].lower() in vowels)\n    return vowel_count >= k\ndef g(lst=['a', 'b', 'c', 'd', 'e'], k=3):\n    return len([s for s in lst if s[0].lower() in ['a', 'e', 'i', 'o', 'u']])\nassert f(g())\n", "emb": null, "idx_generation": 108, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst=['a', 'b', 'c', 'd', 'e'], k=3) -> bool:\n    \"\"\"\n    Given a list of strings and an integer k, determine if the number of strings\n    that start with a vowel is at least k.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_count = sum(1 for s in lst if s[0].lower() in vowels)\n    return vowel_count >= k", "solution_func": "def g(lst=['a', 'b', 'c', 'd', 'e'], k=3):\n    return len([s for s in lst if s[0].lower() in ['a', 'e', 'i', 'o', 'u']])", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, return True if there exists a pair\n    of integers in the list that sum up to the target number.\n    \"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\n\ndef g(lst: List[int], target: int):\n    random.shuffle(lst)\n    return lst\n\nassert f(g([1, 2, 3, 4, 5], 6))\n", "emb": null, "idx_generation": 108, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, return True if there exists a pair\n    of integers in the list that sum up to the target number.\n    \"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False", "solution_func": "def g(lst: List[int], target: int):\n    random.shuffle(lst)\n    return lst", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(lst: List[int], target: int, count=2) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, return True if there exists at least\n    a count number of integers in the list that sum up to the target number.\n    \"\"\"\n    def find_sum(lst, target, count):\n        if count == 0:\n            return target == 0\n        if not lst or count < 0:\n            return False\n        return find_sum(lst[1:], target-lst[0], count-1) or find_sum(lst[1:], target, count)\n    return find_sum(lst, target, count)\n    \ndef g(lst: List[int], target: int, count=2):\n    return lst\n\nassert f(g([1, 2, 3, 4, 5], 6, 3))\n", "emb": null, "idx_generation": 108, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int], target: int, count=2) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, return True if there exists at least\n    a count number of integers in the list that sum up to the target number.\n    \"\"\"\n    def find_sum(lst, target, count):\n        if count == 0:\n            return target == 0\n        if not lst or count < 0:\n            return False\n        return find_sum(lst[1:], target-lst[0], count-1) or find_sum(lst[1:], target, count)\n    return find_sum(lst, target, count)", "solution_func": "def g(lst: List[int], target: int, count=2):\n    return lst", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the array that add up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return arr\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 108, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the array that add up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g(target=10):\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n: int, target='abcdefghijklmnopqrstuvwxyz', reverse=False) -> bool:\n    \"\"\"Check if the nth character of a string is equal to the target\"\"\"\n    return (s[n] == target) == reverse\ndef g(n=0, target='abcdefghijklmnopqrstuvwxyz', reverse=False):\n    return target[n] if reverse else target\nassert f(g())\n", "emb": null, "idx_generation": 109, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n: int, target='abcdefghijklmnopqrstuvwxyz', reverse=False) -> bool:\n    \"\"\"Check if the nth character of a string is equal to the target\"\"\"\n    return (s[n] == target) == reverse", "solution_func": "def g(n=0, target='abcdefghijklmnopqrstuvwxyz', reverse=False):\n    return target[n] if reverse else target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(a: int, b: int, c: int, d: int, e: int) -> bool:\n    \"\"\"Check if the sum of the square root of a, b, c, d, and e is equal to zero\"\"\"\n    return math.sqrt(a) + math.sqrt(b) + math.sqrt(c) + math.sqrt(d) + math.sqrt(e) == 0\ndef g(a=1, b=1, c=1, d=1, e=1):\n    return a**2 + b**2 + c**2 + d**2 + e**2\nassert f(g())\n", "emb": null, "idx_generation": 109, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(a: int, b: int, c: int, d: int, e: int) -> bool:\n    \"\"\"Check if the sum of the square root of a, b, c, d, and e is equal to zero\"\"\"\n    return math.sqrt(a) + math.sqrt(b) + math.sqrt(c) + math.sqrt(d) + math.sqrt(e) == 0", "solution_func": "def g(a=1, b=1, c=1, d=1, e=1):\n    return a**2 + b**2 + c**2 + d**2 + e**2", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, m: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the product of the nth and mth elements in a list is divisible by 10\"\"\"\n    return (lst[n] * lst[m]) % 10 == 0\ndef g(n=0, m=1, lst=[1, 2, 3, 4, 5]):\n    return lst[n] * lst[m]\nassert f(g())\n", "emb": null, "idx_generation": 109, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the product of the nth and mth elements in a list is divisible by 10\"\"\"\n    return (lst[n] * lst[m]) % 10 == 0", "solution_func": "def g(n=0, m=1, lst=[1, 2, 3, 4, 5]):\n    return lst[n] * lst[m]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, substr=\"python\") -> bool:\n    \"\"\"Check if a substring exists in a given string\"\"\"\n    return substr in string\ndef g(substr=\"python\"):\n    return \"I love programming in \" + substr\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 109, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, substr=\"python\") -> bool:\n    \"\"\"Check if a substring exists in a given string\"\"\"\n    return substr in string", "solution_func": "def g(substr=\"python\"):\n    return \"I love programming in \" + substr", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=123456789, b=987654321) -> bool:\n    \"\"\"Check if the sum of two numbers is equal to a given number\"\"\"\n    return a + b == n\ndef g(a=123456789, b=987654321):\n    return a + b\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 109, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=123456789, b=987654321) -> bool:\n    \"\"\"Check if the sum of two numbers is equal to a given number\"\"\"\n    return a + b == n", "solution_func": "def g(a=123456789, b=987654321):\n    return a + b", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(li: List[int], target=100) -> bool:\n    \"\"\"Check if the sum of the square roots of a list of numbers is greater than a target number\"\"\"\n    return sum(math.sqrt(x) for x in li) > target\ndef g(target=100):\n    return [i**2 for i in range(10)]\nassert f(g())\n", "emb": null, "idx_generation": 109, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(li: List[int], target=100) -> bool:\n    \"\"\"Check if the sum of the square roots of a list of numbers is greater than a target number\"\"\"\n    return sum(math.sqrt(x) for x in li) > target", "solution_func": "def g(target=100):\n    return [i**2 for i in range(10)]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(lst: List[int], target: int, start_index=0) -> bool:\n    \"\"\"Find if a target number is present in a list starting from a given index\"\"\"\n    return target in lst[start_index:]\ndef g(lst: List[int], target: int, start_index=0):\n    return lst.index(target, start_index)\nassert f(g())\n", "emb": null, "idx_generation": 109, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int], target: int, start_index=0) -> bool:\n    \"\"\"Find if a target number is present in a list starting from a given index\"\"\"\n    return target in lst[start_index:]", "solution_func": "def g(lst: List[int], target: int, start_index=0):\n    return lst.index(target, start_index)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, divisor: int = 2) -> bool:\n    \"\"\"Check if a number is divisible by a given divisor\"\"\"\n    return n % divisor == 0\ndef g(n: int, divisor: int = 2):\n    return n // divisor\nassert f(g())\n", "emb": null, "idx_generation": 109, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, divisor: int = 2) -> bool:\n    \"\"\"Check if a number is divisible by a given divisor\"\"\"\n    return n % divisor == 0", "solution_func": "def g(n: int, divisor: int = 2):\n    return n // divisor", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, char: str) -> bool:\n    \"\"\"Check if a character is present in a string\"\"\"\n    return char in s\ndef g(s: str, char: str):\n    return s.index(char)\nassert f(g())\n", "emb": null, "idx_generation": 109, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, char: str) -> bool:\n    \"\"\"Check if a character is present in a string\"\"\"\n    return char in s", "solution_func": "def g(s: str, char: str):\n    return s.index(char)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Find a pair of numbers in the list that sums up to the target\n    \"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(nums: List[int], target: int):\n    random.shuffle(nums)\n    return nums, target\nassert f(*g())\n", "emb": null, "idx_generation": 109, "target_skills": null, "problem_func": "from typing import*\nimport random\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Find a pair of numbers in the list that sums up to the target\n    \"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))", "solution_func": "def g(nums: List[int], target: int):\n    random.shuffle(nums)\n    return nums, target", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers that adds up to the target\"\"\"\n    return sum(numbers) == target\ndef g(numbers = [10, 20, 30, 40]):\n    return numbers\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 110, "target_skills": null, "problem_func": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers that adds up to the target\"\"\"\n    return sum(numbers) == target", "solution_func": "def g(numbers = [10, 20, 30, 40]):\n    return numbers", "map_ix": [1, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\ndef f(num: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if the number is prime\"\"\"\n    if num < 2:\n        return False\n    for prime in primes:\n        if num % prime == 0:\n            return False\n    for i in range(30, math.isqrt(num) + 1, 30):\n        for prime in primes:\n            if num % (i + prime) == 0 or num % (i + prime + 2) == 0:\n                return False\n    return True\ndef g(num = 37):\n    return num\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 110, "target_skills": null, "problem_func": "from typing import*\nimport math\ndef f(num: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if the number is prime\"\"\"\n    if num < 2:\n        return False\n    for prime in primes:\n        if num % prime == 0:\n            return False\n    for i in range(30, math.isqrt(num) + 1, 30):\n        for prime in primes:\n            if num % (i + prime) == 0 or num % (i + prime + 2) == 0:\n                return False\n    return True", "solution_func": "def g(num = 37):\n    return num", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers in the list that adds up to the target\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\ndef g(lst = [10, 20, 30, 40]):\n    return lst\nassert f(g())\n", "emb": null, "idx_generation": 110, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers in the list that adds up to the target\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False", "solution_func": "def g(lst = [10, 20, 30, 40]):\n    return lst", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int = 10) -> bool:\n    \"\"\"Check if there exist two numbers in the list that add up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 110, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int = 10) -> bool:\n    \"\"\"Check if there exist two numbers in the list that add up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target: int = 16) -> bool:\n    \"\"\"Check if the target number exists in the 2D matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g())\n", "emb": null, "idx_generation": 110, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target: int = 16) -> bool:\n    \"\"\"Check if the target number exists in the 2D matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int = 20) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        curr_sum = nums[i]\n        if curr_sum == target:\n            return True\n        for j in range(i + 1, len(nums)):\n            curr_sum += nums[j]\n            if curr_sum == target:\n                return True\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 110, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int = 20) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        curr_sum = nums[i]\n        if curr_sum == target:\n            return True\n        for j in range(i + 1, len(nums)):\n            curr_sum += nums[j]\n            if curr_sum == target:\n                return True\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n=2, k=3) -> bool:\n    \"\"\"\n    Given a string s, check if there exists a substring of length n that contains exactly k unique characters.\n\n    Sample Input:\n    s = \"abcaadef\"\n\n    Sample Output:\n    True\n\n    Explanation:\n    The substring \"def\" contains exactly 3 unique characters.\n    \"\"\"\n    for i in range(len(s) - n + 1):\n        substring = s[i:i+n]\n        if len(set(substring)) == k:\n            return True\n    return False\n\ndef g(n=2, k=3):\n    def find_substring(s):\n        for i in range(len(s) - n + 1):\n            substring = s[i:i+n]\n            if len(set(substring)) == k:\n                return substring\n        return \"\"\n    return find_substring\n\nassert f(g()())\n", "emb": null, "idx_generation": 110, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=2, k=3) -> bool:\n    \"\"\"\n    Given a string s, check if there exists a substring of length n that contains exactly k unique characters.\n\n    Sample Input:\n    s = \"abcaadef\"\n\n    Sample Output:\n    True\n\n    Explanation:\n    The substring \"def\" contains exactly 3 unique characters.\n    \"\"\"\n    for i in range(len(s) - n + 1):\n        substring = s[i:i+n]\n        if len(set(substring)) == k:\n            return True\n    return False", "solution_func": "def g(n=2, k=3):\n    def find_substring(s):\n        for i in range(len(s) - n + 1):\n            substring = s[i:i+n]\n            if len(set(substring)) == k:\n                return substring\n        return \"\"\n    return find_substring", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=3, y=4) -> bool:\n    \"\"\"Check if n can be expressed as a sum of x and y, where x and y are perfect squares\"\"\"\n    for i in range(int(math.sqrt(n)) + 1):\n        if math.isqrt(n - i ** 2) ** 2 + i ** 2 == n:\n            return True\n    return False\n\ndef g(x=3, y=4):\n    def find_number(n):\n        for i in range(int(math.sqrt(n)) + 1):\n            if math.isqrt(n - i ** 2) ** 2 + i ** 2 == n:\n                return n\n        return -1\n    return find_number\n\nassert f(g()())\n", "emb": null, "idx_generation": 110, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, x=3, y=4) -> bool:\n    \"\"\"Check if n can be expressed as a sum of x and y, where x and y are perfect squares\"\"\"\n    for i in range(int(math.sqrt(n)) + 1):\n        if math.isqrt(n - i ** 2) ** 2 + i ** 2 == n:\n            return True\n    return False", "solution_func": "def g(x=3, y=4):\n    def find_number(n):\n        for i in range(int(math.sqrt(n)) + 1):\n            if math.isqrt(n - i ** 2) ** 2 + i ** 2 == n:\n                return n\n        return -1\n    return find_number", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, seq=[2, 3, 5]) -> bool:\n    \"\"\"Check if n is a prime number\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g(seq=[2, 3, 5]):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return is_prime\n\nassert f(g()())", "emb": null, "idx_generation": 110, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, seq=[2, 3, 5]) -> bool:\n    \"\"\"Check if n is a prime number\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "solution_func": "def g(seq=[2, 3, 5]):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return is_prime", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\n\ndef f(a: int, b: int, c: int, d: int, e: int) -> bool:\n    \"\"\"Check if a number is divisible by the sum of its digits\"\"\"\n    num = a * b * c * d * e\n    digit_sum = sum(int(digit) for digit in str(num))\n    return num % digit_sum == 0\n\ndef g(a: int = random.randint(1, 9), b: int = random.randint(1, 9), c: int = random.randint(1, 9),\n      d: int = random.randint(1, 9), e: int = random.randint(1, 9)):\n    return a, b, c, d, e\n\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 110, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(a: int, b: int, c: int, d: int, e: int) -> bool:\n    \"\"\"Check if a number is divisible by the sum of its digits\"\"\"\n    num = a * b * c * d * e\n    digit_sum = sum(int(digit) for digit in str(num))\n    return num % digit_sum == 0", "solution_func": "def g(a: int = random.randint(1, 9), b: int = random.randint(1, 9), c: int = random.randint(1, 9),\n      d: int = random.randint(1, 9), e: int = random.randint(1, 9)):\n    return a, b, c, d, e", "map_ix": [0, 0, 0, 1, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: int, a=10, b=20, c=30) -> bool:\n    \"\"\"Check if the sum of a, b, and c is equal to x.\"\"\"\n    return a + b + c == x\ndef g(a=10, b=20, c=30):\n    return a + b + c\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 111, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, a=10, b=20, c=30) -> bool:\n    \"\"\"Check if the sum of a, b, and c is equal to x.\"\"\"\n    return a + b + c == x", "solution_func": "def g(a=10, b=20, c=30):\n    return a + b + c", "map_ix": [1, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the list contains all even numbers.\"\"\"\n    return all(num % 2 == 0 for num in arr)\ndef g():\n    return [2, 4, 6, 8, 10]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 111, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the list contains all even numbers.\"\"\"\n    return all(num % 2 == 0 for num in arr)", "solution_func": "def g():\n    return [2, 4, 6, 8, 10]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Check if the substring is present in the given string.\"\"\"\n    return substring in s\ndef g(substring='abc'):\n    return \"xyzabc123\"\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 111, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Check if the substring is present in the given string.\"\"\"\n    return substring in s", "solution_func": "def g(substring='abc'):\n    return \"xyzabc123\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: int, a=5, b=10, c=15) -> bool:\n    \"\"\"Check if the sum of three numbers equals a given value\"\"\"\n    return x[0] + x[1] + x[2] == a + b + c\n\ndef g(a=5, b=10, c=15):\n    return [a, b, c]\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 111, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, a=5, b=10, c=15) -> bool:\n    \"\"\"Check if the sum of three numbers equals a given value\"\"\"\n    return x[0] + x[1] + x[2] == a + b + c", "solution_func": "def g(a=5, b=10, c=15):\n    return [a, b, c]", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: int, a=3, b=5, c=7, d=11) -> bool:\n    \"\"\"Check if the product of four numbers equals a given value\"\"\"\n    return x[0] * x[1] * x[2] * x[3] == a * b * c * d\n\ndef g(a=3, b=5, c=7, d=11):\n    return [a, b, c, d]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 111, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, a=3, b=5, c=7, d=11) -> bool:\n    \"\"\"Check if the product of four numbers equals a given value\"\"\"\n    return x[0] * x[1] * x[2] * x[3] == a * b * c * d", "solution_func": "def g(a=3, b=5, c=7, d=11):\n    return [a, b, c, d]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: int, a=100, b=200, c=300, d=400, e=500) -> bool:\n    \"\"\"Check if the sum of five numbers equals a given value\"\"\"\n    return x[0] + x[1] + x[2] + x[3] + x[4] == a + b + c + d + e\n\ndef g(a=100, b=200, c=300, d=400, e=500):\n    return [a, b, c, d, e]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 111, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, a=100, b=200, c=300, d=400, e=500) -> bool:\n    \"\"\"Check if the sum of five numbers equals a given value\"\"\"\n    return x[0] + x[1] + x[2] + x[3] + x[4] == a + b + c + d + e", "solution_func": "def g(a=100, b=200, c=300, d=400, e=500):\n    return [a, b, c, d, e]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substrings=['abracadabra', 'hocuspocus', 'simonsays']) -> bool:\n    \"\"\"\n    Find a string that contains each string in substrings alternating, e.g., 'cdaotg' for 'cat' and 'dog'\n    \"\"\"\n    return all((sub in s[i::len(substrings)] for (i, sub) in enumerate(substrings)))\ndef g(substrings = ['abracadabra', 'hocuspocus', 'simonsays']):\n    m = max(len(s) for s in substrings)\n    return \"\".join([(s[i] if i < len(s) else \" \") for i in range(m) for s in substrings])\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 111, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substrings=['abracadabra', 'hocuspocus', 'simonsays']) -> bool:\n    \"\"\"\n    Find a string that contains each string in substrings alternating, e.g., 'cdaotg' for 'cat' and 'dog'\n    \"\"\"\n    return all((sub in s[i::len(substrings)] for (i, sub) in enumerate(substrings)))", "solution_func": "def g(substrings = ['abracadabra', 'hocuspocus', 'simonsays']):\n    m = max(len(s) for s in substrings)\n    return \"\".join([(s[i] if i < len(s) else \" \") for i in range(m) for s in substrings])", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substrings=['python', 'programming']) -> bool:\n    \"\"\"\n    Find a string that contains each string in substrings alternating, e.g., 'cdaotg' for 'cat' and 'dog'\n    \"\"\"\n    return all((sub in s[i::len(substrings)] for (i, sub) in enumerate(substrings)))\ndef g(substrings = ['python', 'programming']):\n    m = max(len(s) for s in substrings)\n    return \"\".join([(s[i] if i < len(s) else \" \") for i in range(m) for s in substrings])\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 111, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substrings=['python', 'programming']) -> bool:\n    \"\"\"\n    Find a string that contains each string in substrings alternating, e.g., 'cdaotg' for 'cat' and 'dog'\n    \"\"\"\n    return all((sub in s[i::len(substrings)] for (i, sub) in enumerate(substrings)))", "solution_func": "def g(substrings = ['python', 'programming']):\n    m = max(len(s) for s in substrings)\n    return \"\".join([(s[i] if i < len(s) else \" \") for i in range(m) for s in substrings])", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(indices: List[int], a0=987654321) -> bool:\n    \"\"\"\n    Find a repeating integer in an infinite sequence of integers, specifically the indices for which the same value\n    occurs 1000 times. The sequence is defined by a starting value a_0 and each subsequent term is:\n    a_{n+1} = the square root of a_n if the a_n is a perfect square, and a_n + 3 otherwise.\n\n    For a given a_0 (that is a multiple of 3), the goal is to find 1000 indices where the a_i's are all equal.\n\n    Sample input:\n    9\n\n    Sample output:\n    [0, 3, 6, ..., 2997]\n\n    The sequence starting with a0=9 is [9, 3, 6, 9, 3, 6, 9, ...] thus a_n at where n is a multiple of 3 are\n    all equal in this case.\n    \"\"\"\n    assert a0 >= 0 and a0 % 3 == 0, 'Hint: a_0 is a multiple of 3.'\n    s = [a0]\n    for i in range(max(indices)):\n        s.append(int(s[-1] ** 0.5) if int(s[-1] ** 0.5) ** 2 == s[-1] else s[-1] + 3)\n    return len(indices) == len(set(indices)) == 1000 and min(indices) >= 0 and (len({s[i] for i in indices}) == 1)\ndef g(a0 = 987654321):\n    n = a0\n    ans = []\n    i = 0\n    while len(ans) < 1000:\n        if n == 3:  # use the fact that 3 will repeat infinitely often\n            ans.append(i)\n        n = int(n ** 0.5) if int(n ** 0.5) ** 2 == n else n + 3\n        i += 1\n    return ans\nassert f(g())\n", "emb": [0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 111, "target_skills": null, "problem_func": "from typing import*\ndef f(indices: List[int], a0=987654321) -> bool:\n    \"\"\"\n    Find a repeating integer in an infinite sequence of integers, specifically the indices for which the same value\n    occurs 1000 times. The sequence is defined by a starting value a_0 and each subsequent term is:\n    a_{n+1} = the square root of a_n if the a_n is a perfect square, and a_n + 3 otherwise.\n\n    For a given a_0 (that is a multiple of 3), the goal is to find 1000 indices where the a_i's are all equal.\n\n    Sample input:\n    9\n\n    Sample output:\n    [0, 3, 6, ..., 2997]\n\n    The sequence starting with a0=9 is [9, 3, 6, 9, 3, 6, 9, ...] thus a_n at where n is a multiple of 3 are\n    all equal in this case.\n    \"\"\"\n    assert a0 >= 0 and a0 % 3 == 0, 'Hint: a_0 is a multiple of 3.'\n    s = [a0]\n    for i in range(max(indices)):\n        s.append(int(s[-1] ** 0.5) if int(s[-1] ** 0.5) ** 2 == s[-1] else s[-1] + 3)\n    return len(indices) == len(set(indices)) == 1000 and min(indices) >= 0 and (len({s[i] for i in indices}) == 1)", "solution_func": "def g(a0 = 987654321):\n    n = a0\n    ans = []\n    i = 0\n    while len(ans) < 1000:\n        if n == 3:  # use the fact that 3 will repeat infinitely often\n            ans.append(i)\n        n = int(n ** 0.5) if int(n ** 0.5) ** 2 == n else n + 3\n        i += 1\n    return ans", "map_ix": [0, 0, 1, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=2, b=5) -> bool:\n    \"\"\"Check if n is a perfect square divisible by a and b.\"\"\"\n    return math.isqrt(n) ** 2 == n and n % a == 0 and n % b == 0\n\ndef g(a=2, b=5):\n    return (a * b) ** 2\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 111, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, a=2, b=5) -> bool:\n    \"\"\"Check if n is a perfect square divisible by a and b.\"\"\"\n    return math.isqrt(n) ** 2 == n and n % a == 0 and n % b == 0", "solution_func": "def g(a=2, b=5):\n    return (a * b) ** 2", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(pairs: List[Tuple[int, int]], target=10) -> bool:\n    \"\"\"Find any pair of integers in the list whose sum is equal to the target.\"\"\"\n    for (a, b) in pairs:\n        if a + b == target:\n            return True\n    return False\ndef g():\n    pairs = [(1, 2), (3, 4), (5, 6), (7, 8)]\n    return pairs\nassert f(g())\n", "emb": null, "idx_generation": 112, "target_skills": null, "problem_func": "from typing import*\ndef f(pairs: List[Tuple[int, int]], target=10) -> bool:\n    \"\"\"Find any pair of integers in the list whose sum is equal to the target.\"\"\"\n    for (a, b) in pairs:\n        if a + b == target:\n            return True\n    return False", "solution_func": "def g():\n    pairs = [(1, 2), (3, 4), (5, 6), (7, 8)]\n    return pairs", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find any three numbers in the list whose sum is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g():\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 112, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find any three numbers in the list whose sum is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False", "solution_func": "def g():\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find any element in the matrix that is equal to the target.\"\"\"\n    for row in matrix:\n        for num in row:\n            if num == target:\n                return True\n    return False\ndef g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 112, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find any element in the matrix that is equal to the target.\"\"\"\n    for row in matrix:\n        for num in row:\n            if num == target:\n                return True\n    return False", "solution_func": "def g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=8) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8]):\n    return nums\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 112, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=8) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom collections import Counter\n\ndef f(s1: str, s2: str, k=3) -> bool:\n    \"\"\"Check if two strings share at least k common characters\"\"\"\n    counter1 = Counter(s1)\n    counter2 = Counter(s2)\n    common_chars = set(counter1.keys()) & set(counter2.keys())\n    return len(common_chars) >= k\n\ndef g(s1='abcdefg', s2='hijklmn'):\n    return s1, s2\n\nassert f(*g())\n", "emb": null, "idx_generation": 112, "target_skills": null, "problem_func": "from typing import*\nfrom collections import Counter\n\ndef f(s1: str, s2: str, k=3) -> bool:\n    \"\"\"Check if two strings share at least k common characters\"\"\"\n    counter1 = Counter(s1)\n    counter2 = Counter(s2)\n    common_chars = set(counter1.keys()) & set(counter2.keys())\n    return len(common_chars) >= k", "solution_func": "def g(s1='abcdefg', s2='hijklmn'):\n    return s1, s2", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=9) -> bool:\n    \"\"\"Check if the target value is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 112, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=9) -> bool:\n    \"\"\"Check if the target value is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(x: int, y: float, z: int = 5) -> bool:\n    \"\"\"Check if the sum of x, y, and z is greater than or equal to the square root of x plus the absolute value of y\"\"\"\n    return x + y + z >= math.sqrt(x) + abs(y)\n\ndef g(x: int = 3, y: float = 2.5, z: int = 5):\n    return x, y, z\n\nassert f(*g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 112, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: int, y: float, z: int = 5) -> bool:\n    \"\"\"Check if the sum of x, y, and z is greater than or equal to the square root of x plus the absolute value of y\"\"\"\n    return x + y + z >= math.sqrt(x) + abs(y)", "solution_func": "def g(x: int = 3, y: float = 2.5, z: int = 5):\n    return x, y, z", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\n\ndef f(numbers: list, target_sum: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target sum\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                return True\n    return False\n\ndef g(numbers: list = [1, 2, 3, 4, 5], target_sum: int = 5):\n    random.shuffle(numbers)\n    return numbers, target_sum\n\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 112, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(numbers: list, target_sum: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target sum\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                return True\n    return False", "solution_func": "def g(numbers: list = [1, 2, 3, 4, 5], target_sum: int = 5):\n    random.shuffle(numbers)\n    return numbers, target_sum", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport re\n\ndef f(string: str, pattern: str = r'\\d{3}-\\d{3}-\\d{4}') -> bool:\n    \"\"\"Check if the string matches a given pattern\"\"\"\n    return re.match(pattern, string) is not None\n\ndef g(string: str = '123-456-7890', pattern: str = r'\\d{3}-\\d{3}-\\d{4}'):\n    return string, pattern\n\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 112, "target_skills": null, "problem_func": "from typing import*\nimport re\n\ndef f(string: str, pattern: str = r'\\d{3}-\\d{3}-\\d{4}') -> bool:\n    \"\"\"Check if the string matches a given pattern\"\"\"\n    return re.match(pattern, string) is not None", "solution_func": "def g(string: str = '123-456-7890', pattern: str = r'\\d{3}-\\d{3}-\\d{4}'):\n    return string, pattern", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(x: List[int], n=3, target=10) -> bool:\n    \"\"\"Find if there is a subset of n numbers in the list that sums up to the target\"\"\"\n    combinations = itertools.combinations(x, n)\n    return any(sum(comb) == target for comb in combinations)\ndef g(n=3, target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 112, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(x: List[int], n=3, target=10) -> bool:\n    \"\"\"Find if there is a subset of n numbers in the list that sums up to the target\"\"\"\n    combinations = itertools.combinations(x, n)\n    return any(sum(comb) == target for comb in combinations)", "solution_func": "def g(n=3, target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [0, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], t=0, a=0, e=0, s=1) -> bool:\n    \"\"\"Check if the sum of sublist values is equal to t\"\"\"\n    return t == sum([x[i] for i in range(a, e, s)])\n    \ndef g(t = 0, a = 0, e = 0, s = 1):\n    x = [1, 2, 3, 4, 5]\n    return x\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 113, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], t=0, a=0, e=0, s=1) -> bool:\n    \"\"\"Check if the sum of sublist values is equal to t\"\"\"\n    return t == sum([x[i] for i in range(a, e, s)])", "solution_func": "def g(t = 0, a = 0, e = 0, s = 1):\n    x = [1, 2, 3, 4, 5]\n    return x", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(sides: List[int], options=[1, 2, 3, 4], n=0, max_dim=10) -> bool:\n    \"\"\"\n    Check if the product of side lengths is equal to n and if the number of sides is less than or equal to max_dim\n    \"\"\"\n    prod = 1\n    for b in sides:\n        prod *= b\n    return prod == n and len(sides) <= max_dim\n    \ndef g(options = [1, 2, 3, 4], n = 24, max_dim = 10):\n    return [2, 3, 4]\nassert f(g())\n", "emb": null, "idx_generation": 113, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(sides: List[int], options=[1, 2, 3, 4], n=0, max_dim=10) -> bool:\n    \"\"\"\n    Check if the product of side lengths is equal to n and if the number of sides is less than or equal to max_dim\n    \"\"\"\n    prod = 1\n    for b in sides:\n        prod *= b\n    return prod == n and len(sides) <= max_dim", "solution_func": "def g(options = [1, 2, 3, 4], n = 24, max_dim = 10):\n    return [2, 3, 4]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, word='python') -> bool:\n    \"\"\"Check if the first letter of s is capital\"\"\"\n    return s[0].isupper()\n\ndef g(word = 'python'):\n    return 'Python'\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 113, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, word='python') -> bool:\n    \"\"\"Check if the first letter of s is capital\"\"\"\n    return s[0].isupper()", "solution_func": "def g(word = 'python'):\n    return 'Python'", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], n: int, target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the array that sum up to the target value.\"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(arr = [1, 2, 3, 4, 5, 6], n = 6, target = 10):\n    return arr, n, target\nassert f(*g())\n", "emb": [1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 113, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], n: int, target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the array that sum up to the target value.\"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(arr = [1, 2, 3, 4, 5, 6], n = 6, target = 10):\n    return arr, n, target", "map_ix": [1, 1, 1, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Check if a target number exists in the given matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    left = 0\n    right = rows * cols - 1\n    while left <= right:\n        mid = (left + right) // 2\n        num = matrix[mid // cols][mid % cols]\n        if num == target:\n            return True\n        elif num < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False\ndef g(matrix = [[1, 3, 5], [7, 9, 11], [13, 15, 17]], target = 9):\n    return matrix, target\nassert f(*g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 113, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Check if a target number exists in the given matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    left = 0\n    right = rows * cols - 1\n    while left <= right:\n        mid = (left + right) // 2\n        num = matrix[mid // cols][mid % cols]\n        if num == target:\n            return True\n        elif num < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False", "solution_func": "def g(matrix = [[1, 3, 5], [7, 9, 11], [13, 15, 17]], target = 9):\n    return matrix, target", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subarray in the array that sums up to the target value.\"\"\"\n    n = len(arr)\n    prefix_sum = 0\n    prefix_sums = set()\n    for num in arr:\n        prefix_sum += num\n        if prefix_sum == target or prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False\ndef g(arr = [1, 2, 3, 4, 5, 6], target = 9):\n    return arr, target\nassert f(*g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 113, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subarray in the array that sums up to the target value.\"\"\"\n    n = len(arr)\n    prefix_sum = 0\n    prefix_sums = set()\n    for num in arr:\n        prefix_sum += num\n        if prefix_sum == target or prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False", "solution_func": "def g(arr = [1, 2, 3, 4, 5, 6], target = 9):\n    return arr, target", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n=2, m=3) -> bool:\n    \"\"\"Check if a string contains a substring that occurs exactly n times and has a length of m.\"\"\"\n    count = 0\n    for i in range(len(s) - m + 1):\n        if s[i:i+m] == s[i+m:i+2*m]:\n            count += 1\n    return count == n\ndef g(n=2, m=3):\n    return 'AB' * n + 'C' * m\nassert f(g())\n", "emb": null, "idx_generation": 113, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=2, m=3) -> bool:\n    \"\"\"Check if a string contains a substring that occurs exactly n times and has a length of m.\"\"\"\n    count = 0\n    for i in range(len(s) - m + 1):\n        if s[i:i+m] == s[i+m:i+2*m]:\n            count += 1\n    return count == n", "solution_func": "def g(n=2, m=3):\n    return 'AB' * n + 'C' * m", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of integers in the list that sum up to a target value.\"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 113, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of integers in the list that sum up to a target value.\"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, s='hello') -> bool:\n    \"\"\"Check if the given string can be formed by repeating a substring n times.\"\"\"\n    return s in (s * n)\ndef g(s='hello'):\n    return len(s)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 113, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, s='hello') -> bool:\n    \"\"\"Check if the given string can be formed by repeating a substring n times.\"\"\"\n    return s in (s * n)", "solution_func": "def g(s='hello'):\n    return len(s)", "map_ix": [0, 0, 0, 1, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Determine if there are three numbers in the given list that add up to the target value.\n\n    Example:\n    nums = [2, 4, 6, 8, 10]\n    target = 18\n    output: True\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(nums=[2, 4, 6, 8, 10], target=10):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 113, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Determine if there are three numbers in the given list that add up to the target value.\n\n    Example:\n    nums = [2, 4, 6, 8, 10]\n    target = 18\n    output: True\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False", "solution_func": "def g(nums=[2, 4, 6, 8, 10], target=10):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target: str = \"aeiou\") -> bool:\n    \"\"\"Check if a string contains all vowels\"\"\"\n    return all(char in s for char in target)\ndef g(target: str = \"aeiou\"):\n    vowels = \"aeiou\"\n    return vowels + target\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 114, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target: str = \"aeiou\") -> bool:\n    \"\"\"Check if a string contains all vowels\"\"\"\n    return all(char in s for char in target)", "solution_func": "def g(target: str = \"aeiou\"):\n    vowels = \"aeiou\"\n    return vowels + target", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, target: int = 0) -> bool:\n    \"\"\"Check if n is a prime number\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef g(target: int = 0):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    return primes[target]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 114, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, target: int = 0) -> bool:\n    \"\"\"Check if n is a prime number\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "solution_func": "def g(target: int = 0):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    return primes[target]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a list that add up to the target\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target: int = 0):\n    nums = [1, 2, 3, 4, 5, 6, 7]\n    return nums, target\nassert f(*g())\n", "emb": null, "idx_generation": 114, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a list that add up to the target\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(target: int = 0):\n    nums = [1, 2, 3, 4, 5, 6, 7]\n    return nums, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in a list that sum up to a target number.\"\"\"\n    num_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False\ndef g(nums: List[int], target: int):\n    return nums, target\nassert f(g())\n", "emb": null, "idx_generation": 114, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in a list that sum up to a target number.\"\"\"\n    num_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(nums: List[int], target: int):\n    return nums, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a square matrix is symmetric along the main diagonal.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\ndef g(matrix: List[List[int]]):\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 114, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a square matrix is symmetric along the main diagonal.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "solution_func": "def g(matrix: List[List[int]]):\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"Check if there are k consecutive numbers in a list.\"\"\"\n    nums.sort()\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] - nums[i-1] == 1:\n            count += 1\n            if count == k:\n                return True\n        else:\n            count = 1\n    return False\ndef g(nums: List[int], k: int):\n    return nums, k\nassert f(g())\n", "emb": null, "idx_generation": 114, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"Check if there are k consecutive numbers in a list.\"\"\"\n    nums.sort()\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] - nums[i-1] == 1:\n            count += 1\n            if count == k:\n                return True\n        else:\n            count = 1\n    return False", "solution_func": "def g(nums: List[int], k: int):\n    return nums, k", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"\n    Find two numbers in the list that sum up to the target value.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(target=10):\n    arr = [1, 2, 3, 4, 5]\n    return arr\nassert f(g())\n", "emb": null, "idx_generation": 114, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"\n    Find two numbers in the list that sum up to the target value.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g(target=10):\n    arr = [1, 2, 3, 4, 5]\n    return arr", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"\n    Check if the sum of any row or column in the matrix is equal to the target value.\n    \"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    for col in zip(*matrix):\n        if sum(col) == target:\n            return True\n    return False\ndef g(target=20):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 114, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"\n    Check if the sum of any row or column in the matrix is equal to the target value.\n    \"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    for col in zip(*matrix):\n        if sum(col) == target:\n            return True\n    return False", "solution_func": "def g(target=20):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, sub='abc') -> bool:\n    \"\"\"\n    Check if the given string has the sub string in it.\n    \"\"\"\n    return sub in string\ndef g(sub='abc'):\n    string = \"abcdefg\"\n    return string\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 114, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, sub='abc') -> bool:\n    \"\"\"\n    Check if the given string has the sub string in it.\n    \"\"\"\n    return sub in string", "solution_func": "def g(sub='abc'):\n    string = \"abcdefg\"\n    return string", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Find a pair of integers from a list of lists that sum up to the target.\n\n    Example:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    target = 10\n\n    Output: True\n\n    Explanation: The pair (1, 9) from the first and third list sum up to the target.\n    \"\"\"\n    for lst in arr:\n        for i in range(len(lst)):\n            for j in range(i+1, len(lst)):\n                if lst[i] + lst[j] == target:\n                    return True\n    return False\n\ndef g(arr=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=0):\n    for lst in arr:\n        for i in range(len(lst)):\n            for j in range(i+1, len(lst)):\n                if lst[i] + lst[j] == target:\n                    return True\n    return False\n\nassert f(g())\n", "emb": null, "idx_generation": 114, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Find a pair of integers from a list of lists that sum up to the target.\n\n    Example:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    target = 10\n\n    Output: True\n\n    Explanation: The pair (1, 9) from the first and third list sum up to the target.\n    \"\"\"\n    for lst in arr:\n        for i in range(len(lst)):\n            for j in range(i+1, len(lst)):\n                if lst[i] + lst[j] == target:\n                    return True\n    return False", "solution_func": "def g(arr=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=0):\n    for lst in arr:\n        for i in range(len(lst)):\n            for j in range(i+1, len(lst)):\n                if lst[i] + lst[j] == target:\n                    return True\n    return False", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=3, m=2) -> bool:\n    \"\"\"Check if there exists a substring of length n that occurs at least m times in the given string.\"\"\"\n    count = {}\n    for i in range(len(s) - n + 1):\n        substring = s[i:i+n]\n        if substring in count:\n            count[substring] += 1\n        else:\n            count[substring] = 1\n    return any(count[substring] >= m for substring in count)\ndef g(n=3, m=2):\n    s = \"ababaababa\"\n    return s\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 115, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=3, m=2) -> bool:\n    \"\"\"Check if there exists a substring of length n that occurs at least m times in the given string.\"\"\"\n    count = {}\n    for i in range(len(s) - n + 1):\n        substring = s[i:i+n]\n        if substring in count:\n            count[substring] += 1\n        else:\n            count[substring] = 1\n    return any(count[substring] >= m for substring in count)", "solution_func": "def g(n=3, m=2):\n    s = \"ababaababa\"\n    return s", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that sums up to the target number.\"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\ndef g(target=10):\n    nums = [1, 4, 6, 8, 9, 3, 2]\n    return nums\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 115, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that sums up to the target number.\"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(target=10):\n    nums = [1, 4, 6, 8, 9, 3, 2]\n    return nums", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=100) -> bool:\n    \"\"\"Check if there exists a submatrix in the given matrix where the sum of all elements is equal to the target number.\"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    for i in range(m):\n        for j in range(n):\n            for p in range(i, m):\n                for q in range(j, n):\n                    submatrix_sum = sum(matrix[x][y] for x in range(i, p+1) for y in range(j, q+1))\n                    if submatrix_sum == target:\n                        return True\n    return False\ndef g(target=100):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 115, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=100) -> bool:\n    \"\"\"Check if there exists a submatrix in the given matrix where the sum of all elements is equal to the target number.\"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    for i in range(m):\n        for j in range(n):\n            for p in range(i, m):\n                for q in range(j, n):\n                    submatrix_sum = sum(matrix[x][y] for x in range(i, p+1) for y in range(j, q+1))\n                    if submatrix_sum == target:\n                        return True\n    return False", "solution_func": "def g(target=100):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, nums=[22, 44, 66], upper_bound=100) -> bool:\n    \"\"\"Check if any number in the list is a multiple of n and less than or equal to the upper bound\"\"\"\n    return any((i % n == 0 and i <= upper_bound for i in nums))\ndef g(nums=[22, 44, 66], upper_bound=100):\n    for i in nums:\n        if i % n == 0 and i <= upper_bound:\n            return True\n    return False\nassert f(g())\n", "emb": null, "idx_generation": 115, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[22, 44, 66], upper_bound=100) -> bool:\n    \"\"\"Check if any number in the list is a multiple of n and less than or equal to the upper bound\"\"\"\n    return any((i % n == 0 and i <= upper_bound for i in nums))", "solution_func": "def g(nums=[22, 44, 66], upper_bound=100):\n    for i in nums:\n        if i % n == 0 and i <= upper_bound:\n            return True\n    return False", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, char='a', count=2) -> bool:\n    \"\"\"Check if the character 'char' appears at least 'count' times in the string 's'\"\"\"\n    return s.count(char) >= count\ndef g(char='a', count=2):\n    return (char * count) in s\nassert f(g())\n", "emb": null, "idx_generation": 115, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, char='a', count=2) -> bool:\n    \"\"\"Check if the character 'char' appears at least 'count' times in the string 's'\"\"\"\n    return s.count(char) >= count", "solution_func": "def g(char='a', count=2):\n    return (char * count) in s", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target number\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(target=100):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\nassert f(g())\n", "emb": null, "idx_generation": 115, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target number\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))", "solution_func": "def g(target=100):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: float, a=7.5, b=-3.2) -> bool:\n    \"\"\"Check if a number is within a specific range\"\"\"\n    return a <= x <= b\ndef g(a = 7.5, b = -3.2):\n    return (a + b) / 2\nassert f(g())\n", "emb": null, "idx_generation": 115, "target_skills": null, "problem_func": "from typing import*\ndef f(x: float, a=7.5, b=-3.2) -> bool:\n    \"\"\"Check if a number is within a specific range\"\"\"\n    return a <= x <= b", "solution_func": "def g(a = 7.5, b = -3.2):\n    return (a + b) / 2", "map_ix": null}, {"fitness": -Infinity, "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(x: float, a=16, b=4) -> bool:\n    \"\"\"Check if a number is a perfect square within a specific range\"\"\"\n    return a <= x <= b and sqrt(x).is_integer()\ndef g(a = 16, b = 4):\n    return b * b\nassert f(g())\n", "emb": null, "idx_generation": 115, "target_skills": null, "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(x: float, a=16, b=4) -> bool:\n    \"\"\"Check if a number is a perfect square within a specific range\"\"\"\n    return a <= x <= b and sqrt(x).is_integer()", "solution_func": "def g(a = 16, b = 4):\n    return b * b", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, a='hello', b='world') -> bool:\n    \"\"\"Check if a string contains both a and b\"\"\"\n    return a in s and b in s\ndef g(a = 'hello', b = 'world'):\n    return a + ' ' + b\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 115, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, a='hello', b='world') -> bool:\n    \"\"\"Check if a string contains both a and b\"\"\"\n    return a in s and b in s", "solution_func": "def g(a = 'hello', b = 'world'):\n    return a + ' ' + b", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, pattern='abcde') -> bool:\n    \"\"\"\n    Given an input string s and a pattern string, check if s matches the pattern.\n    In the pattern string, each character represents a unique character in s.\n    The pattern string can contain only lowercase letters.\n\n    Sample Input:\n    s = \"hello\"\n    pattern = \"abcde\"\n\n    Sample Output:\n    True\n    \"\"\"\n    mapping = {}\n    for i, c in enumerate(s):\n        if pattern[i] not in mapping:\n            mapping[pattern[i]] = c\n        else:\n            if mapping[pattern[i]] != c:\n                return False\n    return True\n\ndef g(s='hello', pattern='abcde'):\n    return \"\".join(pattern[i] for i in range(len(s)))\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 115, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, pattern='abcde') -> bool:\n    \"\"\"\n    Given an input string s and a pattern string, check if s matches the pattern.\n    In the pattern string, each character represents a unique character in s.\n    The pattern string can contain only lowercase letters.\n\n    Sample Input:\n    s = \"hello\"\n    pattern = \"abcde\"\n\n    Sample Output:\n    True\n    \"\"\"\n    mapping = {}\n    for i, c in enumerate(s):\n        if pattern[i] not in mapping:\n            mapping[pattern[i]] = c\n        else:\n            if mapping[pattern[i]] != c:\n                return False\n    return True", "solution_func": "def g(s='hello', pattern='abcde'):\n    return \"\".join(pattern[i] for i in range(len(s)))", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there exists two numbers in the array that add up to the target\"\"\"\n    return any((arr[i] + arr[j] == target for i in range(len(arr)) for j in range(i+1, len(arr))))\ndef g(arr: List[int], target: int):\n    return arr, target\nassert f(g([1, 2, 3, 4, 5], 9))\n", "emb": null, "idx_generation": 116, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there exists two numbers in the array that add up to the target\"\"\"\n    return any((arr[i] + arr[j] == target for i in range(len(arr)) for j in range(i+1, len(arr))))", "solution_func": "def g(arr: List[int], target: int):\n    return arr, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, substr: str) -> bool:\n    \"\"\"Check if a substring exists in the given string\"\"\"\n    return substr in s\ndef g(s: str, substr: str):\n    return s, substr\nassert f(g(\"Hello, world!\", \"world\"))\n", "emb": null, "idx_generation": 116, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substr: str) -> bool:\n    \"\"\"Check if a substring exists in the given string\"\"\"\n    return substr in s", "solution_func": "def g(s: str, substr: str):\n    return s, substr", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray) -> bool:\n    \"\"\"Check if the given matrix is symmetric\"\"\"\n    return np.array_equal(matrix, matrix.T)\ndef g(matrix: np.ndarray):\n    return matrix\nassert f(g(np.array([[1, 2, 3], [2, 4, 5], [3, 5, 6]])))\n", "emb": [1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 116, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray) -> bool:\n    \"\"\"Check if the given matrix is symmetric\"\"\"\n    return np.array_equal(matrix, matrix.T)", "solution_func": "def g(matrix: np.ndarray):\n    return matrix", "map_ix": [1, 0, 1, 0, 0, 0, 1, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, flag=True, target_len=10) -> bool:\n    \"\"\"Check if a string is a palindrome, ignoring spaces and case sensitivity\"\"\"\n    s = \"\".join(s.split()).lower()\n    if flag:\n        return s == s[::-1] and len(s) == target_len\n    else:\n        return s == s[::-1]\ndef g(s = \"A man a plan a canal Panama\", flag = True, target_len = 10):\n    return s\nassert f(g())\n", "emb": null, "idx_generation": 116, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, flag=True, target_len=10) -> bool:\n    \"\"\"Check if a string is a palindrome, ignoring spaces and case sensitivity\"\"\"\n    s = \"\".join(s.split()).lower()\n    if flag:\n        return s == s[::-1] and len(s) == target_len\n    else:\n        return s == s[::-1]", "solution_func": "def g(s = \"A man a plan a canal Panama\", flag = True, target_len = 10):\n    return s", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(r: float, vol=1000) -> bool:\n    \"\"\"Check if a given radius of a sphere produces the desired volume\"\"\"\n    return math.isclose((4/3) * math.pi * r**3, vol)\ndef g(vol = 1000):\n    return (3 * vol / (4 * math.pi)) ** (1/3)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 116, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(r: float, vol=1000) -> bool:\n    \"\"\"Check if a given radius of a sphere produces the desired volume\"\"\"\n    return math.isclose((4/3) * math.pi * r**3, vol)", "solution_func": "def g(vol = 1000):\n    return (3 * vol / (4 * math.pi)) ** (1/3)", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(lst: List[int], target_sum=10) -> bool:\n    \"\"\"Check if any two numbers in a list sum up to a target value\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target_sum:\n                return True\n    return False\ndef g(target_sum = 10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 116, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int], target_sum=10) -> bool:\n    \"\"\"Check if any two numbers in a list sum up to a target value\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target_sum:\n                return True\n    return False", "solution_func": "def g(target_sum = 10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5], target=20) -> bool:\n    \"\"\"\n    Given a list of numbers and a target value, find a combination of the numbers that add up to the target value.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    if target == 0:\n        return True\n    if n < 0 or target < 0:\n        return False\n    return f(n-1, nums, target-nums[n]) or f(n-1, nums, target)\ndef g(nums=[1, 2, 3, 4, 5], target=20):\n    return f(len(nums)-1, nums, target)\nassert f(g())\n", "emb": null, "idx_generation": 116, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5], target=20) -> bool:\n    \"\"\"\n    Given a list of numbers and a target value, find a combination of the numbers that add up to the target value.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    if target == 0:\n        return True\n    if n < 0 or target < 0:\n        return False\n    return f(n-1, nums, target-nums[n]) or f(n-1, nums, target)", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=20):\n    return f(len(nums)-1, nums, target)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], n=2) -> bool:\n    \"\"\"\n    Given a list of numbers, find if there are n consecutive numbers in the list whose sum is equal to zero.\n\n    Sample Input:\n    arr = [2, -3, 1, -2, 4, -1]\n    n = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(arr)-n+1):\n        if sum(arr[i:i+n]) == 0:\n            return True\n    return False\ndef g(arr=[2, -3, 1, -2, 4, -1], n=2):\n    return f(arr, n)\nassert f(g())\n", "emb": null, "idx_generation": 116, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], n=2) -> bool:\n    \"\"\"\n    Given a list of numbers, find if there are n consecutive numbers in the list whose sum is equal to zero.\n\n    Sample Input:\n    arr = [2, -3, 1, -2, 4, -1]\n    n = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(arr)-n+1):\n        if sum(arr[i:i+n]) == 0:\n            return True\n    return False", "solution_func": "def g(arr=[2, -3, 1, -2, 4, -1], n=2):\n    return f(arr, n)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(st: str, n=2) -> bool:\n    \"\"\"\n    Given a string, check if there are n consecutive digits in the string whose sum is divisible by 3.\n\n    Sample Input:\n    st = \"123456789\"\n    n = 4\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(st)-n+1):\n        digits = list(map(int, st[i:i+n]))\n        if sum(digits) % 3 == 0:\n            return True\n    return False\ndef g(st=\"123456789\", n=2):\n    return f(st, n)\nassert f(g())\n", "emb": null, "idx_generation": 116, "target_skills": null, "problem_func": "from typing import*\ndef f(st: str, n=2) -> bool:\n    \"\"\"\n    Given a string, check if there are n consecutive digits in the string whose sum is divisible by 3.\n\n    Sample Input:\n    st = \"123456789\"\n    n = 4\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(st)-n+1):\n        digits = list(map(int, st[i:i+n]))\n        if sum(digits) % 3 == 0:\n            return True\n    return False", "solution_func": "def g(st=\"123456789\", n=2):\n    return f(st, n)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(ans: str, target=0) -> bool:\n    \"\"\"\n    Check if the given string has the same number of vowels as the target number\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in ans:\n        if char.lower() in vowels:\n            count += 1\n    return count == target\n\ndef g(target=0):\n    return \"hello\" * target\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 116, "target_skills": null, "problem_func": "from typing import*\ndef f(ans: str, target=0) -> bool:\n    \"\"\"\n    Check if the given string has the same number of vowels as the target number\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in ans:\n        if char.lower() in vowels:\n            count += 1\n    return count == target", "solution_func": "def g(target=0):\n    return \"hello\" * target", "map_ix": [0, 0, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\ndef f(x: float, a=7987622700) -> bool:\n    \"\"\"Check if the square root of x is equal to a.\"\"\"\n    return math.isclose(math.sqrt(x), a)\ndef g(a = 7987622700):\n    return a\nassert f(g())\n", "emb": null, "idx_generation": 117, "target_skills": null, "problem_func": "from typing import*\nimport math\ndef f(x: float, a=7987622700) -> bool:\n    \"\"\"Check if the square root of x is equal to a.\"\"\"\n    return math.isclose(math.sqrt(x), a)", "solution_func": "def g(a = 7987622700):\n    return a", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substring=\"abc\", count=5) -> bool:\n    \"\"\"Check if the substring appears count times in the given string.\"\"\"\n    return s.count(substring) == count\ndef g(substring=\"abc\", count=5):\n    return substring * count\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 117, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substring=\"abc\", count=5) -> bool:\n    \"\"\"Check if the substring appears count times in the given string.\"\"\"\n    return s.count(substring) == count", "solution_func": "def g(substring=\"abc\", count=5):\n    return substring * count", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: list, target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums=[10, 20, 30, 40, 50]):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 117, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: list, target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums=[10, 20, 30, 40, 50]):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, k: int) -> bool:\n    \"\"\"\n    Given a numpy array 'arr' and an integer 'k', determine if there exists a subarray of length 'k' such that the sum of its elements is equal to 0.\n    \"\"\"\n    for i in range(len(arr)-k+1):\n        subarray = arr[i:i+k]\n        if np.sum(subarray) == 0:\n            return True\n    return False\n\ndef g(arr: np.ndarray, k: int):\n    return arr\n\narr = np.array([1, 2, -3, 4, 5])\nk = 3\n\nassert f(g(arr, k), k)\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 117, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, k: int) -> bool:\n    \"\"\"\n    Given a numpy array 'arr' and an integer 'k', determine if there exists a subarray of length 'k' such that the sum of its elements is equal to 0.\n    \"\"\"\n    for i in range(len(arr)-k+1):\n        subarray = arr[i:i+k]\n        if np.sum(subarray) == 0:\n            return True\n    return False", "solution_func": "def g(arr: np.ndarray, k: int):\n    return arr\n\narr = np.array([1, 2, -3, 4, 5])\nk = 3", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers 'numbers' and a target integer 'target', determine if there exists a pair of numbers in the list whose sum is equal to the target.\n    \"\"\"\n    num_set = set(numbers)\n    for num in numbers:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False\n\ndef g(numbers: List[int], target: int):\n    return numbers, target\n\nnumbers = [1, 2, 3, 4, 5]\ntarget = 7\n\nassert f(*g(numbers, target))\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 117, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers 'numbers' and a target integer 'target', determine if there exists a pair of numbers in the list whose sum is equal to the target.\n    \"\"\"\n    num_set = set(numbers)\n    for num in numbers:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False", "solution_func": "def g(numbers: List[int], target: int):\n    return numbers, target\n\nnumbers = [1, 2, 3, 4, 5]\ntarget = 7", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers 'nums' and a target integer 'target', determine if there exists a subarray such that the sum of its elements is equal to the target.\n    \"\"\"\n    prefix_sums = {0: -1}\n    curr_sum = 0\n    for i, num in enumerate(nums):\n        curr_sum += num\n        if curr_sum - target in prefix_sums:\n            return True\n        prefix_sums[curr_sum] = i\n    return False\n\ndef g(nums: List[int], target: int):\n    return nums, target\n\nnums = [1, 2, 3, 4, 5]\ntarget = 9\n\nassert f(*g(nums, target))\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 117, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers 'nums' and a target integer 'target', determine if there exists a subarray such that the sum of its elements is equal to the target.\n    \"\"\"\n    prefix_sums = {0: -1}\n    curr_sum = 0\n    for i, num in enumerate(nums):\n        curr_sum += num\n        if curr_sum - target in prefix_sums:\n            return True\n        prefix_sums[curr_sum] = i\n    return False", "solution_func": "def g(nums: List[int], target: int):\n    return nums, target\n\nnums = [1, 2, 3, 4, 5]\ntarget = 9", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, numbers=[10, 20, 30, 40, 50]) -> bool:\n    \"\"\"\n    Check if the sum of the numbers in a list is equal to the length of the string.\n    \"\"\"\n    return sum(numbers) == len(s)\ndef g(numbers=[10, 20, 30, 40, 50]):\n    return \"a\" * sum(numbers)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 117, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, numbers=[10, 20, 30, 40, 50]) -> bool:\n    \"\"\"\n    Check if the sum of the numbers in a list is equal to the length of the string.\n    \"\"\"\n    return sum(numbers) == len(s)", "solution_func": "def g(numbers=[10, 20, 30, 40, 50]):\n    return \"a\" * sum(numbers)", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport itertools\n\ndef f(s: str, n: int, chars=['a', 'b', 'c', 'd']) -> bool:\n    \"\"\"\n    Check if it is possible to create a string with length n by repeating the characters in a list.\n    \"\"\"\n    return s == \"\".join(itertools.cycle(chars))[:n]\ndef g(n: int, chars=['a', 'b', 'c', 'd']):\n    return \"\".join(itertools.cycle(chars))[:n]\nassert f(g())\n", "emb": null, "idx_generation": 117, "target_skills": null, "problem_func": "from typing import*\nimport itertools\n\ndef f(s: str, n: int, chars=['a', 'b', 'c', 'd']) -> bool:\n    \"\"\"\n    Check if it is possible to create a string with length n by repeating the characters in a list.\n    \"\"\"\n    return s == \"\".join(itertools.cycle(chars))[:n]", "solution_func": "def g(n: int, chars=['a', 'b', 'c', 'd']):\n    return \"\".join(itertools.cycle(chars))[:n]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(s: str, n: int, k: int) -> bool:\n    \"\"\"\n    Check if the sum of the first k characters in the string is equal to n.\n    \"\"\"\n    return sum(map(int, s[:k])) == n\ndef g(n: int, k: int):\n    return \"\".join(str(random.randint(0, 9)) for _ in range(k))\nassert f(g())\n", "emb": null, "idx_generation": 117, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(s: str, n: int, k: int) -> bool:\n    \"\"\"\n    Check if the sum of the first k characters in the string is equal to n.\n    \"\"\"\n    return sum(map(int, s[:k])) == n", "solution_func": "def g(n: int, k: int):\n    return \"\".join(str(random.randint(0, 9)) for _ in range(k))", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substr=\"Python\") -> bool:\n    \"\"\"\n    Check if a given substring is present in the given string.\n    Return True if it is present, False otherwise.\n    \"\"\"\n    return substr in s\ndef g(substr=\"Python\"):\n    s = \"I love programming in Python!\"\n    return s\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 117, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substr=\"Python\") -> bool:\n    \"\"\"\n    Check if a given substring is present in the given string.\n    Return True if it is present, False otherwise.\n    \"\"\"\n    return substr in s", "solution_func": "def g(substr=\"Python\"):\n    s = \"I love programming in Python!\"\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the array that sum up to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(arr: List[int], target: int):\n    return arr\n\nassert f(g()) == True", "emb": null, "idx_generation": 118, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the array that sum up to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g(arr: List[int], target: int):\n    return arr", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(num: int, is_prime=True) -> bool:\n    \"\"\"Check if a number is prime or not\"\"\"\n    if is_prime:\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n    else:\n        return num % 2 == 0\n\ndef g(num: int, is_prime=True):\n    return num\n\nassert f(g()) == True", "emb": null, "idx_generation": 118, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(num: int, is_prime=True) -> bool:\n    \"\"\"Check if a number is prime or not\"\"\"\n    if is_prime:\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n    else:\n        return num % 2 == 0", "solution_func": "def g(num: int, is_prime=True):\n    return num", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom collections import Counter\n\ndef f(s: str, anagram='listen', include=True) -> bool:\n    \"\"\"Check if the given string is an anagram of 'listen'\"\"\"\n    s_counter = Counter(s)\n    anagram_counter = Counter(anagram)\n    if include:\n        return s_counter == anagram_counter\n    else:\n        return all(s_counter[key] <= anagram_counter[key] for key in s_counter)\n\ndef g(s: str, anagram='listen', include=True):\n    return s\n\nassert f(g()) == True", "emb": null, "idx_generation": 118, "target_skills": null, "problem_func": "from typing import*\nfrom collections import Counter\n\ndef f(s: str, anagram='listen', include=True) -> bool:\n    \"\"\"Check if the given string is an anagram of 'listen'\"\"\"\n    s_counter = Counter(s)\n    anagram_counter = Counter(anagram)\n    if include:\n        return s_counter == anagram_counter\n    else:\n        return all(s_counter[key] <= anagram_counter[key] for key in s_counter)", "solution_func": "def g(s: str, anagram='listen', include=True):\n    return s", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=98765432, b=12345678) -> bool:\n    \"\"\"Check if n is a multiple of a\"\"\"\n    return n % a == 0\ndef g(a=98765432, b=12345678):\n    return a * b\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0], "idx_generation": 118, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=98765432, b=12345678) -> bool:\n    \"\"\"Check if n is a multiple of a\"\"\"\n    return n % a == 0", "solution_func": "def g(a=98765432, b=12345678):\n    return a * b", "map_ix": [1, 1, 0, 1, 0, 1, 0, 0, 0, 1]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=3.14, b=6.28) -> bool:\n    \"\"\"Check if the square root of x is equal to a\"\"\"\n    return math.sqrt(x) == a\ndef g(a=3.14, b=6.28):\n    return a * a\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 118, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, a=3.14, b=6.28) -> bool:\n    \"\"\"Check if the square root of x is equal to a\"\"\"\n    return math.sqrt(x) == a", "solution_func": "def g(a=3.14, b=6.28):\n    return a * a", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, a='hello', b='world') -> bool:\n    \"\"\"Check if s is the concatenation of a and b\"\"\"\n    return s == a + b\ndef g(a='hello', b='world'):\n    return a + b\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 118, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, a='hello', b='world') -> bool:\n    \"\"\"Check if s is the concatenation of a and b\"\"\"\n    return s == a + b", "solution_func": "def g(a='hello', b='world'):\n    return a + b", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, target: str = 'aeiou', count: int = 2) -> bool:\n    \"\"\"Check if a given string contains a specific number of vowels.\"\"\"\n    vowel_count = sum((1 if c in target else 0) for c in s)\n    return vowel_count == count\ndef g(target: str = 'aeiou', count: int = 2):\n    return target * count\nassert f(g())\n", "emb": null, "idx_generation": 118, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target: str = 'aeiou', count: int = 2) -> bool:\n    \"\"\"Check if a given string contains a specific number of vowels.\"\"\"\n    vowel_count = sum((1 if c in target else 0) for c in s)\n    return vowel_count == count", "solution_func": "def g(target: str = 'aeiou', count: int = 2):\n    return target * count", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(numbers: List[int], target: int = 10) -> bool:\n    \"\"\"Check if any two numbers in a given list sum up to a specific target number.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\ndef g(target: int = 10):\n    return [1, 2, 3, target]\nassert f(g())\n", "emb": null, "idx_generation": 118, "target_skills": null, "problem_func": "from typing import*\ndef f(numbers: List[int], target: int = 10) -> bool:\n    \"\"\"Check if any two numbers in a given list sum up to a specific target number.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False", "solution_func": "def g(target: int = 10):\n    return [1, 2, 3, target]", "map_ix": null}, {"fitness": -Infinity, "program_str": "import math\nfrom typing import*\nfrom math import factorial\n\ndef f(n: int, target: int = 120) -> bool:\n    \"\"\"Check if the factorial of a given number equals a specific target number.\"\"\"\n    return factorial(n) == target\ndef g(target: int = 120):\n    return int(target ** 0.5)\nassert f(g())\n", "emb": null, "idx_generation": 118, "target_skills": null, "problem_func": "import math\nfrom typing import*\nfrom math import factorial\n\ndef f(n: int, target: int = 120) -> bool:\n    \"\"\"Check if the factorial of a given number equals a specific target number.\"\"\"\n    return factorial(n) == target", "solution_func": "def g(target: int = 120):\n    return int(target ** 0.5)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, target: str) -> bool:\n    \"\"\"\n    Find a substring in s that is equal to the target string.\n    \"\"\"\n    return target in s\ndef g(target: str):\n    s = \"This is a sample string\"\n    return s\nassert f(g())\n", "emb": null, "idx_generation": 118, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target: str) -> bool:\n    \"\"\"\n    Find a substring in s that is equal to the target string.\n    \"\"\"\n    return target in s", "solution_func": "def g(target: str):\n    s = \"This is a sample string\"\n    return s", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if the sum of any row, column, or diagonal in the matrix equals the target value\"\"\"\n    n = len(matrix)\n    # Check rows\n    for i in range(n):\n        if sum(matrix[i]) == target:\n            return True\n    # Check columns\n    for j in range(n):\n        if sum(matrix[i][j] for i in range(n)) == target:\n            return True\n    # Check diagonals\n    if sum(matrix[i][i] for i in range(n)) == target:\n        return True\n    if sum(matrix[i][n-i-1] for i in range(n)) == target:\n        return True\n    return False\n\ndef g(target=10):\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n    return matrix\n\nassert f(g())\n", "emb": null, "idx_generation": 119, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if the sum of any row, column, or diagonal in the matrix equals the target value\"\"\"\n    n = len(matrix)\n    # Check rows\n    for i in range(n):\n        if sum(matrix[i]) == target:\n            return True\n    # Check columns\n    for j in range(n):\n        if sum(matrix[i][j] for i in range(n)) == target:\n            return True\n    # Check diagonals\n    if sum(matrix[i][i] for i in range(n)) == target:\n        return True\n    if sum(matrix[i][n-i-1] for i in range(n)) == target:\n        return True\n    return False", "solution_func": "def g(target=10):\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(words: List[str], target=5) -> bool:\n    \"\"\"Check if the target word can be formed by concatenating any combination of words in the list\"\"\"\n    perms = permutations(words)\n    for perm in perms:\n        if ''.join(perm) == target:\n            return True\n    return False\n\ndef g(target=5):\n    words = ['a', 'b', 'c', 'd']\n    return words\n\nassert f(g())\n", "emb": null, "idx_generation": 119, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(words: List[str], target=5) -> bool:\n    \"\"\"Check if the target word can be formed by concatenating any combination of words in the list\"\"\"\n    perms = permutations(words)\n    for perm in perms:\n        if ''.join(perm) == target:\n            return True\n    return False", "solution_func": "def g(target=5):\n    words = ['a', 'b', 'c', 'd']\n    return words", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target value\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False\n\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5]\n    return nums\n\nassert f(g())\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 119, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target value\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False", "solution_func": "def g(target=10):\n    nums = [1, 2, 3, 4, 5]\n    return nums", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(l: List[int], threshold=500) -> bool:\n    \"\"\"Check if the sum of all elements in the list is greater than the threshold\"\"\"\n    return sum(l) > threshold\ndef g(threshold=500):\n    return [i for i in range(threshold)]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 119, "target_skills": null, "problem_func": "from typing import*\ndef f(l: List[int], threshold=500) -> bool:\n    \"\"\"Check if the sum of all elements in the list is greater than the threshold\"\"\"\n    return sum(l) > threshold", "solution_func": "def g(threshold=500):\n    return [i for i in range(threshold)]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, m: int, x: int, a: int = 2, b: int = 3) -> bool:\n    \"\"\"Check if n^m + x is divisible evenly by both a and b\"\"\"\n    return (n ** m + x) % a == 0 and (n ** m + x) % b == 0\ndef g(n: int, m: int, x: int, a: int = 2, b: int = 3):\n    return n, m, x\nassert f(*g())\n", "emb": null, "idx_generation": 119, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m: int, x: int, a: int = 2, b: int = 3) -> bool:\n    \"\"\"Check if n^m + x is divisible evenly by both a and b\"\"\"\n    return (n ** m + x) % a == 0 and (n ** m + x) % b == 0", "solution_func": "def g(n: int, m: int, x: int, a: int = 2, b: int = 3):\n    return n, m, x", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the list is sorted in non-decreasing order\"\"\"\n    return arr == sorted(arr)\ndef g(arr: List[int]):\n    return sorted(arr)\nassert f(g([1, 2, 3, 4, 5]))\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 119, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the list is sorted in non-decreasing order\"\"\"\n    return arr == sorted(arr)", "solution_func": "def g(arr: List[int]):\n    return sorted(arr)", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there are two elements in the list whose sum is equal to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(arr=[1, 2, 3, 4, 5], target=9):\n    return arr\nassert f(g())\n", "emb": null, "idx_generation": 119, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there are two elements in the list whose sum is equal to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g(arr=[1, 2, 3, 4, 5], target=9):\n    return arr", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target: int, n=2) -> bool:\n    \"\"\"Find a sublist of length n in the list that sums up to the target\"\"\"\n    for i in range(len(arr)-n+1):\n        if sum(arr[i:i+n]) == target:\n            return True\n    return False\ndef g(arr=[1, 2, 3, 4, 5], target=7, n=2):\n    return arr\nassert f(g())\n", "emb": null, "idx_generation": 119, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int, n=2) -> bool:\n    \"\"\"Find a sublist of length n in the list that sums up to the target\"\"\"\n    for i in range(len(arr)-n+1):\n        if sum(arr[i:i+n]) == target:\n            return True\n    return False", "solution_func": "def g(arr=[1, 2, 3, 4, 5], target=7, n=2):\n    return arr", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom collections import Counter\n\ndef f(s: str, anagram: str) -> bool:\n    \"\"\"Check if the given string contains an anagram of another string\"\"\"\n    s_counter = Counter(s)\n    anagram_counter = Counter(anagram)\n    return any(s_counter == anagram_counter for s_counter in s_counter.values())\ndef g(s=\"hello\", anagram=\"ollhe\"):\n    return s\nassert f(g())\n", "emb": null, "idx_generation": 119, "target_skills": null, "problem_func": "from typing import*\nfrom collections import Counter\n\ndef f(s: str, anagram: str) -> bool:\n    \"\"\"Check if the given string contains an anagram of another string\"\"\"\n    s_counter = Counter(s)\n    anagram_counter = Counter(anagram)\n    return any(s_counter == anagram_counter for s_counter in s_counter.values())", "solution_func": "def g(s=\"hello\", anagram=\"ollhe\"):\n    return s", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target=1) -> bool:\n    \"\"\"\n    Given a string s, determine if it is a palindrome.\n\n    Sample Input:\n    `\"racecar\"`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    return len(s) >= target and s == s[::-1]\ndef g(s = \"racecar\", target = 1):\n    return s\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 119, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target=1) -> bool:\n    \"\"\"\n    Given a string s, determine if it is a palindrome.\n\n    Sample Input:\n    `\"racecar\"`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    return len(s) >= target and s == s[::-1]", "solution_func": "def g(s = \"racecar\", target = 1):\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, l: List[int]) -> bool:\n    \"\"\"\n    Check if all numbers in the list are divisible by n.\n    \"\"\"\n    return all(num % n == 0 for num in l)\n\ndef g(l: List[int]):\n    return max(l)\n\nassert f(g())\n", "emb": null, "idx_generation": 120, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(n: int, l: List[int]) -> bool:\n    \"\"\"\n    Check if all numbers in the list are divisible by n.\n    \"\"\"\n    return all(num % n == 0 for num in l)", "solution_func": "def g(l: List[int]):\n    return max(l)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, m: int) -> bool:\n    \"\"\"\n    Check if the sum of n and m is equal to 100.\n    \"\"\"\n    return n + m == 100\n\ndef g():\n    return 50\n\nassert f(g())\n", "emb": null, "idx_generation": 120, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m: int) -> bool:\n    \"\"\"\n    Check if the sum of n and m is equal to 100.\n    \"\"\"\n    return n + m == 100", "solution_func": "def g():\n    return 50", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\nfrom random import randint\n\ndef f(l: List[int], n: int) -> bool:\n    \"\"\"\n    Check if n is present in the list.\n    \"\"\"\n    return n in l\n\ndef g(l: List[int]):\n    return l[randint(0, len(l)-1)]\n\nassert f(g())\n", "emb": null, "idx_generation": 120, "target_skills": null, "problem_func": "import random\nfrom typing import*\nfrom random import randint\n\ndef f(l: List[int], n: int) -> bool:\n    \"\"\"\n    Check if n is present in the list.\n    \"\"\"\n    return n in l", "solution_func": "def g(l: List[int]):\n    return l[randint(0, len(l)-1)]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"\n    Check if a string contains a repeating substring of length n.\n    For example, f(\"abcabcabc\", n=3) returns True because \"abc\" is repeated three times.\n    \"\"\"\n    for i in range(len(s) - n):\n        if s[i:i+n] in s[i+n:]:\n            return True\n    return False\n\ndef g(s: str, n=3):\n    \"\"\"\n    Generate a string with a repeating substring of length n.\n    \"\"\"\n    return s * n\n\nassert f(g())\n", "emb": null, "idx_generation": 120, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"\n    Check if a string contains a repeating substring of length n.\n    For example, f(\"abcabcabc\", n=3) returns True because \"abc\" is repeated three times.\n    \"\"\"\n    for i in range(len(s) - n):\n        if s[i:i+n] in s[i+n:]:\n            return True\n    return False", "solution_func": "def g(s: str, n=3):\n    \"\"\"\n    Generate a string with a repeating substring of length n.\n    \"\"\"\n    return s * n", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Check if a target value is present in the given matrix.\n    Return True if the target value is found, False otherwise.\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix: List[List[int]], target=0):\n    \"\"\"\n    Generate a matrix with a target value.\n    \"\"\"\n    return [[target] * len(matrix[0])] * len(matrix)\n\nassert f(g())\n", "emb": null, "idx_generation": 120, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Check if a target value is present in the given matrix.\n    Return True if the target value is found, False otherwise.\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(matrix: List[List[int]], target=0):\n    \"\"\"\n    Generate a matrix with a target value.\n    \"\"\"\n    return [[target] * len(matrix[0])] * len(matrix)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list that add up to the target value.\n    Return True if such a pair exists, False otherwise.\n    \"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False\n\ndef g(nums: List[int], target=0):\n    \"\"\"\n    Generate a list of numbers with a pair that adds up to the target value.\n    \"\"\"\n    return [target // 2, target - target // 2] + nums\n\nassert f(g())\n", "emb": null, "idx_generation": 120, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list that add up to the target value.\n    Return True if such a pair exists, False otherwise.\n    \"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False", "solution_func": "def g(nums: List[int], target=0):\n    \"\"\"\n    Generate a list of numbers with a pair that adds up to the target value.\n    \"\"\"\n    return [target // 2, target - target // 2] + nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, d=2, res=0) -> bool:\n    \"\"\"Find the sum of the first n terms of a geometric sequence.\"\"\"\n    return (1 - d ** n) / (1 - d) == res\ndef g(d=2, res=0):\n    return sum([d ** i for i in range(res + 1)])\nassert f(g())\n", "emb": null, "idx_generation": 120, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, d=2, res=0) -> bool:\n    \"\"\"Find the sum of the first n terms of a geometric sequence.\"\"\"\n    return (1 - d ** n) / (1 - d) == res", "solution_func": "def g(d=2, res=0):\n    return sum([d ** i for i in range(res + 1)])", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\ndef f(n: int, x=10) -> bool:\n    \"\"\"Check if the square root of n is greater than x.\"\"\"\n    return math.sqrt(n) > x\ndef g(x=10):\n    return x ** 2 + 1\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 120, "target_skills": null, "problem_func": "from typing import*\nimport math\ndef f(n: int, x=10) -> bool:\n    \"\"\"Check if the square root of n is greater than x.\"\"\"\n    return math.sqrt(n) > x", "solution_func": "def g(x=10):\n    return x ** 2 + 1", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, arr=[2, 4, 6, 8, 10], target=20) -> bool:\n    \"\"\"Check if the product of n and all the elements in arr is equal to target.\"\"\"\n    return n * arr[0] * arr[1] * arr[2] * arr[3] * arr[4] == target\ndef g(arr=[2, 4, 6, 8, 10], target=20):\n    return target / (arr[0] * arr[1] * arr[2] * arr[3] * arr[4])\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 120, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, arr=[2, 4, 6, 8, 10], target=20) -> bool:\n    \"\"\"Check if the product of n and all the elements in arr is equal to target.\"\"\"\n    return n * arr[0] * arr[1] * arr[2] * arr[3] * arr[4] == target", "solution_func": "def g(arr=[2, 4, 6, 8, 10], target=20):\n    return target / (arr[0] * arr[1] * arr[2] * arr[3] * arr[4])", "map_ix": [0, 0, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\ndef f(x: float, a=100) -> bool:\n    \"\"\"Find a number that when squared is less than a.\"\"\"\n    return x ** 2 < a\ndef g(a=100):\n    return math.sqrt(a) - 1\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 120, "target_skills": null, "problem_func": "from typing import*\nimport math\ndef f(x: float, a=100) -> bool:\n    \"\"\"Find a number that when squared is less than a.\"\"\"\n    return x ** 2 < a", "solution_func": "def g(a=100):\n    return math.sqrt(a) - 1", "map_ix": [1, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], m=5, n=2) -> bool:\n    \"\"\"Check if the sum of the first n elements of x is divisible by m.\"\"\"\n    assert all([v > 0 for v in x])\n    return sum(x[:n]) % m == 0\n\ndef g(m=5, n=2):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] + [m, n]\n\nassert f(g())\n", "emb": null, "idx_generation": 121, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], m=5, n=2) -> bool:\n    \"\"\"Check if the sum of the first n elements of x is divisible by m.\"\"\"\n    assert all([v > 0 for v in x])\n    return sum(x[:n]) % m == 0", "solution_func": "def g(m=5, n=2):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] + [m, n]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], target=100, n=3) -> bool:\n    \"\"\"Find if there is a subset of n elements whose sum is equal to the target.\"\"\"\n    assert all([v > 0 for v in x])\n    def subset_sum(nums, target, n, curr_sum):\n        if curr_sum == target and n == 0:\n            return True\n        if curr_sum > target or n < 0:\n            return False\n        return subset_sum(nums, target, n-1, curr_sum + nums[n-1]) or subset_sum(nums, target, n-1, curr_sum)\n    return subset_sum(x, target, len(x), 0)\n\ndef g(target=100, n=3):\n    return [25, 10, 5, 50, 30, 20] + [target, n]\n\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 121, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], target=100, n=3) -> bool:\n    \"\"\"Find if there is a subset of n elements whose sum is equal to the target.\"\"\"\n    assert all([v > 0 for v in x])\n    def subset_sum(nums, target, n, curr_sum):\n        if curr_sum == target and n == 0:\n            return True\n        if curr_sum > target or n < 0:\n            return False\n        return subset_sum(nums, target, n-1, curr_sum + nums[n-1]) or subset_sum(nums, target, n-1, curr_sum)\n    return subset_sum(x, target, len(x), 0)", "solution_func": "def g(target=100, n=3):\n    return [25, 10, 5, 50, 30, 20] + [target, n]", "map_ix": [0, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, nums=[5, 10, 15, 20, 25]) -> bool:\n    \"\"\"Check if the sum of the ASCII values of the characters in s is equal to the sum of the numbers in nums.\"\"\"\n    ascii_sum = sum(ord(c) for c in s)\n    nums_sum = sum(nums)\n    return ascii_sum == nums_sum\n\ndef g(nums=[5, 10, 15, 20, 25]):\n    return \"hello\" + [nums]\n\nassert f(g())\n", "emb": null, "idx_generation": 121, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, nums=[5, 10, 15, 20, 25]) -> bool:\n    \"\"\"Check if the sum of the ASCII values of the characters in s is equal to the sum of the numbers in nums.\"\"\"\n    ascii_sum = sum(ord(c) for c in s)\n    nums_sum = sum(nums)\n    return ascii_sum == nums_sum", "solution_func": "def g(nums=[5, 10, 15, 20, 25]):\n    return \"hello\" + [nums]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 121, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find the target number in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(target=10):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 121, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find the target number in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(target=10):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 121, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False", "solution_func": "def g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums = [1, 2, 3, 4, 5], target = 9):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 121, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums = [1, 2, 3, 4, 5], target = 9):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(num: int) -> bool:\n    \"\"\"Check if the number is a palindrome\"\"\"\n    return str(num) == str(num)[::-1]\ndef g():\n    return 12321\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 121, "target_skills": null, "problem_func": "from typing import*\ndef f(num: int) -> bool:\n    \"\"\"Check if the number is a palindrome\"\"\"\n    return str(num) == str(num)[::-1]", "solution_func": "def g():\n    return 12321", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(word: str) -> bool:\n    \"\"\"Check if the word is a palindrome\"\"\"\n    return word == word[::-1]\ndef g():\n    return \"level\"\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 121, "target_skills": null, "problem_func": "from typing import*\ndef f(word: str) -> bool:\n    \"\"\"Check if the word is a palindrome\"\"\"\n    return word == word[::-1]", "solution_func": "def g():\n    return \"level\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float) -> bool:\n    \"\"\"Find two numbers such that the sum of their square roots is equal to 5.\"\"\"\n    return math.isclose(math.sqrt(x) + math.sqrt(y), 5)\n\ndef g():\n    x = 9\n    y = 16\n    return x, y\n\nassert f(*g())\n", "emb": null, "idx_generation": 121, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, y: float) -> bool:\n    \"\"\"Find two numbers such that the sum of their square roots is equal to 5.\"\"\"\n    return math.isclose(math.sqrt(x) + math.sqrt(y), 5)", "solution_func": "def g():\n    x = 9\n    y = 16\n    return x, y", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, m=1000, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Check if n is divisible by any number in the given list.\"\"\"\n    return any(n % num == 0 for num in nums) and n <= m\ndef g(m = 1000, nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return max(num for num in range(1, m + 1) if any(num % n == 0 for n in nums))\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 122, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m=1000, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Check if n is divisible by any number in the given list.\"\"\"\n    return any(n % num == 0 for num in nums) and n <= m", "solution_func": "def g(m = 1000, nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return max(num for num in range(1, m + 1) if any(num % n == 0 for n in nums))", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, lst=['apple', 'banana', 'cherry']) -> bool:\n    \"\"\"Check if a given integer is the index of a word that starts with the letter 'c'.\"\"\"\n    return lst[n][0] == 'c'\ndef g(lst = ['apple', 'banana', 'cherry']):\n    return next(i for i, word in enumerate(lst) if word[0] == 'c')\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 122, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst=['apple', 'banana', 'cherry']) -> bool:\n    \"\"\"Check if a given integer is the index of a word that starts with the letter 'c'.\"\"\"\n    return lst[n][0] == 'c'", "solution_func": "def g(lst = ['apple', 'banana', 'cherry']):\n    return next(i for i, word in enumerate(lst) if word[0] == 'c')", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Find a pair of numbers in the list whose sum is equal to the target.\"\"\"\n    return any(lst[i] + lst[j] == target for i in range(len(lst)) for j in range(i + 1, len(lst)))\ndef g(target = 100):\n    return [(i, j) for i in range(target) for j in range(target) if i + j == target][0]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 122, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Find a pair of numbers in the list whose sum is equal to the target.\"\"\"\n    return any(lst[i] + lst[j] == target for i in range(len(lst)) for j in range(i + 1, len(lst)))", "solution_func": "def g(target = 100):\n    return [(i, j) for i in range(target) for j in range(target) if i + j == target][0]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int = 10, index: int = 0) -> bool:\n    \"\"\"\n    Given a list of numbers and a target number, find the index of the first occurrence of the target number in the list.\n    \"\"\"\n    return nums.index(target) == index\ndef g(nums: List[int] = [5, 10, 15, 20, 25, 10], target: int = 10):\n    return nums[:]\nassert f(g())\n", "emb": null, "idx_generation": 122, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int = 10, index: int = 0) -> bool:\n    \"\"\"\n    Given a list of numbers and a target number, find the index of the first occurrence of the target number in the list.\n    \"\"\"\n    return nums.index(target) == index", "solution_func": "def g(nums: List[int] = [5, 10, 15, 20, 25, 10], target: int = 10):\n    return nums[:]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int = 5, index: Tuple[int, int] = (0, 0)) -> bool:\n    \"\"\"\n    Given a matrix and a target number, find the index of the first occurrence of the target number in the matrix.\n    \"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == target:\n                return (i, j) == index\n    return False\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target: int = 5):\n    return matrix[:]\nassert f(g())\n", "emb": null, "idx_generation": 122, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int = 5, index: Tuple[int, int] = (0, 0)) -> bool:\n    \"\"\"\n    Given a matrix and a target number, find the index of the first occurrence of the target number in the matrix.\n    \"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == target:\n                return (i, j) == index\n    return False", "solution_func": "def g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target: int = 5):\n    return matrix[:]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(words: List[str], query: str = 'apple', index: int = 2, prefix: str = '') -> bool:\n    \"\"\"\n    Given a list of words and a query word, find the index of the first occurrence of a word in the list that starts with the given prefix.\n    \"\"\"\n    for i in range(len(words)):\n        if words[i].startswith(prefix):\n            return words[i] == query and i == index\n    return False\ndef g(words: List[str] = ['apple', 'banana', 'avocado', 'blueberry'], query: str = 'apple', prefix: str = 'a'):\n    return words[:]\nassert f(g())\n", "emb": null, "idx_generation": 122, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], query: str = 'apple', index: int = 2, prefix: str = '') -> bool:\n    \"\"\"\n    Given a list of words and a query word, find the index of the first occurrence of a word in the list that starts with the given prefix.\n    \"\"\"\n    for i in range(len(words)):\n        if words[i].startswith(prefix):\n            return words[i] == query and i == index\n    return False", "solution_func": "def g(words: List[str] = ['apple', 'banana', 'avocado', 'blueberry'], query: str = 'apple', prefix: str = 'a'):\n    return words[:]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int, a=2, b=3, c=5) -> bool:\n    \"\"\"Find three numbers in the list that sum up to the target value\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\ndef g(nums=[a,b,c], target=a+b+c, a=2, b=3, c=5):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 122, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int, a=2, b=3, c=5) -> bool:\n    \"\"\"Find three numbers in the list that sum up to the target value\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))", "solution_func": "def g(nums=[a,b,c], target=a+b+c, a=2, b=3, c=5):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(text: str, a=4, b=2) -> bool:\n    \"\"\"Check if the given text is a palindrome\"\"\"\n    return text == text[::-1]\ndef g(text='racecar', a=4, b=2):\n    return text\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 122, "target_skills": null, "problem_func": "from typing import*\ndef f(text: str, a=4, b=2) -> bool:\n    \"\"\"Check if the given text is a palindrome\"\"\"\n    return text == text[::-1]", "solution_func": "def g(text='racecar', a=4, b=2):\n    return text", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], a=0) -> bool:\n    \"\"\"Check if all elements in the matrix are equal to the given value\"\"\"\n    return all(all(element == a for element in row) for row in matrix)\ndef g(matrix=[[a,a],[a,a]], a=0):\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 122, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], a=0) -> bool:\n    \"\"\"Check if all elements in the matrix are equal to the given value\"\"\"\n    return all(all(element == a for element in row) for row in matrix)", "solution_func": "def g(matrix=[[a,a],[a,a]], a=0):\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: str, target_length=5) -> bool:\n    \"\"\"Check if a string has a length equal to a specific value.\"\"\"\n    return len(x) == target_length\ndef g(target_length=5):\n    return 'a' * target_length\nassert f(g())\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 122, "target_skills": null, "problem_func": "from typing import*\ndef f(x: str, target_length=5) -> bool:\n    \"\"\"Check if a string has a length equal to a specific value.\"\"\"\n    return len(x) == target_length", "solution_func": "def g(target_length=5):\n    return 'a' * target_length", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exist two numbers in the list whose sum is equal to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5, 6, 7]\n\nassert f(g())\n", "emb": null, "idx_generation": 123, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exist two numbers in the list whose sum is equal to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target=0):\n    return [1, 2, 3, 4, 5, 6, 7]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exist three numbers in the list whose sum is equal to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5, 6, 7]\n\nassert f(g())\n", "emb": null, "idx_generation": 123, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exist three numbers in the list whose sum is equal to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False", "solution_func": "def g(target=0):\n    return [1, 2, 3, 4, 5, 6, 7]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find the number of pairs where the sum of the numbers is equal to the target\"\"\"\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                count += 1\n    return count\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5, 6, 7]\n\nassert f(g()) == 3\n", "emb": null, "idx_generation": 123, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find the number of pairs where the sum of the numbers is equal to the target\"\"\"\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                count += 1\n    return count", "solution_func": "def g(target=0):\n    return [1, 2, 3, 4, 5, 6, 7]", "map_ix": null}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10, max_nums=3) -> bool:\n    \"\"\"Find a selection of at most max_nums numbers whose sum is the target value.\"\"\"\n    for n in nums:\n        assert isinstance(n, int)\n    return len(nums) <= max_nums and sum(nums) == target\ndef g(target = 10, max_nums = 3):\n    from itertools import combinations\n    for n in range(max_nums + 1):\n        for c in combinations(range(1, 11), n):\n            if sum(c) == target:\n                return list(c)\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 123, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10, max_nums=3) -> bool:\n    \"\"\"Find a selection of at most max_nums numbers whose sum is the target value.\"\"\"\n    for n in nums:\n        assert isinstance(n, int)\n    return len(nums) <= max_nums and sum(nums) == target", "solution_func": "def g(target = 10, max_nums = 3):\n    from itertools import combinations\n    for n in range(max_nums + 1):\n        for c in combinations(range(1, 11), n):\n            if sum(c) == target:\n                return list(c)", "map_ix": [0, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(lst: List[int], target=100, max_length=5) -> bool:\n    \"\"\"Find a sublist of at most max_length whose sum is the target value.\"\"\"\n    for l in lst:\n        assert isinstance(l, int)\n    return len(lst) <= max_length and sum(lst) == target\ndef g(target = 100, max_length = 5):\n    from itertools import combinations\n    for n in range(1, max_length + 1):\n        for c in combinations(range(1, 101), n):\n            if sum(c) == target:\n                return list(c)\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 123, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(lst: List[int], target=100, max_length=5) -> bool:\n    \"\"\"Find a sublist of at most max_length whose sum is the target value.\"\"\"\n    for l in lst:\n        assert isinstance(l, int)\n    return len(lst) <= max_length and sum(lst) == target", "solution_func": "def g(target = 100, max_length = 5):\n    from itertools import combinations\n    for n in range(1, max_length + 1):\n        for c in combinations(range(1, 101), n):\n            if sum(c) == target:\n                return list(c)", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(matrix: List[List[int]], target=20, max_elements=4) -> bool:\n    \"\"\"Find a selection of at most max_elements elements from the matrix whose sum is the target value.\"\"\"\n    for row in matrix:\n        for element in row:\n            assert isinstance(element, int)\n    return sum([element for row in matrix for element in row]) == target and len([element for row in matrix for element in row]) <= max_elements\ndef g(target = 20, max_elements = 4):\n    from itertools import combinations\n    for n in range(1, max_elements + 1):\n        for c in combinations(range(1, 10), n):\n            if sum(c) == target:\n                return [[element for element in c]]\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 123, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(matrix: List[List[int]], target=20, max_elements=4) -> bool:\n    \"\"\"Find a selection of at most max_elements elements from the matrix whose sum is the target value.\"\"\"\n    for row in matrix:\n        for element in row:\n            assert isinstance(element, int)\n    return sum([element for row in matrix for element in row]) == target and len([element for row in matrix for element in row]) <= max_elements", "solution_func": "def g(target = 20, max_elements = 4):\n    from itertools import combinations\n    for n in range(1, max_elements + 1):\n        for c in combinations(range(1, 10), n):\n            if sum(c) == target:\n                return [[element for element in c]]", "map_ix": [0, 1, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, num_list=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if a number is present in a list.\"\"\"\n    return n in num_list\ndef g(num_list=[1, 2, 3, 4, 5]):\n    return num_list[0]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 123, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, num_list=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if a number is present in a list.\"\"\"\n    return n in num_list", "solution_func": "def g(num_list=[1, 2, 3, 4, 5]):\n    return num_list[0]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, r=5) -> bool:\n    \"\"\"Check if a point is inside a circle.\"\"\"\n    return math.sqrt(x**2 + y**2) <= r\ndef g(x=3, y=4, r=5):\n    return x, y\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 123, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, y: float, r=5) -> bool:\n    \"\"\"Check if a point is inside a circle.\"\"\"\n    return math.sqrt(x**2 + y**2) <= r", "solution_func": "def g(x=3, y=4, r=5):\n    return x, y", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, word='python', max_len=10) -> bool:\n    \"\"\"Check if a word is a substring of a string and its length is less than or equal to a given maximum length.\"\"\"\n    return word in s and len(word) <= max_len\ndef g(word='python', max_len=10):\n    return word\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 123, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, word='python', max_len=10) -> bool:\n    \"\"\"Check if a word is a substring of a string and its length is less than or equal to a given maximum length.\"\"\"\n    return word in s and len(word) <= max_len", "solution_func": "def g(word='python', max_len=10):\n    return word", "map_ix": [0, 0, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the list that adds up to the target value.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 123, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the list that adds up to the target value.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False", "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(n: int, threshold=10) -> bool:\n    \"\"\"Check if a number is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g(threshold=10):\n    return threshold\n\nassert f(g())\n", "emb": null, "idx_generation": 124, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, threshold=10) -> bool:\n    \"\"\"Check if a number is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True", "solution_func": "def g(threshold=10):\n    return threshold", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(lst: list, n=10) -> bool:\n    \"\"\"Check if a given number is present in the list.\"\"\"\n    return n in lst\n\ndef g(n=10):\n    lst = random.sample(range(1, 100), 10)\n    return lst\n\nassert f(g())\n", "emb": null, "idx_generation": 124, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(lst: list, n=10) -> bool:\n    \"\"\"Check if a given number is present in the list.\"\"\"\n    return n in lst", "solution_func": "def g(n=10):\n    lst = random.sample(range(1, 100), 10)\n    return lst", "map_ix": null}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\ndef f(s: str, n: int, chars=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if the given string contains at least n vowels.\"\"\"\n    count = 0\n    for char in s:\n        if char in chars:\n            count += 1\n    return count >= n\n\ndef g(n=3, chars=['a', 'e', 'i', 'o', 'u']):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    s = ''.join(random.choices(vowels + ['b', 'c', 'd', 'f', 'g'], k=10))\n    return s, n, chars\n\nassert f(*g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 124, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(s: str, n: int, chars=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if the given string contains at least n vowels.\"\"\"\n    count = 0\n    for char in s:\n        if char in chars:\n            count += 1\n    return count >= n", "solution_func": "def g(n=3, chars=['a', 'e', 'i', 'o', 'u']):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    s = ''.join(random.choices(vowels + ['b', 'c', 'd', 'f', 'g'], k=10))\n    return s, n, chars", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, k=4, m=10) -> bool:\n    \"\"\"Check if a number is a palindrome in a specific base\"\"\"\n    def is_palindrome(s):\n        return s == s[::-1]\n    num_str = str(n)\n    num_base = int(num_str, k)\n    return is_palindrome(str(num_base)) and num_base < m\ndef g(k = 4, m = 10):\n    palindrome = \"11\"\n    while True:\n        if f(int(palindrome, m), k, m):\n            return int(palindrome, m)\n        palindrome += \"1\"\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 124, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, k=4, m=10) -> bool:\n    \"\"\"Check if a number is a palindrome in a specific base\"\"\"\n    def is_palindrome(s):\n        return s == s[::-1]\n    num_str = str(n)\n    num_base = int(num_str, k)\n    return is_palindrome(str(num_base)) and num_base < m", "solution_func": "def g(k = 4, m = 10):\n    palindrome = \"11\"\n    while True:\n        if f(int(palindrome, m), k, m):\n            return int(palindrome, m)\n        palindrome += \"1\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\n\ndef f(n: int, l=5, r=15) -> bool:\n    \"\"\"Check if a number is divisible by all numbers in a given range\"\"\"\n    for i in range(l, r + 1):\n        if n % i != 0:\n            return False\n    return True\ndef g(l = 5, r = 15):\n    divisible = random.randint(1, 10) * r\n    while True:\n        if f(divisible, l, r):\n            return divisible\n        divisible += r\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 124, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(n: int, l=5, r=15) -> bool:\n    \"\"\"Check if a number is divisible by all numbers in a given range\"\"\"\n    for i in range(l, r + 1):\n        if n % i != 0:\n            return False\n    return True", "solution_func": "def g(l = 5, r = 15):\n    divisible = random.randint(1, 10) * r\n    while True:\n        if f(divisible, l, r):\n            return divisible\n        divisible += r", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if a string contains a specific substring\"\"\"\n    return s.count(\"hello\") >= n\ndef g(n = 5):\n    return \"hello \" * n + \"world\"\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 124, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if a string contains a specific substring\"\"\"\n    return s.count(\"hello\") >= n", "solution_func": "def g(n = 5):\n    return \"hello \" * n + \"world\"", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target='Hello, World!') -> bool:\n    \"\"\"\n    Given a string s, check if it is equal to the target string 'Hello, World!'\n    \"\"\"\n    return s == target\ndef g(target='Hello, World!'):\n    return target\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 124, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='Hello, World!') -> bool:\n    \"\"\"\n    Given a string s, check if it is equal to the target string 'Hello, World!'\n    \"\"\"\n    return s == target", "solution_func": "def g(target='Hello, World!'):\n    return target", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers, find two numbers that sum up to the target number.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    nums = [2, 4, 6, 8]\n    return nums\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 124, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers, find two numbers that sum up to the target number.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target=10):\n    nums = [2, 4, 6, 8]\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"\n    Given a matrix (list of lists) of integers, find if the target number exists in the matrix.\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(target=10):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 124, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"\n    Given a matrix (list of lists) of integers, find if the target number exists in the matrix.\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(target=10):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(numbers: List[int], threshold=500, k=3) -> bool:\n    \"\"\"\n    Check if there exists a subset of k numbers whose sum is greater than or equal to the threshold\n    \"\"\"\n    from itertools import combinations\n    return any(sum(comb) >= threshold for comb in combinations(numbers, k))\ndef g(threshold = 500, k = 3):\n    numbers = [10, 50, 100, 200, 300, 400, 600, 700, 800, 900]\n    return numbers\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 124, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(numbers: List[int], threshold=500, k=3) -> bool:\n    \"\"\"\n    Check if there exists a subset of k numbers whose sum is greater than or equal to the threshold\n    \"\"\"\n    from itertools import combinations\n    return any(sum(comb) >= threshold for comb in combinations(numbers, k))", "solution_func": "def g(threshold = 500, k = 3):\n    numbers = [10, 50, 100, 200, 300, 400, 600, 700, 800, 900]\n    return numbers", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list that sum to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5], target=0):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 125, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list that sum to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=0):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], row_sum=0, col_sum=0) -> bool:\n    \"\"\"Check if the sum of each row and column in the matrix equals the given row_sum and col_sum\"\"\"\n    for row in matrix:\n        if sum(row) != row_sum:\n            return False\n    for col in zip(*matrix):\n        if sum(col) != col_sum:\n            return False\n    return True\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], row_sum=0, col_sum=0):\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 125, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], row_sum=0, col_sum=0) -> bool:\n    \"\"\"Check if the sum of each row and column in the matrix equals the given row_sum and col_sum\"\"\"\n    for row in matrix:\n        if sum(row) != row_sum:\n            return False\n    for col in zip(*matrix):\n        if sum(col) != col_sum:\n            return False\n    return True", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], row_sum=0, col_sum=0):\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a subarray in the list with a sum equal to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums) + 1):\n            if sum(nums[i:j]) == target:\n                return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5], target=0):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 125, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a subarray in the list with a sum equal to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums) + 1):\n            if sum(nums[i:j]) == target:\n                return True\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=0):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(n: int, nums=[4, 7, 10, 8], target_sum=30) -> bool:\n    \"\"\"Find a combination of numbers from the list that sums up to the target sum.\"\"\"\n    from itertools import combinations\n    return any(sum(combo) == target_sum for r in range(1, len(nums) + 1) for combo in combinations(nums, r))\ndef g(nums=[4, 7, 10, 8], target_sum=30):\n    from itertools import combinations\n    for r in range(1, len(nums) + 1):\n        for combo in combinations(nums, r):\n            if sum(combo) == target_sum:\n                return True\n    return False\nassert f(g())\n", "emb": null, "idx_generation": 125, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(n: int, nums=[4, 7, 10, 8], target_sum=30) -> bool:\n    \"\"\"Find a combination of numbers from the list that sums up to the target sum.\"\"\"\n    from itertools import combinations\n    return any(sum(combo) == target_sum for r in range(1, len(nums) + 1) for combo in combinations(nums, r))", "solution_func": "def g(nums=[4, 7, 10, 8], target_sum=30):\n    from itertools import combinations\n    for r in range(1, len(nums) + 1):\n        for combo in combinations(nums, r):\n            if sum(combo) == target_sum:\n                return True\n    return False", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substr='abc') -> bool:\n    \"\"\"Check if the given substring is present in the string.\"\"\"\n    return substr in s\ndef g(substr='abc'):\n    return substr\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 125, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substr='abc') -> bool:\n    \"\"\"Check if the given substring is present in the string.\"\"\"\n    return substr in s", "solution_func": "def g(substr='abc'):\n    return substr", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10], target=20) -> bool:\n    \"\"\"Find a combination of numbers from the list that multiplies to the target.\"\"\"\n    from itertools import combinations\n    return any(prod(combo) == target for r in range(1, len(nums) + 1) for combo in combinations(nums, r))\ndef g(nums=[2, 4, 6, 8, 10], target=20):\n    from itertools import combinations\n    from operator import mul\n    from functools import reduce\n    for r in range(1, len(nums) + 1):\n        for combo in combinations(nums, r):\n            if reduce(mul, combo, 1) == target:\n                return True\n    return False\nassert f(g())\n", "emb": null, "idx_generation": 125, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10], target=20) -> bool:\n    \"\"\"Find a combination of numbers from the list that multiplies to the target.\"\"\"\n    from itertools import combinations\n    return any(prod(combo) == target for r in range(1, len(nums) + 1) for combo in combinations(nums, r))", "solution_func": "def g(nums=[2, 4, 6, 8, 10], target=20):\n    from itertools import combinations\n    from operator import mul\n    from functools import reduce\n    for r in range(1, len(nums) + 1):\n        for combo in combinations(nums, r):\n            if reduce(mul, combo, 1) == target:\n                return True\n    return False", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"Find two numbers in a list that sum up to a target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums: List[int], target: int = 0):\n    return nums\n\nassert f(g([1, 2, 3, 4, 5], 9))\n", "emb": null, "idx_generation": 125, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"Find two numbers in a list that sum up to a target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums: List[int], target: int = 0):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"Find three numbers in a list that sum up to a target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums: List[int], target: int = 0):\n    return nums\n\nassert f(g([1, 2, 3, 4, 5], 9))\n", "emb": null, "idx_generation": 125, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"Find three numbers in a list that sum up to a target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False", "solution_func": "def g(nums: List[int], target: int = 0):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"Find four numbers in a list that sum up to a target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                for l in range(k + 1, len(nums)):\n                    if nums[i] + nums[j] + nums[k] + nums[l] == target:\n                        return True\n    return False\n\ndef g(nums: List[int], target: int = 0):\n    return nums\n\nassert f(g([1, 2, 3, 4, 5], 9))\n", "emb": null, "idx_generation": 125, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"Find four numbers in a list that sum up to a target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                for l in range(k + 1, len(nums)):\n                    if nums[i] + nums[j] + nums[k] + nums[l] == target:\n                        return True\n    return False", "solution_func": "def g(nums: List[int], target: int = 0):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=5, b=7, c=3, d=9) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers) + d\"\"\"\n    return n + a == b * sum([i for i in range(1, c+1)]) + d\ndef g(a = 5, b = 7, c = 3, d = 9):\n    return -a + b * sum([i for i in range(1, c+1)]) + d\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 125, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=5, b=7, c=3, d=9) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers) + d\"\"\"\n    return n + a == b * sum([i for i in range(1, c+1)]) + d", "solution_func": "def g(a = 5, b = 7, c = 3, d = 9):\n    return -a + b * sum([i for i in range(1, c+1)]) + d", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, k: int) -> bool:\n    \"\"\"Check if n is divisible by k.\"\"\"\n    return n % k == 0\ndef g(n: int, k: int):\n    return n * k\nassert f(g())\n", "emb": null, "idx_generation": 126, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, k: int) -> bool:\n    \"\"\"Check if n is divisible by k.\"\"\"\n    return n % k == 0", "solution_func": "def g(n: int, k: int):\n    return n * k", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if n is a prime number.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef g():\n    n = 97\n    return n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 126, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if n is a prime number.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "solution_func": "def g():\n    n = 97\n    return n", "map_ix": [1, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the array that add up to the target.\"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g():\n    arr = [1, 2, 3, 4, 5]\n    target = 7\n    return arr, target\nassert f(g())\n", "emb": null, "idx_generation": 126, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the array that add up to the target.\"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g():\n    arr = [1, 2, 3, 4, 5]\n    target = 7\n    return arr, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=11, length=5) -> bool:\n    \"\"\"\n    Find a subsequence of length 'length' in the list 'nums' that sums up to 'target'\n    \"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, length))\ndef g(target=11, length=5):\n    \"\"\"\n    This solution uses a brute force approach by generating all combinations of length 'length' from the list 'nums'\n    \"\"\"\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 126, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=11, length=5) -> bool:\n    \"\"\"\n    Find a subsequence of length 'length' in the list 'nums' that sums up to 'target'\n    \"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, length))", "solution_func": "def g(target=11, length=5):\n    \"\"\"\n    This solution uses a brute force approach by generating all combinations of length 'length' from the list 'nums'\n    \"\"\"\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(matrix: List[List[int]], target=30) -> bool:\n    \"\"\"\n    Find a submatrix in the matrix 'matrix' whose sum is equal to 'target'\n    \"\"\"\n    from itertools import combinations\n    for i in range(1, len(matrix)+1):\n        for comb in combinations(matrix, i):\n            submatrix = [list(t) for t in zip(*comb)]\n            for row_comb in combinations(submatrix, i):\n                if sum(row_comb) == target:\n                    return True\n    return False\ndef g(target=30):\n    \"\"\"\n    This solution uses a brute force approach by generating all possible submatrices of 'matrix'\n    \"\"\"\n    matrix = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 126, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(matrix: List[List[int]], target=30) -> bool:\n    \"\"\"\n    Find a submatrix in the matrix 'matrix' whose sum is equal to 'target'\n    \"\"\"\n    from itertools import combinations\n    for i in range(1, len(matrix)+1):\n        for comb in combinations(matrix, i):\n            submatrix = [list(t) for t in zip(*comb)]\n            for row_comb in combinations(submatrix, i):\n                if sum(row_comb) == target:\n                    return True\n    return False", "solution_func": "def g(target=30):\n    \"\"\"\n    This solution uses a brute force approach by generating all possible submatrices of 'matrix'\n    \"\"\"\n    matrix = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10, length=3) -> bool:\n    \"\"\"\n    Find a subsequence of length 'length' in the list 'nums' that sums up to 'target'\n    \"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, length))\ndef g(target=10, length=3):\n    \"\"\"\n    This solution uses a brute force approach by generating all combinations of length 'length' from the list 'nums'\n    \"\"\"\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 126, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10, length=3) -> bool:\n    \"\"\"\n    Find a subsequence of length 'length' in the list 'nums' that sums up to 'target'\n    \"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, length))", "solution_func": "def g(target=10, length=3):\n    \"\"\"\n    This solution uses a brute force approach by generating all combinations of length 'length' from the list 'nums'\n    \"\"\"\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, char=\"a\", n=5) -> bool:\n    \"\"\"Check if a given character appears at least n times in a string\"\"\"\n    return s.count(char) >= n\ndef g(char=\"a\", n=5):\n    return char * n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 126, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, char=\"a\", n=5) -> bool:\n    \"\"\"Check if a given character appears at least n times in a string\"\"\"\n    return s.count(char) >= n", "solution_func": "def g(char=\"a\", n=5):\n    return char * n", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import math\nfrom typing import*\nfrom math import isqrt\n\ndef f(n: int, count=5) -> bool:\n    \"\"\"Check if a given number is the sum of the squares of 'count' consecutive integers\"\"\"\n    start = isqrt(n // count)\n    for i in range(start, start + count):\n        if sum(j**2 for j in range(i, i + count)) == n:\n            return True\n    return False\ndef g(count=5):\n    return sum(i**2 for i in range(1, count+1))\nassert f(g())\n", "emb": null, "idx_generation": 126, "target_skills": null, "problem_func": "import math\nfrom typing import*\nfrom math import isqrt\n\ndef f(n: int, count=5) -> bool:\n    \"\"\"Check if a given number is the sum of the squares of 'count' consecutive integers\"\"\"\n    start = isqrt(n // count)\n    for i in range(start, start + count):\n        if sum(j**2 for j in range(i, i + count)) == n:\n            return True\n    return False", "solution_func": "def g(count=5):\n    return sum(i**2 for i in range(1, count+1))", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(dt: datetime, format_string=\"%Y-%m-%d %H:%M:%S\", weekday=5) -> bool:\n    \"\"\"Check if the weekday of a given datetime object matches the given weekday\"\"\"\n    return dt.strftime(\"%w\") == str(weekday)\ndef g(format_string=\"%Y-%m-%d %H:%M:%S\", weekday=5):\n    return datetime.strptime(\"2022-11-15 12:00:00\", format_string)\nassert f(g())\n", "emb": null, "idx_generation": 126, "target_skills": null, "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(dt: datetime, format_string=\"%Y-%m-%d %H:%M:%S\", weekday=5) -> bool:\n    \"\"\"Check if the weekday of a given datetime object matches the given weekday\"\"\"\n    return dt.strftime(\"%w\") == str(weekday)", "solution_func": "def g(format_string=\"%Y-%m-%d %H:%M:%S\", weekday=5):\n    return datetime.strptime(\"2022-11-15 12:00:00\", format_string)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11]) -> bool:\n    \"\"\"\n    Find a list of n prime numbers.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return len([x for x in range(2, 1000) if is_prime(x)]) >= n and all((is_prime(p) for p in primes))\n\ndef g(primes=[2, 3, 5, 7, 11]):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    prime_list = []\n    num = 2\n    while len(prime_list) < len(primes):\n        if is_prime(num):\n            prime_list.append(num)\n        num += 1\n        \n    return prime_list\n\nassert f(g())\n", "emb": null, "idx_generation": 126, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11]) -> bool:\n    \"\"\"\n    Find a list of n prime numbers.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return len([x for x in range(2, 1000) if is_prime(x)]) >= n and all((is_prime(p) for p in primes))", "solution_func": "def g(primes=[2, 3, 5, 7, 11]):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    prime_list = []\n    num = 2\n    while len(prime_list) < len(primes):\n        if is_prime(num):\n            prime_list.append(num)\n        num += 1\n        \n    return prime_list", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=3) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a subsequence of length 3 such that the sum of the elements in\n    the subsequence is equal to the target.\n\n    Example Input:\n    [1, 2, 3, 4, 5]\n\n    Example Output:\n    True (1 + 2 + 3 = 6)\n\n    \"\"\"\n    if len(nums) < 3:\n        return False\n    for i in range(len(nums) - 2):\n        for j in range(i + 1, len(nums) - 1):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target = 3):\n    \"\"\"\n    Returns a list of integers where the sum of any three elements in the list is equal to the target.\n    If no such list exists, an empty list is returned.\n    \"\"\"\n    return [i for i in range(1, target + 1)] if target > 3 else []\n\nassert f(g())\n", "emb": null, "idx_generation": 127, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=3) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a subsequence of length 3 such that the sum of the elements in\n    the subsequence is equal to the target.\n\n    Example Input:\n    [1, 2, 3, 4, 5]\n\n    Example Output:\n    True (1 + 2 + 3 = 6)\n\n    \"\"\"\n    if len(nums) < 3:\n        return False\n    for i in range(len(nums) - 2):\n        for j in range(i + 1, len(nums) - 1):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False", "solution_func": "def g(target = 3):\n    \"\"\"\n    Returns a list of integers where the sum of any three elements in the list is equal to the target.\n    If no such list exists, an empty list is returned.\n    \"\"\"\n    return [i for i in range(1, target + 1)] if target > 3 else []", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substr='abc', count=2) -> bool:\n    \"\"\"\n    Given a string, find if it contains a substring `substr` occurring `count` number of times.\n\n    Example Input:\n    \"abcabcabc\"\n\n    Example Output:\n    True (The substring 'abc' occurs 3 times)\n    \"\"\"\n    return s.count(substr) == count\n\ndef g(substr = 'abc', count = 2):\n    \"\"\"\n    Returns a string that contains the substring `substr` occurring `count` number of times.\n    \"\"\"\n    return substr * count\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 127, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substr='abc', count=2) -> bool:\n    \"\"\"\n    Given a string, find if it contains a substring `substr` occurring `count` number of times.\n\n    Example Input:\n    \"abcabcabc\"\n\n    Example Output:\n    True (The substring 'abc' occurs 3 times)\n    \"\"\"\n    return s.count(substr) == count", "solution_func": "def g(substr = 'abc', count = 2):\n    \"\"\"\n    Returns a string that contains the substring `substr` occurring `count` number of times.\n    \"\"\"\n    return substr * count", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a subarray (contiguous subsequence) whose sum is equal to the target.\n\n    Example Input:\n    [1, 2, 3, 4, 5]\n\n    Example Output:\n    True (2 + 3 + 5 = 10)\n    \"\"\"\n    if not nums:\n        return False\n    prefix_sum = 0\n    prefix_sum_set = set()\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target:\n            return True\n        if prefix_sum - target in prefix_sum_set:\n            return True\n        prefix_sum_set.add(prefix_sum)\n    return False\n\ndef g(target = 10):\n    \"\"\"\n    Returns a list of integers whose sum is equal to the target.\n    \"\"\"\n    return [i for i in range(1, target + 1)]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 127, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a subarray (contiguous subsequence) whose sum is equal to the target.\n\n    Example Input:\n    [1, 2, 3, 4, 5]\n\n    Example Output:\n    True (2 + 3 + 5 = 10)\n    \"\"\"\n    if not nums:\n        return False\n    prefix_sum = 0\n    prefix_sum_set = set()\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target:\n            return True\n        if prefix_sum - target in prefix_sum_set:\n            return True\n        prefix_sum_set.add(prefix_sum)\n    return False", "solution_func": "def g(target = 10):\n    \"\"\"\n    Returns a list of integers whose sum is equal to the target.\n    \"\"\"\n    return [i for i in range(1, target + 1)]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target sum\"\"\"\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 127, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target sum\"\"\"\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))", "solution_func": "def g(nums=[1, 2, 3, 4, 5]):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\ndef f(radius: float, height: float, volume=1000) -> bool:\n    \"\"\"Check if the volume of a cone with given radius and height is equal to the target volume\"\"\"\n    cone_volume = (math.pi * math.pow(radius, 2) * height) / 3\n    return cone_volume == volume\ndef g(radius=5, height=10):\n    return radius, height\nassert f(g())\n", "emb": null, "idx_generation": 127, "target_skills": null, "problem_func": "from typing import*\nimport math\ndef f(radius: float, height: float, volume=1000) -> bool:\n    \"\"\"Check if the volume of a cone with given radius and height is equal to the target volume\"\"\"\n    cone_volume = (math.pi * math.pow(radius, 2) * height) / 3\n    return cone_volume == volume", "solution_func": "def g(radius=5, height=10):\n    return radius, height", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(sentence: str, word_count=5) -> bool:\n    \"\"\"Check if the number of words in the sentence is equal to the target word count\"\"\"\n    words = sentence.split()\n    return len(words) == word_count\ndef g(sentence=\"This is a sample sentence\"):\n    return sentence\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 127, "target_skills": null, "problem_func": "from typing import*\ndef f(sentence: str, word_count=5) -> bool:\n    \"\"\"Check if the number of words in the sentence is equal to the target word count\"\"\"\n    words = sentence.split()\n    return len(words) == word_count", "solution_func": "def g(sentence=\"This is a sample sentence\"):\n    return sentence", "map_ix": [0, 0, 0, 1, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(sequences: List[List[int]]) -> bool:\n    \"\"\"\n    Given a list of integer sequences, check if there exists a subsequence that is strictly increasing.\n    \"\"\"\n    for seq in sequences:\n        if len(seq) < 2:\n            continue\n        for i in range(1, len(seq)):\n            if seq[i] <= seq[i-1]:\n                break\n        else:\n            return True\n    return False\n\ndef g(sequences: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a list of integer sequences, return the first sequence that is strictly increasing.\n    \"\"\"\n    for seq in sequences:\n        if len(seq) < 2:\n            continue\n        for i in range(1, len(seq)):\n            if seq[i] <= seq[i-1]:\n                break\n        else:\n            return seq\n    return []\nassert f(g([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n", "emb": null, "idx_generation": 127, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(sequences: List[List[int]]) -> bool:\n    \"\"\"\n    Given a list of integer sequences, check if there exists a subsequence that is strictly increasing.\n    \"\"\"\n    for seq in sequences:\n        if len(seq) < 2:\n            continue\n        for i in range(1, len(seq)):\n            if seq[i] <= seq[i-1]:\n                break\n        else:\n            return True\n    return False", "solution_func": "def g(sequences: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a list of integer sequences, return the first sequence that is strictly increasing.\n    \"\"\"\n    for seq in sequences:\n        if len(seq) < 2:\n            continue\n        for i in range(1, len(seq)):\n            if seq[i] <= seq[i-1]:\n                break\n        else:\n            return seq\n    return []", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix, check if it is symmetric.\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix, return the transpose of the matrix.\n    \"\"\"\n    n = len(matrix)\n    transpose = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            transpose[j][i] = matrix[i][j]\n    return transpose\nassert f(g([[1, 2, 3], [2, 4, 5], [3, 5, 6]]))\n", "emb": [1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 127, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix, check if it is symmetric.\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "solution_func": "def g(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix, return the transpose of the matrix.\n    \"\"\"\n    n = len(matrix)\n    transpose = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            transpose[j][i] = matrix[i][j]\n    return transpose", "map_ix": [1, 0, 1, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(points: List[List[int]], k: int) -> bool:\n    \"\"\"\n    Given a list of 2D points, check if there exists a circle with radius k that covers all the points.\n    \"\"\"\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            if (points[i][0] - points[j][0])**2 + (points[i][1] - points[j][1])**2 > (2*k)**2:\n                return False\n    return True\n\ndef g(points: List[List[int]], k: int) -> List[List[int]]:\n    \"\"\"\n    Given a list of 2D points and a radius k, return the coordinates of the center of the smallest circle\n    that covers all the points.\n    \"\"\"\n    min_x = min(points, key=lambda p: p[0])[0]\n    max_x = max(points, key=lambda p: p[0])[0]\n    min_y = min(points, key=lambda p: p[1])[1]\n    max_y = max(points, key=lambda p: p[1])[1]\n    center_x = (min_x + max_x) / 2\n    center_y = (min_y + max_y) / 2\n    return [center_x, center_y]\nassert f(g([[1, 1], [2, 2], [3, 3]], 2))", "emb": null, "idx_generation": 127, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(points: List[List[int]], k: int) -> bool:\n    \"\"\"\n    Given a list of 2D points, check if there exists a circle with radius k that covers all the points.\n    \"\"\"\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            if (points[i][0] - points[j][0])**2 + (points[i][1] - points[j][1])**2 > (2*k)**2:\n                return False\n    return True", "solution_func": "def g(points: List[List[int]], k: int) -> List[List[int]]:\n    \"\"\"\n    Given a list of 2D points and a radius k, return the coordinates of the center of the smallest circle\n    that covers all the points.\n    \"\"\"\n    min_x = min(points, key=lambda p: p[0])[0]\n    max_x = max(points, key=lambda p: p[0])[0]\n    min_y = min(points, key=lambda p: p[1])[1]\n    max_y = max(points, key=lambda p: p[1])[1]\n    center_x = (min_x + max_x) / 2\n    center_y = (min_y + max_y) / 2\n    return [center_x, center_y]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a sorted 2D matrix of integers and a target value, determine whether the target is present in the matrix.\n    The matrix is sorted in non-decreasing order from left to right and from top to bottom.\n    \"\"\"\n    m, n = len(matrix), len(matrix[0])\n    row, col = m - 1, 0\n    while row >= 0 and col < n:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            col += 1\n        else:\n            row -= 1\n    return False\n\ndef g(matrix=[[1,3,5,7],[10,11,16,20],[23,30,34,60]], target=3):\n    return matrix, target\n\nassert f(*g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 127, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a sorted 2D matrix of integers and a target value, determine whether the target is present in the matrix.\n    The matrix is sorted in non-decreasing order from left to right and from top to bottom.\n    \"\"\"\n    m, n = len(matrix), len(matrix[0])\n    row, col = m - 1, 0\n    while row >= 0 and col < n:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            col += 1\n        else:\n            row -= 1\n    return False", "solution_func": "def g(matrix=[[1,3,5,7],[10,11,16,20],[23,30,34,60]], target=3):\n    return matrix, target", "map_ix": [1, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(num: int, nums=[3, 5, 7, 9, 11, 13, 15, 17]) -> bool:\n    \"\"\"Check if num is a multiple of any number in the given list\"\"\"\n    return any(num % n == 0 for n in nums)\ndef g(nums=[3, 5, 7, 9, 11, 13, 15, 17]):\n    return min(filter(lambda n: num % n == 0, nums))\nassert f(g())\n", "emb": null, "idx_generation": 128, "target_skills": null, "problem_func": "from typing import*\ndef f(num: int, nums=[3, 5, 7, 9, 11, 13, 15, 17]) -> bool:\n    \"\"\"Check if num is a multiple of any number in the given list\"\"\"\n    return any(num % n == 0 for n in nums)", "solution_func": "def g(nums=[3, 5, 7, 9, 11, 13, 15, 17]):\n    return min(filter(lambda n: num % n == 0, nums))", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, s_lower='hello world', s_upper='HELLO WORLD') -> bool:\n    \"\"\"Check if s is either the lowercase or uppercase version of the given strings\"\"\"\n    return s == s_lower or s == s_upper\ndef g(s_lower='hello world', s_upper='HELLO WORLD'):\n    return s_lower if s == s_upper else s_upper\nassert f(g())\n", "emb": null, "idx_generation": 128, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, s_lower='hello world', s_upper='HELLO WORLD') -> bool:\n    \"\"\"Check if s is either the lowercase or uppercase version of the given strings\"\"\"\n    return s == s_lower or s == s_upper", "solution_func": "def g(s_lower='hello world', s_upper='HELLO WORLD'):\n    return s_lower if s == s_upper else s_upper", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(lst: List[int], target: int, start=0, end=len(lst)-1) -> bool:\n    \"\"\"Check if the target number is in the given list using binary search\"\"\"\n    if start > end:\n        return False\n    mid = (start + end) // 2\n    if lst[mid] == target:\n        return True\n    elif lst[mid] > target:\n        return f(lst, target, start, mid-1)\n    else:\n        return f(lst, target, mid+1, end)\ndef g(target: int):\n    return lst.index(target)\nassert f(g())\n", "emb": null, "idx_generation": 128, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int], target: int, start=0, end=len(lst)-1) -> bool:\n    \"\"\"Check if the target number is in the given list using binary search\"\"\"\n    if start > end:\n        return False\n    mid = (start + end) // 2\n    if lst[mid] == target:\n        return True\n    elif lst[mid] > target:\n        return f(lst, target, start, mid-1)\n    else:\n        return f(lst, target, mid+1, end)", "solution_func": "def g(target: int):\n    return lst.index(target)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, w: float, a=10, b=20, c=30) -> bool:\n    \"\"\"Check if the given coordinates (x, y, z, w) are inside the cylinder with radius a, height b, and centered at (c, c, c)\"\"\"\n    distance = math.sqrt((x - c)**2 + (y - c)**2 + (z - c)**2)\n    return distance <= a and 0 <= w <= b\n\ndef g(x: float, y: float, z: float, w: float, a=10, b=20, c=30):\n    return x, y, z, w\n\nassert f(*g())\n", "emb": null, "idx_generation": 128, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, w: float, a=10, b=20, c=30) -> bool:\n    \"\"\"Check if the given coordinates (x, y, z, w) are inside the cylinder with radius a, height b, and centered at (c, c, c)\"\"\"\n    distance = math.sqrt((x - c)**2 + (y - c)**2 + (z - c)**2)\n    return distance <= a and 0 <= w <= b", "solution_func": "def g(x: float, y: float, z: float, w: float, a=10, b=20, c=30):\n    return x, y, z, w", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substring: str='abc') -> bool:\n    \"\"\"Check if the given substring is a permutation of s\"\"\"\n    return sorted(substring) == sorted(s)\n\ndef g(substring: str='abc'):\n    return substring\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 128, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substring: str='abc') -> bool:\n    \"\"\"Check if the given substring is a permutation of s\"\"\"\n    return sorted(substring) == sorted(s)", "solution_func": "def g(substring: str='abc'):\n    return substring", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, m: int, p: int) -> bool:\n    \"\"\"Check if the given numbers n, m, and p form a Pythagorean triple\"\"\"\n    return n**2 + m**2 == p**2\n\ndef g(n: int, m: int, p: int):\n    return n, m, p\n\nassert f(*g())\n", "emb": null, "idx_generation": 128, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m: int, p: int) -> bool:\n    \"\"\"Check if the given numbers n, m, and p form a Pythagorean triple\"\"\"\n    return n**2 + m**2 == p**2", "solution_func": "def g(n: int, m: int, p: int):\n    return n, m, p", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, m: int, target: int, nums: List[int]) -> bool:\n    \"\"\"\n    Combination Sum III\n\n    Given two integers n and m, find all unique combinations of n numbers in the range 1 to 9 (inclusive) such that\n    their sum equals the target value. Each number in the combination must be used exactly once and all\n    combinations should be sorted in ascending order.\n\n    Example:\n    n = 3\n    m = 7\n    target = 24\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    output: [[3, 8, 13], [4, 7, 13], [5, 6, 13], [4, 8, 12], [5, 7, 12], [6, 6, 12], [5, 8, 11], [6, 7, 11], [7, 7, 10]]\n    \"\"\"\n    def backtrack(start, path, target):\n        if target == 0 and len(path) == n:\n            combination.append(path)\n            return\n        for i in range(start, len(nums)):\n            if nums[i] > target:\n                break\n            if i > start and nums[i] == nums[i-1]:\n                continue\n            backtrack(i + 1, path + [nums[i]], target - nums[i])\n\n    combination = []\n    nums.sort()\n    backtrack(0, [], target)\n    return combination\ndef g(n = 3, m = 7, target = 24, nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return f(n, m, target, nums)\nassert f(g()) == True\n", "emb": null, "idx_generation": 128, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m: int, target: int, nums: List[int]) -> bool:\n    \"\"\"\n    Combination Sum III\n\n    Given two integers n and m, find all unique combinations of n numbers in the range 1 to 9 (inclusive) such that\n    their sum equals the target value. Each number in the combination must be used exactly once and all\n    combinations should be sorted in ascending order.\n\n    Example:\n    n = 3\n    m = 7\n    target = 24\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    output: [[3, 8, 13], [4, 7, 13], [5, 6, 13], [4, 8, 12], [5, 7, 12], [6, 6, 12], [5, 8, 11], [6, 7, 11], [7, 7, 10]]\n    \"\"\"\n    def backtrack(start, path, target):\n        if target == 0 and len(path) == n:\n            combination.append(path)\n            return\n        for i in range(start, len(nums)):\n            if nums[i] > target:\n                break\n            if i > start and nums[i] == nums[i-1]:\n                continue\n            backtrack(i + 1, path + [nums[i]], target - nums[i])\n\n    combination = []\n    nums.sort()\n    backtrack(0, [], target)\n    return combination", "solution_func": "def g(n = 3, m = 7, target = 24, nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return f(n, m, target, nums)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(numCourses: int, prerequisites: List[List[int]]) -> bool:\n    \"\"\"\n    Course Schedule\n\n    Given the total number of courses and a list of prerequisite pairs, determine if it is possible to finish all\n    courses. A prerequisite pair [a, b] represents that course b should be taken before course a. \n\n    Example:\n    numCourses = 4\n    prerequisites = [[1,0],[2,0],[3,1],[3,2]]\n    output: True\n    \"\"\"\n    graph = [[] for _ in range(numCourses)]\n    visited = [0 for _ in range(numCourses)]\n\n    def dfs(i):\n        if visited[i] == -1:  # cycle\n            return False\n        if visited[i] == 1:  # visited\n            return True\n        visited[i] = -1  # mark as visited\n        for j in graph[i]:\n            if not dfs(j):\n                return False\n        visited[i] = 1  # mark as finished\n        return True\n\n    for x, y in prerequisites:\n        graph[x].append(y)\n\n    for i in range(numCourses):\n        if not dfs(i):\n            return False\n    return True\ndef g(numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]):\n    return f(numCourses, prerequisites)\nassert f(g()) == True\n", "emb": null, "idx_generation": 128, "target_skills": null, "problem_func": "from typing import*\ndef f(numCourses: int, prerequisites: List[List[int]]) -> bool:\n    \"\"\"\n    Course Schedule\n\n    Given the total number of courses and a list of prerequisite pairs, determine if it is possible to finish all\n    courses. A prerequisite pair [a, b] represents that course b should be taken before course a. \n\n    Example:\n    numCourses = 4\n    prerequisites = [[1,0],[2,0],[3,1],[3,2]]\n    output: True\n    \"\"\"\n    graph = [[] for _ in range(numCourses)]\n    visited = [0 for _ in range(numCourses)]\n\n    def dfs(i):\n        if visited[i] == -1:  # cycle\n            return False\n        if visited[i] == 1:  # visited\n            return True\n        visited[i] = -1  # mark as visited\n        for j in graph[i]:\n            if not dfs(j):\n                return False\n        visited[i] = 1  # mark as finished\n        return True\n\n    for x, y in prerequisites:\n        graph[x].append(y)\n\n    for i in range(numCourses):\n        if not dfs(i):\n            return False\n    return True", "solution_func": "def g(numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]):\n    return f(numCourses, prerequisites)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    3Sum\n\n    Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique\n    triplets in the array which gives the sum of zero.\n\n    Example:\n    nums = [-1, 0, 1, 2, -1, -4]\n    target = 0\n    output: [[-1, -1, 2], [-1, 0, 1]]\n    \"\"\"\n    nums.sort()\n    res = []\n    for i in range(len(nums)-2):\n        if i > 0 and nums[i] == nums[i-1]:\n            continue\n        l, r = i+1, len(nums)-1\n        while l < r:\n            s = nums[i] + nums[l] + nums[r]\n            if s < target:\n                l += 1\n            elif s > target:\n                r -= 1\n            else:\n                res.append([nums[i], nums[l], nums[r]])\n                while l < r and nums[l] == nums[l+1]:\n                    l += 1\n                while l < r and nums[r] == nums[r-1]:\n                    r -= 1\n                l += 1\n                r -= 1\n    return res\ndef g(nums = [-1, 0, 1, 2, -1, -4], target = 0):\n    return f(nums, target)\nassert f(g()) == True\n", "emb": null, "idx_generation": 128, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    3Sum\n\n    Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique\n    triplets in the array which gives the sum of zero.\n\n    Example:\n    nums = [-1, 0, 1, 2, -1, -4]\n    target = 0\n    output: [[-1, -1, 2], [-1, 0, 1]]\n    \"\"\"\n    nums.sort()\n    res = []\n    for i in range(len(nums)-2):\n        if i > 0 and nums[i] == nums[i-1]:\n            continue\n        l, r = i+1, len(nums)-1\n        while l < r:\n            s = nums[i] + nums[l] + nums[r]\n            if s < target:\n                l += 1\n            elif s > target:\n                r -= 1\n            else:\n                res.append([nums[i], nums[l], nums[r]])\n                while l < r and nums[l] == nums[l+1]:\n                    l += 1\n                while l < r and nums[r] == nums[r-1]:\n                    r -= 1\n                l += 1\n                r -= 1\n    return res", "solution_func": "def g(nums = [-1, 0, 1, 2, -1, -4], target = 0):\n    return f(nums, target)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], k=3, target=7) -> bool:\n    \"\"\"Find if there exists a subarray with length k whose sum is equal to the target\"\"\"\n    for i in range(len(nums)-k+1):\n        if sum(nums[i:i+k]) == target:\n            return True\n    return False\n\ndef g(nums = [1, 2, 3, 4, 5, 6]):\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 128, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], k=3, target=7) -> bool:\n    \"\"\"Find if there exists a subarray with length k whose sum is equal to the target\"\"\"\n    for i in range(len(nums)-k+1):\n        if sum(nums[i:i+k]) == target:\n            return True\n    return False", "solution_func": "def g(nums = [1, 2, 3, 4, 5, 6]):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substr=\"abc\") -> bool:\n    \"\"\"Check if a substring is present in a string\"\"\"\n    return substr in s\ndef g(substr=\"abc\"):\n    return \"abcdefg\"\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 129, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substr=\"abc\") -> bool:\n    \"\"\"Check if a substring is present in a string\"\"\"\n    return substr in s", "solution_func": "def g(substr=\"abc\"):\n    return \"abcdefg\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Find two numbers in a list that add up to a target number\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(target=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n", "emb": null, "idx_generation": 129, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Find two numbers in a list that add up to a target number\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g(target=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=50, row=1) -> bool:\n    \"\"\"Check if a target number is present in a specific row of a matrix\"\"\"\n    return target in matrix[row]\ndef g(target=50, row=1):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n", "emb": null, "idx_generation": 129, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=50, row=1) -> bool:\n    \"\"\"Check if a target number is present in a specific row of a matrix\"\"\"\n    return target in matrix[row]", "solution_func": "def g(target=50, row=1):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, t: str, a: int, b: int, m: List[int], n: List[int]) -> bool:\n    \"\"\"\n    Determine if it is possible to reach string t from string s by performing the following operations:\n    - Replace the character at index i in s with the character at index j in s, where i is in list m and j is in list n\n    - Add the character at index i in s to the end of s, where i is in list m\n    - Remove the character at index i in s, where i is in list m\n    - The operations can be performed in any order and any number of times\n    - a and b are the number of operations in m and n, respectively\n    \"\"\"\n    if len(s) != len(t):\n        return False\n    for i in range(a):\n        if m[i] < 0 or m[i] >= len(s):\n            return False\n        if n[i] < 0 or n[i] >= len(s):\n            return False\n        s = s[:m[i]] + s[n[i]] + s[m[i]+1:]\n    for i in range(b):\n        if m[i] < 0 or m[i] >= len(s):\n            return False\n        s += s[m[i]]\n    for i in range(b):\n        if m[i] < 0 or m[i] >= len(s):\n            return False\n        s = s[:m[i]] + s[m[i]+1:]\n    return s == t\ndef g(s = \"abcde\", t = \"edcba\", a = 2, b = 1, m = [1, 3], n = [4, 2]):\n    for i in range(a):\n        if m[i] < 0 or m[i] >= len(s):\n            return False\n        if n[i] < 0 or n[i] >= len(s):\n            return False\n        s = s[:m[i]] + s[n[i]] + s[m[i]+1:]\n    for i in range(b):\n        if m[i] < 0 or m[i] >= len(s):\n            return False\n        s += s[m[i]]\n    for i in range(b):\n        if m[i] < 0 or m[i] >= len(s):\n            return False\n        s = s[:m[i]] + s[m[i]+1:]\n    return s\nassert f(g())\n", "emb": null, "idx_generation": 129, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, t: str, a: int, b: int, m: List[int], n: List[int]) -> bool:\n    \"\"\"\n    Determine if it is possible to reach string t from string s by performing the following operations:\n    - Replace the character at index i in s with the character at index j in s, where i is in list m and j is in list n\n    - Add the character at index i in s to the end of s, where i is in list m\n    - Remove the character at index i in s, where i is in list m\n    - The operations can be performed in any order and any number of times\n    - a and b are the number of operations in m and n, respectively\n    \"\"\"\n    if len(s) != len(t):\n        return False\n    for i in range(a):\n        if m[i] < 0 or m[i] >= len(s):\n            return False\n        if n[i] < 0 or n[i] >= len(s):\n            return False\n        s = s[:m[i]] + s[n[i]] + s[m[i]+1:]\n    for i in range(b):\n        if m[i] < 0 or m[i] >= len(s):\n            return False\n        s += s[m[i]]\n    for i in range(b):\n        if m[i] < 0 or m[i] >= len(s):\n            return False\n        s = s[:m[i]] + s[m[i]+1:]\n    return s == t", "solution_func": "def g(s = \"abcde\", t = \"edcba\", a = 2, b = 1, m = [1, 3], n = [4, 2]):\n    for i in range(a):\n        if m[i] < 0 or m[i] >= len(s):\n            return False\n        if n[i] < 0 or n[i] >= len(s):\n            return False\n        s = s[:m[i]] + s[n[i]] + s[m[i]+1:]\n    for i in range(b):\n        if m[i] < 0 or m[i] >= len(s):\n            return False\n        s += s[m[i]]\n    for i in range(b):\n        if m[i] < 0 or m[i] >= len(s):\n            return False\n        s = s[:m[i]] + s[m[i]+1:]\n    return s", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(n: int, k: int) -> bool:\n    \"\"\"\n    Determine if a positive integer n can be expressed as the sum of k positive integers where each integer is a power of 2.\n    \"\"\"\n    max_power = math.floor(math.log2(n))\n    if k > max_power + 1:\n        return False\n    if k == 1:\n        return n == 2**max_power\n    if k == 2:\n        return n % 2 == 0 or (n - 2) % 4 == 0\n    if k == 3:\n        return n % 2 == 1 or (n - 2) % 4 == 1\n    return True\ndef g(n = 10, k = 3):\n    max_power = math.floor(math.log2(n))\n    if k > max_power + 1:\n        return False\n    if k == 1:\n        return n == 2**max_power\n    if k == 2:\n        return n % 2 == 0 or (n - 2) % 4 == 0\n    if k == 3:\n        return n % 2 == 1 or (n - 2) % 4 == 1\n    return True\nassert f(g())\n", "emb": null, "idx_generation": 129, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, k: int) -> bool:\n    \"\"\"\n    Determine if a positive integer n can be expressed as the sum of k positive integers where each integer is a power of 2.\n    \"\"\"\n    max_power = math.floor(math.log2(n))\n    if k > max_power + 1:\n        return False\n    if k == 1:\n        return n == 2**max_power\n    if k == 2:\n        return n % 2 == 0 or (n - 2) % 4 == 0\n    if k == 3:\n        return n % 2 == 1 or (n - 2) % 4 == 1\n    return True", "solution_func": "def g(n = 10, k = 3):\n    max_power = math.floor(math.log2(n))\n    if k > max_power + 1:\n        return False\n    if k == 1:\n        return n == 2**max_power\n    if k == 2:\n        return n % 2 == 0 or (n - 2) % 4 == 0\n    if k == 3:\n        return n % 2 == 1 or (n - 2) % 4 == 1\n    return True", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(text: str, n: int) -> bool:\n    \"\"\"\n    Determine if a string contains the letter 'a' exactly n times.\n    \"\"\"\n    return text.count('a') == n\ndef g(text = \"banana\", n = 2):\n    return text.count('a')\nassert f(g())\n", "emb": null, "idx_generation": 129, "target_skills": null, "problem_func": "from typing import*\ndef f(text: str, n: int) -> bool:\n    \"\"\"\n    Determine if a string contains the letter 'a' exactly n times.\n    \"\"\"\n    return text.count('a') == n", "solution_func": "def g(text = \"banana\", n = 2):\n    return text.count('a')", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=18, index=0) -> bool:\n    \"\"\"Find the index of the target number in the list\"\"\"\n    return nums[index] == target\ndef g(target = 18, index = 0):\n    nums = [2, 5, 8, 12, 18, 22]\n    return nums[index]\nassert f(g())\n", "emb": null, "idx_generation": 129, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=18, index=0) -> bool:\n    \"\"\"Find the index of the target number in the list\"\"\"\n    return nums[index] == target", "solution_func": "def g(target = 18, index = 0):\n    nums = [2, 5, 8, 12, 18, 22]\n    return nums[index]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_sum=15) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the matrix that add up to the target sum\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            for k in range(i, len(matrix)):\n                for l in range(len(matrix[k])):\n                    if matrix[i][j] + matrix[k][l] == target_sum:\n                        return True\n    return False\ndef g(target_sum = 15):\n    matrix = [[2, 4, 6], [8, 10, 12], [14, 16, 18]]\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 129, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_sum=15) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the matrix that add up to the target sum\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            for k in range(i, len(matrix)):\n                for l in range(len(matrix[k])):\n                    if matrix[i][j] + matrix[k][l] == target_sum:\n                        return True\n    return False", "solution_func": "def g(target_sum = 15):\n    matrix = [[2, 4, 6], [8, 10, 12], [14, 16, 18]]\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(words: List[str], prefix='pre') -> bool:\n    \"\"\"Find if all words in the list start with the given prefix\"\"\"\n    for word in words:\n        if not word.startswith(prefix):\n            return False\n    return True\ndef g(prefix = 'pre'):\n    words = ['prefix', 'preference', 'preparation']\n    return words\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 129, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], prefix='pre') -> bool:\n    \"\"\"Find if all words in the list start with the given prefix\"\"\"\n    for word in words:\n        if not word.startswith(prefix):\n            return False\n    return True", "solution_func": "def g(prefix = 'pre'):\n    words = ['prefix', 'preference', 'preparation']\n    return words", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], k=3, target=20) -> bool:\n    \"\"\"Find if there exists a subset of the list of integers where the sum of the subset is equal to the target and\n    the length of the subset is greater than or equal to k.\n\n    Sample Input:\n    nums = [4, 6, 7, 8, 9, 10]\n    k = 3\n    target = 20\n\n    Sample Output:\n    True\n    \"\"\"\n    subsets = []\n    for i in range(1, len(nums) + 1):\n        subsets += list(itertools.combinations(nums, i))\n    for subset in subsets:\n        if sum(subset) == target and len(subset) >= k:\n            return True\n    return False\ndef g(nums = [4, 6, 7, 8, 9, 10], k = 3, target = 20):\n    return nums\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 129, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], k=3, target=20) -> bool:\n    \"\"\"Find if there exists a subset of the list of integers where the sum of the subset is equal to the target and\n    the length of the subset is greater than or equal to k.\n\n    Sample Input:\n    nums = [4, 6, 7, 8, 9, 10]\n    k = 3\n    target = 20\n\n    Sample Output:\n    True\n    \"\"\"\n    subsets = []\n    for i in range(1, len(nums) + 1):\n        subsets += list(itertools.combinations(nums, i))\n    for subset in subsets:\n        if sum(subset) == target and len(subset) >= k:\n            return True\n    return False", "solution_func": "def g(nums = [4, 6, 7, 8, 9, 10], k = 3, target = 20):\n    return nums", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(e: List[int], a=-8675309, b=-1234567, c=9876543, d=-2468135) -> bool:\n    \"\"\"\n    Check if the given point lies on the line.\n    Solution should be a boolean value.\n    \"\"\"\n    x, y = e\n    return a * x + b * y + c == d\ndef g(a=-8675309, b=-1234567, c=9876543, d=-2468135):\n    if b != 0:\n        x = 0\n        y = (d - a * x - c) / b\n    elif a != 0:\n        y = 0\n        x = (d - b * y - c) / a\n    else:\n        x = 0\n        y = 0\n    return [x, y]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 130, "target_skills": null, "problem_func": "from typing import*\ndef f(e: List[int], a=-8675309, b=-1234567, c=9876543, d=-2468135) -> bool:\n    \"\"\"\n    Check if the given point lies on the line.\n    Solution should be a boolean value.\n    \"\"\"\n    x, y = e\n    return a * x + b * y + c == d", "solution_func": "def g(a=-8675309, b=-1234567, c=9876543, d=-2468135):\n    if b != 0:\n        x = 0\n        y = (d - a * x - c) / b\n    elif a != 0:\n        y = 0\n        x = (d - b * y - c) / a\n    else:\n        x = 0\n        y = 0\n    return [x, y]", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that sum up to the target.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(nums=[]):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 130, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that sum up to the target.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(nums=[]):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, pattern=\"\") -> bool:\n    \"\"\"Check if the given string matches the pattern.\"\"\"\n    if len(s) != len(pattern):\n        return False\n    pattern_dict = {}\n    for i in range(len(s)):\n        if s[i] not in pattern_dict:\n            pattern_dict[s[i]] = pattern[i]\n        elif pattern_dict[s[i]] != pattern[i]:\n            return False\n    return True\ndef g(pattern=\"\"):\n    s = pattern.replace(\"a\", \"A\").replace(\"b\", \"B\").replace(\"c\", \"C\")\n    return s\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 130, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, pattern=\"\") -> bool:\n    \"\"\"Check if the given string matches the pattern.\"\"\"\n    if len(s) != len(pattern):\n        return False\n    pattern_dict = {}\n    for i in range(len(s)):\n        if s[i] not in pattern_dict:\n            pattern_dict[s[i]] = pattern[i]\n        elif pattern_dict[s[i]] != pattern[i]:\n            return False\n    return True", "solution_func": "def g(pattern=\"\"):\n    s = pattern.replace(\"a\", \"A\").replace(\"b\", \"B\").replace(\"c\", \"C\")\n    return s", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(num_list: List[int], target_sum: int) -> bool:\n    \"\"\"\n    Find a pair of numbers in the given list that add up to the target sum.\n    \"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] + num_list[j] == target_sum:\n                return True\n    return False\n\ndef g(num_list: List[int], target_sum: int):\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] + num_list[j] == target_sum:\n                return (num_list[i], num_list[j])\n    return None\n\nnum_list = [1, 2, 3, 4, 5]\ntarget_sum = 7\nassert f(g(num_list, target_sum), target_sum)\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 130, "target_skills": null, "problem_func": "from typing import*\ndef f(num_list: List[int], target_sum: int) -> bool:\n    \"\"\"\n    Find a pair of numbers in the given list that add up to the target sum.\n    \"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] + num_list[j] == target_sum:\n                return True\n    return False", "solution_func": "def g(num_list: List[int], target_sum: int):\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] + num_list[j] == target_sum:\n                return (num_list[i], num_list[j])\n    return None\n\nnum_list = [1, 2, 3, 4, 5]\ntarget_sum = 7", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(radius: float, height: float, volume: float) -> bool:\n    \"\"\"\n    Find if the volume of a cylinder with the given radius and height matches the given volume.\n    \"\"\"\n    calculated_volume = math.pi * (radius ** 2) * height\n    return abs(calculated_volume - volume) < 1e-06\n\ndef g(radius: float, height: float, volume: float):\n    calculated_volume = math.pi * (radius ** 2) * height\n    return calculated_volume\n\nradius = 2.0\nheight = 4.0\nvolume = 50.26548245743669\nassert f(g(radius, height, volume), volume)\n", "emb": null, "idx_generation": 130, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(radius: float, height: float, volume: float) -> bool:\n    \"\"\"\n    Find if the volume of a cylinder with the given radius and height matches the given volume.\n    \"\"\"\n    calculated_volume = math.pi * (radius ** 2) * height\n    return abs(calculated_volume - volume) < 1e-06", "solution_func": "def g(radius: float, height: float, volume: float):\n    calculated_volume = math.pi * (radius ** 2) * height\n    return calculated_volume\n\nradius = 2.0\nheight = 4.0\nvolume = 50.26548245743669", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date: str, days: int, new_date: str) -> bool:\n    \"\"\"\n    Find if the new date, obtained by adding the given number of days to the given date, matches the expected new date.\n    \"\"\"\n    original_date = datetime.strptime(date, \"%Y-%m-%d\")\n    expected_new_date = datetime.strptime(new_date, \"%Y-%m-%d\")\n    calculated_new_date = original_date + timedelta(days=days)\n    return calculated_new_date == expected_new_date\n\ndef g(date: str, days: int, new_date: str):\n    original_date = datetime.strptime(date, \"%Y-%m-%d\")\n    new_date = original_date + timedelta(days=days)\n    return new_date.strftime(\"%Y-%m-%d\")\n\ndate = \"2022-01-01\"\ndays = 10\nnew_date = \"2022-01-11\"\nassert f(g(date, days, new_date), days, new_date)\n", "emb": null, "idx_generation": 130, "target_skills": null, "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(date: str, days: int, new_date: str) -> bool:\n    \"\"\"\n    Find if the new date, obtained by adding the given number of days to the given date, matches the expected new date.\n    \"\"\"\n    original_date = datetime.strptime(date, \"%Y-%m-%d\")\n    expected_new_date = datetime.strptime(new_date, \"%Y-%m-%d\")\n    calculated_new_date = original_date + timedelta(days=days)\n    return calculated_new_date == expected_new_date", "solution_func": "def g(date: str, days: int, new_date: str):\n    original_date = datetime.strptime(date, \"%Y-%m-%d\")\n    new_date = original_date + timedelta(days=days)\n    return new_date.strftime(\"%Y-%m-%d\")\n\ndate = \"2022-01-01\"\ndays = 10\nnew_date = \"2022-01-11\"", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, n=5) -> bool:\n    \"\"\"Check if the sum of the squares of three numbers is equal to n\"\"\"\n    return math.isclose(x**2 + y**2 + z**2, n)\n\ndef g(n = 5):\n    x = 0\n    y = 0\n    z = math.sqrt(n)\n    return x, y, z\n\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 130, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, n=5) -> bool:\n    \"\"\"Check if the sum of the squares of three numbers is equal to n\"\"\"\n    return math.isclose(x**2 + y**2 + z**2, n)", "solution_func": "def g(n = 5):\n    x = 0\n    y = 0\n    z = math.sqrt(n)\n    return x, y, z", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date: str, t: int = 5) -> bool:\n    \"\"\"Check if the given date is t days after today\"\"\"\n    today = datetime.now().date()\n    given_date = datetime.strptime(date, '%Y-%m-%d').date()\n    return (given_date - today).days == t\n\ndef g(t = 5):\n    today = datetime.now().date()\n    given_date = today + timedelta(days=t)\n    return given_date.strftime('%Y-%m-%d')\n\nassert f(g())\n", "emb": null, "idx_generation": 130, "target_skills": null, "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(date: str, t: int = 5) -> bool:\n    \"\"\"Check if the given date is t days after today\"\"\"\n    today = datetime.now().date()\n    given_date = datetime.strptime(date, '%Y-%m-%d').date()\n    return (given_date - today).days == t", "solution_func": "def g(t = 5):\n    today = datetime.now().date()\n    given_date = today + timedelta(days=t)\n    return given_date.strftime('%Y-%m-%d')", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, m: int, factors=[2, 3, 5]) -> bool:\n    \"\"\"Check if the given number is divisible by all the factors\"\"\"\n    return all([n % factor == 0 for factor in factors])\n\ndef g(n = 10, m = 2):\n    return n * m\n\nassert f(g())\n", "emb": null, "idx_generation": 130, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m: int, factors=[2, 3, 5]) -> bool:\n    \"\"\"Check if the given number is divisible by all the factors\"\"\"\n    return all([n % factor == 0 for factor in factors])", "solution_func": "def g(n = 10, m = 2):\n    return n * m", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, target: int, axis=0) -> bool:\n    \"\"\"Check if the sum of elements along a given axis in a matrix is equal to the target\"\"\"\n    return np.sum(matrix, axis=axis) == target\n\ndef g(matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), target = 15, axis = 0):\n    return matrix\n\nassert f(g())\n", "emb": null, "idx_generation": 130, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, target: int, axis=0) -> bool:\n    \"\"\"Check if the sum of elements along a given axis in a matrix is equal to the target\"\"\"\n    return np.sum(matrix, axis=axis) == target", "solution_func": "def g(matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), target = 15, axis = 0):\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(numbers: List[int], target_sum: int) -> bool:\n    \"\"\"\n    Given a list of numbers, find if there exists a pair of numbers that sum up to the target_sum.\n    \"\"\"\n    complements = set()\n    for num in numbers:\n        complement = target_sum - num\n        if complement in complements:\n            return True\n        complements.add(num)\n    return False\n\ndef g(numbers=[1, 2, 3, 4, 5], target_sum=9):\n    \"\"\"\n    Return a list of numbers that sums up to the target_sum.\n    \"\"\"\n    return [target_sum - num for num in numbers if target_sum - num in numbers]\n\nassert f(g())\n", "emb": null, "idx_generation": 131, "target_skills": null, "problem_func": "from typing import*\ndef f(numbers: List[int], target_sum: int) -> bool:\n    \"\"\"\n    Given a list of numbers, find if there exists a pair of numbers that sum up to the target_sum.\n    \"\"\"\n    complements = set()\n    for num in numbers:\n        complement = target_sum - num\n        if complement in complements:\n            return True\n        complements.add(num)\n    return False", "solution_func": "def g(numbers=[1, 2, 3, 4, 5], target_sum=9):\n    \"\"\"\n    Return a list of numbers that sums up to the target_sum.\n    \"\"\"\n    return [target_sum - num for num in numbers if target_sum - num in numbers]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given three integers a, b, and c, find if they form a Pythagorean triple.\n    \"\"\"\n    return math.sqrt(a**2 + b**2) == c\n\ndef g(a=3, b=4):\n    \"\"\"\n    Given two integers a and b, return the third integer that forms a Pythagorean triple with a and b.\n    \"\"\"\n    return math.sqrt(a**2 + b**2)\n\nassert f(g(), 5)\n", "emb": null, "idx_generation": 131, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given three integers a, b, and c, find if they form a Pythagorean triple.\n    \"\"\"\n    return math.sqrt(a**2 + b**2) == c", "solution_func": "def g(a=3, b=4):\n    \"\"\"\n    Given two integers a and b, return the third integer that forms a Pythagorean triple with a and b.\n    \"\"\"\n    return math.sqrt(a**2 + b**2)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(dates: List[str]) -> bool:\n    \"\"\"\n    Given a list of dates in the format 'YYYY-MM-DD', find if the dates are in ascending order.\n    \"\"\"\n    parsed_dates = [datetime.strptime(date, '%Y-%m-%d') for date in dates]\n    return parsed_dates == sorted(parsed_dates)\n\ndef g():\n    \"\"\"\n    Return a list of dates in ascending order.\n    \"\"\"\n    return ['2022-01-01', '2022-01-31', '2022-02-01']\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0], "idx_generation": 131, "target_skills": null, "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(dates: List[str]) -> bool:\n    \"\"\"\n    Given a list of dates in the format 'YYYY-MM-DD', find if the dates are in ascending order.\n    \"\"\"\n    parsed_dates = [datetime.strptime(date, '%Y-%m-%d') for date in dates]\n    return parsed_dates == sorted(parsed_dates)", "solution_func": "def g():\n    \"\"\"\n    Return a list of dates in ascending order.\n    \"\"\"\n    return ['2022-01-01', '2022-01-31', '2022-02-01']", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the sum of the first n elements in the list is equal to n * (n + 1) / 2.\"\"\"\n    return sum(lst[:n]) == n * (n + 1) // 2\ndef g(lst=[1, 2, 3, 4, 5]):\n    return len(lst)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 131, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the sum of the first n elements in the list is equal to n * (n + 1) / 2.\"\"\"\n    return sum(lst[:n]) == n * (n + 1) // 2", "solution_func": "def g(lst=[1, 2, 3, 4, 5]):\n    return len(lst)", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, c=\"a\") -> bool:\n    \"\"\"Check if the character c is present in the string s.\"\"\"\n    return c in s\ndef g(c=\"a\"):\n    return c * 5\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 131, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, c=\"a\") -> bool:\n    \"\"\"Check if the character c is present in the string s.\"\"\"\n    return c in s", "solution_func": "def g(c=\"a\"):\n    return c * 5", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the sum of the last n elements in the list is equal to n * (n + 1) / 2.\"\"\"\n    return sum(lst[-n:]) == n * (n + 1) // 2\ndef g(lst=[1, 2, 3, 4, 5]):\n    return len(lst)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 131, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the sum of the last n elements in the list is equal to n * (n + 1) / 2.\"\"\"\n    return sum(lst[-n:]) == n * (n + 1) // 2", "solution_func": "def g(lst=[1, 2, 3, 4, 5]):\n    return len(lst)", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target_sum=20) -> bool:\n    \"\"\"Find two numbers in a list whose sum is equal to target_sum\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=20):\n    return [10, target_sum-10]\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 131, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=20) -> bool:\n    \"\"\"Find two numbers in a list whose sum is equal to target_sum\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False", "solution_func": "def g(target_sum=20):\n    return [10, target_sum-10]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_row=2, target_col=2) -> bool:\n    \"\"\"Check if a given element is present in a matrix\"\"\"\n    return matrix[target_row][target_col] == 7\n\ndef g(target_row=2, target_col=2):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\n\nassert f(g())\n", "emb": null, "idx_generation": 131, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_row=2, target_col=2) -> bool:\n    \"\"\"Check if a given element is present in a matrix\"\"\"\n    return matrix[target_row][target_col] == 7", "solution_func": "def g(target_row=2, target_col=2):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(word: str, target_word='python') -> bool:\n    \"\"\"Check if a word is an anagram of target_word\"\"\"\n    return sorted(word.lower()) == sorted(target_word)\n\ndef g(target_word='python'):\n    return 'typhon'\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 131, "target_skills": null, "problem_func": "from typing import*\ndef f(word: str, target_word='python') -> bool:\n    \"\"\"Check if a word is an anagram of target_word\"\"\"\n    return sorted(word.lower()) == sorted(target_word)", "solution_func": "def g(target_word='python'):\n    return 'typhon'", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\ndef f(num: int, n=10, limit=100) -> bool:\n    \"\"\"Check if the given number is a prime number\"\"\"\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(num)) + 1, 6):\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n    return True\n\ndef g(n=10, limit=100):\n    primes = []\n    num = 2\n    while len(primes) < n:\n        if f(num):\n            primes.append(num)\n        num += 1\n    return primes\n\nassert f(g())\n", "emb": null, "idx_generation": 131, "target_skills": null, "problem_func": "from typing import*\nimport math\ndef f(num: int, n=10, limit=100) -> bool:\n    \"\"\"Check if the given number is a prime number\"\"\"\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(num)) + 1, 6):\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n    return True", "solution_func": "def g(n=10, limit=100):\n    primes = []\n    num = 2\n    while len(primes) < n:\n        if f(num):\n            primes.append(num)\n        num += 1\n    return primes", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(a: str, b: str, c: str, d: str, e: str, f: str) -> bool:\n    \"\"\"Check if the strings a, b, c, d, e, and f are all palindromes\"\"\"\n    return all(s == s[::-1] for s in [a, b, c, d, e, f])\n    \ndef g(a: str, b: str, c: str, d: str, e: str, f: str):\n    return [a[::-1], b[::-1], c[::-1], d[::-1], e[::-1], f[::-1]]\n    \nassert f(*g())\n", "emb": null, "idx_generation": 132, "target_skills": null, "problem_func": "from typing import*\ndef f(a: str, b: str, c: str, d: str, e: str, f: str) -> bool:\n    \"\"\"Check if the strings a, b, c, d, e, and f are all palindromes\"\"\"\n    return all(s == s[::-1] for s in [a, b, c, d, e, f])", "solution_func": "def g(a: str, b: str, c: str, d: str, e: str, f: str):\n    return [a[::-1], b[::-1], c[::-1], d[::-1], e[::-1], f[::-1]]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if two numbers in the list nums sum up to the target\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n    \ndef g(target: int):\n    nums = [1, 5, 7, 11, 15, 20]\n    return (nums, target)\n    \nassert f(*g())\n", "emb": null, "idx_generation": 132, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if two numbers in the list nums sum up to the target\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(target: int):\n    nums = [1, 5, 7, 11, 15, 20]\n    return (nums, target)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(num: float, digits: int) -> bool:\n    \"\"\"Check if the square root of num has exactly digits decimal places\"\"\"\n    sqrt = math.sqrt(num)\n    return int(sqrt * 10**digits) % 10 == 0\n    \ndef g(num: float, digits: int):\n    return (num, digits)\n    \nassert f(*g())\n", "emb": null, "idx_generation": 132, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(num: float, digits: int) -> bool:\n    \"\"\"Check if the square root of num has exactly digits decimal places\"\"\"\n    sqrt = math.sqrt(num)\n    return int(sqrt * 10**digits) % 10 == 0", "solution_func": "def g(num: float, digits: int):\n    return (num, digits)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n=10, strings=['abcdefg', 'hijklmnop', 'qrstuvwxyz']) -> bool:\n    \"\"\"Check if the given string s occurs at least n times in the list of strings.\"\"\"\n    return strings.count(s) >= n\ndef g(n=10, strings=['abcdefg', 'hijklmnop', 'qrstuvwxyz']):\n    return strings[0] * n\nassert f(g())\n", "emb": null, "idx_generation": 132, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=10, strings=['abcdefg', 'hijklmnop', 'qrstuvwxyz']) -> bool:\n    \"\"\"Check if the given string s occurs at least n times in the list of strings.\"\"\"\n    return strings.count(s) >= n", "solution_func": "def g(n=10, strings=['abcdefg', 'hijklmnop', 'qrstuvwxyz']):\n    return strings[0] * n", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(names: List[str], target_length=5, max_count=3, words=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Check if there are at most max_count names in the list that have a length greater than or equal to target_length.\"\"\"\n    return sum(len(name) >= target_length for name in names) <= max_count\ndef g(target_length=5, max_count=3, words=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return [word for word in words if len(word) >= target_length][:max_count]\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 132, "target_skills": null, "problem_func": "from typing import*\ndef f(names: List[str], target_length=5, max_count=3, words=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Check if there are at most max_count names in the list that have a length greater than or equal to target_length.\"\"\"\n    return sum(len(name) >= target_length for name in names) <= max_count", "solution_func": "def g(target_length=5, max_count=3, words=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return [word for word in words if len(word) >= target_length][:max_count]", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, n=3) -> bool:\n    \"\"\"Check if there are exactly n numbers in the list that add up to target.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, n))\ndef g(target=100, n=3):\n    return [target // n] * n\nassert f(g())\n", "emb": null, "idx_generation": 132, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, n=3) -> bool:\n    \"\"\"Check if there are exactly n numbers in the list that add up to target.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, n))", "solution_func": "def g(target=100, n=3):\n    return [target // n] * n", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport datetime\n\ndef f(date: str, format='%Y-%m-%d') -> bool:\n    \"\"\"Check if a given date is a Friday the 13th.\"\"\"\n    dt = datetime.datetime.strptime(date, format)\n    return dt.weekday() == 4 and dt.day == 13\n\ndef g(format='%Y-%m-%d'):\n    return datetime.datetime.now().strftime(format)\n\nassert f(g())\n", "emb": null, "idx_generation": 132, "target_skills": null, "problem_func": "from typing import*\nimport datetime\n\ndef f(date: str, format='%Y-%m-%d') -> bool:\n    \"\"\"Check if a given date is a Friday the 13th.\"\"\"\n    dt = datetime.datetime.strptime(date, format)\n    return dt.weekday() == 4 and dt.day == 13", "solution_func": "def g(format='%Y-%m-%d'):\n    return datetime.datetime.now().strftime(format)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if a list of numbers contains two elements that add up to a given target.\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i + 1, len(nums)))\n\ndef g(target=10):\n    nums = random.sample(range(1, 20), 6)\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 132, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if a list of numbers contains two elements that add up to a given target.\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i + 1, len(nums)))", "solution_func": "def g(target=10):\n    nums = random.sample(range(1, 20), 6)\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substr='python') -> bool:\n    \"\"\"Check if a given string contains a specific substring.\"\"\"\n    return substr in s\n\ndef g(substr='python'):\n    return 'I love programming in ' + substr\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 132, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substr='python') -> bool:\n    \"\"\"Check if a given string contains a specific substring.\"\"\"\n    return substr in s", "solution_func": "def g(substr='python'):\n    return 'I love programming in ' + substr", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(num: int, digits: int, lower: int, upper: int) -> bool:\n    \"\"\"Check if the number is a perfect square within the given range\"\"\"\n    return lower <= math.isqrt(num) <= upper and len(str(num)) == digits\ndef g(digits: int = 3, lower: int = 10, upper: int = 100):\n    num = lower\n    while num <= upper:\n        if math.isqrt(num) ** 2 == num:\n            return num\n        num += 1\n    return None\nassert f(g())\n", "emb": null, "idx_generation": 132, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(num: int, digits: int, lower: int, upper: int) -> bool:\n    \"\"\"Check if the number is a perfect square within the given range\"\"\"\n    return lower <= math.isqrt(num) <= upper and len(str(num)) == digits", "solution_func": "def g(digits: int = 3, lower: int = 10, upper: int = 100):\n    num = lower\n    while num <= upper:\n        if math.isqrt(num) ** 2 == num:\n            return num\n        num += 1\n    return None", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target: int) -> bool:\n    \"\"\"Check if the sum of any two elements in the array equals the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(arr: np.ndarray, target: int):\n    return arr\n\n# Test case\narr = np.array([1, 2, 3, 4, 5])\ntarget = 9\nassert f(g(arr, target), target)\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 133, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target: int) -> bool:\n    \"\"\"Check if the sum of any two elements in the array equals the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g(arr: np.ndarray, target: int):\n    return arr\n\n# Test case\narr = np.array([1, 2, 3, 4, 5])\ntarget = 9", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"Check if the string contains a repeated substring of length n.\"\"\"\n    for i in range(len(s) - 2 * n + 1):\n        if s[i:i+n] == s[i+n:i+2*n]:\n            return True\n    return False\n\ndef g(s: str, n: int):\n    return s\n\n# Test case\ns = \"ababab\"\nn = 2\nassert f(g(s, n), n)\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 133, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"Check if the string contains a repeated substring of length n.\"\"\"\n    for i in range(len(s) - 2 * n + 1):\n        if s[i:i+n] == s[i+n:i+2*n]:\n            return True\n    return False", "solution_func": "def g(s: str, n: int):\n    return s\n\n# Test case\ns = \"ababab\"\nn = 2", "map_ix": [0, 0, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=100, b=200, c=300) -> bool:\n    \"\"\"Check if a number is divisible by a, b, and c.\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0\n\ndef g(a=100, b=200, c=300):\n    return a * b * c\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 133, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=100, b=200, c=300) -> bool:\n    \"\"\"Check if a number is divisible by a, b, and c.\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0", "solution_func": "def g(a=100, b=200, c=300):\n    return a * b * c", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer k, return True if there exists any sublist of the given list\n    that sums up to the target integer, otherwise return False.\n    \"\"\"\n    def subset_sum(arr, n, k):\n        if k == 0:\n            return True\n        if n == 0 and k != 0:\n            return False\n        if arr[n-1] > k:\n            return subset_sum(arr, n-1, k)\n        return subset_sum(arr, n-1, k) or subset_sum(arr, n-1, k-arr[n-1])\n\n    return subset_sum(nums, len(nums), k)\ndef g(k = 3):\n    return [1, 2, 4, 7]\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 133, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer k, return True if there exists any sublist of the given list\n    that sums up to the target integer, otherwise return False.\n    \"\"\"\n    def subset_sum(arr, n, k):\n        if k == 0:\n            return True\n        if n == 0 and k != 0:\n            return False\n        if arr[n-1] > k:\n            return subset_sum(arr, n-1, k)\n        return subset_sum(arr, n-1, k) or subset_sum(arr, n-1, k-arr[n-1])\n\n    return subset_sum(nums, len(nums), k)", "solution_func": "def g(k = 3):\n    return [1, 2, 4, 7]", "map_ix": [1, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, k=2) -> bool:\n    \"\"\"\n    Given a string s and an integer k, return True if there exists any substring of length k in the given string\n    that is a palindrome, otherwise return False.\n    \"\"\"\n    def is_palindrome(sub):\n        return sub == sub[::-1]\n\n    for i in range(len(s) - k + 1):\n        if is_palindrome(s[i:i+k]):\n            return True\n    return False\ndef g(k = 2):\n    return \"racecar\"\nassert f(g())\n", "emb": null, "idx_generation": 133, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, k=2) -> bool:\n    \"\"\"\n    Given a string s and an integer k, return True if there exists any substring of length k in the given string\n    that is a palindrome, otherwise return False.\n    \"\"\"\n    def is_palindrome(sub):\n        return sub == sub[::-1]\n\n    for i in range(len(s) - k + 1):\n        if is_palindrome(s[i:i+k]):\n            return True\n    return False", "solution_func": "def g(k = 2):\n    return \"racecar\"", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=9) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer, return True if there exists any pair of integers in the list\n    that sums up to the target integer, otherwise return False.\n    \"\"\"\n    def two_sum(arr, target):\n        seen = set()\n        for num in arr:\n            if target - num in seen:\n                return True\n            seen.add(num)\n        return False\n\n    return two_sum(nums, target)\ndef g(target = 9):\n    return [2, 4, 6, 8]\nassert f(g())\n", "emb": null, "idx_generation": 133, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=9) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer, return True if there exists any pair of integers in the list\n    that sums up to the target integer, otherwise return False.\n    \"\"\"\n    def two_sum(arr, target):\n        seen = set()\n        for num in arr:\n            if target - num in seen:\n                return True\n            seen.add(num)\n        return False\n\n    return two_sum(nums, target)", "solution_func": "def g(target = 9):\n    return [2, 4, 6, 8]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(lst: List[str]) -> bool:\n    \"\"\"Check if there is a palindrome string in the given list.\"\"\"\n    for s in lst:\n        if s == s[::-1]:\n            return True\n    return False\ndef g():\n    return [\"hello\", \"world\", \"racecar\"]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 133, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[str]) -> bool:\n    \"\"\"Check if there is a palindrome string in the given list.\"\"\"\n    for s in lst:\n        if s == s[::-1]:\n            return True\n    return False", "solution_func": "def g():\n    return [\"hello\", \"world\", \"racecar\"]", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(s: str, target: int) -> bool:\n    \"\"\"Check if the sum of the ASCII values of the characters in the string is equal to the target value.\"\"\"\n    return sum(ord(c) for c in s) == target\ndef g(target: int):\n    import random\n    s = ''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=10))\n    return s\nassert f(g(target=200))\n", "emb": null, "idx_generation": 133, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(s: str, target: int) -> bool:\n    \"\"\"Check if the sum of the ASCII values of the characters in the string is equal to the target value.\"\"\"\n    return sum(ord(c) for c in s) == target", "solution_func": "def g(target: int):\n    import random\n    s = ''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=10))\n    return s", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if the list contains at least three consecutive integers.\"\"\"\n    return any(lst[i] == lst[i+1] - 1 == lst[i+2] - 2 for i in range(len(lst)-2))\ndef g():\n    return [1, 2, 3, 4, 5, 7]\nassert f(g())\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 133, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if the list contains at least three consecutive integers.\"\"\"\n    return any(lst[i] == lst[i+1] - 1 == lst[i+2] - 2 for i in range(len(lst)-2))", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 7]", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums: List[int], target: int):\n    return nums, target\n\nassert f(g())\n", "emb": null, "idx_generation": 133, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(nums: List[int], target: int):\n    return nums, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(x: int, y: int, z: int, a=2, b=3, c=4) -> bool:\n    \"\"\"\n    Check if (x^a + y^b + z^c) is divisible by (a+b+c)\n    \"\"\"\n    return (x**a + y**b + z**c) % (a+b+c) == 0\n\ndef g(a=2, b=3, c=4):\n    x = a + b + c\n    y = math.ceil((a + b + c) / 2)\n    z = math.floor((a + b + c) / 2)\n    return x, y, z\n\nassert f(*g())\n", "emb": null, "idx_generation": 134, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: int, y: int, z: int, a=2, b=3, c=4) -> bool:\n    \"\"\"\n    Check if (x^a + y^b + z^c) is divisible by (a+b+c)\n    \"\"\"\n    return (x**a + y**b + z**c) % (a+b+c) == 0", "solution_func": "def g(a=2, b=3, c=4):\n    x = a + b + c\n    y = math.ceil((a + b + c) / 2)\n    z = math.floor((a + b + c) / 2)\n    return x, y, z", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(lst: List[int], n=10) -> bool:\n    \"\"\"\n    Check if the sum of the first n elements in lst is equal to the sum of the last n elements in lst\n    \"\"\"\n    return sum(lst[:n]) == sum(lst[-n:])\n\ndef g(n=10):\n    lst = [random.randint(0, 100) for _ in range(n*2)]\n    return lst\n\nassert f(g())\n", "emb": null, "idx_generation": 134, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(lst: List[int], n=10) -> bool:\n    \"\"\"\n    Check if the sum of the first n elements in lst is equal to the sum of the last n elements in lst\n    \"\"\"\n    return sum(lst[:n]) == sum(lst[-n:])", "solution_func": "def g(n=10):\n    lst = [random.randint(0, 100) for _ in range(n*2)]\n    return lst", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"\n    Check if the string s contains at least n consecutive vowels\n    \"\"\"\n    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n            if count == n:\n                return True\n        else:\n            count = 0\n    return False\n\ndef g(n=3):\n    vowels = \"aeiou\"\n    s = \"\"\n    for _ in range(n-1):\n        s += random.choice(vowels)\n    s += \"x\" + random.choice(vowels)\n    return s\n\nassert f(g())\n", "emb": null, "idx_generation": 134, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"\n    Check if the string s contains at least n consecutive vowels\n    \"\"\"\n    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n            if count == n:\n                return True\n        else:\n            count = 0\n    return False", "solution_func": "def g(n=3):\n    vowels = \"aeiou\"\n    s = \"\"\n    for _ in range(n-1):\n        s += random.choice(vowels)\n    s += \"x\" + random.choice(vowels)\n    return s", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=3, b=25) -> bool:\n    \"\"\"Check if the value of x lies within the range defined by a and b\"\"\"\n    return a <= x <= b\n\ndef g(a=3, b=25):\n    x = math.sqrt(a * b)\n    return x\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 134, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, a=3, b=25) -> bool:\n    \"\"\"Check if the value of x lies within the range defined by a and b\"\"\"\n    return a <= x <= b", "solution_func": "def g(a=3, b=25):\n    x = math.sqrt(a * b)\n    return x", "map_ix": [1, 1, 0, 1, 0, 1, 0, 0, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\n\ndef f(li: List[int], a=5) -> bool:\n    \"\"\"Check if the list contains any duplicate elements\"\"\"\n    return len(li) == len(set(li))\n\ndef g(a=5):\n    li = random.sample(range(1, a+1), a)\n    return li\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 134, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(li: List[int], a=5) -> bool:\n    \"\"\"Check if the list contains any duplicate elements\"\"\"\n    return len(li) == len(set(li))", "solution_func": "def g(a=5):\n    li = random.sample(range(1, a+1), a)\n    return li", "map_ix": [1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport datetime\n\ndef f(dt: datetime.datetime, a=2022) -> bool:\n    \"\"\"Check if the year of the given datetime is equal to a\"\"\"\n    return dt.year == a\n\ndef g(a=2022):\n    dt = datetime.datetime.now()\n    dt = dt.replace(year=a)\n    return dt\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 134, "target_skills": null, "problem_func": "from typing import*\nimport datetime\n\ndef f(dt: datetime.datetime, a=2022) -> bool:\n    \"\"\"Check if the year of the given datetime is equal to a\"\"\"\n    return dt.year == a", "solution_func": "def g(a=2022):\n    dt = datetime.datetime.now()\n    dt = dt.replace(year=a)\n    return dt", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target='hello world', substring='hello') -> bool:\n    \"\"\"Check if the target string contains the given substring.\"\"\"\n    return substring in target\ndef g(target='hello world', substring='hello'):\n    return target\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 134, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='hello world', substring='hello') -> bool:\n    \"\"\"Check if the target string contains the given substring.\"\"\"\n    return substring in target", "solution_func": "def g(target='hello world', substring='hello'):\n    return target", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, target=10, threshold=5) -> bool:\n    \"\"\"Check if the given number is within the threshold of the target number.\"\"\"\n    return abs(target - n) <= threshold\ndef g(target=10, threshold=5):\n    return target\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 134, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, target=10, threshold=5) -> bool:\n    \"\"\"Check if the given number is within the threshold of the target number.\"\"\"\n    return abs(target - n) <= threshold", "solution_func": "def g(target=10, threshold=5):\n    return target", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport datetime\n\ndef f(dt: datetime.datetime, year=2022, month=1, day=1) -> bool:\n    \"\"\"Check if the given datetime object falls on the specified date.\"\"\"\n    return dt.year == year and dt.month == month and dt.day == day\ndef g(year=2022, month=1, day=1):\n    return datetime.datetime(year, month, day)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 134, "target_skills": null, "problem_func": "from typing import*\nimport datetime\n\ndef f(dt: datetime.datetime, year=2022, month=1, day=1) -> bool:\n    \"\"\"Check if the given datetime object falls on the specified date.\"\"\"\n    return dt.year == year and dt.month == month and dt.day == day", "solution_func": "def g(year=2022, month=1, day=1):\n    return datetime.datetime(year, month, day)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target='python', n=3) -> bool:\n    \"\"\"Check if a given string contains a target substring n times\"\"\"\n    return s.count(target) == n\ndef g(target='python', n=3):\n    return target * n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 134, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='python', n=3) -> bool:\n    \"\"\"Check if a given string contains a target substring n times\"\"\"\n    return s.count(target) == n", "solution_func": "def g(target='python', n=3):\n    return target * n", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(li: List[int], target_sum=100) -> bool:\n    \"\"\"Find a list where the sum of its elements is equal to the target sum\"\"\"\n    return sum(li) == target_sum\ndef g(target_sum=100):\n    return [i for i in range(target_sum)]\nassert f(g())\n", "emb": null, "idx_generation": 135, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(li: List[int], target_sum=100) -> bool:\n    \"\"\"Find a list where the sum of its elements is equal to the target sum\"\"\"\n    return sum(li) == target_sum", "solution_func": "def g(target_sum=100):\n    return [i for i in range(target_sum)]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(li: List[int], target_sum=100) -> bool:\n    \"\"\"Find a list where the sum of its elements is equal to the target sum\"\"\"\n    return sum(li) == target_sum\ndef g(target_sum=100):\n    return [target_sum // 2] * 2\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 135, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(li: List[int], target_sum=100) -> bool:\n    \"\"\"Find a list where the sum of its elements is equal to the target sum\"\"\"\n    return sum(li) == target_sum", "solution_func": "def g(target_sum=100):\n    return [target_sum // 2] * 2", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(li: List[int], target_sum=100) -> bool:\n    \"\"\"Find a list where the sum of its elements is equal to the target sum\"\"\"\n    return sum(li) == target_sum\ndef g(target_sum=100):\n    return [i for i in range(1, target_sum, 2)]\nassert f(g())\n", "emb": null, "idx_generation": 135, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(li: List[int], target_sum=100) -> bool:\n    \"\"\"Find a list where the sum of its elements is equal to the target sum\"\"\"\n    return sum(li) == target_sum", "solution_func": "def g(target_sum=100):\n    return [i for i in range(1, target_sum, 2)]", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int, n=3) -> bool:\n    \"\"\"Find n numbers in the list that add up to the target\"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, n):\n        if sum(combo) == target:\n            return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5], target=9, n=3):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 135, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int, n=3) -> bool:\n    \"\"\"Find n numbers in the list that add up to the target\"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, n):\n        if sum(combo) == target:\n            return True\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=9, n=3):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(string: str, pattern: str) -> bool:\n    \"\"\"Check if the pattern appears in the string\"\"\"\n    return pattern in string\ndef g(string='hello world', pattern='hello'):\n    return string\nassert f(g())\n", "emb": null, "idx_generation": 135, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, pattern: str) -> bool:\n    \"\"\"Check if the pattern appears in the string\"\"\"\n    return pattern in string", "solution_func": "def g(string='hello world', pattern='hello'):\n    return string", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], n=2) -> bool:\n    \"\"\"Check if there are n consecutive numbers in the list\"\"\"\n    nums.sort()\n    for i in range(len(nums) - n + 1):\n        if nums[i] + n - 1 == nums[i + n - 1]:\n            return True\n    return False\ndef g(nums=[1, 2, 3, 5, 6, 7], n=2):\n    return nums\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 135, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], n=2) -> bool:\n    \"\"\"Check if there are n consecutive numbers in the list\"\"\"\n    nums.sort()\n    for i in range(len(nums) - n + 1):\n        if nums[i] + n - 1 == nums[i + n - 1]:\n            return True\n    return False", "solution_func": "def g(nums=[1, 2, 3, 5, 6, 7], n=2):\n    return nums", "map_ix": [1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, a=7, b=3, c=2) -> bool:\n    \"\"\"Check if a number is a perfect square\"\"\"\n    return n == a ** b and b == c ** 2\ndef g(a = 7, b = 3, c = 2):\n    return a ** b\nassert f(g())\n", "emb": null, "idx_generation": 135, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=7, b=3, c=2) -> bool:\n    \"\"\"Check if a number is a perfect square\"\"\"\n    return n == a ** b and b == c ** 2", "solution_func": "def g(a = 7, b = 3, c = 2):\n    return a ** b", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\ndef f(num: float, a=12) -> bool:\n    \"\"\"Check if a number is an integer\"\"\"\n    return math.isclose(num, a) and num % a == 0\ndef g(a = 12):\n    return int(a)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 135, "target_skills": null, "problem_func": "from typing import*\nimport math\ndef f(num: float, a=12) -> bool:\n    \"\"\"Check if a number is an integer\"\"\"\n    return math.isclose(num, a) and num % a == 0", "solution_func": "def g(a = 12):\n    return int(a)", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, a='race', b='car') -> bool:\n    \"\"\"Check if two strings are anagrams of each other\"\"\"\n    return sorted(s) == sorted(a) and sorted(s) == sorted(b)\ndef g(a = 'race', b = 'car'):\n    return a + b\nassert f(g())\n", "emb": null, "idx_generation": 135, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, a='race', b='car') -> bool:\n    \"\"\"Check if two strings are anagrams of each other\"\"\"\n    return sorted(s) == sorted(a) and sorted(s) == sorted(b)", "solution_func": "def g(a = 'race', b = 'car'):\n    return a + b", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target='hello', length=5) -> bool:\n    \"\"\"\n    Given a string s and a target string, return True if the target string is a substring of s with a length\n    equal to the specified length.\n    \"\"\"\n    return target in [s[i:i+length] for i in range(len(s)-length+1)]\ndef g(target='hello', length=5):\n    return target\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 135, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='hello', length=5) -> bool:\n    \"\"\"\n    Given a string s and a target string, return True if the target string is a substring of s with a length\n    equal to the specified length.\n    \"\"\"\n    return target in [s[i:i+length] for i in range(len(s)-length+1)]", "solution_func": "def g(target='hello', length=5):\n    return target", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"\n    Check if there exists a pair of integers in the list whose sum is equal to the target.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    \"\"\"\n    Return the list of integers.\n    \"\"\"\n    return arr\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 136, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"\n    Check if there exists a pair of integers in the list whose sum is equal to the target.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g(arr: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    \"\"\"\n    Return the list of integers.\n    \"\"\"\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"\n    Check if the length of the string is equal to n.\n    \"\"\"\n    return len(s) == n\n\ndef g(s: str = \"Hello World\"):\n    \"\"\"\n    Return the string.\n    \"\"\"\n    return s\n\nassert f(g())\n", "emb": null, "idx_generation": 136, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"\n    Check if the length of the string is equal to n.\n    \"\"\"\n    return len(s) == n", "solution_func": "def g(s: str = \"Hello World\"):\n    \"\"\"\n    Return the string.\n    \"\"\"\n    return s", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Check if a^2 + b^2 = c^2, using the Pythagorean theorem.\n    \"\"\"\n    return math.isclose(a**2 + b**2, c**2, rel_tol=1e-9)\n\ndef g(a: int = 3, b: int = 4, c: int = 5):\n    \"\"\"\n    Return the triple of integers.\n    \"\"\"\n    return a, b, c\n\nassert f(g())\n", "emb": null, "idx_generation": 136, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Check if a^2 + b^2 = c^2, using the Pythagorean theorem.\n    \"\"\"\n    return math.isclose(a**2 + b**2, c**2, rel_tol=1e-9)", "solution_func": "def g(a: int = 3, b: int = 4, c: int = 5):\n    \"\"\"\n    Return the triple of integers.\n    \"\"\"\n    return a, b, c", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\n\ndef f(num_list: List[int], target: int) -> bool:\n    \"\"\"\n    Find a subset of numbers in the given list that add up to the target number.\n    \"\"\"\n    def subset_sum(numbers, target, partial=[]):\n        s = sum(partial)\n\n        if s == target:\n            return True\n        if s > target:\n            return False\n\n        for i in range(len(numbers)):\n            n = numbers[i]\n            remaining = numbers[i+1:]\n            if subset_sum(remaining, target, partial + [n]):\n                return True\n        return False\n\n    return subset_sum(num_list, target)\n    \ndef g():\n    num_list = random.sample(range(1, 11), random.randint(2, 5))\n    target = random.randint(1, sum(num_list))\n    return num_list, target\n\nassert f(*g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 136, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(num_list: List[int], target: int) -> bool:\n    \"\"\"\n    Find a subset of numbers in the given list that add up to the target number.\n    \"\"\"\n    def subset_sum(numbers, target, partial=[]):\n        s = sum(partial)\n\n        if s == target:\n            return True\n        if s > target:\n            return False\n\n        for i in range(len(numbers)):\n            n = numbers[i]\n            remaining = numbers[i+1:]\n            if subset_sum(remaining, target, partial + [n]):\n                return True\n        return False\n\n    return subset_sum(num_list, target)", "solution_func": "def g():\n    num_list = random.sample(range(1, 11), random.randint(2, 5))\n    target = random.randint(1, sum(num_list))\n    return num_list, target", "map_ix": [1, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\nimport math\n\ndef f(n: int, x: int) -> bool:\n    \"\"\"\n    Find whether the given number is a perfect power of another number.\n    \"\"\"\n    if n < 1:\n        return False\n    if n == 1:\n        return True\n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        p = i\n        while p <= n:\n            p *= i\n            if p == n:\n                return True\n    return False\n\ndef g():\n    n = random.randint(1, 100)\n    x = random.randint(2, 10)\n    return n, x\n\nassert f(*g())\n", "emb": null, "idx_generation": 136, "target_skills": null, "problem_func": "import random\nfrom typing import*\nimport math\n\ndef f(n: int, x: int) -> bool:\n    \"\"\"\n    Find whether the given number is a perfect power of another number.\n    \"\"\"\n    if n < 1:\n        return False\n    if n == 1:\n        return True\n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        p = i\n        while p <= n:\n            p *= i\n            if p == n:\n                return True\n    return False", "solution_func": "def g():\n    n = random.randint(1, 100)\n    x = random.randint(2, 10)\n    return n, x", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, pattern: str) -> bool:\n    \"\"\"\n    Find whether the given string matches the given pattern.\n    The pattern consists of lowercase letters and the special character '.' which can match any single character.\n    \"\"\"\n    if len(s) != len(pattern):\n        return False\n\n    for i in range(len(s)):\n        if pattern[i] != '.' and s[i] != pattern[i]:\n            return False\n    return True\n\ndef g():\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    pattern = \"\"\n    for i in range(len(s)):\n        if i % 2 == 0:\n            pattern += s[i]\n        else:\n            pattern += \".\"\n    return s, pattern\n\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 136, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, pattern: str) -> bool:\n    \"\"\"\n    Find whether the given string matches the given pattern.\n    The pattern consists of lowercase letters and the special character '.' which can match any single character.\n    \"\"\"\n    if len(s) != len(pattern):\n        return False\n\n    for i in range(len(s)):\n        if pattern[i] != '.' and s[i] != pattern[i]:\n            return False\n    return True", "solution_func": "def g():\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    pattern = \"\"\n    for i in range(len(s)):\n        if i % 2 == 0:\n            pattern += s[i]\n        else:\n            pattern += \".\"\n    return s, pattern", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, target_length=10) -> bool:\n    \"\"\"Check if a string has a palindrome substring of a certain length.\"\"\"\n    return any((s[i:i+target_length] == s[i:i+target_length][::-1] for i in range(len(s) - target_length + 1)))\ndef g(target_length = 10):\n    return \"abcdefghijklmnopqrstuvwxyz\" * (target_length // 26 + 1)\nassert f(g())\n", "emb": null, "idx_generation": 136, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target_length=10) -> bool:\n    \"\"\"Check if a string has a palindrome substring of a certain length.\"\"\"\n    return any((s[i:i+target_length] == s[i:i+target_length][::-1] for i in range(len(s) - target_length + 1)))", "solution_func": "def g(target_length = 10):\n    return \"abcdefghijklmnopqrstuvwxyz\" * (target_length // 26 + 1)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_sum=100) -> bool:\n    \"\"\"Check if there exists a submatrix whose sum is equal to a target value.\"\"\"\n    rows, cols = len(matrix), len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            for k in range(i, rows):\n                for l in range(j, cols):\n                    submatrix_sum = sum((matrix[m][n] for m in range(i, k+1) for n in range(j, l+1)))\n                    if submatrix_sum == target_sum:\n                        return True\n    return False\ndef g(target_sum = 100):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n", "emb": null, "idx_generation": 136, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_sum=100) -> bool:\n    \"\"\"Check if there exists a submatrix whose sum is equal to a target value.\"\"\"\n    rows, cols = len(matrix), len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            for k in range(i, rows):\n                for l in range(j, cols):\n                    submatrix_sum = sum((matrix[m][n] for m in range(i, k+1) for n in range(j, l+1)))\n                    if submatrix_sum == target_sum:\n                        return True\n    return False", "solution_func": "def g(target_sum = 100):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int, k=3) -> bool:\n    \"\"\"Check if there exists k numbers in a list whose sum is equal to a target value.\"\"\"\n    def backtrack(curr_sum, start, count):\n        if count == k and curr_sum == target:\n            return True\n        if count > k or curr_sum > target:\n            return False\n        for i in range(start, len(nums)):\n            if backtrack(curr_sum + nums[i], i + 1, count + 1):\n                return True\n        return False\n    return backtrack(0, 0, 0)\ndef g(target = 10, k = 3):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n", "emb": null, "idx_generation": 136, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int, k=3) -> bool:\n    \"\"\"Check if there exists k numbers in a list whose sum is equal to a target value.\"\"\"\n    def backtrack(curr_sum, start, count):\n        if count == k and curr_sum == target:\n            return True\n        if count > k or curr_sum > target:\n            return False\n        for i in range(start, len(nums)):\n            if backtrack(curr_sum + nums[i], i + 1, count + 1):\n                return True\n        return False\n    return backtrack(0, 0, 0)", "solution_func": "def g(target = 10, k = 3):\n    return [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that sum up to the target value.\"\"\"\n    return any(target - num in arr for num in arr)\ndef g(arr: List[int], target: int):\n    return [(i,j) for i in range(len(arr)) for j in range(i+1, len(arr)) if arr[i] + arr[j] == target]\nassert f(g())\n", "emb": null, "idx_generation": 136, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that sum up to the target value.\"\"\"\n    return any(target - num in arr for num in arr)", "solution_func": "def g(arr: List[int], target: int):\n    return [(i,j) for i in range(len(arr)) for j in range(i+1, len(arr)) if arr[i] + arr[j] == target]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(lst: list, target: int, start=0, end=None) -> bool:\n    \"\"\"Check if the target number is in the list within the specified range\"\"\"\n    if end is None:\n        end = len(lst)\n    sublist = lst[start:end]\n    return target in sublist\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9], target=5, start=0, end=None):\n    return lst, target, start, end\nassert f(*g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 137, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: list, target: int, start=0, end=None) -> bool:\n    \"\"\"Check if the target number is in the list within the specified range\"\"\"\n    if end is None:\n        end = len(lst)\n    sublist = lst[start:end]\n    return target in sublist", "solution_func": "def g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9], target=5, start=0, end=None):\n    return lst, target, start, end", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: list, n: int, row=True) -> bool:\n    \"\"\"Check if the given number is present in the matrix\"\"\"\n    if row:\n        for r in matrix:\n            if n in r:\n                return True\n    else:\n        for i in range(len(matrix)):\n            column = [row[i] for row in matrix]\n            if n in column:\n                return True\n    return False\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], n=5, row=True):\n    return matrix, n, row\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 137, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: list, n: int, row=True) -> bool:\n    \"\"\"Check if the given number is present in the matrix\"\"\"\n    if row:\n        for r in matrix:\n            if n in r:\n                return True\n    else:\n        for i in range(len(matrix)):\n            column = [row[i] for row in matrix]\n            if n in column:\n                return True\n    return False", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], n=5, row=True):\n    return matrix, n, row", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(a: int, b: int, c: int, d: int) -> bool:\n    \"\"\"Check if the given numbers a, b, c, d form a Pythagorean quadruple\"\"\"\n    return math.pow(a, 2) + math.pow(b, 2) + math.pow(c, 2) == math.pow(d, 2)\ndef g(a=3, b=4, c=5, d=7):\n    return a, b, c, d\nassert f(*g())\n", "emb": null, "idx_generation": 137, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(a: int, b: int, c: int, d: int) -> bool:\n    \"\"\"Check if the given numbers a, b, c, d form a Pythagorean quadruple\"\"\"\n    return math.pow(a, 2) + math.pow(b, 2) + math.pow(c, 2) == math.pow(d, 2)", "solution_func": "def g(a=3, b=4, c=5, d=7):\n    return a, b, c, d", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, pairs=[[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9]]) -> bool:\n    \"\"\"\n    Given a sequence of integer pairs, p_i, m_i, where p_i - m_i = 1, find the maximum value, over t, of\n    p_{t+1} + \\\\sum_{i=1}^t p_i - m_i\n    \"\"\"\n    assert all((p - m == 1 for (p, m) in pairs)), 'oo'\n    tot = 0\n    success = False\n    for (p, m) in pairs:\n        tot -= m\n        tot += p\n        assert tot <= n\n        if tot == n:\n            success = True\n    return success\ndef g(pairs = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9]]):\n    tot = 0\n    n = 0\n    for p, m in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n\nassert f(g())\n", "emb": null, "idx_generation": 137, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, pairs=[[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9]]) -> bool:\n    \"\"\"\n    Given a sequence of integer pairs, p_i, m_i, where p_i - m_i = 1, find the maximum value, over t, of\n    p_{t+1} + \\\\sum_{i=1}^t p_i - m_i\n    \"\"\"\n    assert all((p - m == 1 for (p, m) in pairs)), 'oo'\n    tot = 0\n    success = False\n    for (p, m) in pairs:\n        tot -= m\n        tot += p\n        assert tot <= n\n        if tot == n:\n            success = True\n    return success", "solution_func": "def g(pairs = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9]]):\n    tot = 0\n    n = 0\n    for p, m in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(e: List[int], a=2, b=4, c=6, d=8) -> bool:\n    \"\"\"\n    Find the intersection of two lines.\n    Solution should be a list of the (x,y) coordinates.\n    Accuracy of sixth decimal digit is required.\n    \"\"\"\n    x = e[0] / e[1]\n    return abs(a * x + b - c * x - d) < 10 ** (-6)\ndef g(a=2, b=4, c=6, d=8):\n    return [d - b, a - c]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 137, "target_skills": null, "problem_func": "from typing import*\ndef f(e: List[int], a=2, b=4, c=6, d=8) -> bool:\n    \"\"\"\n    Find the intersection of two lines.\n    Solution should be a list of the (x,y) coordinates.\n    Accuracy of sixth decimal digit is required.\n    \"\"\"\n    x = e[0] / e[1]\n    return abs(a * x + b - c * x - d) < 10 ** (-6)", "solution_func": "def g(a=2, b=4, c=6, d=8):\n    return [d - b, a - c]", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, ops=['x++', '--x', '--x'], target=100) -> bool:\n    \"\"\"\n    Given a sequence of operations \"++x\", \"x++\", \"--x\", \"x--\", and a target value, find initial value so that the\n    final value is the target value.\n\n    Sample Input:\n    ops = [\"x++\", \"--x\", \"--x\"]\n    target = 12\n\n    Sample Output:\n    13\n    \"\"\"\n    for op in ops:\n        if op in ['++x', 'x++']:\n            n += 1\n        else:\n            assert op in ['--x', 'x--']\n            n -= 1\n    return n == target\ndef g(ops=['x++', '--x', '--x'], target=100):\n    return target - ops.count(\"++x\") - ops.count(\"x++\") + ops.count(\"--x\") + ops.count(\"x--\")\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 137, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, ops=['x++', '--x', '--x'], target=100) -> bool:\n    \"\"\"\n    Given a sequence of operations \"++x\", \"x++\", \"--x\", \"x--\", and a target value, find initial value so that the\n    final value is the target value.\n\n    Sample Input:\n    ops = [\"x++\", \"--x\", \"--x\"]\n    target = 12\n\n    Sample Output:\n    13\n    \"\"\"\n    for op in ops:\n        if op in ['++x', 'x++']:\n            n += 1\n        else:\n            assert op in ['--x', 'x--']\n            n -= 1\n    return n == target", "solution_func": "def g(ops=['x++', '--x', '--x'], target=100):\n    return target - ops.count(\"++x\") - ops.count(\"x++\") + ops.count(\"--x\") + ops.count(\"x--\")", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(a: list, b: list, c: list, d: list, e: list, f: list) -> bool:\n    \"\"\"Check if every element in list a is present in lists b, c, d, e, and f\"\"\"\n    combined_list = b + c + d + e + f\n    return all(elem in combined_list for elem in a)\ndef g(b: list, c: list, d: list, e: list, f: list):\n    return b + c + d + e + f\nassert f(g())\n", "emb": null, "idx_generation": 137, "target_skills": null, "problem_func": "from typing import*\ndef f(a: list, b: list, c: list, d: list, e: list, f: list) -> bool:\n    \"\"\"Check if every element in list a is present in lists b, c, d, e, and f\"\"\"\n    combined_list = b + c + d + e + f\n    return all(elem in combined_list for elem in a)", "solution_func": "def g(b: list, c: list, d: list, e: list, f: list):\n    return b + c + d + e + f", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, m: int) -> bool:\n    \"\"\"Check if n and m are both even or both odd\"\"\"\n    return (n % 2 == 0 and m % 2 == 0) or (n % 2 != 0 and m % 2 != 0)\ndef g(n: int, m: int):\n    return n, m\nassert f(g())\n", "emb": null, "idx_generation": 137, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m: int) -> bool:\n    \"\"\"Check if n and m are both even or both odd\"\"\"\n    return (n % 2 == 0 and m % 2 == 0) or (n % 2 != 0 and m % 2 != 0)", "solution_func": "def g(n: int, m: int):\n    return n, m", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(n: int, m: int) -> bool:\n    \"\"\"Check if the sum of n and m is a perfect square\"\"\"\n    return math.sqrt(n + m) % 1 == 0\ndef g(n: int, m: int):\n    return n, m\nassert f(g())\n", "emb": null, "idx_generation": 137, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, m: int) -> bool:\n    \"\"\"Check if the sum of n and m is a perfect square\"\"\"\n    return math.sqrt(n + m) % 1 == 0", "solution_func": "def g(n: int, m: int):\n    return n, m", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(seq: List[int], target=100, k=3) -> bool:\n    \"\"\"Find k consecutive elements in seq whose sum is equal to target\"\"\"\n    return any(sum(seq[i:i+k]) == target for i in range(len(seq)-k+1))\ndef g(seq=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], target=100, k=3):\n    return seq\nassert f(g())\n", "emb": null, "idx_generation": 137, "target_skills": null, "problem_func": "from typing import*\ndef f(seq: List[int], target=100, k=3) -> bool:\n    \"\"\"Find k consecutive elements in seq whose sum is equal to target\"\"\"\n    return any(sum(seq[i:i+k]) == target for i in range(len(seq)-k+1))", "solution_func": "def g(seq=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], target=100, k=3):\n    return seq", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Check if there exists a subarray in the matrix such that the sum of its elements is equal to the target value.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j] == target:\n                return True\n    return False\n\ndef g(target=15):\n    return [[1, 2, 3],\n            [4, 5, 6],\n            [7, 8, target]]\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 138, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Check if there exists a subarray in the matrix such that the sum of its elements is equal to the target value.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j] == target:\n                return True\n    return False", "solution_func": "def g(target=15):\n    return [[1, 2, 3],\n            [4, 5, 6],\n            [7, 8, target]]", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(numbers: List[int], n=2) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is a perfect square.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            product = numbers[i] * numbers[j]\n            if math.isqrt(product) ** 2 == product:\n                return True\n    return False\n\ndef g(n=2):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 138, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(numbers: List[int], n=2) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is a perfect square.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            product = numbers[i] * numbers[j]\n            if math.isqrt(product) ** 2 == product:\n                return True\n    return False", "solution_func": "def g(n=2):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string_list: List[str], prefix=\"abc\") -> bool:\n    \"\"\"Check if any string in the list starts with the given prefix.\"\"\"\n    for string in string_list:\n        if string.startswith(prefix):\n            return True\n    return False\n\ndef g(prefix=\"abc\"):\n    return [\"abcdef\", \"xyz\", \"abcxyz\", \"123abc\"]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 138, "target_skills": null, "problem_func": "from typing import*\ndef f(string_list: List[str], prefix=\"abc\") -> bool:\n    \"\"\"Check if any string in the list starts with the given prefix.\"\"\"\n    for string in string_list:\n        if string.startswith(prefix):\n            return True\n    return False", "solution_func": "def g(prefix=\"abc\"):\n    return [\"abcdef\", \"xyz\", \"abcxyz\", \"123abc\"]", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, target_sum=100) -> bool:\n    \"\"\"\n    Find a square submatrix in the given matrix such that the sum of its elements is equal to the target_sum.\n    \"\"\"\n    n = matrix.shape[0]\n    for i in range(n):\n        for j in range(n):\n            for k in range(i, n):\n                for l in range(j, n):\n                    submatrix = matrix[i:k+1, j:l+1]\n                    if np.sum(submatrix) == target_sum:\n                        return True\n    return False\n\ndef g(target_sum = 100):\n    matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    return matrix\n\nassert f(g())\n", "emb": null, "idx_generation": 138, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, target_sum=100) -> bool:\n    \"\"\"\n    Find a square submatrix in the given matrix such that the sum of its elements is equal to the target_sum.\n    \"\"\"\n    n = matrix.shape[0]\n    for i in range(n):\n        for j in range(n):\n            for k in range(i, n):\n                for l in range(j, n):\n                    submatrix = matrix[i:k+1, j:l+1]\n                    if np.sum(submatrix) == target_sum:\n                        return True\n    return False", "solution_func": "def g(target_sum = 100):\n    matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17]) -> bool:\n    \"\"\"\n    Find the nth prime number in the given list of primes.\n    \"\"\"\n    if n <= len(primes):\n        return primes[n-1] == n\n    else:\n        current = primes[-1] + 2\n        while len(primes) < n:\n            is_prime = True\n            for p in primes:\n                if current % p == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                primes.append(current)\n            current += 2\n        return primes[n-1] == n\n\ndef g(n = 7, primes = [2, 3, 5, 7, 11, 13, 17]):\n    while len(primes) < n:\n        current = primes[-1] + 2\n        is_prime = True\n        for p in primes:\n            if current % p == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(current)\n        current += 2\n    return primes\n\nassert f(g())\n", "emb": null, "idx_generation": 138, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17]) -> bool:\n    \"\"\"\n    Find the nth prime number in the given list of primes.\n    \"\"\"\n    if n <= len(primes):\n        return primes[n-1] == n\n    else:\n        current = primes[-1] + 2\n        while len(primes) < n:\n            is_prime = True\n            for p in primes:\n                if current % p == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                primes.append(current)\n            current += 2\n        return primes[n-1] == n", "solution_func": "def g(n = 7, primes = [2, 3, 5, 7, 11, 13, 17]):\n    while len(primes) < n:\n        current = primes[-1] + 2\n        is_prime = True\n        for p in primes:\n            if current % p == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(current)\n        current += 2\n    return primes", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(nums: list, target_sum=100) -> bool:\n    \"\"\"\n    Find a pair of numbers in the given list that sum up to the target_sum.\n    \"\"\"\n    nums_set = set(nums)\n    for num in nums:\n        complement = target_sum - num\n        if complement in nums_set:\n            return True\n    return False\n\ndef g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target_sum = 100):\n    random.shuffle(nums)\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 138, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(nums: list, target_sum=100) -> bool:\n    \"\"\"\n    Find a pair of numbers in the given list that sum up to the target_sum.\n    \"\"\"\n    nums_set = set(nums)\n    for num in nums:\n        complement = target_sum - num\n        if complement in nums_set:\n            return True\n    return False", "solution_func": "def g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target_sum = 100):\n    random.shuffle(nums)\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=2022) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=2022):\n    return [target // 2, target // 2]\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 138, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=2022) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))", "solution_func": "def g(target=2022):\n    return [target // 2, target // 2]", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists three numbers in the list that sum up to the target\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\ndef g(target=100):\n    return [1, target // 2, target - 1]\nassert f(g())\n", "emb": null, "idx_generation": 138, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists three numbers in the list that sum up to the target\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))", "solution_func": "def g(target=100):\n    return [1, target // 2, target - 1]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=25) -> bool:\n    \"\"\"Check if there exists four numbers in the list that sum up to the target\"\"\"\n    return any(nums[i] + nums[j] + nums[k] + nums[l] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)) for l in range(k+1, len(nums)))\ndef g(target=25):\n    return [1, target // 3, target // 3, target - 2]\nassert f(g())\n", "emb": null, "idx_generation": 138, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=25) -> bool:\n    \"\"\"Check if there exists four numbers in the list that sum up to the target\"\"\"\n    return any(nums[i] + nums[j] + nums[k] + nums[l] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)) for l in range(k+1, len(nums)))", "solution_func": "def g(target=25):\n    return [1, target // 3, target // 3, target - 2]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, a='a', b='z') -> bool:\n    \"\"\"Check if all characters in the string s are between a and b (inclusive).\"\"\"\n    return all(a <= c <= b for c in s)\ndef g(a = 'a', b = 'z'):\n    import string\n    return ''.join([c for c in string.ascii_lowercase if a <= c <= b])\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 138, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, a='a', b='z') -> bool:\n    \"\"\"Check if all characters in the string s are between a and b (inclusive).\"\"\"\n    return all(a <= c <= b for c in s)", "solution_func": "def g(a = 'a', b = 'z'):\n    import string\n    return ''.join([c for c in string.ascii_lowercase if a <= c <= b])", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, word='python') -> bool:\n    \"\"\"Check if a word is a palindrome\"\"\"\n    return s == word[::-1]\ndef g(word='python'):\n    return word[::-1]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 139, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, word='python') -> bool:\n    \"\"\"Check if a word is a palindrome\"\"\"\n    return s == word[::-1]", "solution_func": "def g(word='python'):\n    return word[::-1]", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, nums=[2, 3, 5, 7]) -> bool:\n    \"\"\"Check if a number is a prime number\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef g(nums=[2, 3, 5, 7]):\n    n = max(nums) + 1\n    while True:\n        if f(n):\n            return n\n        n += 1\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 139, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[2, 3, 5, 7]) -> bool:\n    \"\"\"Check if a number is a prime number\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "solution_func": "def g(nums=[2, 3, 5, 7]):\n    n = max(nums) + 1\n    while True:\n        if f(n):\n            return n\n        n += 1", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'orange', 'peach']) -> bool:\n    \"\"\"Check if a word is a valid word in a list of words\"\"\"\n    return s in words\ndef g(words=['apple', 'banana', 'orange', 'peach']):\n    return words[0]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 139, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'orange', 'peach']) -> bool:\n    \"\"\"Check if a word is a valid word in a list of words\"\"\"\n    return s in words", "solution_func": "def g(words=['apple', 'banana', 'orange', 'peach']):\n    return words[0]", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17]) -> bool:\n    \"\"\"\n    Check if a number is divisible by all the prime numbers in the given list\n    \"\"\"\n    return all((n % prime == 0 for prime in primes))\n\ndef g(primes=[2, 3, 5, 7, 11, 13, 17]):\n    \"\"\"\n    Generate a number that is divisible by all the prime numbers in the given list\n    \"\"\"\n    return math.prod(primes)\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 139, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17]) -> bool:\n    \"\"\"\n    Check if a number is divisible by all the prime numbers in the given list\n    \"\"\"\n    return all((n % prime == 0 for prime in primes))", "solution_func": "def g(primes=[2, 3, 5, 7, 11, 13, 17]):\n    \"\"\"\n    Generate a number that is divisible by all the prime numbers in the given list\n    \"\"\"\n    return math.prod(primes)", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(deck: list, hand: list) -> bool:\n    \"\"\"\n    Check if a hand of cards is a subset of the deck\n    \"\"\"\n    return set(hand).issubset(set(deck))\n\ndef g(deck: list, hand_size: int = 5):\n    \"\"\"\n    Generate a random hand of cards from the given deck\n    \"\"\"\n    return random.sample(deck, hand_size)\n\n# Example usage\ndeck = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']\nhand = ['A', 'K', 'Q', 'J', '10']\nassert f(g(deck), hand)\n", "emb": null, "idx_generation": 139, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(deck: list, hand: list) -> bool:\n    \"\"\"\n    Check if a hand of cards is a subset of the deck\n    \"\"\"\n    return set(hand).issubset(set(deck))", "solution_func": "def g(deck: list, hand_size: int = 5):\n    \"\"\"\n    Generate a random hand of cards from the given deck\n    \"\"\"\n    return random.sample(deck, hand_size)\n\n# Example usage\ndeck = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']\nhand = ['A', 'K', 'Q', 'J', '10']", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(s: str, word: str) -> bool:\n    \"\"\"\n    Check if a word is a substring of a string in reverse order\n    \"\"\"\n    return word[::-1] in s\n\ndef g(s: str, word_length: int = 5):\n    \"\"\"\n    Generate a string with a random word of given length in reverse order\n    \"\"\"\n    word = ''.join(random.choice(string.ascii_lowercase) for _ in range(word_length))\n    return word[::-1] + s\n\n# Example usage\nstring = \"Hello, world!\"\nword = \"dlrow\"\nassert f(g(string), word)\n", "emb": null, "idx_generation": 139, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(s: str, word: str) -> bool:\n    \"\"\"\n    Check if a word is a substring of a string in reverse order\n    \"\"\"\n    return word[::-1] in s", "solution_func": "def g(s: str, word_length: int = 5):\n    \"\"\"\n    Generate a string with a random word of given length in reverse order\n    \"\"\"\n    word = ''.join(random.choice(string.ascii_lowercase) for _ in range(word_length))\n    return word[::-1] + s\n\n# Example usage\nstring = \"Hello, world!\"\nword = \"dlrow\"", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, tolerance=0.001) -> bool:\n    \"\"\"Check if the absolute difference between two numbers is within a given tolerance.\"\"\"\n    return math.isclose(abs(x - y), z, rel_tol=tolerance)\n    \ndef g(x: float, y: float, tolerance=0.001):\n    return abs(x - y)\n\nassert f(g())\n", "emb": null, "idx_generation": 139, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, tolerance=0.001) -> bool:\n    \"\"\"Check if the absolute difference between two numbers is within a given tolerance.\"\"\"\n    return math.isclose(abs(x - y), z, rel_tol=tolerance)", "solution_func": "def g(x: float, y: float, tolerance=0.001):\n    return abs(x - y)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(n: int, lst=None) -> bool:\n    \"\"\"Check if a randomly generated list contains a given number.\"\"\"\n    if lst is None:\n        lst = [random.randint(1, 100) for _ in range(10)]\n    return n in lst\n\ndef g():\n    return random.randint(1, 100)\n\nassert f(g())\n", "emb": null, "idx_generation": 139, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(n: int, lst=None) -> bool:\n    \"\"\"Check if a randomly generated list contains a given number.\"\"\"\n    if lst is None:\n        lst = [random.randint(1, 100) for _ in range(10)]\n    return n in lst", "solution_func": "def g():\n    return random.randint(1, 100)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, days=365) -> bool:\n    \"\"\"Check if a given date is within a year from the current date.\"\"\"\n    today = datetime.date.today()\n    one_year_later = today + datetime.timedelta(days=days)\n    return today <= date <= one_year_later\n\ndef g(days=365):\n    return datetime.date.today() + datetime.timedelta(days=days)\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 139, "target_skills": null, "problem_func": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, days=365) -> bool:\n    \"\"\"Check if a given date is within a year from the current date.\"\"\"\n    today = datetime.date.today()\n    one_year_later = today + datetime.timedelta(days=days)\n    return today <= date <= one_year_later", "solution_func": "def g(days=365):\n    return datetime.date.today() + datetime.timedelta(days=days)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, substr: str, start: int = 0, end: int = None) -> bool:\n    \"\"\"\n    Check if a substring is present in a given string within the specified indices.\n    The function should return True if the substring is found, False otherwise.\n    \"\"\"\n    if end is None:\n        end = len(s)\n    return s.find(substr, start, end) != -1\n\ndef g(substr: str, start: int = 0, end: int = None):\n    \"\"\"\n    Return a substring from a given start index to the specified end index.\n    If end is not provided, return the substring from start index to the end of the string.\n    \"\"\"\n    return substr[start:end+1]\n\nassert f(g())\n", "emb": null, "idx_generation": 139, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substr: str, start: int = 0, end: int = None) -> bool:\n    \"\"\"\n    Check if a substring is present in a given string within the specified indices.\n    The function should return True if the substring is found, False otherwise.\n    \"\"\"\n    if end is None:\n        end = len(s)\n    return s.find(substr, start, end) != -1", "solution_func": "def g(substr: str, start: int = 0, end: int = None):\n    \"\"\"\n    Return a substring from a given start index to the specified end index.\n    If end is not provided, return the substring from start index to the end of the string.\n    \"\"\"\n    return substr[start:end+1]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, substring='ok', count=2, length=10) -> bool:\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length\ndef g(substring = 'ok', count = 2, length = 10):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 140, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, substring='ok', count=2, length=10) -> bool:\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length", "solution_func": "def g(substring = 'ok', count = 2, length = 10):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, substring='apple', count=3, length=15) -> bool:\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length\ndef g(substring = 'apple', count = 3, length = 15):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 140, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, substring='apple', count=3, length=15) -> bool:\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length", "solution_func": "def g(substring = 'apple', count = 3, length = 15):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substrings=['python', 'programming', 'puzzle', 'solution']) -> bool:\n    \"\"\"\n    Find a string that contains all the substrings reversed and forward\n    \"\"\"\n    return all((sub in s and sub[::-1] in s for sub in substrings))\ndef g(substrings = ['python', 'programming', 'puzzle', 'solution']):\n    return \"\".join(substrings + [s[::-1] for s in substrings])\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 140, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substrings=['python', 'programming', 'puzzle', 'solution']) -> bool:\n    \"\"\"\n    Find a string that contains all the substrings reversed and forward\n    \"\"\"\n    return all((sub in s and sub[::-1] in s for sub in substrings))", "solution_func": "def g(substrings = ['python', 'programming', 'puzzle', 'solution']):\n    return \"\".join(substrings + [s[::-1] for s in substrings])", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers that add up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 140, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers that add up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(words: List[str], n=5) -> bool:\n    \"\"\"Find words that have more than n characters.\"\"\"\n    return [word for word in words if len(word) > n]\ndef g(n=5):\n    return [\"apple\", \"banana\", \"orange\", \"watermelon\", \"strawberry\"]\nassert f(g())\n", "emb": null, "idx_generation": 140, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], n=5) -> bool:\n    \"\"\"Find words that have more than n characters.\"\"\"\n    return [word for word in words if len(word) > n]", "solution_func": "def g(n=5):\n    return [\"apple\", \"banana\", \"orange\", \"watermelon\", \"strawberry\"]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=10) -> bool:\n    \"\"\"Check if any element in the matrix is equal to n.\"\"\"\n    for row in matrix:\n        if n in row:\n            return True\n    return False\ndef g(n=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n", "emb": null, "idx_generation": 140, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n=10) -> bool:\n    \"\"\"Check if any element in the matrix is equal to n.\"\"\"\n    for row in matrix:\n        if n in row:\n            return True\n    return False", "solution_func": "def g(n=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(string: str, n=3, m=3) -> bool:\n    \"\"\"Check if the string can be rearranged to form an n x m matrix\"\"\"\n    if len(string) != n * m:\n        return False\n    matrix = [string[i:i+m] for i in range(0, len(string), m)]\n    return all(len(set(row)) == 1 for row in matrix)\ndef g(n = 3, m = 3):\n    return \"abcabcabc\"\nassert f(g())\n", "emb": null, "idx_generation": 140, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, n=3, m=3) -> bool:\n    \"\"\"Check if the string can be rearranged to form an n x m matrix\"\"\"\n    if len(string) != n * m:\n        return False\n    matrix = [string[i:i+m] for i in range(0, len(string), m)]\n    return all(len(set(row)) == 1 for row in matrix)", "solution_func": "def g(n = 3, m = 3):\n    return \"abcabcabc\"", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there are exactly k distinct odd numbers in the list\"\"\"\n    return len(set(nums)) == k and all(num % 2 != 0 for num in nums)\ndef g(k = 3):\n    return [1, 3, 5, 7, 9, 11, 13]\nassert f(g())\n", "emb": null, "idx_generation": 140, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there are exactly k distinct odd numbers in the list\"\"\"\n    return len(set(nums)) == k and all(num % 2 != 0 for num in nums)", "solution_func": "def g(k = 3):\n    return [1, 3, 5, 7, 9, 11, 13]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target\"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\ndef g(target = 100):\n    return [10, 20, 30, 40, 50]\nassert f(g())\n", "emb": null, "idx_generation": 140, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target\"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(target = 100):\n    return [10, 20, 30, 40, 50]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\n\ndef f(lst: list, num=5) -> bool:\n    \"\"\"\n    Given a list of integers, check if the sum of the list is equal to or greater than num.\n\n    Sample Input:\n    lst = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    return sum(lst) >= num\n\ndef g(num=5):\n    lst = [random.randint(1, 10) for _ in range(num)]\n    return lst\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 140, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(lst: list, num=5) -> bool:\n    \"\"\"\n    Given a list of integers, check if the sum of the list is equal to or greater than num.\n\n    Sample Input:\n    lst = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    return sum(lst) >= num", "solution_func": "def g(num=5):\n    lst = [random.randint(1, 10) for _ in range(num)]\n    return lst", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, a=1, b=1) -> bool:\n    \"\"\"Check if the expression x^a + y^b = z is true.\"\"\"\n    return math.pow(x, a) + math.pow(y, b) == z\n\ndef g(x: float, y: float, a=1, b=1):\n    return math.pow(x, a) + math.pow(y, b)\nassert f(g(x=2, y=3), 13)\n", "emb": null, "idx_generation": 141, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, a=1, b=1) -> bool:\n    \"\"\"Check if the expression x^a + y^b = z is true.\"\"\"\n    return math.pow(x, a) + math.pow(y, b) == z", "solution_func": "def g(x: float, y: float, a=1, b=1):\n    return math.pow(x, a) + math.pow(y, b)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\n\ndef f(lst: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a subset of lst that sums up to target_sum.\"\"\"\n    n = len(lst)\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(target_sum + 1):\n            if j < lst[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - lst[i - 1]]\n\n    return dp[n][target_sum]\n\ndef g(lst: List[int], target_sum=100):\n    random.shuffle(lst)\n    return lst\n\nassert f(g(lst=[1, 2, 3, 4, 5]), 9)\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 141, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(lst: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a subset of lst that sums up to target_sum.\"\"\"\n    n = len(lst)\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(target_sum + 1):\n            if j < lst[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - lst[i - 1]]\n\n    return dp[n][target_sum]", "solution_func": "def g(lst: List[int], target_sum=100):\n    random.shuffle(lst)\n    return lst", "map_ix": [1, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, k: int, t: str) -> bool:\n    \"\"\"Check if the string s contains the substring t at least k times.\"\"\"\n    return s.count(t) >= k\n\ndef g(k: int, t: str):\n    return t\n\nassert f(g(k=2, t='abc'), 'abcabcabc')\n", "emb": null, "idx_generation": 141, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, k: int, t: str) -> bool:\n    \"\"\"Check if the string s contains the substring t at least k times.\"\"\"\n    return s.count(t) >= k", "solution_func": "def g(k: int, t: str):\n    return t", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target_sum=10) -> bool:\n    \"\"\"\n    Check if there exists a pair of elements in the given list that sum up to the target sum.\n    \"\"\"\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5], target_sum=10):\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                return [arr[i], arr[j]]\n    return []\nassert f(g())\n", "emb": null, "idx_generation": 141, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target_sum=10) -> bool:\n    \"\"\"\n    Check if there exists a pair of elements in the given list that sum up to the target sum.\n    \"\"\"\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                return True\n    return False", "solution_func": "def g(arr=[1, 2, 3, 4, 5], target_sum=10):\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                return [arr[i], arr[j]]\n    return []", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, substr='python') -> bool:\n    \"\"\"\n    Check if the given substring is present in the given string.\n    \"\"\"\n    return substr in string\n\ndef g(substr='python'):\n    return \"I love python programming\"\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 141, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, substr='python') -> bool:\n    \"\"\"\n    Check if the given substring is present in the given string.\n    \"\"\"\n    return substr in string", "solution_func": "def g(substr='python'):\n    return \"I love python programming\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Check if the target value is present in the given matrix.\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=0):\n    for row in matrix:\n        if target in row:\n            return True\n    return False\nassert f(g())\n", "emb": null, "idx_generation": 141, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Check if the target value is present in the given matrix.\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=0):\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target='python', length=6) -> bool:\n    \"\"\"Check if a substring of the given length exists within the target string.\"\"\"\n    return s in target[:length]\ndef g(target='python', length=6):\n    return target[:length]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 141, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='python', length=6) -> bool:\n    \"\"\"Check if a substring of the given length exists within the target string.\"\"\"\n    return s in target[:length]", "solution_func": "def g(target='python', length=6):\n    return target[:length]", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of integers in the list that sum up to the target.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 141, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of integers in the list that sum up to the target.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target='programming', length=5) -> bool:\n    \"\"\"Check if a substring of the given length exists at the end of the target string.\"\"\"\n    return target[-length:] == s\ndef g(target='programming', length=5):\n    return target[-length:]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 141, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='programming', length=5) -> bool:\n    \"\"\"Check if a substring of the given length exists at the end of the target string.\"\"\"\n    return target[-length:] == s", "solution_func": "def g(target='programming', length=5):\n    return target[-length:]", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=874, b=1254, c=1939, d=521) -> bool:\n    \"\"\"Check if the sum of the squares of the n-th powers of a, b, c, and d is a perfect square.\"\"\"\n    total = a**n + b**n + c**n + d**n\n    sqrt_total = math.isqrt(total)\n    return sqrt_total**2 == total\n\ndef g(a=874, b=1254, c=1939, d=521):\n    return [a, b, c, d]\n\nassert f(g())\n", "emb": null, "idx_generation": 141, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, a=874, b=1254, c=1939, d=521) -> bool:\n    \"\"\"Check if the sum of the squares of the n-th powers of a, b, c, and d is a perfect square.\"\"\"\n    total = a**n + b**n + c**n + d**n\n    sqrt_total = math.isqrt(total)\n    return sqrt_total**2 == total", "solution_func": "def g(a=874, b=1254, c=1939, d=521):\n    return [a, b, c, d]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Find a pair of numbers in the list whose sum is equal to the target.\"\"\"\n    return any((x + y == target) for x in arr for y in arr if x != y)\ndef g(arr):\n    return [x for x in arr if x != 0]\nassert f(g([1, 2, 3, 4, 5]), target=7)\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 142, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Find a pair of numbers in the list whose sum is equal to the target.\"\"\"\n    return any((x + y == target) for x in arr for y in arr if x != y)", "solution_func": "def g(arr):\n    return [x for x in arr if x != 0]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if there exists a row or column in the matrix whose sum is equal to the target.\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    return target in row_sums or target in col_sums\ndef g(matrix):\n    return [[x for x in row if x != 0] for row in matrix]\nassert f(g([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), target=15)\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 142, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if there exists a row or column in the matrix whose sum is equal to the target.\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    return target in row_sums or target in col_sums", "solution_func": "def g(matrix):\n    return [[x for x in row if x != 0] for row in matrix]", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, sub: str) -> bool:\n    \"\"\"Check if the sub string is present in the given string.\"\"\"\n    return sub in s\ndef g(s):\n    return s[::-1]\nassert f(g(\"Hello, World!\"), sub=\"World\")\n", "emb": null, "idx_generation": 142, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, sub: str) -> bool:\n    \"\"\"Check if the sub string is present in the given string.\"\"\"\n    return sub in s", "solution_func": "def g(s):\n    return s[::-1]", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int, k=2) -> bool:\n    \"\"\"Find a combination of k numbers from nums that adds up to the target value.\"\"\"\n    from itertools import combinations\n    for c in combinations(nums, k):\n        if sum(c) == target:\n            return True\n    return False\ndef g(target=10, k=2):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n", "emb": null, "idx_generation": 142, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int, k=2) -> bool:\n    \"\"\"Find a combination of k numbers from nums that adds up to the target value.\"\"\"\n    from itertools import combinations\n    for c in combinations(nums, k):\n        if sum(c) == target:\n            return True\n    return False", "solution_func": "def g(target=10, k=2):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if there exists a row in the matrix that adds up to the target value.\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    return False\ndef g(target=0):\n    return [[1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]]\nassert f(g())\n", "emb": null, "idx_generation": 142, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if there exists a row in the matrix that adds up to the target value.\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    return False", "solution_func": "def g(target=0):\n    return [[1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], sum_limit=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in nums that adds up to a value less than or equal to sum_limit.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] <= sum_limit:\n                return True\n    return False\ndef g(sum_limit=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 142, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], sum_limit=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in nums that adds up to a value less than or equal to sum_limit.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] <= sum_limit:\n                return True\n    return False", "solution_func": "def g(sum_limit=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport re\n\ndef f(s: str, pattern='[A-Za-z]+') -> bool:\n    \"\"\"Check if the given string matches the given pattern\"\"\"\n    return re.fullmatch(pattern, s) is not None\n\ndef g(pattern='[A-Za-z]+'):\n    return pattern\n\nassert f(g())\n", "emb": null, "idx_generation": 142, "target_skills": null, "problem_func": "from typing import*\nimport re\n\ndef f(s: str, pattern='[A-Za-z]+') -> bool:\n    \"\"\"Check if the given string matches the given pattern\"\"\"\n    return re.fullmatch(pattern, s) is not None", "solution_func": "def g(pattern='[A-Za-z]+'):\n    return pattern", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, lst=[4, 7, 2, 9, 5]) -> bool:\n    \"\"\"Check if the given number is present in the list\"\"\"\n    return n in lst\n\ndef g(lst=[4, 7, 2, 9, 5]):\n    return lst[2]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 142, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst=[4, 7, 2, 9, 5]) -> bool:\n    \"\"\"Check if the given number is present in the list\"\"\"\n    return n in lst", "solution_func": "def g(lst=[4, 7, 2, 9, 5]):\n    return lst[2]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, prefix='Hello', suffix='World') -> bool:\n    \"\"\"Check if the given string starts with the prefix and ends with the suffix\"\"\"\n    return s.startswith(prefix) and s.endswith(suffix)\n\ndef g(prefix='Hello', suffix='World'):\n    return prefix + ' Python ' + suffix\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 142, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, prefix='Hello', suffix='World') -> bool:\n    \"\"\"Check if the given string starts with the prefix and ends with the suffix\"\"\"\n    return s.startswith(prefix) and s.endswith(suffix)", "solution_func": "def g(prefix='Hello', suffix='World'):\n    return prefix + ' Python ' + suffix", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10, 12, 14, 16]) -> bool:\n    \"\"\"Check if n is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef g(nums=[2, 4, 6, 8, 10, 12, 14, 16]):\n    for num in nums:\n        if f(num):\n            return num\n    return -1\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 142, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10, 12, 14, 16]) -> bool:\n    \"\"\"Check if n is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "solution_func": "def g(nums=[2, 4, 6, 8, 10, 12, 14, 16]):\n    for num in nums:\n        if f(num):\n            return num\n    return -1", "map_ix": [1, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, n=5, m=5) -> bool:\n    \"\"\"\n    Given a 2D numpy array of shape (n, m), determine if the sum of each row is equal to the sum of each column.\n    \"\"\"\n    row_sum = np.sum(arr, axis=1)\n    col_sum = np.sum(arr, axis=0)\n    return all(row_sum == col_sum)\n\ndef g(n=5, m=5):\n    arr = np.ones((n, m))\n    return arr\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 143, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, n=5, m=5) -> bool:\n    \"\"\"\n    Given a 2D numpy array of shape (n, m), determine if the sum of each row is equal to the sum of each column.\n    \"\"\"\n    row_sum = np.sum(arr, axis=1)\n    col_sum = np.sum(arr, axis=0)\n    return all(row_sum == col_sum)", "solution_func": "def g(n=5, m=5):\n    arr = np.ones((n, m))\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: list, threshold=10) -> bool:\n    \"\"\"\n    Given a list of integers and a threshold value, determine if any two elements in the list add up to the threshold.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == threshold:\n                return True\n    return False\n\ndef g(threshold=10):\n    arr = [1, 2, 3, 4, 5]\n    return arr\n\nassert f(g())\n", "emb": null, "idx_generation": 143, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: list, threshold=10) -> bool:\n    \"\"\"\n    Given a list of integers and a threshold value, determine if any two elements in the list add up to the threshold.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == threshold:\n                return True\n    return False", "solution_func": "def g(threshold=10):\n    arr = [1, 2, 3, 4, 5]\n    return arr", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: list, target=10) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, determine if there exists a subarray (consecutive elements) in the list\n    that sums up to the target.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            if sum(arr[i:j]) == target:\n                return True\n    return False\n\ndef g(target=10):\n    arr = [1, 2, 3, 4, 5]\n    return arr\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 143, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: list, target=10) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, determine if there exists a subarray (consecutive elements) in the list\n    that sums up to the target.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            if sum(arr[i:j]) == target:\n                return True\n    return False", "solution_func": "def g(target=10):\n    arr = [1, 2, 3, 4, 5]\n    return arr", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=11) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[2, 4, 7, 5, 9]):\n    return nums\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0], "idx_generation": 143, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=11) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums=[2, 4, 7, 5, 9]):\n    return nums", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the list such that all elements are unique.\"\"\"\n    for i in range(len(nums) - k + 1):\n        subarray = nums[i:i+k]\n        if len(subarray) == len(set(subarray)):\n            return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7]):\n    return nums\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 143, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the list such that all elements are unique.\"\"\"\n    for i in range(len(nums) - k + 1):\n        subarray = nums[i:i+k]\n        if len(subarray) == len(set(subarray)):\n            return True\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7]):\n    return nums", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], n=5) -> bool:\n    \"\"\"Check if the list contains a subarray of length n that forms an arithmetic progression.\"\"\"\n    for i in range(len(nums) - n + 1):\n        subarray = nums[i:i+n]\n        diff = subarray[1] - subarray[0]\n        if all(subarray[j] - subarray[j-1] == diff for j in range(2, n)):\n            return True\n    return False\n\ndef g(nums=[1, 3, 5, 7, 9, 11, 13]):\n    return nums\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 143, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], n=5) -> bool:\n    \"\"\"Check if the list contains a subarray of length n that forms an arithmetic progression.\"\"\"\n    for i in range(len(nums) - n + 1):\n        subarray = nums[i:i+n]\n        diff = subarray[1] - subarray[0]\n        if all(subarray[j] - subarray[j-1] == diff for j in range(2, n)):\n            return True\n    return False", "solution_func": "def g(nums=[1, 3, 5, 7, 9, 11, 13]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target = 10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 143, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target = 10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is symmetric.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 143, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is symmetric.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "solution_func": "def g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]", "map_ix": [1, 1, 0, 1, 0, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if all numbers in the list are positive.\"\"\"\n    return all(num > 0 for num in nums)\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 143, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if all numbers in the list are positive.\"\"\"\n    return all(num > 0 for num in nums)", "solution_func": "def g():\n    return [1, 2, 3, 4, 5]", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20, row=2, col=3) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target value, find the sum of the elements in the specified row and column\n    and check if it is equal to the target value.\n    \"\"\"\n    assert row < len(matrix) and col < len(matrix[0])\n    row_sum = sum(matrix[row])\n    col_sum = sum(matrix[i][col] for i in range(len(matrix)))\n    return row_sum + col_sum == target\ndef g(target=20, row=2, col=3):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 143, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=20, row=2, col=3) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target value, find the sum of the elements in the specified row and column\n    and check if it is equal to the target value.\n    \"\"\"\n    assert row < len(matrix) and col < len(matrix[0])\n    row_sum = sum(matrix[row])\n    col_sum = sum(matrix[i][col] for i in range(len(matrix)))\n    return row_sum + col_sum == target", "solution_func": "def g(target=20, row=2, col=3):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(n: float, x=2, y=3) -> bool:\n    \"\"\"Check if the square root of a number is greater than a given value.\"\"\"\n    return math.sqrt(n) > x*y\n\ndef g(x = 2, y = 3):\n    return (x * y) ** 2\n\nassert f(g())\n", "emb": null, "idx_generation": 144, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: float, x=2, y=3) -> bool:\n    \"\"\"Check if the square root of a number is greater than a given value.\"\"\"\n    return math.sqrt(n) > x*y", "solution_func": "def g(x = 2, y = 3):\n    return (x * y) ** 2", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(nums: list, target=10) -> bool:\n    \"\"\"Check if the sum of a list of numbers is equal to a target value.\"\"\"\n    return sum(nums) == target\n\ndef g(target = 10):\n    nums = [random.randint(1, 10) for _ in range(5)]\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 144, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(nums: list, target=10) -> bool:\n    \"\"\"Check if the sum of a list of numbers is equal to a target value.\"\"\"\n    return sum(nums) == target", "solution_func": "def g(target = 10):\n    nums = [random.randint(1, 10) for _ in range(5)]\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport datetime\n\ndef f(date: str, days=30) -> bool:\n    \"\"\"Check if a given date is within a specific range.\"\"\"\n    today = datetime.date.today()\n    target_date = datetime.datetime.strptime(date, '%Y-%m-%d').date()\n    return (today - target_date).days < days\n\ndef g(days = 30):\n    return (datetime.date.today() - datetime.timedelta(days=days)).strftime('%Y-%m-%d')\n\nassert f(g())\n", "emb": null, "idx_generation": 144, "target_skills": null, "problem_func": "from typing import*\nimport datetime\n\ndef f(date: str, days=30) -> bool:\n    \"\"\"Check if a given date is within a specific range.\"\"\"\n    today = datetime.date.today()\n    target_date = datetime.datetime.strptime(date, '%Y-%m-%d').date()\n    return (today - target_date).days < days", "solution_func": "def g(days = 30):\n    return (datetime.date.today() - datetime.timedelta(days=days)).strftime('%Y-%m-%d')", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the string s contains exactly n vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return sum((1 for char in s if char.lower() in vowels)) == n\ndef g(n=3):\n    return 'aeiou' * n\nassert f(g())\n", "emb": null, "idx_generation": 144, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the string s contains exactly n vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return sum((1 for char in s if char.lower() in vowels)) == n", "solution_func": "def g(n=3):\n    return 'aeiou' * n", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are any two numbers in the list nums that sum up to the target\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10 - target]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 144, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are any two numbers in the list nums that sum up to the target\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))", "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10 - target]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], row_sum, col_sum) -> bool:\n    \"\"\"Check if the given matrix can be constructed with the given row and column sums\"\"\"\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    return rows == row_sum and cols == col_sum\ndef g(row_sum, col_sum):\n    matrix = [[1 if i == j else 0 for j in range(len(col_sum))] for i in range(len(row_sum))]\n    return matrix\nassert f(g(row_sum=[1, 2, 3], col_sum=[1, 2, 3]))\n", "emb": null, "idx_generation": 144, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], row_sum, col_sum) -> bool:\n    \"\"\"Check if the given matrix can be constructed with the given row and column sums\"\"\"\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    return rows == row_sum and cols == col_sum", "solution_func": "def g(row_sum, col_sum):\n    matrix = [[1 if i == j else 0 for j in range(len(col_sum))] for i in range(len(row_sum))]\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: List[int], t=590, a=20, e=80, s=5) -> bool:\n    \"\"\"Find a subsequence in x that sums up to t\"\"\"\n    for i in range(len(x)):\n        for j in range(i, len(x)):\n            if sum(x[i:j+1]) == t:\n                return True\n    return False\ndef g(t=590, a=20, e=80, s=5):\n    x = [i for i in range(e)]\n    x[a] = t\n    return x\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 144, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], t=590, a=20, e=80, s=5) -> bool:\n    \"\"\"Find a subsequence in x that sums up to t\"\"\"\n    for i in range(len(x)):\n        for j in range(i, len(x)):\n            if sum(x[i:j+1]) == t:\n                return True\n    return False", "solution_func": "def g(t=590, a=20, e=80, s=5):\n    x = [i for i in range(e)]\n    x[a] = t\n    return x", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: List[str], t='abc') -> bool:\n    \"\"\"Check if t is a subsequence of x\"\"\"\n    i = 0\n    for c in x:\n        if i < len(t) and c == t[i]:\n            i += 1\n    return i == len(t)\ndef g(t='abc'):\n    x = ['a', 'b', 'c', 'd', 'e']\n    return x\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 144, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[str], t='abc') -> bool:\n    \"\"\"Check if t is a subsequence of x\"\"\"\n    i = 0\n    for c in x:\n        if i < len(t) and c == t[i]:\n            i += 1\n    return i == len(t)", "solution_func": "def g(t='abc'):\n    x = ['a', 'b', 'c', 'd', 'e']\n    return x", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: List[int], t=4, a=2, e=6, s=1) -> bool:\n    \"\"\"Check if the difference between any two numbers in the sublist x[a:e:s] is equal to t\"\"\"\n    for i in range(a, e, s):\n        for j in range(i+1, e, s):\n            if abs(x[i] - x[j]) == t:\n                return True\n    return False\ndef g(t=4, a=2, e=6, s=1):\n    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return x\nassert f(g())\n", "emb": null, "idx_generation": 144, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], t=4, a=2, e=6, s=1) -> bool:\n    \"\"\"Check if the difference between any two numbers in the sublist x[a:e:s] is equal to t\"\"\"\n    for i in range(a, e, s):\n        for j in range(i+1, e, s):\n            if abs(x[i] - x[j]) == t:\n                return True\n    return False", "solution_func": "def g(t=4, a=2, e=6, s=1):\n    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return x", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Find three numbers in the list that sum up to the target_sum\"\"\"\n    for i in range(len(nums)-2):\n        for j in range(i+1, len(nums)-1):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target_sum:\n                    return True\n    return False\ndef g(target_sum=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 144, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Find three numbers in the list that sum up to the target_sum\"\"\"\n    for i in range(len(nums)-2):\n        for j in range(i+1, len(nums)-1):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target_sum:\n                    return True\n    return False", "solution_func": "def g(target_sum=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(words: List[str], target_length=6) -> bool:\n    \"\"\"Check if at least one word in the list has a length equal to the target_length.\"\"\"\n    return any(len(word) == target_length for word in words)\ndef g(target_length=6):\n    words = ['apple', 'banana', 'orange', 'grapefruit', 'kiwi']\n    return words\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 145, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], target_length=6) -> bool:\n    \"\"\"Check if at least one word in the list has a length equal to the target_length.\"\"\"\n    return any(len(word) == target_length for word in words)", "solution_func": "def g(target_length=6):\n    words = ['apple', 'banana', 'orange', 'grapefruit', 'kiwi']\n    return words", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target_sum.\"\"\"\n    from itertools import combinations\n    return any(sum(pair) == target_sum for pair in combinations(numbers, 2))\ndef g(target_sum=10):\n    numbers = [3, 5, 2, 7, 1, 9]\n    return numbers\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 145, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target_sum.\"\"\"\n    from itertools import combinations\n    return any(sum(pair) == target_sum for pair in combinations(numbers, 2))", "solution_func": "def g(target_sum=10):\n    numbers = [3, 5, 2, 7, 1, 9]\n    return numbers", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the matrix is symmetric.\"\"\"\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix[0])))\ndef g():\n    matrix = [[1, 2, 3],\n              [2, 4, 5],\n              [3, 5, 6]]\n    return matrix\nassert f(g())\n", "emb": [1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 145, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the matrix is symmetric.\"\"\"\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix[0])))", "solution_func": "def g():\n    matrix = [[1, 2, 3],\n              [2, 4, 5],\n              [3, 5, 6]]\n    return matrix", "map_ix": [1, 0, 1, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"\n    Find a string that is a repeated concatenation of itself n times.\n    \"\"\"\n    return s * n == s + s + s\ndef g(n=3):\n    return \"abc\"\nassert f(g()) == True", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 145, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"\n    Find a string that is a repeated concatenation of itself n times.\n    \"\"\"\n    return s * n == s + s + s", "solution_func": "def g(n=3):\n    return \"abc\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, a=['cat', 'dog', 'mouse', 'bird', 'fish'], b=['cat', 'dog', 'mouse', 'bird', 'fish']) -> bool:\n    \"\"\"Check if s is present in both lists a and b\"\"\"\n    return s in a and s in b\ndef g(a=['cat', 'dog', 'mouse', 'bird', 'fish'], b=['cat', 'dog', 'mouse', 'bird', 'fish']):\n    return a[0]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 145, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, a=['cat', 'dog', 'mouse', 'bird', 'fish'], b=['cat', 'dog', 'mouse', 'bird', 'fish']) -> bool:\n    \"\"\"Check if s is present in both lists a and b\"\"\"\n    return s in a and s in b", "solution_func": "def g(a=['cat', 'dog', 'mouse', 'bird', 'fish'], b=['cat', 'dog', 'mouse', 'bird', 'fish']):\n    return a[0]", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, a: List[int], b: List[int]) -> bool:\n    \"\"\"Check if the length of s is equal to the sum of the elements in lists a and b\"\"\"\n    return len(s) == sum(a) + sum(b)\ndef g(a=[1, 2, 3], b=[4, 5, 6]):\n    return \"hello\" * (sum(a) + sum(b))\nassert f(g())\n", "emb": null, "idx_generation": 145, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, a: List[int], b: List[int]) -> bool:\n    \"\"\"Check if the length of s is equal to the sum of the elements in lists a and b\"\"\"\n    return len(s) == sum(a) + sum(b)", "solution_func": "def g(a=[1, 2, 3], b=[4, 5, 6]):\n    return \"hello\" * (sum(a) + sum(b))", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(arr: List[int], x: int) -> bool:\n    \"\"\"Check if x is the maximum element in the list arr\"\"\"\n    return x == max(arr)\ndef g(x: int):\n    arr = random.sample(range(1, 100), 10)\n    arr.append(x)\n    return arr\nassert f(g())\n", "emb": null, "idx_generation": 145, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(arr: List[int], x: int) -> bool:\n    \"\"\"Check if x is the maximum element in the list arr\"\"\"\n    return x == max(arr)", "solution_func": "def g(x: int):\n    arr = random.sample(range(1, 100), 10)\n    arr.append(x)\n    return arr", "map_ix": null}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(n: int, nums=[10, 20, 30, 40, 50], target=100) -> bool:\n    \"\"\"Find a combination of numbers from the list that sum up to the target\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for r in range(len(nums) + 1) for comb in combinations(nums, r))\ndef g(nums=[10, 20, 30, 40, 50], target=100):\n    from itertools import combinations\n    for r in range(len(nums) + 1):\n        for comb in combinations(nums, r):\n            if sum(comb) == target:\n                return comb\n    return []\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 145, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(n: int, nums=[10, 20, 30, 40, 50], target=100) -> bool:\n    \"\"\"Find a combination of numbers from the list that sum up to the target\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for r in range(len(nums) + 1) for comb in combinations(nums, r))", "solution_func": "def g(nums=[10, 20, 30, 40, 50], target=100):\n    from itertools import combinations\n    for r in range(len(nums) + 1):\n        for comb in combinations(nums, r):\n            if sum(comb) == target:\n                return comb\n    return []", "map_ix": [0, 1, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, nums=[2, 3, 5, 7, 11], k=5) -> bool:\n    \"\"\"Find a list of n prime numbers that are divisible by k\"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    primes = [num for num in range(2, 1000) if is_prime(num)]\n    return len(nums) == n and all(num % k == 0 for num in nums if num in primes)\ndef g(nums=[2, 3, 5, 7, 11], k=5):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    primes = [num for num in range(2, 1000) if is_prime(num)]\n    return [num for num in primes if num % k == 0][:len(nums)]\nassert f(g())\n", "emb": null, "idx_generation": 145, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[2, 3, 5, 7, 11], k=5) -> bool:\n    \"\"\"Find a list of n prime numbers that are divisible by k\"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    primes = [num for num in range(2, 1000) if is_prime(num)]\n    return len(nums) == n and all(num % k == 0 for num in nums if num in primes)", "solution_func": "def g(nums=[2, 3, 5, 7, 11], k=5):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    primes = [num for num in range(2, 1000) if is_prime(num)]\n    return [num for num in primes if num % k == 0][:len(nums)]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, s='abcde', k=3) -> bool:\n    \"\"\"Find a substring of length k that occurs n times in the given string\"\"\"\n    return s.count(s[:k]) >= n\ndef g(s='abcde', k=3):\n    return s[:k] * k\nassert f(g())\n", "emb": null, "idx_generation": 145, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, s='abcde', k=3) -> bool:\n    \"\"\"Find a substring of length k that occurs n times in the given string\"\"\"\n    return s.count(s[:k]) >= n", "solution_func": "def g(s='abcde', k=3):\n    return s[:k] * k", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find if there are two numbers in the list that add up to the target\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums: List[int], target: int):\n    return (nums, target)\n\nassert f(g())\n", "emb": null, "idx_generation": 146, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find if there are two numbers in the list that add up to the target\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(nums: List[int], target: int):\n    return (nums, target)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(string: str, char: str) -> bool:\n    \"\"\"Check if the given character is located at the middle index of the string\"\"\"\n    middle = len(string) // 2\n    return string[middle] == char\n\ndef g(string: str, char: str):\n    return (string, char)\n\nassert f(g())\n", "emb": null, "idx_generation": 146, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, char: str) -> bool:\n    \"\"\"Check if the given character is located at the middle index of the string\"\"\"\n    middle = len(string) // 2\n    return string[middle] == char", "solution_func": "def g(string: str, char: str):\n    return (string, char)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Determine if there is a subarray in the list that sums up to the target\"\"\"\n    current_sum = 0\n    seen = set()\n    for num in nums:\n        current_sum += num\n        if current_sum == target or current_sum - target in seen:\n            return True\n        seen.add(current_sum)\n    return False\n\ndef g(nums: List[int], target: int):\n    return (nums, target)\n\nassert f(g())\n", "emb": null, "idx_generation": 146, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Determine if there is a subarray in the list that sums up to the target\"\"\"\n    current_sum = 0\n    seen = set()\n    for num in nums:\n        current_sum += num\n        if current_sum == target or current_sum - target in seen:\n            return True\n        seen.add(current_sum)\n    return False", "solution_func": "def g(nums: List[int], target: int):\n    return (nums, target)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substr=\"abc\") -> bool:\n    \"\"\"Check if the substring is present in the given string.\"\"\"\n    return substr in s\ndef g(substr=\"abc\"):\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    return s\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 146, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substr=\"abc\") -> bool:\n    \"\"\"Check if the substring is present in the given string.\"\"\"\n    return substr in s", "solution_func": "def g(substr=\"abc\"):\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists two numbers in the list that sum up to the target.\"\"\"\n    return any((target - i in arr for i in arr))\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 146, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists two numbers in the list that sum up to the target.\"\"\"\n    return any((target - i in arr for i in arr))", "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Find if there exists a subarray in the list that sums up to the target.\"\"\"\n    n = len(arr)\n    prefix_sum = 0\n    prefix_sums = set()\n    for i in range(n):\n        prefix_sum += arr[i]\n        if prefix_sum == target or prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 146, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Find if there exists a subarray in the list that sums up to the target.\"\"\"\n    n = len(arr)\n    prefix_sum = 0\n    prefix_sums = set()\n    for i in range(n):\n        prefix_sum += arr[i]\n        if prefix_sum == target or prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False", "solution_func": "def g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int, start=0) -> bool:\n    \"\"\"Find if there exists a sequence of numbers in nums that sums up to the target.\"\"\"\n    def backtrack(curr_sum, curr_index):\n        if curr_sum == target:\n            return True\n        if curr_index >= len(nums):\n            return False\n        for i in range(curr_index, len(nums)):\n            if backtrack(curr_sum + nums[i], i + 1):\n                return True\n        return False\n    return backtrack(0, start)\ndef g(nums = [1, 2, 3, 4, 5], target = 9):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 146, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int, start=0) -> bool:\n    \"\"\"Find if there exists a sequence of numbers in nums that sums up to the target.\"\"\"\n    def backtrack(curr_sum, curr_index):\n        if curr_sum == target:\n            return True\n        if curr_index >= len(nums):\n            return False\n        for i in range(curr_index, len(nums)):\n            if backtrack(curr_sum + nums[i], i + 1):\n                return True\n        return False\n    return backtrack(0, start)", "solution_func": "def g(nums = [1, 2, 3, 4, 5], target = 9):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(string: str, char_count: Dict[str, int]) -> bool:\n    \"\"\"Check if the count of each character in the string matches the given dictionary.\"\"\"\n    count = {}\n    for char in string:\n        if char not in count:\n            count[char] = 0\n        count[char] += 1\n    return count == char_count\ndef g(char_count = {'a': 3, 'b': 2, 'c': 1}):\n    return \"aabbca\"\nassert f(g())\n", "emb": null, "idx_generation": 146, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, char_count: Dict[str, int]) -> bool:\n    \"\"\"Check if the count of each character in the string matches the given dictionary.\"\"\"\n    count = {}\n    for char in string:\n        if char not in count:\n            count[char] = 0\n        count[char] += 1\n    return count == char_count", "solution_func": "def g(char_count = {'a': 3, 'b': 2, 'c': 1}):\n    return \"aabbca\"", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Find if the target number exists in the matrix.\"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    row = 0\n    col = n - 1\n    while row < m and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] > target:\n            col -= 1\n        else:\n            row += 1\n    return False\ndef g(matrix = [[1, 4, 7], [2, 5, 8], [3, 6, 9]], target = 5):\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 146, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Find if the target number exists in the matrix.\"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    row = 0\n    col = n - 1\n    while row < m and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] > target:\n            col -= 1\n        else:\n            row += 1\n    return False", "solution_func": "def g(matrix = [[1, 4, 7], [2, 5, 8], [3, 6, 9]], target = 5):\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(arr: List[int], target=100, n=5) -> bool:\n    \"\"\"Find if there exists a subset of length n in arr that sums up to target\"\"\"\n    import itertools\n    return any(sum(comb) == target for comb in itertools.combinations(arr, n))\ndef g(target=100, n=5):\n    return list(range(1, target // n + 1))\nassert f(g())\n", "emb": null, "idx_generation": 146, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(arr: List[int], target=100, n=5) -> bool:\n    \"\"\"Find if there exists a subset of length n in arr that sums up to target\"\"\"\n    import itertools\n    return any(sum(comb) == target for comb in itertools.combinations(arr, n))", "solution_func": "def g(target=100, n=5):\n    return list(range(1, target // n + 1))", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(n: int, nums=[2, 3, 5, 7]) -> bool:\n    \"\"\"Check if a number is prime based on a list of primes\"\"\"\n    if n < 2:\n        return False\n    for num in nums:\n        if n % num == 0:\n            return False\n    return True\n\ndef g(nums=[2, 3, 5, 7]):\n    prime_nums = []\n    num = 2\n    while len(prime_nums) < len(nums):\n        if f(num):\n            prime_nums.append(num)\n        num += 1\n    return prime_nums\nassert f(g())\n", "emb": null, "idx_generation": 147, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, nums=[2, 3, 5, 7]) -> bool:\n    \"\"\"Check if a number is prime based on a list of primes\"\"\"\n    if n < 2:\n        return False\n    for num in nums:\n        if n % num == 0:\n            return False\n    return True", "solution_func": "def g(nums=[2, 3, 5, 7]):\n    prime_nums = []\n    num = 2\n    while len(prime_nums) < len(nums):\n        if f(num):\n            prime_nums.append(num)\n        num += 1\n    return prime_nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(li: List[int], num: int) -> bool:\n    \"\"\"Check if a number is in a list\"\"\"\n    return num in li\n\ndef g(li: List[int]):\n    num = random.choice(li)\n    return li, num\nassert f(*g())\n", "emb": null, "idx_generation": 147, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(li: List[int], num: int) -> bool:\n    \"\"\"Check if a number is in a list\"\"\"\n    return num in li", "solution_func": "def g(li: List[int]):\n    num = random.choice(li)\n    return li, num", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s1: str, s2: str, s3: str) -> bool:\n    \"\"\"Check if all characters in s1 and s2 appear in s3\"\"\"\n    return all(char in s3 for char in s1) and all(char in s3 for char in s2)\n\ndef g(s1: str, s2: str):\n    s3 = s1 + s2\n    return s1, s2, s3\nassert f(*g())\n", "emb": null, "idx_generation": 147, "target_skills": null, "problem_func": "from typing import*\ndef f(s1: str, s2: str, s3: str) -> bool:\n    \"\"\"Check if all characters in s1 and s2 appear in s3\"\"\"\n    return all(char in s3 for char in s1) and all(char in s3 for char in s2)", "solution_func": "def g(s1: str, s2: str):\n    s3 = s1 + s2\n    return s1, s2, s3", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=7) -> bool:\n    \"\"\"\n    Given a string s and an integer n, determine if the length of s is at least n.\n    \"\"\"\n    return len(s) >= n\ndef g(s=\"Hello World\", n=7):\n    return s\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 147, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=7) -> bool:\n    \"\"\"\n    Given a string s and an integer n, determine if the length of s is at least n.\n    \"\"\"\n    return len(s) >= n", "solution_func": "def g(s=\"Hello World\", n=7):\n    return s", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers arr and an integer target, determine if there exists a pair of integers in arr whose sum\n    is equal to target.\n    \"\"\"\n    return any((x + y == target for x in arr for y in arr))\ndef g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=10):\n    return arr\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 147, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers arr and an integer target, determine if there exists a pair of integers in arr whose sum\n    is equal to target.\n    \"\"\"\n    return any((x + y == target for x in arr for y in arr))", "solution_func": "def g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=10):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=5, b=3) -> bool:\n    \"\"\"\n    Given an integer n, determine if n is divisible by both a and b.\n    \"\"\"\n    return n % a == 0 and n % b == 0\ndef g(a=5, b=3):\n    return a * b\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 147, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=5, b=3) -> bool:\n    \"\"\"\n    Given an integer n, determine if n is divisible by both a and b.\n    \"\"\"\n    return n % a == 0 and n % b == 0", "solution_func": "def g(a=5, b=3):\n    return a * b", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(big_str: str, sub_str='mexuvawetextesitocedezyxuxexyfoquichitiracyquat', index=217) -> bool:\n    \"\"\"Find a string whose *first* index of sub_str is index\"\"\"\n    return big_str.index(sub_str) == index\ndef g(sub_str = 'mexuvawetextesitocedezyxuxexyfoquichitiracyquat', index = 217):\n    i = ord('Z')\n    while chr(i) in sub_str:\n        i -= 1\n    return chr(i) * index + sub_str\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 147, "target_skills": null, "problem_func": "from typing import*\ndef f(big_str: str, sub_str='mexuvawetextesitocedezyxuxexyfoquichitiracyquat', index=217) -> bool:\n    \"\"\"Find a string whose *first* index of sub_str is index\"\"\"\n    return big_str.index(sub_str) == index", "solution_func": "def g(sub_str = 'mexuvawetextesitocedezyxuxexyfoquichitiracyquat', index = 217):\n    i = ord('Z')\n    while chr(i) in sub_str:\n        i -= 1\n    return chr(i) * index + sub_str", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, word='tivunyxe') -> bool:\n    \"\"\"Capitalize the first letter of word\"\"\"\n    for i in range(len(word)):\n        if i == 0:\n            if s[i] != word[i].upper():\n                return False\n        elif s[i] != word[i]:\n            return False\n    return True\ndef g(word = 'tivunyxe'):\n    return word[0].upper() + word[1:]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 147, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, word='tivunyxe') -> bool:\n    \"\"\"Capitalize the first letter of word\"\"\"\n    for i in range(len(word)):\n        if i == 0:\n            if s[i] != word[i].upper():\n                return False\n        elif s[i] != word[i]:\n            return False\n    return True", "solution_func": "def g(word = 'tivunyxe'):\n    return word[0].upper() + word[1:]", "map_ix": [0, 0, 0, 1, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(ans: List[List[int]], target=1) -> bool:\n    \"\"\"\n    Find a list of pairs of integers where the number of pairs in which the second number is more than\n    two greater than the first number is a given constant\n    \"\"\"\n    for i in range(len(ans)):\n        (a, b) = ans[i]\n        if b - a >= 2:\n            target -= 1\n    return target == 0\ndef g(target = 1):\n    return [[0, 2]] * target\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 147, "target_skills": null, "problem_func": "from typing import*\ndef f(ans: List[List[int]], target=1) -> bool:\n    \"\"\"\n    Find a list of pairs of integers where the number of pairs in which the second number is more than\n    two greater than the first number is a given constant\n    \"\"\"\n    for i in range(len(ans)):\n        (a, b) = ans[i]\n        if b - a >= 2:\n            target -= 1\n    return target == 0", "solution_func": "def g(target = 1):\n    return [[0, 2]] * target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, r=1.0) -> bool:\n    \"\"\"\n    Determine if a point (x, y, z) is inside a sphere with radius r centered at the origin.\n    Returns True if the point is inside the sphere, False otherwise.\n    \"\"\"\n    distance = math.sqrt(x**2 + y**2 + z**2)\n    return distance < r\n\ndef g(x=0.0, y=0.0, z=0.0, r=1.0):\n    return f(x, y, z, r)\n\nassert f(g())\n", "emb": null, "idx_generation": 147, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, r=1.0) -> bool:\n    \"\"\"\n    Determine if a point (x, y, z) is inside a sphere with radius r centered at the origin.\n    Returns True if the point is inside the sphere, False otherwise.\n    \"\"\"\n    distance = math.sqrt(x**2 + y**2 + z**2)\n    return distance < r", "solution_func": "def g(x=0.0, y=0.0, z=0.0, r=1.0):\n    return f(x, y, z, r)", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(matrix: List[List[int]], target_sum=0) -> bool:\n    \"\"\"Check if the sum of all elements in the matrix is equal to the target sum\"\"\"\n    return sum(sum(row) for row in matrix) == target_sum\ndef g(target_sum = 0):\n    \"\"\"Generate a matrix with random integers\"\"\"\n    import random\n    matrix = []\n    for i in range(3):\n        row = [random.randint(1, 10) for _ in range(3)]\n        matrix.append(row)\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 148, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(matrix: List[List[int]], target_sum=0) -> bool:\n    \"\"\"Check if the sum of all elements in the matrix is equal to the target sum\"\"\"\n    return sum(sum(row) for row in matrix) == target_sum", "solution_func": "def g(target_sum = 0):\n    \"\"\"Generate a matrix with random integers\"\"\"\n    import random\n    matrix = []\n    for i in range(3):\n        row = [random.randint(1, 10) for _ in range(3)]\n        matrix.append(row)\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target\"\"\"\n    return any((target - x) in nums for x in nums)\ndef g(target = 0):\n    \"\"\"Generate a list of random integers\"\"\"\n    import random\n    nums = [random.randint(1, 10) for _ in range(5)]\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 148, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target\"\"\"\n    return any((target - x) in nums for x in nums)", "solution_func": "def g(target = 0):\n    \"\"\"Generate a list of random integers\"\"\"\n    import random\n    nums = [random.randint(1, 10) for _ in range(5)]\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(words: List[str], target_length=0) -> bool:\n    \"\"\"Check if any word in the list has a length equal to the target length\"\"\"\n    return any(len(word) == target_length for word in words)\ndef g(target_length = 0):\n    \"\"\"Generate a list of random words\"\"\"\n    import random\n    words = ['apple', 'banana', 'cherry', 'date', 'elderberry']\n    return random.choices(words, k=5)\nassert f(g())\n", "emb": null, "idx_generation": 148, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(words: List[str], target_length=0) -> bool:\n    \"\"\"Check if any word in the list has a length equal to the target length\"\"\"\n    return any(len(word) == target_length for word in words)", "solution_func": "def g(target_length = 0):\n    \"\"\"Generate a list of random words\"\"\"\n    import random\n    words = ['apple', 'banana', 'cherry', 'date', 'elderberry']\n    return random.choices(words, k=5)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\n\ndef f(n: int, numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if a given number is present in a list of numbers.\"\"\"\n    return n in numbers\ndef g(numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return random.choice(numbers)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 148, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(n: int, numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if a given number is present in a list of numbers.\"\"\"\n    return n in numbers", "solution_func": "def g(numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return random.choice(numbers)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, k: int, substring='code') -> bool:\n    \"\"\"Check if a given substring is present in a string, starting from the k-th character.\"\"\"\n    return s.find(substring, k) != -1\ndef g(k: int, substring='code'):\n    return \"I love coding\" + substring\nassert f(g())\n", "emb": null, "idx_generation": 148, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, k: int, substring='code') -> bool:\n    \"\"\"Check if a given substring is present in a string, starting from the k-th character.\"\"\"\n    return s.find(substring, k) != -1", "solution_func": "def g(k: int, substring='code'):\n    return \"I love coding\" + substring", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, t: str, char='x') -> bool:\n    \"\"\"Check if a given character is present in both strings at the same index.\"\"\"\n    return all(s[i] == char and t[i] == char for i in range(len(s)))\ndef g(s: str, t: str):\n    return s + t\nassert f(g())\n", "emb": null, "idx_generation": 148, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, t: str, char='x') -> bool:\n    \"\"\"Check if a given character is present in both strings at the same index.\"\"\"\n    return all(s[i] == char and t[i] == char for i in range(len(s)))", "solution_func": "def g(s: str, t: str):\n    return s + t", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, scalar: int=5, product: int=100) -> bool:\n    \"\"\"Check if the product of all elements in the matrix is equal to the given product.\"\"\"\n    return np.prod(matrix) == product\n\ndef g(scalar: int=5, product: int=100):\n    matrix = np.full((3, 3), scalar)\n    return matrix\n\nassert f(g())\n", "emb": null, "idx_generation": 148, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, scalar: int=5, product: int=100) -> bool:\n    \"\"\"Check if the product of all elements in the matrix is equal to the given product.\"\"\"\n    return np.prod(matrix) == product", "solution_func": "def g(scalar: int=5, product: int=100):\n    matrix = np.full((3, 3), scalar)\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport itertools\n\ndef f(nums: list, target: int=10, combination: int=3) -> bool:\n    \"\"\"Check if there exists a combination of numbers that sum up to the target.\"\"\"\n    for combo in itertools.combinations(nums, combination):\n        if sum(combo) == target:\n            return True\n    return False\n\ndef g(target: int=10, combination: int=3):\n    nums = [1, 2, 3, 4, 5]\n    return nums\n\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 148, "target_skills": null, "problem_func": "from typing import*\nimport itertools\n\ndef f(nums: list, target: int=10, combination: int=3) -> bool:\n    \"\"\"Check if there exists a combination of numbers that sum up to the target.\"\"\"\n    for combo in itertools.combinations(nums, combination):\n        if sum(combo) == target:\n            return True\n    return False", "solution_func": "def g(target: int=10, combination: int=3):\n    nums = [1, 2, 3, 4, 5]\n    return nums", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date: datetime, year: int=2022, month: int=1, day: int=1) -> bool:\n    \"\"\"Check if the given date is the same as the specified year, month, and day.\"\"\"\n    return date.year == year and date.month == month and date.day == day\n\ndef g(year: int=2022, month: int=1, day: int=1):\n    date = datetime(year, month, day)\n    return date\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 148, "target_skills": null, "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(date: datetime, year: int=2022, month: int=1, day: int=1) -> bool:\n    \"\"\"Check if the given date is the same as the specified year, month, and day.\"\"\"\n    return date.year == year and date.month == month and date.day == day", "solution_func": "def g(year: int=2022, month: int=1, day: int=1):\n    date = datetime(year, month, day)\n    return date", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the given string is a palindrome and contains a specific letter n times.\"\"\"\n    return s == s[::-1] and s.count('a') == n\ndef g(n=3):\n    return \"aba\" * n\nassert f(g())\n", "emb": null, "idx_generation": 148, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the given string is a palindrome and contains a specific letter n times.\"\"\"\n    return s == s[::-1] and s.count('a') == n", "solution_func": "def g(n=3):\n    return \"aba\" * n", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, substr=\"puzzle\", case_sensitive=True) -> bool:\n    \"\"\"Check if a given substring is present in a string\"\"\"\n    if not case_sensitive:\n        string = string.lower()\n        substr = substr.lower()\n    return substr in string\ndef g(substr = \"puzzle\", case_sensitive = True):\n    return substr\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 149, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, substr=\"puzzle\", case_sensitive=True) -> bool:\n    \"\"\"Check if a given substring is present in a string\"\"\"\n    if not case_sensitive:\n        string = string.lower()\n        substr = substr.lower()\n    return substr in string", "solution_func": "def g(substr = \"puzzle\", case_sensitive = True):\n    return substr", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(num: float, digits=3, approx=True) -> bool:\n    \"\"\"Round a given number to a specific number of decimal places\"\"\"\n    if approx:\n        return round(num, digits) == num\n    else:\n        return math.isclose(round(num, digits), num)\ndef g(digits = 3, approx = True):\n    return 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\nassert f(g())\n", "emb": null, "idx_generation": 149, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(num: float, digits=3, approx=True) -> bool:\n    \"\"\"Round a given number to a specific number of decimal places\"\"\"\n    if approx:\n        return round(num, digits) == num\n    else:\n        return math.isclose(round(num, digits), num)", "solution_func": "def g(digits = 3, approx = True):\n    return 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in a list that sum up to a target number\"\"\"\n    nums_set = set(nums)\n    for num in nums:\n        if target - num in nums_set:\n            return True\n    return False\ndef g(target = 0):\n    return [-2, 3, 10, 5, 4]\nassert f(g())\n", "emb": null, "idx_generation": 149, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in a list that sum up to a target number\"\"\"\n    nums_set = set(nums)\n    for num in nums:\n        if target - num in nums_set:\n            return True\n    return False", "solution_func": "def g(target = 0):\n    return [-2, 3, 10, 5, 4]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target_len=6) -> bool:\n    \"\"\"\n    Determine if a string has a length equal to the target length and contains at least one uppercase letter, \n    one lowercase letter, and one numeric digit.\n    \"\"\"\n    return len(s) == target_len and any(c.isupper() for c in s) and any(c.islower() for c in s) and any(c.isdigit() for c in s)\ndef g(target_len = 6):\n    return 'Aa1' + '0' * (target_len - 3)\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 149, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target_len=6) -> bool:\n    \"\"\"\n    Determine if a string has a length equal to the target length and contains at least one uppercase letter, \n    one lowercase letter, and one numeric digit.\n    \"\"\"\n    return len(s) == target_len and any(c.isupper() for c in s) and any(c.islower() for c in s) and any(c.isdigit() for c in s)", "solution_func": "def g(target_len = 6):\n    return 'Aa1' + '0' * (target_len - 3)", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(x: int, y: int, z: int, target_sum=100) -> bool:\n    \"\"\"\n    Find three integers x, y, and z such that their sum is equal to the target sum and the product of x, y, and z is a perfect square.\n    \"\"\"\n    return x + y + z == target_sum and math.isqrt(x * y * z) ** 2 == x * y * z\ndef g(target_sum = 100):\n    for x in range(1, target_sum):\n        for y in range(1, target_sum - x):\n            z = target_sum - x - y\n            if math.isqrt(x * y * z) ** 2 == x * y * z:\n                return (x, y, z)\nassert f(*g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 149, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: int, y: int, z: int, target_sum=100) -> bool:\n    \"\"\"\n    Find three integers x, y, and z such that their sum is equal to the target sum and the product of x, y, and z is a perfect square.\n    \"\"\"\n    return x + y + z == target_sum and math.isqrt(x * y * z) ** 2 == x * y * z", "solution_func": "def g(target_sum = 100):\n    for x in range(1, target_sum):\n        for y in range(1, target_sum - x):\n            z = target_sum - x - y\n            if math.isqrt(x * y * z) ** 2 == x * y * z:\n                return (x, y, z)", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import math\nfrom typing import*\ndef f(n: int, target_sum=200) -> bool:\n    \"\"\"\n    Find a list of n integers such that their sum is equal to the target sum and the product of all the integers is a perfect square.\n    \"\"\"\n    return sum(range(target_sum - n + 1, target_sum + 1)) == target_sum and all(math.isqrt(i) ** 2 == i for i in range(target_sum - n + 1, target_sum + 1))\ndef g(target_sum = 200):\n    return target_sum\nassert f(g())\n", "emb": null, "idx_generation": 149, "target_skills": null, "problem_func": "import math\nfrom typing import*\ndef f(n: int, target_sum=200) -> bool:\n    \"\"\"\n    Find a list of n integers such that their sum is equal to the target sum and the product of all the integers is a perfect square.\n    \"\"\"\n    return sum(range(target_sum - n + 1, target_sum + 1)) == target_sum and all(math.isqrt(i) ** 2 == i for i in range(target_sum - n + 1, target_sum + 1))", "solution_func": "def g(target_sum = 200):\n    return target_sum", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=1000) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums))))\ndef g(nums):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 149, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=1000) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums))))", "solution_func": "def g(nums):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a string is a palindrome when every nth character is removed\"\"\"\n    return s == s[n-1::n][::-1]\ndef g(s):\n    return s\nassert f(g())\n", "emb": null, "idx_generation": 149, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a string is a palindrome when every nth character is removed\"\"\"\n    return s == s[n-1::n][::-1]", "solution_func": "def g(s):\n    return s", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\nfrom itertools import combinations\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a combination of numbers in the list that add up to the target\"\"\"\n    return any((sum(comb) == target for r in range(1, len(nums)+1) for comb in combinations(nums, r)))\ndef g(nums):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 149, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\nfrom itertools import combinations\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a combination of numbers in the list that add up to the target\"\"\"\n    return any((sum(comb) == target for r in range(1, len(nums)+1) for comb in combinations(nums, r)))", "solution_func": "def g(nums):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int, k: int) -> bool:\n    \"\"\"Check if there exist k numbers in the list that sum up to the target\"\"\"\n    return any(sum(comb) == target for comb in combinations(nums, k))\ndef g(target: int, k: int):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums\nassert f(g(), 15, 3)\n", "emb": null, "idx_generation": 149, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int, k: int) -> bool:\n    \"\"\"Check if there exist k numbers in the list that sum up to the target\"\"\"\n    return any(sum(comb) == target for comb in combinations(nums, k))", "solution_func": "def g(target: int, k: int):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substr='python') -> bool:\n    \"\"\"Check if a given substring is present in the given string\"\"\"\n    return substr in s\ndef g(substr='python'):\n    s = \"I love programming in python\"\n    return s\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 150, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substr='python') -> bool:\n    \"\"\"Check if a given substring is present in the given string\"\"\"\n    return substr in s", "solution_func": "def g(substr='python'):\n    s = \"I love programming in python\"\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists two numbers in the list whose sum is equal to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5]\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 150, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists two numbers in the list whose sum is equal to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target=10):\n    nums = [1, 2, 3, 4, 5]\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Check if the target number is present in the given matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(target=5):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 150, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Check if the target number is present in the given matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(target=5):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"\n    Determine if string s can be transformed into string t by deleting some characters.\n    \"\"\"\n    i, j = 0, 0\n    while i < len(s) and j < len(t):\n        if s[i] == t[j]:\n            j += 1\n        i += 1\n    return j == len(t)\n\ndef g(s: str, t: str):\n    return t\n\nassert f(g())\n", "emb": null, "idx_generation": 150, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"\n    Determine if string s can be transformed into string t by deleting some characters.\n    \"\"\"\n    i, j = 0, 0\n    while i < len(s) and j < len(t):\n        if s[i] == t[j]:\n            j += 1\n        i += 1\n    return j == len(t)", "solution_func": "def g(s: str, t: str):\n    return t", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if there exists two distinct indices i and j in the list such that nums[i] == nums[j] and the absolute difference between i and j is at most 3.\n    \"\"\"\n    seen = {}\n    for i, num in enumerate(nums):\n        if num in seen and abs(i - seen[num]) <= 3:\n            return True\n        seen[num] = i\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 1, 8, 9, 10]\n\nassert f(g())\n", "emb": null, "idx_generation": 150, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if there exists two distinct indices i and j in the list such that nums[i] == nums[j] and the absolute difference between i and j is at most 3.\n    \"\"\"\n    seen = {}\n    for i, num in enumerate(nums):\n        if num in seen and abs(i - seen[num]) <= 3:\n            return True\n        seen[num] = i\n    return False", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 1, 8, 9, 10]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(num: int) -> bool:\n    \"\"\"\n    Check if a number is a palindrome.\n    \"\"\"\n    if num < 0:\n        return False\n    reversed_num = 0\n    original_num = num\n    while num > 0:\n        reversed_num = reversed_num * 10 + num % 10\n        num //= 10\n    return original_num == reversed_num\n\ndef g():\n    return 12321\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 150, "target_skills": null, "problem_func": "from typing import*\ndef f(num: int) -> bool:\n    \"\"\"\n    Check if a number is a palindrome.\n    \"\"\"\n    if num < 0:\n        return False\n    reversed_num = 0\n    original_num = num\n    while num > 0:\n        reversed_num = reversed_num * 10 + num % 10\n        num //= 10\n    return original_num == reversed_num", "solution_func": "def g():\n    return 12321", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], target=100) -> bool:\n    \"\"\"Find if there is a pair of numbers in the list that sum up to the target\"\"\"\n    for i in range(len(x)):\n        for j in range(i+1, len(x)):\n            if x[i] + x[j] == target:\n                return True\n    return False\n\ndef g(target=100):\n    x = [10, 20, 30, 40, 50]\n    return x\n\nassert f(g())\n", "emb": null, "idx_generation": 150, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], target=100) -> bool:\n    \"\"\"Find if there is a pair of numbers in the list that sum up to the target\"\"\"\n    for i in range(len(x)):\n        for j in range(i+1, len(x)):\n            if x[i] + x[j] == target:\n                return True\n    return False", "solution_func": "def g(target=100):\n    x = [10, 20, 30, 40, 50]\n    return x", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], target=0) -> bool:\n    \"\"\"Find if the list contains a number that is equal to the target\"\"\"\n    return target in x\n\ndef g(target=0):\n    x = [1, 2, 3, 4, 5]\n    return x\n\nassert f(g())\n", "emb": null, "idx_generation": 150, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], target=0) -> bool:\n    \"\"\"Find if the list contains a number that is equal to the target\"\"\"\n    return target in x", "solution_func": "def g(target=0):\n    x = [1, 2, 3, 4, 5]\n    return x", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], target=10) -> bool:\n    \"\"\"Find if there is a subsequence of the list that sums up to the target\"\"\"\n    n = len(x)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(target + 1):\n            if j < x[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - x[i - 1]]\n    \n    return dp[n][target]\n\ndef g(target=10):\n    x = [1, 2, 3, 4, 5]\n    return x\n\nassert f(g())", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 150, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], target=10) -> bool:\n    \"\"\"Find if there is a subsequence of the list that sums up to the target\"\"\"\n    n = len(x)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(target + 1):\n            if j < x[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - x[i - 1]]\n    \n    return dp[n][target]", "solution_func": "def g(target=10):\n    x = [1, 2, 3, 4, 5]\n    return x", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(x: int, y: int, z: int, target=24) -> bool:\n    \"\"\"Determine if it is possible to obtain the target number using the given values and basic arithmetic operations\"\"\"\n    def calculate(a, b, op):\n        if op == '+':\n            return a + b\n        elif op == '-':\n            return a - b\n        elif op == '*':\n            return a * b\n        elif op == '/':\n            if b != 0:\n                return a / b\n            else:\n                return math.inf\n        \n    def backtrack(nums):\n        if len(nums) == 1:\n            return nums[0] == target\n        \n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                a = nums[i]\n                b = nums[j]\n                \n                for op in ['+', '-', '*', '/']:\n                    if op == '/' and (b == 0 or a % b != 0):\n                        continue\n                    \n                    new_nums = []\n                    for k in range(len(nums)):\n                        if k != i and k != j:\n                            new_nums.append(nums[k])\n                    \n                    new_nums.append(calculate(a, b, op))\n                    \n                    if backtrack(new_nums):\n                        return True\n                    \n                    new_nums.pop()\n        \n        return False\n    \n    return backtrack([x, y, z])\n    \ndef g(x=4, y=6, z=8):\n    return x, y, z\n\nassert f(*g())\n", "emb": null, "idx_generation": 150, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: int, y: int, z: int, target=24) -> bool:\n    \"\"\"Determine if it is possible to obtain the target number using the given values and basic arithmetic operations\"\"\"\n    def calculate(a, b, op):\n        if op == '+':\n            return a + b\n        elif op == '-':\n            return a - b\n        elif op == '*':\n            return a * b\n        elif op == '/':\n            if b != 0:\n                return a / b\n            else:\n                return math.inf\n        \n    def backtrack(nums):\n        if len(nums) == 1:\n            return nums[0] == target\n        \n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                a = nums[i]\n                b = nums[j]\n                \n                for op in ['+', '-', '*', '/']:\n                    if op == '/' and (b == 0 or a % b != 0):\n                        continue\n                    \n                    new_nums = []\n                    for k in range(len(nums)):\n                        if k != i and k != j:\n                            new_nums.append(nums[k])\n                    \n                    new_nums.append(calculate(a, b, op))\n                    \n                    if backtrack(new_nums):\n                        return True\n                    \n                    new_nums.pop()\n        \n        return False\n    \n    return backtrack([x, y, z])", "solution_func": "def g(x=4, y=6, z=8):\n    return x, y, z", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of elements in the list that sum up to the target sum.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                return True\n    return False\ndef g(arr = [1, 2, 3, 4, 5], target_sum = 10):\n    return arr\nassert f(g())\n", "emb": null, "idx_generation": 151, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of elements in the list that sum up to the target sum.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                return True\n    return False", "solution_func": "def g(arr = [1, 2, 3, 4, 5], target_sum = 10):\n    return arr", "map_ix": null}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(arr: List[int], target_length=3) -> bool:\n    \"\"\"Check if there exists a permutation of the list that has a consecutive subsequence of length target_length.\"\"\"\n    perms = permutations(arr)\n    for perm in perms:\n        for i in range(len(perm)-target_length+1):\n            subseq = perm[i:i+target_length]\n            if sorted(subseq) == list(subseq):\n                return True\n    return False\ndef g(arr = [1, 2, 3, 4, 5], target_length = 3):\n    return arr\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 151, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(arr: List[int], target_length=3) -> bool:\n    \"\"\"Check if there exists a permutation of the list that has a consecutive subsequence of length target_length.\"\"\"\n    perms = permutations(arr)\n    for perm in perms:\n        for i in range(len(perm)-target_length+1):\n            subseq = perm[i:i+target_length]\n            if sorted(subseq) == list(subseq):\n                return True\n    return False", "solution_func": "def g(arr = [1, 2, 3, 4, 5], target_length = 3):\n    return arr", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, target_char='a') -> bool:\n    \"\"\"Check if the target character appears in the string at least twice.\"\"\"\n    count = string.count(target_char)\n    return count >= 2\ndef g(string = 'banana', target_char = 'a'):\n    return string\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 151, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, target_char='a') -> bool:\n    \"\"\"Check if the target character appears in the string at least twice.\"\"\"\n    count = string.count(target_char)\n    return count >= 2", "solution_func": "def g(string = 'banana', target_char = 'a'):\n    return string", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\ndef f(num_list: List[int]) -> bool:\n    \"\"\"Check if the list contains the same number in consecutive positions.\"\"\"\n    return any(num_list[i] == num_list[i+1] for i in range(len(num_list)-1))\ndef g():\n    num_list = [random.randint(1, 10) for _ in range(10)]\n    return num_list\nassert f(g())\n", "emb": null, "idx_generation": 151, "target_skills": null, "problem_func": "from typing import*\nimport random\ndef f(num_list: List[int]) -> bool:\n    \"\"\"Check if the list contains the same number in consecutive positions.\"\"\"\n    return any(num_list[i] == num_list[i+1] for i in range(len(num_list)-1))", "solution_func": "def g():\n    num_list = [random.randint(1, 10) for _ in range(10)]\n    return num_list", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(text: str, word='python') -> bool:\n    \"\"\"Check if the word is present in the text.\"\"\"\n    return word in text\ndef g(word = 'python'):\n    text = \"Python is a high-level programming language that is widely used.\"\n    return text\nassert f(g())\n", "emb": null, "idx_generation": 151, "target_skills": null, "problem_func": "from typing import*\ndef f(text: str, word='python') -> bool:\n    \"\"\"Check if the word is present in the text.\"\"\"\n    return word in text", "solution_func": "def g(word = 'python'):\n    text = \"Python is a high-level programming language that is widely used.\"\n    return text", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"Check if s1 and s2 have the same characters.\"\"\"\n    return sorted(s1) == sorted(s2)\ndef g():\n    s1 = \"listen\"\n    s2 = \"silent\"\n    return s1, s2\nassert f(*g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 151, "target_skills": null, "problem_func": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"Check if s1 and s2 have the same characters.\"\"\"\n    return sorted(s1) == sorted(s2)", "solution_func": "def g():\n    s1 = \"listen\"\n    s2 = \"silent\"\n    return s1, s2", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=10) -> bool:\n    \"\"\"Find a string of length n that contains only vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return len(s) == n and all((c in vowels for c in s))\ndef g(n = 10):\n    return 'a' * n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 151, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=10) -> bool:\n    \"\"\"Find a string of length n that contains only vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return len(s) == n and all((c in vowels for c in s))", "solution_func": "def g(n = 10):\n    return 'a' * n", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: List[int]) -> bool:\n    \"\"\"Find a list of three distinct integers whose sum is 10.\"\"\"\n    return len(x) == 3 and len(set(x)) == 3 and sum(x) == 10\ndef g():\n    return [1, 2, 7]\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 151, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int]) -> bool:\n    \"\"\"Find a list of three distinct integers whose sum is 10.\"\"\"\n    return len(x) == 3 and len(set(x)) == 3 and sum(x) == 10", "solution_func": "def g():\n    return [1, 2, 7]", "map_ix": [0, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(li: List[int], n=9) -> bool:\n    \"\"\"\n    Given n, find n integers such that li[i] * li[i+1] - 1 == li[i+2], for i = 0, 1, ..., n-1\n    where indices >= n \"wrap around\". Note: only n multiples of 3 are given since this is only possible for n\n    that are multiples of 3 (as proven in the IMO problem).\n\n    Sample input:\n    9\n\n    Sample output:\n    [_, _, _, _, _, _, _, _, _]\n\n    (Sample output hidden because showing sample output would give away too much information.)\n    \"\"\"\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n)))\ndef g(n = 9):\n    return [1, 1, 2] * (n // 3)\nassert f(g())\n", "emb": null, "idx_generation": 151, "target_skills": null, "problem_func": "from typing import*\ndef f(li: List[int], n=9) -> bool:\n    \"\"\"\n    Given n, find n integers such that li[i] * li[i+1] - 1 == li[i+2], for i = 0, 1, ..., n-1\n    where indices >= n \"wrap around\". Note: only n multiples of 3 are given since this is only possible for n\n    that are multiples of 3 (as proven in the IMO problem).\n\n    Sample input:\n    9\n\n    Sample output:\n    [_, _, _, _, _, _, _, _, _]\n\n    (Sample output hidden because showing sample output would give away too much information.)\n    \"\"\"\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n)))", "solution_func": "def g(n = 9):\n    return [1, 1, 2] * (n // 3)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, char_map={'a': '1', 'b': '2', 'c': '3'}) -> bool:\n    \"\"\"Check if a string can be transformed into another string using a character mapping\"\"\"\n    transformed = ''.join(char_map.get(c, c) for c in s)\n    return transformed == '123'\ndef g(char_map={'a': '1', 'b': '2', 'c': '3'}):\n    return ''.join(char_map.values())\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 151, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, char_map={'a': '1', 'b': '2', 'c': '3'}) -> bool:\n    \"\"\"Check if a string can be transformed into another string using a character mapping\"\"\"\n    transformed = ''.join(char_map.get(c, c) for c in s)\n    return transformed == '123'", "solution_func": "def g(char_map={'a': '1', 'b': '2', 'c': '3'}):\n    return ''.join(char_map.values())", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, s: str = 'hello', t: str = 'world') -> bool:\n    \"\"\"Check if the string s contains the string t as a substring, starting from index n.\"\"\"\n    return t in s[n:]\ndef g(s: str = 'hello', t: str = 'world'):\n    return s.index(t)\nassert f(g())\n", "emb": null, "idx_generation": 152, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, s: str = 'hello', t: str = 'world') -> bool:\n    \"\"\"Check if the string s contains the string t as a substring, starting from index n.\"\"\"\n    return t in s[n:]", "solution_func": "def g(s: str = 'hello', t: str = 'world'):\n    return s.index(t)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, x: int = 5, y: int = 7) -> bool:\n    \"\"\"Check if n is a multiple of both x and y.\"\"\"\n    return n % x == 0 and n % y == 0\ndef g(x: int = 5, y: int = 7):\n    return x * y\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 152, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, x: int = 5, y: int = 7) -> bool:\n    \"\"\"Check if n is a multiple of both x and y.\"\"\"\n    return n % x == 0 and n % y == 0", "solution_func": "def g(x: int = 5, y: int = 7):\n    return x * y", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a: int = 2, b: int = 3) -> bool:\n    \"\"\"Check if the sum of the squares of a and b is equal to n.\"\"\"\n    return a**2 + b**2 == n\ndef g(a: int = 2, b: int = 3):\n    return a**2 + b**2\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 152, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a: int = 2, b: int = 3) -> bool:\n    \"\"\"Check if the sum of the squares of a and b is equal to n.\"\"\"\n    return a**2 + b**2 == n", "solution_func": "def g(a: int = 2, b: int = 3):\n    return a**2 + b**2", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, k: int, p = 0) -> bool:\n    \"\"\"Check if a given string s can be divided into k equal parts\"\"\"\n    return len(s) % k == 0 and all(s[i:i+(len(s)//k)] == s[p:p+(len(s)//k)] for i in range(p, len(s), len(s)//k))\ndef g(s = \"abcabcabcabc\", k = 4):\n    return s\nassert f(g())\n", "emb": null, "idx_generation": 152, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, k: int, p = 0) -> bool:\n    \"\"\"Check if a given string s can be divided into k equal parts\"\"\"\n    return len(s) % k == 0 and all(s[i:i+(len(s)//k)] == s[p:p+(len(s)//k)] for i in range(p, len(s), len(s)//k))", "solution_func": "def g(s = \"abcabcabcabc\", k = 4):\n    return s", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, t: str, k = 1) -> bool:\n    \"\"\"Check if a substring t occurs k or more times in the string s\"\"\"\n    return s.count(t) >= k\ndef g(s = \"ababababab\", t = \"ab\", k = 2):\n    return s, t\nassert f(g())\n", "emb": null, "idx_generation": 152, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, t: str, k = 1) -> bool:\n    \"\"\"Check if a substring t occurs k or more times in the string s\"\"\"\n    return s.count(t) >= k", "solution_func": "def g(s = \"ababababab\", t = \"ab\", k = 2):\n    return s, t", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, k: int) -> bool:\n    \"\"\"Check if the sum of digits of n is divisible by k\"\"\"\n    return sum(int(i) for i in str(n)) % k == 0\ndef g(n = 12345, k = 3):\n    return n\nassert f(g())\n", "emb": null, "idx_generation": 152, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, k: int) -> bool:\n    \"\"\"Check if the sum of digits of n is divisible by k\"\"\"\n    return sum(int(i) for i in str(n)) % k == 0", "solution_func": "def g(n = 12345, k = 3):\n    return n", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.array, thresh=0.5) -> bool:\n    \"\"\"\n    Check if the sum of all elements in the array is greater than the threshold.\n    \"\"\"\n    return np.sum(arr) > thresh\n\ndef g(arr = np.array([[0.2, 0.3], [0.4, 0.1]])):\n    return arr.flatten()\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 152, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.array, thresh=0.5) -> bool:\n    \"\"\"\n    Check if the sum of all elements in the array is greater than the threshold.\n    \"\"\"\n    return np.sum(arr) > thresh", "solution_func": "def g(arr = np.array([[0.2, 0.3], [0.4, 0.1]])):\n    return arr.flatten()", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substr='hello') -> bool:\n    \"\"\"\n    Check if the given substring is present in the string.\n    \"\"\"\n    return substr in s\n\ndef g(substr = 'hello'):\n    return 'hello world'\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 152, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substr='hello') -> bool:\n    \"\"\"\n    Check if the given substring is present in the string.\n    \"\"\"\n    return substr in s", "solution_func": "def g(substr = 'hello'):\n    return 'hello world'", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: list, target=10) -> bool:\n    \"\"\"\n    Check if any two numbers in the list add up to the target value.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums = [1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 152, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: list, target=10) -> bool:\n    \"\"\"\n    Check if any two numbers in the list add up to the target value.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums = [1, 2, 3, 4, 5]):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find a pair of numbers in the list that add up to the target.\n    \"\"\"\n    return any((num + arr[i+1] == target for i, num in enumerate(arr[:-1])))\ndef g(arr: List[int], target: int):\n    for i, num in enumerate(arr[:-1]):\n        if num + arr[i+1] == target:\n            return (num, arr[i+1])\n    return None\nassert f(g())\n", "emb": null, "idx_generation": 152, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find a pair of numbers in the list that add up to the target.\n    \"\"\"\n    return any((num + arr[i+1] == target for i, num in enumerate(arr[:-1])))", "solution_func": "def g(arr: List[int], target: int):\n    for i, num in enumerate(arr[:-1]):\n        if num + arr[i+1] == target:\n            return (num, arr[i+1])\n    return None", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=5, b=7, c=3) -> bool:\n    \"\"\"Check if n is a multiple of a, b, and c\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0\ndef g(a=5, b=7, c=3):\n    return a * b * c\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 153, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=5, b=7, c=3) -> bool:\n    \"\"\"Check if n is a multiple of a, b, and c\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0", "solution_func": "def g(a=5, b=7, c=3):\n    return a * b * c", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float) -> bool:\n    \"\"\"Check if x, y, and z form a Pythagorean triplet\"\"\"\n    return math.isclose(x**2 + y**2, z**2)\ndef g(x: float, y: float, z: float):\n    return (x, y, z)\nassert f(g())\n", "emb": null, "idx_generation": 153, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float) -> bool:\n    \"\"\"Check if x, y, and z form a Pythagorean triplet\"\"\"\n    return math.isclose(x**2 + y**2, z**2)", "solution_func": "def g(x: float, y: float, z: float):\n    return (x, y, z)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(word: str, letters=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if all the letters in the word are vowels\"\"\"\n    return all(letter in letters for letter in word)\ndef g(word: str, letters=['a', 'e', 'i', 'o', 'u']):\n    return word\nassert f(g())\n", "emb": null, "idx_generation": 153, "target_skills": null, "problem_func": "from typing import*\ndef f(word: str, letters=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if all the letters in the word are vowels\"\"\"\n    return all(letter in letters for letter in word)", "solution_func": "def g(word: str, letters=['a', 'e', 'i', 'o', 'u']):\n    return word", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target=20, length=4) -> bool:\n    \"\"\"Find a sublist of the given length from the array that sums up to the target value.\"\"\"\n    return any(sum(arr[i:i+length]) == target for i in range(len(arr)-length+1))\ndef g(target=20, length=4):\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n    return arr\nassert f(g())\n", "emb": null, "idx_generation": 153, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=20, length=4) -> bool:\n    \"\"\"Find a sublist of the given length from the array that sums up to the target value.\"\"\"\n    return any(sum(arr[i:i+length]) == target for i in range(len(arr)-length+1))", "solution_func": "def g(target=20, length=4):\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n    return arr", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target='pythonprogramming', count=3) -> bool:\n    \"\"\"Count the number of occurrences of the given substring within the target string.\"\"\"\n    return s.count(target) >= count\ndef g(target='pythonprogramming', count=3):\n    s = \"pythonprogrammingisfunpythonprogrammingisgreatpythonprogrammingisawesome\"\n    return s\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 153, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='pythonprogramming', count=3) -> bool:\n    \"\"\"Count the number of occurrences of the given substring within the target string.\"\"\"\n    return s.count(target) >= count", "solution_func": "def g(target='pythonprogramming', count=3):\n    s = \"pythonprogrammingisfunpythonprogrammingisgreatpythonprogrammingisawesome\"\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the array that add up to the target value.\"\"\"\n    return any(arr[i] + arr[j] == target for i in range(len(arr) - 1) for j in range(i + 1, len(arr)))\ndef g(target=10):\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return arr\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 153, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the array that add up to the target value.\"\"\"\n    return any(arr[i] + arr[j] == target for i in range(len(arr) - 1) for j in range(i + 1, len(arr)))", "solution_func": "def g(target=10):\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return arr", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(num: int, base: int = 2) -> bool:\n    \"\"\"Check if a number is a palindrome in a given base.\"\"\"\n    converted = []\n    while num > 0:\n        converted.append(str(num % base))\n        num //= base\n    return ''.join(converted) == ''.join(converted[::-1])\ndef g(num: int = 121, base: int = 2):\n    return num\nassert f(g())\n", "emb": null, "idx_generation": 153, "target_skills": null, "problem_func": "from typing import*\ndef f(num: int, base: int = 2) -> bool:\n    \"\"\"Check if a number is a palindrome in a given base.\"\"\"\n    converted = []\n    while num > 0:\n        converted.append(str(num % base))\n        num //= base\n    return ''.join(converted) == ''.join(converted[::-1])", "solution_func": "def g(num: int = 121, base: int = 2):\n    return num", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(n: int, m: int) -> bool:\n    \"\"\"Check if n is divisible by the sum of its digits raised to the power of m.\"\"\"\n    digit_sum = sum([int(digit) for digit in str(n)])\n    return n % (digit_sum ** m) == 0\ndef g(n: int = 12345, m: int = 2):\n    return n\nassert f(g())\n", "emb": null, "idx_generation": 153, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, m: int) -> bool:\n    \"\"\"Check if n is divisible by the sum of its digits raised to the power of m.\"\"\"\n    digit_sum = sum([int(digit) for digit in str(n)])\n    return n % (digit_sum ** m) == 0", "solution_func": "def g(n: int = 12345, m: int = 2):\n    return n", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(li: List[int]) -> bool:\n    \"\"\"Check if a list of integers is sorted in non-decreasing order.\"\"\"\n    return li == sorted(li)\ndef g():\n    return random.sample(range(10), 10)\nassert f(g())\n", "emb": null, "idx_generation": 153, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(li: List[int]) -> bool:\n    \"\"\"Check if a list of integers is sorted in non-decreasing order.\"\"\"\n    return li == sorted(li)", "solution_func": "def g():\n    return random.sample(range(10), 10)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], a=10, s=2, e=20) -> bool:\n    \"\"\"Check if all elements in the list are divisible by a given number.\"\"\"\n    return all(i % a == 0 for i in x) and x[0] == s and x[-1] == e\n\ndef g(a=10, s=2, e=20):\n    return list(range(s, e+1, a))\n\nassert f(g())\n", "emb": null, "idx_generation": 153, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], a=10, s=2, e=20) -> bool:\n    \"\"\"Check if all elements in the list are divisible by a given number.\"\"\"\n    return all(i % a == 0 for i in x) and x[0] == s and x[-1] == e", "solution_func": "def g(a=10, s=2, e=20):\n    return list(range(s, e+1, a))", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, k: int) -> bool:\n    \"\"\"\n    Given a matrix and an integer k, check if there exists a submatrix of size k x k \n    where all the elements are the same.\n    \"\"\"\n    n = matrix.shape[0]\n    m = matrix.shape[1]\n    for i in range(n-k+1):\n        for j in range(m-k+1):\n            submatrix = matrix[i:i+k, j:j+k]\n            if np.unique(submatrix).size == 1:\n                return True\n    return False\n\ndef g(matrix: np.ndarray = np.array([[1, 1, 1], [1, 2, 1], [1, 1, 1]]), k: int = 2):\n    return matrix\n\nassert f(g())\n", "emb": null, "idx_generation": 154, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, k: int) -> bool:\n    \"\"\"\n    Given a matrix and an integer k, check if there exists a submatrix of size k x k \n    where all the elements are the same.\n    \"\"\"\n    n = matrix.shape[0]\n    m = matrix.shape[1]\n    for i in range(n-k+1):\n        for j in range(m-k+1):\n            submatrix = matrix[i:i+k, j:j+k]\n            if np.unique(submatrix).size == 1:\n                return True\n    return False", "solution_func": "def g(matrix: np.ndarray = np.array([[1, 1, 1], [1, 2, 1], [1, 1, 1]]), k: int = 2):\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, m: int) -> bool:\n    \"\"\"\n    Given two integers n and m, check if n is a perfect square and m is a perfect cube.\n    \"\"\"\n    return sqrt(n).is_integer() and (m**(1/3)).is_integer()\n\ndef g(n: int = 16, m: int = 27):\n    return n, m\n\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 154, "target_skills": null, "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, m: int) -> bool:\n    \"\"\"\n    Given two integers n and m, check if n is a perfect square and m is a perfect cube.\n    \"\"\"\n    return sqrt(n).is_integer() and (m**(1/3)).is_integer()", "solution_func": "def g(n: int = 16, m: int = 27):\n    return n, m", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport string\n\ndef f(s: str, n: int) -> bool:\n    \"\"\"\n    Given a string s and an integer n, check if s contains at least n unique lowercase letters.\n    \"\"\"\n    unique_letters = set(s.lower())\n    lowercase_letters = set(string.ascii_lowercase)\n    return len(unique_letters.intersection(lowercase_letters)) >= n\n\ndef g(s: str = \"Hello World!\", n: int = 5):\n    return s, n\n\nassert f(*g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 154, "target_skills": null, "problem_func": "from typing import*\nimport string\n\ndef f(s: str, n: int) -> bool:\n    \"\"\"\n    Given a string s and an integer n, check if s contains at least n unique lowercase letters.\n    \"\"\"\n    unique_letters = set(s.lower())\n    lowercase_letters = set(string.ascii_lowercase)\n    return len(unique_letters.intersection(lowercase_letters)) >= n", "solution_func": "def g(s: str = \"Hello World!\", n: int = 5):\n    return s, n", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(lst: List[int], target=0) -> bool:\n    \"\"\"Find three integers in the list that sum up to the target\"\"\"\n    return len(lst) >= 3 and any(sum(combination) == target for combination in combinations(lst, 3))\ndef g(target = 0):\n    return [target - 1, target - 2, target - 3] + [i for i in range(10)]\nassert f(g())\n", "emb": null, "idx_generation": 154, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int], target=0) -> bool:\n    \"\"\"Find three integers in the list that sum up to the target\"\"\"\n    return len(lst) >= 3 and any(sum(combination) == target for combination in combinations(lst, 3))", "solution_func": "def g(target = 0):\n    return [target - 1, target - 2, target - 3] + [i for i in range(10)]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], n=0) -> bool:\n    \"\"\"Find two integers in the list whose product is equal to n\"\"\"\n    return any(nums[i] * nums[j] == n for i in range(len(nums)) for j in range(i + 1, len(nums)))\ndef g(n = 0):\n    return [n, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 154, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], n=0) -> bool:\n    \"\"\"Find two integers in the list whose product is equal to n\"\"\"\n    return any(nums[i] * nums[j] == n for i in range(len(nums)) for j in range(i + 1, len(nums)))", "solution_func": "def g(n = 0):\n    return [n, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Find a row in the matrix that contains the target number\"\"\"\n    return any(target in row for row in matrix)\ndef g(target = 0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]\nassert f(g())\n", "emb": null, "idx_generation": 154, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Find a row in the matrix that contains the target number\"\"\"\n    return any(target in row for row in matrix)", "solution_func": "def g(target = 0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, word='hello', max_len=10) -> bool:\n    \"\"\"\n    Check if the given string contains the word and is shorter than or equal to the maximum length.\n    \"\"\"\n    return word in s and len(s) <= max_len\ndef g(word='hello', max_len=10):\n    return word * (max_len // len(word))\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 154, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, word='hello', max_len=10) -> bool:\n    \"\"\"\n    Check if the given string contains the word and is shorter than or equal to the maximum length.\n    \"\"\"\n    return word in s and len(s) <= max_len", "solution_func": "def g(word='hello', max_len=10):\n    return word * (max_len // len(word))", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, ops=['x++', 'x--', '++x', '--x'], target=10) -> bool:\n    \"\"\"\n    Given a sequence of operations \"++x\", \"x++\", \"--x\", \"x--\", and a target value, find initial value so that the\n    final value is the target value. The sequence of operations will be repeated until the target value is reached.\n\n    Sample Input:\n    ops = [\"++x\", \"--x\", \"++x\"]\n    target = 6\n\n    Sample Output:\n    -4\n    \"\"\"\n    for op in ops:\n        if op in ['++x', 'x++']:\n            n += 1\n        else:\n            assert op in ['--x', 'x--']\n            n -= 1\n    while n != target:\n        for op in ops:\n            if op in ['++x', 'x++']:\n                n += 1\n            else:\n                assert op in ['--x', 'x--']\n                n -= 1\n    return n == target\ndef g(ops=['++x', '--x', '++x'], target=10):\n    return target - (ops.count(\"++x\") + ops.count(\"x++\") - ops.count(\"--x\") - ops.count(\"x--\"))\nassert f(g())\n", "emb": null, "idx_generation": 154, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, ops=['x++', 'x--', '++x', '--x'], target=10) -> bool:\n    \"\"\"\n    Given a sequence of operations \"++x\", \"x++\", \"--x\", \"x--\", and a target value, find initial value so that the\n    final value is the target value. The sequence of operations will be repeated until the target value is reached.\n\n    Sample Input:\n    ops = [\"++x\", \"--x\", \"++x\"]\n    target = 6\n\n    Sample Output:\n    -4\n    \"\"\"\n    for op in ops:\n        if op in ['++x', 'x++']:\n            n += 1\n        else:\n            assert op in ['--x', 'x--']\n            n -= 1\n    while n != target:\n        for op in ops:\n            if op in ['++x', 'x++']:\n                n += 1\n            else:\n                assert op in ['--x', 'x--']\n                n -= 1\n    return n == target", "solution_func": "def g(ops=['++x', '--x', '++x'], target=10):\n    return target - (ops.count(\"++x\") + ops.count(\"x++\") - ops.count(\"--x\") - ops.count(\"x--\"))", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target='python', num_repeats=3) -> bool:\n    \"\"\"\n    Check if the given string is equal to the target string repeated a certain number of times.\n\n    Sample Input:\n    target = \"python\"\n    num_repeats = 4\n\n    Sample Output:\n    \"pythonpythonpythonpython\"\n    \"\"\"\n    return s == target * num_repeats\ndef g(target='python', num_repeats=3):\n    return target * num_repeats\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 154, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='python', num_repeats=3) -> bool:\n    \"\"\"\n    Check if the given string is equal to the target string repeated a certain number of times.\n\n    Sample Input:\n    target = \"python\"\n    num_repeats = 4\n\n    Sample Output:\n    \"pythonpythonpythonpython\"\n    \"\"\"\n    return s == target * num_repeats", "solution_func": "def g(target='python', num_repeats=3):\n    return target * num_repeats", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Find a pair of numbers in the list that add up to n\"\"\"\n    return any((x + y == n for x in nums for y in nums))\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return next((x, y) for x in nums for y in nums if x + y == sum(nums))\nassert f(g())\n", "emb": null, "idx_generation": 154, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Find a pair of numbers in the list that add up to n\"\"\"\n    return any((x + y == n for x in nums for y in nums))", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return next((x, y) for x in nums for y in nums if x + y == sum(nums))", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, nums = [2, 7, 11, 15], target = 9) -> bool:\n    \"\"\"\n    Given an array of integers, find two numbers such that they add up to a specific target number.\n    The function should return indices of the two numbers such that they add up to the target, where\n    index1 must be less than index2.\n\n    Sample Input:\n    `nums = [2, 7, 11, 15], target = 9`\n\n    Sample Output:\n    `[0, 1]`\n    \"\"\"\n    num_dict = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_dict:\n            return [num_dict[complement], i]\n        num_dict[num] = i\n    return []\ndef g(nums = [2, 7, 11, 15], target = 9):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return [i, j]\n    return []\nassert f(g())\n", "emb": null, "idx_generation": 155, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums = [2, 7, 11, 15], target = 9) -> bool:\n    \"\"\"\n    Given an array of integers, find two numbers such that they add up to a specific target number.\n    The function should return indices of the two numbers such that they add up to the target, where\n    index1 must be less than index2.\n\n    Sample Input:\n    `nums = [2, 7, 11, 15], target = 9`\n\n    Sample Output:\n    `[0, 1]`\n    \"\"\"\n    num_dict = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_dict:\n            return [num_dict[complement], i]\n        num_dict[num] = i\n    return []", "solution_func": "def g(nums = [2, 7, 11, 15], target = 9):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return [i, j]\n    return []", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, nums = [1, 2, 3, 4, 5]) -> bool:\n    \"\"\"\n    Given an array nums of n integers where n > 1, return an array output such that output[i] is equal to\n    the product of all the elements of nums except nums[i].\n\n    Sample Input:\n    `nums = [1, 2, 3, 4, 5]`\n\n    Sample Output:\n    `[120, 60, 40, 30, 24]`\n    \"\"\"\n    output = [1] * n\n    left = 1\n    for i in range(n):\n        output[i] *= left\n        left *= nums[i]\n    right = 1\n    for i in range(n-1, -1, -1):\n        output[i] *= right\n        right *= nums[i]\n    return output\ndef g(nums = [1, 2, 3, 4, 5]):\n    output = []\n    for i in range(len(nums)):\n        product = 1\n        for j in range(len(nums)):\n            if i != j:\n                product *= nums[j]\n        output.append(product)\n    return output\nassert f(g())\n", "emb": null, "idx_generation": 155, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums = [1, 2, 3, 4, 5]) -> bool:\n    \"\"\"\n    Given an array nums of n integers where n > 1, return an array output such that output[i] is equal to\n    the product of all the elements of nums except nums[i].\n\n    Sample Input:\n    `nums = [1, 2, 3, 4, 5]`\n\n    Sample Output:\n    `[120, 60, 40, 30, 24]`\n    \"\"\"\n    output = [1] * n\n    left = 1\n    for i in range(n):\n        output[i] *= left\n        left *= nums[i]\n    right = 1\n    for i in range(n-1, -1, -1):\n        output[i] *= right\n        right *= nums[i]\n    return output", "solution_func": "def g(nums = [1, 2, 3, 4, 5]):\n    output = []\n    for i in range(len(nums)):\n        product = 1\n        for j in range(len(nums)):\n            if i != j:\n                product *= nums[j]\n        output.append(product)\n    return output", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, nums = [-2,1,-3,4,-1,2,1,-5,4]) -> bool:\n    \"\"\"\n    Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest\n    sum and return its sum.\n\n    Sample Input:\n    `nums = [-2,1,-3,4,-1,2,1,-5,4]`\n\n    Sample Output:\n    `6`\n    \"\"\"\n    max_sum = float('-inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum = max(curr_sum + num, num)\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\ndef g(nums = [-2,1,-3,4,-1,2,1,-5,4]):\n    max_sum = nums[0]\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            curr_sum = sum(nums[i:j+1])\n            max_sum = max(max_sum, curr_sum)\n    return max_sum\nassert f(g())\n", "emb": null, "idx_generation": 155, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums = [-2,1,-3,4,-1,2,1,-5,4]) -> bool:\n    \"\"\"\n    Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest\n    sum and return its sum.\n\n    Sample Input:\n    `nums = [-2,1,-3,4,-1,2,1,-5,4]`\n\n    Sample Output:\n    `6`\n    \"\"\"\n    max_sum = float('-inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum = max(curr_sum + num, num)\n        max_sum = max(max_sum, curr_sum)\n    return max_sum", "solution_func": "def g(nums = [-2,1,-3,4,-1,2,1,-5,4]):\n    max_sum = nums[0]\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            curr_sum = sum(nums[i:j+1])\n            max_sum = max(max_sum, curr_sum)\n    return max_sum", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(n: int, nums: List[int]) -> bool:\n    \"\"\"Check if the given number is present in the list\"\"\"\n    return n in nums\n\ndef g(nums: List[int]):\n    \"\"\"Generate a list of random numbers\"\"\"\n    return random.sample(range(1, 100), 10)\n\nassert f(g())\n", "emb": null, "idx_generation": 155, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(n: int, nums: List[int]) -> bool:\n    \"\"\"Check if the given number is present in the list\"\"\"\n    return n in nums", "solution_func": "def g(nums: List[int]):\n    \"\"\"Generate a list of random numbers\"\"\"\n    return random.sample(range(1, 100), 10)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, substring: str) -> bool:\n    \"\"\"Check if the given substring is present in the string\"\"\"\n    return substring in s\n\ndef g(s: str, substring: str):\n    \"\"\"Add the substring at the beginning and end of the string\"\"\"\n    return substring + s + substring\n\nassert f(g())\n", "emb": null, "idx_generation": 155, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substring: str) -> bool:\n    \"\"\"Check if the given substring is present in the string\"\"\"\n    return substring in s", "solution_func": "def g(s: str, substring: str):\n    \"\"\"Add the substring at the beginning and end of the string\"\"\"\n    return substring + s + substring", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\nimport math\n\ndef f(a: int, b: int, c: int) -> bool:\n    \"\"\"Check if the given numbers form a Pythagorean triplet\"\"\"\n    return a**2 + b**2 == c**2\n\ndef g():\n    \"\"\"Generate a Pythagorean triplet\"\"\"\n    m = random.randint(1, 10)\n    n = random.randint(1, 10)\n    a = m**2 - n**2\n    b = 2 * m * n\n    c = m**2 + n**2\n    return a, b, c\n\nassert f(g())\n", "emb": null, "idx_generation": 155, "target_skills": null, "problem_func": "import random\nfrom typing import*\nimport math\n\ndef f(a: int, b: int, c: int) -> bool:\n    \"\"\"Check if the given numbers form a Pythagorean triplet\"\"\"\n    return a**2 + b**2 == c**2", "solution_func": "def g():\n    \"\"\"Generate a Pythagorean triplet\"\"\"\n    m = random.randint(1, 10)\n    n = random.randint(1, 10)\n    a = m**2 - n**2\n    b = 2 * m * n\n    c = m**2 + n**2\n    return a, b, c", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(lst: list) -> bool:\n    \"\"\"Check if the given list contains any duplicates.\"\"\"\n    return len(lst) != len(set(lst))\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\nassert f(g())\n", "emb": null, "idx_generation": 155, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: list) -> bool:\n    \"\"\"Check if the given list contains any duplicates.\"\"\"\n    return len(lst) != len(set(lst))", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef g():\n    return 17\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 155, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "solution_func": "def g():\n    return 17", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return s == s[::-1]\ndef g():\n    return \"radar\"\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 155, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return s == s[::-1]", "solution_func": "def g():\n    return \"radar\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Determine if a given matrix is a magic square.\n    A matrix is a magic square if the sum of every row, every column, and both diagonals are equal.\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n\n    # Check rows\n    for i in range(n):\n        if sum(matrix[i]) != target_sum:\n            return False\n\n    # Check columns\n    for j in range(n):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum != target_sum:\n            return False\n\n    # Check diagonals\n    diagonal_sum1 = 0\n    diagonal_sum2 = 0\n    for i in range(n):\n        diagonal_sum1 += matrix[i][i]\n        diagonal_sum2 += matrix[i][n-i-1]\n    if diagonal_sum1 != target_sum or diagonal_sum2 != target_sum:\n        return False\n\n    return True\n\ndef g(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Generate a magic square with a given size.\n    \"\"\"\n    n = len(matrix)\n    magic_sum = n * (n**2 + 1) // 2\n\n    # Initialize the matrix with zeros\n    for i in range(n):\n        matrix.append([0] * n)\n\n    # Fill the matrix using the Siamese method\n    i = 0\n    j = n // 2\n    for num in range(1, n**2 + 1):\n        matrix[i][j] = num\n        i -= 1\n        j += 1\n        if i < 0:\n            i = n - 1\n        if j == n:\n            j = 0\n        if matrix[i][j] != 0:\n            i += 1\n            j -= 1\n\n    return matrix\n\n# Test the puzzle\nmatrix = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\nassert f(g(matrix))\n", "emb": null, "idx_generation": 155, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Determine if a given matrix is a magic square.\n    A matrix is a magic square if the sum of every row, every column, and both diagonals are equal.\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n\n    # Check rows\n    for i in range(n):\n        if sum(matrix[i]) != target_sum:\n            return False\n\n    # Check columns\n    for j in range(n):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum != target_sum:\n            return False\n\n    # Check diagonals\n    diagonal_sum1 = 0\n    diagonal_sum2 = 0\n    for i in range(n):\n        diagonal_sum1 += matrix[i][i]\n        diagonal_sum2 += matrix[i][n-i-1]\n    if diagonal_sum1 != target_sum or diagonal_sum2 != target_sum:\n        return False\n\n    return True", "solution_func": "def g(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Generate a magic square with a given size.\n    \"\"\"\n    n = len(matrix)\n    magic_sum = n * (n**2 + 1) // 2\n\n    # Initialize the matrix with zeros\n    for i in range(n):\n        matrix.append([0] * n)\n\n    # Fill the matrix using the Siamese method\n    i = 0\n    j = n // 2\n    for num in range(1, n**2 + 1):\n        matrix[i][j] = num\n        i -= 1\n        j += 1\n        if i < 0:\n            i = n - 1\n        if j == n:\n            j = 0\n        if matrix[i][j] != 0:\n            i += 1\n            j -= 1\n\n    return matrix\n\n# Test the puzzle\nmatrix = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int, n=3) -> bool:\n    \"\"\"Find n numbers in nums that sum up to target\"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, n):\n        if sum(combo) == target:\n            return True\n    return False\ndef g(target: int, n=3):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums\nassert f(g(), 15)\n", "emb": null, "idx_generation": 156, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int, n=3) -> bool:\n    \"\"\"Find n numbers in nums that sum up to target\"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, n):\n        if sum(combo) == target:\n            return True\n    return False", "solution_func": "def g(target: int, n=3):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Determine if a 9x9 Sudoku board is valid\"\"\"\n    rows = [set() for _ in range(9)]\n    cols = [set() for _ in range(9)]\n    boxes = [[set() for _ in range(3)] for _ in range(3)]\n    \n    for i in range(9):\n        for j in range(9):\n            num = matrix[i][j]\n            if num != 0:\n                if num in rows[i] or num in cols[j] or num in boxes[i//3][j//3]:\n                    return False\n                rows[i].add(num)\n                cols[j].add(num)\n                boxes[i//3][j//3].add(num)\n    return True\ndef g():\n    matrix = [\n        [5, 3, 0, 0, 7, 0, 0, 0, 0],\n        [6, 0, 0, 1, 9, 5, 0, 0, 0],\n        [0, 9, 8, 0, 0, 0, 0, 6, 0],\n        [8, 0, 0, 0, 6, 0, 0, 0, 3],\n        [4, 0, 0, 8, 0, 3, 0, 0, 1],\n        [7, 0, 0, 0, 2, 0, 0, 0, 6],\n        [0, 6, 0, 0, 0, 0, 2, 8, 0],\n        [0, 0, 0, 4, 1, 9, 0, 0, 5],\n        [0, 0, 0, 0, 8, 0, 0, 7, 9]\n    ]\n    return matrix\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0], "idx_generation": 156, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Determine if a 9x9 Sudoku board is valid\"\"\"\n    rows = [set() for _ in range(9)]\n    cols = [set() for _ in range(9)]\n    boxes = [[set() for _ in range(3)] for _ in range(3)]\n    \n    for i in range(9):\n        for j in range(9):\n            num = matrix[i][j]\n            if num != 0:\n                if num in rows[i] or num in cols[j] or num in boxes[i//3][j//3]:\n                    return False\n                rows[i].add(num)\n                cols[j].add(num)\n                boxes[i//3][j//3].add(num)\n    return True", "solution_func": "def g():\n    matrix = [\n        [5, 3, 0, 0, 7, 0, 0, 0, 0],\n        [6, 0, 0, 1, 9, 5, 0, 0, 0],\n        [0, 9, 8, 0, 0, 0, 0, 6, 0],\n        [8, 0, 0, 0, 6, 0, 0, 0, 3],\n        [4, 0, 0, 8, 0, 3, 0, 0, 1],\n        [7, 0, 0, 0, 2, 0, 0, 0, 6],\n        [0, 6, 0, 0, 0, 0, 2, 8, 0],\n        [0, 0, 0, 4, 1, 9, 0, 0, 5],\n        [0, 0, 0, 0, 8, 0, 0, 7, 9]\n    ]\n    return matrix", "map_ix": [1, 1, 0, 1, 0, 0, 1, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Determine if there exists a triple of elements (i, j, k) such that nums[i] = nums[j] = nums[k] and i < j < k\"\"\"\n    from collections import Counter\n    counts = Counter(nums)\n    for count in counts.values():\n        if count >= 3:\n            return True\n    return False\ndef g():\n    nums = [1, 2, 3, 4, 4, 4, 5, 6, 7]\n    return nums\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 156, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Determine if there exists a triple of elements (i, j, k) such that nums[i] = nums[j] = nums[k] and i < j < k\"\"\"\n    from collections import Counter\n    counts = Counter(nums)\n    for count in counts.values():\n        if count >= 3:\n            return True\n    return False", "solution_func": "def g():\n    nums = [1, 2, 3, 4, 4, 4, 5, 6, 7]\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5], target=10) -> bool:\n    \"\"\"Find if there exists a combination of n numbers from a list that adds up to a target number\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, n))\ndef g(nums=[1, 2, 3, 4, 5], target=10):\n    from itertools import combinations\n    for i in range(1, len(nums) + 1):\n        for comb in combinations(nums, i):\n            if sum(comb) == target:\n                return True\n    return False\nassert f(g())\n", "emb": null, "idx_generation": 156, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5], target=10) -> bool:\n    \"\"\"Find if there exists a combination of n numbers from a list that adds up to a target number\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, n))", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=10):\n    from itertools import combinations\n    for i in range(1, len(nums) + 1):\n        for comb in combinations(nums, i):\n            if sum(comb) == target:\n                return True\n    return False", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5], target=10) -> bool:\n    \"\"\"Find if there exists a combination of n numbers from a list that adds up to a target number\"\"\"\n    dp = [False] * (target + 1)\n    dp[0] = True\n    for num in nums:\n        for i in range(target, num - 1, -1):\n            dp[i] = dp[i] or dp[i - num]\n    return dp[target]\ndef g(nums=[1, 2, 3, 4, 5], target=10):\n    dp = [False] * (target + 1)\n    dp[0] = True\n    for num in nums:\n        for i in range(target, num - 1, -1):\n            dp[i] = dp[i] or dp[i - num]\n    return dp[target]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 156, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5], target=10) -> bool:\n    \"\"\"Find if there exists a combination of n numbers from a list that adds up to a target number\"\"\"\n    dp = [False] * (target + 1)\n    dp[0] = True\n    for num in nums:\n        for i in range(target, num - 1, -1):\n            dp[i] = dp[i] or dp[i - num]\n    return dp[target]", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=10):\n    dp = [False] * (target + 1)\n    dp[0] = True\n    for num in nums:\n        for i in range(target, num - 1, -1):\n            dp[i] = dp[i] or dp[i - num]\n    return dp[target]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5], target=10) -> bool:\n    \"\"\"Find if there exists a combination of n numbers from a list that adds up to a target number\"\"\"\n    def dfs(remain, start, count):\n        if count == n:\n            return remain == 0\n        for i in range(start, len(nums)):\n            if dfs(remain - nums[i], i + 1, count + 1):\n                return True\n        return False\n    return dfs(target, 0, 0)\ndef g(nums=[1, 2, 3, 4, 5], target=10):\n    def dfs(remain, start, count):\n        if count == n:\n            return remain == 0\n        for i in range(start, len(nums)):\n            if dfs(remain - nums[i], i + 1, count + 1):\n                return True\n        return False\n    return dfs(target, 0, 0)\nassert f(g())\n", "emb": null, "idx_generation": 156, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5], target=10) -> bool:\n    \"\"\"Find if there exists a combination of n numbers from a list that adds up to a target number\"\"\"\n    def dfs(remain, start, count):\n        if count == n:\n            return remain == 0\n        for i in range(start, len(nums)):\n            if dfs(remain - nums[i], i + 1, count + 1):\n                return True\n        return False\n    return dfs(target, 0, 0)", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=10):\n    def dfs(remain, start, count):\n        if count == n:\n            return remain == 0\n        for i in range(start, len(nums)):\n            if dfs(remain - nums[i], i + 1, count + 1):\n                return True\n        return False\n    return dfs(target, 0, 0)", "map_ix": null}, {"fitness": 1.0, "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(num: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) -> bool:\n    \"\"\"Check if a number is prime by checking if it is divisible by any prime number up to its square root.\"\"\"\n    if num < 2:\n        return False\n    for prime in primes:\n        if prime > sqrt(num):\n            break\n        if num % prime == 0:\n            return False\n    return True\n\ndef g(num: int):\n    return num\n\nassert f(g(53))\n", "emb": [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 156, "target_skills": null, "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(num: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) -> bool:\n    \"\"\"Check if a number is prime by checking if it is divisible by any prime number up to its square root.\"\"\"\n    if num < 2:\n        return False\n    for prime in primes:\n        if prime > sqrt(num):\n            break\n        if num % prime == 0:\n            return False\n    return True", "solution_func": "def g(num: int):\n    return num", "map_ix": [1, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], n=3, target=10) -> bool:\n    \"\"\"Check if there exists a subset of length n in the array whose sum is equal to the target.\"\"\"\n    if n > len(arr):\n        return False\n    if n == 1:\n        return target in arr\n    for i in range(len(arr)):\n        if f(arr[i+1:], n-1, target-arr[i]):\n            return True\n    return False\n\ndef g(arr: List[int], n=3, target=10):\n    return arr\n\nassert f(g([2, 4, 6, 8, 10]))\n", "emb": null, "idx_generation": 156, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], n=3, target=10) -> bool:\n    \"\"\"Check if there exists a subset of length n in the array whose sum is equal to the target.\"\"\"\n    if n > len(arr):\n        return False\n    if n == 1:\n        return target in arr\n    for i in range(len(arr)):\n        if f(arr[i+1:], n-1, target-arr[i]):\n            return True\n    return False", "solution_func": "def g(arr: List[int], n=3, target=10):\n    return arr", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if a string contains all vowels in order.\"\"\"\n    vowel_index = 0\n    for char in s:\n        if char.lower() == vowels[vowel_index]:\n            vowel_index += 1\n            if vowel_index == len(vowels):\n                return True\n    return False\n\ndef g(s: str):\n    return s\n\nassert f(g(\"The quick brown fox jumps over the lazy dog\"))\n", "emb": null, "idx_generation": 156, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if a string contains all vowels in order.\"\"\"\n    vowel_index = 0\n    for char in s:\n        if char.lower() == vowels[vowel_index]:\n            vowel_index += 1\n            if vowel_index == len(vowels):\n                return True\n    return False", "solution_func": "def g(s: str):\n    return s", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, x = 4, y = 7) -> bool:\n    \"\"\"Check if a string contains a specific substring\"\"\"\n    return s[x-1:y] == \"substring\"\ndef g(x = 4, y = 7):\n    return \"This is a test substring to check\" \nassert f(g())\n", "emb": null, "idx_generation": 156, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, x = 4, y = 7) -> bool:\n    \"\"\"Check if a string contains a specific substring\"\"\"\n    return s[x-1:y] == \"substring\"", "solution_func": "def g(x = 4, y = 7):\n    return \"This is a test substring to check\"", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Check if a target number is in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(matrix: List[List[int]], target: int):\n    return matrix, target\nassert f(g())\n", "emb": null, "idx_generation": 157, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Check if a target number is in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(matrix: List[List[int]], target: int):\n    return matrix, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if two numbers in the list add up to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums: List[int], target: int):\n    return nums, target\nassert f(g())\n", "emb": null, "idx_generation": 157, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if two numbers in the list add up to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums: List[int], target: int):\n    return nums, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"Find the index of the target number in the list\"\"\"\n    for i, num in enumerate(nums):\n        if num == target:\n            return i\n    return -1\ndef g(nums: List[int], target: int):\n    return nums, target\nassert f(g())", "emb": null, "idx_generation": 157, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"Find the index of the target number in the list\"\"\"\n    for i, num in enumerate(nums):\n        if num == target:\n            return i\n    return -1", "solution_func": "def g(nums: List[int], target: int):\n    return nums, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"Check if a string is a palindrome and its length is divisible by n.\"\"\"\n    return s == s[::-1] and len(s) % n == 0\ndef g(s: str = '', n: int = 1):\n    return s * n\nassert f(g())\n", "emb": null, "idx_generation": 157, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"Check if a string is a palindrome and its length is divisible by n.\"\"\"\n    return s == s[::-1] and len(s) % n == 0", "solution_func": "def g(s: str = '', n: int = 1):\n    return s * n", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find if there are two numbers in a list that add up to a target number.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(nums: List[int] = [], target: int = 0):\n    return nums, target\nassert f(g())\n", "emb": null, "idx_generation": 157, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find if there are two numbers in a list that add up to a target number.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(nums: List[int] = [], target: int = 0):\n    return nums, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Find if a target number exists in a 2D matrix, where each row and column is sorted in ascending order.\"\"\"\n    if not matrix or not matrix[0]:\n        return False\n    rows, cols = len(matrix), len(matrix[0])\n    row, col = rows - 1, 0\n    while row >= 0 and col < cols:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            col += 1\n        else:\n            row -= 1\n    return False\ndef g(matrix: List[List[int]] = [[]], target: int = 0):\n    return matrix, target\nassert f(g())\n", "emb": null, "idx_generation": 157, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Find if a target number exists in a 2D matrix, where each row and column is sorted in ascending order.\"\"\"\n    if not matrix or not matrix[0]:\n        return False\n    rows, cols = len(matrix), len(matrix[0])\n    row, col = rows - 1, 0\n    while row >= 0 and col < cols:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            col += 1\n        else:\n            row -= 1\n    return False", "solution_func": "def g(matrix: List[List[int]] = [[]], target: int = 0):\n    return matrix, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], n=5, target=9) -> bool:\n    \"\"\"Find a subsequence of n numbers from nums that sums up to the target value.\"\"\"\n    from itertools import combinations\n    for c in combinations(nums, n):\n        if sum(c) == target:\n            return True\n    return False\ndef g(n=5, target=9):\n    return list(range(1, n+1))\nassert f(g())\n", "emb": null, "idx_generation": 157, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], n=5, target=9) -> bool:\n    \"\"\"Find a subsequence of n numbers from nums that sums up to the target value.\"\"\"\n    from itertools import combinations\n    for c in combinations(nums, n):\n        if sum(c) == target:\n            return True\n    return False", "solution_func": "def g(n=5, target=9):\n    return list(range(1, n+1))", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=50) -> bool:\n    \"\"\"Find a row in the matrix whose sum is equal to the target value.\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    return False\ndef g(target=50):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]\nassert f(g())\n", "emb": null, "idx_generation": 157, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=50) -> bool:\n    \"\"\"Find a row in the matrix whose sum is equal to the target value.\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    return False", "solution_func": "def g(target=50):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, s1='apple', s2='banana') -> bool:\n    \"\"\"Check if s contains both s1 and s2 as substrings.\"\"\"\n    return s1 in s and s2 in s\ndef g(s1='apple', s2='banana'):\n    return s1 + s2\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 157, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, s1='apple', s2='banana') -> bool:\n    \"\"\"Check if s contains both s1 and s2 as substrings.\"\"\"\n    return s1 in s and s2 in s", "solution_func": "def g(s1='apple', s2='banana'):\n    return s1 + s2", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=12) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in a list that sums up to the target value.\n    \"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 157, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=12) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in a list that sums up to the target value.\n    \"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))", "solution_func": "def g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n: int = 2) -> bool:\n    \"\"\"Find a string that contains exactly n occurrences of the letter 'a'.\"\"\"\n    return s.count('a') == n\ndef g(n: int = 2):\n    return 'a' * n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 158, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n: int = 2) -> bool:\n    \"\"\"Find a string that contains exactly n occurrences of the letter 'a'.\"\"\"\n    return s.count('a') == n", "solution_func": "def g(n: int = 2):\n    return 'a' * n", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target: int = 0) -> bool:\n    \"\"\"Find a pair of numbers in the array that sums up to the target.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(target: int = 0):\n    return [target, 0]\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 158, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int = 0) -> bool:\n    \"\"\"Find a pair of numbers in the array that sums up to the target.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g(target: int = 0):\n    return [target, 0]", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], k: int = 0) -> bool:\n    \"\"\"Find two numbers in the list whose difference is exactly k.\"\"\"\n    nums_set = set(nums)\n    for num in nums:\n        if num - k in nums_set:\n            return True\n    return False\ndef g(k: int = 0):\n    return [k, 0]\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 158, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], k: int = 0) -> bool:\n    \"\"\"Find two numbers in the list whose difference is exactly k.\"\"\"\n    nums_set = set(nums)\n    for num in nums:\n        if num - k in nums_set:\n            return True\n    return False", "solution_func": "def g(k: int = 0):\n    return [k, 0]", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers, find any pair of numbers that sums up to the target value.\n\n    Sample Input:\n    `[1, 2, 3, 4, 5]`\n\n    Sample Output:\n    `(2, 3)`\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n", "emb": null, "idx_generation": 158, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers, find any pair of numbers that sums up to the target value.\n\n    Sample Input:\n    `[1, 2, 3, 4, 5]`\n\n    Sample Output:\n    `(2, 3)`\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, t='python', count=2) -> bool:\n    \"\"\"\n    Given two strings, s and t, find if s contains t as a substring, at least count times.\n\n    Sample Input:\n    `(\"python is a programming language\", \"python\")`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    return s.count(t) >= count\n\ndef g(t='python', count=2):\n    return \"python is a programming language\"\n\nassert f(g())\n", "emb": null, "idx_generation": 158, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, t='python', count=2) -> bool:\n    \"\"\"\n    Given two strings, s and t, find if s contains t as a substring, at least count times.\n\n    Sample Input:\n    `(\"python is a programming language\", \"python\")`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    return s.count(t) >= count", "solution_func": "def g(t='python', count=2):\n    return \"python is a programming language\"", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date: str, format='%Y-%m-%d') -> bool:\n    \"\"\"\n    Given a date string and a format string, check if the date is valid and matches the format.\n\n    Sample Input:\n    `(\"2021-12-31\", \"%Y-%m-%d\")`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    try:\n        datetime.strptime(date, format)\n        return True\n    except ValueError:\n        return False\n\ndef g(format='%Y-%m-%d'):\n    return \"2021-12-31\"\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 158, "target_skills": null, "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(date: str, format='%Y-%m-%d') -> bool:\n    \"\"\"\n    Given a date string and a format string, check if the date is valid and matches the format.\n\n    Sample Input:\n    `(\"2021-12-31\", \"%Y-%m-%d\")`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    try:\n        datetime.strptime(date, format)\n        return True\n    except ValueError:\n        return False", "solution_func": "def g(format='%Y-%m-%d'):\n    return \"2021-12-31\"", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target=16) -> bool:\n    \"\"\"Determine if there are two numbers in the list that add up to the target.\"\"\"\n    n = len(arr)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(target=16):\n    return [4, 8, 12, 6]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 158, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=16) -> bool:\n    \"\"\"Determine if there are two numbers in the list that add up to the target.\"\"\"\n    n = len(arr)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g(target=16):\n    return [4, 8, 12, 6]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if there is a square matrix of size n in the given matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows-n+1):\n        for j in range(cols-n+1):\n            square = True\n            for k in range(n):\n                for l in range(n):\n                    if matrix[i+k][j+l] == 0:\n                        square = False\n                        break\n                if not square:\n                    break\n            if square:\n                return True\n    return False\ndef g(n=3):\n    return [[1, 1, 0, 0, 1],\n            [1, 1, 0, 0, 1],\n            [1, 1, 1, 1, 1],\n            [1, 1, 1, 1, 1],\n            [0, 0, 1, 1, 1]]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 158, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if there is a square matrix of size n in the given matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows-n+1):\n        for j in range(cols-n+1):\n            square = True\n            for k in range(n):\n                for l in range(n):\n                    if matrix[i+k][j+l] == 0:\n                        square = False\n                        break\n                if not square:\n                    break\n            if square:\n                return True\n    return False", "solution_func": "def g(n=3):\n    return [[1, 1, 0, 0, 1],\n            [1, 1, 0, 0, 1],\n            [1, 1, 1, 1, 1],\n            [1, 1, 1, 1, 1],\n            [0, 0, 1, 1, 1]]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the string contains a repeating pattern of length n.\"\"\"\n    length = len(s)\n    for i in range(n, length//2+1):\n        if length % i == 0:\n            pattern = s[:i]\n            if pattern * (length // i) == s:\n                return True\n    return False\ndef g(n=3):\n    return \"abcabcabc\"\nassert f(g())\n", "emb": [1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 158, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the string contains a repeating pattern of length n.\"\"\"\n    length = len(s)\n    for i in range(n, length//2+1):\n        if length % i == 0:\n            pattern = s[:i]\n            if pattern * (length // i) == s:\n                return True\n    return False", "solution_func": "def g(n=3):\n    return \"abcabcabc\"", "map_ix": [1, 0, 1, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target: int) -> bool:\n    \"\"\"\n    Given a 2D numpy array and a target number, find if there exists a pair of numbers in the array such that their sum is equal to the target.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if arr[i][j] + arr[i][j + 1] == target:\n                return True\n    return False\n\ndef g(arr: np.ndarray, target: int):\n    return arr\n\n# Test cases\narr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ntarget = 9\nassert f(g(arr, target), target)\n", "emb": null, "idx_generation": 158, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target: int) -> bool:\n    \"\"\"\n    Given a 2D numpy array and a target number, find if there exists a pair of numbers in the array such that their sum is equal to the target.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if arr[i][j] + arr[i][j + 1] == target:\n                return True\n    return False", "solution_func": "def g(arr: np.ndarray, target: int):\n    return arr\n\n# Test cases\narr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ntarget = 9", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, m: int, count=7) -> bool:\n    \"\"\"Find a list of length n with m occurrences of count\"\"\"\n    return [count] * m + [0] * (n - m)\ndef g(n = 10, m = 3):\n    return [0] * (n - m) + [m] * m\nassert f(g())\n", "emb": null, "idx_generation": 159, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m: int, count=7) -> bool:\n    \"\"\"Find a list of length n with m occurrences of count\"\"\"\n    return [count] * m + [0] * (n - m)", "solution_func": "def g(n = 10, m = 3):\n    return [0] * (n - m) + [m] * m", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(n: int, m: int, count=8) -> bool:\n    \"\"\"Find a number that can be represented as the sum of count and the product of n and m\"\"\"\n    return math.isqrt(n * m + count) ** 2 == n * m + count\ndef g(n = 10, m = 3):\n    return n * m + 8\nassert f(g())\n", "emb": null, "idx_generation": 159, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, m: int, count=8) -> bool:\n    \"\"\"Find a number that can be represented as the sum of count and the product of n and m\"\"\"\n    return math.isqrt(n * m + count) ** 2 == n * m + count", "solution_func": "def g(n = 10, m = 3):\n    return n * m + 8", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, a=3, b=2, c=1) -> bool:\n    \"\"\"Find a string with a occurrences of 'a', b occurrences of 'b', and c occurrences of 'c'\"\"\"\n    return s.count('a') == a and s.count('b') == b and s.count('c') == c\ndef g(a = 3, b = 2, c = 1):\n    return 'a' * a + 'b' * b + 'c' * c\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 159, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, a=3, b=2, c=1) -> bool:\n    \"\"\"Find a string with a occurrences of 'a', b occurrences of 'b', and c occurrences of 'c'\"\"\"\n    return s.count('a') == a and s.count('b') == b and s.count('c') == c", "solution_func": "def g(a = 3, b = 2, c = 1):\n    return 'a' * a + 'b' * b + 'c' * c", "map_ix": [0, 0, 0, 1, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\ndef f(x: float, y=3.14) -> bool:\n    \"\"\"Check if the square root of x is less than y\"\"\"\n    return math.sqrt(x) < y\ndef g(y = 3.14):\n    x = y**2 + 1\n    return x\nassert f(g())\n", "emb": null, "idx_generation": 159, "target_skills": null, "problem_func": "from typing import*\nimport math\ndef f(x: float, y=3.14) -> bool:\n    \"\"\"Check if the square root of x is less than y\"\"\"\n    return math.sqrt(x) < y", "solution_func": "def g(y = 3.14):\n    x = y**2 + 1\n    return x", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, a=17, b=5) -> bool:\n    \"\"\"Check if n is a prime number\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef g(a = 17, b = 5):\n    n = a * b\n    return n\nassert f(g())\n", "emb": null, "idx_generation": 159, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=17, b=5) -> bool:\n    \"\"\"Check if n is a prime number\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "solution_func": "def g(a = 17, b = 5):\n    n = a * b\n    return n", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=5, m=2) -> bool:\n    \"\"\"Check if there are exactly n occurrences of the character 'a' in the string s\"\"\"\n    return s.count('a') == n\ndef g(n = 5, m = 2):\n    return 'a' * n + 'b' * m\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 159, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=5, m=2) -> bool:\n    \"\"\"Check if there are exactly n occurrences of the character 'a' in the string s\"\"\"\n    return s.count('a') == n", "solution_func": "def g(n = 5, m = 2):\n    return 'a' * n + 'b' * m", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, a=3, b=2) -> bool:\n    \"\"\"Check if the substring 'a' appears before the substring 'b' in the string 's'\"\"\"\n    return s.index(a) < s.index(b)\ndef g(a = 'abc', b = 'def', s='xyzabcdef'):\n    return s\nassert f(g())\n", "emb": null, "idx_generation": 159, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, a=3, b=2) -> bool:\n    \"\"\"Check if the substring 'a' appears before the substring 'b' in the string 's'\"\"\"\n    return s.index(a) < s.index(b)", "solution_func": "def g(a = 'abc', b = 'def', s='xyzabcdef'):\n    return s", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=10.5, b=2.3) -> bool:\n    \"\"\"Check if the square root of 'x' is greater than 'a' and less than 'b'\"\"\"\n    return math.sqrt(x) > a and math.sqrt(x) < b\ndef g(a = 10.5, b = 2.3):\n    return (a + b) ** 2\nassert f(g())\n", "emb": null, "idx_generation": 159, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, a=10.5, b=2.3) -> bool:\n    \"\"\"Check if the square root of 'x' is greater than 'a' and less than 'b'\"\"\"\n    return math.sqrt(x) > a and math.sqrt(x) < b", "solution_func": "def g(a = 10.5, b = 2.3):\n    return (a + b) ** 2", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(li: List[int], a=5, b=10) -> bool:\n    \"\"\"Check if all elements in the list 'li' are between 'a' and 'b'\"\"\"\n    return all(a <= x <= b for x in li)\ndef g(a = 5, b = 10):\n    return [6, 7, 8, 9, 10]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 159, "target_skills": null, "problem_func": "from typing import*\ndef f(li: List[int], a=5, b=10) -> bool:\n    \"\"\"Check if all elements in the list 'li' are between 'a' and 'b'\"\"\"\n    return all(a <= x <= b for x in li)", "solution_func": "def g(a = 5, b = 10):\n    return [6, 7, 8, 9, 10]", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target=13) -> bool:\n    \"\"\"Find a pair of numbers in a list that sum up to a target value\"\"\"\n    return any((arr[i] + arr[j] == target for i in range(len(arr)) for j in range(i+1, len(arr))))\ndef g(arr = [1, 3, 5, 7, 9, 11, 13]):\n    return arr\nassert f(g())\n", "emb": null, "idx_generation": 159, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=13) -> bool:\n    \"\"\"Find a pair of numbers in a list that sum up to a target value\"\"\"\n    return any((arr[i] + arr[j] == target for i in range(len(arr)) for j in range(i+1, len(arr))))", "solution_func": "def g(arr = [1, 3, 5, 7, 9, 11, 13]):\n    return arr", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, s1='a', s2='b', count1=50, count2=30, substring='cde') -> bool:\n    \"\"\"\n    Find a string that has count1 occurrences of s1, count2 occurrences of s2, starts and ends with the same 10 characters,\n    and contains the substring at least once.\n    \"\"\"\n    return s.count(s1) == count1 and s.count(s2) == count2 and (s[:10] == s[-10:]) and (substring in s)\ndef g(s1 = 'a', s2 = 'b', count1 = 50, count2 = 30, substring = 'cde'):\n    if s1 == s2:\n        ans = (s1 + \"?\") * count1\n    elif s1.count(s2):\n        ans = (s1 + \"?\") * count1\n        ans += (s2 + \"?\") * (count2 - ans.count(s2))\n    else:\n        ans = (s2 + \"?\") * count2\n        ans += (s1 + \"?\") * (count1 - ans.count(s1))\n    return \"?\" * 10 + ans + \"?\" * 10 + substring + \"?\" * 10\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 160, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, s1='a', s2='b', count1=50, count2=30, substring='cde') -> bool:\n    \"\"\"\n    Find a string that has count1 occurrences of s1, count2 occurrences of s2, starts and ends with the same 10 characters,\n    and contains the substring at least once.\n    \"\"\"\n    return s.count(s1) == count1 and s.count(s2) == count2 and (s[:10] == s[-10:]) and (substring in s)", "solution_func": "def g(s1 = 'a', s2 = 'b', count1 = 50, count2 = 30, substring = 'cde'):\n    if s1 == s2:\n        ans = (s1 + \"?\") * count1\n    elif s1.count(s2):\n        ans = (s1 + \"?\") * count1\n        ans += (s2 + \"?\") * (count2 - ans.count(s2))\n    else:\n        ans = (s2 + \"?\") * count2\n        ans += (s1 + \"?\") * (count1 - ans.count(s1))\n    return \"?\" * 10 + ans + \"?\" * 10 + substring + \"?\" * 10", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, big_str='fukulagatextuj', index=10, substring='text') -> bool:\n    \"\"\"Find a string whose *first* index in big_str is index and contains the substring at least once\"\"\"\n    return big_str.index(s) == index and (substring in s)\ndef g(big_str = 'fukulagatextuj', index = 10, substring = 'text'):\n    return big_str[index:] + substring\nassert f(g())\n", "emb": null, "idx_generation": 160, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, big_str='fukulagatextuj', index=10, substring='text') -> bool:\n    \"\"\"Find a string whose *first* index in big_str is index and contains the substring at least once\"\"\"\n    return big_str.index(s) == index and (substring in s)", "solution_func": "def g(big_str = 'fukulagatextuj', index = 10, substring = 'text'):\n    return big_str[index:] + substring", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=8, n=8, knight_moves=[(1,2),(2,1),(-1,2),(-2,1),(1,-2),(2,-1),(-1,-2),(-2,-1)]) -> bool:\n    \"\"\"\n    Find an (open) tour of knight moves on an m x n chess-board that visits each square once,\n    and the knight moves are specified as tuples in knight_moves.\n    \"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} in knight_moves for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m = 8, n = 8, knight_moves=[(1,2),(2,1),(-1,2),(-2,1),(1,-2),(2,-1),(-1,-2),(-2,-1)]):\n    # using Warnsdorff's heuristic, breaking ties randomly\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n\n        def possible(i, j):\n            moves = [(i + a, j + b) for (a, b) in knight_moves]\n            return [z for z in moves if z in free]\n\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())", "emb": null, "idx_generation": 160, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=8, n=8, knight_moves=[(1,2),(2,1),(-1,2),(-2,1),(1,-2),(2,-1),(-1,-2),(-2,-1)]) -> bool:\n    \"\"\"\n    Find an (open) tour of knight moves on an m x n chess-board that visits each square once,\n    and the knight moves are specified as tuples in knight_moves.\n    \"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} in knight_moves for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]", "solution_func": "def g(m = 8, n = 8, knight_moves=[(1,2),(2,1),(-1,2),(-2,1),(1,-2),(2,-1),(-1,-2),(-2,-1)]):\n    # using Warnsdorff's heuristic, breaking ties randomly\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n\n        def possible(i, j):\n            moves = [(i + a, j + b) for (a, b) in knight_moves]\n            return [z for z in moves if z in free]\n\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], k=3, target=7) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a combination of k numbers that sum to the target.\n    \"\"\"\n    def backtrack(start, k, target, curr_sum):\n        if k == 0 and curr_sum == target:\n            return True\n        if k == 0 or curr_sum > target:\n            return False\n        for i in range(start, len(nums)):\n            if backtrack(i + 1, k - 1, target, curr_sum + nums[i]):\n                return True\n        return False\n    \n    return backtrack(0, k, target, 0)\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7]):\n    \"\"\"\n    This solution uses backtracking to find all combinations of k numbers from the list that sum to the target.\n    \"\"\"\n    return nums\n\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 160, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], k=3, target=7) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a combination of k numbers that sum to the target.\n    \"\"\"\n    def backtrack(start, k, target, curr_sum):\n        if k == 0 and curr_sum == target:\n            return True\n        if k == 0 or curr_sum > target:\n            return False\n        for i in range(start, len(nums)):\n            if backtrack(i + 1, k - 1, target, curr_sum + nums[i]):\n                return True\n        return False\n    \n    return backtrack(0, k, target, 0)", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7]):\n    \"\"\"\n    This solution uses backtracking to find all combinations of k numbers from the list that sum to the target.\n    \"\"\"\n    return nums", "map_ix": [0, 1, 0, 0, 0, 0, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target number, find if the target exists in the matrix.\n    \"\"\"\n    m, n = len(matrix), len(matrix[0])\n    if target < matrix[0][0] or target > matrix[m-1][n-1]:\n        return False\n    \n    def binary_search(row):\n        left, right = 0, n-1\n        while left <= right:\n            mid = (left + right) // 2\n            if matrix[row][mid] == target:\n                return True\n            elif matrix[row][mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False\n    \n    for i in range(m):\n        if binary_search(i):\n            return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    \"\"\"\n    This solution performs a binary search on each row of the matrix to find the target number.\n    \"\"\"\n    return matrix\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 160, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target number, find if the target exists in the matrix.\n    \"\"\"\n    m, n = len(matrix), len(matrix[0])\n    if target < matrix[0][0] or target > matrix[m-1][n-1]:\n        return False\n    \n    def binary_search(row):\n        left, right = 0, n-1\n        while left <= right:\n            mid = (left + right) // 2\n            if matrix[row][mid] == target:\n                return True\n            elif matrix[row][mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False\n    \n    for i in range(m):\n        if binary_search(i):\n            return True\n    return False", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    \"\"\"\n    This solution performs a binary search on each row of the matrix to find the target number.\n    \"\"\"\n    return matrix", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"\n    Given a string, determine if it can be divided into k equal parts.\n    \"\"\"\n    n = len(s)\n    if n % k != 0:\n        return False\n    part_len = n // k\n    \n    for i in range(0, n, part_len):\n        if s[i:i+part_len] != s[:part_len]:\n            return False\n    return True\n\ndef g(s=\"abcabcabc\"):\n    \"\"\"\n    This solution checks if the string can be divided into k equal parts by comparing each part with the first part.\n    \"\"\"\n    return s\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 160, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"\n    Given a string, determine if it can be divided into k equal parts.\n    \"\"\"\n    n = len(s)\n    if n % k != 0:\n        return False\n    part_len = n // k\n    \n    for i in range(0, n, part_len):\n        if s[i:i+part_len] != s[:part_len]:\n            return False\n    return True", "solution_func": "def g(s=\"abcabcabc\"):\n    \"\"\"\n    This solution checks if the string can be divided into k equal parts by comparing each part with the first part.\n    \"\"\"\n    return s", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, m=3, target=2) -> bool:\n    \"\"\"Check if the number of occurrences of target in the first m multiples of n is equal to m\"\"\"\n    count = 0\n    for i in range(1, m+1):\n        if str(target) in str(n * i):\n            count += 1\n    return count == m\ndef g(m = 3, target = 2):\n    n = 1\n    while True:\n        if f(n, m, target):\n            return n\n        n += 1\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 160, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m=3, target=2) -> bool:\n    \"\"\"Check if the number of occurrences of target in the first m multiples of n is equal to m\"\"\"\n    count = 0\n    for i in range(1, m+1):\n        if str(target) in str(n * i):\n            count += 1\n    return count == m", "solution_func": "def g(m = 3, target = 2):\n    n = 1\n    while True:\n        if f(n, m, target):\n            return n\n        n += 1", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, target='abc', n=2) -> bool:\n    \"\"\"Check if the number of distinct substrings of length n in string s containing target is greater than 0\"\"\"\n    count = 0\n    for i in range(len(s) - n + 1):\n        if target in s[i:i+n]:\n            count += 1\n    return count > 0\ndef g(target='abc', n=2):\n    s = 'abcdefghijklmnopqrstuvwxyz'\n    return s[:n] + target + s[n:]\nassert f(g())\n", "emb": null, "idx_generation": 160, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='abc', n=2) -> bool:\n    \"\"\"Check if the number of distinct substrings of length n in string s containing target is greater than 0\"\"\"\n    count = 0\n    for i in range(len(s) - n + 1):\n        if target in s[i:i+n]:\n            count += 1\n    return count > 0", "solution_func": "def g(target='abc', n=2):\n    s = 'abcdefghijklmnopqrstuvwxyz'\n    return s[:n] + target + s[n:]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, target='Python', n=2) -> bool:\n    \"\"\"Check if the number of occurrences of target in the substring of s starting at index n is greater than 1\"\"\"\n    return s[n:].count(target) > 1\ndef g(target='Python', n=2):\n    s = 'Python is a programming language that is widely used.'\n    return s + target\nassert f(g())\n", "emb": null, "idx_generation": 160, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='Python', n=2) -> bool:\n    \"\"\"Check if the number of occurrences of target in the substring of s starting at index n is greater than 1\"\"\"\n    return s[n:].count(target) > 1", "solution_func": "def g(target='Python', n=2):\n    s = 'Python is a programming language that is widely used.'\n    return s + target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, target: str, ignore_case=True) -> bool:\n    \"\"\"\n    Check if a string contains a target string\n\n    Args:\n    s: The input string\n    target: The target string to search for\n    ignore_case: Flag to ignore case sensitivity (default: True)\n\n    Returns:\n    True if the target string is found in the input string, False otherwise\n    \"\"\"\n    if ignore_case:\n        return target.lower() in s.lower()\n    else:\n        return target in s\n\ndef g(target='hello', ignore_case=True):\n    \"\"\"\n    Generate a string that contains the target string\n\n    Args:\n    target: The target string to include in the generated string\n    ignore_case: Flag to ignore case sensitivity (default: True)\n\n    Returns:\n    A string that contains the target string\n    \"\"\"\n    if ignore_case:\n        return target.lower() + \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"\n    else:\n        return target + \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"\n\nassert f(g())\n", "emb": null, "idx_generation": 160, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target: str, ignore_case=True) -> bool:\n    \"\"\"\n    Check if a string contains a target string\n\n    Args:\n    s: The input string\n    target: The target string to search for\n    ignore_case: Flag to ignore case sensitivity (default: True)\n\n    Returns:\n    True if the target string is found in the input string, False otherwise\n    \"\"\"\n    if ignore_case:\n        return target.lower() in s.lower()\n    else:\n        return target in s", "solution_func": "def g(target='hello', ignore_case=True):\n    \"\"\"\n    Generate a string that contains the target string\n\n    Args:\n    target: The target string to include in the generated string\n    ignore_case: Flag to ignore case sensitivity (default: True)\n\n    Returns:\n    A string that contains the target string\n    \"\"\"\n    if ignore_case:\n        return target.lower() + \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"\n    else:\n        return target + \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list that adds up to the target\"\"\"\n    return any([(target - num) in nums for num in nums])\ndef g(target = 0):\n    nums = [1, 2, 3, 4, 5]\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 161, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list that adds up to the target\"\"\"\n    return any([(target - num) in nums for num in nums])", "solution_func": "def g(target = 0):\n    nums = [1, 2, 3, 4, 5]\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(words: List[str]) -> bool:\n    \"\"\"Determine if all words in the list start with the same letter\"\"\"\n    return all([word[0] == words[0][0] for word in words])\ndef g():\n    words = ['apple', 'banana', 'cherry']\n    return words\nassert f(g())\n", "emb": null, "idx_generation": 161, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str]) -> bool:\n    \"\"\"Determine if all words in the list start with the same letter\"\"\"\n    return all([word[0] == words[0][0] for word in words])", "solution_func": "def g():\n    words = ['apple', 'banana', 'cherry']\n    return words", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list that multiplies to the target\"\"\"\n    return any([(target / num) in nums for num in nums])\ndef g(target = 0):\n    nums = [1, 2, 3, 4, 5]\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 161, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list that multiplies to the target\"\"\"\n    return any([(target / num) in nums for num in nums])", "solution_func": "def g(target = 0):\n    nums = [1, 2, 3, 4, 5]\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, k=3, target=15) -> bool:\n    \"\"\"Find a submatrix of size kxk whose sum is equal to the target value\"\"\"\n    for i in range(len(matrix)-k+1):\n        for j in range(len(matrix[0])-k+1):\n            if np.sum(matrix[i:i+k, j:j+k]) == target:\n                return True\n    return False\n\ndef g(k=3, target=15):\n    matrix = np.random.randint(1, 10, size=(10, 10))\n    return matrix\n\nassert f(g())\n", "emb": null, "idx_generation": 161, "target_skills": null, "problem_func": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, k=3, target=15) -> bool:\n    \"\"\"Find a submatrix of size kxk whose sum is equal to the target value\"\"\"\n    for i in range(len(matrix)-k+1):\n        for j in range(len(matrix[0])-k+1):\n            if np.sum(matrix[i:i+k, j:j+k]) == target:\n                return True\n    return False", "solution_func": "def g(k=3, target=15):\n    matrix = np.random.randint(1, 10, size=(10, 10))\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport itertools\n\ndef f(arr: List[int], k=3, target=15) -> bool:\n    \"\"\"Find a combination of k elements from arr whose sum is equal to the target value\"\"\"\n    combinations = itertools.combinations(arr, k)\n    for combination in combinations:\n        if sum(combination) == target:\n            return True\n    return False\n\ndef g(k=3, target=15):\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return arr\n\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 161, "target_skills": null, "problem_func": "from typing import*\nimport itertools\n\ndef f(arr: List[int], k=3, target=15) -> bool:\n    \"\"\"Find a combination of k elements from arr whose sum is equal to the target value\"\"\"\n    combinations = itertools.combinations(arr, k)\n    for combination in combinations:\n        if sum(combination) == target:\n            return True\n    return False", "solution_func": "def g(k=3, target=15):\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return arr", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport datetime\n\ndef f(start_date: datetime.date, end_date: datetime.date, days=7) -> bool:\n    \"\"\"Check if the number of days between start_date and end_date is divisible by days\"\"\"\n    delta = end_date - start_date\n    return delta.days % days == 0\n\ndef g(days=7):\n    start_date = datetime.date(2022, 1, 1)\n    end_date = datetime.date(2022, 1, 15)\n    return start_date, end_date\n\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 161, "target_skills": null, "problem_func": "from typing import*\nimport datetime\n\ndef f(start_date: datetime.date, end_date: datetime.date, days=7) -> bool:\n    \"\"\"Check if the number of days between start_date and end_date is divisible by days\"\"\"\n    delta = end_date - start_date\n    return delta.days % days == 0", "solution_func": "def g(days=7):\n    start_date = datetime.date(2022, 1, 1)\n    end_date = datetime.date(2022, 1, 15)\n    return start_date, end_date", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_sum=100) -> bool:\n    \"\"\"\n    Given a matrix of integers, find a path from the top-left cell to the bottom-right cell\n    such that the sum of the numbers along the path is equal to the target_sum.\n    \"\"\"\n    def dfs(matrix, i, j, current_sum, target_sum):\n        if i < 0 or i >= len(matrix) or j < 0 or j >= len(matrix[0]):\n            return False\n        current_sum += matrix[i][j]\n        if current_sum == target_sum and i == len(matrix) - 1 and j == len(matrix[0]) - 1:\n            return True\n        return dfs(matrix, i+1, j, current_sum, target_sum) or dfs(matrix, i, j+1, current_sum, target_sum)\n    \n    return dfs(matrix, 0, 0, 0, target_sum)\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target_sum=100):\n    return matrix\n\nassert f(g())\n", "emb": null, "idx_generation": 161, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_sum=100) -> bool:\n    \"\"\"\n    Given a matrix of integers, find a path from the top-left cell to the bottom-right cell\n    such that the sum of the numbers along the path is equal to the target_sum.\n    \"\"\"\n    def dfs(matrix, i, j, current_sum, target_sum):\n        if i < 0 or i >= len(matrix) or j < 0 or j >= len(matrix[0]):\n            return False\n        current_sum += matrix[i][j]\n        if current_sum == target_sum and i == len(matrix) - 1 and j == len(matrix[0]) - 1:\n            return True\n        return dfs(matrix, i+1, j, current_sum, target_sum) or dfs(matrix, i, j+1, current_sum, target_sum)\n    \n    return dfs(matrix, 0, 0, 0, target_sum)", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target_sum=100):\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, target_length=10) -> bool:\n    \"\"\"\n    Given a string, find the shortest substring that contains all characters in the string.\n    Return True if the length of the shortest substring is equal to the target_length, False otherwise.\n    \"\"\"\n    def is_valid(substring):\n        return len(set(substring)) == len(string)\n    \n    shortest_length = float('inf')\n    shortest_substring = \"\"\n    \n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            substring = string[i:j]\n            \n            if is_valid(substring) and len(substring) < shortest_length:\n                shortest_length = len(substring)\n                shortest_substring = substring\n    \n    return len(shortest_substring) == target_length\n\ndef g(string=\"abcdefghij\", target_length=10):\n    return string\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 161, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, target_length=10) -> bool:\n    \"\"\"\n    Given a string, find the shortest substring that contains all characters in the string.\n    Return True if the length of the shortest substring is equal to the target_length, False otherwise.\n    \"\"\"\n    def is_valid(substring):\n        return len(set(substring)) == len(string)\n    \n    shortest_length = float('inf')\n    shortest_substring = \"\"\n    \n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            substring = string[i:j]\n            \n            if is_valid(substring) and len(substring) < shortest_length:\n                shortest_length = len(substring)\n                shortest_substring = substring\n    \n    return len(shortest_substring) == target_length", "solution_func": "def g(string=\"abcdefghij\", target_length=10):\n    return string", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport itertools\n\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"\n    Given a list of integers, find a subset of numbers that add up to the target_sum.\n    Return True if such a subset exists, False otherwise.\n    \"\"\"\n    for i in range(len(nums)):\n        for combination in itertools.combinations(nums, i+1):\n            if sum(combination) == target_sum:\n                return True\n    \n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target_sum=10):\n    return nums\n\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 161, "target_skills": null, "problem_func": "from typing import*\nimport itertools\n\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"\n    Given a list of integers, find a subset of numbers that add up to the target_sum.\n    Return True if such a subset exists, False otherwise.\n    \"\"\"\n    for i in range(len(nums)):\n        for combination in itertools.combinations(nums, i+1):\n            if sum(combination) == target_sum:\n                return True\n    \n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target_sum=10):\n    return nums", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, r: float = 1.5) -> bool:\n    \"\"\"\n    Check if a point (x, y, z) is inside a sphere with radius r\n    \"\"\"\n    distance = math.sqrt(x**2 + y**2 + z**2)\n    return distance < r\n\ndef g(x: float, y: float, z: float, r: float = 1.5):\n    return x, y, z\n\nassert f(*g())\n", "emb": null, "idx_generation": 161, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, r: float = 1.5) -> bool:\n    \"\"\"\n    Check if a point (x, y, z) is inside a sphere with radius r\n    \"\"\"\n    distance = math.sqrt(x**2 + y**2 + z**2)\n    return distance < r", "solution_func": "def g(x: float, y: float, z: float, r: float = 1.5):\n    return x, y, z", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target='banana', reverse=False) -> bool:\n    \"\"\"Either reverse a string or don't based on the reverse flag\"\"\"\n    return (s[::-1] == target) == reverse\ndef g(target = 'banana', reverse = False):\n    return target[::-1] if reverse else target + \"x\"\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 162, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='banana', reverse=False) -> bool:\n    \"\"\"Either reverse a string or don't based on the reverse flag\"\"\"\n    return (s[::-1] == target) == reverse", "solution_func": "def g(target = 'banana', reverse = False):\n    return target[::-1] if reverse else target + \"x\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(big_str: str, sub_str='hello', index=3) -> bool:\n    \"\"\"Find a string whose *first* index of sub_str is index\"\"\"\n    return big_str.index(sub_str) == index\ndef g(sub_str = 'hello', index = 3):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i) * index + sub_str\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 162, "target_skills": null, "problem_func": "from typing import*\ndef f(big_str: str, sub_str='hello', index=3) -> bool:\n    \"\"\"Find a string whose *first* index of sub_str is index\"\"\"\n    return big_str.index(sub_str) == index", "solution_func": "def g(sub_str = 'hello', index = 3):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i) * index + sub_str", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target='world', reverse=True) -> bool:\n    \"\"\"Either reverse a string or don't based on the reverse flag\"\"\"\n    return (s[::-1] == target) == reverse\ndef g(target = 'world', reverse = True):\n    return target[::-1] if reverse else target + \"x\"\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 162, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='world', reverse=True) -> bool:\n    \"\"\"Either reverse a string or don't based on the reverse flag\"\"\"\n    return (s[::-1] == target) == reverse", "solution_func": "def g(target = 'world', reverse = True):\n    return target[::-1] if reverse else target + \"x\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=42) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target number\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n", "emb": null, "idx_generation": 162, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=42) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target number\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substr='hello') -> bool:\n    \"\"\"Check if the given substring exists in the given string\"\"\"\n    return substr in s\ndef g(substr='hello'):\n    return \"This is a sample string that contains the word hello\"\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 162, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substr='hello') -> bool:\n    \"\"\"Check if the given substring exists in the given string\"\"\"\n    return substr in s", "solution_func": "def g(substr='hello'):\n    return \"This is a sample string that contains the word hello\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there are three numbers in the list that sum up to the target number\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums))))\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n", "emb": null, "idx_generation": 162, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there are three numbers in the list that sum up to the target number\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums))))", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(s: str, a=4, b=5) -> bool:\n    \"\"\"\n    Check if the string s contains a palindrome of length a+b.\n    A palindrome is a word, phrase, number, or other sequence of characters\n    that reads the same forward and backward.\n    \"\"\"\n    for i in range(len(s) - a - b + 1):\n        substring = s[i:i + a + b]\n        if substring == substring[::-1]:\n            return True\n    return False\n\ndef g(a = 4, b = 5):\n    return \"abcdbabcefgh\"\n\nassert f(g())\n", "emb": null, "idx_generation": 162, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(s: str, a=4, b=5) -> bool:\n    \"\"\"\n    Check if the string s contains a palindrome of length a+b.\n    A palindrome is a word, phrase, number, or other sequence of characters\n    that reads the same forward and backward.\n    \"\"\"\n    for i in range(len(s) - a - b + 1):\n        substring = s[i:i + a + b]\n        if substring == substring[::-1]:\n            return True\n    return False", "solution_func": "def g(a = 4, b = 5):\n    return \"abcdbabcefgh\"", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], a=5, b=8, c=13) -> bool:\n    \"\"\"\n    Check if there are three numbers in the array that have a sum of c.\n    \"\"\"\n    for i in range(len(arr) - 2):\n        for j in range(i + 1, len(arr) - 1):\n            for k in range(j + 1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == c:\n                    return True\n    return False\n\ndef g(a = 5, b = 8, c = 13):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 162, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], a=5, b=8, c=13) -> bool:\n    \"\"\"\n    Check if there are three numbers in the array that have a sum of c.\n    \"\"\"\n    for i in range(len(arr) - 2):\n        for j in range(i + 1, len(arr) - 1):\n            for k in range(j + 1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == c:\n                    return True\n    return False", "solution_func": "def g(a = 5, b = 8, c = 13):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\n\ndef f(n: int, a=1, b=6) -> bool:\n    \"\"\"\n    Generate n random numbers between a and b (inclusive)\n    and check if the minimum number is less than or equal to 3.\n    \"\"\"\n    numbers = [random.randint(a, b) for _ in range(n)]\n    return min(numbers) <= 3\n\ndef g(a = 1, b = 6):\n    return 5\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 162, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(n: int, a=1, b=6) -> bool:\n    \"\"\"\n    Generate n random numbers between a and b (inclusive)\n    and check if the minimum number is less than or equal to 3.\n    \"\"\"\n    numbers = [random.randint(a, b) for _ in range(n)]\n    return min(numbers) <= 3", "solution_func": "def g(a = 1, b = 6):\n    return 5", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, k=10) -> bool:\n    \"\"\"Return True if the given string contains at least k distinct characters.\"\"\"\n    return len(set(s)) >= k\ndef g(k = 10):\n    return \"abcdefghijklmnopqrstuvwxyz\"[:k]\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 162, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, k=10) -> bool:\n    \"\"\"Return True if the given string contains at least k distinct characters.\"\"\"\n    return len(set(s)) >= k", "solution_func": "def g(k = 10):\n    return \"abcdefghijklmnopqrstuvwxyz\"[:k]", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(word: str, sentence='The quick brown fox jumps over the lazy dog.') -> bool:\n    \"\"\"Check if a word is present in a given sentence.\"\"\"\n    return word in sentence\ndef g(sentence='The quick brown fox jumps over the lazy dog.'):\n    words = sentence.split()\n    return words[0]\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 163, "target_skills": null, "problem_func": "from typing import*\ndef f(word: str, sentence='The quick brown fox jumps over the lazy dog.') -> bool:\n    \"\"\"Check if a word is present in a given sentence.\"\"\"\n    return word in sentence", "solution_func": "def g(sentence='The quick brown fox jumps over the lazy dog.'):\n    words = sentence.split()\n    return words[0]", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(text: str, pattern='abcabcabc') -> bool:\n    \"\"\"Check if a pattern exists in a given text.\"\"\"\n    return text.find(pattern) != -1\ndef g(pattern='abcabcabc'):\n    return pattern * 3\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 163, "target_skills": null, "problem_func": "from typing import*\ndef f(text: str, pattern='abcabcabc') -> bool:\n    \"\"\"Check if a pattern exists in a given text.\"\"\"\n    return text.find(pattern) != -1", "solution_func": "def g(pattern='abcabcabc'):\n    return pattern * 3", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"Check if it is possible to obtain the target number 24 using the given numbers.\"\"\"\n    def backtrack(nums: List[int], target: int) -> bool:\n        if len(nums) == 1:\n            return nums[0] == target\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                a, b = nums[i], nums[j]\n                remaining_nums = [nums[k] for k in range(len(nums)) if k != i and k != j]\n                if backtrack(remaining_nums + [a + b], target) or \\\n                    backtrack(remaining_nums + [a - b], target) or \\\n                    backtrack(remaining_nums + [a * b], target) or \\\n                    (b != 0 and a % b == 0 and backtrack(remaining_nums + [a // b], target)):\n                    return True\n        return False\n    return backtrack(nums, target)\ndef g(nums=[1, 5, 5, 5]):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 163, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"Check if it is possible to obtain the target number 24 using the given numbers.\"\"\"\n    def backtrack(nums: List[int], target: int) -> bool:\n        if len(nums) == 1:\n            return nums[0] == target\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                a, b = nums[i], nums[j]\n                remaining_nums = [nums[k] for k in range(len(nums)) if k != i and k != j]\n                if backtrack(remaining_nums + [a + b], target) or \\\n                    backtrack(remaining_nums + [a - b], target) or \\\n                    backtrack(remaining_nums + [a * b], target) or \\\n                    (b != 0 and a % b == 0 and backtrack(remaining_nums + [a // b], target)):\n                    return True\n        return False\n    return backtrack(nums, target)", "solution_func": "def g(nums=[1, 5, 5, 5]):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int = 100, count: int = 3) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, find a combination of count or more numbers from the list that\n    add up to the target value.\n\n    Sample Input:\n    nums = [10, 20, 30, 40, 50]\n    target = 100\n    count = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    from itertools import combinations\n    for i in range(count, len(nums) + 1):\n        for combo in combinations(nums, i):\n            if sum(combo) == target:\n                return True\n    return False\n\ndef g(nums: List[int] = [10, 20, 30, 40, 50], target: int = 100, count: int = 3) -> List[int]:\n    return nums\n\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 163, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int = 100, count: int = 3) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, find a combination of count or more numbers from the list that\n    add up to the target value.\n\n    Sample Input:\n    nums = [10, 20, 30, 40, 50]\n    target = 100\n    count = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    from itertools import combinations\n    for i in range(count, len(nums) + 1):\n        for combo in combinations(nums, i):\n            if sum(combo) == target:\n                return True\n    return False", "solution_func": "def g(nums: List[int] = [10, 20, 30, 40, 50], target: int = 100, count: int = 3) -> List[int]:\n    return nums", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, target: int = 100, count: int = 4) -> bool:\n    \"\"\"\n    Given an integer n, check if it can be expressed as a sum of count or more consecutive positive integers.\n\n    Sample Input:\n    n = 100\n    target = 100\n    count = 4\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(1, n):\n        s = 0\n        for j in range(i, n):\n            s += j\n            if s == target and j - i + 1 >= count:\n                return True\n            elif s > target:\n                break\n    return False\n\ndef g(n: int = 100, target: int = 100, count: int = 4) -> int:\n    return n\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0], "idx_generation": 163, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, target: int = 100, count: int = 4) -> bool:\n    \"\"\"\n    Given an integer n, check if it can be expressed as a sum of count or more consecutive positive integers.\n\n    Sample Input:\n    n = 100\n    target = 100\n    count = 4\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(1, n):\n        s = 0\n        for j in range(i, n):\n            s += j\n            if s == target and j - i + 1 >= count:\n                return True\n            elif s > target:\n                break\n    return False", "solution_func": "def g(n: int = 100, target: int = 100, count: int = 4) -> int:\n    return n", "map_ix": [0, 0, 0, 1, 0, 0, 0, 1, 0, 1]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, target: int = 10) -> bool:\n    \"\"\"\n    Given a string and a target value, check if the sum of the ASCII values of the characters in the string is\n    equal to the target value.\n\n    Sample Input:\n    s = \"hello\"\n    target = 532\n\n    Sample Output:\n    True\n    \"\"\"\n    ascii_sum = sum(ord(c) for c in s)\n    return ascii_sum == target\n\ndef g(s: str = \"hello\", target: int = 10) -> str:\n    return s\n\nassert f(g())\n", "emb": null, "idx_generation": 163, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target: int = 10) -> bool:\n    \"\"\"\n    Given a string and a target value, check if the sum of the ASCII values of the characters in the string is\n    equal to the target value.\n\n    Sample Input:\n    s = \"hello\"\n    target = 532\n\n    Sample Output:\n    True\n    \"\"\"\n    ascii_sum = sum(ord(c) for c in s)\n    return ascii_sum == target", "solution_func": "def g(s: str = \"hello\", target: int = 10) -> str:\n    return s", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target_sum=10) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a pair of numbers in the list such that their sum is equal to the\n    target_sum.\n\n    Sample Input:\n    `[1, 2, 3, 4, 5]`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    seen = set()\n    for num in arr:\n        complement = target_sum - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(arr = [1, 2, 3, 4, 5], target_sum = 10):\n    return f(arr, target_sum)\nassert f(g())\n", "emb": null, "idx_generation": 163, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target_sum=10) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a pair of numbers in the list such that their sum is equal to the\n    target_sum.\n\n    Sample Input:\n    `[1, 2, 3, 4, 5]`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    seen = set()\n    for num in arr:\n        complement = target_sum - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(arr = [1, 2, 3, 4, 5], target_sum = 10):\n    return f(arr, target_sum)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, factors=[2, 3, 5]) -> bool:\n    \"\"\"\n    Given a positive integer n, determine if it can be expressed as a product of any combination of the given prime\n    factors.\n\n    Sample Input:\n    `60`\n\n    Sample Output:\n    `True` (60 = 2 * 2 * 3 * 5)\n\n    \"\"\"\n    for factor in factors:\n        while n % factor == 0:\n            n //= factor\n    return n == 1\n\ndef g(n = 60, factors = [2, 3, 5]):\n    return f(n, factors)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 163, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, factors=[2, 3, 5]) -> bool:\n    \"\"\"\n    Given a positive integer n, determine if it can be expressed as a product of any combination of the given prime\n    factors.\n\n    Sample Input:\n    `60`\n\n    Sample Output:\n    `True` (60 = 2 * 2 * 3 * 5)\n\n    \"\"\"\n    for factor in factors:\n        while n % factor == 0:\n            n //= factor\n    return n == 1", "solution_func": "def g(n = 60, factors = [2, 3, 5]):\n    return f(n, factors)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target = 5) -> bool:\n    \"\"\"\n    Given a matrix (2D list) of integers and a target number, check if the target number exists in the matrix.\n\n    Sample Input:\n    `[[1, 2, 3], [4, 5, 6], [7, 8, 9]]`\n\n    Sample Output:\n    `True` (5 is present in the matrix)\n    \"\"\"\n    if not matrix or not matrix[0]:\n        return False\n    rows, cols = len(matrix), len(matrix[0])\n    left, right = 0, rows * cols - 1\n    while left <= right:\n        mid = (left + right) // 2\n        num = matrix[mid // cols][mid % cols]\n        if num == target:\n            return True\n        elif num < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False\n\ndef g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target = 5):\n    return f(matrix, target)\nassert f(g())\n", "emb": null, "idx_generation": 163, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target = 5) -> bool:\n    \"\"\"\n    Given a matrix (2D list) of integers and a target number, check if the target number exists in the matrix.\n\n    Sample Input:\n    `[[1, 2, 3], [4, 5, 6], [7, 8, 9]]`\n\n    Sample Output:\n    `True` (5 is present in the matrix)\n    \"\"\"\n    if not matrix or not matrix[0]:\n        return False\n    rows, cols = len(matrix), len(matrix[0])\n    left, right = 0, rows * cols - 1\n    while left <= right:\n        mid = (left + right) // 2\n        num = matrix[mid // cols][mid % cols]\n        if num == target:\n            return True\n        elif num < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False", "solution_func": "def g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target = 5):\n    return f(matrix, target)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=0, length=0) -> bool:\n    \"\"\"Find a list of numbers with a given target sum and a given length\"\"\"\n    return sum(numbers) == target and len(numbers) == length\n\ndef g(target = 0, length = 0):\n    return [target // length] * length\n\nassert f(g())\n", "emb": null, "idx_generation": 163, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=0, length=0) -> bool:\n    \"\"\"Find a list of numbers with a given target sum and a given length\"\"\"\n    return sum(numbers) == target and len(numbers) == length", "solution_func": "def g(target = 0, length = 0):\n    return [target // length] * length", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"\n    Check if a string is a palindrome and if it repeats n times consecutively.\n    \"\"\"\n    return s == s[::-1] and s * n in s * n\ndef g(n=5):\n    s = \"racecar\"\n    return s * n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 164, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"\n    Check if a string is a palindrome and if it repeats n times consecutively.\n    \"\"\"\n    return s == s[::-1] and s * n in s * n", "solution_func": "def g(n=5):\n    s = \"racecar\"\n    return s * n", "map_ix": [1, 0, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport re\n\ndef f(s: str, pattern=r\"\\d{3}-\\d{3}-\\d{4}\") -> bool:\n    \"\"\"\n    Check if a string matches a specific pattern.\n    \"\"\"\n    return re.match(pattern, s) is not None\ndef g(pattern=r\"\\d{3}-\\d{3}-\\d{4}\"):\n    s = \"123-456-7890\"\n    return s\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 164, "target_skills": null, "problem_func": "from typing import*\nimport re\n\ndef f(s: str, pattern=r\"\\d{3}-\\d{3}-\\d{4}\") -> bool:\n    \"\"\"\n    Check if a string matches a specific pattern.\n    \"\"\"\n    return re.match(pattern, s) is not None", "solution_func": "def g(pattern=r\"\\d{3}-\\d{3}-\\d{4}\"):\n    s = \"123-456-7890\"\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport datetime\n\ndef f(d: datetime.datetime, days=7) -> bool:\n    \"\"\"\n    Check if a given date is within a certain number of days from today.\n    \"\"\"\n    today = datetime.datetime.now().date()\n    diff = (d.date() - today).days\n    return diff <= days and diff >= 0\ndef g(days=7):\n    d = datetime.datetime.now().date() + datetime.timedelta(days=3)\n    return d\nassert f(g())\n", "emb": null, "idx_generation": 164, "target_skills": null, "problem_func": "from typing import*\nimport datetime\n\ndef f(d: datetime.datetime, days=7) -> bool:\n    \"\"\"\n    Check if a given date is within a certain number of days from today.\n    \"\"\"\n    today = datetime.datetime.now().date()\n    diff = (d.date() - today).days\n    return diff <= days and diff >= 0", "solution_func": "def g(days=7):\n    d = datetime.datetime.now().date() + datetime.timedelta(days=3)\n    return d", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Find if there exists two distinct indices i and j in the list such that nums[i] - nums[j] = k.\"\"\"\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            if i != j and nums[i] - nums[j] == k:\n                return True\n    return False\ndef g(k=3):\n    return [0, k]\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 164, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Find if there exists two distinct indices i and j in the list such that nums[i] - nums[j] = k.\"\"\"\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            if i != j and nums[i] - nums[j] == k:\n                return True\n    return False", "solution_func": "def g(k=3):\n    return [0, k]", "map_ix": [1, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(grid: List[List[int]], target_sum=10) -> bool:\n    \"\"\"Find if there exists a subgrid in the given grid such that the sum of all its elements is equal to target_sum.\"\"\"\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            for x in range(i, len(grid)):\n                for y in range(j, len(grid[0])):\n                    subgrid_sum = sum(sum(row[j:y+1]) for row in grid[i:x+1])\n                    if subgrid_sum == target_sum:\n                        return True\n    return False\ndef g(target_sum=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, target_sum - 6 - 5]]\nassert f(g())\n", "emb": null, "idx_generation": 164, "target_skills": null, "problem_func": "from typing import*\ndef f(grid: List[List[int]], target_sum=10) -> bool:\n    \"\"\"Find if there exists a subgrid in the given grid such that the sum of all its elements is equal to target_sum.\"\"\"\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            for x in range(i, len(grid)):\n                for y in range(j, len(grid[0])):\n                    subgrid_sum = sum(sum(row[j:y+1]) for row in grid[i:x+1])\n                    if subgrid_sum == target_sum:\n                        return True\n    return False", "solution_func": "def g(target_sum=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, target_sum - 6 - 5]]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Find if there exists a subset of the given list such that the sum of its elements is equal to target.\"\"\"\n    def dfs(index, curr_sum):\n        if curr_sum == target:\n            return True\n        if index == len(nums):\n            return False\n        if dfs(index + 1, curr_sum + nums[index]):\n            return True\n        if dfs(index + 1, curr_sum):\n            return True\n        return False\n    return dfs(0, 0)\ndef g(target=5):\n    return [1, 2, 3, target - 1]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 164, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Find if there exists a subset of the given list such that the sum of its elements is equal to target.\"\"\"\n    def dfs(index, curr_sum):\n        if curr_sum == target:\n            return True\n        if index == len(nums):\n            return False\n        if dfs(index + 1, curr_sum + nums[index]):\n            return True\n        if dfs(index + 1, curr_sum):\n            return True\n        return False\n    return dfs(0, 0)", "solution_func": "def g(target=5):\n    return [1, 2, 3, target - 1]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are three numbers in the list that add up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 164, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are three numbers in the list that add up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False", "solution_func": "def g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, target='banana') -> bool:\n    \"\"\"Check if the given string is a palindrome and contains the target string.\"\"\"\n    return s == s[::-1] and target in s\ndef g(s = 'anana', target = 'ana'):\n    return s\nassert f(g())\n", "emb": null, "idx_generation": 164, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='banana') -> bool:\n    \"\"\"Check if the given string is a palindrome and contains the target string.\"\"\"\n    return s == s[::-1] and target in s", "solution_func": "def g(s = 'anana', target = 'ana'):\n    return s", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target number is present in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target = 5):\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 164, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target number is present in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target = 5):\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int, k=3) -> bool:\n    \"\"\"\n    Find if there exists a combination of k numbers in the list nums that add up to the target.\n    \"\"\"\n    def backtrack(start, target, k):\n        if k == 0 and target == 0:\n            return True\n        if k == 0 or target < 0:\n            return False\n        for i in range(start, len(nums)):\n            if i > start and nums[i] == nums[i-1]:\n                continue\n            if backtrack(i+1, target-nums[i], k-1):\n                return True\n        return False\n    \n    nums.sort()\n    return backtrack(0, target, k)\n    \ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8], target=15, k=3):\n    return nums, target, k\n\nassert f(*g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 164, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int, k=3) -> bool:\n    \"\"\"\n    Find if there exists a combination of k numbers in the list nums that add up to the target.\n    \"\"\"\n    def backtrack(start, target, k):\n        if k == 0 and target == 0:\n            return True\n        if k == 0 or target < 0:\n            return False\n        for i in range(start, len(nums)):\n            if i > start and nums[i] == nums[i-1]:\n                continue\n            if backtrack(i+1, target-nums[i], k-1):\n                return True\n        return False\n    \n    nums.sort()\n    return backtrack(0, target, k)", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8], target=15, k=3):\n    return nums, target, k", "map_ix": [0, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(num_list: List[int], target=100):\n    \"\"\"Find a pair of numbers whose sum is equal to the target.\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] + num_list[j] == target:\n                return True\n    return False\n\ndef g(target=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n", "emb": null, "idx_generation": 165, "target_skills": null, "problem_func": "from typing import*\ndef f(num_list: List[int], target=100):\n    \"\"\"Find a pair of numbers whose sum is equal to the target.\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] + num_list[j] == target:\n                return True\n    return False", "solution_func": "def g(target=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20):\n    \"\"\"Find a row in the matrix whose sum is equal to the target.\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    return False\n\ndef g(target=20):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]\n\nassert f(g())\n", "emb": null, "idx_generation": 165, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=20):\n    \"\"\"Find a row in the matrix whose sum is equal to the target.\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    return False", "solution_func": "def g(target=20):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(names: List[str], letter='a'):\n    \"\"\"Find names that start with a specific letter.\"\"\"\n    return any((name[0].lower() == letter.lower() for name in names))\n\ndef g(letter='a'):\n    return ['Alice', 'Bob', 'Charlie', 'Dave', 'Eve']\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 165, "target_skills": null, "problem_func": "from typing import*\ndef f(names: List[str], letter='a'):\n    \"\"\"Find names that start with a specific letter.\"\"\"\n    return any((name[0].lower() == letter.lower() for name in names))", "solution_func": "def g(letter='a'):\n    return ['Alice', 'Bob', 'Charlie', 'Dave', 'Eve']", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(seq: List[int], target: int, sum_limit: int) -> bool:\n    \"\"\"Check if there is a subsequence in seq that adds up to the target, with the sum not exceeding sum_limit\"\"\"\n    dp = [False] * (sum_limit + 1)\n    dp[0] = True\n    for num in seq:\n        for i in range(sum_limit, num - 1, -1):\n            dp[i] |= dp[i - num]\n    return dp[target]\ndef g(target: int = 10, sum_limit: int = 20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n", "emb": null, "idx_generation": 165, "target_skills": null, "problem_func": "from typing import*\ndef f(seq: List[int], target: int, sum_limit: int) -> bool:\n    \"\"\"Check if there is a subsequence in seq that adds up to the target, with the sum not exceeding sum_limit\"\"\"\n    dp = [False] * (sum_limit + 1)\n    dp[0] = True\n    for num in seq:\n        for i in range(sum_limit, num - 1, -1):\n            dp[i] |= dp[i - num]\n    return dp[target]", "solution_func": "def g(target: int = 10, sum_limit: int = 20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, matrix: List[List[int]]) -> bool:\n    \"\"\"Check if there exists a path from the top-left corner to the bottom-right corner in the matrix\"\"\"\n    m, n = len(matrix), len(matrix[0])\n    dp = [[False] * n for _ in range(m)]\n    dp[0][0] = True\n    for i in range(1, m):\n        dp[i][0] = dp[i-1][0] and matrix[i][0] != 1\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] and matrix[0][j] != 1\n    for i in range(1, m):\n        for j in range(1, n):\n            if matrix[i][j] != 1:\n                dp[i][j] = dp[i-1][j] or dp[i][j-1]\n    return dp[m-1][n-1]\ndef g(matrix: List[List[int]] = [[0, 0, 1], [0, 1, 0], [0, 0, 0]]):\n    return len(matrix), len(matrix[0])\nassert f(g())\n", "emb": null, "idx_generation": 165, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, matrix: List[List[int]]) -> bool:\n    \"\"\"Check if there exists a path from the top-left corner to the bottom-right corner in the matrix\"\"\"\n    m, n = len(matrix), len(matrix[0])\n    dp = [[False] * n for _ in range(m)]\n    dp[0][0] = True\n    for i in range(1, m):\n        dp[i][0] = dp[i-1][0] and matrix[i][0] != 1\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] and matrix[0][j] != 1\n    for i in range(1, m):\n        for j in range(1, n):\n            if matrix[i][j] != 1:\n                dp[i][j] = dp[i-1][j] or dp[i][j-1]\n    return dp[m-1][n-1]", "solution_func": "def g(matrix: List[List[int]] = [[0, 0, 1], [0, 1, 0], [0, 0, 0]]):\n    return len(matrix), len(matrix[0])", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subset of arr that adds up to the target\"\"\"\n    n = len(arr)\n    dp = [[False] * (target + 1) for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = True\n    for i in range(1, n+1):\n        for j in range(1, target+1):\n            if j < arr[i-1]:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-arr[i-1]]\n    return dp[n][target]\ndef g(target: int = 10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())", "emb": null, "idx_generation": 165, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subset of arr that adds up to the target\"\"\"\n    n = len(arr)\n    dp = [[False] * (target + 1) for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = True\n    for i in range(1, n+1):\n        for j in range(1, target+1):\n            if j < arr[i-1]:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-arr[i-1]]\n    return dp[n][target]", "solution_func": "def g(target: int = 10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date: str, format=\"%Y-%m-%d\") -> bool:\n    \"\"\"Check if the given date is in the correct format.\"\"\"\n    try:\n        datetime.strptime(date, format)\n        return True\n    except ValueError:\n        return False\n\ndef g(format=\"%Y-%m-%d\"):\n    return datetime.now().strftime(format)\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 165, "target_skills": null, "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(date: str, format=\"%Y-%m-%d\") -> bool:\n    \"\"\"Check if the given date is in the correct format.\"\"\"\n    try:\n        datetime.strptime(date, format)\n        return True\n    except ValueError:\n        return False", "solution_func": "def g(format=\"%Y-%m-%d\"):\n    return datetime.now().strftime(format)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) -> bool:\n    \"\"\"Check if the given number is a prime number.\"\"\"\n    return n in primes\n\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]):\n    return primes[-1]\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 165, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) -> bool:\n    \"\"\"Check if the given number is a prime number.\"\"\"\n    return n in primes", "solution_func": "def g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]):\n    return primes[-1]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, vowels=\"aeiou\") -> bool:\n    \"\"\"Check if the given string contains all vowels.\"\"\"\n    return all(v in s for v in vowels)\n\ndef g(vowels=\"aeiou\"):\n    return \"\".join(vowels)\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 165, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, vowels=\"aeiou\") -> bool:\n    \"\"\"Check if the given string contains all vowels.\"\"\"\n    return all(v in s for v in vowels)", "solution_func": "def g(vowels=\"aeiou\"):\n    return \"\".join(vowels)", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int, k: int = 3) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a combination of k elements that add up to the target.\n    Return True if such a combination exists, False otherwise.\n    \"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, k):\n        if sum(combo) == target:\n            return True\n    return False\n\ndef g(nums: List[int], target: int, k: int = 3):\n    return nums, target, k\n\nassert f(g())\n", "emb": null, "idx_generation": 165, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int, k: int = 3) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a combination of k elements that add up to the target.\n    Return True if such a combination exists, False otherwise.\n    \"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, k):\n        if sum(combo) == target:\n            return True\n    return False", "solution_func": "def g(nums: List[int], target: int, k: int = 3):\n    return nums, target, k", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=2, b=5, c=1) -> bool:\n    \"\"\"\n    Check if a number is a perfect square.\n    a, b, c are coefficients of a quadratic equation of the form ax^2 + bx + c = 0.\n    \"\"\"\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return False\n    x1 = (-b + math.sqrt(discriminant)) / (2*a)\n    x2 = (-b - math.sqrt(discriminant)) / (2*a)\n    return n == int(x1)**2 or n == int(x2)**2\n\ndef g(a=2, b=5, c=1):\n    return a, b, c\n\nassert f(g())\n", "emb": null, "idx_generation": 166, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, a=2, b=5, c=1) -> bool:\n    \"\"\"\n    Check if a number is a perfect square.\n    a, b, c are coefficients of a quadratic equation of the form ax^2 + bx + c = 0.\n    \"\"\"\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return False\n    x1 = (-b + math.sqrt(discriminant)) / (2*a)\n    x2 = (-b - math.sqrt(discriminant)) / (2*a)\n    return n == int(x1)**2 or n == int(x2)**2", "solution_func": "def g(a=2, b=5, c=1):\n    return a, b, c", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int, a=3, b=7) -> bool:\n    \"\"\"\n    Find two numbers in a list that sum up to a target.\n    a, b are coefficients of a linear equation of the form ax + b = 0.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return abs(a*nums[i] + b - nums[j]) < 1e-6\n    return False\n\ndef g(a=3, b=7):\n    return [1, 2, 3, 4, 5], 7\n\nassert f(g())\n", "emb": null, "idx_generation": 166, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int, a=3, b=7) -> bool:\n    \"\"\"\n    Find two numbers in a list that sum up to a target.\n    a, b are coefficients of a linear equation of the form ax + b = 0.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return abs(a*nums[i] + b - nums[j]) < 1e-6\n    return False", "solution_func": "def g(a=3, b=7):\n    return [1, 2, 3, 4, 5], 7", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], a=-1, b=1) -> bool:\n    \"\"\"\n    Check if a matrix is a symmetric matrix.\n    a, b are coefficients of a linear equation of the form ax + b = 0.\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i, n):\n            if matrix[i][j] != matrix[j][i]:\n                return abs(a*matrix[i][j] + b - matrix[j][i]) < 1e-6\n    return True\n\ndef g(a=-1, b=1):\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 166, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], a=-1, b=1) -> bool:\n    \"\"\"\n    Check if a matrix is a symmetric matrix.\n    a, b are coefficients of a linear equation of the form ax + b = 0.\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i, n):\n            if matrix[i][j] != matrix[j][i]:\n                return abs(a*matrix[i][j] + b - matrix[j][i]) < 1e-6\n    return True", "solution_func": "def g(a=-1, b=1):\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=12) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=12):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 166, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=12) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target=12):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=21) -> bool:\n    \"\"\"Find the sum of all elements in the matrix that is equal to the target\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == target:\n                return True\n    return False\ndef g(target=21):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n", "emb": null, "idx_generation": 166, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=21) -> bool:\n    \"\"\"Find the sum of all elements in the matrix that is equal to the target\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == target:\n                return True\n    return False", "solution_func": "def g(target=21):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(words: List[str], prefix=\"ab\") -> bool:\n    \"\"\"Check if any word in the list starts with the given prefix\"\"\"\n    for word in words:\n        if word.startswith(prefix):\n            return True\n    return False\ndef g(prefix=\"ab\"):\n    return [\"apple\", \"banana\", \"orange\"]\nassert f(g())\n", "emb": null, "idx_generation": 166, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], prefix=\"ab\") -> bool:\n    \"\"\"Check if any word in the list starts with the given prefix\"\"\"\n    for word in words:\n        if word.startswith(prefix):\n            return True\n    return False", "solution_func": "def g(prefix=\"ab\"):\n    return [\"apple\", \"banana\", \"orange\"]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, m: int, target=50) -> bool:\n    \"\"\"Check if the sum of two numbers is equal to the target.\"\"\"\n    return n + m == target\ndef g(target=50):\n    return (target // 2, target // 2)\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 166, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m: int, target=50) -> bool:\n    \"\"\"Check if the sum of two numbers is equal to the target.\"\"\"\n    return n + m == target", "solution_func": "def g(target=50):\n    return (target // 2, target // 2)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n: int, char='a') -> bool:\n    \"\"\"Check if the character at the nth position of the string is equal to the given character.\"\"\"\n    return s[n] == char\ndef g(s='hello world', char='a'):\n    return s, s.index(char)\nassert f(*g())\n", "emb": null, "idx_generation": 166, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n: int, char='a') -> bool:\n    \"\"\"Check if the character at the nth position of the string is equal to the given character.\"\"\"\n    return s[n] == char", "solution_func": "def g(s='hello world', char='a'):\n    return s, s.index(char)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if the sum of any two numbers in the list is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9], target\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 166, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if the sum of any two numbers in the list is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9], target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, strings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'kiwi', 'lemon']) -> bool:\n    \"\"\"Check if the given string is the concatenation of two strings from the list.\"\"\"\n    return any(s == a + b for a in strings for b in strings)\ndef g(strings = ['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'kiwi', 'lemon']):\n    return strings[0] + strings[1]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0], "idx_generation": 166, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, strings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'kiwi', 'lemon']) -> bool:\n    \"\"\"Check if the given string is the concatenation of two strings from the list.\"\"\"\n    return any(s == a + b for a in strings for b in strings)", "solution_func": "def g(strings = ['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'kiwi', 'lemon']):\n    return strings[0] + strings[1]", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if a number is divisible by any of the prime numbers in a list.\"\"\"\n    for prime in primes:\n        if n % prime == 0:\n            return True\n    return False\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    n = 1\n    while True:\n        if f(n, primes):\n            return n\n        n += 1\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 167, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if a number is divisible by any of the prime numbers in a list.\"\"\"\n    for prime in primes:\n        if n % prime == 0:\n            return True\n    return False", "solution_func": "def g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    n = 1\n    while True:\n        if f(n, primes):\n            return n\n        n += 1", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, k=3) -> bool:\n    \"\"\"Check if a number is a power of k.\"\"\"\n    while n > 1:\n        if n % k != 0:\n            return False\n        n //= k\n    return n == 1\ndef g(k = 3):\n    n = 1\n    while True:\n        if f(n, k):\n            return n\n        n += 1\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 167, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, k=3) -> bool:\n    \"\"\"Check if a number is a power of k.\"\"\"\n    while n > 1:\n        if n % k != 0:\n            return False\n        n //= k\n    return n == 1", "solution_func": "def g(k = 3):\n    n = 1\n    while True:\n        if f(n, k):\n            return n\n        n += 1", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a string has exactly n vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for c in s:\n        if c.lower() in vowels:\n            count += 1\n    return count == n\ndef g(n = 3):\n    s = ''\n    for i in range(n):\n        s += 'a'\n    return s\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 167, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a string has exactly n vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for c in s:\n        if c.lower() in vowels:\n            count += 1\n    return count == n", "solution_func": "def g(n = 3):\n    s = ''\n    for i in range(n):\n        s += 'a'\n    return s", "map_ix": [0, 1, 0, 1, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target=25) -> bool:\n    \"\"\"Check if there exists three numbers in the array that sum up to the target.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g(target=25):\n    return [5, 10, 15, 20, 25, 30]\n\nassert f(g())\n", "emb": null, "idx_generation": 167, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=25) -> bool:\n    \"\"\"Check if there exists three numbers in the array that sum up to the target.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False", "solution_func": "def g(target=25):\n    return [5, 10, 15, 20, 25, 30]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Find a pair of numbers in the array that sum up to the target.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n", "emb": null, "idx_generation": 167, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Find a pair of numbers in the array that sum up to the target.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g(target=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], n=3) -> bool:\n    \"\"\"Check if there are n consecutive numbers in the array.\"\"\"\n    arr.sort()\n    for i in range(len(arr) - n + 1):\n        if arr[i] + n - 1 == arr[i + n - 1]:\n            return True\n    return False\n\ndef g(n=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 167, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], n=3) -> bool:\n    \"\"\"Check if there are n consecutive numbers in the array.\"\"\"\n    arr.sort()\n    for i in range(len(arr) - n + 1):\n        if arr[i] + n - 1 == arr[i + n - 1]:\n            return True\n    return False", "solution_func": "def g(n=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=16) -> bool:\n    \"\"\"\n    Check if there are two numbers in the list that add up to the target\n    \"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(target=16):\n    nums = [4, 5, 2, 8, 10]\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 167, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=16) -> bool:\n    \"\"\"\n    Check if there are two numbers in the list that add up to the target\n    \"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))", "solution_func": "def g(target=16):\n    nums = [4, 5, 2, 8, 10]\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_row=2, target_col=3) -> bool:\n    \"\"\"\n    Check if the target element is located in the given row and column of the matrix\n    \"\"\"\n    return matrix[target_row][target_col] == 1\ndef g(target_row=2, target_col=3):\n    matrix = [\n        [0, 0, 0, 0],\n        [0, 1, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0]\n    ]\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 167, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_row=2, target_col=3) -> bool:\n    \"\"\"\n    Check if the target element is located in the given row and column of the matrix\n    \"\"\"\n    return matrix[target_row][target_col] == 1", "solution_func": "def g(target_row=2, target_col=3):\n    matrix = [\n        [0, 0, 0, 0],\n        [0, 1, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0]\n    ]\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Check if there are three numbers in the list that add up to the target\n    \"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums))))\ndef g(target=10):\n    nums = [2, 3, 5, 1, 4]\n    return nums\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 167, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Check if there are three numbers in the list that add up to the target\n    \"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums))))", "solution_func": "def g(target=10):\n    nums = [2, 3, 5, 1, 4]\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substrs=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Check if a string contains any substring from a list.\"\"\"\n    return any((substr in s for substr in substrs))\ndef g(substrs=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return 'pineapple'\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 167, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substrs=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Check if a string contains any substring from a list.\"\"\"\n    return any((substr in s for substr in substrs))", "solution_func": "def g(substrs=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return 'pineapple'", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, element=8) -> bool:\n    \"\"\"Check if an element is present in a numpy array.\"\"\"\n    return element in arr\n\ndef g(element=8):\n    arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    return arr\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 168, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, element=8) -> bool:\n    \"\"\"Check if an element is present in a numpy array.\"\"\"\n    return element in arr", "solution_func": "def g(element=8):\n    arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, substr='python') -> bool:\n    \"\"\"Check if a substring is present in a string.\"\"\"\n    return substr in s\n\ndef g(substr='python'):\n    s = 'I love programming in Python!'\n    return s\n\nassert f(g())\n", "emb": null, "idx_generation": 168, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substr='python') -> bool:\n    \"\"\"Check if a substring is present in a string.\"\"\"\n    return substr in s", "solution_func": "def g(substr='python'):\n    s = 'I love programming in Python!'\n    return s", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: int, y: int, z: int, equation='x^2 + y^2 = z^2') -> bool:\n    \"\"\"Check if a given equation is true for the given values of x, y, and z.\"\"\"\n    return eval(equation) == True\n\ndef g(x=3, y=4, z=5, equation='x^2 + y^2 = z^2'):\n    return x, y, z\n\nassert f(*g())\n", "emb": null, "idx_generation": 168, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, y: int, z: int, equation='x^2 + y^2 = z^2') -> bool:\n    \"\"\"Check if a given equation is true for the given values of x, y, and z.\"\"\"\n    return eval(equation) == True", "solution_func": "def g(x=3, y=4, z=5, equation='x^2 + y^2 = z^2'):\n    return x, y, z", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: List[int], t=1000000000, n=100) -> bool:\n    \"\"\"Find if the sum of the first n values in the list is greater than t\"\"\"\n    assert len(x) >= n\n    return sum(x[:n]) > t\ndef g(t=1000000000, n=100):\n    return [i for i in range(1, t+1)]\nassert f(g())\n", "emb": null, "idx_generation": 168, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], t=1000000000, n=100) -> bool:\n    \"\"\"Find if the sum of the first n values in the list is greater than t\"\"\"\n    assert len(x) >= n\n    return sum(x[:n]) > t", "solution_func": "def g(t=1000000000, n=100):\n    return [i for i in range(1, t+1)]", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, threshold=0.5) -> bool:\n    \"\"\"Check if the average value of the array is above the threshold\"\"\"\n    return np.average(arr) > threshold\n\ndef g(threshold=0.5):\n    return np.random.random((10, 10))\n\nassert f(g())\n", "emb": null, "idx_generation": 168, "target_skills": null, "problem_func": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, threshold=0.5) -> bool:\n    \"\"\"Check if the average value of the array is above the threshold\"\"\"\n    return np.average(arr) > threshold", "solution_func": "def g(threshold=0.5):\n    return np.random.random((10, 10))", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, m: int, a=7, b=13) -> bool:\n    \"\"\"Check if the sum of n and m is divisible by a and b\"\"\"\n    return (n + m) % a == 0 and (n + m) % b == 0\n\ndef g(a=7, b=13):\n    return a * b\n\nassert f(g())\n", "emb": null, "idx_generation": 168, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m: int, a=7, b=13) -> bool:\n    \"\"\"Check if the sum of n and m is divisible by a and b\"\"\"\n    return (n + m) % a == 0 and (n + m) % b == 0", "solution_func": "def g(a=7, b=13):\n    return a * b", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(s: str, n=3, p=2) -> bool:\n    \"\"\"Check if the nth prime number is a factor of the product of the first p prime numbers.\"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    i = 2\n    while len(primes) < n:\n        if is_prime(i):\n            primes.append(i)\n        i += 1\n\n    product = 1\n    for prime in primes[:p]:\n        product *= prime\n\n    return product % primes[n-1] == 0 and s in primes\n\ndef g(n=3, p=2):\n    primes = []\n    i = 2\n    while len(primes) < p:\n        if is_prime(i):\n            primes.append(i)\n        i += 1\n\n    return primes[n-1]\n\nassert f(g())\n", "emb": null, "idx_generation": 168, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(s: str, n=3, p=2) -> bool:\n    \"\"\"Check if the nth prime number is a factor of the product of the first p prime numbers.\"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    i = 2\n    while len(primes) < n:\n        if is_prime(i):\n            primes.append(i)\n        i += 1\n\n    product = 1\n    for prime in primes[:p]:\n        product *= prime\n\n    return product % primes[n-1] == 0 and s in primes", "solution_func": "def g(n=3, p=2):\n    primes = []\n    i = 2\n    while len(primes) < p:\n        if is_prime(i):\n            primes.append(i)\n        i += 1\n\n    return primes[n-1]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n=5, k=7) -> bool:\n    \"\"\"Check if the sum of the first n triangular numbers is divisible by k.\"\"\"\n    def triangular_number(num):\n        return int(num * (num + 1) / 2)\n\n    sum_triangular = 0\n    for i in range(1, n+1):\n        sum_triangular += triangular_number(i)\n\n    return sum_triangular % k == 0 and s in str(sum_triangular)\n\ndef g(n=5, k=7):\n    sum_triangular = 0\n    for i in range(1, n+1):\n        sum_triangular += triangular_number(i)\n\n    return sum_triangular\n\nassert f(g())\n", "emb": null, "idx_generation": 168, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=5, k=7) -> bool:\n    \"\"\"Check if the sum of the first n triangular numbers is divisible by k.\"\"\"\n    def triangular_number(num):\n        return int(num * (num + 1) / 2)\n\n    sum_triangular = 0\n    for i in range(1, n+1):\n        sum_triangular += triangular_number(i)\n\n    return sum_triangular % k == 0 and s in str(sum_triangular)", "solution_func": "def g(n=5, k=7):\n    sum_triangular = 0\n    for i in range(1, n+1):\n        sum_triangular += triangular_number(i)\n\n    return sum_triangular", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(s: str, n=10, x=5, y=8) -> bool:\n    \"\"\"Check if the product of n random integers between x and y is divisible by 10.\"\"\"\n    random_integers = [random.randint(x, y) for _ in range(n)]\n    product = 1\n    for num in random_integers:\n        product *= num\n\n    return product % 10 == 0 and s in random_integers\n\ndef g(n=10, x=5, y=8):\n    random_integers = [random.randint(x, y) for _ in range(n)]\n    return random_integers\n\nassert f(g())\n", "emb": null, "idx_generation": 168, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(s: str, n=10, x=5, y=8) -> bool:\n    \"\"\"Check if the product of n random integers between x and y is divisible by 10.\"\"\"\n    random_integers = [random.randint(x, y) for _ in range(n)]\n    product = 1\n    for num in random_integers:\n        product *= num\n\n    return product % 10 == 0 and s in random_integers", "solution_func": "def g(n=10, x=5, y=8):\n    random_integers = [random.randint(x, y) for _ in range(n)]\n    return random_integers", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], n=5, k=2) -> bool:\n    \"\"\"\n    Given an array of integers, find if there exists a pair of numbers such that their sum is divisible by k.\n    Return True if such a pair exists, otherwise return False.\n    \"\"\"\n    for i in range(n):\n        for j in range(i+1, n):\n            if (arr[i] + arr[j]) % k == 0:\n                return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5], n=5, k=2):\n    for i in range(n):\n        for j in range(i+1, n):\n            if (arr[i] + arr[j]) % k == 0:\n                return True\n    return False\n\nassert f(g())\n", "emb": null, "idx_generation": 168, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], n=5, k=2) -> bool:\n    \"\"\"\n    Given an array of integers, find if there exists a pair of numbers such that their sum is divisible by k.\n    Return True if such a pair exists, otherwise return False.\n    \"\"\"\n    for i in range(n):\n        for j in range(i+1, n):\n            if (arr[i] + arr[j]) % k == 0:\n                return True\n    return False", "solution_func": "def g(arr=[1, 2, 3, 4, 5], n=5, k=2):\n    for i in range(n):\n        for j in range(i+1, n):\n            if (arr[i] + arr[j]) % k == 0:\n                return True\n    return False", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(n: int, arr=[5, 6, 7, 8, 9], target=30) -> bool:\n    \"\"\"\n    Find a combination of n elements from the given array that sum up to the target.\n    For example, for arr = [5, 6, 7, 8, 9] and target = 30, if we choose [5, 9, 9, 7], the sum is 30, so sat(n = 4, arr = [5, 6, 7, 8, 9], target = 30) is True.\n    \"\"\"\n    import itertools\n    combinations = itertools.combinations(arr, n)\n    for combination in combinations:\n        if sum(combination) == target:\n            return True\n    return False\ndef g(arr=[5, 6, 7, 8, 9], target=30):\n    import itertools\n    for n in range(1, len(arr)+1):\n        combinations = itertools.combinations(arr, n)\n        for combination in combinations:\n            if sum(combination) == target:\n                return combination\n    return []\nassert f(g())\n", "emb": null, "idx_generation": 169, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(n: int, arr=[5, 6, 7, 8, 9], target=30) -> bool:\n    \"\"\"\n    Find a combination of n elements from the given array that sum up to the target.\n    For example, for arr = [5, 6, 7, 8, 9] and target = 30, if we choose [5, 9, 9, 7], the sum is 30, so sat(n = 4, arr = [5, 6, 7, 8, 9], target = 30) is True.\n    \"\"\"\n    import itertools\n    combinations = itertools.combinations(arr, n)\n    for combination in combinations:\n        if sum(combination) == target:\n            return True\n    return False", "solution_func": "def g(arr=[5, 6, 7, 8, 9], target=30):\n    import itertools\n    for n in range(1, len(arr)+1):\n        combinations = itertools.combinations(arr, n)\n        for combination in combinations:\n            if sum(combination) == target:\n                return combination\n    return []", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(n: int, matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=15) -> bool:\n    \"\"\"\n    Find a combination of n elements from the given matrix that sum up to the target.\n    For example, for matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] and target = 15, if we choose [1, 2, 6, 6], the sum is 15, so sat(n = 4, matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target = 15) is True.\n    \"\"\"\n    import itertools\n    elements = [item for sublist in matrix for item in sublist]\n    combinations = itertools.combinations(elements, n)\n    for combination in combinations:\n        if sum(combination) == target:\n            return True\n    return False\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=15):\n    import itertools\n    elements = [item for sublist in matrix for item in sublist]\n    for n in range(1, len(elements)+1):\n        combinations = itertools.combinations(elements, n)\n        for combination in combinations:\n            if sum(combination) == target:\n                return combination\n    return []\nassert f(g())\n", "emb": null, "idx_generation": 169, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(n: int, matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=15) -> bool:\n    \"\"\"\n    Find a combination of n elements from the given matrix that sum up to the target.\n    For example, for matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] and target = 15, if we choose [1, 2, 6, 6], the sum is 15, so sat(n = 4, matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target = 15) is True.\n    \"\"\"\n    import itertools\n    elements = [item for sublist in matrix for item in sublist]\n    combinations = itertools.combinations(elements, n)\n    for combination in combinations:\n        if sum(combination) == target:\n            return True\n    return False", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=15):\n    import itertools\n    elements = [item for sublist in matrix for item in sublist]\n    for n in range(1, len(elements)+1):\n        combinations = itertools.combinations(elements, n)\n        for combination in combinations:\n            if sum(combination) == target:\n                return combination\n    return []", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6], target=12) -> bool:\n    \"\"\"\n    Find a combination of n elements from the given list that sum up to the target.\n    For example, for nums = [1, 2, 3, 4, 5, 6] and target = 12, if we choose [1, 2, 3, 6], the sum is 12, so sat(n = 4, nums = [1, 2, 3, 4, 5, 6], target = 12) is True.\n    \"\"\"\n    import itertools\n    combinations = itertools.combinations(nums, n)\n    for combination in combinations:\n        if sum(combination) == target:\n            return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5, 6], target=12):\n    import itertools\n    for n in range(1, len(nums)+1):\n        combinations = itertools.combinations(nums, n)\n        for combination in combinations:\n            if sum(combination) == target:\n                return combination\n    return []\nassert f(g())\n", "emb": null, "idx_generation": 169, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6], target=12) -> bool:\n    \"\"\"\n    Find a combination of n elements from the given list that sum up to the target.\n    For example, for nums = [1, 2, 3, 4, 5, 6] and target = 12, if we choose [1, 2, 3, 6], the sum is 12, so sat(n = 4, nums = [1, 2, 3, 4, 5, 6], target = 12) is True.\n    \"\"\"\n    import itertools\n    combinations = itertools.combinations(nums, n)\n    for combination in combinations:\n        if sum(combination) == target:\n            return True\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6], target=12):\n    import itertools\n    for n in range(1, len(nums)+1):\n        combinations = itertools.combinations(nums, n)\n        for combination in combinations:\n            if sum(combination) == target:\n                return combination\n    return []", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(string: str, char='a') -> bool:\n    \"\"\"\n    Check if a given character is present in the string.\n    Return True if the character is present, False otherwise.\n    \"\"\"\n    return char in string\n\ndef g(string='Hello World!', char='a'):\n    return string\n\nassert f(g())\n", "emb": null, "idx_generation": 169, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, char='a') -> bool:\n    \"\"\"\n    Check if a given character is present in the string.\n    Return True if the character is present, False otherwise.\n    \"\"\"\n    return char in string", "solution_func": "def g(string='Hello World!', char='a'):\n    return string", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], num_rows=3, num_cols=3) -> bool:\n    \"\"\"\n    Check if the given matrix is a square matrix.\n    Return True if it is a square matrix, False otherwise.\n    \"\"\"\n    return len(matrix) == len(matrix[0])\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 169, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], num_rows=3, num_cols=3) -> bool:\n    \"\"\"\n    Check if the given matrix is a square matrix.\n    Return True if it is a square matrix, False otherwise.\n    \"\"\"\n    return len(matrix) == len(matrix[0])", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(string: str, substring='world') -> bool:\n    \"\"\"\n    Check if the given substring is present in the string.\n    Return True if the substring is present, False otherwise.\n    \"\"\"\n    return substring in string\n\ndef g(string='Hello World!', substring='world'):\n    return string\n\nassert f(g())\n", "emb": null, "idx_generation": 169, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, substring='world') -> bool:\n    \"\"\"\n    Check if the given substring is present in the string.\n    Return True if the substring is present, False otherwise.\n    \"\"\"\n    return substring in string", "solution_func": "def g(string='Hello World!', substring='world'):\n    return string", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=7) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list that sum up to the target\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=7):\n    return [(i, j) for i in range(10) for j in range(10)]\nassert f(g())\n", "emb": null, "idx_generation": 169, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=7) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list that sum up to the target\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))", "solution_func": "def g(target=7):\n    return [(i, j) for i in range(10) for j in range(10)]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(words: List[str], target_len=5) -> bool:\n    \"\"\"Check if any word in the list has a length greater than the target length\"\"\"\n    return any(len(word) > target_len for word in words)\ndef g(target_len=5):\n    return [\"apple\", \"banana\", \"pear\", \"orange\"]\nassert f(g())\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 169, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], target_len=5) -> bool:\n    \"\"\"Check if any word in the list has a length greater than the target length\"\"\"\n    return any(len(word) > target_len for word in words)", "solution_func": "def g(target_len=5):\n    return [\"apple\", \"banana\", \"pear\", \"orange\"]", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list whose product is equal to the target\"\"\"\n    return any(nums[i] * nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 169, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list whose product is equal to the target\"\"\"\n    return any(nums[i] * nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))", "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport datetime\n\ndef f(dt: datetime.datetime, days=7, hours=0, minutes=0, seconds=0) -> bool:\n    \"\"\"Check if the given datetime is exactly one week from now\"\"\"\n    now = datetime.datetime.now()\n    future = now + datetime.timedelta(days=days, hours=hours, minutes=minutes, seconds=seconds)\n    return dt == future\n\ndef g(days=7, hours=0, minutes=0, seconds=0):\n    now = datetime.datetime.now()\n    future = now + datetime.timedelta(days=days, hours=hours, minutes=minutes, seconds=seconds)\n    return future\n\nassert f(g())\n", "emb": null, "idx_generation": 169, "target_skills": null, "problem_func": "from typing import*\nimport datetime\n\ndef f(dt: datetime.datetime, days=7, hours=0, minutes=0, seconds=0) -> bool:\n    \"\"\"Check if the given datetime is exactly one week from now\"\"\"\n    now = datetime.datetime.now()\n    future = now + datetime.timedelta(days=days, hours=hours, minutes=minutes, seconds=seconds)\n    return dt == future", "solution_func": "def g(days=7, hours=0, minutes=0, seconds=0):\n    now = datetime.datetime.now()\n    future = now + datetime.timedelta(days=days, hours=hours, minutes=minutes, seconds=seconds)\n    return future", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"Check if string s has a length of n\"\"\"\n    return len(s) == n\ndef g(n=10):\n    return \"a\" * n\nassert f(g(), n=10)\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 170, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"Check if string s has a length of n\"\"\"\n    return len(s) == n", "solution_func": "def g(n=10):\n    return \"a\" * n", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray) -> bool:\n    \"\"\"Check if the sum of all elements in the array is divisible by 10\"\"\"\n    return np.sum(arr) % 10 == 0\n\ndef g():\n    return np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\nassert f(g())\n", "emb": null, "idx_generation": 170, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray) -> bool:\n    \"\"\"Check if the sum of all elements in the array is divisible by 10\"\"\"\n    return np.sum(arr) % 10 == 0", "solution_func": "def g():\n    return np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"Check if s1 and s2 are anagrams\"\"\"\n    return sorted(s1) == sorted(s2)\n\ndef g():\n    return \"hello\", \"olleh\"\n\nassert f(*g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 170, "target_skills": null, "problem_func": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"Check if s1 and s2 are anagrams\"\"\"\n    return sorted(s1) == sorted(s2)", "solution_func": "def g():\n    return \"hello\", \"olleh\"", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Find a number that, when multiplied by 7, results in 42.\"\"\"\n    return n * 7 == 42\ndef g():\n    return 42 // 7\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 170, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Find a number that, when multiplied by 7, results in 42.\"\"\"\n    return n * 7 == 42", "solution_func": "def g():\n    return 42 // 7", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Find a string that is the reverse of the word 'python'.\"\"\"\n    return s[::-1] == 'python'\ndef g():\n    return 'nohtyp'\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 170, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Find a string that is the reverse of the word 'python'.\"\"\"\n    return s[::-1] == 'python'", "solution_func": "def g():\n    return 'nohtyp'", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Find a number that is a factor of 72.\"\"\"\n    return 72 % n == 0\ndef g():\n    return 8\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 170, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Find a number that is a factor of 72.\"\"\"\n    return 72 % n == 0", "solution_func": "def g():\n    return 8", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers, return True if there exists a pair of numbers that sum up to the target\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums))))\n    \ndef g(nums_length: int = 10, target: int = 10):\n    nums = [random.randint(1, 10) for _ in range(nums_length)]\n    return nums, target\n\nassert f(*g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 170, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers, return True if there exists a pair of numbers that sum up to the target\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums))))", "solution_func": "def g(nums_length: int = 10, target: int = 10):\n    nums = [random.randint(1, 10) for _ in range(nums_length)]\n    return nums, target", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\nimport string\n\ndef f(text: str, n: int) -> bool:\n    \"\"\"Check if every word in the text contains at least n vowels\"\"\"\n    vowels = set(\"aeiou\")\n    words = text.lower().split()\n    return all((sum((1 for c in word if c in vowels)) >= n for word in words))\n\ndef g(text_length: int = 100, n: int = 2):\n    text = \"\".join(random.choices(string.ascii_letters + \" \", k=text_length))\n    return text, n\n\nassert f(*g())\n", "emb": null, "idx_generation": 170, "target_skills": null, "problem_func": "import random\nfrom typing import*\nimport string\n\ndef f(text: str, n: int) -> bool:\n    \"\"\"Check if every word in the text contains at least n vowels\"\"\"\n    vowels = set(\"aeiou\")\n    words = text.lower().split()\n    return all((sum((1 for c in word if c in vowels)) >= n for word in words))", "solution_func": "def g(text_length: int = 100, n: int = 2):\n    text = \"\".join(random.choices(string.ascii_letters + \" \", k=text_length))\n    return text, n", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the sum of each row in the matrix is equal to the sum of the previous row\"\"\"\n    return all((sum(row) == sum(matrix[i-1]) for i, row in enumerate(matrix) if i > 0))\n\ndef g(matrix_size: int = 3):\n    matrix = [[random.randint(1, 10) for _ in range(matrix_size)] for _ in range(matrix_size)]\n    return matrix\n\nassert f(g())\n", "emb": null, "idx_generation": 170, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the sum of each row in the matrix is equal to the sum of the previous row\"\"\"\n    return all((sum(row) == sum(matrix[i-1]) for i, row in enumerate(matrix) if i > 0))", "solution_func": "def g(matrix_size: int = 3):\n    matrix = [[random.randint(1, 10) for _ in range(matrix_size)] for _ in range(matrix_size)]\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target: int, start=0) -> bool:\n    \"\"\"Find if there is a subarray with a given sum\"\"\"\n    n = len(arr)\n    curr_sum = arr[start]\n    end = start + 1\n    while end <= n:\n        while curr_sum > target and start < end - 1:\n            curr_sum = curr_sum - arr[start]\n            start += 1\n        if curr_sum == target:\n            return True\n        if end < n:\n            curr_sum = curr_sum + arr[end]\n        end += 1\n    return False\n\ndef g(arr = [1, 4, 20, 3, 10, 5], target = 33):\n    return arr\n\nassert f(g(), 33)\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 170, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int, start=0) -> bool:\n    \"\"\"Find if there is a subarray with a given sum\"\"\"\n    n = len(arr)\n    curr_sum = arr[start]\n    end = start + 1\n    while end <= n:\n        while curr_sum > target and start < end - 1:\n            curr_sum = curr_sum - arr[start]\n            start += 1\n        if curr_sum == target:\n            return True\n        if end < n:\n            curr_sum = curr_sum + arr[end]\n        end += 1\n    return False", "solution_func": "def g(arr = [1, 4, 20, 3, 10, 5], target = 33):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target=20) -> bool:\n    \"\"\"Check if any 2 elements in the array sum up to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return arr\nassert f(g())\n", "emb": null, "idx_generation": 171, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=20) -> bool:\n    \"\"\"Check if any 2 elements in the array sum up to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return arr", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target='apple') -> bool:\n    \"\"\"Check if the target string is present in s\"\"\"\n    return target in s\n\ndef g(target = 'apple'):\n    return \"I love eating \" + target + \"s!\"\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 171, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='apple') -> bool:\n    \"\"\"Check if the target string is present in s\"\"\"\n    return target in s", "solution_func": "def g(target = 'apple'):\n    return \"I love eating \" + target + \"s!\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, k=3) -> bool:\n    \"\"\"Check if n is divisible by k\"\"\"\n    return n % k == 0\n\ndef g(k = 3):\n    return k * 5\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 171, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, k=3) -> bool:\n    \"\"\"Check if n is divisible by k\"\"\"\n    return n % k == 0", "solution_func": "def g(k = 3):\n    return k * 5", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a = 1, b = 10) -> bool:\n    \"\"\"Check if a number is a multiple of any number between a and b (inclusive)\"\"\"\n    return any(n % i == 0 for i in range(a, b+1))\ndef g(a = 1, b = 10):\n    return a * b\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 171, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a = 1, b = 10) -> bool:\n    \"\"\"Check if a number is a multiple of any number between a and b (inclusive)\"\"\"\n    return any(n % i == 0 for i in range(a, b+1))", "solution_func": "def g(a = 1, b = 10):\n    return a * b", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target number\"\"\"\n    return any(target - num in nums for num in nums)\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g(), 7)\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 171, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target number\"\"\"\n    return any(target - num in nums for num in nums)", "solution_func": "def g():\n    return [1, 2, 3, 4, 5]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substr: str) -> bool:\n    \"\"\"Check if a given substring is present in a given string\"\"\"\n    return substr in s\ndef g():\n    return \"Hello, world!\"\nassert f(g(), \"world\")\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 171, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substr: str) -> bool:\n    \"\"\"Check if a given substring is present in a given string\"\"\"\n    return substr in s", "solution_func": "def g():\n    return \"Hello, world!\"", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target: int = 0, start: int = 0) -> bool:\n    \"\"\"Find two numbers in a list that sum up to the target value starting from the start index.\"\"\"\n    for i in range(start, len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(arr: List[int] = [1, 5, 3, 8, 2], target: int = 10, start: int = 0) -> List[int]:\n    \"\"\"Return the two numbers in a list that sum up to the target value starting from the start index.\"\"\"\n    for i in range(start, len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return [arr[i], arr[j]]\n    return []\nassert f(g(), target=10, start=0)\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 171, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int = 0, start: int = 0) -> bool:\n    \"\"\"Find two numbers in a list that sum up to the target value starting from the start index.\"\"\"\n    for i in range(start, len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g(arr: List[int] = [1, 5, 3, 8, 2], target: int = 10, start: int = 0) -> List[int]:\n    \"\"\"Return the two numbers in a list that sum up to the target value starting from the start index.\"\"\"\n    for i in range(start, len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return [arr[i], arr[j]]\n    return []", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(num: int, nums: List[int] = [1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if a given number is present in a list of numbers.\"\"\"\n    return num in nums\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5]) -> int:\n    \"\"\"Return the sum of all numbers in a list.\"\"\"\n    return sum(nums)\nassert f(g(), num=3)\n", "emb": null, "idx_generation": 171, "target_skills": null, "problem_func": "from typing import*\ndef f(num: int, nums: List[int] = [1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if a given number is present in a list of numbers.\"\"\"\n    return num in nums", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5]) -> int:\n    \"\"\"Return the sum of all numbers in a list.\"\"\"\n    return sum(nums)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(sentence: str, words: List[str] = ['quick', 'brown', 'fox']) -> bool:\n    \"\"\"Check if all the words in a list are present in a given sentence.\"\"\"\n    return all(word in sentence for word in words)\n\ndef g(sentence: str = 'The quick brown fox jumps over the lazy dog.') -> str:\n    \"\"\"Return the first word in a sentence.\"\"\"\n    return sentence.split()[0]\nassert f(g(), words=['quick', 'brown', 'fox'])\n", "emb": null, "idx_generation": 171, "target_skills": null, "problem_func": "from typing import*\ndef f(sentence: str, words: List[str] = ['quick', 'brown', 'fox']) -> bool:\n    \"\"\"Check if all the words in a list are present in a given sentence.\"\"\"\n    return all(word in sentence for word in words)", "solution_func": "def g(sentence: str = 'The quick brown fox jumps over the lazy dog.') -> str:\n    \"\"\"Return the first word in a sentence.\"\"\"\n    return sentence.split()[0]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, strings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grapefruit', 'honeydew', 'imbe', 'jackfruit']) -> bool:\n    \"\"\"Check if the input string is a substring of any string in the list.\"\"\"\n    return any((s in string for string in strings))\ndef g(strings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grapefruit', 'honeydew', 'imbe', 'jackfruit']):\n    return strings[3][2:]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 171, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, strings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grapefruit', 'honeydew', 'imbe', 'jackfruit']) -> bool:\n    \"\"\"Check if the input string is a substring of any string in the list.\"\"\"\n    return any((s in string for string in strings))", "solution_func": "def g(strings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grapefruit', 'honeydew', 'imbe', 'jackfruit']):\n    return strings[3][2:]", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, return True if there exists a pair of numbers in the list\n    that sum up to the target number, and False otherwise.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    return [2, 4, 6, 8, 10], 12\n\nassert f(*g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 172, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, return True if there exists a pair of numbers in the list\n    that sum up to the target number, and False otherwise.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g():\n    return [2, 4, 6, 8, 10], 12", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], pattern: str) -> List[str]:\n    \"\"\"\n    Given a list of words and a pattern string, return a new list of words that match the pattern.\n    A word matches the pattern if there exists a one-to-one mapping of characters between the word and the pattern.\n    \"\"\"\n    def match(word: str, pattern: str) -> bool:\n        if len(word) != len(pattern):\n            return False\n        mapping = {}\n        for i in range(len(word)):\n            if pattern[i] not in mapping:\n                mapping[pattern[i]] = word[i]\n            else:\n                if mapping[pattern[i]] != word[i]:\n                    return False\n        return True\n    \n    return [word for word in words if match(word, pattern)]\n\ndef g():\n    return ['abc', 'def', 'ghi', 'jkl'], 'abc'\n\nassert f(*g()) == ['abc']\n", "emb": null, "idx_generation": 172, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], pattern: str) -> List[str]:\n    \"\"\"\n    Given a list of words and a pattern string, return a new list of words that match the pattern.\n    A word matches the pattern if there exists a one-to-one mapping of characters between the word and the pattern.\n    \"\"\"\n    def match(word: str, pattern: str) -> bool:\n        if len(word) != len(pattern):\n            return False\n        mapping = {}\n        for i in range(len(word)):\n            if pattern[i] not in mapping:\n                mapping[pattern[i]] = word[i]\n            else:\n                if mapping[pattern[i]] != word[i]:\n                    return False\n        return True\n    \n    return [word for word in words if match(word, pattern)]", "solution_func": "def g():\n    return ['abc', 'def', 'ghi', 'jkl'], 'abc'", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the maximum product of any three numbers in the list.\n    \"\"\"\n    nums.sort()\n    return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(*g()) == 60\n", "emb": null, "idx_generation": 172, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the maximum product of any three numbers in the list.\n    \"\"\"\n    nums.sort()\n    return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])", "solution_func": "def g():\n    return [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, n: int, m: int) -> bool:\n    \"\"\"Check if the sum of the elements in each row of a 2D array is divisible by n, and the sum of the elements in each column is divisible by m.\"\"\"\n    row_sums = np.sum(arr, axis=1)\n    col_sums = np.sum(arr, axis=0)\n    return np.all(row_sums % n == 0) and np.all(col_sums % m == 0)\n\ndef g(n=3, m=4):\n    return np.zeros((n, m), dtype=int)\n\nassert f(g())\n", "emb": null, "idx_generation": 172, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, n: int, m: int) -> bool:\n    \"\"\"Check if the sum of the elements in each row of a 2D array is divisible by n, and the sum of the elements in each column is divisible by m.\"\"\"\n    row_sums = np.sum(arr, axis=1)\n    col_sums = np.sum(arr, axis=0)\n    return np.all(row_sums % n == 0) and np.all(col_sums % m == 0)", "solution_func": "def g(n=3, m=4):\n    return np.zeros((n, m), dtype=int)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, days=7) -> bool:\n    \"\"\"Check if the date is exactly one week (7 days) after the current date.\"\"\"\n    current_date = datetime.date.today()\n    target_date = current_date + datetime.timedelta(days=days)\n    return date == target_date\n\ndef g(days=7):\n    current_date = datetime.date.today()\n    return current_date + datetime.timedelta(days=days)\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 172, "target_skills": null, "problem_func": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, days=7) -> bool:\n    \"\"\"Check if the date is exactly one week (7 days) after the current date.\"\"\"\n    current_date = datetime.date.today()\n    target_date = current_date + datetime.timedelta(days=days)\n    return date == target_date", "solution_func": "def g(days=7):\n    current_date = datetime.date.today()\n    return current_date + datetime.timedelta(days=days)", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import math\nfrom typing import*\nfrom math import factorial\n\ndef f(n: int, k: int) -> bool:\n    \"\"\"Check if the binomial coefficient C(n, k) is a multiple of k.\"\"\"\n    coef = factorial(n) // (factorial(k) * factorial(n - k))\n    return coef % k == 0\n\ndef g(n=10, k=3):\n    return n, k\n\nassert f(g())\n", "emb": null, "idx_generation": 172, "target_skills": null, "problem_func": "import math\nfrom typing import*\nfrom math import factorial\n\ndef f(n: int, k: int) -> bool:\n    \"\"\"Check if the binomial coefficient C(n, k) is a multiple of k.\"\"\"\n    coef = factorial(n) // (factorial(k) * factorial(n - k))\n    return coef % k == 0", "solution_func": "def g(n=10, k=3):\n    return n, k", "map_ix": null}, {"fitness": -Infinity, "program_str": "import math\nfrom typing import*\nfrom math import gcd\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the greatest common divisor of the given list of numbers is 1.\"\"\"\n    return gcd(*nums) == 1\n\ndef g():\n    return [3, 6, 9, 12, 15]\nassert f(g())\n", "emb": null, "idx_generation": 172, "target_skills": null, "problem_func": "import math\nfrom typing import*\nfrom math import gcd\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the greatest common divisor of the given list of numbers is 1.\"\"\"\n    return gcd(*nums) == 1", "solution_func": "def g():\n    return [3, 6, 9, 12, 15]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, chars='aeiou') -> bool:\n    \"\"\"Check if all characters in the given string are vowels.\"\"\"\n    return all(char in chars for char in s)\n\ndef g(chars='aeiou'):\n    return \"aeiou\"\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 172, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, chars='aeiou') -> bool:\n    \"\"\"Check if all characters in the given string are vowels.\"\"\"\n    return all(char in chars for char in s)", "solution_func": "def g(chars='aeiou'):\n    return \"aeiou\"", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the sum of all even numbers in the given list is greater than the sum of all odd numbers.\"\"\"\n    even_sum = sum(num for num in nums if num % 2 == 0)\n    odd_sum = sum(num for num in nums if num % 2 != 0)\n    return even_sum > odd_sum\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 172, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the sum of all even numbers in the given list is greater than the sum of all odd numbers.\"\"\"\n    even_sum = sum(num for num in nums if num % 2 == 0)\n    odd_sum = sum(num for num in nums if num % 2 != 0)\n    return even_sum > odd_sum", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(n: int, m: int, nums=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) -> bool:\n    \"\"\"\n    Given a list of even integers and two integers n and m, determine if there exists a pair of integers in the list\n    whose sum is divisible by both n and m.\n    \"\"\"\n    pairs = [(nums[i], nums[j]) for i in range(len(nums)) for j in range(i + 1, len(nums))]\n    return any((sum(pair) % n == 0 and sum(pair) % m == 0 for pair in pairs))\n    \ndef g(n = 3, m = 5):\n    return [num for num in range(2, 21, 2)]\n\nassert f(g())\n", "emb": null, "idx_generation": 172, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, m: int, nums=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) -> bool:\n    \"\"\"\n    Given a list of even integers and two integers n and m, determine if there exists a pair of integers in the list\n    whose sum is divisible by both n and m.\n    \"\"\"\n    pairs = [(nums[i], nums[j]) for i in range(len(nums)) for j in range(i + 1, len(nums))]\n    return any((sum(pair) % n == 0 and sum(pair) % m == 0 for pair in pairs))", "solution_func": "def g(n = 3, m = 5):\n    return [num for num in range(2, 21, 2)]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=11) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 173, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=11) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Find the sum of the smallest k numbers in the list\"\"\"\n    return sum(sorted(nums)[:k])\ndef g(nums = [10, 8, 6, 4, 2, 1, 3, 5, 7, 9]):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 173, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Find the sum of the smallest k numbers in the list\"\"\"\n    return sum(sorted(nums)[:k])", "solution_func": "def g(nums = [10, 8, 6, 4, 2, 1, 3, 5, 7, 9]):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the string contains a palindrome of length n\"\"\"\n    for i in range(len(s)-n+1):\n        if s[i:i+n] == s[i:i+n][::-1]:\n            return True\n    return False\ndef g(s = \"racecar\"):\n    return s\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 173, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the string contains a palindrome of length n\"\"\"\n    for i in range(len(s)-n+1):\n        if s[i:i+n] == s[i:i+n][::-1]:\n            return True\n    return False", "solution_func": "def g(s = \"racecar\"):\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], k=3, target=7) -> bool:\n    \"\"\"\n    Find if there are k numbers in the list that sum up to the target.\n    \"\"\"\n    def backtrack(idx, count, curr_sum):\n        if count == k and curr_sum == target:\n            return True\n        if count > k or curr_sum > target or idx >= len(numbers):\n            return False\n        return backtrack(idx + 1, count + 1, curr_sum + numbers[idx]) or backtrack(idx + 1, count, curr_sum)\n\n    return backtrack(0, 0, 0)\n\ndef g(k=3, target=7):\n    \"\"\"\n    This solution uses backtracking to explore all possible combinations of k numbers from the list.\n    \"\"\"\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return numbers\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 173, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], k=3, target=7) -> bool:\n    \"\"\"\n    Find if there are k numbers in the list that sum up to the target.\n    \"\"\"\n    def backtrack(idx, count, curr_sum):\n        if count == k and curr_sum == target:\n            return True\n        if count > k or curr_sum > target or idx >= len(numbers):\n            return False\n        return backtrack(idx + 1, count + 1, curr_sum + numbers[idx]) or backtrack(idx + 1, count, curr_sum)\n\n    return backtrack(0, 0, 0)", "solution_func": "def g(k=3, target=7):\n    \"\"\"\n    This solution uses backtracking to explore all possible combinations of k numbers from the list.\n    \"\"\"\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return numbers", "map_ix": [0, 0, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"\n    Find if there is a straight line in the matrix that sums up to the target.\n    \"\"\"\n    def dfs(i, j, curr_sum):\n        if curr_sum == target:\n            return True\n        if i < 0 or i >= len(matrix) or j < 0 or j >= len(matrix[0]):\n            return False\n        \n        curr_sum += matrix[i][j]\n        return dfs(i + 1, j, curr_sum) or dfs(i, j + 1, curr_sum)\n\n    m, n = len(matrix), len(matrix[0])\n    for i in range(m):\n        for j in range(n):\n            if dfs(i, j, 0):\n                return True\n    \n    return False\n\ndef g(target=15):\n    \"\"\"\n    This solution uses depth-first search (DFS) to explore all possible paths in the matrix.\n    \"\"\"\n    matrix = [\n        [1, 2, 3, 4],\n        [5, 6, 7, 8],\n        [9, 10, 11, 12],\n        [13, 14, 15, 16]\n    ]\n    return matrix\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 173, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"\n    Find if there is a straight line in the matrix that sums up to the target.\n    \"\"\"\n    def dfs(i, j, curr_sum):\n        if curr_sum == target:\n            return True\n        if i < 0 or i >= len(matrix) or j < 0 or j >= len(matrix[0]):\n            return False\n        \n        curr_sum += matrix[i][j]\n        return dfs(i + 1, j, curr_sum) or dfs(i, j + 1, curr_sum)\n\n    m, n = len(matrix), len(matrix[0])\n    for i in range(m):\n        for j in range(n):\n            if dfs(i, j, 0):\n                return True\n    \n    return False", "solution_func": "def g(target=15):\n    \"\"\"\n    This solution uses depth-first search (DFS) to explore all possible paths in the matrix.\n    \"\"\"\n    matrix = [\n        [1, 2, 3, 4],\n        [5, 6, 7, 8],\n        [9, 10, 11, 12],\n        [13, 14, 15, 16]\n    ]\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Find if there are three numbers in the list that sum up to the target.\n    \"\"\"\n    nums.sort()\n    n = len(nums)\n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            curr_sum = nums[i] + nums[left] + nums[right]\n            if curr_sum == target:\n                return True\n            elif curr_sum < target:\n                left += 1\n            else:\n                right -= 1\n    \n    return False\n\ndef g(target=0):\n    \"\"\"\n    This solution uses two-pointer technique to find the triplet that sums up to the target.\n    \"\"\"\n    nums = [-1, 0, 1, 2, -1, -4]\n    return nums\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 173, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Find if there are three numbers in the list that sum up to the target.\n    \"\"\"\n    nums.sort()\n    n = len(nums)\n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            curr_sum = nums[i] + nums[left] + nums[right]\n            if curr_sum == target:\n                return True\n            elif curr_sum < target:\n                left += 1\n            else:\n                right -= 1\n    \n    return False", "solution_func": "def g(target=0):\n    \"\"\"\n    This solution uses two-pointer technique to find the triplet that sums up to the target.\n    \"\"\"\n    nums = [-1, 0, 1, 2, -1, -4]\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that sum up to the target\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target = 0):\n    nums = [2, 4, 6, 8, 10]\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 173, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that sum up to the target\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(target = 0):\n    nums = [2, 4, 6, 8, 10]\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(target = 0):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 173, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(target = 0):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there is a subarray in the list whose sum is equal to the target\"\"\"\n    prefix_sum = 0\n    seen = set()\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target:\n            return True\n        if prefix_sum - target in seen:\n            return True\n        seen.add(prefix_sum)\n    return False\ndef g(target = 0):\n    nums = [1, 2, 3, 4, 5]\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 173, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there is a subarray in the list whose sum is equal to the target\"\"\"\n    prefix_sum = 0\n    seen = set()\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target:\n            return True\n        if prefix_sum - target in seen:\n            return True\n        seen.add(prefix_sum)\n    return False", "solution_func": "def g(target = 0):\n    nums = [1, 2, 3, 4, 5]\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=13) -> bool:\n    \"\"\"Check if there exists two elements in the list whose sum is equal to the target\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 173, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=13) -> bool:\n    \"\"\"Check if there exists two elements in the list whose sum is equal to the target\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(li: list, target=0) -> bool:\n    \"\"\"Check if the sum of the list is equal to the target value.\"\"\"\n    return sum(li) == target\ndef g(li = [4, -2, 7, 5, 1, -8, 3], target = 0):\n    return target\nassert f(g())\n", "emb": null, "idx_generation": 174, "target_skills": null, "problem_func": "from typing import*\ndef f(li: list, target=0) -> bool:\n    \"\"\"Check if the sum of the list is equal to the target value.\"\"\"\n    return sum(li) == target", "solution_func": "def g(li = [4, -2, 7, 5, 1, -8, 3], target = 0):\n    return target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n=4) -> bool:\n    \"\"\"Check if the string is a palindrome of length n.\"\"\"\n    return len(s) == n and s == s[::-1]\ndef g(n = 4):\n    return 'race'\nassert f(g())\n", "emb": null, "idx_generation": 174, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=4) -> bool:\n    \"\"\"Check if the string is a palindrome of length n.\"\"\"\n    return len(s) == n and s == s[::-1]", "solution_func": "def g(n = 4):\n    return 'race'", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(li: list, target=0) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that sums up to the target value.\"\"\"\n    return any(li[i] + li[j] == target for i in range(len(li)) for j in range(i+1, len(li)))\ndef g(li = [2, -4, 6, 8, -10, 12], target = 0):\n    return li\nassert f(g())\n", "emb": null, "idx_generation": 174, "target_skills": null, "problem_func": "from typing import*\ndef f(li: list, target=0) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that sums up to the target value.\"\"\"\n    return any(li[i] + li[j] == target for i in range(len(li)) for j in range(i+1, len(li)))", "solution_func": "def g(li = [2, -4, 6, 8, -10, 12], target = 0):\n    return li", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(n: int, prime=True) -> bool:\n    \"\"\"Check if a number is prime or not\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return prime\n\ndef g(n: int, prime=True):\n    return n\nassert f(g())\n", "emb": null, "idx_generation": 174, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, prime=True) -> bool:\n    \"\"\"Check if a number is prime or not\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return prime", "solution_func": "def g(n: int, prime=True):\n    return n", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome\"\"\"\n    return s == s[::-1]\n\ndef g(s: str):\n    return s\nassert f(g())\n", "emb": null, "idx_generation": 174, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome\"\"\"\n    return s == s[::-1]", "solution_func": "def g(s: str):\n    return s", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: int, y: int, z: int) -> bool:\n    \"\"\"Check if the sum of two numbers is equal to the third number\"\"\"\n    return x + y == z or x + z == y or y + z == x\n\ndef g(x: int, y: int, z: int):\n    return x, y, z\nassert f(*g())\n", "emb": null, "idx_generation": 174, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, y: int, z: int) -> bool:\n    \"\"\"Check if the sum of two numbers is equal to the third number\"\"\"\n    return x + y == z or x + z == y or y + z == x", "solution_func": "def g(x: int, y: int, z: int):\n    return x, y, z", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=7) -> bool:\n    \"\"\"Check if the string has at least n number of vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count >= n\ndef g(n=7):\n    return 'aeiou' + 'a' * (n-5)\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 174, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=7) -> bool:\n    \"\"\"Check if the string has at least n number of vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count >= n", "solution_func": "def g(n=7):\n    return 'aeiou' + 'a' * (n-5)", "map_ix": [0, 1, 0, 1, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(nums=[1, 3, 5, 7, 9], target=10):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 174, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(nums=[1, 3, 5, 7, 9], target=10):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, m: int) -> bool:\n    \"\"\"Check if n is a multiple of m\"\"\"\n    return n % m == 0\ndef g(m=5):\n    return m * 2\nassert f(g())\n", "emb": null, "idx_generation": 174, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m: int) -> bool:\n    \"\"\"Check if n is a multiple of m\"\"\"\n    return n % m == 0", "solution_func": "def g(m=5):\n    return m * 2", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target value.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=20):\n    nums = [5, 10, 15, 20, 25]\n    return nums\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 174, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target value.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))", "solution_func": "def g(target=20):\n    nums = [5, 10, 15, 20, 25]\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target = 0):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n", "emb": null, "idx_generation": 175, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target = 0):\n    return [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substr='') -> bool:\n    \"\"\"Check if a substring is present in the given string.\"\"\"\n    return substr in s\ndef g(substr = ''):\n    return \"Hello, World!\"\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 175, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substr='') -> bool:\n    \"\"\"Check if a substring is present in the given string.\"\"\"\n    return substr in s", "solution_func": "def g(substr = ''):\n    return \"Hello, World!\"", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if there are three numbers in the list that add up to the target.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\ndef g(target = 0):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n", "emb": null, "idx_generation": 175, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if there are three numbers in the list that add up to the target.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False", "solution_func": "def g(target = 0):\n    return [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=9) -> bool:\n    \"\"\"Find two numbers in a list that add up to the target\"\"\"\n    return any(nums[i]+nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(nums=[2, 7, 11, 15], target=9):\n    return nums\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 175, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=9) -> bool:\n    \"\"\"Find two numbers in a list that add up to the target\"\"\"\n    return any(nums[i]+nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))", "solution_func": "def g(nums=[2, 7, 11, 15], target=9):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, sub=\"abc\") -> bool:\n    \"\"\"Check if a given string contains the substring\"\"\"\n    return sub in s\ndef g(s=\"defabcghi\", sub=\"abc\"):\n    return s\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 175, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, sub=\"abc\") -> bool:\n    \"\"\"Check if a given string contains the substring\"\"\"\n    return sub in s", "solution_func": "def g(s=\"defabcghi\", sub=\"abc\"):\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], num=3) -> bool:\n    \"\"\"Check if a list contains at least 'num' even numbers\"\"\"\n    return len([x for x in arr if x % 2 == 0]) >= num\ndef g(arr=[1, 2, 3, 4, 5, 6], num=3):\n    return arr\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 175, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], num=3) -> bool:\n    \"\"\"Check if a list contains at least 'num' even numbers\"\"\"\n    return len([x for x in arr if x % 2 == 0]) >= num", "solution_func": "def g(arr=[1, 2, 3, 4, 5, 6], num=3):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, threshold=0.5) -> bool:\n    \"\"\"Check if the sum of the squares of three numbers is greater than a threshold.\"\"\"\n    return math.sqrt(x**2 + y**2 + z**2) > threshold\n\ndef g(x: float, y: float, z: float, threshold=0.5):\n    return x, y, z\n\nassert f(*g())\n", "emb": null, "idx_generation": 175, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, threshold=0.5) -> bool:\n    \"\"\"Check if the sum of the squares of three numbers is greater than a threshold.\"\"\"\n    return math.sqrt(x**2 + y**2 + z**2) > threshold", "solution_func": "def g(x: float, y: float, z: float, threshold=0.5):\n    return x, y, z", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], k: int, target=100) -> bool:\n    \"\"\"Find if there exists a pair of numbers in a list that sum up to a target value.\"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(arr: List[int], target=100):\n    return arr, target\n\nassert f(*g())\n", "emb": null, "idx_generation": 175, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], k: int, target=100) -> bool:\n    \"\"\"Find if there exists a pair of numbers in a list that sum up to a target value.\"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(arr: List[int], target=100):\n    return arr, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n=2) -> bool:\n    \"\"\"Check if a string contains the same character repeated consecutively n times.\"\"\"\n    for i in range(len(s) - n + 1):\n        if all(s[i+j] == s[i] for j in range(1, n)):\n            return True\n    return False\n\ndef g(s: str, n=2):\n    return s, n\n\nassert f(*g())\n", "emb": null, "idx_generation": 175, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=2) -> bool:\n    \"\"\"Check if a string contains the same character repeated consecutively n times.\"\"\"\n    for i in range(len(s) - n + 1):\n        if all(s[i+j] == s[i] for j in range(1, n)):\n            return True\n    return False", "solution_func": "def g(s: str, n=2):\n    return s, n", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find a pair of numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target = 0):\n    return [i for i in range(target-1, -1, -1)]\nassert f(g())\n", "emb": null, "idx_generation": 175, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find a pair of numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target = 0):\n    return [i for i in range(target-1, -1, -1)]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, c1='a', c2='b', count1=5, count2=3) -> bool:\n    \"\"\"\n    Find a string that has count1 occurrences of c1 and count2 occurrences of c2 and starts and ends with\n    the same 3 characters\n    \"\"\"\n    return s.count(c1) == count1 and s.count(c2) == count2 and (s[:3] == s[-3:])\ndef g(c1='a', c2='b', count1=5, count2=3):\n    if c1 == c2:\n        ans = (c1 + \"?\") * count1\n    elif c1.count(c2):\n        ans = (c1 + \"?\") * count1\n        ans += (c2 + \"?\") * (count2 - ans.count(c2))\n    else:\n        ans = (c2 + \"?\") * count2\n        ans += (c1 + \"?\") * (count1 - ans.count(c1))\n    return \"???\" + ans + \"???\"\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 176, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, c1='a', c2='b', count1=5, count2=3) -> bool:\n    \"\"\"\n    Find a string that has count1 occurrences of c1 and count2 occurrences of c2 and starts and ends with\n    the same 3 characters\n    \"\"\"\n    return s.count(c1) == count1 and s.count(c2) == count2 and (s[:3] == s[-3:])", "solution_func": "def g(c1='a', c2='b', count1=5, count2=3):\n    if c1 == c2:\n        ans = (c1 + \"?\") * count1\n    elif c1.count(c2):\n        ans = (c1 + \"?\") * count1\n        ans += (c2 + \"?\") * (count2 - ans.count(c2))\n    else:\n        ans = (c2 + \"?\") * count2\n        ans += (c1 + \"?\") * (count1 - ans.count(c1))\n    return \"???\" + ans + \"???\"", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=2, b=1125899906842624) -> bool:\n    \"\"\"Solve a power problem\"\"\"\n    return math.pow(a, n) == b\ndef g(a=2, b=1125899906842624):\n    if a == 1:\n        return b\n    for n in [int(math.log(b, a)), int(math.log(b, a)) + 1, int(math.log(b, a)) - 1]:\n        if math.pow(a, n) == b:\n            return n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0], "idx_generation": 176, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, a=2, b=1125899906842624) -> bool:\n    \"\"\"Solve a power problem\"\"\"\n    return math.pow(a, n) == b", "solution_func": "def g(a=2, b=1125899906842624):\n    if a == 1:\n        return b\n    for n in [int(math.log(b, a)), int(math.log(b, a)) + 1, int(math.log(b, a)) - 1]:\n        if math.pow(a, n) == b:\n            return n", "map_ix": [0, 0, 0, 1, 0, 0, 0, 1, 0, 1]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: List[int], t=100, n=5) -> bool:\n    \"\"\"Find how many values are greater than the target\"\"\"\n    assert all([v > 0 for v in x])\n    above = 0\n    for v in x:\n        if v > t:\n            above += 1\n            if above == n:\n                return True\n    return above == n\ndef g(t=100, n=5):\n    return [1] * (n-1) + [t+1]\nassert f(g())\n", "emb": null, "idx_generation": 176, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], t=100, n=5) -> bool:\n    \"\"\"Find how many values are greater than the target\"\"\"\n    assert all([v > 0 for v in x])\n    above = 0\n    for v in x:\n        if v > t:\n            above += 1\n            if above == n:\n                return True\n    return above == n", "solution_func": "def g(t=100, n=5):\n    return [1] * (n-1) + [t+1]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if any two numbers in the list add up to the target.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(arr: List[int], target: int):\n    return [arr[i] for i in range(len(arr)-1)] + [target - arr[-1]]\nassert f(g([2, 4, 6, 8], 10))\n", "emb": null, "idx_generation": 176, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if any two numbers in the list add up to the target.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g(arr: List[int], target: int):\n    return [arr[i] for i in range(len(arr)-1)] + [target - arr[-1]]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, c: str) -> bool:\n    \"\"\"Check if the given character is the first character of the string.\"\"\"\n    return s[0] == c\ndef g(s: str, c: str):\n    return c + s\nassert f(g(\"hello\", \"h\"))\n", "emb": null, "idx_generation": 176, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, c: str) -> bool:\n    \"\"\"Check if the given character is the first character of the string.\"\"\"\n    return s[0] == c", "solution_func": "def g(s: str, c: str):\n    return c + s", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are any two numbers in the list whose product is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\ndef g(nums: List[int], target: int):\n    return [nums[i] for i in range(len(nums)-1)] + [target // nums[-1]]\nassert f(g([2, 3, 4, 5], 10))\n", "emb": null, "idx_generation": 176, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are any two numbers in the list whose product is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums: List[int], target: int):\n    return [nums[i] for i in range(len(nums)-1)] + [target // nums[-1]]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, lst=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29], upper_bound=1000) -> bool:\n    \"\"\"Check if a given number is a prime number.\"\"\"\n    return n in lst and n <= upper_bound\ndef g(lst=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29], upper_bound=1000):\n    primes = [True] * (upper_bound + 1)\n    primes[0] = primes[1] = False\n    p = 2\n    while p * p <= upper_bound:\n        if primes[p] == True:\n            for i in range(p * p, upper_bound + 1, p):\n                primes[i] = False\n        p += 1\n    return primes[n]\nassert f(g())\n", "emb": null, "idx_generation": 176, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29], upper_bound=1000) -> bool:\n    \"\"\"Check if a given number is a prime number.\"\"\"\n    return n in lst and n <= upper_bound", "solution_func": "def g(lst=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29], upper_bound=1000):\n    primes = [True] * (upper_bound + 1)\n    primes[0] = primes[1] = False\n    p = 2\n    while p * p <= upper_bound:\n        if primes[p] == True:\n            for i in range(p * p, upper_bound + 1, p):\n                primes[i] = False\n        p += 1\n    return primes[n]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=1234567890) -> bool:\n    \"\"\"Check if the square root of a given number is a perfect square.\"\"\"\n    return math.isqrt(n) ** 2 == n\ndef g(x=1234567890):\n    return x ** 2\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 176, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, x=1234567890) -> bool:\n    \"\"\"Check if the square root of a given number is a perfect square.\"\"\"\n    return math.isqrt(n) ** 2 == n", "solution_func": "def g(x=1234567890):\n    return x ** 2", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, lst=[1, 1, 2, 3, 5, 8, 13, 21, 34, 55], upper_bound=100) -> bool:\n    \"\"\"Check if a given number is a Fibonacci number within a certain range.\"\"\"\n    return n in lst and n <= upper_bound\ndef g(lst=[1, 1, 2, 3, 5, 8, 13, 21, 34, 55], upper_bound=100):\n    fib = [1, 1]\n    while fib[-1] <= upper_bound:\n        fib.append(fib[-1] + fib[-2])\n    return n in fib\nassert f(g())\n", "emb": null, "idx_generation": 176, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst=[1, 1, 2, 3, 5, 8, 13, 21, 34, 55], upper_bound=100) -> bool:\n    \"\"\"Check if a given number is a Fibonacci number within a certain range.\"\"\"\n    return n in lst and n <= upper_bound", "solution_func": "def g(lst=[1, 1, 2, 3, 5, 8, 13, 21, 34, 55], upper_bound=100):\n    fib = [1, 1]\n    while fib[-1] <= upper_bound:\n        fib.append(fib[-1] + fib[-2])\n    return n in fib", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if the target number is present in the list\"\"\"\n    return target in nums\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 176, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if the target number is present in the list\"\"\"\n    return target in nums", "solution_func": "def g(nums=[1, 2, 3, 4, 5]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target = 'hello', case_sensitive = False) -> bool:\n    \"\"\"Check if a target string is present in the given string.\"\"\"\n    if case_sensitive:\n        return target in s\n    else:\n        return target.lower() in s.lower()\ndef g(target = 'hello', case_sensitive = False):\n    return target\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 177, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target = 'hello', case_sensitive = False) -> bool:\n    \"\"\"Check if a target string is present in the given string.\"\"\"\n    if case_sensitive:\n        return target in s\n    else:\n        return target.lower() in s.lower()", "solution_func": "def g(target = 'hello', case_sensitive = False):\n    return target", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, nums: list, target_sum: int) -> bool:\n    \"\"\"Check if there exists a pair of integers in the list whose sum is equal to the target sum.\"\"\"\n    return any((n - i in nums for i in nums)) and sum(nums) >= target_sum\ndef g(nums = [1, 2, 3, 4, 5], target_sum = 10):\n    return nums, target_sum\nassert f(g())\n", "emb": null, "idx_generation": 177, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums: list, target_sum: int) -> bool:\n    \"\"\"Check if there exists a pair of integers in the list whose sum is equal to the target sum.\"\"\"\n    return any((n - i in nums for i in nums)) and sum(nums) >= target_sum", "solution_func": "def g(nums = [1, 2, 3, 4, 5], target_sum = 10):\n    return nums, target_sum", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_row_sum = 10, target_col_sum = 10) -> bool:\n    \"\"\"Check if all row sums and column sums in a matrix are equal to the target sums.\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    return all((sum == target_row_sum for sum in row_sums)) and all((sum == target_col_sum for sum in col_sums))\ndef g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target_row_sum = 10, target_col_sum = 10):\n    return matrix, target_row_sum, target_col_sum\nassert f(g())\n", "emb": null, "idx_generation": 177, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_row_sum = 10, target_col_sum = 10) -> bool:\n    \"\"\"Check if all row sums and column sums in a matrix are equal to the target sums.\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    return all((sum == target_row_sum for sum in row_sums)) and all((sum == target_col_sum for sum in col_sums))", "solution_func": "def g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target_row_sum = 10, target_col_sum = 10):\n    return matrix, target_row_sum, target_col_sum", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=3, b=4) -> bool:\n    \"\"\"Determine if n is a perfect square and if it is divisible by a and b.\"\"\"\n    return n ** 0.5 % 1 == 0 and n % a == 0 and n % b == 0\ndef g(a = 3, b = 4):\n    n = 1\n    while True:\n        if n ** 0.5 % 1 == 0 and n % a == 0 and n % b == 0:\n            return n\n        n += 1\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 177, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=3, b=4) -> bool:\n    \"\"\"Determine if n is a perfect square and if it is divisible by a and b.\"\"\"\n    return n ** 0.5 % 1 == 0 and n % a == 0 and n % b == 0", "solution_func": "def g(a = 3, b = 4):\n    n = 1\n    while True:\n        if n ** 0.5 % 1 == 0 and n % a == 0 and n % b == 0:\n            return n\n        n += 1", "map_ix": [1, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(li: List[int], target: int) -> bool:\n    \"\"\"Check if the target is present in the list and if the list is in ascending order.\"\"\"\n    return target in li and li == sorted(li)\ndef g():\n    li = random.sample(range(100), 10)\n    target = random.choice(li)\n    return li, target\nassert f(*g())\n", "emb": null, "idx_generation": 177, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(li: List[int], target: int) -> bool:\n    \"\"\"Check if the target is present in the list and if the list is in ascending order.\"\"\"\n    return target in li and li == sorted(li)", "solution_func": "def g():\n    li = random.sample(range(100), 10)\n    target = random.choice(li)\n    return li, target", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, m: int) -> bool:\n    \"\"\"Check if n and m are relatively prime (have no common factors other than 1).\"\"\"\n    def gcd(a, b):\n        while b != 0:\n            a, b = b, a % b\n        return a\n    return gcd(n, m) == 1\ndef g():\n    n = 2\n    m = 3\n    while True:\n        if f(n, m):\n            return n, m\n        n += 1\n        m += 1\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 177, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m: int) -> bool:\n    \"\"\"Check if n and m are relatively prime (have no common factors other than 1).\"\"\"\n    def gcd(a, b):\n        while b != 0:\n            a, b = b, a % b\n        return a\n    return gcd(n, m) == 1", "solution_func": "def g():\n    n = 2\n    m = 3\n    while True:\n        if f(n, m):\n            return n, m\n        n += 1\n        m += 1", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, char1='a', char2='z') -> bool:\n    \"\"\"Check if a string contains at least one occurrence of char1 and char2\"\"\"\n    return char1 in s and char2 in s\ndef g(char1='a', char2='z'):\n    return char1 + char2\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 177, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, char1='a', char2='z') -> bool:\n    \"\"\"Check if a string contains at least one occurrence of char1 and char2\"\"\"\n    return char1 in s and char2 in s", "solution_func": "def g(char1='a', char2='z'):\n    return char1 + char2", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, m=100, k=5) -> bool:\n    \"\"\"Check if n is divisible by m and the result is greater than k\"\"\"\n    return n % m == 0 and n // m > k\ndef g(m=100, k=5):\n    return m * (k + 1)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 177, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m=100, k=5) -> bool:\n    \"\"\"Check if n is divisible by m and the result is greater than k\"\"\"\n    return n % m == 0 and n // m > k", "solution_func": "def g(m=100, k=5):\n    return m * (k + 1)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: List[int], y: List[int], n=5) -> bool:\n    \"\"\"Check if there are at least n common elements between x and y\"\"\"\n    return len(set(x) & set(y)) >= n\ndef g(n=5):\n    x = list(range(n))\n    y = list(range(n, 2*n))\n    return x + y\nassert f(g())\n", "emb": null, "idx_generation": 177, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], y: List[int], n=5) -> bool:\n    \"\"\"Check if there are at least n common elements between x and y\"\"\"\n    return len(set(x) & set(y)) >= n", "solution_func": "def g(n=5):\n    x = list(range(n))\n    y = list(range(n, 2*n))\n    return x + y", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], t=100, n=5) -> bool:\n    \"\"\"Check if the sum of any n numbers in the list is equal to the target\"\"\"\n    assert all([v > 0 for v in x])\n    \n    def find_sum(arr, target, n):\n        if n == 0:\n            return target == 0\n        if target == 0:\n            return True\n        if len(arr) == 0:\n            return False\n        return find_sum(arr[1:], target - arr[0], n-1) or find_sum(arr[1:], target, n)\n    \n    return find_sum(x, t, n)\n\ndef g(n=5, t=100):\n    return list(range(1, n+1))\n\nassert f(g())\n", "emb": null, "idx_generation": 177, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], t=100, n=5) -> bool:\n    \"\"\"Check if the sum of any n numbers in the list is equal to the target\"\"\"\n    assert all([v > 0 for v in x])\n    \n    def find_sum(arr, target, n):\n        if n == 0:\n            return target == 0\n        if target == 0:\n            return True\n        if len(arr) == 0:\n            return False\n        return find_sum(arr[1:], target - arr[0], n-1) or find_sum(arr[1:], target, n)\n    \n    return find_sum(x, t, n)", "solution_func": "def g(n=5, t=100):\n    return list(range(1, n+1))", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=5, b=10) -> bool:\n    \"\"\"Check if a number is a multiple of another number\"\"\"\n    return n % a == 0 and n % b == 0\ndef g(a=5, b=10):\n    return a * b\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 178, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=5, b=10) -> bool:\n    \"\"\"Check if a number is a multiple of another number\"\"\"\n    return n % a == 0 and n % b == 0", "solution_func": "def g(a=5, b=10):\n    return a * b", "map_ix": [1, 0, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(li: List[int], target=100) -> bool:\n    \"\"\"Find a list of numbers that sums up to a specific target\"\"\"\n    return sum(li) == target\n\ndef g(target=100):\n    li = []\n    while sum(li) < target:\n        li.append(random.randint(1, 10))\n    return li\nassert f(g())\n", "emb": null, "idx_generation": 178, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(li: List[int], target=100) -> bool:\n    \"\"\"Find a list of numbers that sums up to a specific target\"\"\"\n    return sum(li) == target", "solution_func": "def g(target=100):\n    li = []\n    while sum(li) < target:\n        li.append(random.randint(1, 10))\n    return li", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=20) -> bool:\n    \"\"\"Check if a number is greater than a specific value\"\"\"\n    return n > a\ndef g(a=20):\n    return a + 1\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 178, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=20) -> bool:\n    \"\"\"Check if a number is greater than a specific value\"\"\"\n    return n > a", "solution_func": "def g(a=20):\n    return a + 1", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=13) -> bool:\n    \"\"\"\n    Given a matrix of integers, find if there exists a submatrix such that the sum of all its elements is equal to the target value.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            for k in range(i, rows):\n                for l in range(j, cols):\n                    submatrix_sum = sum(matrix[x][y] for x in range(i, k+1) for y in range(j, l+1))\n                    if submatrix_sum == target:\n                        return True\n    return False\n\ndef g(matrix: List[List[int]], target=13):\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            for k in range(i, rows):\n                for l in range(j, cols):\n                    submatrix_sum = sum(matrix[x][y] for x in range(i, k+1) for y in range(j, l+1))\n                    if submatrix_sum == target:\n                        return True\n    return False\n\nassert f(g())\n", "emb": null, "idx_generation": 178, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=13) -> bool:\n    \"\"\"\n    Given a matrix of integers, find if there exists a submatrix such that the sum of all its elements is equal to the target value.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            for k in range(i, rows):\n                for l in range(j, cols):\n                    submatrix_sum = sum(matrix[x][y] for x in range(i, k+1) for y in range(j, l+1))\n                    if submatrix_sum == target:\n                        return True\n    return False", "solution_func": "def g(matrix: List[List[int]], target=13):\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            for k in range(i, rows):\n                for l in range(j, cols):\n                    submatrix_sum = sum(matrix[x][y] for x in range(i, k+1) for y in range(j, l+1))\n                    if submatrix_sum == target:\n                        return True\n    return False", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a pair of numbers whose sum is equal to the target value.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums: List[int], target=5):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\nassert f(g())\n", "emb": null, "idx_generation": 178, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a pair of numbers whose sum is equal to the target value.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums: List[int], target=5):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(word: str, substring='test') -> bool:\n    \"\"\"\n    Given a word and a substring, find if the substring is present in the word.\n    \"\"\"\n    return substring in word\n\ndef g(word: str, substring='test'):\n    return substring in word\n\nassert f(g())\n", "emb": null, "idx_generation": 178, "target_skills": null, "problem_func": "from typing import*\ndef f(word: str, substring='test') -> bool:\n    \"\"\"\n    Given a word and a substring, find if the substring is present in the word.\n    \"\"\"\n    return substring in word", "solution_func": "def g(word: str, substring='test'):\n    return substring in word", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Find if there exists a subarray of length k in nums such that the sum of its elements is divisible by k\"\"\"\n    return any(sum(nums[i:i+k]) % k == 0 for i in range(len(nums) - k + 1))\ndef g(k = 3):\n    return list(range(1, k+1))\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 178, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Find if there exists a subarray of length k in nums such that the sum of its elements is divisible by k\"\"\"\n    return any(sum(nums[i:i+k]) % k == 0 for i in range(len(nums) - k + 1))", "solution_func": "def g(k = 3):\n    return list(range(1, k+1))", "map_ix": [1, 1, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, t=\"abc\") -> bool:\n    \"\"\"Check if t is a subsequence of s\"\"\"\n    i = 0\n    for char in s:\n        if i < len(t) and char == t[i]:\n            i += 1\n    return i == len(t)\ndef g(t = \"abc\"):\n    return t\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 178, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, t=\"abc\") -> bool:\n    \"\"\"Check if t is a subsequence of s\"\"\"\n    i = 0\n    for char in s:\n        if i < len(t) and char == t[i]:\n            i += 1\n    return i == len(t)", "solution_func": "def g(t = \"abc\"):\n    return t", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there exists two distinct indices i and j in nums such that nums[i] == nums[j]\"\"\"\n    return len(nums) != len(set(nums))\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n", "emb": null, "idx_generation": 178, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there exists two distinct indices i and j in nums such that nums[i] == nums[j]\"\"\"\n    return len(nums) != len(set(nums))", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: str, y: str, z: str, s=\"apple\", t=\"banana\", u=\"cherry\") -> bool:\n    \"\"\"Check if the given strings form a valid sentence\"\"\"\n    sentence = s + \" \" + t + \" \" + u\n    return sentence == x + \" \" + y + \" \" + z\ndef g(s = \"apple\", t = \"banana\", u = \"cherry\"):\n    return s, t, u\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 178, "target_skills": null, "problem_func": "from typing import*\ndef f(x: str, y: str, z: str, s=\"apple\", t=\"banana\", u=\"cherry\") -> bool:\n    \"\"\"Check if the given strings form a valid sentence\"\"\"\n    sentence = s + \" \" + t + \" \" + u\n    return sentence == x + \" \" + y + \" \" + z", "solution_func": "def g(s = \"apple\", t = \"banana\", u = \"cherry\"):\n    return s, t, u", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, ops=['x--', 'x++', '++x', '--x', 'x++', '--x', 'x--'], target=61813) -> bool:\n    \"\"\"\n    Given a sequence of operations \"++x\", \"x++\", \"--x\", \"x--\", and a target value, find initial value so that the\n    final value is the target value.\n\n    Sample Input:\n    ops = [\"x++\", \"--x\", \"--x\"]\n    target = 12\n\n    Sample Output:\n    13\n    \"\"\"\n    for op in ops:\n        if op in ['++x', 'x++']:\n            n += 1\n        else:\n            assert op in ['--x', 'x--']\n            n -= 1\n    return n == target\ndef g(ops = ['x--', 'x++', '++x', '--x', 'x++', '--x', 'x--'], target = 61813):\n    return target - ops.count(\"++x\") - ops.count(\"x++\") + ops.count(\"--x\") + ops.count(\"x--\")\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 179, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, ops=['x--', 'x++', '++x', '--x', 'x++', '--x', 'x--'], target=61813) -> bool:\n    \"\"\"\n    Given a sequence of operations \"++x\", \"x++\", \"--x\", \"x--\", and a target value, find initial value so that the\n    final value is the target value.\n\n    Sample Input:\n    ops = [\"x++\", \"--x\", \"--x\"]\n    target = 12\n\n    Sample Output:\n    13\n    \"\"\"\n    for op in ops:\n        if op in ['++x', 'x++']:\n            n += 1\n        else:\n            assert op in ['--x', 'x--']\n            n -= 1\n    return n == target", "solution_func": "def g(ops = ['x--', 'x++', '++x', '--x', 'x++', '--x', 'x--'], target = 61813):\n    return target - ops.count(\"++x\") - ops.count(\"x++\") + ops.count(\"--x\") + ops.count(\"x--\")", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, find three integers in the list that sum up to the target value.\n    Return True if such a triplet exists, False otherwise.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    for perm in permutations(nums, 3):\n        if sum(perm) == target:\n            return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target\n\nassert f(*g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 179, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, find three integers in the list that sum up to the target value.\n    Return True if such a triplet exists, False otherwise.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    for perm in permutations(nums, 3):\n        if sum(perm) == target:\n            return True\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, find the two numbers in the list that sum up to the target value.\n    Return True if such a pair exists, False otherwise.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 7\n\n    Sample Output:\n    True\n    \"\"\"\n    complement_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in complement_set:\n            return True\n        complement_set.add(num)\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=7):\n    return nums, target\n\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 179, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, find the two numbers in the list that sum up to the target value.\n    Return True if such a pair exists, False otherwise.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 7\n\n    Sample Output:\n    True\n    \"\"\"\n    complement_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in complement_set:\n            return True\n        complement_set.add(num)\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=7):\n    return nums, target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, target=0) -> bool:\n    \"\"\"\n    Find if the sum of each row in the matrix equals the given target\n    \"\"\"\n    row_sums = np.sum(matrix, axis=1)\n    return all(row_sums == target)\n\ndef g(target=0):\n    matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    return matrix * target\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 179, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, target=0) -> bool:\n    \"\"\"\n    Find if the sum of each row in the matrix equals the given target\n    \"\"\"\n    row_sums = np.sum(matrix, axis=1)\n    return all(row_sums == target)", "solution_func": "def g(target=0):\n    matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    return matrix * target", "map_ix": [1, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(words: List[str], n=5) -> bool:\n    \"\"\"\n    Find if there are at least n words in the list that contain the letter 'a'\n    \"\"\"\n    count = sum(1 for word in words if 'a' in word)\n    return count >= n\n\ndef g(n=5):\n    words = ['apple', 'banana', 'cherry', 'date', 'elderberry']\n    return words * n\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 179, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], n=5) -> bool:\n    \"\"\"\n    Find if there are at least n words in the list that contain the letter 'a'\n    \"\"\"\n    count = sum(1 for word in words if 'a' in word)\n    return count >= n", "solution_func": "def g(n=5):\n    words = ['apple', 'banana', 'cherry', 'date', 'elderberry']\n    return words * n", "map_ix": [1, 1, 0, 1, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport datetime\n\ndef f(date: datetime.date) -> bool:\n    \"\"\"\n    Find if the given date is a leap year\n    \"\"\"\n    return date.year % 4 == 0 and (date.year % 100 != 0 or date.year % 400 == 0)\n\ndef g():\n    return datetime.date(2020, 2, 29)\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 179, "target_skills": null, "problem_func": "from typing import*\nimport datetime\n\ndef f(date: datetime.date) -> bool:\n    \"\"\"\n    Find if the given date is a leap year\n    \"\"\"\n    return date.year % 4 == 0 and (date.year % 100 != 0 or date.year % 400 == 0)", "solution_func": "def g():\n    return datetime.date(2020, 2, 29)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(n: int, x: int) -> bool:\n    \"\"\"Check if n is a power of x.\"\"\"\n    return math.log(n, x).is_integer()\n    \ndef g(x: int) -> int:\n    \"\"\"Find the smallest power of x greater than or equal to 1000.\"\"\"\n    n = 1000\n    while True:\n        if f(n, x):\n            return n\n        n += 1\n\nassert f(g()) == True", "emb": null, "idx_generation": 179, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, x: int) -> bool:\n    \"\"\"Check if n is a power of x.\"\"\"\n    return math.log(n, x).is_integer()", "solution_func": "def g(x: int) -> int:\n    \"\"\"Find the smallest power of x greater than or equal to 1000.\"\"\"\n    n = 1000\n    while True:\n        if f(n, x):\n            return n\n        n += 1", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if a list contains a pair of numbers whose sum is divisible by 10.\"\"\"\n    return any((nums[i] + nums[j]) % 10 == 0 for i in range(len(nums)) for j in range(i + 1, len(nums)))\n\ndef g(size: int) -> List[int]:\n    \"\"\"Generate a list of random integers of the given size.\"\"\"\n    return [random.randint(0, 100) for _ in range(size)]\n\nassert f(g()) == True", "emb": null, "idx_generation": 179, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if a list contains a pair of numbers whose sum is divisible by 10.\"\"\"\n    return any((nums[i] + nums[j]) % 10 == 0 for i in range(len(nums)) for j in range(i + 1, len(nums)))", "solution_func": "def g(size: int) -> List[int]:\n    \"\"\"Generate a list of random integers of the given size.\"\"\"\n    return [random.randint(0, 100) for _ in range(size)]", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g(length: int, chars: str = 'abcdefghijklmnopqrstuvwxyz') -> str:\n    \"\"\"Generate a random palindrome string of the given length.\"\"\"\n    half_length = length // 2\n    if length % 2 == 0:\n        return ''.join([random.choice(chars) for _ in range(half_length)]) + ''.join([random.choice(chars) for _ in range(half_length - 1, -1, -1)])\n    else:\n        return ''.join([random.choice(chars) for _ in range(half_length)]) + random.choice(chars) + ''.join([random.choice(chars) for _ in range(half_length - 1, -1, -1)])\n\nassert f(g()) == True", "emb": null, "idx_generation": 179, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return s == s[::-1]", "solution_func": "def g(length: int, chars: str = 'abcdefghijklmnopqrstuvwxyz') -> str:\n    \"\"\"Generate a random palindrome string of the given length.\"\"\"\n    half_length = length // 2\n    if length % 2 == 0:\n        return ''.join([random.choice(chars) for _ in range(half_length)]) + ''.join([random.choice(chars) for _ in range(half_length - 1, -1, -1)])\n    else:\n        return ''.join([random.choice(chars) for _ in range(half_length)]) + random.choice(chars) + ''.join([random.choice(chars) for _ in range(half_length - 1, -1, -1)])", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(arr: List[int], target=24) -> bool:\n    \"\"\"\n    Given a list of 4 integers, determine if it is possible to use all 4 integers with the operators +, -, *, /\n    to obtain the target number.\n    \"\"\"\n    operators = ['+', '-', '*', '/']\n    for perm in permutations(arr):\n        for op1 in operators:\n            for op2 in operators:\n                for op3 in operators:\n                    expr = f\"(({perm[0]} {op1} {perm[1]}) {op2} {perm[2]}) {op3} {perm[3]}\"\n                    try:\n                        result = eval(expr)\n                        if result == target:\n                            return True\n                    except ZeroDivisionError:\n                        pass\n    return False\n\ndef g(arr = [1, 2, 3, 4], target = 24):\n    return arr\n\nassert f(g())\n", "emb": null, "idx_generation": 179, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(arr: List[int], target=24) -> bool:\n    \"\"\"\n    Given a list of 4 integers, determine if it is possible to use all 4 integers with the operators +, -, *, /\n    to obtain the target number.\n    \"\"\"\n    operators = ['+', '-', '*', '/']\n    for perm in permutations(arr):\n        for op1 in operators:\n            for op2 in operators:\n                for op3 in operators:\n                    expr = f\"(({perm[0]} {op1} {perm[1]}) {op2} {perm[2]}) {op3} {perm[3]}\"\n                    try:\n                        result = eval(expr)\n                        if result == target:\n                            return True\n                    except ZeroDivisionError:\n                        pass\n    return False", "solution_func": "def g(arr = [1, 2, 3, 4], target = 24):\n    return arr", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], n=10, target=42) -> bool:\n    \"\"\"Find a subset of n elements from arr that sum up to the target value.\"\"\"\n    assert len(arr) >= n\n    return sum(sorted(arr)[:n]) == target\ndef g(n=10, target=42):\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]\n    return arr\nassert f(g())\n", "emb": null, "idx_generation": 180, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], n=10, target=42) -> bool:\n    \"\"\"Find a subset of n elements from arr that sum up to the target value.\"\"\"\n    assert len(arr) >= n\n    return sum(sorted(arr)[:n]) == target", "solution_func": "def g(n=10, target=42):\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]\n    return arr", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], m=3, n=3, target_sum=15) -> bool:\n    \"\"\"Find a row or column in the matrix that sums up to the target_sum.\"\"\"\n    assert len(matrix) == m and all(len(row) == n for row in matrix)\n    for row in matrix:\n        if sum(row) == target_sum:\n            return True\n    for i in range(n):\n        if sum(matrix[j][i] for j in range(m)) == target_sum:\n            return True\n    return False\ndef g(m=3, n=3, target_sum=15):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 180, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], m=3, n=3, target_sum=15) -> bool:\n    \"\"\"Find a row or column in the matrix that sums up to the target_sum.\"\"\"\n    assert len(matrix) == m and all(len(row) == n for row in matrix)\n    for row in matrix:\n        if sum(row) == target_sum:\n            return True\n    for i in range(n):\n        if sum(matrix[j][i] for j in range(m)) == target_sum:\n            return True\n    return False", "solution_func": "def g(m=3, n=3, target_sum=15):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(arr: List[int], n=4, target=24) -> bool:\n    \"\"\"Find a combination of n elements from arr that can be used with operators +, -, *, and / to obtain the target value.\"\"\"\n    assert len(arr) >= n\n    from itertools import permutations, product\n    for p in permutations(arr, n):\n        for ops in product(['+', '-', '*', '/'], repeat=n-1):\n            equation = ''.join([str(p[i]) + ops[i] for i in range(n-1)]) + str(p[n-1])\n            try:\n                result = eval(equation)\n                if result == target:\n                    return True\n            except ZeroDivisionError:\n                pass\n    return False\ndef g(n=4, target=24):\n    return [1, 2, 3, 4, 5, 6]\nassert f(g())\n", "emb": null, "idx_generation": 180, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(arr: List[int], n=4, target=24) -> bool:\n    \"\"\"Find a combination of n elements from arr that can be used with operators +, -, *, and / to obtain the target value.\"\"\"\n    assert len(arr) >= n\n    from itertools import permutations, product\n    for p in permutations(arr, n):\n        for ops in product(['+', '-', '*', '/'], repeat=n-1):\n            equation = ''.join([str(p[i]) + ops[i] for i in range(n-1)]) + str(p[n-1])\n            try:\n                result = eval(equation)\n                if result == target:\n                    return True\n            except ZeroDivisionError:\n                pass\n    return False", "solution_func": "def g(n=4, target=24):\n    return [1, 2, 3, 4, 5, 6]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, target=5) -> bool:\n    \"\"\"\n    Check if a string contains a certain number of vowels.\n\n    Sample Input:\n    s = \"Hello, World!\"\n\n    Sample Output:\n    True\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count == target\ndef g(target=5):\n    return \"Hello, World!\"\nassert f(g())\n", "emb": null, "idx_generation": 180, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target=5) -> bool:\n    \"\"\"\n    Check if a string contains a certain number of vowels.\n\n    Sample Input:\n    s = \"Hello, World!\"\n\n    Sample Output:\n    True\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count == target", "solution_func": "def g(target=5):\n    return \"Hello, World!\"", "map_ix": null}, {"fitness": -Infinity, "program_str": "import math\nfrom typing import*\nfrom math import sqrt\ndef f(x: int, y: int, target=10) -> bool:\n    \"\"\"\n    Check if the sum of the square root of two numbers is equal to a target value.\n\n    Sample Input:\n    x = 4\n    y = 6\n\n    Sample Output:\n    True\n    \"\"\"\n    sum_sqrt = sqrt(x) + sqrt(y)\n    return abs(sum_sqrt - target) < 0.0001\ndef g(x=4, y=6, target=10):\n    return target - sqrt(x) - sqrt(y)\nassert f(g())\n", "emb": null, "idx_generation": 180, "target_skills": null, "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\ndef f(x: int, y: int, target=10) -> bool:\n    \"\"\"\n    Check if the sum of the square root of two numbers is equal to a target value.\n\n    Sample Input:\n    x = 4\n    y = 6\n\n    Sample Output:\n    True\n    \"\"\"\n    sum_sqrt = sqrt(x) + sqrt(y)\n    return abs(sum_sqrt - target) < 0.0001", "solution_func": "def g(x=4, y=6, target=10):\n    return target - sqrt(x) - sqrt(y)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in a list whose sum is equal to a target value.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    visited = set()\n    for num in nums:\n        if target - num in visited:\n            return True\n        visited.add(num)\n    return False\ndef g(target=15):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n", "emb": null, "idx_generation": 180, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in a list whose sum is equal to a target value.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    visited = set()\n    for num in nums:\n        if target - num in visited:\n            return True\n        visited.add(num)\n    return False", "solution_func": "def g(target=15):\n    return [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, determine if there exist two elements in the list whose sum is equal to the target.\n    Return True if such elements exist, False otherwise.\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5], target=9):\n    return arr, target\n\nassert f(*g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0], "idx_generation": 180, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, determine if there exist two elements in the list whose sum is equal to the target.\n    Return True if such elements exist, False otherwise.\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(arr=[1, 2, 3, 4, 5], target=9):\n    return arr, target", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, k: int) -> bool:\n    \"\"\"\n    Determine if n is a power of k.\n    Return True if n is a power of k, False otherwise.\n    \"\"\"\n    if n <= 0 or k <= 0:\n        return False\n    while n % k == 0:\n        n //= k\n    return n == 1\n\ndef g(n=16, k=2):\n    return n, k\n\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 180, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, k: int) -> bool:\n    \"\"\"\n    Determine if n is a power of k.\n    Return True if n is a power of k, False otherwise.\n    \"\"\"\n    if n <= 0 or k <= 0:\n        return False\n    while n % k == 0:\n        n //= k\n    return n == 1", "solution_func": "def g(n=16, k=2):\n    return n, k", "map_ix": [0, 0, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a sorted list of integers, determine if there exist two elements in the list whose sum is equal to the target.\n    Return True if such elements exist, False otherwise.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        curr_sum = arr[left] + arr[right]\n        if curr_sum == target:\n            return True\n        elif curr_sum < target:\n            left += 1\n        else:\n            right -= 1\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5], target=9):\n    return arr, target\n\nassert f(*g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 180, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a sorted list of integers, determine if there exist two elements in the list whose sum is equal to the target.\n    Return True if such elements exist, False otherwise.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        curr_sum = arr[left] + arr[right]\n        if curr_sum == target:\n            return True\n        elif curr_sum < target:\n            left += 1\n        else:\n            right -= 1\n    return False", "solution_func": "def g(arr=[1, 2, 3, 4, 5], target=9):\n    return arr, target", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(nums: list, target=100) -> bool:\n    \"\"\"\n    Determine if there exists a subset of nums that sums up to the target value.\n    \"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j >= nums[i - 1]:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target]\n\ndef g(nums: list, target=100):\n    \"\"\"\n    Generate a list of random numbers and the target value.\n    \"\"\"\n    nums = [random.randint(1, 50) for _ in range(10)]\n    return nums, target\n\nassert f(*g())\n", "emb": null, "idx_generation": 180, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(nums: list, target=100) -> bool:\n    \"\"\"\n    Determine if there exists a subset of nums that sums up to the target value.\n    \"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j >= nums[i - 1]:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target]", "solution_func": "def g(nums: list, target=100):\n    \"\"\"\n    Generate a list of random numbers and the target value.\n    \"\"\"\n    nums = [random.randint(1, 50) for _ in range(10)]\n    return nums, target", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target: int) -> bool:\n    \"\"\"\n    Check if there is a pair of numbers in the array that sums up to the target value.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(arr: np.ndarray, target: int):\n    \"\"\"\n    Generate a new array by multiplying each element in the original array by 2.\n    \"\"\"\n    return arr * 2\n\n# Test case\narr = np.array([1, 2, 3, 4, 5])\ntarget = 10\nassert f(g(arr, target), target)\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 181, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target: int) -> bool:\n    \"\"\"\n    Check if there is a pair of numbers in the array that sums up to the target value.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g(arr: np.ndarray, target: int):\n    \"\"\"\n    Generate a new array by multiplying each element in the original array by 2.\n    \"\"\"\n    return arr * 2\n\n# Test case\narr = np.array([1, 2, 3, 4, 5])\ntarget = 10", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(arr: list, target: int) -> bool:\n    \"\"\"\n    Check if there is a subarray in the given list that sums up to the target value.\n    \"\"\"\n    for i in range(len(arr)):\n        sum = 0\n        for j in range(i, len(arr)):\n            sum += arr[j]\n            if sum == target:\n                return True\n    return False\n\ndef g(arr: list, target: int):\n    \"\"\"\n    Shuffle the elements in the original list randomly.\n    \"\"\"\n    random.shuffle(arr)\n    return arr\n\n# Test case\narr = [1, 2, 3, 4, 5]\ntarget = 9\nassert f(g(arr, target), target)\n", "emb": null, "idx_generation": 181, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(arr: list, target: int) -> bool:\n    \"\"\"\n    Check if there is a subarray in the given list that sums up to the target value.\n    \"\"\"\n    for i in range(len(arr)):\n        sum = 0\n        for j in range(i, len(arr)):\n            sum += arr[j]\n            if sum == target:\n                return True\n    return False", "solution_func": "def g(arr: list, target: int):\n    \"\"\"\n    Shuffle the elements in the original list randomly.\n    \"\"\"\n    random.shuffle(arr)\n    return arr\n\n# Test case\narr = [1, 2, 3, 4, 5]\ntarget = 9", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\nimport re\n\ndef f(email: str, pattern: str) -> bool:\n    \"\"\"\n    Check if the given email matches the specified pattern.\n    \"\"\"\n    return bool(re.fullmatch(pattern, email))\n\ndef g(pattern: str):\n    \"\"\"\n    Generate a random email address that matches the specified pattern.\n    \"\"\"\n    username = ''.join(random.choice('abcdefghijklmnopqrstuvwxyz') for _ in range(5))\n    domain = 'gmail.com'\n    return f\"{username}@{domain}\"\n\n# Test case\nemail = g(\"[a-z]{5}@gmail.com\")\npattern = \"[a-z]{5}@gmail.com\"\nassert f(email, pattern)\n", "emb": null, "idx_generation": 181, "target_skills": null, "problem_func": "import random\nfrom typing import*\nimport re\n\ndef f(email: str, pattern: str) -> bool:\n    \"\"\"\n    Check if the given email matches the specified pattern.\n    \"\"\"\n    return bool(re.fullmatch(pattern, email))", "solution_func": "def g(pattern: str):\n    \"\"\"\n    Generate a random email address that matches the specified pattern.\n    \"\"\"\n    username = ''.join(random.choice('abcdefghijklmnopqrstuvwxyz') for _ in range(5))\n    domain = 'gmail.com'\n    return f\"{username}@{domain}\"\n\n# Test case\nemail = g(\"[a-z]{5}@gmail.com\")\npattern = \"[a-z]{5}@gmail.com\"", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find a pair of numbers from the list that add up to the target.\n    Return True if such a pair exists, False otherwise.\n    \"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\ndef g(lst: List[int], target: int):\n    \"\"\"\n    Return the pair of numbers from the list that add up to the target.\n    \"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return (lst[i], lst[j])\nassert f(g([1, 2, 3, 4, 5], 9))\n", "emb": null, "idx_generation": 181, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find a pair of numbers from the list that add up to the target.\n    Return True if such a pair exists, False otherwise.\n    \"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False", "solution_func": "def g(lst: List[int], target: int):\n    \"\"\"\n    Return the pair of numbers from the list that add up to the target.\n    \"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return (lst[i], lst[j])", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find a subsequence (not necessarily contiguous)\n    of the list that adds up to the target. Return True if such a subsequence exists, False otherwise.\n    \"\"\"\n    if target == 0:\n        return True\n    if len(lst) == 0:\n        return False\n    return f(lst[1:], target - lst[0]) or f(lst[1:], target)\ndef g(lst: List[int], target: int):\n    \"\"\"\n    Return the subsequence of the list that adds up to the target.\n    \"\"\"\n    if target == 0:\n        return []\n    if len(lst) == 0:\n        return None\n    if f(lst[1:], target - lst[0]):\n        return [lst[0]] + g(lst[1:], target - lst[0])\n    else:\n        return g(lst[1:], target)\nassert f(g([1, 2, 3, 4, 5], 9))\n", "emb": null, "idx_generation": 181, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find a subsequence (not necessarily contiguous)\n    of the list that adds up to the target. Return True if such a subsequence exists, False otherwise.\n    \"\"\"\n    if target == 0:\n        return True\n    if len(lst) == 0:\n        return False\n    return f(lst[1:], target - lst[0]) or f(lst[1:], target)", "solution_func": "def g(lst: List[int], target: int):\n    \"\"\"\n    Return the subsequence of the list that adds up to the target.\n    \"\"\"\n    if target == 0:\n        return []\n    if len(lst) == 0:\n        return None\n    if f(lst[1:], target - lst[0]):\n        return [lst[0]] + g(lst[1:], target - lst[0])\n    else:\n        return g(lst[1:], target)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find a subset of the list that adds up to the target.\n    Return True if such a subset exists, False otherwise.\n    \"\"\"\n    n = len(lst)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j >= lst[i - 1]:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - lst[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target]\ndef g(lst: List[int], target: int):\n    \"\"\"\n    Return the subset of the list that adds up to the target.\n    \"\"\"\n    n = len(lst)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j >= lst[i - 1]:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - lst[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    subset = []\n    i, j = n, target\n    while i > 0 and j > 0:\n        if dp[i][j]:\n            if not dp[i - 1][j]:\n                subset.append(lst[i - 1])\n                j -= lst[i - 1]\n        i -= 1\n    return subset\nassert f(g([1, 2, 3, 4, 5], 9))\n", "emb": null, "idx_generation": 181, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find a subset of the list that adds up to the target.\n    Return True if such a subset exists, False otherwise.\n    \"\"\"\n    n = len(lst)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j >= lst[i - 1]:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - lst[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target]", "solution_func": "def g(lst: List[int], target: int):\n    \"\"\"\n    Return the subset of the list that adds up to the target.\n    \"\"\"\n    n = len(lst)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j >= lst[i - 1]:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - lst[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    subset = []\n    i, j = n, target\n    while i > 0 and j > 0:\n        if dp[i][j]:\n            if not dp[i - 1][j]:\n                subset.append(lst[i - 1])\n                j -= lst[i - 1]\n        i -= 1\n    return subset", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"\n    Find two numbers in the list nums that add up to the target.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums = [10, 5, 15, 7]):\n    return nums\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 181, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"\n    Find two numbers in the list nums that add up to the target.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums = [10, 5, 15, 7]):\n    return nums", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"\n    Find if there are n consecutive vowels in the string s.\n    \"\"\"\n    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n            if count >= n:\n                return True\n        else:\n            count = 0\n    return False\ndef g(n = 5):\n    return \"aeiou\" * n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 181, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"\n    Find if there are n consecutive vowels in the string s.\n    \"\"\"\n    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n            if count >= n:\n                return True\n        else:\n            count = 0\n    return False", "solution_func": "def g(n = 5):\n    return \"aeiou\" * n", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Find three numbers in the list nums that add up to the target.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(nums = [3, 1, 2, 6, 4, 5]):\n    return nums\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 181, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Find three numbers in the list nums that add up to the target.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False", "solution_func": "def g(nums = [3, 1, 2, 6, 4, 5]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, m: int, matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is an n x m identity matrix.\"\"\"\n    if len(matrix) != n or any(len(row) != m for row in matrix):\n        return False\n    for i in range(n):\n        for j in range(m):\n            if i == j:\n                if matrix[i][j] != 1:\n                    return False\n            else:\n                if matrix[i][j] != 0:\n                    return False\n    return True\ndef g(n=3, m=3):\n    matrix = [[1 if i == j else 0 for j in range(m)] for i in range(n)]\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 181, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m: int, matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is an n x m identity matrix.\"\"\"\n    if len(matrix) != n or any(len(row) != m for row in matrix):\n        return False\n    for i in range(n):\n        for j in range(m):\n            if i == j:\n                if matrix[i][j] != 1:\n                    return False\n            else:\n                if matrix[i][j] != 0:\n                    return False\n    return True", "solution_func": "def g(n=3, m=3):\n    matrix = [[1 if i == j else 0 for j in range(m)] for i in range(n)]\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target=0) -> bool:\n    \"\"\"Check if the sum of all elements in a given numpy array is equal to a target value\"\"\"\n    return np.sum(arr) == target\n\ndef g(target = 0):\n    return np.zeros((3, 3))\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 182, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target=0) -> bool:\n    \"\"\"Check if the sum of all elements in a given numpy array is equal to a target value\"\"\"\n    return np.sum(arr) == target", "solution_func": "def g(target = 0):\n    return np.zeros((3, 3))", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if the sum of any two numbers in a list is equal to a target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target = 0):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n", "emb": null, "idx_generation": 182, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if the sum of any two numbers in a list is equal to a target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target = 0):\n    return [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(dt: datetime, year=2022) -> bool:\n    \"\"\"Check if the year of a given datetime object is equal to a specific year\"\"\"\n    return dt.year == year\n\ndef g(year = 2022):\n    return datetime(year, 12, 31)\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 182, "target_skills": null, "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(dt: datetime, year=2022) -> bool:\n    \"\"\"Check if the year of a given datetime object is equal to a specific year\"\"\"\n    return dt.year == year", "solution_func": "def g(year = 2022):\n    return datetime(year, 12, 31)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, k=3) -> bool:\n    \"\"\"Find if there exists k numbers in nums that sum up to target\"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, k):\n        if sum(combo) == target:\n            return True\n    return False\ndef g(target = 100, k = 3):\n    nums = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    return nums\nassert f(g())\n", "emb": [0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 182, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, k=3) -> bool:\n    \"\"\"Find if there exists k numbers in nums that sum up to target\"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, k):\n        if sum(combo) == target:\n            return True\n    return False", "solution_func": "def g(target = 100, k = 3):\n    nums = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    return nums", "map_ix": [0, 1, 1, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=50) -> bool:\n    \"\"\"Find if there exists a row or column in matrix that sums up to target\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    return target in row_sums or target in col_sums\ndef g(target = 50):\n    matrix = [[10, 20, 30], [40, 50, 60], [70, 80, 90]]\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 182, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=50) -> bool:\n    \"\"\"Find if there exists a row or column in matrix that sums up to target\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    return target in row_sums or target in col_sums", "solution_func": "def g(target = 50):\n    matrix = [[10, 20, 30], [40, 50, 60], [70, 80, 90]]\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], k=2) -> bool:\n    \"\"\"Find if there exists a subarray in nums that sums up to a multiple of k\"\"\"\n    prefix_sums = [0]\n    for num in nums:\n        prefix_sums.append((prefix_sums[-1] + num) % k)\n    seen = set()\n    for i in range(len(prefix_sums)):\n        if prefix_sums[i] in seen:\n            return True\n        seen.add(prefix_sums[i - 1])\n    return False\ndef g(k = 2):\n    nums = [1, 2, 3, 4, 5]\n    return nums\nassert f(g())\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 182, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], k=2) -> bool:\n    \"\"\"Find if there exists a subarray in nums that sums up to a multiple of k\"\"\"\n    prefix_sums = [0]\n    for num in nums:\n        prefix_sums.append((prefix_sums[-1] + num) % k)\n    seen = set()\n    for i in range(len(prefix_sums)):\n        if prefix_sums[i] in seen:\n            return True\n        seen.add(prefix_sums[i - 1])\n    return False", "solution_func": "def g(k = 2):\n    nums = [1, 2, 3, 4, 5]\n    return nums", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\nimport datetime\n\ndef f(date: datetime.datetime, days=10) -> bool:\n    \"\"\"Check if the given date is within the next 'days' days\"\"\"\n    now = datetime.datetime.now()\n    return (date - now).days <= days\ndef g(days=10):\n    return datetime.datetime.now() + datetime.timedelta(days=days)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 182, "target_skills": null, "problem_func": "from typing import*\nimport datetime\n\ndef f(date: datetime.datetime, days=10) -> bool:\n    \"\"\"Check if the given date is within the next 'days' days\"\"\"\n    now = datetime.datetime.now()\n    return (date - now).days <= days", "solution_func": "def g(days=10):\n    return datetime.datetime.now() + datetime.timedelta(days=days)", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if any two numbers in the list add up to the target\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(target=50):\n    nums = random.sample(range(1, 101), 10)\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 182, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if any two numbers in the list add up to the target\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))", "solution_func": "def g(target=50):\n    nums = random.sample(range(1, 101), 10)\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(word: str, char='a') -> bool:\n    \"\"\"Check if the given character is the first letter of the word\"\"\"\n    return word[0] == char\ndef g(char='a'):\n    word = input(\"Enter a word: \")\n    return word\nassert f(g())\n", "emb": null, "idx_generation": 182, "target_skills": null, "problem_func": "from typing import*\ndef f(word: str, char='a') -> bool:\n    \"\"\"Check if the given character is the first letter of the word\"\"\"\n    return word[0] == char", "solution_func": "def g(char='a'):\n    word = input(\"Enter a word: \")\n    return word", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(s: str, k=5) -> bool:\n    \"\"\"\n    Given a string `s`, determine if there exists a substring of length `k` that contains all unique characters.\n    Return True if such substring exists, False otherwise.\n    \"\"\"\n    for i in range(len(s)-k+1):\n        if len(set(s[i:i+k])) == k:\n            return True\n    return False\n\ndef g(k=5):\n    import random\n    import string\n    return ''.join(random.choices(string.ascii_lowercase, k=k))\n\nassert f(g())\n", "emb": null, "idx_generation": 182, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(s: str, k=5) -> bool:\n    \"\"\"\n    Given a string `s`, determine if there exists a substring of length `k` that contains all unique characters.\n    Return True if such substring exists, False otherwise.\n    \"\"\"\n    for i in range(len(s)-k+1):\n        if len(set(s[i:i+k])) == k:\n            return True\n    return False", "solution_func": "def g(k=5):\n    import random\n    import string\n    return ''.join(random.choices(string.ascii_lowercase, k=k))", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(li: List[int]) -> bool:\n    \"\"\"Check if the list contains any duplicate elements\"\"\"\n    return len(set(li)) == len(li)\ndef g():\n    return [i for i in range(1000)]\nassert f(g())\n", "emb": [1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 183, "target_skills": null, "problem_func": "from typing import*\ndef f(li: List[int]) -> bool:\n    \"\"\"Check if the list contains any duplicate elements\"\"\"\n    return len(set(li)) == len(li)", "solution_func": "def g():\n    return [i for i in range(1000)]", "map_ix": [1, 1, 1, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, word='banana') -> bool:\n    \"\"\"Check if the word is a palindrome\"\"\"\n    return s == s[::-1]\ndef g(word = 'banana'):\n    return word\nassert f(g())\n", "emb": null, "idx_generation": 183, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, word='banana') -> bool:\n    \"\"\"Check if the word is a palindrome\"\"\"\n    return s == s[::-1]", "solution_func": "def g(word = 'banana'):\n    return word", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, word='pineapple') -> bool:\n    \"\"\"Check if the word is a palindrome\"\"\"\n    return s == s[::-1]\ndef g(word = 'pineapple'):\n    return word\nassert f(g())\n", "emb": null, "idx_generation": 183, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, word='pineapple') -> bool:\n    \"\"\"Check if the word is a palindrome\"\"\"\n    return s == s[::-1]", "solution_func": "def g(word = 'pineapple'):\n    return word", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(year: int, month: int, day: int, hour: int, minute: int, second: int) -> bool:\n    \"\"\"Check if the given datetime is in the future.\"\"\"\n    given_datetime = datetime(year, month, day, hour, minute, second)\n    current_datetime = datetime.now()\n    return given_datetime > current_datetime\n\ndef g():\n    current_datetime = datetime.now()\n    future_datetime = current_datetime.replace(year=current_datetime.year + 1)\n    return future_datetime.year, future_datetime.month, future_datetime.day, future_datetime.hour, future_datetime.minute, future_datetime.second\n\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 183, "target_skills": null, "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(year: int, month: int, day: int, hour: int, minute: int, second: int) -> bool:\n    \"\"\"Check if the given datetime is in the future.\"\"\"\n    given_datetime = datetime(year, month, day, hour, minute, second)\n    current_datetime = datetime.now()\n    return given_datetime > current_datetime", "solution_func": "def g():\n    current_datetime = datetime.now()\n    future_datetime = current_datetime.replace(year=current_datetime.year + 1)\n    return future_datetime.year, future_datetime.month, future_datetime.day, future_datetime.hour, future_datetime.minute, future_datetime.second", "map_ix": [0, 0, 0, 1, 0, 1, 0, 0, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\nimport string\n\ndef f(s: str, n: int) -> bool:\n    \"\"\"Check if the given string is a palindrome with n random characters added at the end.\"\"\"\n    new_string = s + ''.join(random.choices(string.ascii_lowercase, k=n))\n    return new_string == new_string[::-1]\n\ndef g(s: str, n: int):\n    return s\n\nassert f(g('racecar', 5), 5)\n", "emb": null, "idx_generation": 183, "target_skills": null, "problem_func": "from typing import*\nimport random\nimport string\n\ndef f(s: str, n: int) -> bool:\n    \"\"\"Check if the given string is a palindrome with n random characters added at the end.\"\"\"\n    new_string = s + ''.join(random.choices(string.ascii_lowercase, k=n))\n    return new_string == new_string[::-1]", "solution_func": "def g(s: str, n: int):\n    return s", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: int, y: int, z: int) -> bool:\n    \"\"\"Check if the sum of squares of x and y is equal to the square of z.\"\"\"\n    return x ** 2 + y ** 2 == z ** 2\n\ndef g(x: int, y: int):\n    return x, y, x ** 2 + y ** 2\n\nassert f(*g(3, 4))\n", "emb": null, "idx_generation": 183, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, y: int, z: int) -> bool:\n    \"\"\"Check if the sum of squares of x and y is equal to the square of z.\"\"\"\n    return x ** 2 + y ** 2 == z ** 2", "solution_func": "def g(x: int, y: int):\n    return x, y, x ** 2 + y ** 2", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a pair of distinct indices i and j such that arr[i] + arr[j] == target.\n    \"\"\"\n    return any(arr[i] + arr[j] == target for i in range(len(arr)) for j in range(len(arr)) if i != j)\ndef g(arr=[1, 2, 3, 4, 5], target=9):\n    return arr\nassert f(g())\n", "emb": null, "idx_generation": 183, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a pair of distinct indices i and j such that arr[i] + arr[j] == target.\n    \"\"\"\n    return any(arr[i] + arr[j] == target for i in range(len(arr)) for j in range(len(arr)) if i != j)", "solution_func": "def g(arr=[1, 2, 3, 4, 5], target=9):\n    return arr", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string, determine if it is a palindrome.\n    \"\"\"\n    return s == s[::-1]\ndef g(s=\"racecar\"):\n    return s\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 183, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string, determine if it is a palindrome.\n    \"\"\"\n    return s == s[::-1]", "solution_func": "def g(s=\"racecar\"):\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix, determine if it is symmetric along its main diagonal.\n    \"\"\"\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix)))\ndef g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\nassert f(g())\n", "emb": [1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 183, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix, determine if it is symmetric along its main diagonal.\n    \"\"\"\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix)))", "solution_func": "def g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix", "map_ix": [1, 0, 1, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target: int, num_elements: int, threshold: int=0) -> bool:\n    \"\"\"Check if there exists a contiguous subarray with a sum greater than or equal to the target value.\"\"\"\n    return any(sum(arr[i:j]) >= target for i in range(len(arr)) for j in range(i+1, len(arr)+1) if j - i <= num_elements and sum(arr[i:j]) >= threshold)\ndef g(target: int, num_elements: int, threshold: int=0):\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return (arr, target, num_elements, threshold)\nassert f(g())\n", "emb": null, "idx_generation": 183, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int, num_elements: int, threshold: int=0) -> bool:\n    \"\"\"Check if there exists a contiguous subarray with a sum greater than or equal to the target value.\"\"\"\n    return any(sum(arr[i:j]) >= target for i in range(len(arr)) for j in range(i+1, len(arr)+1) if j - i <= num_elements and sum(arr[i:j]) >= threshold)", "solution_func": "def g(target: int, num_elements: int, threshold: int=0):\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return (arr, target, num_elements, threshold)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, sub='abc') -> bool:\n    \"\"\"Check if a string contains a specific substring\"\"\"\n    return sub in s\ndef g(sub='abc'):\n    return \"xyz\" + sub + \"123\"\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 184, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, sub='abc') -> bool:\n    \"\"\"Check if a string contains a specific substring\"\"\"\n    return sub in s", "solution_func": "def g(sub='abc'):\n    return \"xyz\" + sub + \"123\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers that sum up to a target value\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums))))\ndef g(target=0):\n    return [-2, -1, 0, 1, 2]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 184, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers that sum up to a target value\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums))))", "solution_func": "def g(target=0):\n    return [-2, -1, 0, 1, 2]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=18) -> bool:\n    \"\"\"Check if a target value exists in a matrix\"\"\"\n    return any((target in row for row in matrix))\ndef g(target=18):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n", "emb": null, "idx_generation": 184, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=18) -> bool:\n    \"\"\"Check if a target value exists in a matrix\"\"\"\n    return any((target in row for row in matrix))", "solution_func": "def g(target=18):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, rows=4, cols=4) -> bool:\n    \"\"\"Check if a matrix is symmetric along the main diagonal.\"\"\"\n    return np.allclose(matrix, matrix.T)\n    \ndef g(rows=4, cols=4):\n    matrix = np.random.randint(0, 10, size=(rows, cols))\n    return matrix\n\nassert f(g())\n", "emb": null, "idx_generation": 184, "target_skills": null, "problem_func": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, rows=4, cols=4) -> bool:\n    \"\"\"Check if a matrix is symmetric along the main diagonal.\"\"\"\n    return np.allclose(matrix, matrix.T)", "solution_func": "def g(rows=4, cols=4):\n    matrix = np.random.randint(0, 10, size=(rows, cols))\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, sub=\"world\") -> bool:\n    \"\"\"Check if the given substring is present in the string.\"\"\"\n    return sub in string\n\ndef g(sub=\"world\"):\n    string = \"Hello, world!\"\n    return string\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 184, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, sub=\"world\") -> bool:\n    \"\"\"Check if the given substring is present in the string.\"\"\"\n    return sub in string", "solution_func": "def g(sub=\"world\"):\n    string = \"Hello, world!\"\n    return string", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom collections import Counter\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are exactly two elements in the list that sum up to the target value.\"\"\"\n    counter = Counter(nums)\n    for num in nums:\n        if target - num in counter:\n            return True\n    return False\n\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 184, "target_skills": null, "problem_func": "from typing import*\nfrom collections import Counter\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are exactly two elements in the list that sum up to the target value.\"\"\"\n    counter = Counter(nums)\n    for num in nums:\n        if target - num in counter:\n            return True\n    return False", "solution_func": "def g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(li: List[int], max_val=100) -> bool:\n    \"\"\"Find a list where all elements are less than or equal to a specific value\"\"\"\n    return all(x <= max_val for x in li)\ndef g(max_val = 100):\n    return list(range(max_val + 1))\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 184, "target_skills": null, "problem_func": "from typing import*\ndef f(li: List[int], max_val=100) -> bool:\n    \"\"\"Find a list where all elements are less than or equal to a specific value\"\"\"\n    return all(x <= max_val for x in li)", "solution_func": "def g(max_val = 100):\n    return list(range(max_val + 1))", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substr='abc') -> bool:\n    \"\"\"Check if a specific substring is present in a string\"\"\"\n    return substr in s\ndef g(substr = 'abc'):\n    return substr * 2\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 184, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substr='abc') -> bool:\n    \"\"\"Check if a specific substring is present in a string\"\"\"\n    return substr in s", "solution_func": "def g(substr = 'abc'):\n    return substr * 2", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(li: List[int], target=42) -> bool:\n    \"\"\"Find a list where the sum of any two elements is equal to a specific value\"\"\"\n    return any(x + y == target for i, x in enumerate(li) for y in li[i+1:])\ndef g(target = 42):\n    return [10, 20, target - 30]\nassert f(g())\n", "emb": null, "idx_generation": 184, "target_skills": null, "problem_func": "from typing import*\ndef f(li: List[int], target=42) -> bool:\n    \"\"\"Find a list where the sum of any two elements is equal to a specific value\"\"\"\n    return any(x + y == target for i, x in enumerate(li) for y in li[i+1:])", "solution_func": "def g(target = 42):\n    return [10, 20, target - 30]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Check if the target value is present in the matrix\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix: List[List[int]], target: int):\n    \"\"\"\n    Return the matrix with the target value appended to the last row\n    \"\"\"\n    matrix[-1].append(target)\n    return matrix\n\n# Test Case\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\ntarget = 5\nassert f(g(matrix, target), target)\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 184, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Check if the target value is present in the matrix\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(matrix: List[List[int]], target: int):\n    \"\"\"\n    Return the matrix with the target value appended to the last row\n    \"\"\"\n    matrix[-1].append(target)\n    return matrix\n\n# Test Case\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\ntarget = 5", "map_ix": [1, 1, 0, 1, 0, 1, 1, 1, 1, 1]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(strings: List[str], target_length=7, target_sum=100) -> bool:\n    \"\"\"Check if the sum of the lengths of the strings is equal to the target_sum and if the longest string has a length greater than or equal to the target_length\"\"\"\n    assert sum(len(s) for s in strings) == target_sum\n    assert max(len(s) for s in strings) >= target_length\n    return True\ndef g(target_length=7, target_sum=100):\n    return ['hello', 'world', 'python', 'puzzle']\nassert f(g())\n", "emb": null, "idx_generation": 185, "target_skills": null, "problem_func": "from typing import*\ndef f(strings: List[str], target_length=7, target_sum=100) -> bool:\n    \"\"\"Check if the sum of the lengths of the strings is equal to the target_sum and if the longest string has a length greater than or equal to the target_length\"\"\"\n    assert sum(len(s) for s in strings) == target_sum\n    assert max(len(s) for s in strings) >= target_length\n    return True", "solution_func": "def g(target_length=7, target_sum=100):\n    return ['hello', 'world', 'python', 'puzzle']", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the matrix is symmetric along the main diagonal\"\"\"\n    n = len(matrix)\n    return all(matrix[i][j] == matrix[j][i] for i in range(n) for j in range(n))\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 185, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the matrix is symmetric along the main diagonal\"\"\"\n    n = len(matrix)\n    return all(matrix[i][j] == matrix[j][i] for i in range(n) for j in range(n))", "solution_func": "def g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that sums to the target\"\"\"\n    return any(numbers[i] + numbers[j] == target for i in range(len(numbers)) for j in range(i + 1, len(numbers)))\ndef g(target=100):\n    return [10, 20, 30, 40, 50]\nassert f(g())\n", "emb": null, "idx_generation": 185, "target_skills": null, "problem_func": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that sums to the target\"\"\"\n    return any(numbers[i] + numbers[j] == target for i in range(len(numbers)) for j in range(i + 1, len(numbers)))", "solution_func": "def g(target=100):\n    return [10, 20, 30, 40, 50]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if n is present in the list\"\"\"\n    return n in nums\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums[0]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 185, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if n is present in the list\"\"\"\n    return n in nums", "solution_func": "def g(nums=[1, 2, 3, 4, 5]):\n    return nums[0]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if n is a prime number\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums[-1]\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 185, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if n is a prime number\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "solution_func": "def g(nums=[1, 2, 3, 4, 5]):\n    return nums[-1]", "map_ix": [1, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray) -> bool:\n    \"\"\"Check if the given matrix is symmetric\"\"\"\n    return np.array_equal(matrix, matrix.T)\ndef g():\n    matrix = np.array([[1, 2, 3], [2, 4, 5], [3, 5, 6]])\n    return matrix\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 185, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray) -> bool:\n    \"\"\"Check if the given matrix is symmetric\"\"\"\n    return np.array_equal(matrix, matrix.T)", "solution_func": "def g():\n    matrix = np.array([[1, 2, 3], [2, 4, 5], [3, 5, 6]])\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target='hello world') -> bool:\n    \"\"\"Check if a string contains all the letters of a target string\"\"\"\n    return all((c in s for c in target))\ndef g(target='hello world'):\n    return target\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 185, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='hello world') -> bool:\n    \"\"\"Check if a string contains all the letters of a target string\"\"\"\n    return all((c in s for c in target))", "solution_func": "def g(target='hello world'):\n    return target", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\ndef f(n: int, m=10) -> bool:\n    \"\"\"Check if a number is divisible by all the numbers from 1 to m\"\"\"\n    return all((n % i == 0 for i in range(1, m+1)))\ndef g(m=10):\n    return math.factorial(m)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 185, "target_skills": null, "problem_func": "from typing import*\nimport math\ndef f(n: int, m=10) -> bool:\n    \"\"\"Check if a number is divisible by all the numbers from 1 to m\"\"\"\n    return all((n % i == 0 for i in range(1, m+1)))", "solution_func": "def g(m=10):\n    return math.factorial(m)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Find a subset of numbers that adds up to a target value\"\"\"\n    def subset_sum(numbers, target):\n        if target == 0:\n            return True\n        if not numbers or target < 0:\n            return False\n        return subset_sum(numbers[1:], target - numbers[0]) or subset_sum(numbers[1:], target)\n    return subset_sum(numbers, target)\ndef g(numbers):\n    return numbers\nassert f(g())\n", "emb": null, "idx_generation": 185, "target_skills": null, "problem_func": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Find a subset of numbers that adds up to a target value\"\"\"\n    def subset_sum(numbers, target):\n        if target == 0:\n            return True\n        if not numbers or target < 0:\n            return False\n        return subset_sum(numbers[1:], target - numbers[0]) or subset_sum(numbers[1:], target)\n    return subset_sum(numbers, target)", "solution_func": "def g(numbers):\n    return numbers", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the sum of the first n elements in the list is equal to n\"\"\"\n    return sum(lst[:n]) == n\ndef g(lst=[1, 2, 3, 4, 5]):\n    return len(lst)\nassert f(g())\n", "emb": null, "idx_generation": 185, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the sum of the first n elements in the list is equal to n\"\"\"\n    return sum(lst[:n]) == n", "solution_func": "def g(lst=[1, 2, 3, 4, 5]):\n    return len(lst)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], k: int, target: int) -> bool:\n    \"\"\"Find if there exists a subarray of length k in arr that sums up to target\"\"\"\n    return any(sum(arr[i:i+k]) == target for i in range(len(arr) - k + 1))\ndef g(k: int, target: int, arr: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return arr\nassert f(g())\n", "emb": null, "idx_generation": 186, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], k: int, target: int) -> bool:\n    \"\"\"Find if there exists a subarray of length k in arr that sums up to target\"\"\"\n    return any(sum(arr[i:i+k]) == target for i in range(len(arr) - k + 1))", "solution_func": "def g(k: int, target: int, arr: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return arr", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Find if target exists in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(target: int, matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 186, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Find if target exists in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(target: int, matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Find if there exists a pair of elements in arr that sums up to target\"\"\"\n    return any(arr[i] + arr[j] == target for i in range(len(arr)) for j in range(i+1, len(arr)))\ndef g(target: int, arr: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return arr\nassert f(g())\n", "emb": null, "idx_generation": 186, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Find if there exists a pair of elements in arr that sums up to target\"\"\"\n    return any(arr[i] + arr[j] == target for i in range(len(arr)) for j in range(i+1, len(arr)))", "solution_func": "def g(target: int, arr: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return arr", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(notes: List[int], target=15) -> bool:\n    \"\"\"Determine if it is possible to select a group of notes that adds up to the target value\"\"\"\n    return any(sum(comb) == target for i in range(len(notes)) for comb in combinations(notes, i + 1))\ndef g(notes=[3, 5, 8, 11, 2, 6, 9]):\n    return notes\nassert f(g())\n", "emb": null, "idx_generation": 186, "target_skills": null, "problem_func": "from typing import*\ndef f(notes: List[int], target=15) -> bool:\n    \"\"\"Determine if it is possible to select a group of notes that adds up to the target value\"\"\"\n    return any(sum(comb) == target for i in range(len(notes)) for comb in combinations(notes, i + 1))", "solution_func": "def g(notes=[3, 5, 8, 11, 2, 6, 9]):\n    return notes", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(words: List[str], target_length=10) -> bool:\n    \"\"\"Check if there exists a pair of words that concatenates to a string with length equal to target_length\"\"\"\n    return any(len(word1 + word2) == target_length for word1 in words for word2 in words)\ndef g(words=['apple', 'banana', 'cherry', 'date']):\n    return words\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 186, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], target_length=10) -> bool:\n    \"\"\"Check if there exists a pair of words that concatenates to a string with length equal to target_length\"\"\"\n    return any(len(word1 + word2) == target_length for word1 in words for word2 in words)", "solution_func": "def g(words=['apple', 'banana', 'cherry', 'date']):\n    return words", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Find a combination of numbers that adds up to the target_sum\"\"\"\n    return any(sum(comb) == target_sum for i in range(len(numbers)) for comb in combinations(numbers, i + 1))\ndef g(numbers=[10, 20, 30, 40, 50]):\n    return numbers\nassert f(g())\n", "emb": null, "idx_generation": 186, "target_skills": null, "problem_func": "from typing import*\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Find a combination of numbers that adds up to the target_sum\"\"\"\n    return any(sum(comb) == target_sum for i in range(len(numbers)) for comb in combinations(numbers, i + 1))", "solution_func": "def g(numbers=[10, 20, 30, 40, 50]):\n    return numbers", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(x: int, a=13, b=5) -> bool:\n    \"\"\"Check if x is a perfect square and divisible by a, but not divisible by b\"\"\"\n    return math.sqrt(x) == int(math.sqrt(x)) and x % a == 0 and x % b != 0\n\ndef g(a=13, b=5):\n    i = 1\n    while True:\n        if i*i % a == 0 and i*i % b != 0:\n            return i*i\n        i += 1\n        \nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 186, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: int, a=13, b=5) -> bool:\n    \"\"\"Check if x is a perfect square and divisible by a, but not divisible by b\"\"\"\n    return math.sqrt(x) == int(math.sqrt(x)) and x % a == 0 and x % b != 0", "solution_func": "def g(a=13, b=5):\n    i = 1\n    while True:\n        if i*i % a == 0 and i*i % b != 0:\n            return i*i\n        i += 1", "map_ix": [0, 0, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums=[2, 4, 6, 8, 10], target=16):\n    return nums, target\n\nassert f(*g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 186, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(nums=[2, 4, 6, 8, 10], target=16):\n    return nums, target", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"Check if the string contains a repeating pattern of length n\"\"\"\n    return s[:n] * (len(s)//n) == s\n\ndef g(s='abcabcabc', n=3):\n    return s, n\n\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 186, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"Check if the string contains a repeating pattern of length n\"\"\"\n    return s[:n] * (len(s)//n) == s", "solution_func": "def g(s='abcabcabc', n=3):\n    return s, n", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, nums: List[int]) -> bool:\n    \"\"\"Check if the sum of any two numbers in the list equals the target number n.\"\"\"\n    return any((n - num) in nums for num in nums)\ndef g(nums: List[int], n: int):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 186, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums: List[int]) -> bool:\n    \"\"\"Check if the sum of any two numbers in the list equals the target number n.\"\"\"\n    return any((n - num) in nums for num in nums)", "solution_func": "def g(nums: List[int], n: int):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Given a list of lists of integers, determine if there exists a pair of lists whose sum is equal to the target value.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if sum(nums[i]) + sum(nums[j]) == target:\n                return True\n    return False\n\ndef g(nums=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=0):\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 187, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Given a list of lists of integers, determine if there exists a pair of lists whose sum is equal to the target value.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if sum(nums[i]) + sum(nums[j]) == target:\n                return True\n    return False", "solution_func": "def g(nums=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=0):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(words: List[str], pattern: str) -> bool:\n    \"\"\"\n    Given a list of words and a pattern, determine if the pattern matches any word in the list.\n    The pattern is a string containing lowercase English letters and a dot (.).\n    The dot can represent any letter.\n    \"\"\"\n    for word in words:\n        if len(word) != len(pattern):\n            continue\n        match = True\n        for i in range(len(word)):\n            if pattern[i] != '.' and pattern[i] != word[i]:\n                match = False\n                break\n        if match:\n            return True\n    return False\n\ndef g(words=['cat', 'bat', 'rat'], pattern='c.t'):\n    return words, pattern\n\nassert f(g())\n", "emb": null, "idx_generation": 187, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], pattern: str) -> bool:\n    \"\"\"\n    Given a list of words and a pattern, determine if the pattern matches any word in the list.\n    The pattern is a string containing lowercase English letters and a dot (.).\n    The dot can represent any letter.\n    \"\"\"\n    for word in words:\n        if len(word) != len(pattern):\n            continue\n        match = True\n        for i in range(len(word)):\n            if pattern[i] != '.' and pattern[i] != word[i]:\n                match = False\n                break\n        if match:\n            return True\n    return False", "solution_func": "def g(words=['cat', 'bat', 'rat'], pattern='c.t'):\n    return words, pattern", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, determine if there exists a pair of numbers in the list whose sum is equal to the target value.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target\n\nassert f(g())\n", "emb": null, "idx_generation": 187, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, determine if there exists a pair of numbers in the list whose sum is equal to the target value.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a list of numbers that add up to the target number\"\"\"\n    return sum(nums) == target\ndef g(target = 100):\n    return [n for n in range(1, target+1)]\nassert f(g())\n", "emb": null, "idx_generation": 187, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a list of numbers that add up to the target number\"\"\"\n    return sum(nums) == target", "solution_func": "def g(target = 100):\n    return [n for n in range(1, target+1)]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substring=\"abc\") -> bool:\n    \"\"\"Check if a given string contains a specific substring\"\"\"\n    return substring in s\ndef g(substring=\"abc\"):\n    return \"abcdefg\"\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 187, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substring=\"abc\") -> bool:\n    \"\"\"Check if a given string contains a specific substring\"\"\"\n    return substring in s", "solution_func": "def g(substring=\"abc\"):\n    return \"abcdefg\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(coords: List[List[int]], side=10, num_points=20) -> bool:\n    \"\"\"Find num_points points in an side x side grid such that they form a square\"\"\"\n    return len(set(coords)) >= num_points and all(x in range(side) and y in range(side) for [x, y] in coords)\ndef g(side = 10, num_points = 20):\n    return [[i, j] for i in range(side) for j in range(side)]\nassert f(g())\n", "emb": null, "idx_generation": 187, "target_skills": null, "problem_func": "from typing import*\ndef f(coords: List[List[int]], side=10, num_points=20) -> bool:\n    \"\"\"Find num_points points in an side x side grid such that they form a square\"\"\"\n    return len(set(coords)) >= num_points and all(x in range(side) and y in range(side) for [x, y] in coords)", "solution_func": "def g(side = 10, num_points = 20):\n    return [[i, j] for i in range(side) for j in range(side)]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(dt: datetime, fmt='%Y-%m-%d %H:%M:%S') -> bool:\n    \"\"\"Check if the formatted datetime matches the original datetime.\"\"\"\n    return dt.strftime(fmt) == '2022-12-25 00:00:00'\n\ndef g(fmt='%Y-%m-%d %H:%M:%S'):\n    return datetime(2022, 12, 25, 0, 0, 0)\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 187, "target_skills": null, "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(dt: datetime, fmt='%Y-%m-%d %H:%M:%S') -> bool:\n    \"\"\"Check if the formatted datetime matches the original datetime.\"\"\"\n    return dt.strftime(fmt) == '2022-12-25 00:00:00'", "solution_func": "def g(fmt='%Y-%m-%d %H:%M:%S'):\n    return datetime(2022, 12, 25, 0, 0, 0)", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if the target is the sum of any two numbers in the list.\"\"\"\n    return any(target - num in nums for num in nums)\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n", "emb": null, "idx_generation": 187, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if the target is the sum of any two numbers in the list.\"\"\"\n    return any(target - num in nums for num in nums)", "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, chars=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if the string contains all the given characters.\"\"\"\n    return all(char in s for char in chars)\n\ndef g(chars=['a', 'e', 'i', 'o', 'u']):\n    return 'hello'\n\nassert f(g())\n", "emb": null, "idx_generation": 187, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, chars=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if the string contains all the given characters.\"\"\"\n    return all(char in s for char in chars)", "solution_func": "def g(chars=['a', 'e', 'i', 'o', 'u']):\n    return 'hello'", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(n: int, m=5) -> bool:\n    \"\"\"Check if the given number is a Fibonacci number and is divisible by m\"\"\"\n    def is_fibonacci(num):\n        return math.isqrt(5*num*num + 4).is_integer() or math.isqrt(5*num*num - 4).is_integer()\n    \n    return is_fibonacci(n) and n % m == 0\n\ndef g(m=5):\n    def generate_fibonacci():\n        a, b = 1, 1\n        yield a\n        yield b\n        while True:\n            a, b = b, a + b\n            yield b\n\n    fib = generate_fibonacci()\n    num = next(fib)\n    while num % m != 0:\n        num = next(fib)\n    \n    return num\n\nassert f(g())\n", "emb": null, "idx_generation": 187, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, m=5) -> bool:\n    \"\"\"Check if the given number is a Fibonacci number and is divisible by m\"\"\"\n    def is_fibonacci(num):\n        return math.isqrt(5*num*num + 4).is_integer() or math.isqrt(5*num*num - 4).is_integer()\n    \n    return is_fibonacci(n) and n % m == 0", "solution_func": "def g(m=5):\n    def generate_fibonacci():\n        a, b = 1, 1\n        yield a\n        yield b\n        while True:\n            a, b = b, a + b\n            yield b\n\n    fib = generate_fibonacci()\n    num = next(fib)\n    while num % m != 0:\n        num = next(fib)\n    \n    return num", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums = [1, 5, 6, 9, 10]):\n    return nums\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 188, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums = [1, 5, 6, 9, 10]):\n    return nums", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=1) -> bool:\n    \"\"\"Reverse the string and convert it to uppercase\"\"\"\n    return s[::-1].upper() == \"HELLO\"\ndef g(s = \"olleh\"):\n    return s\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 188, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=1) -> bool:\n    \"\"\"Reverse the string and convert it to uppercase\"\"\"\n    return s[::-1].upper() == \"HELLO\"", "solution_func": "def g(s = \"olleh\"):\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(nums = [10, 20, 30, 40, 50]):\n    return nums\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 188, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False", "solution_func": "def g(nums = [10, 20, 30, 40, 50]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"Given a list of integers, find two numbers such that their sum equals to the target value.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target: int = 0):\n    return [1, 2, 3, 4, 5]\nassert f(g(), target=9)\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 188, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"Given a list of integers, find two numbers such that their sum equals to the target value.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(target: int = 0):\n    return [1, 2, 3, 4, 5]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is symmetric.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 188, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is symmetric.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "solution_func": "def g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]", "map_ix": [1, 1, 0, 1, 0, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if a given list of integers is a palindrome.\"\"\"\n    return nums == nums[::-1]\ndef g():\n    return [1, 2, 3, 2, 1]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 188, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if a given list of integers is a palindrome.\"\"\"\n    return nums == nums[::-1]", "solution_func": "def g():\n    return [1, 2, 3, 2, 1]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=0, k=2) -> bool:\n    \"\"\"Find k numbers in the list whose sum is equal to the target\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, k))\ndef g(target = 0, k = 2):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 188, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=0, k=2) -> bool:\n    \"\"\"Find k numbers in the list whose sum is equal to the target\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, k))", "solution_func": "def g(target = 0, k = 2):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, substring=\"hello\") -> bool:\n    \"\"\"Check if the given substring is present in the string\"\"\"\n    return substring in string\ndef g(substring = \"hello\"):\n    string = \"hello world\"\n    return string\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 188, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, substring=\"hello\") -> bool:\n    \"\"\"Check if the given substring is present in the string\"\"\"\n    return substring in string", "solution_func": "def g(substring = \"hello\"):\n    string = \"hello world\"\n    return string", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list whose sum is equal to the target\"\"\"\n    return any(target - num in nums for num in nums)\ndef g(target = 0):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 188, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list whose sum is equal to the target\"\"\"\n    return any(target - num in nums for num in nums)", "solution_func": "def g(target = 0):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=4) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square of size n x n\n    \"\"\"\n    target_sum = n * (n ** 2 + 1) // 2\n    rows = all(sum(row) == target_sum for row in matrix)\n    cols = all(sum(col) == target_sum for col in zip(*matrix))\n    diag1 = sum(matrix[i][i] for i in range(n)) == target_sum\n    diag2 = sum(matrix[i][n - i - 1] for i in range(n)) == target_sum\n    return rows and cols and diag1 and diag2\n\ndef g(n=4):\n    matrix = [[0] * n for _ in range(n)]\n    num = 1\n    i = 0\n    j = n // 2\n    while num <= n ** 2:\n        if matrix[i][j] != 0:\n            i += 1\n            if i >= n:\n                i = 0\n            continue\n        matrix[i][j] = num\n        num += 1\n        i -= 1\n        j += 1\n        if i < 0:\n            i = n - 1\n        if j >= n:\n            j = 0\n    return matrix\n\nassert f(g())\n", "emb": null, "idx_generation": 188, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n=4) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square of size n x n\n    \"\"\"\n    target_sum = n * (n ** 2 + 1) // 2\n    rows = all(sum(row) == target_sum for row in matrix)\n    cols = all(sum(col) == target_sum for col in zip(*matrix))\n    diag1 = sum(matrix[i][i] for i in range(n)) == target_sum\n    diag2 = sum(matrix[i][n - i - 1] for i in range(n)) == target_sum\n    return rows and cols and diag1 and diag2", "solution_func": "def g(n=4):\n    matrix = [[0] * n for _ in range(n)]\n    num = 1\n    i = 0\n    j = n // 2\n    while num <= n ** 2:\n        if matrix[i][j] != 0:\n            i += 1\n            if i >= n:\n                i = 0\n            continue\n        matrix[i][j] = num\n        num += 1\n        i -= 1\n        j += 1\n        if i < 0:\n            i = n - 1\n        if j >= n:\n            j = 0\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: int, a = 10, b = 20, c = 30) -> bool:\n    \"\"\"Check if the sum of three numbers is equal to x\"\"\"\n    return a + b + c == x\ndef g(a = 10, b = 20, c = 30):\n    return a + b + c\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 189, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, a = 10, b = 20, c = 30) -> bool:\n    \"\"\"Check if the sum of three numbers is equal to x\"\"\"\n    return a + b + c == x", "solution_func": "def g(a = 10, b = 20, c = 30):\n    return a + b + c", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\n\ndef f(x: int, lst: list) -> bool:\n    \"\"\"Check if the given number is in the list\"\"\"\n    return x in lst\ndef g(lst):\n    num = random.choice(lst)\n    return num\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g(lst), lst)\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 189, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(x: int, lst: list) -> bool:\n    \"\"\"Check if the given number is in the list\"\"\"\n    return x in lst", "solution_func": "def g(lst):\n    num = random.choice(lst)\n    return num\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: str, n: int) -> bool:\n    \"\"\"Check if the length of the string is equal to n\"\"\"\n    return len(x) == n\ndef g(n = 10):\n    return \"a\" * n\nassert f(g(), 10)\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 189, "target_skills": null, "problem_func": "from typing import*\ndef f(x: str, n: int) -> bool:\n    \"\"\"Check if the length of the string is equal to n\"\"\"\n    return len(x) == n", "solution_func": "def g(n = 10):\n    return \"a\" * n", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target value.\n\n    Sample Input:\n    nums = [2, 4, 6, 8]\n    target = 10\n\n    Sample Output:\n    True\n    \"\"\"\n    return any(target - num in nums for num in nums)\ndef g(nums = [2, 4, 6, 8], target = 10):\n    return nums, target\nassert f(*g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 189, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target value.\n\n    Sample Input:\n    nums = [2, 4, 6, 8]\n    target = 10\n\n    Sample Output:\n    True\n    \"\"\"\n    return any(target - num in nums for num in nums)", "solution_func": "def g(nums = [2, 4, 6, 8], target = 10):\n    return nums, target", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(num: int, n: int = 5) -> bool:\n    \"\"\"Check if the given number is a perfect square.\n\n    Sample Input:\n    num = 16\n    n = 4\n\n    Sample Output:\n    True\n    \"\"\"\n    return num ** 0.5 == n\ndef g(num = 16, n = 4):\n    return num\nassert f(g())\n", "emb": null, "idx_generation": 189, "target_skills": null, "problem_func": "from typing import*\ndef f(num: int, n: int = 5) -> bool:\n    \"\"\"Check if the given number is a perfect square.\n\n    Sample Input:\n    num = 16\n    n = 4\n\n    Sample Output:\n    True\n    \"\"\"\n    return num ** 0.5 == n", "solution_func": "def g(num = 16, n = 4):\n    return num", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import Dict\n\ndef f(d: Dict[str, int], key: str, value: int = 10) -> bool:\n    \"\"\"Check if the given key-value pair exists in the dictionary.\n\n    Sample Input:\n    d = {\"a\": 1, \"b\": 2, \"c\": 3}\n    key = \"b\"\n    value = 2\n\n    Sample Output:\n    True\n    \"\"\"\n    return key in d and d[key] == value\ndef g(d = {\"a\": 1, \"b\": 2, \"c\": 3}, key = \"b\", value = 2):\n    return d, key, value\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 189, "target_skills": null, "problem_func": "from typing import*\nfrom typing import Dict\n\ndef f(d: Dict[str, int], key: str, value: int = 10) -> bool:\n    \"\"\"Check if the given key-value pair exists in the dictionary.\n\n    Sample Input:\n    d = {\"a\": 1, \"b\": 2, \"c\": 3}\n    key = \"b\"\n    value = 2\n\n    Sample Output:\n    True\n    \"\"\"\n    return key in d and d[key] == value", "solution_func": "def g(d = {\"a\": 1, \"b\": 2, \"c\": 3}, key = \"b\", value = 2):\n    return d, key, value", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=9) -> bool:\n    \"\"\"Find two numbers in nums that add up to target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=9):\n    return [2, 7, 11, 15]\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 189, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=9) -> bool:\n    \"\"\"Find two numbers in nums that add up to target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target=9):\n    return [2, 7, 11, 15]", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Find three numbers in arr that add up to target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\ndef g(target=0):\n    return [-1, 0, 1, 2, -1, -4]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 189, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Find three numbers in arr that add up to target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False", "solution_func": "def g(target=0):\n    return [-1, 0, 1, 2, -1, -4]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Find if target exists in the matrix\"\"\"\n    for row in matrix:\n        for num in row:\n            if num == target:\n                return True\n    return False\ndef g(target=5):\n    return [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 189, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Find if target exists in the matrix\"\"\"\n    for row in matrix:\n        for num in row:\n            if num == target:\n                return True\n    return False", "solution_func": "def g(target=5):\n    return [[1, 4, 7], [2, 5, 8], [3, 6, 9]]", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(string: str, char='a') -> bool:\n    \"\"\"Check if a given character exists in a string and is followed by a number\"\"\"\n    return char in string and any(char.isdigit() for char in string[string.index(char):])\ndef g(string='Hello, World!', char='a'):\n    return string\nassert f(g())\n", "emb": null, "idx_generation": 189, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, char='a') -> bool:\n    \"\"\"Check if a given character exists in a string and is followed by a number\"\"\"\n    return char in string and any(char.isdigit() for char in string[string.index(char):])", "solution_func": "def g(string='Hello, World!', char='a'):\n    return string", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target_sum: int, a=-10, b=10) -> bool:\n    \"\"\"\n    Find a pair of numbers from the given list that sums up to the target sum.\n    The pair of numbers should have a product that is positive.\n\n    Sample input:\n    [1, -2, 3, -4, 5], 2\n\n    Sample output:\n    (3, -1)\n\n    The pair (3, -1) sums up to 2 and their product is positive.\n    \"\"\"\n    pairs = [(x, y) for x in nums for y in nums if x + y == target_sum and x * y > 0]\n    return len(pairs) > 0 and abs(a + b) < 10\ndef g(nums=[1, -2, 3, -4, 5], target_sum=2, a=-10, b=10):\n    pairs = [(x, y) for x in nums for y in nums if x + y == target_sum and x * y > 0]\n    return pairs[0] if pairs else ()\nassert f(g())\n", "emb": null, "idx_generation": 190, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target_sum: int, a=-10, b=10) -> bool:\n    \"\"\"\n    Find a pair of numbers from the given list that sums up to the target sum.\n    The pair of numbers should have a product that is positive.\n\n    Sample input:\n    [1, -2, 3, -4, 5], 2\n\n    Sample output:\n    (3, -1)\n\n    The pair (3, -1) sums up to 2 and their product is positive.\n    \"\"\"\n    pairs = [(x, y) for x in nums for y in nums if x + y == target_sum and x * y > 0]\n    return len(pairs) > 0 and abs(a + b) < 10", "solution_func": "def g(nums=[1, -2, 3, -4, 5], target_sum=2, a=-10, b=10):\n    pairs = [(x, y) for x in nums for y in nums if x + y == target_sum and x * y > 0]\n    return pairs[0] if pairs else ()", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(n: int, a=10, b=20) -> bool:\n    \"\"\"\n    Generate a random list of integers and find the largest number that is less than the given threshold.\n    The largest number should be greater than the average of the numbers in the list.\n\n    Sample input:\n    5\n\n    Sample output:\n    15\n\n    The random list [10, 15, 18, 11, 14] has an average of 13.6. The largest number less than 13.6 is 15.\n    \"\"\"\n    random_list = random.sample(range(a, b+1), n)\n    average = sum(random_list) / n\n    largest_num = max([x for x in random_list if x < average])\n    return largest_num > average\ndef g(n=5, a=10, b=20):\n    random_list = random.sample(range(a, b+1), n)\n    average = sum(random_list) / n\n    largest_num = max([x for x in random_list if x < average])\n    return largest_num\nassert f(g())\n", "emb": null, "idx_generation": 190, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(n: int, a=10, b=20) -> bool:\n    \"\"\"\n    Generate a random list of integers and find the largest number that is less than the given threshold.\n    The largest number should be greater than the average of the numbers in the list.\n\n    Sample input:\n    5\n\n    Sample output:\n    15\n\n    The random list [10, 15, 18, 11, 14] has an average of 13.6. The largest number less than 13.6 is 15.\n    \"\"\"\n    random_list = random.sample(range(a, b+1), n)\n    average = sum(random_list) / n\n    largest_num = max([x for x in random_list if x < average])\n    return largest_num > average", "solution_func": "def g(n=5, a=10, b=20):\n    random_list = random.sample(range(a, b+1), n)\n    average = sum(random_list) / n\n    largest_num = max([x for x in random_list if x < average])\n    return largest_num", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, a='apple', b='banana', c='cherry') -> bool:\n    \"\"\"\n    Check if a given string contains at least two of the three specified fruit names.\n\n    Sample input:\n    \"I like apple and cherry.\"\n\n    Sample output:\n    True\n\n    The string contains both 'apple' and 'cherry'.\n    \"\"\"\n    count = 0\n    if a in s:\n        count += 1\n    if b in s:\n        count += 1\n    if c in s:\n        count += 1\n    return count >= 2\ndef g(s=\"I like apple and cherry.\", a='apple', b='banana', c='cherry'):\n    return s\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 190, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, a='apple', b='banana', c='cherry') -> bool:\n    \"\"\"\n    Check if a given string contains at least two of the three specified fruit names.\n\n    Sample input:\n    \"I like apple and cherry.\"\n\n    Sample output:\n    True\n\n    The string contains both 'apple' and 'cherry'.\n    \"\"\"\n    count = 0\n    if a in s:\n        count += 1\n    if b in s:\n        count += 1\n    if c in s:\n        count += 1\n    return count >= 2", "solution_func": "def g(s=\"I like apple and cherry.\", a='apple', b='banana', c='cherry'):\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, chars=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if all characters in the string s are vowels\"\"\"\n    return all(c.lower() in chars for c in s)\ndef g(chars=['a', 'e', 'i', 'o', 'u']):\n    return ''.join(chars)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 190, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, chars=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if all characters in the string s are vowels\"\"\"\n    return all(c.lower() in chars for c in s)", "solution_func": "def g(chars=['a', 'e', 'i', 'o', 'u']):\n    return ''.join(chars)", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if there are two numbers in the list nums that add up to the target\"\"\"\n    return any(target - n in nums for n in nums)\ndef g(target=15):\n    return [1, target - 1]\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 190, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if there are two numbers in the list nums that add up to the target\"\"\"\n    return any(target - n in nums for n in nums)", "solution_func": "def g(target=15):\n    return [1, target - 1]", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], n=3) -> bool:\n    \"\"\"Check if there are n consecutive numbers in the list nums\"\"\"\n    nums.sort()\n    return any(nums[i] == nums[i+1] - 1 == nums[i+2] - 2 for i in range(len(nums) - 2))\ndef g(n=3):\n    return list(range(1, n+1))\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 190, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], n=3) -> bool:\n    \"\"\"Check if there are n consecutive numbers in the list nums\"\"\"\n    nums.sort()\n    return any(nums[i] == nums[i+1] - 1 == nums[i+2] - 2 for i in range(len(nums) - 2))", "solution_func": "def g(n=3):\n    return list(range(1, n+1))", "map_ix": [1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(numbers: List[int], target=100, num_numbers=3, operator='+') -> bool:\n    \"\"\"Find a combination of num_numbers from the list of numbers that evaluates to the target value using the given operator.\"\"\"\n    assert operator in ['+', '-', '*', '/']\n    \n    if operator == '+':\n        return sum(numbers[:num_numbers]) == target\n    elif operator == '-':\n        return numbers[0] - sum(numbers[1:num_numbers]) == target\n    elif operator == '*':\n        result = 1\n        for num in numbers[:num_numbers]:\n            result *= num\n        return result == target\n    elif operator == '/':\n        result = numbers[0]\n        for num in numbers[1:num_numbers]:\n            result /= num\n        return result == target\n\ndef g(target = 100, num_numbers = 3, operator = '+'):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n", "emb": null, "idx_generation": 190, "target_skills": null, "problem_func": "from typing import*\ndef f(numbers: List[int], target=100, num_numbers=3, operator='+') -> bool:\n    \"\"\"Find a combination of num_numbers from the list of numbers that evaluates to the target value using the given operator.\"\"\"\n    assert operator in ['+', '-', '*', '/']\n    \n    if operator == '+':\n        return sum(numbers[:num_numbers]) == target\n    elif operator == '-':\n        return numbers[0] - sum(numbers[1:num_numbers]) == target\n    elif operator == '*':\n        result = 1\n        for num in numbers[:num_numbers]:\n            result *= num\n        return result == target\n    elif operator == '/':\n        result = numbers[0]\n        for num in numbers[1:num_numbers]:\n            result /= num\n        return result == target", "solution_func": "def g(target = 100, num_numbers = 3, operator = '+'):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the sum of any row or column in the matrix is equal to the target value.\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    \n    for col in range(len(matrix[0])):\n        column_sum = 0\n        for row in range(len(matrix)):\n            column_sum += matrix[row][col]\n        if column_sum == target:\n            return True\n    \n    return False\n\ndef g(target = 0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n", "emb": null, "idx_generation": 190, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the sum of any row or column in the matrix is equal to the target value.\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    \n    for col in range(len(matrix[0])):\n        column_sum = 0\n        for row in range(len(matrix)):\n            column_sum += matrix[row][col]\n        if column_sum == target:\n            return True\n    \n    return False", "solution_func": "def g(target = 0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, substring='abc') -> bool:\n    \"\"\"Check if the substring appears in the string in any order.\"\"\"\n    char_count_string = {}\n    char_count_substring = {}\n    \n    for char in string:\n        if char in char_count_string:\n            char_count_string[char] += 1\n        else:\n            char_count_string[char] = 1\n    \n    for char in substring:\n        if char in char_count_substring:\n            char_count_substring[char] += 1\n        else:\n            char_count_substring[char] = 1\n    \n    for char in char_count_substring:\n        if char_count_substring[char] > char_count_string.get(char, 0):\n            return False\n    \n    return True\n\ndef g(substring = 'abc'):\n    return 'abracadabra'\n\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 190, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, substring='abc') -> bool:\n    \"\"\"Check if the substring appears in the string in any order.\"\"\"\n    char_count_string = {}\n    char_count_substring = {}\n    \n    for char in string:\n        if char in char_count_string:\n            char_count_string[char] += 1\n        else:\n            char_count_string[char] = 1\n    \n    for char in substring:\n        if char in char_count_substring:\n            char_count_substring[char] += 1\n        else:\n            char_count_substring[char] = 1\n    \n    for char in char_count_substring:\n        if char_count_substring[char] > char_count_string.get(char, 0):\n            return False\n    \n    return True", "solution_func": "def g(substring = 'abc'):\n    return 'abracadabra'", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target='world', n=3) -> bool:\n    \"\"\"Check if the target string appears n or more times in the given string.\"\"\"\n    return s.count(target) >= n\ndef g(target='world', n=3):\n    return ''.join([target for _ in range(n)])\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 190, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='world', n=3) -> bool:\n    \"\"\"Check if the target string appears n or more times in the given string.\"\"\"\n    return s.count(target) >= n", "solution_func": "def g(target='world', n=3):\n    return ''.join([target for _ in range(n)])", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target number.\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    num_set = set(nums)\n    for num in nums:\n        complement = 10 - num\n        if complement in num_set:\n            return True\n    return False\nassert f(g())\n", "emb": null, "idx_generation": 191, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target number.\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    num_set = set(nums)\n    for num in nums:\n        complement = 10 - num\n        if complement in num_set:\n            return True\n    return False", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the given string contains any repeated substrings of length n.\"\"\"\n    for i in range(len(s) - n):\n        substring = s[i:i+n]\n        if s[i+n:].count(substring) > 0:\n            return True\n    return False\ndef g(n=3):\n    s = \"abracadabra\"\n    for i in range(len(s) - n):\n        substring = s[i:i+n]\n        if s[i+n:].count(substring) > 0:\n            return True\n    return False\nassert f(g())\n", "emb": null, "idx_generation": 191, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the given string contains any repeated substrings of length n.\"\"\"\n    for i in range(len(s) - n):\n        substring = s[i:i+n]\n        if s[i+n:].count(substring) > 0:\n            return True\n    return False", "solution_func": "def g(n=3):\n    s = \"abracadabra\"\n    for i in range(len(s) - n):\n        substring = s[i:i+n]\n        if s[i+n:].count(substring) > 0:\n            return True\n    return False", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are three numbers in the list that add up to the target number.\"\"\"\n    num_set = set(nums)\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            complement = target - nums[i] - nums[j]\n            if complement in num_set:\n                return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    num_set = set(nums)\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            complement = 0 - nums[i] - nums[j]\n            if complement in num_set:\n                return True\n    return False\nassert f(g())\n", "emb": null, "idx_generation": 191, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are three numbers in the list that add up to the target number.\"\"\"\n    num_set = set(nums)\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            complement = target - nums[i] - nums[j]\n            if complement in num_set:\n                return True\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    num_set = set(nums)\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            complement = 0 - nums[i] - nums[j]\n            if complement in num_set:\n                return True\n    return False", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: int, y: int, z: int, s=297) -> bool:\n    \"\"\"Find three numbers that their sum is equal to a specific value.\"\"\"\n    return s == x + y + z\ndef g(s = 297):\n    return [s // 3] * 3\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 191, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, y: int, z: int, s=297) -> bool:\n    \"\"\"Find three numbers that their sum is equal to a specific value.\"\"\"\n    return s == x + y + z", "solution_func": "def g(s = 297):\n    return [s // 3] * 3", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: List[int], n=457, s=489) -> bool:\n    \"\"\"Construct a list of n integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s\ndef g(n = 457, s = 489):\n    return [s // n] * n\nassert f(g())\n", "emb": null, "idx_generation": 191, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], n=457, s=489) -> bool:\n    \"\"\"Construct a list of n integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s", "solution_func": "def g(n = 457, s = 489):\n    return [s // n] * n", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, substring='abc', count=5, length=100) -> bool:\n    \"\"\"Find a string with a certain number of occurrences of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length\ndef g(substring = 'abc', count = 5, length = 100):\n    c = chr(1 + max(ord(c) for c in (substring or \"abc\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * c\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 191, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, substring='abc', count=5, length=100) -> bool:\n    \"\"\"Find a string with a certain number of occurrences of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length", "solution_func": "def g(substring = 'abc', count = 5, length = 100):\n    c = chr(1 + max(ord(c) for c in (substring or \"abc\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * c", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(li: List[int], n=4) -> bool:\n    \"\"\"Given a list of integers and n, check if the sum of any n consecutive integers in the list is 0.\"\"\"\n    return any(sum(li[i:i+n]) == 0 for i in range(len(li)-n+1))\ndef g(n=4):\n    return [1, -1] * (n // 2)\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 191, "target_skills": null, "problem_func": "from typing import*\ndef f(li: List[int], n=4) -> bool:\n    \"\"\"Given a list of integers and n, check if the sum of any n consecutive integers in the list is 0.\"\"\"\n    return any(sum(li[i:i+n]) == 0 for i in range(len(li)-n+1))", "solution_func": "def g(n=4):\n    return [1, -1] * (n // 2)", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, a=3, b=2) -> bool:\n    \"\"\"Check if the string can be divided into two substrings, each containing a consecutive sequence of 'a's and 'b's respectively.\"\"\"\n    return s.count('a') == a and s.count('b') == b and s.index('b') - s.index('a') == a\ndef g(a=3, b=2):\n    return 'a' * a + 'b' * b\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 191, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, a=3, b=2) -> bool:\n    \"\"\"Check if the string can be divided into two substrings, each containing a consecutive sequence of 'a's and 'b's respectively.\"\"\"\n    return s.count('a') == a and s.count('b') == b and s.index('b') - s.index('a') == a", "solution_func": "def g(a=3, b=2):\n    return 'a' * a + 'b' * b", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=5, b=3) -> bool:\n    \"\"\"Check if n can be represented as the sum of a and b.\"\"\"\n    return n == a + b\ndef g(a=5, b=3):\n    return a + b\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 191, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=5, b=3) -> bool:\n    \"\"\"Check if n can be represented as the sum of a and b.\"\"\"\n    return n == a + b", "solution_func": "def g(a=5, b=3):\n    return a + b", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\ndef f(x: int, a=10) -> bool:\n    \"\"\"Check if x is a prime number.\"\"\"\n    return all(x % i != 0 for i in range(2, x))\ndef g(a = 10):\n    import random\n    while True:\n        x = random.randint(2, a)\n        if f(x):\n            return x\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 191, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(x: int, a=10) -> bool:\n    \"\"\"Check if x is a prime number.\"\"\"\n    return all(x % i != 0 for i in range(2, x))", "solution_func": "def g(a = 10):\n    import random\n    while True:\n        x = random.randint(2, a)\n        if f(x):\n            return x", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, k=2) -> bool:\n    \"\"\"\n    Check if the sum of the k largest elements in the array is equal to the sum of the k smallest elements in the array.\n    \"\"\"\n    assert len(arr) >= k, 'Hint: Array length should be larger than k'\n    sorted_arr = np.sort(arr)\n    return np.sum(sorted_arr[-k:]) == np.sum(sorted_arr[:k])\n\ndef g(arr: np.ndarray):\n    return arr\n\narr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nassert f(g(arr))\n", "emb": null, "idx_generation": 192, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, k=2) -> bool:\n    \"\"\"\n    Check if the sum of the k largest elements in the array is equal to the sum of the k smallest elements in the array.\n    \"\"\"\n    assert len(arr) >= k, 'Hint: Array length should be larger than k'\n    sorted_arr = np.sort(arr)\n    return np.sum(sorted_arr[-k:]) == np.sum(sorted_arr[:k])", "solution_func": "def g(arr: np.ndarray):\n    return arr\n\narr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, a=\"Hello\", b=\"World\") -> bool:\n    \"\"\"\n    Check if the concatenation of two strings is a palindrome.\n    \"\"\"\n    assert len(a) > 0 and len(b) > 0, 'Hint: Both strings should not be empty'\n    return (a + b) == (a + b)[::-1]\n\ndef g(a=\"Hello\", b=\"World\"):\n    return a, b\n\nassert f(g())\n", "emb": null, "idx_generation": 192, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=\"Hello\", b=\"World\") -> bool:\n    \"\"\"\n    Check if the concatenation of two strings is a palindrome.\n    \"\"\"\n    assert len(a) > 0 and len(b) > 0, 'Hint: Both strings should not be empty'\n    return (a + b) == (a + b)[::-1]", "solution_func": "def g(a=\"Hello\", b=\"World\"):\n    return a, b", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport re\n\ndef f(s: str, pattern='^[A-Za-z0-9_]*$') -> bool:\n    \"\"\"\n    Check if a string only contains alphanumeric characters and underscores.\n    \"\"\"\n    return bool(re.match(pattern, s))\n\ndef g(s: str):\n    return s\n\nassert f(g(\"Hello_World\"))\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 192, "target_skills": null, "problem_func": "from typing import*\nimport re\n\ndef f(s: str, pattern='^[A-Za-z0-9_]*$') -> bool:\n    \"\"\"\n    Check if a string only contains alphanumeric characters and underscores.\n    \"\"\"\n    return bool(re.match(pattern, s))", "solution_func": "def g(s: str):\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(arr: List[int], target_sum=100, num_elements=4) -> bool:\n    \"\"\"Check if there exists a subset of num_elements elements in the array that sum up to target_sum.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target_sum for comb in combinations(arr, num_elements))\ndef g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target_sum=100, num_elements=4):\n    from itertools import combinations\n    for comb in combinations(arr, num_elements):\n        if sum(comb) == target_sum:\n            return True\n    return False\nassert f(g())\n", "emb": null, "idx_generation": 192, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(arr: List[int], target_sum=100, num_elements=4) -> bool:\n    \"\"\"Check if there exists a subset of num_elements elements in the array that sum up to target_sum.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target_sum for comb in combinations(arr, num_elements))", "solution_func": "def g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target_sum=100, num_elements=4):\n    from itertools import combinations\n    for comb in combinations(arr, num_elements):\n        if sum(comb) == target_sum:\n            return True\n    return False", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], row=3, col=3) -> bool:\n    \"\"\"Check if the element at the given row and column of the matrix is equal to its row number multiplied by its column number.\"\"\"\n    return matrix[row][col] == row * col\ndef g(matrix=[[0, 0, 0], [0, 1, 2], [0, 2, 4], [0, 3, 6]]):\n    return matrix[3][3]\nassert f(g())\n", "emb": null, "idx_generation": 192, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], row=3, col=3) -> bool:\n    \"\"\"Check if the element at the given row and column of the matrix is equal to its row number multiplied by its column number.\"\"\"\n    return matrix[row][col] == row * col", "solution_func": "def g(matrix=[[0, 0, 0], [0, 1, 2], [0, 2, 4], [0, 3, 6]]):\n    return matrix[3][3]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s1: str, s2: str, substring='python') -> bool:\n    \"\"\"Check if the substring appears in both s1 and s2.\"\"\"\n    return substring in s1 and substring in s2\ndef g(s1='I love Python programming', s2='Python is a great language'):\n    return s1 + ' ' + s2\nassert f(g())\n", "emb": null, "idx_generation": 192, "target_skills": null, "problem_func": "from typing import*\ndef f(s1: str, s2: str, substring='python') -> bool:\n    \"\"\"Check if the substring appears in both s1 and s2.\"\"\"\n    return substring in s1 and substring in s2", "solution_func": "def g(s1='I love Python programming', s2='Python is a great language'):\n    return s1 + ' ' + s2", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=26, num_count=5) -> bool:\n    \"\"\"Find a list of unique integers that sums up to the target and has a certain number of elements\"\"\"\n    return len(nums) == num_count and sum(nums) == target and len(set(nums)) == num_count\ndef g(target=26, num_count=5):\n    return list(range(1, num_count+1))\nassert f(g())\n", "emb": null, "idx_generation": 192, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=26, num_count=5) -> bool:\n    \"\"\"Find a list of unique integers that sums up to the target and has a certain number of elements\"\"\"\n    return len(nums) == num_count and sum(nums) == target and len(set(nums)) == num_count", "solution_func": "def g(target=26, num_count=5):\n    return list(range(1, num_count+1))", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, prefix='Hello', suffix='World') -> bool:\n    \"\"\"Check if a given string starts with a prefix and ends with a suffix\"\"\"\n    return s.startswith(prefix) and s.endswith(suffix)\ndef g(prefix='Hello', suffix='World'):\n    return prefix + \"Python\" + suffix\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 192, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, prefix='Hello', suffix='World') -> bool:\n    \"\"\"Check if a given string starts with a prefix and ends with a suffix\"\"\"\n    return s.startswith(prefix) and s.endswith(suffix)", "solution_func": "def g(prefix='Hello', suffix='World'):\n    return prefix + \"Python\" + suffix", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, num_count=10) -> bool:\n    \"\"\"Check if there is a combination of numbers in the list that add up to the target\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, num_count))\ndef g(target=100, num_count=10):\n    return list(range(1, num_count+1))\nassert f(g())\n", "emb": null, "idx_generation": 192, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, num_count=10) -> bool:\n    \"\"\"Check if there is a combination of numbers in the list that add up to the target\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, num_count))", "solution_func": "def g(target=100, num_count=10):\n    return list(range(1, num_count+1))", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, m: int, a=3, b=4) -> bool:\n    \"\"\"Check if n is a multiple of a and m is a multiple of b.\"\"\"\n    return n % a == 0 and m % b == 0\ndef g(a = 3, b = 4):\n    return (a * b, a * b + a, a * b + b, a * b + a + b)\nassert f(g())\n", "emb": null, "idx_generation": 192, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m: int, a=3, b=4) -> bool:\n    \"\"\"Check if n is a multiple of a and m is a multiple of b.\"\"\"\n    return n % a == 0 and m % b == 0", "solution_func": "def g(a = 3, b = 4):\n    return (a * b, a * b + a, a * b + b, a * b + a + b)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(t: str, s='hello world') -> bool:\n    \"\"\"Given a string s, replace all occurrences of 'l' with 'x' and all occurrences of 'o' with 'y'\"\"\"\n    assert t.replace('x', 'l') == s, f'expecting `{s}`'\n    return t.count('l') == s.count('x') and t.count('o') == s.count('y')\ndef g(s='hello world'):\n    return s.replace('l', 'x').replace('o', 'y')\nassert f(g())\n", "emb": null, "idx_generation": 193, "target_skills": null, "problem_func": "from typing import*\ndef f(t: str, s='hello world') -> bool:\n    \"\"\"Given a string s, replace all occurrences of 'l' with 'x' and all occurrences of 'o' with 'y'\"\"\"\n    assert t.replace('x', 'l') == s, f'expecting `{s}`'\n    return t.count('l') == s.count('x') and t.count('o') == s.count('y')", "solution_func": "def g(s='hello world'):\n    return s.replace('l', 'x').replace('o', 'y')", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(t: str, s='python programming') -> bool:\n    \"\"\"Given a string s, remove all spaces and make it lowercase\"\"\"\n    assert t == s.replace(' ', ''), f'expecting `{s.replace(' ', '')}`'\n    return len(t) == len(s) - s.count(' ')\ndef g(s='python programming'):\n    return s.replace(' ', '').lower()\nassert f(g())\n", "emb": null, "idx_generation": 193, "target_skills": null, "problem_func": "from typing import*\ndef f(t: str, s='python programming') -> bool:\n    \"\"\"Given a string s, remove all spaces and make it lowercase\"\"\"\n    assert t == s.replace(' ', ''), f'expecting `{s.replace(' ', '')}`'\n    return len(t) == len(s) - s.count(' ')", "solution_func": "def g(s='python programming'):\n    return s.replace(' ', '').lower()", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(t: List[int], s=[1, 2, 3, 4, 5, 6, 7]) -> bool:\n    \"\"\"Given a list of integers s, remove all even numbers and return the resulting list\"\"\"\n    assert t == [i for i in s if i % 2 != 0], f'expecting `{[i for i in s if i % 2 != 0]}`'\n    return all(i % 2 != 0 for i in t)\ndef g(s=[1, 2, 3, 4, 5, 6, 7]):\n    return [i for i in s if i % 2 != 0]\nassert f(g())", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 193, "target_skills": null, "problem_func": "from typing import*\ndef f(t: List[int], s=[1, 2, 3, 4, 5, 6, 7]) -> bool:\n    \"\"\"Given a list of integers s, remove all even numbers and return the resulting list\"\"\"\n    assert t == [i for i in s if i % 2 != 0], f'expecting `{[i for i in s if i % 2 != 0]}`'\n    return all(i % 2 != 0 for i in t)", "solution_func": "def g(s=[1, 2, 3, 4, 5, 6, 7]):\n    return [i for i in s if i % 2 != 0]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, nums=[232, 347, 574, 712, 893], upper_bound=1000) -> bool:\n    \"\"\"Check if n is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef g(nums=[232, 347, 574, 712, 893], upper_bound=1000):\n    return max(nums)\nassert f(g())\n", "emb": null, "idx_generation": 193, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[232, 347, 574, 712, 893], upper_bound=1000) -> bool:\n    \"\"\"Check if n is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "solution_func": "def g(nums=[232, 347, 574, 712, 893], upper_bound=1000):\n    return max(nums)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if s is a palindrome.\"\"\"\n    return s == s[::-1] and len(s) == n\ndef g(n=3):\n    return str(n) * n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 193, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if s is a palindrome.\"\"\"\n    return s == s[::-1] and len(s) == n", "solution_func": "def g(n=3):\n    return str(n) * n", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Check if any two numbers in the list add up to the target.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\ndef g(target=100):\n    return [i for i in range(target)]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 193, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Check if any two numbers in the list add up to the target.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False", "solution_func": "def g(target=100):\n    return [i for i in range(target)]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, sub: str, n=2) -> bool:\n    \"\"\"Check if the sub string appears at least n times in s\"\"\"\n    return s.count(sub) >= n\ndef g(sub='abc', n=2):\n    return sub * n\nassert f(g())\n", "emb": null, "idx_generation": 193, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, sub: str, n=2) -> bool:\n    \"\"\"Check if the sub string appears at least n times in s\"\"\"\n    return s.count(sub) >= n", "solution_func": "def g(sub='abc', n=2):\n    return sub * n", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: List[int], n=10, m=5) -> bool:\n    \"\"\"Check if the list x contains exactly n numbers that are divisible by m\"\"\"\n    return len([num for num in x if num % m == 0]) == n\ndef g(n=10, m=5):\n    return [m * i for i in range(1, n + 1)]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 193, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], n=10, m=5) -> bool:\n    \"\"\"Check if the list x contains exactly n numbers that are divisible by m\"\"\"\n    return len([num for num in x if num % m == 0]) == n", "solution_func": "def g(n=10, m=5):\n    return [m * i for i in range(1, n + 1)]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, sub: str) -> bool:\n    \"\"\"Check if the sub string appears at least twice in s\"\"\"\n    return s.count(sub) >= 2\ndef g(sub='abc'):\n    return sub + sub\nassert f(g())\n", "emb": null, "idx_generation": 193, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, sub: str) -> bool:\n    \"\"\"Check if the sub string appears at least twice in s\"\"\"\n    return s.count(sub) >= 2", "solution_func": "def g(sub='abc'):\n    return sub + sub", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(lb: List[bool], trips=[[1, 1, 1], [1, 0, 0], [1, 1, 1], [0, 0, 0]]) -> bool:\n    \"\"\"\n    Given a list of lists of triples of integers, return True for each list with a total of less than 2 and\n    False for each other list.\n    \"\"\"\n    return len(lb) == len(trips) and all((b is True if sum(s) < 2 else b is False for (b, s) in zip(lb, trips)))\ndef g(trips = [[1, 1, 1], [1, 0, 0], [1, 1, 1], [0, 0, 0]]):\n    return [sum(s) < 2 for s in trips]\nassert f(g())\n", "emb": [1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 193, "target_skills": null, "problem_func": "from typing import*\ndef f(lb: List[bool], trips=[[1, 1, 1], [1, 0, 0], [1, 1, 1], [0, 0, 0]]) -> bool:\n    \"\"\"\n    Given a list of lists of triples of integers, return True for each list with a total of less than 2 and\n    False for each other list.\n    \"\"\"\n    return len(lb) == len(trips) and all((b is True if sum(s) < 2 else b is False for (b, s) in zip(lb, trips)))", "solution_func": "def g(trips = [[1, 1, 1], [1, 0, 0], [1, 1, 1], [0, 0, 0]]):\n    return [sum(s) < 2 for s in trips]", "map_ix": [1, 0, 1, 0, 0, 0, 0, 0, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=50) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target number, find a pair of numbers (one from each row) such that their sum is equal to the target.\n    \"\"\"\n    for row1 in matrix:\n        for row2 in matrix:\n            for num1 in row1:\n                for num2 in row2:\n                    if num1 + num2 == target:\n                        return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=50):\n    return matrix\n\nassert f(g())\n", "emb": null, "idx_generation": 194, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=50) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target number, find a pair of numbers (one from each row) such that their sum is equal to the target.\n    \"\"\"\n    for row1 in matrix:\n        for row2 in matrix:\n            for num1 in row1:\n                for num2 in row2:\n                    if num1 + num2 == target:\n                        return True\n    return False", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=50):\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, substring=\"abc\") -> bool:\n    \"\"\"\n    Given a string and a substring, determine if the substring is present in the string.\n    \"\"\"\n    return substring in string\n\ndef g(string=\"abcdefg\", substring=\"abc\"):\n    return string\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 194, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, substring=\"abc\") -> bool:\n    \"\"\"\n    Given a string and a substring, determine if the substring is present in the string.\n    \"\"\"\n    return substring in string", "solution_func": "def g(string=\"abcdefg\", substring=\"abc\"):\n    return string", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find a pair of numbers such that their product is equal to the target.\n    \"\"\"\n    for num1 in nums:\n        for num2 in nums:\n            if num1 * num2 == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=10):\n    return nums\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 194, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find a pair of numbers such that their product is equal to the target.\n    \"\"\"\n    for num1 in nums:\n        for num2 in nums:\n            if num1 * num2 == target:\n                return True\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=10):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: str, a=4, b=3) -> bool:\n    \"\"\"Check if the given string contains a substring of the form \"a\" * n + \"b\" * n\"\"\"\n    return (\"a\" * a + \"b\" * b) in x\ndef g(a=4, b=3):\n    return \"a\" * a + \"b\" * b + \"a\"\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 194, "target_skills": null, "problem_func": "from typing import*\ndef f(x: str, a=4, b=3) -> bool:\n    \"\"\"Check if the given string contains a substring of the form \"a\" * n + \"b\" * n\"\"\"\n    return (\"a\" * a + \"b\" * b) in x", "solution_func": "def g(a=4, b=3):\n    return \"a\" * a + \"b\" * b + \"a\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, m=10, p=5) -> bool:\n    \"\"\"Check if the given number is divisible by p and has exactly m factors\"\"\"\n    factors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors += 1\n    return n % p == 0 and factors == m\ndef g(m=10, p=5):\n    n = m * p\n    return n\nassert f(g())\n", "emb": null, "idx_generation": 194, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m=10, p=5) -> bool:\n    \"\"\"Check if the given number is divisible by p and has exactly m factors\"\"\"\n    factors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors += 1\n    return n % p == 0 and factors == m", "solution_func": "def g(m=10, p=5):\n    n = m * p\n    return n", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(x: int, a=2, b=5) -> bool:\n    \"\"\"Check if the given number is between a^b and b^a\"\"\"\n    return a ** b < x < b ** a\ndef g(a=2, b=5):\n    return math.ceil((a ** b + b ** a) / 2)\nassert f(g())\n", "emb": null, "idx_generation": 194, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: int, a=2, b=5) -> bool:\n    \"\"\"Check if the given number is between a^b and b^a\"\"\"\n    return a ** b < x < b ** a", "solution_func": "def g(a=2, b=5):\n    return math.ceil((a ** b + b ** a) / 2)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(num_list: List[int], target: int, start=0, end=None) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that sum up to the target.\"\"\"\n    if end is None:\n        end = len(num_list) - 1\n    while start < end:\n        if num_list[start] + num_list[end] == target:\n            return True\n        elif num_list[start] + num_list[end] < target:\n            start += 1\n        else:\n            end -= 1\n    return False\n\ndef g(num_list: List[int], target: int):\n    return num_list, target\n\nassert f(*g())\n", "emb": null, "idx_generation": 194, "target_skills": null, "problem_func": "from typing import*\ndef f(num_list: List[int], target: int, start=0, end=None) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that sum up to the target.\"\"\"\n    if end is None:\n        end = len(num_list) - 1\n    while start < end:\n        if num_list[start] + num_list[end] == target:\n            return True\n        elif num_list[start] + num_list[end] < target:\n            start += 1\n        else:\n            end -= 1\n    return False", "solution_func": "def g(num_list: List[int], target: int):\n    return num_list, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is symmetric.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix: List[List[int]]):\n    return matrix\n\nassert f(g())\n", "emb": null, "idx_generation": 194, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is symmetric.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "solution_func": "def g(matrix: List[List[int]]):\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom collections import Counter\n\ndef f(s: str, k: int) -> bool:\n    \"\"\"Check if there are exactly k distinct characters in the string.\"\"\"\n    count = Counter(s)\n    return len(count) == k\n\ndef g(s: str, k: int):\n    return s, k\n\nassert f(*g())\n", "emb": null, "idx_generation": 194, "target_skills": null, "problem_func": "from typing import*\nfrom collections import Counter\n\ndef f(s: str, k: int) -> bool:\n    \"\"\"Check if there are exactly k distinct characters in the string.\"\"\"\n    count = Counter(s)\n    return len(count) == k", "solution_func": "def g(s: str, k: int):\n    return s, k", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport pandas as pd\n\ndef f(df: pd.DataFrame, threshold=0.5) -> bool:\n    \"\"\"Check if the average of all values in the dataframe is above a certain threshold\"\"\"\n    return df.mean().mean() > threshold\n\ndef g(threshold=0.5):\n    data = [[0.6, 0.7, 0.8], [0.9, 0.4, 0.2], [0.3, 0.1, 0.5]]\n    df = pd.DataFrame(data)\n    return df\n\nassert f(g())\n", "emb": null, "idx_generation": 194, "target_skills": null, "problem_func": "from typing import*\nimport pandas as pd\n\ndef f(df: pd.DataFrame, threshold=0.5) -> bool:\n    \"\"\"Check if the average of all values in the dataframe is above a certain threshold\"\"\"\n    return df.mean().mean() > threshold", "solution_func": "def g(threshold=0.5):\n    data = [[0.6, 0.7, 0.8], [0.9, 0.4, 0.2], [0.3, 0.1, 0.5]]\n    df = pd.DataFrame(data)\n    return df", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6]) -> bool:\n    \"\"\"Check if the sum of the first n elements in the list nums is less than 10.\"\"\"\n    return sum(nums[:n]) < 10\ndef g(nums=[1, 2, 3, 4, 5, 6]):\n    return len(nums)\nassert f(g())\n", "emb": null, "idx_generation": 195, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6]) -> bool:\n    \"\"\"Check if the sum of the first n elements in the list nums is less than 10.\"\"\"\n    return sum(nums[:n]) < 10", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6]):\n    return len(nums)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6]) -> bool:\n    \"\"\"Check if the product of the first n elements in the list nums is greater than 100.\"\"\"\n    product = 1\n    for i in range(n):\n        product *= nums[i]\n    return product > 100\ndef g(nums=[1, 2, 3, 4, 5, 6]):\n    return len(nums)\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 195, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6]) -> bool:\n    \"\"\"Check if the product of the first n elements in the list nums is greater than 100.\"\"\"\n    product = 1\n    for i in range(n):\n        product *= nums[i]\n    return product > 100", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6]):\n    return len(nums)", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target='world', n=5) -> bool:\n    \"\"\"Check if the last n characters of the string s are equal to the target string.\"\"\"\n    return s[-n:] == target\ndef g(target='world', n=5):\n    return 'Hello, ' + target\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 195, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='world', n=5) -> bool:\n    \"\"\"Check if the last n characters of the string s are equal to the target string.\"\"\"\n    return s[-n:] == target", "solution_func": "def g(target='world', n=5):\n    return 'Hello, ' + target", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport itertools\n\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Given a list of numbers, find a combination of numbers that adds up to the target.\"\"\"\n    for r in range(1, len(numbers) + 1):\n        for combination in itertools.combinations(numbers, r):\n            if sum(combination) == target:\n                return True\n    return False\n\ndef g(numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=100):\n    return numbers\n\nassert f(g())\n", "emb": null, "idx_generation": 195, "target_skills": null, "problem_func": "from typing import*\nimport itertools\n\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Given a list of numbers, find a combination of numbers that adds up to the target.\"\"\"\n    for r in range(1, len(numbers) + 1):\n        for combination in itertools.combinations(numbers, r):\n            if sum(combination) == target:\n                return True\n    return False", "solution_func": "def g(numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=100):\n    return numbers", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the sum of each row and each column in a matrix is equal to the target.\"\"\"\n    row_sums = [sum(row) == target for row in matrix]\n    col_sums = [sum(col) == target for col in zip(*matrix)]\n    return all(row_sums) and all(col_sums)\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=0):\n    return matrix\n\nassert f(g())\n", "emb": null, "idx_generation": 195, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the sum of each row and each column in a matrix is equal to the target.\"\"\"\n    row_sums = [sum(row) == target for row in matrix]\n    col_sums = [sum(col) == target for col in zip(*matrix)]\n    return all(row_sums) and all(col_sums)", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=0):\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(radius: float, volume=1000) -> bool:\n    \"\"\"Check if the volume of a sphere is equal to the target volume.\"\"\"\n    calculated_volume = (4/3) * math.pi * (radius ** 3)\n    return calculated_volume == volume\n\ndef g(radius=5, volume=1000):\n    return radius\n\nassert f(g())\n", "emb": null, "idx_generation": 195, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(radius: float, volume=1000) -> bool:\n    \"\"\"Check if the volume of a sphere is equal to the target volume.\"\"\"\n    calculated_volume = (4/3) * math.pi * (radius ** 3)\n    return calculated_volume == volume", "solution_func": "def g(radius=5, volume=1000):\n    return radius", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=17, b=3) -> bool:\n    \"\"\"Check if the square root of n is equal to the sum of a and b\"\"\"\n    return math.sqrt(n) == a + b\ndef g(a=17, b=3):\n    return (a + b) ** 2\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 195, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, a=17, b=3) -> bool:\n    \"\"\"Check if the square root of n is equal to the sum of a and b\"\"\"\n    return math.sqrt(n) == a + b", "solution_func": "def g(a=17, b=3):\n    return (a + b) ** 2", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=5, m=3) -> bool:\n    \"\"\"Check if s contains the substring 'hello' n times and the substring 'world' m times\"\"\"\n    return s.count('hello') == n and s.count('world') == m\ndef g(n=5, m=3):\n    return 'hello' * n + 'world' * m\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 195, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=5, m=3) -> bool:\n    \"\"\"Check if s contains the substring 'hello' n times and the substring 'world' m times\"\"\"\n    return s.count('hello') == n and s.count('world') == m", "solution_func": "def g(n=5, m=3):\n    return 'hello' * n + 'world' * m", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, n=5) -> bool:\n    \"\"\"Check if there are n distinct numbers in nums that sum up to the target\"\"\"\n    return len(set(nums)) >= n and any(sum(i) == target for i in itertools.combinations(nums, n))\ndef g(target=100, n=5):\n    nums = list(range(1, target))\n    return nums[:n-1] + [target - sum(nums[:n-1])]\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 195, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, n=5) -> bool:\n    \"\"\"Check if there are n distinct numbers in nums that sum up to the target\"\"\"\n    return len(set(nums)) >= n and any(sum(i) == target for i in itertools.combinations(nums, n))", "solution_func": "def g(target=100, n=5):\n    nums = list(range(1, target))\n    return nums[:n-1] + [target - sum(nums[:n-1])]", "map_ix": [0, 1, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry']) -> bool:\n    \"\"\"\n    Check if a string contains all the substrings in a specific order\n    \"\"\"\n    indices = [s.find(sub) for sub in substrings]\n    return all((indices[i] < indices[i+1] for i in range(len(indices)-1)))\ndef g(substrings=['apple', 'banana', 'cherry']):\n    return \"\".join(substrings)\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 195, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry']) -> bool:\n    \"\"\"\n    Check if a string contains all the substrings in a specific order\n    \"\"\"\n    indices = [s.find(sub) for sub in substrings]\n    return all((indices[i] < indices[i+1] for i in range(len(indices)-1)))", "solution_func": "def g(substrings=['apple', 'banana', 'cherry']):\n    return \"\".join(substrings)", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=1000, b=5000, lower_bound=100) -> bool:\n    \"\"\"Check if n is a multiple of a and b, and if n is greater than or equal to lower_bound.\"\"\"\n    return n % a == 0 and n % b == 0 and n >= lower_bound\ndef g(a=1000, b=5000, lower_bound=100):\n    return a * b\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 196, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=1000, b=5000, lower_bound=100) -> bool:\n    \"\"\"Check if n is a multiple of a and b, and if n is greater than or equal to lower_bound.\"\"\"\n    return n % a == 0 and n % b == 0 and n >= lower_bound", "solution_func": "def g(a=1000, b=5000, lower_bound=100):\n    return a * b", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, a=100, b=200, c=3000) -> bool:\n    \"\"\"Check if n is a perfect square and if n is in the range between a and b, inclusive, or is equal to c.\"\"\"\n    return sqrt(n).is_integer() and (a <= n <= b or n == c)\ndef g(a=100, b=200, c=3000):\n    return a * b\nassert f(g())\n", "emb": null, "idx_generation": 196, "target_skills": null, "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, a=100, b=200, c=3000) -> bool:\n    \"\"\"Check if n is a perfect square and if n is in the range between a and b, inclusive, or is equal to c.\"\"\"\n    return sqrt(n).is_integer() and (a <= n <= b or n == c)", "solution_func": "def g(a=100, b=200, c=3000):\n    return a * b", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, substrings=['hello', 'world', 'python']) -> bool:\n    \"\"\"Check if s contains all the substrings in reverse order.\"\"\"\n    return all((sub[::-1] in s for sub in substrings))\ndef g(substrings=['hello', 'world', 'python']):\n    return \"\".join(substrings[::-1])\nassert f(g())\n", "emb": null, "idx_generation": 196, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substrings=['hello', 'world', 'python']) -> bool:\n    \"\"\"Check if s contains all the substrings in reverse order.\"\"\"\n    return all((sub[::-1] in s for sub in substrings))", "solution_func": "def g(substrings=['hello', 'world', 'python']):\n    return \"\".join(substrings[::-1])", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target: str) -> bool:\n    \"\"\"\n    Check if the given string is a substring of the target string.\n    \"\"\"\n    return s in target\ndef g(target: str):\n    return target[:len(target)//2]\nassert f(g(target='puzzle'), target='this is a puzzle')\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 196, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target: str) -> bool:\n    \"\"\"\n    Check if the given string is a substring of the target string.\n    \"\"\"\n    return s in target", "solution_func": "def g(target: str):\n    return target[:len(target)//2]", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(li: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are two numbers in the given list that sum up to the target number.\n    \"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i] + li[j] == target:\n                return True\n    return False\ndef g(target: int):\n    return [1, 2, 3, 4, 5]\nassert f(g(target=9))\n", "emb": null, "idx_generation": 196, "target_skills": null, "problem_func": "from typing import*\ndef f(li: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are two numbers in the given list that sum up to the target number.\n    \"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i] + li[j] == target:\n                return True\n    return False", "solution_func": "def g(target: int):\n    return [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(li: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains duplicate elements.\n    \"\"\"\n    return len(li) != len(set(li))\ndef g():\n    return [1, 2, 3, 4, 5, 5]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 196, "target_skills": null, "problem_func": "from typing import*\ndef f(li: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains duplicate elements.\n    \"\"\"\n    return len(li) != len(set(li))", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 5]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n=0, m=0) -> bool:\n    \"\"\"Check if s is a palindrome and its length is greater than or equal to n and less than or equal to m\"\"\"\n    return s == s[::-1] and n <= len(s) <= m\ndef g(n = 0, m = 0):\n    return \"racecar\" if n == 0 and m == 0 else \"level\" if n == 1 and m == 5 else \"madam\" if n == 4 and m == 6 else \"\"\nassert f(g())\n", "emb": null, "idx_generation": 196, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=0, m=0) -> bool:\n    \"\"\"Check if s is a palindrome and its length is greater than or equal to n and less than or equal to m\"\"\"\n    return s == s[::-1] and n <= len(s) <= m", "solution_func": "def g(n = 0, m = 0):\n    return \"racecar\" if n == 0 and m == 0 else \"level\" if n == 1 and m == 5 else \"madam\" if n == 4 and m == 6 else \"\"", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(n: int, k=0) -> bool:\n    \"\"\"Check if n is a prime number and its square root is greater than or equal to k\"\"\"\n    return all(n % i != 0 for i in range(2, int(math.sqrt(n)) + 1)) and math.sqrt(n) >= k\ndef g(k = 0):\n    return 2 if k == 0 else 3 if k == 1 else 5 if k == 2 else 7 if k == 3 else 11 if k == 4 else 13\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 196, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, k=0) -> bool:\n    \"\"\"Check if n is a prime number and its square root is greater than or equal to k\"\"\"\n    return all(n % i != 0 for i in range(2, int(math.sqrt(n)) + 1)) and math.sqrt(n) >= k", "solution_func": "def g(k = 0):\n    return 2 if k == 0 else 3 if k == 1 else 5 if k == 2 else 7 if k == 3 else 11 if k == 4 else 13", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, b: bool=True) -> bool:\n    \"\"\"Check if s is a palindrome and if b is True, check if the string is all uppercase\"\"\"\n    return s == s[::-1] and (not b or s.isupper())\ndef g(b = True):\n    return \"MADAM\" if b else \"level\" if not b else \"Racecar\" if b else \"\"\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 196, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, b: bool=True) -> bool:\n    \"\"\"Check if s is a palindrome and if b is True, check if the string is all uppercase\"\"\"\n    return s == s[::-1] and (not b or s.isupper())", "solution_func": "def g(b = True):\n    return \"MADAM\" if b else \"level\" if not b else \"Racecar\" if b else \"\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, substring='abc', count=3) -> bool:\n    \"\"\"\n    Check if the given string contains the given substring repeated count times consecutively.\n    \"\"\"\n    return substring * count in string\ndef g(substring='abc', count=3):\n    return substring * count\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 196, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, substring='abc', count=3) -> bool:\n    \"\"\"\n    Check if the given string contains the given substring repeated count times consecutively.\n    \"\"\"\n    return substring * count in string", "solution_func": "def g(substring='abc', count=3):\n    return substring * count", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target_length=7) -> bool:\n    \"\"\"Check if the given string is a palindrome and has a length of target_length.\"\"\"\n    return s == s[::-1] and len(s) == target_length\ndef g(target_length=7):\n    for i in range(10**(target_length-1), 10**target_length):\n        s = str(i)\n        if s == s[::-1]:\n            return s\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 197, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target_length=7) -> bool:\n    \"\"\"Check if the given string is a palindrome and has a length of target_length.\"\"\"\n    return s == s[::-1] and len(s) == target_length", "solution_func": "def g(target_length=7):\n    for i in range(10**(target_length-1), 10**target_length):\n        s = str(i)\n        if s == s[::-1]:\n            return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(n: int, target_sum=1000) -> bool:\n    \"\"\"Find three integers a, b, c such that a^2 + b^2 = c^2 and a + b + c = target_sum.\"\"\"\n    for a in range(1, target_sum):\n        for b in range(a+1, target_sum):\n            c = math.sqrt(a**2 + b**2)\n            if a + b + c == target_sum:\n                return True\n    return False\ndef g(target_sum=1000):\n    for a in range(1, target_sum):\n        for b in range(a+1, target_sum):\n            c = math.sqrt(a**2 + b**2)\n            if a + b + c == target_sum:\n                return (a, b, int(c))\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 197, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, target_sum=1000) -> bool:\n    \"\"\"Find three integers a, b, c such that a^2 + b^2 = c^2 and a + b + c = target_sum.\"\"\"\n    for a in range(1, target_sum):\n        for b in range(a+1, target_sum):\n            c = math.sqrt(a**2 + b**2)\n            if a + b + c == target_sum:\n                return True\n    return False", "solution_func": "def g(target_sum=1000):\n    for a in range(1, target_sum):\n        for b in range(a+1, target_sum):\n            c = math.sqrt(a**2 + b**2)\n            if a + b + c == target_sum:\n                return (a, b, int(c))", "map_ix": [1, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, target_sum=100) -> bool:\n    \"\"\"Check if the given number n is divisible by 2 and has a sum of digits equal to target_sum.\"\"\"\n    return n % 2 == 0 and sum(int(d) for d in str(n)) == target_sum\ndef g(target_sum=100):\n    for n in range(10**(len(str(target_sum))-1), 10**len(str(target_sum))):\n        if n % 2 == 0 and sum(int(d) for d in str(n)) == target_sum:\n            return n\nassert f(g())\n", "emb": null, "idx_generation": 197, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, target_sum=100) -> bool:\n    \"\"\"Check if the given number n is divisible by 2 and has a sum of digits equal to target_sum.\"\"\"\n    return n % 2 == 0 and sum(int(d) for d in str(n)) == target_sum", "solution_func": "def g(target_sum=100):\n    for n in range(10**(len(str(target_sum))-1), 10**len(str(target_sum))):\n        if n % 2 == 0 and sum(int(d) for d in str(n)) == target_sum:\n            return n", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(words: List[str], target_length=7) -> bool:\n    \"\"\"Find a combination of words that when concatenated, forms a word with target_length characters.\"\"\"\n    assert all([len(word) > 0 for word in words])\n    combinations = itertools.permutations(words)\n    for combination in combinations:\n        if len(''.join(combination)) == target_length:\n            return True\n    return False\ndef g(target_length = 7):\n    return ['abc', 'def', 'ghi']\nassert f(g())\n", "emb": null, "idx_generation": 197, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(words: List[str], target_length=7) -> bool:\n    \"\"\"Find a combination of words that when concatenated, forms a word with target_length characters.\"\"\"\n    assert all([len(word) > 0 for word in words])\n    combinations = itertools.permutations(words)\n    for combination in combinations:\n        if len(''.join(combination)) == target_length:\n            return True\n    return False", "solution_func": "def g(target_length = 7):\n    return ['abc', 'def', 'ghi']", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target_sum=15) -> bool:\n    \"\"\"Find a subset of numbers that sums up to target_sum.\"\"\"\n    assert all([num > 0 for num in numbers])\n    combinations = itertools.combinations(numbers, 3)\n    for combination in combinations:\n        if sum(combination) == target_sum:\n            return True\n    return False\ndef g(target_sum = 15):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n", "emb": null, "idx_generation": 197, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target_sum=15) -> bool:\n    \"\"\"Find a subset of numbers that sums up to target_sum.\"\"\"\n    assert all([num > 0 for num in numbers])\n    combinations = itertools.combinations(numbers, 3)\n    for combination in combinations:\n        if sum(combination) == target_sum:\n            return True\n    return False", "solution_func": "def g(target_sum = 15):\n    return [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_value=8) -> bool:\n    \"\"\"Find the position of target_value in the matrix.\"\"\"\n    assert all([len(row) > 0 for row in matrix])\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == target_value:\n                return True\n    return False\ndef g(target_value = 8):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 197, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_value=8) -> bool:\n    \"\"\"Find the position of target_value in the matrix.\"\"\"\n    assert all([len(row) > 0 for row in matrix])\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == target_value:\n                return True\n    return False", "solution_func": "def g(target_value = 8):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int, cache={}) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, determine if there are two numbers in the list that add up to the target.\n    \"\"\"\n    if target in cache:\n        return cache[target]\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            cache[target] = True\n            return True\n        seen.add(num)\n    cache[target] = False\n    return False\ndef g(nums=[2, 7, 11, 15], target=9):\n    return nums, target\nassert f(g()[0], g()[1])\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 197, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int, cache={}) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, determine if there are two numbers in the list that add up to the target.\n    \"\"\"\n    if target in cache:\n        return cache[target]\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            cache[target] = True\n            return True\n        seen.add(num)\n    cache[target] = False\n    return False", "solution_func": "def g(nums=[2, 7, 11, 15], target=9):\n    return nums, target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"\n    Determine if two strings are anagrams of each other.\n    \"\"\"\n    return sorted(s) == sorted(t)\ndef g(s='anagram', t='nagaram'):\n    return s, t\nassert f(g()[0], g()[1])\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 197, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"\n    Determine if two strings are anagrams of each other.\n    \"\"\"\n    return sorted(s) == sorted(t)", "solution_func": "def g(s='anagram', t='nagaram'):\n    return s, t", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"\n    Determine if one string is a rotation of another string.\n    \"\"\"\n    return len(s) == len(t) and t in s + s\ndef g(s='waterbottle', t='erbottlewat'):\n    return s, t\nassert f(g()[0], g()[1])\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 197, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"\n    Determine if one string is a rotation of another string.\n    \"\"\"\n    return len(s) == len(t) and t in s + s", "solution_func": "def g(s='waterbottle', t='erbottlewat'):\n    return s, t", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list that sum up to the target.\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(nums = [1, 2, 3, 4, 5], target = 7):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 197, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list that sum up to the target.\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))", "solution_func": "def g(nums = [1, 2, 3, 4, 5], target = 7):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(x: float, y: float, z: float, a: float) -> bool:\n    \"\"\"Check if the square of the sum of three numbers is equal to the fourth number squared.\"\"\"\n    return (x + y + z) ** 2 == a ** 2\ndef g(x: float, y: float, z: float):\n    return sqrt(x ** 2 + y ** 2 + z ** 2)\nassert f(g(x=3, y=4, z=5), x=3, y=4, z=5)\n", "emb": null, "idx_generation": 198, "target_skills": null, "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(x: float, y: float, z: float, a: float) -> bool:\n    \"\"\"Check if the square of the sum of three numbers is equal to the fourth number squared.\"\"\"\n    return (x + y + z) ** 2 == a ** 2", "solution_func": "def g(x: float, y: float, z: float):\n    return sqrt(x ** 2 + y ** 2 + z ** 2)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: int, y: int, s: str) -> bool:\n    \"\"\"Check if a string contains a specific number of occurrences of a given character.\"\"\"\n    return s.count(str(x)) == y\ndef g(x: int, y: int):\n    return str(x) * y\nassert f(g(3, 4), 3, '3333')\n", "emb": null, "idx_generation": 198, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, y: int, s: str) -> bool:\n    \"\"\"Check if a string contains a specific number of occurrences of a given character.\"\"\"\n    return s.count(str(x)) == y", "solution_func": "def g(x: int, y: int):\n    return str(x) * y", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(ls: List[int]) -> bool:\n    \"\"\"Check if the list contains consecutive numbers starting from 1.\"\"\"\n    return sorted(ls) == list(range(1, len(ls)+1))\ndef g(n: int):\n    return list(range(1, n+1))\nassert f(g(5))\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 198, "target_skills": null, "problem_func": "from typing import*\ndef f(ls: List[int]) -> bool:\n    \"\"\"Check if the list contains consecutive numbers starting from 1.\"\"\"\n    return sorted(ls) == list(range(1, len(ls)+1))", "solution_func": "def g(n: int):\n    return list(range(1, n+1))", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, a=10, b=7, c=5, d=3) -> bool:\n    \"\"\"Find n such that n + a == (b * c) - (d * (the sum of the first n integers))\"\"\"\n    return n + a == (b * c) - (d * sum(range(n+1)))\ndef g(a = 10, b = 7, c = 5, d = 3):\n    return ((b * c) - a) // d\nassert f(g())\n", "emb": null, "idx_generation": 198, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=10, b=7, c=5, d=3) -> bool:\n    \"\"\"Find n such that n + a == (b * c) - (d * (the sum of the first n integers))\"\"\"\n    return n + a == (b * c) - (d * sum(range(n+1)))", "solution_func": "def g(a = 10, b = 7, c = 5, d = 3):\n    return ((b * c) - a) // d", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(arr: list, n=100) -> bool:\n    \"\"\"Find a number n such that it is not in the given list\"\"\"\n    return n not in arr\ndef g():\n    arr = random.sample(range(100), 99)\n    return random.choice(range(100))\nassert f(g())\n", "emb": null, "idx_generation": 198, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(arr: list, n=100) -> bool:\n    \"\"\"Find a number n such that it is not in the given list\"\"\"\n    return n not in arr", "solution_func": "def g():\n    arr = random.sample(range(100), 99)\n    return random.choice(range(100))", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(s: str, a='python', b=math.pi) -> bool:\n    \"\"\"Check if the given string contains both the given word and the given number\"\"\"\n    return a in s and str(b) in s\ndef g(a = 'python', b = math.pi):\n    return f\"I love {a} and the value of pi is {b}\"\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 198, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(s: str, a='python', b=math.pi) -> bool:\n    \"\"\"Check if the given string contains both the given word and the given number\"\"\"\n    return a in s and str(b) in s", "solution_func": "def g(a = 'python', b = math.pi):\n    return f\"I love {a} and the value of pi is {b}\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, nums=[8154539588421190, 128861795], lower_bound=64216730) -> bool:\n    \"\"\"Check if n is a perfect square and its digits are in ascending order.\"\"\"\n    return n ** 0.5 == int(n ** 0.5) and ''.join(sorted(str(n))) == str(n) and n >= lower_bound\ndef g(nums = [8154539588421190, 128861795], lower_bound = 64216730):\n    n = max(nums)\n    return n\nassert f(g())\n", "emb": null, "idx_generation": 198, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[8154539588421190, 128861795], lower_bound=64216730) -> bool:\n    \"\"\"Check if n is a perfect square and its digits are in ascending order.\"\"\"\n    return n ** 0.5 == int(n ** 0.5) and ''.join(sorted(str(n))) == str(n) and n >= lower_bound", "solution_func": "def g(nums = [8154539588421190, 128861795], lower_bound = 64216730):\n    n = max(nums)\n    return n", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, nums=[8154539588421190, 128861795], lower_bound=64216730) -> bool:\n    \"\"\"Check if n is a prime number and has only one digit repeated.\"\"\"\n    return all((n % i != 0 for i in range(2, int(n ** 0.5) + 1))) and len(set(str(n))) == 2 and n >= lower_bound\ndef g(nums = [8154539588421190, 128861795], lower_bound = 64216730):\n    n = min(nums)\n    return n\nassert f(g())\n", "emb": null, "idx_generation": 198, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[8154539588421190, 128861795], lower_bound=64216730) -> bool:\n    \"\"\"Check if n is a prime number and has only one digit repeated.\"\"\"\n    return all((n % i != 0 for i in range(2, int(n ** 0.5) + 1))) and len(set(str(n))) == 2 and n >= lower_bound", "solution_func": "def g(nums = [8154539588421190, 128861795], lower_bound = 64216730):\n    n = min(nums)\n    return n", "map_ix": null}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\nfrom itertools import combinations\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there are three distinct elements in arr that add up to the target.\"\"\"\n    return any((sum(comb) == target for comb in combinations(arr, 3)))\ndef g(target = 10):\n    arr = [1, 2, 3, 4, 5]\n    return arr\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 198, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\nfrom itertools import combinations\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there are three distinct elements in arr that add up to the target.\"\"\"\n    return any((sum(comb) == target for comb in combinations(arr, 3)))", "solution_func": "def g(target = 10):\n    arr = [1, 2, 3, 4, 5]\n    return arr", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(word: str, n=3, vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Determine if a word contains at least n vowels.\"\"\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += 1\n        if count >= n:\n            return True\n    return False\ndef g(n=3, vowels=['a', 'e', 'i', 'o', 'u']):\n    return 'hello'\nassert f(g())\n", "emb": null, "idx_generation": 198, "target_skills": null, "problem_func": "from typing import*\ndef f(word: str, n=3, vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Determine if a word contains at least n vowels.\"\"\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += 1\n        if count >= n:\n            return True\n    return False", "solution_func": "def g(n=3, vowels=['a', 'e', 'i', 'o', 'u']):\n    return 'hello'", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target.\"\"\"\n    return any(target - num in nums for num in nums)\ndef g(nums = []):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 199, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target.\"\"\"\n    return any(target - num in nums for num in nums)", "solution_func": "def g(nums = []):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target value is present in the given matrix.\"\"\"\n    return any(target in row for row in matrix)\ndef g(matrix = []):\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 199, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target value is present in the given matrix.\"\"\"\n    return any(target in row for row in matrix)", "solution_func": "def g(matrix = []):\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if there are three numbers in the list that add up to the target.\"\"\"\n    return any(target - num1 - num2 in arr for num1 in arr for num2 in arr)\ndef g(arr = []):\n    return arr\nassert f(g())\n", "emb": null, "idx_generation": 199, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if there are three numbers in the list that add up to the target.\"\"\"\n    return any(target - num1 - num2 in arr for num1 in arr for num2 in arr)", "solution_func": "def g(arr = []):\n    return arr", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(sentence: str) -> bool:\n    \"\"\"Check if a sentence is a pangram\"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    return all(char in sentence.lower() for char in alphabet)\ndef g():\n    return 'The quick brown fox jumps over the lazy dog'\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 199, "target_skills": null, "problem_func": "from typing import*\ndef f(sentence: str) -> bool:\n    \"\"\"Check if a sentence is a pangram\"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    return all(char in sentence.lower() for char in alphabet)", "solution_func": "def g():\n    return 'The quick brown fox jumps over the lazy dog'", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    num_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False\ndef g(target = 10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n", "emb": null, "idx_generation": 199, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    num_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(target = 10):\n    return [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"Check if there are k consecutive numbers in the list\"\"\"\n    nums.sort()\n    for i in range(1, len(nums)):\n        if nums[i] - nums[i-1] == 1:\n            count = 2\n            j = i + 1\n            while j < len(nums) and count < k:\n                if nums[j] - nums[j-1] == 1:\n                    count += 1\n                else:\n                    break\n                j += 1\n            if count == k:\n                return True\n    return False\ndef g(k = 3):\n    return [1, 2, 3, 4, 5, 7, 8, 9, 10]\nassert f(g())\n", "emb": null, "idx_generation": 199, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"Check if there are k consecutive numbers in the list\"\"\"\n    nums.sort()\n    for i in range(1, len(nums)):\n        if nums[i] - nums[i-1] == 1:\n            count = 2\n            j = i + 1\n            while j < len(nums) and count < k:\n                if nums[j] - nums[j-1] == 1:\n                    count += 1\n                else:\n                    break\n                j += 1\n            if count == k:\n                return True\n    return False", "solution_func": "def g(k = 3):\n    return [1, 2, 3, 4, 5, 7, 8, 9, 10]", "map_ix": null}, {"fitness": 1.0, "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(x: int, a=100) -> bool:\n    \"\"\"Check if the square root of x is equal to a\"\"\"\n    return sqrt(x) == a\n\ndef g(a=100):\n    return a ** 2\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 199, "target_skills": null, "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(x: int, a=100) -> bool:\n    \"\"\"Check if the square root of x is equal to a\"\"\"\n    return sqrt(x) == a", "solution_func": "def g(a=100):\n    return a ** 2", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the length of s is divisible by n\"\"\"\n    return len(s) % n == 0\n\ndef g(s=\"Hello\", n=3):\n    return s * n\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 199, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the length of s is divisible by n\"\"\"\n    return len(s) % n == 0", "solution_func": "def g(s=\"Hello\", n=3):\n    return s * n", "map_ix": [1, 1, 0, 1, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(year: int, month: int, day: int) -> bool:\n    \"\"\"Check if the given date is in the past\"\"\"\n    current_date = datetime.now().date()\n    given_date = datetime(year, month, day).date()\n    return given_date < current_date\n\ndef g(year=2021, month=10, day=1):\n    return year, month, day\n\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 199, "target_skills": null, "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(year: int, month: int, day: int) -> bool:\n    \"\"\"Check if the given date is in the past\"\"\"\n    current_date = datetime.now().date()\n    given_date = datetime(year, month, day).date()\n    return given_date < current_date", "solution_func": "def g(year=2021, month=10, day=1):\n    return year, month, day", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substr='abc') -> bool:\n    \"\"\"Check if a given substring is present in a string\"\"\"\n    return substr in s\ndef g(substr = 'abc'):\n    s = 'xyzabc123'\n    return s\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 199, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substr='abc') -> bool:\n    \"\"\"Check if a given substring is present in a string\"\"\"\n    return substr in s", "solution_func": "def g(substr = 'abc'):\n    s = 'xyzabc123'\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(lst: List[str], target: str = 'hello') -> bool:\n    \"\"\"Check if the target string is present in the list.\"\"\"\n    return target in lst\ndef g(target: str = 'hello', lst: List[str] = ['hi', 'hello', 'hey']):\n    return lst\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 200, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[str], target: str = 'hello') -> bool:\n    \"\"\"Check if the target string is present in the list.\"\"\"\n    return target in lst", "solution_func": "def g(target: str = 'hello', lst: List[str] = ['hi', 'hello', 'hey']):\n    return lst", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, lst: List[int], target: int = 10) -> bool:\n    \"\"\"Check if there exists two numbers in the list whose sum is equal to the target.\"\"\"\n    for i in range(n):\n        for j in range(i+1, n):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\ndef g(n: int = 5, lst: List[int] = [1, 2, 3, 4, 5], target: int = 10):\n    return n, lst\nassert f(*g())\n", "emb": null, "idx_generation": 200, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst: List[int], target: int = 10) -> bool:\n    \"\"\"Check if there exists two numbers in the list whose sum is equal to the target.\"\"\"\n    for i in range(n):\n        for j in range(i+1, n):\n            if lst[i] + lst[j] == target:\n                return True\n    return False", "solution_func": "def g(n: int = 5, lst: List[int] = [1, 2, 3, 4, 5], target: int = 10):\n    return n, lst", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(n: int, lst: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a number in the list whose square root is equal to the target.\"\"\"\n    for i in range(n):\n        if math.sqrt(lst[i]) == target:\n            return True\n    return False\ndef g(n: int = 5, lst: List[int] = [1, 4, 9, 16, 25], target: int = 5):\n    return n, lst, target\nassert f(*g())\n", "emb": [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 200, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, lst: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a number in the list whose square root is equal to the target.\"\"\"\n    for i in range(n):\n        if math.sqrt(lst[i]) == target:\n            return True\n    return False", "solution_func": "def g(n: int = 5, lst: List[int] = [1, 4, 9, 16, 25], target: int = 5):\n    return n, lst, target", "map_ix": [1, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(numbers: List[int], target=20, max_len=5) -> bool:\n    \"\"\"\n    Find a subset of numbers (length <= max_len) that sums up to target\n    \"\"\"\n    return sum(numbers) == target and (len(numbers) <= max_len)\ndef g(target=20, max_len=5):\n    \"\"\"\n    This solution uses a recursive function to find all possible subsets of numbers that sum up to target\n    \"\"\"\n    def find_subset(numbers, target, subset):\n        if target == 0:\n            return subset\n        if len(numbers) == 0 or target < 0:\n            return None\n        include = find_subset(numbers[1:], target - numbers[0], subset + [numbers[0]])\n        exclude = find_subset(numbers[1:], target, subset)\n        return include or exclude\n\n    numbers = [3, 5, 8, 10, 2, 7, 4]\n    return find_subset(numbers, target, [])\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 200, "target_skills": null, "problem_func": "from typing import*\ndef f(numbers: List[int], target=20, max_len=5) -> bool:\n    \"\"\"\n    Find a subset of numbers (length <= max_len) that sums up to target\n    \"\"\"\n    return sum(numbers) == target and (len(numbers) <= max_len)", "solution_func": "def g(target=20, max_len=5):\n    \"\"\"\n    This solution uses a recursive function to find all possible subsets of numbers that sum up to target\n    \"\"\"\n    def find_subset(numbers, target, subset):\n        if target == 0:\n            return subset\n        if len(numbers) == 0 or target < 0:\n            return None\n        include = find_subset(numbers[1:], target - numbers[0], subset + [numbers[0]])\n        exclude = find_subset(numbers[1:], target, subset)\n        return include or exclude\n\n    numbers = [3, 5, 8, 10, 2, 7, 4]\n    return find_subset(numbers, target, [])", "map_ix": [0, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=22) -> bool:\n    \"\"\"\n    Find if there exists a path in the matrix that sums up to the target number\n    \"\"\"\n    def dfs(matrix, i, j, current_sum, target):\n        if i < 0 or i >= len(matrix) or j < 0 or j >= len(matrix[0]):\n            return False\n        current_sum += matrix[i][j]\n        if current_sum == target:\n            return True\n        return dfs(matrix, i + 1, j, current_sum, target) or dfs(matrix, i, j + 1, current_sum, target)\n\n    return dfs(matrix, 0, 0, 0, target)\ndef g(target=22):\n    \"\"\"\n    This solution uses a depth-first search algorithm to find if there exists a path in the matrix that sums up to the target number\n    \"\"\"\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 200, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=22) -> bool:\n    \"\"\"\n    Find if there exists a path in the matrix that sums up to the target number\n    \"\"\"\n    def dfs(matrix, i, j, current_sum, target):\n        if i < 0 or i >= len(matrix) or j < 0 or j >= len(matrix[0]):\n            return False\n        current_sum += matrix[i][j]\n        if current_sum == target:\n            return True\n        return dfs(matrix, i + 1, j, current_sum, target) or dfs(matrix, i, j + 1, current_sum, target)\n\n    return dfs(matrix, 0, 0, 0, target)", "solution_func": "def g(target=22):\n    \"\"\"\n    This solution uses a depth-first search algorithm to find if there exists a path in the matrix that sums up to the target number\n    \"\"\"\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"\n    Find if there exists a combination of numbers that equals the target number\n    \"\"\"\n    def dfs(numbers, current_sum, target):\n        if current_sum == target:\n            return True\n        if len(numbers) == 0 or current_sum > target:\n            return False\n        for i in range(len(numbers)):\n            if dfs(numbers[i+1:], current_sum + numbers[i], target):\n                return True\n        return False\n\n    return dfs(numbers, 0, target)\ndef g(target=100):\n    \"\"\"\n    This solution uses a depth-first search algorithm to find if there exists a combination of numbers that equals the target number\n    \"\"\"\n    numbers = [10, 20, 30, 40, 50]\n    return numbers\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 200, "target_skills": null, "problem_func": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"\n    Find if there exists a combination of numbers that equals the target number\n    \"\"\"\n    def dfs(numbers, current_sum, target):\n        if current_sum == target:\n            return True\n        if len(numbers) == 0 or current_sum > target:\n            return False\n        for i in range(len(numbers)):\n            if dfs(numbers[i+1:], current_sum + numbers[i], target):\n                return True\n        return False\n\n    return dfs(numbers, 0, target)", "solution_func": "def g(target=100):\n    \"\"\"\n    This solution uses a depth-first search algorithm to find if there exists a combination of numbers that equals the target number\n    \"\"\"\n    numbers = [10, 20, 30, 40, 50]\n    return numbers", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(li: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target.\"\"\"\n    return any(target - num in li for num in li)\n    \ndef g(li: List[int], target: int):\n    return li, target\n\n# Test Case\nassert f(g([1, 2, 3, 4, 5], 9))\n", "emb": null, "idx_generation": 200, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(li: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target.\"\"\"\n    return any(target - num in li for num in li)", "solution_func": "def g(li: List[int], target: int):\n    return li, target\n\n# Test Case", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if the list contains 'n' consecutive integers.\"\"\"\n    return sorted(lst) == list(range(min(lst), min(lst) + n))\n\ndef g(n: int, start: int):\n    return list(range(start, start + n))\n\n# Test Case\nassert f(g(5, 10), 5)\n", "emb": null, "idx_generation": 200, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if the list contains 'n' consecutive integers.\"\"\"\n    return sorted(lst) == list(range(min(lst), min(lst) + n))", "solution_func": "def g(n: int, start: int):\n    return list(range(start, start + n))\n\n# Test Case", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom collections import Counter\n\ndef f(s: str) -> bool:\n    \"\"\"Check if all characters in the string have even frequency.\"\"\"\n    freq = Counter(s)\n    return all(count % 2 == 0 for count in freq.values())\n\ndef g(s: str):\n    return s\n\n# Test Case\nassert f(g(\"abbccddee\"))\n", "emb": null, "idx_generation": 200, "target_skills": null, "problem_func": "from typing import*\nfrom collections import Counter\n\ndef f(s: str) -> bool:\n    \"\"\"Check if all characters in the string have even frequency.\"\"\"\n    freq = Counter(s)\n    return all(count % 2 == 0 for count in freq.values())", "solution_func": "def g(s: str):\n    return s\n\n# Test Case", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=10) -> bool:\n    \"\"\"Return True if the string s contains exactly n numbers separated by commas\"\"\"\n    return len(s.split(',')) == n\ndef g(n = 10):\n    return ','.join(str(i) for i in range(1, n+1))\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 200, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=10) -> bool:\n    \"\"\"Return True if the string s contains exactly n numbers separated by commas\"\"\"\n    return len(s.split(',')) == n", "solution_func": "def g(n = 10):\n    return ','.join(str(i) for i in range(1, n+1))", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: int, a=17, b=5) -> bool:\n    \"\"\"Check if x is divisible by a and not divisible by b\"\"\"\n    return x % a == 0 and x % b != 0\ndef g(a=17, b=5):\n    return a * b\nassert f(g())\n", "emb": null, "idx_generation": 201, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, a=17, b=5) -> bool:\n    \"\"\"Check if x is divisible by a and not divisible by b\"\"\"\n    return x % a == 0 and x % b != 0", "solution_func": "def g(a=17, b=5):\n    return a * b", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: str, substring=\"hello\") -> bool:\n    \"\"\"Check if the given substring is present in x\"\"\"\n    return substring in x\ndef g(substring=\"hello\"):\n    return \"Hello, world!\"\nassert f(g())\n", "emb": null, "idx_generation": 201, "target_skills": null, "problem_func": "from typing import*\ndef f(x: str, substring=\"hello\") -> bool:\n    \"\"\"Check if the given substring is present in x\"\"\"\n    return substring in x", "solution_func": "def g(substring=\"hello\"):\n    return \"Hello, world!\"", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: int, n=3) -> bool:\n    \"\"\"Check if x is a power of n\"\"\"\n    while x > 1:\n        if x % n != 0:\n            return False\n        x = x // n\n    return True\ndef g(n=3):\n    return n ** 6\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 201, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, n=3) -> bool:\n    \"\"\"Check if x is a power of n\"\"\"\n    while x > 1:\n        if x % n != 0:\n            return False\n        x = x // n\n    return True", "solution_func": "def g(n=3):\n    return n ** 6", "map_ix": [0, 0, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, t: str, n: int = 2) -> bool:\n    \"\"\"\n    Given two strings s and t, check if t is a substring of s repeated n times.\n\n    Sample Input:\n    s = \"abcdabcd\"\n    t = \"cdab\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return t * n in s\ndef g(s = \"abcdabcd\", t = \"cdab\"):\n    return s.count(t) >= 2\nassert f(g())\n", "emb": null, "idx_generation": 201, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, t: str, n: int = 2) -> bool:\n    \"\"\"\n    Given two strings s and t, check if t is a substring of s repeated n times.\n\n    Sample Input:\n    s = \"abcdabcd\"\n    t = \"cdab\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return t * n in s", "solution_func": "def g(s = \"abcdabcd\", t = \"cdab\"):\n    return s.count(t) >= 2", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(arr: List[int], target: int, n: int = 3) -> bool:\n    \"\"\"\n    Given a list of integers arr and a target integer, find if there exists a combination of n integers in arr that\n    sum up to the target.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    from itertools import combinations\n    return any(sum(c) == target for c in combinations(arr, n))\ndef g(arr = [1, 2, 3, 4, 5], target = 9):\n    from itertools import combinations\n    return any(sum(c) == target for c in combinations(arr, 3))\nassert f(g())\n", "emb": null, "idx_generation": 201, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(arr: List[int], target: int, n: int = 3) -> bool:\n    \"\"\"\n    Given a list of integers arr and a target integer, find if there exists a combination of n integers in arr that\n    sum up to the target.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    from itertools import combinations\n    return any(sum(c) == target for c in combinations(arr, n))", "solution_func": "def g(arr = [1, 2, 3, 4, 5], target = 9):\n    from itertools import combinations\n    return any(sum(c) == target for c in combinations(arr, 3))", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(n: int, arr: List[int], m: int = 3) -> bool:\n    \"\"\"\n    Given an integer n and a list of integers arr, check if there exists a subsequence of length m in arr that sums\n    up to n.\n\n    Sample Input:\n    n = 10\n    arr = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    from itertools import combinations\n    return any(sum(c) == n for c in combinations(arr, m))\ndef g(n = 10, arr = [1, 2, 3, 4, 5]):\n    from itertools import combinations\n    return any(sum(c) == n for c in combinations(arr, 3))\nassert f(g())\n", "emb": null, "idx_generation": 201, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(n: int, arr: List[int], m: int = 3) -> bool:\n    \"\"\"\n    Given an integer n and a list of integers arr, check if there exists a subsequence of length m in arr that sums\n    up to n.\n\n    Sample Input:\n    n = 10\n    arr = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    from itertools import combinations\n    return any(sum(c) == n for c in combinations(arr, m))", "solution_func": "def g(n = 10, arr = [1, 2, 3, 4, 5]):\n    from itertools import combinations\n    return any(sum(c) == n for c in combinations(arr, 3))", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target = 10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 201, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(target = 10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(words: List[str], pattern='abb') -> bool:\n    \"\"\"Determine if each word in the list follows a specific pattern.\"\"\"\n    pattern_dict = {}\n    for word in words:\n        if len(word) != len(pattern):\n            return False\n        for i in range(len(pattern)):\n            if pattern[i] not in pattern_dict:\n                pattern_dict[pattern[i]] = word[i]\n            elif pattern_dict[pattern[i]] != word[i]:\n                return False\n    return True\ndef g(pattern = 'abb'):\n    return ['dog', 'cat', 'cat']\nassert f(g())\n", "emb": null, "idx_generation": 201, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], pattern='abb') -> bool:\n    \"\"\"Determine if each word in the list follows a specific pattern.\"\"\"\n    pattern_dict = {}\n    for word in words:\n        if len(word) != len(pattern):\n            return False\n        for i in range(len(pattern)):\n            if pattern[i] not in pattern_dict:\n                pattern_dict[pattern[i]] = word[i]\n            elif pattern_dict[pattern[i]] != word[i]:\n                return False\n    return True", "solution_func": "def g(pattern = 'abb'):\n    return ['dog', 'cat', 'cat']", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Determine if there exists a triplet in the list that sums up to the target value.\"\"\"\n    nums.sort()\n    n = len(nums)\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            curr_sum = nums[i] + nums[left] + nums[right]\n            if curr_sum == target:\n                return True\n            elif curr_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False\ndef g(target = 0):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n", "emb": null, "idx_generation": 201, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Determine if there exists a triplet in the list that sums up to the target value.\"\"\"\n    nums.sort()\n    n = len(nums)\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            curr_sum = nums[i] + nums[left] + nums[right]\n            if curr_sum == target:\n                return True\n            elif curr_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False", "solution_func": "def g(target = 0):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: List[int], n=10, m=5, s=2) -> bool:\n    \"\"\"Check if the sum of every nth element in the list is divisible by m\"\"\"\n    return all([sum(x[i::n]) % m == 0 for i in range(n)])\ndef g(n=10, m=5, s=2):\n    x = [i for i in range(n*s)]\n    return x\nassert f(g())\n", "emb": null, "idx_generation": 201, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], n=10, m=5, s=2) -> bool:\n    \"\"\"Check if the sum of every nth element in the list is divisible by m\"\"\"\n    return all([sum(x[i::n]) % m == 0 for i in range(n)])", "solution_func": "def g(n=10, m=5, s=2):\n    x = [i for i in range(n*s)]\n    return x", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target value, check if there exists a submatrix whose sum of elements is equal to the target.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            for k in range(i, rows):\n                for l in range(j, cols):\n                    submatrix_sum = sum(matrix[x][y] for x in range(i, k+1) for y in range(j, l+1))\n                    if submatrix_sum == target:\n                        return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=10):\n    return matrix\n\nassert f(g())\n", "emb": null, "idx_generation": 202, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target value, check if there exists a submatrix whose sum of elements is equal to the target.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            for k in range(i, rows):\n                for l in range(j, cols):\n                    submatrix_sum = sum(matrix[x][y] for x in range(i, k+1) for y in range(j, l+1))\n                    if submatrix_sum == target:\n                        return True\n    return False", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=10):\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, find all pairs of numbers that add up to the target.\n    \"\"\"\n    pairs = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                pairs.append((nums[i], nums[j]))\n    return pairs\n\ndef g(nums=[10, 5, 15, 7, 3, 8]):\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 202, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, find all pairs of numbers that add up to the target.\n    \"\"\"\n    pairs = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                pairs.append((nums[i], nums[j]))\n    return pairs", "solution_func": "def g(nums=[10, 5, 15, 7, 3, 8]):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, substr='abc') -> bool:\n    \"\"\"\n    Given a string and a substring, check if the substring exists in the string in the same order.\n    \"\"\"\n    i = 0\n    for char in string:\n        if char == substr[i]:\n            i += 1\n            if i == len(substr):\n                return True\n    return False\n\ndef g(string='abacabadabacaba', substr='abc'):\n    return string\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 202, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, substr='abc') -> bool:\n    \"\"\"\n    Given a string and a substring, check if the substring exists in the string in the same order.\n    \"\"\"\n    i = 0\n    for char in string:\n        if char == substr[i]:\n            i += 1\n            if i == len(substr):\n                return True\n    return False", "solution_func": "def g(string='abacabadabacaba', substr='abc'):\n    return string", "map_ix": [0, 0, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s1: str, s2: str, count: int) -> bool:\n    \"\"\"\n    Find a string that has count occurrences of s1 followed immediately by count occurrences of s2\n    \"\"\"\n    return s1 * count + s2 * count in s\ndef g(s1: str, s2: str, count: int):\n    return s1 * count + s2 * count\nassert f(g())\n", "emb": null, "idx_generation": 202, "target_skills": null, "problem_func": "from typing import*\ndef f(s1: str, s2: str, count: int) -> bool:\n    \"\"\"\n    Find a string that has count occurrences of s1 followed immediately by count occurrences of s2\n    \"\"\"\n    return s1 * count + s2 * count in s", "solution_func": "def g(s1: str, s2: str, count: int):\n    return s1 * count + s2 * count", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Find a formula using four 6s and two 2's and -+*/ that evaluates to 4.\"\"\"\n    return set(s) <= set('62-+*/') and s.count('6') == 4 and (s.count('2') == 2) and (eval(s) == 4)\ndef g():\n    return \"6+6-2*2\"\nassert f(g())\n", "emb": null, "idx_generation": 202, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Find a formula using four 6s and two 2's and -+*/ that evaluates to 4.\"\"\"\n    return set(s) <= set('62-+*/') and s.count('6') == 4 and (s.count('2') == 2) and (eval(s) == 4)", "solution_func": "def g():\n    return \"6+6-2*2\"", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], n=0) -> bool:\n    \"\"\"Find two integers whose product is n\"\"\"\n    return len(nums) >= 2 and any(a * b == n for a, b in combinations(nums, 2))\ndef g(n = 0):\n    nums = [i for i in range(-int(n ** 0.5) - 1, int(n ** 0.5) + 2)]\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 202, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], n=0) -> bool:\n    \"\"\"Find two integers whose product is n\"\"\"\n    return len(nums) >= 2 and any(a * b == n for a, b in combinations(nums, 2))", "solution_func": "def g(n = 0):\n    nums = [i for i in range(-int(n ** 0.5) - 1, int(n ** 0.5) + 2)]\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\ndef f(r: float, h: float, volume: float) -> bool:\n    \"\"\"Check if the given height and radius of a cone can produce a cone with the given volume\"\"\"\n    return volume == (1/3) * math.pi * r**2 * h\ndef g(volume: float):\n    radius = 3\n    height = 5\n    return radius, height, volume\nassert f(g())\n", "emb": null, "idx_generation": 202, "target_skills": null, "problem_func": "from typing import*\nimport math\ndef f(r: float, h: float, volume: float) -> bool:\n    \"\"\"Check if the given height and radius of a cone can produce a cone with the given volume\"\"\"\n    return volume == (1/3) * math.pi * r**2 * h", "solution_func": "def g(volume: float):\n    radius = 3\n    height = 5\n    return radius, height, volume", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if the given list contains duplicate numbers\"\"\"\n    return len(lst) != len(set(lst))\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 202, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if the given list contains duplicate numbers\"\"\"\n    return len(lst) != len(set(lst))", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, prime: bool) -> bool:\n    \"\"\"Check if the given number is a prime number\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True if prime else False\ndef g(prime: bool):\n    return 13, prime\nassert f(g())\n", "emb": null, "idx_generation": 202, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, prime: bool) -> bool:\n    \"\"\"Check if the given number is a prime number\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True if prime else False", "solution_func": "def g(prime: bool):\n    return 13, prime", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, nums=[2, 3, 5, 7, 11, 13], upper_bound=1000) -> bool:\n    \"\"\"Check if a number is prime.\"\"\"\n    return n > 1 and all(n % i != 0 for i in range(2, int(n ** 0.5) + 1)) and n <= upper_bound\ndef g(nums = [2, 3, 5, 7, 11, 13], upper_bound = 1000):\n    if nums == []:\n        return 0\n    return next(n for n in range(2, upper_bound + 1) if all(n % i != 0 for i in range(2, int(n ** 0.5) + 1)))\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 202, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[2, 3, 5, 7, 11, 13], upper_bound=1000) -> bool:\n    \"\"\"Check if a number is prime.\"\"\"\n    return n > 1 and all(n % i != 0 for i in range(2, int(n ** 0.5) + 1)) and n <= upper_bound", "solution_func": "def g(nums = [2, 3, 5, 7, 11, 13], upper_bound = 1000):\n    if nums == []:\n        return 0\n    return next(n for n in range(2, upper_bound + 1) if all(n % i != 0 for i in range(2, int(n ** 0.5) + 1)))", "map_ix": [1, 1, 0, 1, 0, 0, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers that sums up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 203, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers that sums up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Find a row and column index such that the element at that position is the target\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == target:\n                return True\n    return False\ndef g(target=20):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n", "emb": null, "idx_generation": 203, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Find a row and column index such that the element at that position is the target\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == target:\n                return True\n    return False", "solution_func": "def g(target=20):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Find a number in the list that is equal to the target\"\"\"\n    return target in nums\ndef g(target=5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 203, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Find a number in the list that is equal to the target\"\"\"\n    return target in nums", "solution_func": "def g(target=5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[str], target_word: str='Python') -> bool:\n    \"\"\"Check if the target word is present in the list\"\"\"\n    return any(word.lower() == target_word.lower() for word in x)\n    \ndef g(target_word: str='Python'):\n    words = ['Java', 'C++', 'Python', 'Ruby', 'JavaScript']\n    return words\n    \nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 203, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(x: List[str], target_word: str='Python') -> bool:\n    \"\"\"Check if the target word is present in the list\"\"\"\n    return any(word.lower() == target_word.lower() for word in x)", "solution_func": "def g(target_word: str='Python'):\n    words = ['Java', 'C++', 'Python', 'Ruby', 'JavaScript']\n    return words", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], target_sum: int=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target sum\"\"\"\n    return any(x[i] + x[j] == target_sum for i in range(len(x)) for j in range(i+1, len(x)))\n    \ndef g(target_sum: int=10):\n    numbers = [1, 2, 3, 4, 5]\n    return numbers\n    \nassert f(g())\n", "emb": null, "idx_generation": 203, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], target_sum: int=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target sum\"\"\"\n    return any(x[i] + x[j] == target_sum for i in range(len(x)) for j in range(i+1, len(x)))", "solution_func": "def g(target_sum: int=10):\n    numbers = [1, 2, 3, 4, 5]\n    return numbers", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[str], target_length: int=5) -> bool:\n    \"\"\"Check if any word in the list has the target length\"\"\"\n    return any(len(word) == target_length for word in x)\n    \ndef g(target_length: int=5):\n    words = ['apple', 'banana', 'orange', 'pear', 'kiwi']\n    return words\n    \nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 203, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(x: List[str], target_length: int=5) -> bool:\n    \"\"\"Check if any word in the list has the target length\"\"\"\n    return any(len(word) == target_length for word in x)", "solution_func": "def g(target_length: int=5):\n    words = ['apple', 'banana', 'orange', 'pear', 'kiwi']\n    return words", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if any combination of n numbers in a list sums to 10\"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, n):\n        if sum(combo) == 10:\n            return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5]):\n    for n in range(1, len(nums) + 1):\n        if f(n):\n            return n\n    return 0\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 203, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if any combination of n numbers in a list sums to 10\"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, n):\n        if sum(combo) == 10:\n            return True\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5]):\n    for n in range(1, len(nums) + 1):\n        if f(n):\n            return n\n    return 0", "map_ix": [0, 1, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substr='abc') -> bool:\n    \"\"\"Check if a given string contains a specific substring\"\"\"\n    return substr in s\ndef g(substr='abc'):\n    return \"xyz\" + substr\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 203, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substr='abc') -> bool:\n    \"\"\"Check if a given string contains a specific substring\"\"\"\n    return substr in s", "solution_func": "def g(substr='abc'):\n    return \"xyz\" + substr", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in a list that sum to a target value\"\"\"\n    from itertools import combinations\n    for pair in combinations(nums, 2):\n        if sum(pair) == target:\n            return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5]):\n    return [num for num in nums if num % 2 == 0]\nassert f(g())\n", "emb": null, "idx_generation": 203, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in a list that sum to a target value\"\"\"\n    from itertools import combinations\n    for pair in combinations(nums, 2):\n        if sum(pair) == target:\n            return True\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5]):\n    return [num for num in nums if num % 2 == 0]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(array: List[int], target=12) -> bool:\n    \"\"\"Check if there exists a pair of integers in the array that sum up to the target\"\"\"\n    for i in range(len(array)):\n        for j in range(i+1, len(array)):\n            if array[i] + array[j] == target:\n                return True\n    return False\ndef g(array = [3, 6, 9, 2, 5]):\n    return array\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 203, "target_skills": null, "problem_func": "from typing import*\ndef f(array: List[int], target=12) -> bool:\n    \"\"\"Check if there exists a pair of integers in the array that sum up to the target\"\"\"\n    for i in range(len(array)):\n        for j in range(i+1, len(array)):\n            if array[i] + array[j] == target:\n                return True\n    return False", "solution_func": "def g(array = [3, 6, 9, 2, 5]):\n    return array", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, a='apple', b='banana') -> bool:\n    \"\"\"Check if a string contains both a and b\"\"\"\n    return a in s and b in s\ndef g(a='apple', b='banana'):\n    return a + b\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 204, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, a='apple', b='banana') -> bool:\n    \"\"\"Check if a string contains both a and b\"\"\"\n    return a in s and b in s", "solution_func": "def g(a='apple', b='banana'):\n    return a + b", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, a=2, b=7, c=14) -> bool:\n    \"\"\"Check if any element in the array is greater than a, less than b, and divisible by c\"\"\"\n    return np.any((arr > a) & (arr < b) & (arr % c == 0))\ndef g(a=2, b=7, c=14):\n    return np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nassert f(g())\n", "emb": null, "idx_generation": 204, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, a=2, b=7, c=14) -> bool:\n    \"\"\"Check if any element in the array is greater than a, less than b, and divisible by c\"\"\"\n    return np.any((arr > a) & (arr < b) & (arr % c == 0))", "solution_func": "def g(a=2, b=7, c=14):\n    return np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])", "map_ix": null}, {"fitness": 1.0, "program_str": "import math\nfrom typing import*\ndef f(n: int, a=3) -> bool:\n    \"\"\"Check if n is a power of a\"\"\"\n    return n > 0 and a > 1 and a ** int(round(math.log(n, a))) == n\ndef g(a=3):\n    return a ** 5\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 204, "target_skills": null, "problem_func": "import math\nfrom typing import*\ndef f(n: int, a=3) -> bool:\n    \"\"\"Check if n is a power of a\"\"\"\n    return n > 0 and a > 1 and a ** int(round(math.log(n, a))) == n", "solution_func": "def g(a=3):\n    return a ** 5", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 1, 0]}, {"fitness": 1.0, "program_str": "import math\nfrom typing import*\ndef f(n: int, nums=[77410, 23223, 54187], lower_bound=2) -> bool:\n    \"\"\"Find the smallest common multiple of the list of integers.\"\"\"\n    return all((n % i == 0 for i in nums)) and n >= lower_bound\ndef g(nums=[77410, 23223, 54187], lower_bound=2):\n    from math import gcd\n    lcm = 1\n    for i in nums:\n        lcm = lcm * i // gcd(lcm, i)\n    return lcm\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 204, "target_skills": null, "problem_func": "import math\nfrom typing import*\ndef f(n: int, nums=[77410, 23223, 54187], lower_bound=2) -> bool:\n    \"\"\"Find the smallest common multiple of the list of integers.\"\"\"\n    return all((n % i == 0 for i in nums)) and n >= lower_bound", "solution_func": "def g(nums=[77410, 23223, 54187], lower_bound=2):\n    from math import gcd\n    lcm = 1\n    for i in nums:\n        lcm = lcm * i // gcd(lcm, i)\n    return lcm", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target = 0) -> bool:\n    \"\"\"\n    Determine if a given target value is found in the matrix.\n\n    The matrix is m x n, each row is sorted in ascending order from left to right.\n    Each column is sorted in ascending order from top to bottom.\n    \"\"\"\n    if not matrix or not matrix[0]:\n        return False\n    m, n = len(matrix), len(matrix[0])\n    row, col = 0, n - 1\n    while row < m and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            row += 1\n        else:\n            col -= 1\n    return False\ndef g(matrix = [[1, 4, 7], [2, 5, 8], [3, 6, 9]], target = 0):\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 204, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target = 0) -> bool:\n    \"\"\"\n    Determine if a given target value is found in the matrix.\n\n    The matrix is m x n, each row is sorted in ascending order from left to right.\n    Each column is sorted in ascending order from top to bottom.\n    \"\"\"\n    if not matrix or not matrix[0]:\n        return False\n    m, n = len(matrix), len(matrix[0])\n    row, col = 0, n - 1\n    while row < m and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            row += 1\n        else:\n            col -= 1\n    return False", "solution_func": "def g(matrix = [[1, 4, 7], [2, 5, 8], [3, 6, 9]], target = 0):\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Determine if there are two integers in the list that add up to the target value.\n\n    Each input would have exactly one solution, and you may not use the same element twice.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(nums = [2, 7, 11, 15], target = 9):\n    return nums, target\nassert f(g())\n", "emb": null, "idx_generation": 204, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Determine if there are two integers in the list that add up to the target value.\n\n    Each input would have exactly one solution, and you may not use the same element twice.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(nums = [2, 7, 11, 15], target = 9):\n    return nums, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "import math\nfrom typing import*\nfrom typing import List\n\ndef f(lst: List[int], target: int, operation='add') -> bool:\n    \"\"\"Perform a mathematical operation on a list and check if it matches the target value\"\"\"\n    if operation == 'add':\n        return sum(lst) == target\n    elif operation == 'multiply':\n        result = 1\n        for num in lst:\n            result *= num\n        return result == target\n    elif operation == 'subtract':\n        result = lst[0]\n        for i in range(1, len(lst)):\n            result -= lst[i]\n        return result == target\n    else:\n        return False\n\ndef g(lst: List[int], target: int, operation='add'):\n    if operation == 'add':\n        return lst + [target - sum(lst)]\n    elif operation == 'multiply':\n        new_lst = lst.copy()\n        while target % new_lst[-1] != 0:\n            new_lst.append(1)\n        new_lst[-1] = target // new_lst[-1]\n        return new_lst\n    elif operation == 'subtract':\n        new_lst = lst.copy()\n        while sum(new_lst) > target:\n            new_lst.pop()\n        return new_lst\n    else:\n        return lst\n\nassert f(g()) == True", "emb": null, "idx_generation": 204, "target_skills": null, "problem_func": "import math\nfrom typing import*\nfrom typing import List\n\ndef f(lst: List[int], target: int, operation='add') -> bool:\n    \"\"\"Perform a mathematical operation on a list and check if it matches the target value\"\"\"\n    if operation == 'add':\n        return sum(lst) == target\n    elif operation == 'multiply':\n        result = 1\n        for num in lst:\n            result *= num\n        return result == target\n    elif operation == 'subtract':\n        result = lst[0]\n        for i in range(1, len(lst)):\n            result -= lst[i]\n        return result == target\n    else:\n        return False", "solution_func": "def g(lst: List[int], target: int, operation='add'):\n    if operation == 'add':\n        return lst + [target - sum(lst)]\n    elif operation == 'multiply':\n        new_lst = lst.copy()\n        while target % new_lst[-1] != 0:\n            new_lst.append(1)\n        new_lst[-1] = target // new_lst[-1]\n        return new_lst\n    elif operation == 'subtract':\n        new_lst = lst.copy()\n        while sum(new_lst) > target:\n            new_lst.pop()\n        return new_lst\n    else:\n        return lst", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target: int, mode='any') -> bool:\n    \"\"\"Check if any or all numbers in a list match the target value\"\"\"\n    if mode == 'any':\n        return any(num == target for num in lst)\n    elif mode == 'all':\n        return all(num == target for num in lst)\n    else:\n        return False\n\ndef g(lst: List[int], target: int, mode='any'):\n    if mode == 'any':\n        return lst + [target]\n    elif mode == 'all':\n        return [target] * len(lst)\n    else:\n        return lst\n\nassert f(g()) == True", "emb": null, "idx_generation": 204, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target: int, mode='any') -> bool:\n    \"\"\"Check if any or all numbers in a list match the target value\"\"\"\n    if mode == 'any':\n        return any(num == target for num in lst)\n    elif mode == 'all':\n        return all(num == target for num in lst)\n    else:\n        return False", "solution_func": "def g(lst: List[int], target: int, mode='any'):\n    if mode == 'any':\n        return lst + [target]\n    elif mode == 'all':\n        return [target] * len(lst)\n    else:\n        return lst", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target: int, reverse=False) -> bool:\n    \"\"\"Check if a list matches the target list in either normal or reversed order\"\"\"\n    return (lst == target) or (lst[::-1] == target)\n\ndef g(lst: List[int], target: int, reverse=False):\n    if reverse:\n        return target[::-1]\n    else:\n        return target\n\nassert f(g()) == True", "emb": null, "idx_generation": 204, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target: int, reverse=False) -> bool:\n    \"\"\"Check if a list matches the target list in either normal or reversed order\"\"\"\n    return (lst == target) or (lst[::-1] == target)", "solution_func": "def g(lst: List[int], target: int, reverse=False):\n    if reverse:\n        return target[::-1]\n    else:\n        return target", "map_ix": null}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, n=4) -> bool:\n    \"\"\"Find n distinct positive integers in nums that sum to target\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, n))\ndef g(target = 100, n = 4):\n    return [i for i in range(1, target+1)]\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 204, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, n=4) -> bool:\n    \"\"\"Find n distinct positive integers in nums that sum to target\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, n))", "solution_func": "def g(target = 100, n = 4):\n    return [i for i in range(1, target+1)]", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=2, y=3) -> bool:\n    \"\"\"Check if the square root of n is equal to x times y.\"\"\"\n    return math.isclose(math.sqrt(n), x * y)\n    \ndef g(x=2, y=3):\n    return x * y**2\n\nassert f(g())\n", "emb": null, "idx_generation": 205, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, x=2, y=3) -> bool:\n    \"\"\"Check if the square root of n is equal to x times y.\"\"\"\n    return math.isclose(math.sqrt(n), x * y)", "solution_func": "def g(x=2, y=3):\n    return x * y**2", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s1: str, s2: str, s3: str, n=5) -> bool:\n    \"\"\"Check if the n-th character of s1 concatenated with s2 is equal to s3.\"\"\"\n    return (s1 + s2)[n] == s3\n\ndef g(s1='abc', s2='def', s3='f', n=5):\n    return s1[:n] + s2[:n]\n\nassert f(g())\n", "emb": null, "idx_generation": 205, "target_skills": null, "problem_func": "from typing import*\ndef f(s1: str, s2: str, s3: str, n=5) -> bool:\n    \"\"\"Check if the n-th character of s1 concatenated with s2 is equal to s3.\"\"\"\n    return (s1 + s2)[n] == s3", "solution_func": "def g(s1='abc', s2='def', s3='f', n=5):\n    return s1[:n] + s2[:n]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list that sum up to the target.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(nums=[10, 20, 30, 40, 50]):\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 205, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list that sum up to the target.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))", "solution_func": "def g(nums=[10, 20, 30, 40, 50]):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, a='python', b='programming') -> bool:\n    \"\"\"Check if a and b are both substrings of s and appear in the same order as in s.\"\"\"\n    return s.index(a) < s.index(b) and a in s and b in s\ndef g(a='python', b='programming'):\n    return a + b\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 205, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, a='python', b='programming') -> bool:\n    \"\"\"Check if a and b are both substrings of s and appear in the same order as in s.\"\"\"\n    return s.index(a) < s.index(b) and a in s and b in s", "solution_func": "def g(a='python', b='programming'):\n    return a + b", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], n=5) -> bool:\n    \"\"\"Check if there exists n consecutive numbers in nums that add up to a multiple of n.\"\"\"\n    for i in range(len(nums) - n + 1):\n        if sum(nums[i:i+n]) % n == 0:\n            return True\n    return False\ndef g(n=5):\n    return list(range(n))\nassert f(g())\n", "emb": [1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0], "idx_generation": 205, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], n=5) -> bool:\n    \"\"\"Check if there exists n consecutive numbers in nums that add up to a multiple of n.\"\"\"\n    for i in range(len(nums) - n + 1):\n        if sum(nums[i:i+n]) % n == 0:\n            return True\n    return False", "solution_func": "def g(n=5):\n    return list(range(n))", "map_ix": [1, 1, 1, 0, 0, 0, 0, 1, 0, 1]}, {"fitness": 1.0, "program_str": "import math\nfrom typing import*\ndef f(nums: List[int], n=10) -> bool:\n    \"\"\"Check if there exists a number in nums that is divisible by n and has at least n divisors.\"\"\"\n    import math\n    for num in nums:\n        if num % n == 0:\n            count = 2\n            for i in range(2, int(math.sqrt(num)) + 1):\n                if num % i == 0:\n                    count += 2\n                if count >= n:\n                    return True\n            if math.sqrt(num).is_integer() and count + 1 >= n:\n                return True\n    return False\ndef g(n=10):\n    return [n * i for i in range(1, 11)]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 205, "target_skills": null, "problem_func": "import math\nfrom typing import*\ndef f(nums: List[int], n=10) -> bool:\n    \"\"\"Check if there exists a number in nums that is divisible by n and has at least n divisors.\"\"\"\n    import math\n    for num in nums:\n        if num % n == 0:\n            count = 2\n            for i in range(2, int(math.sqrt(num)) + 1):\n                if num % i == 0:\n                    count += 2\n                if count >= n:\n                    return True\n            if math.sqrt(num).is_integer() and count + 1 >= n:\n                return True\n    return False", "solution_func": "def g(n=10):\n    return [n * i for i in range(1, 11)]", "map_ix": [1, 0, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers and a target number, return True if there are two numbers in the list that add up to the target.\"\"\"\n    return any((target - num) in nums for num in nums)\ndef g(nums = [1, 2, 3, 4, 5], target = 9):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 205, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers and a target number, return True if there are two numbers in the list that add up to the target.\"\"\"\n    return any((target - num) in nums for num in nums)", "solution_func": "def g(nums = [1, 2, 3, 4, 5], target = 9):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Given a matrix of integers and a target number, return True if the target is present in the matrix.\"\"\"\n    return any(target in row for row in matrix)\ndef g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target = 5):\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 205, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Given a matrix of integers and a target number, return True if the target is present in the matrix.\"\"\"\n    return any(target in row for row in matrix)", "solution_func": "def g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target = 5):\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(strings: List[str], letter: str) -> bool:\n    \"\"\"Given a list of strings and a letter, return True if the letter appears as the first character in any of the strings.\"\"\"\n    return any(string.startswith(letter) for string in strings)\ndef g(strings = [\"apple\", \"banana\", \"cherry\"], letter = \"b\"):\n    return strings\nassert f(g())\n", "emb": null, "idx_generation": 205, "target_skills": null, "problem_func": "from typing import*\ndef f(strings: List[str], letter: str) -> bool:\n    \"\"\"Given a list of strings and a letter, return True if the letter appears as the first character in any of the strings.\"\"\"\n    return any(string.startswith(letter) for string in strings)", "solution_func": "def g(strings = [\"apple\", \"banana\", \"cherry\"], letter = \"b\"):\n    return strings", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target.\"\"\"\n    return any(((nums[i] + nums[j]) == target) for i in range(len(nums)) for j in range(i + 1, len(nums)))\ndef g(nums: List[int], target: int):\n    return nums, target\nassert f(g([1, 2, 3, 4, 5], 9))\n", "emb": null, "idx_generation": 205, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target.\"\"\"\n    return any(((nums[i] + nums[j]) == target) for i in range(len(nums)) for j in range(i + 1, len(nums)))", "solution_func": "def g(nums: List[int], target: int):\n    return nums, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers, find two numbers such that they add up to a specific target number.\n    You may assume that each input would have exactly one solution, and you may not use the same element twice.\n    Return True if there exists two numbers that add up to the target, False otherwise.\n    \"\"\"\n    numSet = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in numSet and num != complement:\n            return True\n    return False\n\ndef g(nums = [2, 4, 6, 8, 10]):\n    numSet = set(nums)\n    for num in nums:\n        complement = 10 - num\n        if complement in numSet and num != complement:\n            return nums.index(num), nums.index(complement)\n    return -1, -1\n\nassert f(g())\n", "emb": null, "idx_generation": 206, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers, find two numbers such that they add up to a specific target number.\n    You may assume that each input would have exactly one solution, and you may not use the same element twice.\n    Return True if there exists two numbers that add up to the target, False otherwise.\n    \"\"\"\n    numSet = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in numSet and num != complement:\n            return True\n    return False", "solution_func": "def g(nums = [2, 4, 6, 8, 10]):\n    numSet = set(nums)\n    for num in nums:\n        complement = 10 - num\n        if complement in numSet and num != complement:\n            return nums.index(num), nums.index(complement)\n    return -1, -1", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"\n    Given two strings s and t, determine if they are isomorphic.\n    Two strings are isomorphic if the characters in s can be replaced to get t.\n    All occurrences of a character must be replaced with another character while preserving the order of characters.\n    No two characters may map to the same character but a character may map to itself.\n    Return True if s and t are isomorphic, False otherwise.\n    \"\"\"\n    if len(s) != len(t):\n        return False\n    sMap = {}\n    tMap = {}\n    for i in range(len(s)):\n        if s[i] in sMap:\n            if sMap[s[i]] != t[i]:\n                return False\n        if t[i] in tMap:\n            if tMap[t[i]] != s[i]:\n                return False\n        sMap[s[i]] = t[i]\n        tMap[t[i]] = s[i]\n    return True\n\ndef g(s = \"egg\", t = \"add\"):\n    return s, t\n\nassert f(g())\n", "emb": null, "idx_generation": 206, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"\n    Given two strings s and t, determine if they are isomorphic.\n    Two strings are isomorphic if the characters in s can be replaced to get t.\n    All occurrences of a character must be replaced with another character while preserving the order of characters.\n    No two characters may map to the same character but a character may map to itself.\n    Return True if s and t are isomorphic, False otherwise.\n    \"\"\"\n    if len(s) != len(t):\n        return False\n    sMap = {}\n    tMap = {}\n    for i in range(len(s)):\n        if s[i] in sMap:\n            if sMap[s[i]] != t[i]:\n                return False\n        if t[i] in tMap:\n            if tMap[t[i]] != s[i]:\n                return False\n        sMap[s[i]] = t[i]\n        tMap[t[i]] = s[i]\n    return True", "solution_func": "def g(s = \"egg\", t = \"add\"):\n    return s, t", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(words: List[str], pattern: str) -> bool:\n    \"\"\"\n    Given a list of words and a pattern, return a list of words that match the pattern.\n    A word matches the pattern if there exists a permutation of the pattern that maps to the word.\n    Each letter in the pattern may map to any letter in the word.\n    The same letter may not map to multiple letters and a letter may not map to itself.\n    Return True if there exists at least one word that matches the pattern, False otherwise.\n    \"\"\"\n    def match(word: str, pattern: str) -> bool:\n        if len(word) != len(pattern):\n            return False\n        wMap = {}\n        pMap = {}\n        for i in range(len(word)):\n            if word[i] in wMap:\n                if wMap[word[i]] != pattern[i]:\n                    return False\n            if pattern[i] in pMap:\n                if pMap[pattern[i]] != word[i]:\n                    return False\n            wMap[word[i]] = pattern[i]\n            pMap[pattern[i]] = word[i]\n        return True\n\n    matches = []\n    for word in words:\n        if match(word, pattern):\n            matches.append(word)\n    return len(matches) > 0\n\ndef g(words = [\"abc\", \"def\", \"xyz\"], pattern = \"mno\"):\n    return words, pattern\n\nassert f(g())\n", "emb": null, "idx_generation": 206, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], pattern: str) -> bool:\n    \"\"\"\n    Given a list of words and a pattern, return a list of words that match the pattern.\n    A word matches the pattern if there exists a permutation of the pattern that maps to the word.\n    Each letter in the pattern may map to any letter in the word.\n    The same letter may not map to multiple letters and a letter may not map to itself.\n    Return True if there exists at least one word that matches the pattern, False otherwise.\n    \"\"\"\n    def match(word: str, pattern: str) -> bool:\n        if len(word) != len(pattern):\n            return False\n        wMap = {}\n        pMap = {}\n        for i in range(len(word)):\n            if word[i] in wMap:\n                if wMap[word[i]] != pattern[i]:\n                    return False\n            if pattern[i] in pMap:\n                if pMap[pattern[i]] != word[i]:\n                    return False\n            wMap[word[i]] = pattern[i]\n            pMap[pattern[i]] = word[i]\n        return True\n\n    matches = []\n    for word in words:\n        if match(word, pattern):\n            matches.append(word)\n    return len(matches) > 0", "solution_func": "def g(words = [\"abc\", \"def\", \"xyz\"], pattern = \"mno\"):\n    return words, pattern", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(n: int, radius=1) -> bool:\n    \"\"\"Check if the circle with radius 'radius' can fit exactly 'n' squares inside it.\"\"\"\n    square_area = 4 * radius**2\n    circle_area = math.pi * radius**2\n    return square_area * n == circle_area\ndef g(radius = 1):\n    side_length = math.sqrt(2) * radius\n    return int((2 * radius) // side_length)**2\nassert f(g())\n", "emb": null, "idx_generation": 206, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, radius=1) -> bool:\n    \"\"\"Check if the circle with radius 'radius' can fit exactly 'n' squares inside it.\"\"\"\n    square_area = 4 * radius**2\n    circle_area = math.pi * radius**2\n    return square_area * n == circle_area", "solution_func": "def g(radius = 1):\n    side_length = math.sqrt(2) * radius\n    return int((2 * radius) // side_length)**2", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(l: list, target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is the target.\"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == target:\n                return True\n    return False\ndef g(target = 0):\n    l = random.sample(range(-100, 101), 100)\n    return [l, target]\nassert f(g())\n", "emb": null, "idx_generation": 206, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(l: list, target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is the target.\"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == target:\n                return True\n    return False", "solution_func": "def g(target = 0):\n    l = random.sample(range(-100, 101), 100)\n    return [l, target]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, target=8) -> bool:\n    \"\"\"Check if the binary representation of n has exactly 'target' number of 1's.\"\"\"\n    binary_str = bin(n)[2:]\n    return binary_str.count('1') == target\ndef g(target = 8):\n    n = 2**target - 1\n    return n\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 206, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, target=8) -> bool:\n    \"\"\"Check if the binary representation of n has exactly 'target' number of 1's.\"\"\"\n    binary_str = bin(n)[2:]\n    return binary_str.count('1') == target", "solution_func": "def g(target = 8):\n    n = 2**target - 1\n    return n", "map_ix": [0, 1, 0, 0, 1, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], x=0, y=0) -> bool:\n    \"\"\"Check if x and y are the indices of the maximum and minimum values in arr\"\"\"\n    return arr[x] == max(arr) and arr[y] == min(arr)\ndef g(arr: List[int]):\n    max_val = max(arr)\n    min_val = min(arr)\n    x = arr.index(max_val)\n    y = arr.index(min_val)\n    return x, y\nassert f(g([1, 2, 3, 4, 5]))\n", "emb": null, "idx_generation": 206, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], x=0, y=0) -> bool:\n    \"\"\"Check if x and y are the indices of the maximum and minimum values in arr\"\"\"\n    return arr[x] == max(arr) and arr[y] == min(arr)", "solution_func": "def g(arr: List[int]):\n    max_val = max(arr)\n    min_val = min(arr)\n    x = arr.index(max_val)\n    y = arr.index(min_val)\n    return x, y", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, x=0, y=1) -> bool:\n    \"\"\"Check if x and y are indices for adjacent characters in the string s\"\"\"\n    return abs(x - y) == 1 and s[x] + s[y] == \"ab\"\ndef g(s: str):\n    for i in range(len(s) - 1):\n        if s[i] + s[i+1] == \"ab\":\n            return i, i+1\nassert f(g(\"abcde\"))\n", "emb": null, "idx_generation": 206, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, x=0, y=1) -> bool:\n    \"\"\"Check if x and y are indices for adjacent characters in the string s\"\"\"\n    return abs(x - y) == 1 and s[x] + s[y] == \"ab\"", "solution_func": "def g(s: str):\n    for i in range(len(s) - 1):\n        if s[i] + s[i+1] == \"ab\":\n            return i, i+1", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], x=1, y=2) -> bool:\n    \"\"\"Check if arr[x] + arr[y] is a multiple of 5\"\"\"\n    return (arr[x] + arr[y]) % 5 == 0\ndef g(arr: List[int]):\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if (arr[i] + arr[j]) % 5 == 0:\n                return i, j\nassert f(g([1, 2, 3, 4, 5]))\n", "emb": null, "idx_generation": 206, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], x=1, y=2) -> bool:\n    \"\"\"Check if arr[x] + arr[y] is a multiple of 5\"\"\"\n    return (arr[x] + arr[y]) % 5 == 0", "solution_func": "def g(arr: List[int]):\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if (arr[i] + arr[j]) % 5 == 0:\n                return i, j", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10, length=3) -> bool:\n    \"\"\"Find a sequence of length length in nums that sums up to target\"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, length):\n        if sum(combo) == target:\n            return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=10, length=3):\n    for combo in combinations(nums, length):\n        if sum(combo) == target:\n            return combo\n    return []\nassert f(g())\n", "emb": null, "idx_generation": 206, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10, length=3) -> bool:\n    \"\"\"Find a sequence of length length in nums that sums up to target\"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, length):\n        if sum(combo) == target:\n            return True\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=10, length=3):\n    for combo in combinations(nums, length):\n        if sum(combo) == target:\n            return combo\n    return []", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Return True if the target is in the nums list, False otherwise\n    \"\"\"\n    return target in nums\n\ndef g(nums: List[int]):\n    \"\"\"\n    Return a random number from the nums list\n    \"\"\"\n    return random.choice(nums)\n\nassert f(g(), target=5)\n", "emb": null, "idx_generation": 207, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Return True if the target is in the nums list, False otherwise\n    \"\"\"\n    return target in nums", "solution_func": "def g(nums: List[int]):\n    \"\"\"\n    Return a random number from the nums list\n    \"\"\"\n    return random.choice(nums)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substr: str) -> bool:\n    \"\"\"\n    Return True if the substr is a substring of s, False otherwise\n    \"\"\"\n    return substr in s\n\ndef g(s: str):\n    \"\"\"\n    Return the first letter of the string s\n    \"\"\"\n    return s[0]\n\nassert f(g(s=\"hello\"), substr=\"h\")\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 207, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substr: str) -> bool:\n    \"\"\"\n    Return True if the substr is a substring of s, False otherwise\n    \"\"\"\n    return substr in s", "solution_func": "def g(s: str):\n    \"\"\"\n    Return the first letter of the string s\n    \"\"\"\n    return s[0]", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Return True if the target is in the matrix, False otherwise\n    \"\"\"\n    return any(target in row for row in matrix)\n\ndef g(matrix: List[List[int]]):\n    \"\"\"\n    Return the first element of the matrix\n    \"\"\"\n    return matrix[0][0]\n\nassert f(g(), target=5)\n", "emb": null, "idx_generation": 207, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Return True if the target is in the matrix, False otherwise\n    \"\"\"\n    return any(target in row for row in matrix)", "solution_func": "def g(matrix: List[List[int]]):\n    \"\"\"\n    Return the first element of the matrix\n    \"\"\"\n    return matrix[0][0]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target: int) -> bool:\n    \"\"\"\n    Given a 2D numpy array, check if the target number is present in the array.\n    \"\"\"\n    return np.isin(target, arr)\n    \ndef g(arr: np.ndarray, target: int):\n    return arr\n\n# example usage\narr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ntarget = 5\nassert f(g(arr, target), target)\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 207, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target: int) -> bool:\n    \"\"\"\n    Given a 2D numpy array, check if the target number is present in the array.\n    \"\"\"\n    return np.isin(target, arr)", "solution_func": "def g(arr: np.ndarray, target: int):\n    return arr\n\n# example usage\narr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ntarget = 5", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport itertools\n\ndef f(lst: list, k: int) -> bool:\n    \"\"\"\n    Find a subset of lst that has a sum of k.\n    \"\"\"\n    return any(sum(subset) == k for r in range(len(lst)+1) for subset in itertools.combinations(lst, r))\n    \ndef g(lst: list, k: int):\n    return lst\n\n# example usage\nlst = [1, 4, 6, 2, 3]\nk = 8\nassert f(g(lst, k), k)\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 207, "target_skills": null, "problem_func": "from typing import*\nimport itertools\n\ndef f(lst: list, k: int) -> bool:\n    \"\"\"\n    Find a subset of lst that has a sum of k.\n    \"\"\"\n    return any(sum(subset) == k for r in range(len(lst)+1) for subset in itertools.combinations(lst, r))", "solution_func": "def g(lst: list, k: int):\n    return lst\n\n# example usage\nlst = [1, 4, 6, 2, 3]\nk = 8", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport re\n\ndef f(s: str, pattern: str) -> bool:\n    \"\"\"\n    Check if the given pattern is a valid regular expression in the string s.\n    \"\"\"\n    return bool(re.search(pattern, s))\n    \ndef g(s: str, pattern: str):\n    return s\n\n# example usage\ns = \"Hello, World!\"\npattern = \"Hello.*World\"\nassert f(g(s, pattern), pattern)\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 207, "target_skills": null, "problem_func": "from typing import*\nimport re\n\ndef f(s: str, pattern: str) -> bool:\n    \"\"\"\n    Check if the given pattern is a valid regular expression in the string s.\n    \"\"\"\n    return bool(re.search(pattern, s))", "solution_func": "def g(s: str, pattern: str):\n    return s\n\n# example usage\ns = \"Hello, World!\"\npattern = \"Hello.*World\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport itertools\n\ndef f(arr: List[int], target_sum=100) -> bool:\n    \"\"\"Find a subset of the array that sums to the target.\"\"\"\n    n = len(arr)\n    for r in range(1, n+1):\n        for subset in itertools.combinations(arr, r):\n            if sum(subset) == target_sum:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n", "emb": null, "idx_generation": 207, "target_skills": null, "problem_func": "from typing import*\nimport itertools\n\ndef f(arr: List[int], target_sum=100) -> bool:\n    \"\"\"Find a subset of the array that sums to the target.\"\"\"\n    n = len(arr)\n    for r in range(1, n+1):\n        for subset in itertools.combinations(arr, r):\n            if sum(subset) == target_sum:\n                return True\n    return False", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists k consecutive elements in the array that are all even numbers.\"\"\"\n    n = len(arr)\n    for i in range(n - k + 1):\n        if all(num % 2 == 0 for num in arr[i:i+k]):\n            return True\n    return False\n\ndef g():\n    return [1, 2, 4, 6, 8, 10, 12, 14, 16, 18]\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 207, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists k consecutive elements in the array that are all even numbers.\"\"\"\n    n = len(arr)\n    for i in range(n - k + 1):\n        if all(num % 2 == 0 for num in arr[i:i+k]):\n            return True\n    return False", "solution_func": "def g():\n    return [1, 2, 4, 6, 8, 10, 12, 14, 16, 18]", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of elements in the array that sum up to the target.\"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), 15)\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 207, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of elements in the array that sum up to the target.\"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], n=10) -> bool:\n    \"\"\"Check if all numbers in the list are divisible by n.\"\"\"\n    for num in nums:\n        if num % n != 0:\n            return False\n    return True\n\ndef g(n=10):\n    nums = [i for i in range(1, n+1)]\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 207, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], n=10) -> bool:\n    \"\"\"Check if all numbers in the list are divisible by n.\"\"\"\n    for num in nums:\n        if num % n != 0:\n            return False\n    return True", "solution_func": "def g(n=10):\n    nums = [i for i in range(1, n+1)]\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the array that add up to the target value\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(arr, 3))\ndef g(arr = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]):\n    return arr\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 208, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the array that add up to the target value\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(arr, 3))", "solution_func": "def g(arr = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]):\n    return arr", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target value\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, 2))\ndef g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 208, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target value\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, 2))", "solution_func": "def g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Find a number in the matrix that is equal to the target value\"\"\"\n    return any(target in row for row in matrix)\ndef g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 208, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Find a number in the matrix that is equal to the target value\"\"\"\n    return any(target in row for row in matrix)", "solution_func": "def g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10], target_sum=30) -> bool:\n    \"\"\"Check if it is possible to get the target sum by adding three numbers from the list.\"\"\"\n    return any((x + y + z == target_sum for x in nums for y in nums for z in nums)) and n in nums\ndef g(nums=[2, 4, 6, 8, 10], target_sum=30):\n    return [x + y + z for x in nums for y in nums for z in nums]\nassert f(g())\n", "emb": null, "idx_generation": 208, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10], target_sum=30) -> bool:\n    \"\"\"Check if it is possible to get the target sum by adding three numbers from the list.\"\"\"\n    return any((x + y + z == target_sum for x in nums for y in nums for z in nums)) and n in nums", "solution_func": "def g(nums=[2, 4, 6, 8, 10], target_sum=30):\n    return [x + y + z for x in nums for y in nums for z in nums]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(n: int, nums=[1, 2, 3, 4, 5], target_sum=10) -> bool:\n    \"\"\"Check if it is possible to get the target sum by multiplying two numbers from the list.\"\"\"\n    return any((math.prod((x, y)) == target_sum for x in nums for y in nums)) and n in nums\ndef g(nums=[1, 2, 3, 4, 5], target_sum=10):\n    return [math.prod((x, y)) for x in nums for y in nums]\nassert f(g())\n", "emb": null, "idx_generation": 208, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, nums=[1, 2, 3, 4, 5], target_sum=10) -> bool:\n    \"\"\"Check if it is possible to get the target sum by multiplying two numbers from the list.\"\"\"\n    return any((math.prod((x, y)) == target_sum for x in nums for y in nums)) and n in nums", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target_sum=10):\n    return [math.prod((x, y)) for x in nums for y in nums]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, lst=[1, 3, 5, 7, 9, 11], target=10) -> bool:\n    \"\"\"Check if it is possible to find two numbers from the list that add up to the target.\"\"\"\n    return any((x + y == target for x in lst for y in lst)) and n in lst\ndef g(lst=[1, 3, 5, 7, 9, 11], target=10):\n    return [x + y for x in lst for y in lst]\nassert f(g())\n", "emb": null, "idx_generation": 208, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst=[1, 3, 5, 7, 9, 11], target=10) -> bool:\n    \"\"\"Check if it is possible to find two numbers from the list that add up to the target.\"\"\"\n    return any((x + y == target for x in lst for y in lst)) and n in lst", "solution_func": "def g(lst=[1, 3, 5, 7, 9, 11], target=10):\n    return [x + y for x in lst for y in lst]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, s: str, d: dict, l: List[int]) -> bool:\n    \"\"\"Check if a given number, string, dictionary, and list are all present in the provided arguments\"\"\"\n    return n in l and s in d.values() and d.get(s) == n and all(x in l for x in d.keys())\n    \ndef g(n = 10, s = 'hello', d = {'a': 1, 'b': 2, 'c': 3}, l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return n, s, d, l\n\nassert f(*g())\n", "emb": null, "idx_generation": 208, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, s: str, d: dict, l: List[int]) -> bool:\n    \"\"\"Check if a given number, string, dictionary, and list are all present in the provided arguments\"\"\"\n    return n in l and s in d.values() and d.get(s) == n and all(x in l for x in d.keys())", "solution_func": "def g(n = 10, s = 'hello', d = {'a': 1, 'b': 2, 'c': 3}, l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return n, s, d, l", "map_ix": null}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\ndef f(x: float, y: float, z: float) -> bool:\n    \"\"\"Check if the sum of two numbers is equal to the third number\"\"\"\n    return x + y == z or y + z == x or z + x == y\n    \ndef g():\n    import random\n    x = random.uniform(1, 10)\n    y = random.uniform(1, 10)\n    z = x + y\n    return x, y, z\n\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 208, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(x: float, y: float, z: float) -> bool:\n    \"\"\"Check if the sum of two numbers is equal to the third number\"\"\"\n    return x + y == z or y + z == x or z + x == y", "solution_func": "def g():\n    import random\n    x = random.uniform(1, 10)\n    y = random.uniform(1, 10)\n    z = x + y\n    return x, y, z", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"Check if a given string is a palindrome and the length of the string is equal to the provided number\"\"\"\n    return s == s[::-1] and len(s) == n\n    \ndef g(n = 5):\n    import random\n    s = ''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=n))\n    return s, n\n\nassert f(*g())\n", "emb": null, "idx_generation": 208, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"Check if a given string is a palindrome and the length of the string is equal to the provided number\"\"\"\n    return s == s[::-1] and len(s) == n", "solution_func": "def g(n = 5):\n    import random\n    s = ''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=n))\n    return s, n", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, nums=[98765, 54321, 12345], upper_bound=100000) -> bool:\n    \"\"\"Check if n is greater than all numbers in the list and less than the upper bound.\"\"\"\n    return all((i < n for i in nums)) and n < upper_bound\n\ndef g(nums=[98765, 54321, 12345], upper_bound=100000):\n    return max(nums) + 1\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 208, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[98765, 54321, 12345], upper_bound=100000) -> bool:\n    \"\"\"Check if n is greater than all numbers in the list and less than the upper bound.\"\"\"\n    return all((i < n for i in nums)) and n < upper_bound", "solution_func": "def g(nums=[98765, 54321, 12345], upper_bound=100000):\n    return max(nums) + 1", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"\n    Find two numbers in a given list that add up to a target value.\n    \"\"\"\n    return any((x + y) == target for x in numbers for y in numbers if x != y)\ndef g(numbers=[1, 2, 3, 4, 5]):\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == 10:\n                return [numbers[i], numbers[j]]\n    assert False\nassert f(g())\n", "emb": null, "idx_generation": 209, "target_skills": null, "problem_func": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"\n    Find two numbers in a given list that add up to a target value.\n    \"\"\"\n    return any((x + y) == target for x in numbers for y in numbers if x != y)", "solution_func": "def g(numbers=[1, 2, 3, 4, 5]):\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == 10:\n                return [numbers[i], numbers[j]]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=10, y=10) -> bool:\n    \"\"\"\n    Determine if a given point (n, n) is inside a circle with center (x, y) and radius 10.\n    \"\"\"\n    distance = math.sqrt((n - x) ** 2 + (n - y) ** 2)\n    return distance <= 10\ndef g(x=10, y=10):\n    return x\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 209, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, x=10, y=10) -> bool:\n    \"\"\"\n    Determine if a given point (n, n) is inside a circle with center (x, y) and radius 10.\n    \"\"\"\n    distance = math.sqrt((n - x) ** 2 + (n - y) ** 2)\n    return distance <= 10", "solution_func": "def g(x=10, y=10):\n    return x", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(word: str, length=5, letter='a') -> bool:\n    \"\"\"\n    Check if a given word starts with a certain letter and has a certain length.\n    \"\"\"\n    return word[0] == letter and len(word) == length\ndef g(length=5, letter='a'):\n    return letter + \"bcde\"\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 209, "target_skills": null, "problem_func": "from typing import*\ndef f(word: str, length=5, letter='a') -> bool:\n    \"\"\"\n    Check if a given word starts with a certain letter and has a certain length.\n    \"\"\"\n    return word[0] == letter and len(word) == length", "solution_func": "def g(length=5, letter='a'):\n    return letter + \"bcde\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(numbers: List[int], target=10, length=3) -> bool:\n    \"\"\"Find a contiguous subarray of length 'length' whose elements sum up to 'target'\"\"\"\n    for n in numbers:\n        assert isinstance(n, int)\n    for i in range(len(numbers) - length + 1):\n        if sum(numbers[i:i+length]) == target:\n            return True\n    return False\ndef g(target=10, length=3):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return numbers\nassert f(g())\n", "emb": null, "idx_generation": 209, "target_skills": null, "problem_func": "from typing import*\ndef f(numbers: List[int], target=10, length=3) -> bool:\n    \"\"\"Find a contiguous subarray of length 'length' whose elements sum up to 'target'\"\"\"\n    for n in numbers:\n        assert isinstance(n, int)\n    for i in range(len(numbers) - length + 1):\n        if sum(numbers[i:i+length]) == target:\n            return True\n    return False", "solution_func": "def g(target=10, length=3):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return numbers", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(grid: List[List[int]], target=100) -> bool:\n    \"\"\"Find a path from the top left corner to the bottom right corner in the grid, where the sum of the elements in the path is equal to the target value\"\"\"\n    for row in grid:\n        for element in row:\n            assert isinstance(element, int)\n    rows = len(grid)\n    cols = len(grid[0])\n    dp = [[0] * cols for _ in range(rows)]\n    dp[0][0] = grid[0][0]\n    for i in range(1, rows):\n        dp[i][0] = dp[i-1][0] + grid[i][0]\n    for j in range(1, cols):\n        dp[0][j] = dp[0][j-1] + grid[0][j]\n    for i in range(1, rows):\n        for j in range(1, cols):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n    return dp[rows-1][cols-1] == target\ndef g(target=100):\n    grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return grid\nassert f(g())\n", "emb": null, "idx_generation": 209, "target_skills": null, "problem_func": "from typing import*\ndef f(grid: List[List[int]], target=100) -> bool:\n    \"\"\"Find a path from the top left corner to the bottom right corner in the grid, where the sum of the elements in the path is equal to the target value\"\"\"\n    for row in grid:\n        for element in row:\n            assert isinstance(element, int)\n    rows = len(grid)\n    cols = len(grid[0])\n    dp = [[0] * cols for _ in range(rows)]\n    dp[0][0] = grid[0][0]\n    for i in range(1, rows):\n        dp[i][0] = dp[i-1][0] + grid[i][0]\n    for j in range(1, cols):\n        dp[0][j] = dp[0][j-1] + grid[0][j]\n    for i in range(1, rows):\n        for j in range(1, cols):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n    return dp[rows-1][cols-1] == target", "solution_func": "def g(target=100):\n    grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return grid", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(strings: List[str], target=\"python\") -> bool:\n    \"\"\"Find a string in the list that contains the target substring\"\"\"\n    for s in strings:\n        assert isinstance(s, str)\n    for s in strings:\n        if target in s:\n            return True\n    return False\ndef g(target=\"python\"):\n    strings = [\"hello\", \"world\", \"python\", \"programming\"]\n    return strings\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 209, "target_skills": null, "problem_func": "from typing import*\ndef f(strings: List[str], target=\"python\") -> bool:\n    \"\"\"Find a string in the list that contains the target substring\"\"\"\n    for s in strings:\n        assert isinstance(s, str)\n    for s in strings:\n        if target in s:\n            return True\n    return False", "solution_func": "def g(target=\"python\"):\n    strings = [\"hello\", \"world\", \"python\", \"programming\"]\n    return strings", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    for num in nums:\n        complement = target - num\n        if complement in nums:\n            return True\n    return False\ndef g(target=0):\n    return [1, target-1]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 209, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    for num in nums:\n        complement = target - num\n        if complement in nums:\n            return True\n    return False", "solution_func": "def g(target=0):\n    return [1, target-1]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target='lochuv') -> bool:\n    \"\"\"Check if a string is a palindrome and contains target string\"\"\"\n    return s == s[::-1] and target in s\ndef g(target='lochuv'):\n    return target + target[::-1]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 209, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='lochuv') -> bool:\n    \"\"\"Check if a string is a palindrome and contains target string\"\"\"\n    return s == s[::-1] and target in s", "solution_func": "def g(target='lochuv'):\n    return target + target[::-1]", "map_ix": [0, 0, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(target=0):\n    return [1, target-2, 1]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 209, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False", "solution_func": "def g(target=0):\n    return [1, target-2, 1]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=2, b=3, c=5) -> bool:\n    \"\"\"\n    Check if the given number n is divisible by either a, b, or c.\n\n    Sample input:\n    15\n\n    Sample output:\n    True\n\n    Explanation: 15 is divisible by 3.\n    \"\"\"\n    return n % a == 0 or n % b == 0 or n % c == 0\n\ndef g(a=2, b=3, c=5):\n    return math.lcm(a, b, c)\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 209, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, a=2, b=3, c=5) -> bool:\n    \"\"\"\n    Check if the given number n is divisible by either a, b, or c.\n\n    Sample input:\n    15\n\n    Sample output:\n    True\n\n    Explanation: 15 is divisible by 3.\n    \"\"\"\n    return n % a == 0 or n % b == 0 or n % c == 0", "solution_func": "def g(a=2, b=3, c=5):\n    return math.lcm(a, b, c)", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: int, nums=[2, 5, 8, 9, 12, 15, 18, 21, 24, 27], target=30) -> bool:\n    \"\"\"Find two numbers in a list that add up to a target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums=[2, 5, 8, 9, 12, 15, 18, 21, 24, 27], target=30):\n    return nums\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 210, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, nums=[2, 5, 8, 9, 12, 15, 18, 21, 24, 27], target=30) -> bool:\n    \"\"\"Find two numbers in a list that add up to a target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums=[2, 5, 8, 9, 12, 15, 18, 21, 24, 27], target=30):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'imbe', 'jackfruit'], count=3) -> bool:\n    \"\"\"Count the number of occurrences of a substring in a string.\"\"\"\n    return s.count(substrings) == count\ndef g(substrings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'imbe', 'jackfruit'], count=3):\n    return substrings[0]\nassert f(g())\n", "emb": null, "idx_generation": 210, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'imbe', 'jackfruit'], count=3) -> bool:\n    \"\"\"Count the number of occurrences of a substring in a string.\"\"\"\n    return s.count(substrings) == count", "solution_func": "def g(substrings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'imbe', 'jackfruit'], count=3):\n    return substrings[0]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in a list that add up to a target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(nums=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], target=100):\n    return nums\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 210, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in a list that add up to a target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False", "solution_func": "def g(nums=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], target=100):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of numbers, find if there exists a pair of numbers whose sum is equal to the target.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 210, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of numbers, find if there exists a pair of numbers whose sum is equal to the target.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"\n    Given a matrix and a target number, find if the target number exists in the matrix.\n    \"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    left = 0\n    right = m * n - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        num = matrix[mid // n][mid % n]\n        if num == target:\n            return True\n        elif num < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return False\n\ndef g(target=5):\n    matrix = [\n        [1, 3, 5, 7],\n        [10, 11, 16, 20],\n        [23, 30, 34, 60]\n    ]\n    return matrix\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 210, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"\n    Given a matrix and a target number, find if the target number exists in the matrix.\n    \"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    left = 0\n    right = m * n - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        num = matrix[mid // n][mid % n]\n        if num == target:\n            return True\n        elif num < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return False", "solution_func": "def g(target=5):\n    matrix = [\n        [1, 3, 5, 7],\n        [10, 11, 16, 20],\n        [23, 30, 34, 60]\n    ]\n    return matrix", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"\n    Check if a number is a prime number.\n    \"\"\"\n    if n < 2:\n        return False\n    for prime in primes:\n        if prime > math.sqrt(n):\n            break\n        if n % prime == 0:\n            return False\n    return True\n\ndef g():\n    n = 31\n    return n\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 210, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"\n    Check if a number is a prime number.\n    \"\"\"\n    if n < 2:\n        return False\n    for prime in primes:\n        if prime > math.sqrt(n):\n            break\n        if n % prime == 0:\n            return False\n    return True", "solution_func": "def g():\n    n = 31\n    return n", "map_ix": [1, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substr='abc') -> bool:\n    \"\"\"Check if the given string s contains the substring substr.\"\"\"\n    return substr in s\ndef g(substr='abc'):\n    return \"def\" + substr + \"ghi\"\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 210, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substr='abc') -> bool:\n    \"\"\"Check if the given string s contains the substring substr.\"\"\"\n    return substr in s", "solution_func": "def g(substr='abc'):\n    return \"def\" + substr + \"ghi\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list nums that sums up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n", "emb": null, "idx_generation": 210, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list nums that sums up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, factor=3) -> bool:\n    \"\"\"Check if the given number n is divisible by the factor.\"\"\"\n    return n % factor == 0\ndef g(factor=3):\n    return factor * 10\nassert f(g())\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 210, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, factor=3) -> bool:\n    \"\"\"Check if the given number n is divisible by the factor.\"\"\"\n    return n % factor == 0", "solution_func": "def g(factor=3):\n    return factor * 10", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(n: int, m: int) -> bool:\n    \"\"\"Check if the product of two integers is a perfect square.\"\"\"\n    return math.isqrt(n * m) ** 2 == n * m\n\ndef g(n=2, m=3):\n    return n, m\n\nassert f(*g())\n", "emb": null, "idx_generation": 210, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, m: int) -> bool:\n    \"\"\"Check if the product of two integers is a perfect square.\"\"\"\n    return math.isqrt(n * m) ** 2 == n * m", "solution_func": "def g(n=2, m=3):\n    return n, m", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(grid: List[List[int]], target=10, size=3) -> bool:\n    \"\"\"Find a subgrid of size x size whose elements sum up to the target value.\"\"\"\n    for row in grid:\n        assert len(row) == len(grid[0])\n    for row in grid:\n        for element in row:\n            assert isinstance(element, int)\n    for i in range(len(grid) - size + 1):\n        for j in range(len(grid[0]) - size + 1):\n            if sum([grid[x][y] for x in range(i, i + size) for y in range(j, j + size)]) == target:\n                return True\n    return False\n\ndef g(target=10, size=3):\n    return [[1, 2, 3, 4, 5],\n            [6, 7, 8, 9, 10],\n            [11, 12, 13, 14, 15],\n            [16, 17, 18, 19, 20]]\n\nassert f(g())\n", "emb": null, "idx_generation": 211, "target_skills": null, "problem_func": "from typing import*\ndef f(grid: List[List[int]], target=10, size=3) -> bool:\n    \"\"\"Find a subgrid of size x size whose elements sum up to the target value.\"\"\"\n    for row in grid:\n        assert len(row) == len(grid[0])\n    for row in grid:\n        for element in row:\n            assert isinstance(element, int)\n    for i in range(len(grid) - size + 1):\n        for j in range(len(grid[0]) - size + 1):\n            if sum([grid[x][y] for x in range(i, i + size) for y in range(j, j + size)]) == target:\n                return True\n    return False", "solution_func": "def g(target=10, size=3):\n    return [[1, 2, 3, 4, 5],\n            [6, 7, 8, 9, 10],\n            [11, 12, 13, 14, 15],\n            [16, 17, 18, 19, 20]]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find a pair of numbers in the list that sum up to the target value.\"\"\"\n    for num in nums:\n        assert isinstance(num, int)\n    for i in range(len(nums) - 1):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n", "emb": null, "idx_generation": 211, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find a pair of numbers in the list that sum up to the target value.\"\"\"\n    for num in nums:\n        assert isinstance(num, int)\n    for i in range(len(nums) - 1):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target=0):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find a subset of numbers in the list whose sum is equal to the target value.\"\"\"\n    for num in nums:\n        assert isinstance(num, int)\n    for n in range(1, len(nums) + 1):\n        for c in combinations(nums, n):\n            if sum(c) == target:\n                return True\n    return False\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n", "emb": null, "idx_generation": 211, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find a subset of numbers in the list whose sum is equal to the target value.\"\"\"\n    for num in nums:\n        assert isinstance(num, int)\n    for n in range(1, len(nums) + 1):\n        for c in combinations(nums, n):\n            if sum(c) == target:\n                return True\n    return False", "solution_func": "def g(target=0):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, s=\"loornt\", t=\"ornlot\") -> bool:\n    \"\"\"Determine whether s and t are anagrams of each other.\"\"\"\n    return sorted(list(s.lower())) == sorted(list(t.lower()))\ndef g(s=\"loornt\", t=\"ornlot\"):\n    return sorted(list(s.lower()))\nassert f(g()) == True", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 211, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, s=\"loornt\", t=\"ornlot\") -> bool:\n    \"\"\"Determine whether s and t are anagrams of each other.\"\"\"\n    return sorted(list(s.lower())) == sorted(list(t.lower()))", "solution_func": "def g(s=\"loornt\", t=\"ornlot\"):\n    return sorted(list(s.lower()))", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target='ab', count=2) -> bool:\n    \"\"\"\n    Given a string s and a target string of length n, find the number of occurrences of the target string in s.\n\n    Sample Input:\n    `\"ababab\"`\n\n    Sample Output:\n    `3`\n    \"\"\"\n    return s.count(target) == count\ndef g(target='ab', count=2):\n    return target * count\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 211, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='ab', count=2) -> bool:\n    \"\"\"\n    Given a string s and a target string of length n, find the number of occurrences of the target string in s.\n\n    Sample Input:\n    `\"ababab\"`\n\n    Sample Output:\n    `3`\n    \"\"\"\n    return s.count(target) == count", "solution_func": "def g(target='ab', count=2):\n    return target * count", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, arr=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"\n    Given a list of integers arr and an integer n, find if there exists any subset of arr that sums up to n.\n\n    Sample Input:\n    `10`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    def subset_sum(arr, n, idx, curr_sum):\n        if curr_sum == n:\n            return True\n        if idx < 0 or curr_sum > n:\n            return False\n        include = subset_sum(arr, n, idx-1, curr_sum+arr[idx])\n        exclude = subset_sum(arr, n, idx-1, curr_sum)\n        return include or exclude\n    return subset_sum(arr, n, len(arr)-1, 0)\ndef g(arr=[1, 2, 3, 4, 5]):\n    n = sum(arr) // 2\n    return n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 211, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, arr=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"\n    Given a list of integers arr and an integer n, find if there exists any subset of arr that sums up to n.\n\n    Sample Input:\n    `10`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    def subset_sum(arr, n, idx, curr_sum):\n        if curr_sum == n:\n            return True\n        if idx < 0 or curr_sum > n:\n            return False\n        include = subset_sum(arr, n, idx-1, curr_sum+arr[idx])\n        exclude = subset_sum(arr, n, idx-1, curr_sum)\n        return include or exclude\n    return subset_sum(arr, n, len(arr)-1, 0)", "solution_func": "def g(arr=[1, 2, 3, 4, 5]):\n    n = sum(arr) // 2\n    return n", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, target='abc', count=3) -> bool:\n    \"\"\"\n    Given a string s and a target string of length n, find the number of subsequences of s that are equal to the target string.\n\n    Sample Input:\n    `\"abcabcabc\"`\n\n    Sample Output:\n    `4`\n    \"\"\"\n    def count_subsequences(s, target, i, j):\n        if j == len(target):\n            return 1\n        if i == len(s):\n            return 0\n        include = 0\n        if s[i] == target[j]:\n            include = count_subsequences(s, target, i+1, j+1)\n        exclude = count_subsequences(s, target, i+1, j)\n        return include + exclude\n    return count_subsequences(s, target, 0, 0) == count\ndef g(target='abc', count=3):\n    return target * count\nassert f(g())\n", "emb": null, "idx_generation": 211, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='abc', count=3) -> bool:\n    \"\"\"\n    Given a string s and a target string of length n, find the number of subsequences of s that are equal to the target string.\n\n    Sample Input:\n    `\"abcabcabc\"`\n\n    Sample Output:\n    `4`\n    \"\"\"\n    def count_subsequences(s, target, i, j):\n        if j == len(target):\n            return 1\n        if i == len(s):\n            return 0\n        include = 0\n        if s[i] == target[j]:\n            include = count_subsequences(s, target, i+1, j+1)\n        exclude = count_subsequences(s, target, i+1, j)\n        return include + exclude\n    return count_subsequences(s, target, 0, 0) == count", "solution_func": "def g(target='abc', count=3):\n    return target * count", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, a=7, b=8) -> bool:\n    \"\"\"Check if the sum of two numbers is equal to n\"\"\"\n    return a + b == n\ndef g(a=7, b=8):\n    return a, b\nassert f(g())\n", "emb": null, "idx_generation": 211, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=7, b=8) -> bool:\n    \"\"\"Check if the sum of two numbers is equal to n\"\"\"\n    return a + b == n", "solution_func": "def g(a=7, b=8):\n    return a, b", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], n=10, k=2) -> bool:\n    \"\"\"Check if there are exactly k elements in the array that are divisible by n\"\"\"\n    return sum([1 for num in arr if num % n == 0]) == k\ndef g(n=10, k=2):\n    arr = [i for i in range(1, 11)]\n    return arr\nassert f(g())\n", "emb": null, "idx_generation": 211, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], n=10, k=2) -> bool:\n    \"\"\"Check if there are exactly k elements in the array that are divisible by n\"\"\"\n    return sum([1 for num in arr if num % n == 0]) == k", "solution_func": "def g(n=10, k=2):\n    arr = [i for i in range(1, 11)]\n    return arr", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, a='hello', b='world') -> bool:\n    \"\"\"Check if both strings are present in s\"\"\"\n    return a in s and b in s\ndef g(a='hello', b='world'):\n    s = a + ' ' + b\n    return s\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 211, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, a='hello', b='world') -> bool:\n    \"\"\"Check if both strings are present in s\"\"\"\n    return a in s and b in s", "solution_func": "def g(a='hello', b='world'):\n    s = a + ' ' + b\n    return s", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\ndef f(n: int, a=2, b=3, c=5) -> bool:\n    \"\"\"Find n such that n is a prime number and a * b + c is a perfect square\"\"\"\n    return math.isqrt(a * b + c) == a * b + c and all(n % i != 0 for i in range(2, int(math.sqrt(n)) + 1))\ndef g(a=2, b=3, c=5):\n    return (a * b + c) ** 2\nassert f(g())\n", "emb": null, "idx_generation": 212, "target_skills": null, "problem_func": "from typing import*\nimport math\ndef f(n: int, a=2, b=3, c=5) -> bool:\n    \"\"\"Find n such that n is a prime number and a * b + c is a perfect square\"\"\"\n    return math.isqrt(a * b + c) == a * b + c and all(n % i != 0 for i in range(2, int(math.sqrt(n)) + 1))", "solution_func": "def g(a=2, b=3, c=5):\n    return (a * b + c) ** 2", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\ndef f(n: int, a=100, b=200, c=300) -> bool:\n    \"\"\"Find n such that n is a random number between a and b (inclusive) and n is divisible by c\"\"\"\n    return n >= a and n <= b and n % c == 0\ndef g(a=100, b=200, c=300):\n    return random.randint(a, b)\nassert f(g())\n", "emb": null, "idx_generation": 212, "target_skills": null, "problem_func": "from typing import*\nimport random\ndef f(n: int, a=100, b=200, c=300) -> bool:\n    \"\"\"Find n such that n is a random number between a and b (inclusive) and n is divisible by c\"\"\"\n    return n >= a and n <= b and n % c == 0", "solution_func": "def g(a=100, b=200, c=300):\n    return random.randint(a, b)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport string\ndef f(s: str, a='abc', b='def') -> bool:\n    \"\"\"Check if s is a palindrome and contains both a and b\"\"\"\n    return s == s[::-1] and a in s and b in s\ndef g(a='abc', b='def'):\n    return b + a + b\nassert f(g())\n", "emb": null, "idx_generation": 212, "target_skills": null, "problem_func": "from typing import*\nimport string\ndef f(s: str, a='abc', b='def') -> bool:\n    \"\"\"Check if s is a palindrome and contains both a and b\"\"\"\n    return s == s[::-1] and a in s and b in s", "solution_func": "def g(a='abc', b='def'):\n    return b + a + b", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int, k=2) -> bool:\n    \"\"\"Find k numbers in nums that sum up to target.\"\"\"\n    assert len(nums) >= k\n    return sum(nums[:k]) == target\ndef g(nums=[1, 2, 3, 4, 5], target=7, k=2):\n    from itertools import combinations\n    for c in combinations(nums, k):\n        if sum(c) == target:\n            return list(c)\nassert f(g())\n", "emb": null, "idx_generation": 212, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int, k=2) -> bool:\n    \"\"\"Find k numbers in nums that sum up to target.\"\"\"\n    assert len(nums) >= k\n    return sum(nums[:k]) == target", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=7, k=2):\n    from itertools import combinations\n    for c in combinations(nums, k):\n        if sum(c) == target:\n            return list(c)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, chars='abcdefghijklmnopqrstuvwxyz', vowels='aeiou') -> bool:\n    \"\"\"Check if all characters in s are either in chars or vowels.\"\"\"\n    return all(c in chars or c in vowels for c in s)\ndef g(s='hello world', chars='abcdefghijklmnopqrstuvwxyz', vowels='aeiou'):\n    return s\nassert f(g())\n", "emb": null, "idx_generation": 212, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, chars='abcdefghijklmnopqrstuvwxyz', vowels='aeiou') -> bool:\n    \"\"\"Check if all characters in s are either in chars or vowels.\"\"\"\n    return all(c in chars or c in vowels for c in s)", "solution_func": "def g(s='hello world', chars='abcdefghijklmnopqrstuvwxyz', vowels='aeiou'):\n    return s", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix, target=0) -> bool:\n    \"\"\"Check if any row in matrix sums up to target.\"\"\"\n    return any(sum(row) == target for row in matrix)\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=15):\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 212, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix, target=0) -> bool:\n    \"\"\"Check if any row in matrix sums up to target.\"\"\"\n    return any(sum(row) == target for row in matrix)", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=15):\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=10, b=5) -> bool:\n    \"\"\"Check if the logarithm of x to the base a is equal to b.\"\"\"\n    return math.log(x, a) == b\n\ndef g(a=10, b=5):\n    return a ** b\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 212, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, a=10, b=5) -> bool:\n    \"\"\"Check if the logarithm of x to the base a is equal to b.\"\"\"\n    return math.log(x, a) == b", "solution_func": "def g(a=10, b=5):\n    return a ** b", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport string\n\ndef f(x: str, a=\"Hello\", b=\"World\") -> bool:\n    \"\"\"Check if x is equal to the concatenation of a and b.\"\"\"\n    return x == a + b\n\ndef g(a=\"Hello\", b=\"World\"):\n    return a + b\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 212, "target_skills": null, "problem_func": "from typing import*\nimport string\n\ndef f(x: str, a=\"Hello\", b=\"World\") -> bool:\n    \"\"\"Check if x is equal to the concatenation of a and b.\"\"\"\n    return x == a + b", "solution_func": "def g(a=\"Hello\", b=\"World\"):\n    return a + b", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(x: int, a=100, b=50) -> bool:\n    \"\"\"Check if x is a random number between a and b (inclusive).\"\"\"\n    return a <= x <= b\n\ndef g(a=100, b=50):\n    return random.randint(b, a)\n\nassert f(g())\n", "emb": null, "idx_generation": 212, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(x: int, a=100, b=50) -> bool:\n    \"\"\"Check if x is a random number between a and b (inclusive).\"\"\"\n    return a <= x <= b", "solution_func": "def g(a=100, b=50):\n    return random.randint(b, a)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, c1='a', c2='b', c3='c', count1=10, count2=5, count3=3) -> bool:\n    \"\"\"\n    Find a string that has count1 occurrences of c1, count2 occurrences of c2, and count3 occurrences of c3,\n    and the counts are in increasing order.\n    \"\"\"\n    return s.count(c1) == count1 and s.count(c2) == count2 and s.count(c3) == count3 and s.index(c1) < s.index(c2) < s.index(c3)\ndef g(c1 = 'a', c2 = 'b', c3 = 'c', count1 = 10, count2 = 5, count3 = 3):\n    return c1 * count1 + c2 * count2 + c3 * count3\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 212, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, c1='a', c2='b', c3='c', count1=10, count2=5, count3=3) -> bool:\n    \"\"\"\n    Find a string that has count1 occurrences of c1, count2 occurrences of c2, and count3 occurrences of c3,\n    and the counts are in increasing order.\n    \"\"\"\n    return s.count(c1) == count1 and s.count(c2) == count2 and s.count(c3) == count3 and s.index(c1) < s.index(c2) < s.index(c3)", "solution_func": "def g(c1 = 'a', c2 = 'b', c3 = 'c', count1 = 10, count2 = 5, count3 = 3):\n    return c1 * count1 + c2 * count2 + c3 * count3", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(numbers: List[int], target=100, operations=['+', '-']) -> bool:\n    \"\"\"Find an expression using the given numbers and operations that evaluates to the target value.\"\"\"\n    assert all((isinstance(n, int) for n in numbers)), 'numbers must be integers'\n    assert target > 0, 'target must be a positive number'\n    assert all((op in ['+', '-'] for op in operations)), 'operations must be + or -'\n    return eval(' '.join([str(n) + op for n, op in zip(numbers, operations)]) + str(numbers[-1])) == target\ndef g(target = 100, operations = ['+', '-']):\n    return [1, 2, 3]\nassert f(g())\n", "emb": null, "idx_generation": 213, "target_skills": null, "problem_func": "from typing import*\ndef f(numbers: List[int], target=100, operations=['+', '-']) -> bool:\n    \"\"\"Find an expression using the given numbers and operations that evaluates to the target value.\"\"\"\n    assert all((isinstance(n, int) for n in numbers)), 'numbers must be integers'\n    assert target > 0, 'target must be a positive number'\n    assert all((op in ['+', '-'] for op in operations)), 'operations must be + or -'\n    return eval(' '.join([str(n) + op for n, op in zip(numbers, operations)]) + str(numbers[-1])) == target", "solution_func": "def g(target = 100, operations = ['+', '-']):\n    return [1, 2, 3]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(names: List[str], target_length=5, vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Find names from the given list that have the target length and contain all the vowels.\"\"\"\n    assert all((isinstance(name, str) for name in names)), 'names must be strings'\n    assert target_length > 0, 'target_length must be a positive number'\n    assert all((vowel in ['a', 'e', 'i', 'o', 'u'] for vowel in vowels)), 'vowels must be aeiou'\n    return all((len(name) == target_length and all((vowel in name for vowel in vowels)) for name in names))\ndef g(target_length = 5, vowels = ['a', 'e', 'i', 'o', 'u']):\n    return ['apple', 'banana', 'cherry']\nassert f(g())\n", "emb": null, "idx_generation": 213, "target_skills": null, "problem_func": "from typing import*\ndef f(names: List[str], target_length=5, vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Find names from the given list that have the target length and contain all the vowels.\"\"\"\n    assert all((isinstance(name, str) for name in names)), 'names must be strings'\n    assert target_length > 0, 'target_length must be a positive number'\n    assert all((vowel in ['a', 'e', 'i', 'o', 'u'] for vowel in vowels)), 'vowels must be aeiou'\n    return all((len(name) == target_length and all((vowel in name for vowel in vowels)) for name in names))", "solution_func": "def g(target_length = 5, vowels = ['a', 'e', 'i', 'o', 'u']):\n    return ['apple', 'banana', 'cherry']", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(grades: List[float], threshold=75.0, weights=[0.4, 0.6]) -> bool:\n    \"\"\"Check if a student's average grade meets the desired threshold.\"\"\"\n    assert all((isinstance(grade, float) for grade in grades)), 'grades must be floats'\n    assert 0.0 <= threshold <= 100.0, 'threshold must be between 0 and 100'\n    assert len(weights) == len(grades), 'weights and grades must have the same length'\n    assert all((0.0 <= weight <= 1.0 for weight in weights)), 'weights must be between 0 and 1'\n    return sum([grade * weight for grade, weight in zip(grades, weights)]) >= threshold\ndef g(threshold = 75.0, weights = [0.4, 0.6]):\n    return [80.0, 90.0]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 213, "target_skills": null, "problem_func": "from typing import*\ndef f(grades: List[float], threshold=75.0, weights=[0.4, 0.6]) -> bool:\n    \"\"\"Check if a student's average grade meets the desired threshold.\"\"\"\n    assert all((isinstance(grade, float) for grade in grades)), 'grades must be floats'\n    assert 0.0 <= threshold <= 100.0, 'threshold must be between 0 and 100'\n    assert len(weights) == len(grades), 'weights and grades must have the same length'\n    assert all((0.0 <= weight <= 1.0 for weight in weights)), 'weights must be between 0 and 1'\n    return sum([grade * weight for grade, weight in zip(grades, weights)]) >= threshold", "solution_func": "def g(threshold = 75.0, weights = [0.4, 0.6]):\n    return [80.0, 90.0]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, n=4) -> bool:\n    \"\"\"\n    Check if a given matrix is a magic square. A magic square is a square matrix in which the sum of each row, each\n    column, and both main diagonals are the same.\n\n    Sample input:\n    np.array([[2, 7, 6], [9, 5, 1], [4, 3, 8]])\n\n    Sample output:\n    True\n\n    The given matrix is a magic square since the sum of each row, each column, and both main diagonals is 15.\n    \"\"\"\n    target_sum = n * (n ** 2 + 1) // 2\n\n    row_sums = np.sum(matrix, axis=1)\n    col_sums = np.sum(matrix, axis=0)\n    diag_sum = np.trace(matrix)\n    anti_diag_sum = np.trace(np.fliplr(matrix))\n\n    return np.all(row_sums == target_sum) and np.all(col_sums == target_sum) and diag_sum == target_sum and anti_diag_sum == target_sum\n\ndef g(n=4):\n    matrix = np.zeros((n, n))\n    num = 1\n\n    i, j = 0, n // 2\n\n    while num <= n ** 2:\n        matrix[i, j] = num\n        num += 1\n        new_i, new_j = (i - 1) % n, (j + 1) % n\n        if matrix[new_i, new_j] != 0:\n            i += 1\n        else:\n            i, j = new_i, new_j\n\n    return matrix\n\nassert f(g())\n", "emb": null, "idx_generation": 213, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, n=4) -> bool:\n    \"\"\"\n    Check if a given matrix is a magic square. A magic square is a square matrix in which the sum of each row, each\n    column, and both main diagonals are the same.\n\n    Sample input:\n    np.array([[2, 7, 6], [9, 5, 1], [4, 3, 8]])\n\n    Sample output:\n    True\n\n    The given matrix is a magic square since the sum of each row, each column, and both main diagonals is 15.\n    \"\"\"\n    target_sum = n * (n ** 2 + 1) // 2\n\n    row_sums = np.sum(matrix, axis=1)\n    col_sums = np.sum(matrix, axis=0)\n    diag_sum = np.trace(matrix)\n    anti_diag_sum = np.trace(np.fliplr(matrix))\n\n    return np.all(row_sums == target_sum) and np.all(col_sums == target_sum) and diag_sum == target_sum and anti_diag_sum == target_sum", "solution_func": "def g(n=4):\n    matrix = np.zeros((n, n))\n    num = 1\n\n    i, j = 0, n // 2\n\n    while num <= n ** 2:\n        matrix[i, j] = num\n        num += 1\n        new_i, new_j = (i - 1) % n, (j + 1) % n\n        if matrix[new_i, new_j] != 0:\n            i += 1\n        else:\n            i, j = new_i, new_j\n\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, a=123456789, b=987654321) -> bool:\n    \"\"\"\n    Check if a given number is a palindrome.\n\n    Sample input:\n    123321\n\n    Sample output:\n    True\n\n    The given number is a palindrome since it reads the same forward and backward.\n    \"\"\"\n    num_str = str(n)\n    return num_str == num_str[::-1]\n\ndef g(a=123456789, b=987654321):\n    return a * b\n\nassert f(g())\n", "emb": null, "idx_generation": 213, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=123456789, b=987654321) -> bool:\n    \"\"\"\n    Check if a given number is a palindrome.\n\n    Sample input:\n    123321\n\n    Sample output:\n    True\n\n    The given number is a palindrome since it reads the same forward and backward.\n    \"\"\"\n    num_str = str(n)\n    return num_str == num_str[::-1]", "solution_func": "def g(a=123456789, b=987654321):\n    return a * b", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport itertools\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Check if a given list of numbers can be rearranged to form a valid arithmetic progression.\n\n    Sample input:\n    [2, 4, 6, 8]\n\n    Sample output:\n    True\n\n    The given list can be rearranged to form an arithmetic progression [2, 4, 6, 8].\n    \"\"\"\n    if len(nums) < 2:\n        return False\n\n    nums.sort()\n\n    diffs = [nums[i+1] - nums[i] for i in range(len(nums)-1)]\n    return all(diff == diffs[0] for diff in diffs)\n\ndef g(target=10):\n    nums = list(itertools.permutations(range(1, target // 2 + 1), 2))\n    nums = [num for num in nums if sum(num) == target]\n    nums = list(itertools.chain.from_iterable(nums))\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 213, "target_skills": null, "problem_func": "from typing import*\nimport itertools\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Check if a given list of numbers can be rearranged to form a valid arithmetic progression.\n\n    Sample input:\n    [2, 4, 6, 8]\n\n    Sample output:\n    True\n\n    The given list can be rearranged to form an arithmetic progression [2, 4, 6, 8].\n    \"\"\"\n    if len(nums) < 2:\n        return False\n\n    nums.sort()\n\n    diffs = [nums[i+1] - nums[i] for i in range(len(nums)-1)]\n    return all(diff == diffs[0] for diff in diffs)", "solution_func": "def g(target=10):\n    nums = list(itertools.permutations(range(1, target // 2 + 1), 2))\n    nums = [num for num in nums if sum(num) == target]\n    nums = list(itertools.chain.from_iterable(nums))\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are three numbers in the list that sum up to the target\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, 3))\ndef g(nums = [1, 2, 3, 4, 5], target = 9):\n    return nums, target\nassert f(*g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 213, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are three numbers in the list that sum up to the target\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, 3))", "solution_func": "def g(nums = [1, 2, 3, 4, 5], target = 9):\n    return nums, target", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list contains a subarray with sum equal to zero\"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum in prefix_sums or prefix_sum == 0:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False\ndef g(nums = [1, -2, 3, 4, -1]):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 213, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list contains a subarray with sum equal to zero\"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum in prefix_sums or prefix_sum == 0:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False", "solution_func": "def g(nums = [1, -2, 3, 4, -1]):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"Check if there are two distinct indices i and j in the list such that nums[i] == nums[j] and abs(i - j) <= k\"\"\"\n    seen = {}\n    for i, num in enumerate(nums):\n        if num in seen and abs(i - seen[num]) <= k:\n            return True\n        seen[num] = i\n    return False\ndef g(nums = [1, 2, 3, 1, 4, 5], k = 3):\n    return nums, k\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 213, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"Check if there are two distinct indices i and j in the list such that nums[i] == nums[j] and abs(i - j) <= k\"\"\"\n    seen = {}\n    for i, num in enumerate(nums):\n        if num in seen and abs(i - seen[num]) <= k:\n            return True\n        seen[num] = i\n    return False", "solution_func": "def g(nums = [1, 2, 3, 1, 4, 5], k = 3):\n    return nums, k", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums = [1, 2, 3, 4, 5, 6], target = 10):\n    return nums, target\n\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 213, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums = [1, 2, 3, 4, 5, 6], target = 10):\n    return nums, target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, factors=[3, 5]) -> bool:\n    \"\"\"\n    Given a positive integer n, determine if it can be expressed as the sum of two distinct positive integers a and b,\n    each of which is divisible by either 3 or 5.\n    \n    Sample Input:\n    n = 18\n    factors = [3, 5]\n    \n    Sample Output:\n    True\n    \"\"\"\n    for i in range(1, n):\n        if (i % factors[0] == 0 and (n-i) % factors[1] == 0) or (i % factors[1] == 0 and (n-i) % factors[0] == 0):\n            return True\n    return False\ndef g(factors=[3, 5]):\n    return sum(factors)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 214, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, factors=[3, 5]) -> bool:\n    \"\"\"\n    Given a positive integer n, determine if it can be expressed as the sum of two distinct positive integers a and b,\n    each of which is divisible by either 3 or 5.\n    \n    Sample Input:\n    n = 18\n    factors = [3, 5]\n    \n    Sample Output:\n    True\n    \"\"\"\n    for i in range(1, n):\n        if (i % factors[0] == 0 and (n-i) % factors[1] == 0) or (i % factors[1] == 0 and (n-i) % factors[0] == 0):\n            return True\n    return False", "solution_func": "def g(factors=[3, 5]):\n    return sum(factors)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, t='abcdef') -> bool:\n    \"\"\"\n    Given two strings s and t, determine if s is a substring of t.\n    \n    Sample Input:\n    s = 'abc'\n    t = 'abcdef'\n    \n    Sample Output:\n    True\n    \"\"\"\n    return s in t\ndef g(t='abcdef'):\n    return t\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 214, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, t='abcdef') -> bool:\n    \"\"\"\n    Given two strings s and t, determine if s is a substring of t.\n    \n    Sample Input:\n    s = 'abc'\n    t = 'abcdef'\n    \n    Sample Output:\n    True\n    \"\"\"\n    return s in t", "solution_func": "def g(t='abcdef'):\n    return t", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"\n    Given an array of integers arr and a target integer, return True if there are two distinct indices i and j such that\n    arr[i] + arr[j] == target.\n    \n    Sample Input:\n    arr = [2, 4, 6, 8]\n    target = 12\n    \n    Sample Output:\n    True\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(arr=[2, 4, 6, 8], target=10):\n    return arr\nassert f(g())", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 214, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"\n    Given an array of integers arr and a target integer, return True if there are two distinct indices i and j such that\n    arr[i] + arr[j] == target.\n    \n    Sample Input:\n    arr = [2, 4, 6, 8]\n    target = 12\n    \n    Sample Output:\n    True\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(arr=[2, 4, 6, 8], target=10):\n    return arr", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(num_list: List[int], target_sum=10, num_elements=3) -> bool:\n    \"\"\"Find num_elements distinct integers from num_list that sum up to target_sum\"\"\"\n    return len(num_list) >= num_elements and sum(num_list) == target_sum\n\ndef g(num_list: List[int], target_sum=10, num_elements=3):\n    random.shuffle(num_list)\n    return num_list[:num_elements]\n\nassert f(g([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n", "emb": null, "idx_generation": 214, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(num_list: List[int], target_sum=10, num_elements=3) -> bool:\n    \"\"\"Find num_elements distinct integers from num_list that sum up to target_sum\"\"\"\n    return len(num_list) >= num_elements and sum(num_list) == target_sum", "solution_func": "def g(num_list: List[int], target_sum=10, num_elements=3):\n    random.shuffle(num_list)\n    return num_list[:num_elements]", "map_ix": null}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\nfrom itertools import combinations\n\ndef f(num_list: List[int], target_sum=20, num_elements=4) -> bool:\n    \"\"\"Find num_elements distinct integers from num_list that sum up to target_sum\"\"\"\n    for combination in combinations(num_list, num_elements):\n        if sum(combination) == target_sum:\n            return True\n    return False\n\ndef g(num_list: List[int], target_sum=20, num_elements=4):\n    return num_list\n\nassert f(g([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 214, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\nfrom itertools import combinations\n\ndef f(num_list: List[int], target_sum=20, num_elements=4) -> bool:\n    \"\"\"Find num_elements distinct integers from num_list that sum up to target_sum\"\"\"\n    for combination in combinations(num_list, num_elements):\n        if sum(combination) == target_sum:\n            return True\n    return False", "solution_func": "def g(num_list: List[int], target_sum=20, num_elements=4):\n    return num_list", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find a pair of distinct numbers in the matrix that sum up to target\"\"\"\n    visited = set()\n    for row in matrix:\n        for num in row:\n            if target - num in visited:\n                return True\n            visited.add(num)\n    return False\n\ndef g(matrix: List[List[int]], target=10):\n    return matrix\n\nassert f(g([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 214, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find a pair of distinct numbers in the matrix that sum up to target\"\"\"\n    visited = set()\n    for row in matrix:\n        for num in row:\n            if target - num in visited:\n                return True\n            visited.add(num)\n    return False", "solution_func": "def g(matrix: List[List[int]], target=10):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target = 10):\n    return [2, 4, 6, 8]\nassert f(g())\n", "emb": null, "idx_generation": 214, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(target = 10):\n    return [2, 4, 6, 8]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Check if the target number is in the matrix\"\"\"\n    m, n = len(matrix), len(matrix[0])\n    left, right = 0, m * n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        num = matrix[mid // n][mid % n]\n        if num == target:\n            return True\n        elif num < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False\ndef g(target = 5):\n    return [[1, 3, 5], [7, 9, 11], [13, 15, 17]]\nassert f(g())\n", "emb": null, "idx_generation": 214, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Check if the target number is in the matrix\"\"\"\n    m, n = len(matrix), len(matrix[0])\n    left, right = 0, m * n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        num = matrix[mid // n][mid % n]\n        if num == target:\n            return True\n        elif num < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False", "solution_func": "def g(target = 5):\n    return [[1, 3, 5], [7, 9, 11], [13, 15, 17]]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"Find the index of the target number in the list\"\"\"\n    left, right = 0, len(nums) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if nums[mid] == target:\n            return mid\n        elif nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\ndef g(target = 3):\n    return [1, 2, 3, 4, 5]\nassert f(g()) == 2\n", "emb": null, "idx_generation": 214, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"Find the index of the target number in the list\"\"\"\n    left, right = 0, len(nums) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if nums[mid] == target:\n            return mid\n        elif nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1", "solution_func": "def g(target = 3):\n    return [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: List[int], a=10, b=20, c=30) -> bool:\n    \"\"\"Check if the sum of the list elements is equal to a + b + c\"\"\"\n    return sum(x) == a + b + c\n\ndef g(a=10, b=20, c=30):\n    return [a, b, c]\n\nassert f(g())\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 214, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], a=10, b=20, c=30) -> bool:\n    \"\"\"Check if the sum of the list elements is equal to a + b + c\"\"\"\n    return sum(x) == a + b + c", "solution_func": "def g(a=10, b=20, c=30):\n    return [a, b, c]", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: int, a=5, b=20) -> bool:\n    \"\"\"Check if x is a multiple of a and b\"\"\"\n    return x % a == 0 and x % b == 0\ndef g(a=5, b=20):\n    return a * b\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 215, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, a=5, b=20) -> bool:\n    \"\"\"Check if x is a multiple of a and b\"\"\"\n    return x % a == 0 and x % b == 0", "solution_func": "def g(a=5, b=20):\n    return a * b", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, a=3, b=4) -> bool:\n    \"\"\"Check if x, y, and z form a Pythagorean triple\"\"\"\n    return math.isclose(math.sqrt(x**2 + y**2), z) and x**2 + y**2 == z**2 and x % a == 0 and y % b == 0\ndef g(a=3, b=4):\n    return (a**2 - b**2, 2*a*b, a**2 + b**2)\nassert f(*g())\n", "emb": null, "idx_generation": 215, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, a=3, b=4) -> bool:\n    \"\"\"Check if x, y, and z form a Pythagorean triple\"\"\"\n    return math.isclose(math.sqrt(x**2 + y**2), z) and x**2 + y**2 == z**2 and x % a == 0 and y % b == 0", "solution_func": "def g(a=3, b=4):\n    return (a**2 - b**2, 2*a*b, a**2 + b**2)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, t='aeiou') -> bool:\n    \"\"\"Check if all vowels in s are present in t\"\"\"\n    return all(c in t for c in s if c.lower() in 'aeiou')\ndef g(t='aeiou'):\n    return ''.join(sorted(t, reverse=True))\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 215, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, t='aeiou') -> bool:\n    \"\"\"Check if all vowels in s are present in t\"\"\"\n    return all(c in t for c in s if c.lower() in 'aeiou')", "solution_func": "def g(t='aeiou'):\n    return ''.join(sorted(t, reverse=True))", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find three numbers in the list that add up to the target.\n\n    Return True if such three numbers exist, False otherwise.\n    \"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, 3):\n        if sum(combo) == target:\n            return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=10):\n    \"\"\"\n    Find three numbers in the list that add up to the target number.\n    \"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, 3):\n        if sum(combo) == target:\n            return combo\n    return []\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 215, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find three numbers in the list that add up to the target.\n\n    Return True if such three numbers exist, False otherwise.\n    \"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, 3):\n        if sum(combo) == target:\n            return True\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=10):\n    \"\"\"\n    Find three numbers in the list that add up to the target number.\n    \"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, 3):\n        if sum(combo) == target:\n            return combo\n    return []", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if it is a magic square.\n\n    A magic square is a square matrix where the sums of each row, each column, and both diagonals are the same.\n    Return True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    \n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for j in range(n):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum != target_sum:\n            return False\n    \n    # Check main diagonal\n    diagonal_sum = 0\n    for i in range(n):\n        diagonal_sum += matrix[i][i]\n    if diagonal_sum != target_sum:\n        return False\n    \n    # Check anti-diagonal\n    anti_diagonal_sum = 0\n    for i in range(n):\n        anti_diagonal_sum += matrix[i][n-i-1]\n    if anti_diagonal_sum != target_sum:\n        return False\n    \n    return True\n\ndef g(matrix=[[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    \"\"\"\n    Check if the given matrix is a magic square.\n    \"\"\"\n    return matrix\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0], "idx_generation": 215, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if it is a magic square.\n\n    A magic square is a square matrix where the sums of each row, each column, and both diagonals are the same.\n    Return True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    \n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for j in range(n):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum != target_sum:\n            return False\n    \n    # Check main diagonal\n    diagonal_sum = 0\n    for i in range(n):\n        diagonal_sum += matrix[i][i]\n    if diagonal_sum != target_sum:\n        return False\n    \n    # Check anti-diagonal\n    anti_diagonal_sum = 0\n    for i in range(n):\n        anti_diagonal_sum += matrix[i][n-i-1]\n    if anti_diagonal_sum != target_sum:\n        return False\n    \n    return True", "solution_func": "def g(matrix=[[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    \"\"\"\n    Check if the given matrix is a magic square.\n    \"\"\"\n    return matrix", "map_ix": [1, 1, 0, 1, 0, 0, 1, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, s='programming', t='python') -> bool:\n    \"\"\"\n    Given two strings s and t, check if it is possible to convert s to t by deleting exactly n characters from s.\n\n    Return True if it is possible, False otherwise.\n    \"\"\"\n    if n < 0:\n        return False\n    \n    m = len(s)\n    k = len(t)\n    \n    # Create a 2D table to store the length of the longest common subsequence of s and t\n    dp = [[0] * (k + 1) for _ in range(m + 1)]\n    \n    # Fill in the table using dynamic programming\n    for i in range(1, m + 1):\n        for j in range(1, k + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    # Check if it is possible to convert s to t by deleting n characters\n    return m + k - 2 * dp[m][k] <= n\n\ndef g(s='programming', t='python'):\n    \"\"\"\n    Check if it is possible to convert s to t by deleting characters from s.\n    \"\"\"\n    return s, t\n\nassert f(g())\n", "emb": null, "idx_generation": 215, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, s='programming', t='python') -> bool:\n    \"\"\"\n    Given two strings s and t, check if it is possible to convert s to t by deleting exactly n characters from s.\n\n    Return True if it is possible, False otherwise.\n    \"\"\"\n    if n < 0:\n        return False\n    \n    m = len(s)\n    k = len(t)\n    \n    # Create a 2D table to store the length of the longest common subsequence of s and t\n    dp = [[0] * (k + 1) for _ in range(m + 1)]\n    \n    # Fill in the table using dynamic programming\n    for i in range(1, m + 1):\n        for j in range(1, k + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    # Check if it is possible to convert s to t by deleting n characters\n    return m + k - 2 * dp[m][k] <= n", "solution_func": "def g(s='programming', t='python'):\n    \"\"\"\n    Check if it is possible to convert s to t by deleting characters from s.\n    \"\"\"\n    return s, t", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(seq: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the sequence that adds up to the target\"\"\"\n    return any((seq[i] + seq[j] == target) for i in range(len(seq)) for j in range(i+1, len(seq)))\ndef g(seq: List[int], target: int):\n    return seq + [target - sum(seq)]\nassert f(g([1, 2, 3, 4, 5], 9))\n", "emb": null, "idx_generation": 215, "target_skills": null, "problem_func": "from typing import*\ndef f(seq: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the sequence that adds up to the target\"\"\"\n    return any((seq[i] + seq[j] == target) for i in range(len(seq)) for j in range(i+1, len(seq)))", "solution_func": "def g(seq: List[int], target: int):\n    return seq + [target - sum(seq)]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(words: List[str], n: int) -> bool:\n    \"\"\"Check if there exists a word in the list that has n or more vowels\"\"\"\n    return any((sum((1 for char in word if char in 'aeiouAEIOU')) >= n) for word in words)\ndef g(words: List[str], n: int):\n    return words + ['a' * n]\nassert f(g(['apple', 'banana', 'cherry'], 3))\n", "emb": null, "idx_generation": 215, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], n: int) -> bool:\n    \"\"\"Check if there exists a word in the list that has n or more vowels\"\"\"\n    return any((sum((1 for char in word if char in 'aeiouAEIOU')) >= n) for word in words)", "solution_func": "def g(words: List[str], n: int):\n    return words + ['a' * n]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Check if the target number is present in the matrix\"\"\"\n    return any((target in row) for row in matrix)\ndef g(matrix: List[List[int]], target: int):\n    return matrix + [[target]]\nassert f(g([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 5))\n", "emb": null, "idx_generation": 215, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Check if the target number is present in the matrix\"\"\"\n    return any((target in row) for row in matrix)", "solution_func": "def g(matrix: List[List[int]], target: int):\n    return matrix + [[target]]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target=10) -> bool:\n    \"\"\"Check if the sum of the elements in the array is equal to the target\"\"\"\n    return np.sum(arr) == target\n\ndef g(target=10):\n    return np.array([2, 3, 5])\n\nassert f(g())\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 215, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target=10) -> bool:\n    \"\"\"Check if the sum of the elements in the array is equal to the target\"\"\"\n    return np.sum(arr) == target", "solution_func": "def g(target=10):\n    return np.array([2, 3, 5])", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the array that sum up to the target.\n    \"\"\"\n    return any((target - x in arr) for x in arr)\n\ndef g(size: int = 10, target: int = 15):\n    \"\"\"\n    Generate a numpy array of given size with random integers and return the target value.\n    \"\"\"\n    arr = np.random.randint(1, 10, size)\n    return arr, target\n\nassert f(*g())\n", "emb": null, "idx_generation": 216, "target_skills": null, "problem_func": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the array that sum up to the target.\n    \"\"\"\n    return any((target - x in arr) for x in arr)", "solution_func": "def g(size: int = 10, target: int = 15):\n    \"\"\"\n    Generate a numpy array of given size with random integers and return the target value.\n    \"\"\"\n    arr = np.random.randint(1, 10, size)\n    return arr, target", "map_ix": null}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\nimport math\n\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"\n    Check if the given number is a prime number.\n    \"\"\"\n    return n in primes\n\ndef g(n: int = 17):\n    \"\"\"\n    Generate a random integer and return it.\n    \"\"\"\n    return n\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 216, "target_skills": null, "problem_func": "import random\nfrom typing import*\nimport math\n\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"\n    Check if the given number is a prime number.\n    \"\"\"\n    return n in primes", "solution_func": "def g(n: int = 17):\n    \"\"\"\n    Generate a random integer and return it.\n    \"\"\"\n    return n", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\nimport pandas as pd\n\ndef f(data: pd.DataFrame, column: str, value: int) -> bool:\n    \"\"\"\n    Check if the given value is present in the specified column of the dataframe.\n    \"\"\"\n    return value in data[column].values\n\ndef g():\n    \"\"\"\n    Generate a sample dataframe with a column 'A' containing random integers.\n    \"\"\"\n    data = pd.DataFrame({'A': [1, 2, 3, 4, 5]})\n    column = 'A'\n    value = 3\n    return data, column, value\n\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 216, "target_skills": null, "problem_func": "import random\nfrom typing import*\nimport pandas as pd\n\ndef f(data: pd.DataFrame, column: str, value: int) -> bool:\n    \"\"\"\n    Check if the given value is present in the specified column of the dataframe.\n    \"\"\"\n    return value in data[column].values", "solution_func": "def g():\n    \"\"\"\n    Generate a sample dataframe with a column 'A' containing random integers.\n    \"\"\"\n    data = pd.DataFrame({'A': [1, 2, 3, 4, 5]})\n    column = 'A'\n    value = 3\n    return data, column, value", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(x: List[int], target=20, k=3) -> bool:\n    \"\"\"Find if there exists a combination of k elements in the list that adds up to the target\"\"\"\n    from itertools import combinations\n    for combo in combinations(x, k):\n        if sum(combo) == target:\n            return True\n    return False\n\ndef g(target=20, k=3):\n    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return x\n\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 216, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(x: List[int], target=20, k=3) -> bool:\n    \"\"\"Find if there exists a combination of k elements in the list that adds up to the target\"\"\"\n    from itertools import combinations\n    for combo in combinations(x, k):\n        if sum(combo) == target:\n            return True\n    return False", "solution_func": "def g(target=20, k=3):\n    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return x", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: List[int], k=3) -> bool:\n    \"\"\"Find if there exists a subarray of length k in the list that sums up to zero\"\"\"\n    for i in range(len(x)-k+1):\n        if sum(x[i:i+k]) == 0:\n            return True\n    return False\n\ndef g(k=3):\n    x = [1, -2, 3, 4, -5, 6, 7, 8, -9, 10]\n    return x\n\nassert f(g())\n", "emb": null, "idx_generation": 216, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], k=3) -> bool:\n    \"\"\"Find if there exists a subarray of length k in the list that sums up to zero\"\"\"\n    for i in range(len(x)-k+1):\n        if sum(x[i:i+k]) == 0:\n            return True\n    return False", "solution_func": "def g(k=3):\n    x = [1, -2, 3, 4, -5, 6, 7, 8, -9, 10]\n    return x", "map_ix": null}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(x: List[int], target=100) -> bool:\n    \"\"\"Find if there exists a combination of elements in the list that adds up to the target\"\"\"\n    from itertools import combinations\n    for r in range(1, len(x) + 1):\n        for combo in combinations(x, r):\n            if sum(combo) == target:\n                return True\n    return False\n\ndef g(target=100):\n    x = [10, 20, 30, 40, 50]\n    return x\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 216, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(x: List[int], target=100) -> bool:\n    \"\"\"Find if there exists a combination of elements in the list that adds up to the target\"\"\"\n    from itertools import combinations\n    for r in range(1, len(x) + 1):\n        for combo in combinations(x, r):\n            if sum(combo) == target:\n                return True\n    return False", "solution_func": "def g(target=100):\n    x = [10, 20, 30, 40, 50]\n    return x", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int, a=3, b=7) -> bool:\n    \"\"\"Check if two numbers in the list add up to the target number.\"\"\"\n    return (a in nums) and (target - a in nums) and (b in nums) and (target - b in nums)\ndef g(nums = [1, 5, 2, 9, 4, 6, 3], target = 10, a=3, b=7):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 216, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int, a=3, b=7) -> bool:\n    \"\"\"Check if two numbers in the list add up to the target number.\"\"\"\n    return (a in nums) and (target - a in nums) and (b in nums) and (target - b in nums)", "solution_func": "def g(nums = [1, 5, 2, 9, 4, 6, 3], target = 10, a=3, b=7):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int, rows=3, cols=3) -> bool:\n    \"\"\"Check if the sum of all numbers in the matrix equals the target number.\"\"\"\n    return sum(sum(row) for row in matrix) == target\ndef g(rows=3, cols=3):\n    return [[1] * cols for _ in range(rows)]\nassert f(g())\n", "emb": null, "idx_generation": 216, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int, rows=3, cols=3) -> bool:\n    \"\"\"Check if the sum of all numbers in the matrix equals the target number.\"\"\"\n    return sum(sum(row) for row in matrix) == target", "solution_func": "def g(rows=3, cols=3):\n    return [[1] * cols for _ in range(rows)]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, a='xyz', b='xyzabc', c='abc') -> bool:\n    \"\"\"Check if the string contains all three given substrings.\"\"\"\n    return (a in s) and (b in s) and (c in s)\ndef g(a='xyz', b='xyzabc', c='abc'):\n    return a + b + c\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 216, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, a='xyz', b='xyzabc', c='abc') -> bool:\n    \"\"\"Check if the string contains all three given substrings.\"\"\"\n    return (a in s) and (b in s) and (c in s)", "solution_func": "def g(a='xyz', b='xyzabc', c='abc'):\n    return a + b + c", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, numbers=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) -> bool:\n    \"\"\"\n    Check if a given number is divisible by all the numbers in a list.\n    \"\"\"\n    return all(n % num == 0 for num in numbers)\ndef g(numbers=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]):\n    return min(numbers)\nassert f(g())\n", "emb": null, "idx_generation": 216, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, numbers=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) -> bool:\n    \"\"\"\n    Check if a given number is divisible by all the numbers in a list.\n    \"\"\"\n    return all(n % num == 0 for num in numbers)", "solution_func": "def g(numbers=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]):\n    return min(numbers)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substr='hello') -> bool:\n    \"\"\"Check if a given string contains a specific substring.\"\"\"\n    return substr in s\ndef g(substr='hello'):\n    return \"This is a string that contains the word hello.\"\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 217, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substr='hello') -> bool:\n    \"\"\"Check if a given string contains a specific substring.\"\"\"\n    return substr in s", "solution_func": "def g(substr='hello'):\n    return \"This is a string that contains the word hello.\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19]) -> bool:\n    \"\"\"\n    Check if a given number is divisible by any of the prime numbers in the list.\n    If the number is divisible by any prime number, return True; otherwise, return False.\n    \"\"\"\n    return any(n % prime == 0 for prime in primes)\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19]):\n    return primes[-1] * 10\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 217, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19]) -> bool:\n    \"\"\"\n    Check if a given number is divisible by any of the prime numbers in the list.\n    If the number is divisible by any prime number, return True; otherwise, return False.\n    \"\"\"\n    return any(n % prime == 0 for prime in primes)", "solution_func": "def g(primes=[2, 3, 5, 7, 11, 13, 17, 19]):\n    return primes[-1] * 10", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are two numbers in a given list that sum up to a target number.\n    Return True if such two numbers exist; otherwise, return False.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target=15):\n    return [1, 2, 3, 4, 5, 10]\nassert f(g())\n", "emb": null, "idx_generation": 217, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are two numbers in a given list that sum up to a target number.\n    Return True if such two numbers exist; otherwise, return False.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(target=15):\n    return [1, 2, 3, 4, 5, 10]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find three integers whose product is equal to target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] * nums[j] * nums[k] == target:\n                    return True\n    return False\ndef g(target = 0):\n    return [i for i in range(1, target+1)]\nassert f(g())\n", "emb": null, "idx_generation": 217, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find three integers whose product is equal to target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] * nums[j] * nums[k] == target:\n                    return True\n    return False", "solution_func": "def g(target = 0):\n    return [i for i in range(1, target+1)]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two integers whose sum is equal to target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target = 0):\n    return [i for i in range(1, target+1)]\nassert f(g())\n", "emb": null, "idx_generation": 217, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two integers whose sum is equal to target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target = 0):\n    return [i for i in range(1, target+1)]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two integers whose difference is equal to target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if abs(nums[i] - nums[j]) == target:\n                return True\n    return False\ndef g(target = 0):\n    return [i for i in range(1, target+1)]\nassert f(g())\n", "emb": null, "idx_generation": 217, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two integers whose difference is equal to target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if abs(nums[i] - nums[j]) == target:\n                return True\n    return False", "solution_func": "def g(target = 0):\n    return [i for i in range(1, target+1)]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n=5, m=10) -> bool:\n    \"\"\"\n    Check if a given string can be represented as a matrix of size n x m, with each row and column containing\n    exactly one occurrence of every character in the string.\n\n    Example:\n    s = \"abcdeabcde\"\n    n = 2, m = 5\n\n    The string \"abcdeabcde\" can be represented as the matrix:\n    [['a', 'b', 'c', 'd', 'e'],\n     ['a', 'b', 'c', 'd', 'e']]\n\n    Therefore, f(s, n, m) returns True.\n    \"\"\"\n    assert n * m == len(s), 'The string cannot be represented as a matrix of size n x m'\n    matrix = [[None] * m for _ in range(n)]\n    char_count = {}\n    for char in s:\n        char_count[char] = char_count.get(char, 0) + 1\n    for i in range(n):\n        for j in range(m):\n            for char in char_count:\n                if char_count[char] > 0 and char not in matrix[i] and char not in [matrix[k][j] for k in range(n)]:\n                    matrix[i][j] = char\n                    char_count[char] -= 1\n                    break\n    return all(char_count[char] == 0 for char in char_count)\ndef g(s = \"abcdeabcde\", n = 2, m = 5):\n    return s\nassert f(g())\n", "emb": null, "idx_generation": 217, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=5, m=10) -> bool:\n    \"\"\"\n    Check if a given string can be represented as a matrix of size n x m, with each row and column containing\n    exactly one occurrence of every character in the string.\n\n    Example:\n    s = \"abcdeabcde\"\n    n = 2, m = 5\n\n    The string \"abcdeabcde\" can be represented as the matrix:\n    [['a', 'b', 'c', 'd', 'e'],\n     ['a', 'b', 'c', 'd', 'e']]\n\n    Therefore, f(s, n, m) returns True.\n    \"\"\"\n    assert n * m == len(s), 'The string cannot be represented as a matrix of size n x m'\n    matrix = [[None] * m for _ in range(n)]\n    char_count = {}\n    for char in s:\n        char_count[char] = char_count.get(char, 0) + 1\n    for i in range(n):\n        for j in range(m):\n            for char in char_count:\n                if char_count[char] > 0 and char not in matrix[i] and char not in [matrix[k][j] for k in range(n)]:\n                    matrix[i][j] = char\n                    char_count[char] -= 1\n                    break\n    return all(char_count[char] == 0 for char in char_count)", "solution_func": "def g(s = \"abcdeabcde\", n = 2, m = 5):\n    return s", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"\n    Check if it is possible to obtain the target number by combining the numbers in the list using addition and subtraction.\n\n    Example:\n    numbers = [1, 2, 3, 4, 5]\n\n    It is possible to obtain the target number 100 by the following operations:\n    1 + 2 + 3 + 4 + 5 = 15\n    15 * 2 + 3 * 4 - 5 = 100\n\n    Therefore, f(numbers, target) returns True.\n    \"\"\"\n    assert len(numbers) > 0, 'The list of numbers cannot be empty'\n    dp = set([numbers[0], -numbers[0]])\n    for i in range(1, len(numbers)):\n        new_dp = set()\n        for num in dp:\n            new_dp.add(num + numbers[i])\n            new_dp.add(num - numbers[i])\n        dp = new_dp\n    return target in dp\ndef g(numbers = [1, 2, 3, 4, 5], target = 100):\n    return numbers\nassert f(g())\n", "emb": null, "idx_generation": 217, "target_skills": null, "problem_func": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"\n    Check if it is possible to obtain the target number by combining the numbers in the list using addition and subtraction.\n\n    Example:\n    numbers = [1, 2, 3, 4, 5]\n\n    It is possible to obtain the target number 100 by the following operations:\n    1 + 2 + 3 + 4 + 5 = 15\n    15 * 2 + 3 * 4 - 5 = 100\n\n    Therefore, f(numbers, target) returns True.\n    \"\"\"\n    assert len(numbers) > 0, 'The list of numbers cannot be empty'\n    dp = set([numbers[0], -numbers[0]])\n    for i in range(1, len(numbers)):\n        new_dp = set()\n        for num in dp:\n            new_dp.add(num + numbers[i])\n            new_dp.add(num - numbers[i])\n        dp = new_dp\n    return target in dp", "solution_func": "def g(numbers = [1, 2, 3, 4, 5], target = 100):\n    return numbers", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"\n    Check if a given number is a Palindrome number in base m.\n\n    Example:\n    n = 12321\n    m = 10\n\n    The number 12321 is a Palindrome number in base 10.\n\n    Therefore, f(n, m) returns True.\n    \"\"\"\n    assert n >= 0, 'The number cannot be negative'\n    digits = []\n    while n > 0:\n        digits.append(n % m)\n        n //= m\n    return digits == digits[::-1]\ndef g(n = 12321, m = 10):\n    return n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 217, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"\n    Check if a given number is a Palindrome number in base m.\n\n    Example:\n    n = 12321\n    m = 10\n\n    The number 12321 is a Palindrome number in base 10.\n\n    Therefore, f(n, m) returns True.\n    \"\"\"\n    assert n >= 0, 'The number cannot be negative'\n    digits = []\n    while n > 0:\n        digits.append(n % m)\n        n //= m\n    return digits == digits[::-1]", "solution_func": "def g(n = 12321, m = 10):\n    return n", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: List[int]) -> bool:\n    \"\"\"Find a list of three integers whose sum is 10.\"\"\"\n    return len(x) == 3 and sum(x) == 10\ndef g():\n    return [1, 2, 7]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 217, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int]) -> bool:\n    \"\"\"Find a list of three integers whose sum is 10.\"\"\"\n    return len(x) == 3 and sum(x) == 10", "solution_func": "def g():\n    return [1, 2, 7]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are three elements in the list that sum up to the target value.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), target=10)\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 218, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are three elements in the list that sum up to the target value.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False", "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], n: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there is a pair of numbers that add up to n.\n    \"\"\"\n    num_set = set()\n\n    for num in arr:\n        if n - num in num_set:\n            return True\n        num_set.add(num)\n\n    return False\n\ndef g(n=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), n=10)\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 218, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], n: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there is a pair of numbers that add up to n.\n    \"\"\"\n    num_set = set()\n\n    for num in arr:\n        if n - num in num_set:\n            return True\n        num_set.add(num)\n\n    return False", "solution_func": "def g(n=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix, determine if it is a symmetric matrix.\n    \"\"\"\n    n = len(matrix)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    \n    return True\n\ndef g():\n    return [[1, 2, 3],\n            [2, 4, 5],\n            [3, 5, 6]]\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 218, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix, determine if it is a symmetric matrix.\n    \"\"\"\n    n = len(matrix)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    \n    return True", "solution_func": "def g():\n    return [[1, 2, 3],\n            [2, 4, 5],\n            [3, 5, 6]]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, k=2, target='ab') -> bool:\n    \"\"\"\n    Find the number of occurrences of a target substring in a given string, such that the length of the substring is <= k.\n    \"\"\"\n    count = 0\n    for i in range(len(s) - k + 1):\n        if s[i:i + k] == target:\n            count += 1\n    return count\ndef g(k=2, target='ab'):\n    def count_substring(s):\n        count = 0\n        for i in range(len(s) - k + 1):\n            if s[i:i + k] == target:\n                count += 1\n        return count\n\n    return max(range(len(s) - k + 1), key=count_substring)\nassert f(g())\n", "emb": null, "idx_generation": 218, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, k=2, target='ab') -> bool:\n    \"\"\"\n    Find the number of occurrences of a target substring in a given string, such that the length of the substring is <= k.\n    \"\"\"\n    count = 0\n    for i in range(len(s) - k + 1):\n        if s[i:i + k] == target:\n            count += 1\n    return count", "solution_func": "def g(k=2, target='ab'):\n    def count_substring(s):\n        count = 0\n        for i in range(len(s) - k + 1):\n            if s[i:i + k] == target:\n                count += 1\n        return count\n\n    return max(range(len(s) - k + 1), key=count_substring)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], k=3, target=10) -> bool:\n    \"\"\"\n    Find a subarray of length k in a given list of integers, such that the sum of the subarray is equal to a target value.\n    \"\"\"\n    for i in range(len(arr) - k + 1):\n        if sum(arr[i:i + k]) == target:\n            return True\n    return False\ndef g(k=3, target=10):\n    def subarray_sum(arr):\n        for i in range(len(arr) - k + 1):\n            if sum(arr[i:i + k]) == target:\n                return True\n        return False\n\n    return max(range(len(arr) - k + 1)), key=subarray_sum\nassert f(g())\n", "emb": null, "idx_generation": 218, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], k=3, target=10) -> bool:\n    \"\"\"\n    Find a subarray of length k in a given list of integers, such that the sum of the subarray is equal to a target value.\n    \"\"\"\n    for i in range(len(arr) - k + 1):\n        if sum(arr[i:i + k]) == target:\n            return True\n    return False", "solution_func": "def g(k=3, target=10):\n    def subarray_sum(arr):\n        for i in range(len(arr) - k + 1):\n            if sum(arr[i:i + k]) == target:\n                return True\n        return False\n\n    return max(range(len(arr) - k + 1)), key=subarray_sum", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Find a pair of distinct indices (i, j) such that the sum of the values at matrix[i] and matrix[j] is equal to the target value.\n    \"\"\"\n    for i in range(len(matrix)):\n        for j in range(i+1, len(matrix)):\n            if matrix[i] + matrix[j] == target:\n                return True\n    return False\ndef g(target=0):\n    def find_pair(matrix):\n        for i in range(len(matrix)):\n            for j in range(i+1, len(matrix)):\n                if matrix[i] + matrix[j] == target:\n                    return True\n        return False\n\n    return max(range(len(matrix)), key=find_pair)\nassert f(g())\n", "emb": null, "idx_generation": 218, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Find a pair of distinct indices (i, j) such that the sum of the values at matrix[i] and matrix[j] is equal to the target value.\n    \"\"\"\n    for i in range(len(matrix)):\n        for j in range(i+1, len(matrix)):\n            if matrix[i] + matrix[j] == target:\n                return True\n    return False", "solution_func": "def g(target=0):\n    def find_pair(matrix):\n        for i in range(len(matrix)):\n            for j in range(i+1, len(matrix)):\n                if matrix[i] + matrix[j] == target:\n                    return True\n        return False\n\n    return max(range(len(matrix)), key=find_pair)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, t='TACG', k=3) -> bool:\n    \"\"\"Check if a given string contains a substring of length k that consists only of characters from t.\"\"\"\n    return any((s[i:i+k] in t for i in range(len(s)-k+1)))\ndef g(t='TACG', k=3):\n    return t * k\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 218, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, t='TACG', k=3) -> bool:\n    \"\"\"Check if a given string contains a substring of length k that consists only of characters from t.\"\"\"\n    return any((s[i:i+k] in t for i in range(len(s)-k+1)))", "solution_func": "def g(t='TACG', k=3):\n    return t * k", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17]) -> bool:\n    \"\"\"Check if a number is divisible by all the prime numbers in a given list.\"\"\"\n    return all((n % p == 0 for p in primes))\ndef g(primes=[2, 3, 5, 7, 11, 13, 17]):\n    return reduce(lambda x, y: x * y, primes)\nassert f(g())\n", "emb": null, "idx_generation": 218, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17]) -> bool:\n    \"\"\"Check if a number is divisible by all the prime numbers in a given list.\"\"\"\n    return all((n % p == 0 for p in primes))", "solution_func": "def g(primes=[2, 3, 5, 7, 11, 13, 17]):\n    return reduce(lambda x, y: x * y, primes)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Check if it is possible to add or subtract the numbers in a given list to obtain the target number.\"\"\"\n    if not lst:\n        return target == 0\n    else:\n        return f(lst[1:], target - lst[0]) or f(lst[1:], target + lst[0])\ndef g():\n    return [1, 2, 3, 4]\nassert f(g())\n", "emb": null, "idx_generation": 218, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Check if it is possible to add or subtract the numbers in a given list to obtain the target number.\"\"\"\n    if not lst:\n        return target == 0\n    else:\n        return f(lst[1:], target - lst[0]) or f(lst[1:], target + lst[0])", "solution_func": "def g():\n    return [1, 2, 3, 4]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Find the longest increasing subsequence in the given array.\"\"\"\n    dp = [1] * len(arr)\n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp) == 3\ndef g():\n    return [1, 3, 2, 4, 5]\nassert f(g())\n", "emb": null, "idx_generation": 218, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Find the longest increasing subsequence in the given array.\"\"\"\n    dp = [1] * len(arr)\n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp) == 3", "solution_func": "def g():\n    return [1, 3, 2, 4, 5]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=2.5, b=5) -> bool:\n    \"\"\"Check if a number multiplied by a is equal to b\"\"\"\n\n    return x * a == b\n\ndef g(a=2.5, b=5):\n    return b / a\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 219, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, a=2.5, b=5) -> bool:\n    \"\"\"Check if a number multiplied by a is equal to b\"\"\"\n\n    return x * a == b", "solution_func": "def g(a=2.5, b=5):\n    return b / a", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(x: int, nums: List[int]) -> bool:\n    \"\"\"Check if a number is in a list of numbers\"\"\"\n\n    return x in nums\n\ndef g(nums: List[int]):\n    return random.choice(nums)\n\nassert f(g())\n", "emb": null, "idx_generation": 219, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(x: int, nums: List[int]) -> bool:\n    \"\"\"Check if a number is in a list of numbers\"\"\"\n\n    return x in nums", "solution_func": "def g(nums: List[int]):\n    return random.choice(nums)", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(x: str, words: List[str]) -> bool:\n    \"\"\"Check if a word is in a list of words\"\"\"\n\n    return x in words\n\ndef g(words: List[str]):\n    return random.choice(words)\n\nassert f(g())\n", "emb": null, "idx_generation": 219, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(x: str, words: List[str]) -> bool:\n    \"\"\"Check if a word is in a list of words\"\"\"\n\n    return x in words", "solution_func": "def g(words: List[str]):\n    return random.choice(words)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=100, n=5) -> bool:\n    \"\"\"Find n distinct positive integers that sum to target\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == target\ndef g(target = 100, n = 5):\n    return list(range(1, n+1))\nassert f(g())\n", "emb": null, "idx_generation": 219, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=100, n=5) -> bool:\n    \"\"\"Find n distinct positive integers that sum to target\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == target", "solution_func": "def g(target = 100, n = 5):\n    return list(range(1, n+1))", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=100, n=5) -> bool:\n    \"\"\"Find n distinct positive integers that sum to target, where each integer is divisible by 5\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == target and all((i % 5 == 0 for i in nums))\ndef g(target = 100, n = 5):\n    return list(range(5, 5*n+1, 5))\nassert f(g())\n", "emb": null, "idx_generation": 219, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=100, n=5) -> bool:\n    \"\"\"Find n distinct positive integers that sum to target, where each integer is divisible by 5\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == target and all((i % 5 == 0 for i in nums))", "solution_func": "def g(target = 100, n = 5):\n    return list(range(5, 5*n+1, 5))", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=100, n=5) -> bool:\n    \"\"\"Find n distinct positive integers that sum to target, where each integer is a multiple of 10\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == target and all((i % 10 == 0 for i in nums))\ndef g(target = 100, n = 5):\n    return list(range(10, 10*n+1, 10))\nassert f(g())\n", "emb": null, "idx_generation": 219, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=100, n=5) -> bool:\n    \"\"\"Find n distinct positive integers that sum to target, where each integer is a multiple of 10\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == target and all((i % 10 == 0 for i in nums))", "solution_func": "def g(target = 100, n = 5):\n    return list(range(10, 10*n+1, 10))", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=745, b=16, c=900) -> bool:\n    \"\"\"Check if the square root of the sum of a, b, and c is equal to n\"\"\"\n    return math.sqrt(a + b + c) == n\n\ndef g(a=745, b=16, c=900):\n    return a + b + c\n\nassert f(g())\n", "emb": null, "idx_generation": 219, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, a=745, b=16, c=900) -> bool:\n    \"\"\"Check if the square root of the sum of a, b, and c is equal to n\"\"\"\n    return math.sqrt(a + b + c) == n", "solution_func": "def g(a=745, b=16, c=900):\n    return a + b + c", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target='abcde', length=5) -> bool:\n    \"\"\"Check if the given string s is the reverse of the substring of target with the given length\"\"\"\n    return s == target[length-1::-1]\n\ndef g(target='abcde', length=5):\n    return target[length-1::-1]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 219, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='abcde', length=5) -> bool:\n    \"\"\"Check if the given string s is the reverse of the substring of target with the given length\"\"\"\n    return s == target[length-1::-1]", "solution_func": "def g(target='abcde', length=5):\n    return target[length-1::-1]", "map_ix": [0, 0, 0, 1, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\n\ndef f(n: int, lst=[1, 2, 3, 4, 5], target=9) -> bool:\n    \"\"\"Check if there exists two elements in the list that sum up to the given target\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\n\ndef g(lst=[1, 2, 3, 4, 5], target=9):\n    random.shuffle(lst)\n    return lst\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 219, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(n: int, lst=[1, 2, 3, 4, 5], target=9) -> bool:\n    \"\"\"Check if there exists two elements in the list that sum up to the given target\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False", "solution_func": "def g(lst=[1, 2, 3, 4, 5], target=9):\n    random.shuffle(lst)\n    return lst", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], n: int = 10) -> bool:\n    \"\"\"Check if the sum of every n consecutive elements in the array is divisible by n.\"\"\"\n    return all(sum(arr[i:i+n]) % n == 0 for i in range(0, len(arr)-n+1))\ndef g(n: int = 10):\n    return [i*n for i in range(1, n+1)]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 219, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], n: int = 10) -> bool:\n    \"\"\"Check if the sum of every n consecutive elements in the array is divisible by n.\"\"\"\n    return all(sum(arr[i:i+n]) % n == 0 for i in range(0, len(arr)-n+1))", "solution_func": "def g(n: int = 10):\n    return [i*n for i in range(1, n+1)]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Find Pair Sum\n\n    Given a list of integers, find a pair of numbers that sum up to the target value.\n\n    Example:\n    nums = [2, 5, 7, 3, 9]\n    target = 10\n    output: True\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums=[2, 5, 7, 3, 9], target=10):\n    return nums\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 220, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Find Pair Sum\n\n    Given a list of integers, find a pair of numbers that sum up to the target value.\n\n    Example:\n    nums = [2, 5, 7, 3, 9]\n    target = 10\n    output: True\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums=[2, 5, 7, 3, 9], target=10):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target='hello') -> bool:\n    \"\"\"\n    Check Substring\n\n    Given a string and a target substring, check if the target substring is present in the string.\n\n    Example:\n    s = \"hello world\"\n    target = \"hello\"\n    output: True\n    \"\"\"\n    return target in s\ndef g(s='hello world', target='hello'):\n    return s\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 220, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='hello') -> bool:\n    \"\"\"\n    Check Substring\n\n    Given a string and a target substring, check if the target substring is present in the string.\n\n    Example:\n    s = \"hello world\"\n    target = \"hello\"\n    output: True\n    \"\"\"\n    return target in s", "solution_func": "def g(s='hello world', target='hello'):\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10, n=2) -> bool:\n    \"\"\"\n    Find N-sum\n\n    Given a list of integers, find N numbers that sum up to the target value.\n\n    Example:\n    nums = [2, 5, 7, 3, 9]\n    target = 10\n    n = 3\n    output: True\n    \"\"\"\n    from itertools import combinations\n    for comb in combinations(nums, n):\n        if sum(comb) == target:\n            return True\n    return False\ndef g(nums=[2, 5, 7, 3, 9], target=10, n=3):\n    return nums\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 220, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10, n=2) -> bool:\n    \"\"\"\n    Find N-sum\n\n    Given a list of integers, find N numbers that sum up to the target value.\n\n    Example:\n    nums = [2, 5, 7, 3, 9]\n    target = 10\n    n = 3\n    output: True\n    \"\"\"\n    from itertools import combinations\n    for comb in combinations(nums, n):\n        if sum(comb) == target:\n            return True\n    return False", "solution_func": "def g(nums=[2, 5, 7, 3, 9], target=10, n=3):\n    return nums", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: str, s=['dog', 'cat', 'bird', 'fish', 'rabbit', 'hamster'], n=5) -> bool:\n    \"\"\"Check if x is a concatenation of n strings from s\"\"\"\n    return len(x) == n * len(s[0]) and all(x[i:i+len(s[0])] in s for i in range(0, len(x), len(s[0])))\ndef g(s=['dog', 'cat', 'bird', 'fish', 'rabbit', 'hamster'], n=5):\n    return ''.join([s[i % len(s)] for i in range(n)])\nassert f(g())\n", "emb": null, "idx_generation": 220, "target_skills": null, "problem_func": "from typing import*\ndef f(x: str, s=['dog', 'cat', 'bird', 'fish', 'rabbit', 'hamster'], n=5) -> bool:\n    \"\"\"Check if x is a concatenation of n strings from s\"\"\"\n    return len(x) == n * len(s[0]) and all(x[i:i+len(s[0])] in s for i in range(0, len(x), len(s[0])))", "solution_func": "def g(s=['dog', 'cat', 'bird', 'fish', 'rabbit', 'hamster'], n=5):\n    return ''.join([s[i % len(s)] for i in range(n)])", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(x: int, n=100, m=1000) -> bool:\n    \"\"\"Check if x is present in a randomly generated list of size n and values ranging from 1 to m\"\"\"\n    lst = random.choices(range(1, m+1), k=n)\n    return x in lst\ndef g(n=100, m=1000):\n    lst = random.choices(range(1, m+1), k=n)\n    return random.choice(lst)\nassert f(g())\n", "emb": null, "idx_generation": 220, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(x: int, n=100, m=1000) -> bool:\n    \"\"\"Check if x is present in a randomly generated list of size n and values ranging from 1 to m\"\"\"\n    lst = random.choices(range(1, m+1), k=n)\n    return x in lst", "solution_func": "def g(n=100, m=1000):\n    lst = random.choices(range(1, m+1), k=n)\n    return random.choice(lst)", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\nimport math\n\ndef f(x: int, n=10) -> bool:\n    \"\"\"Check if x is a perfect square and a multiple of n\"\"\"\n    return math.isqrt(x)**2 == x and x % n == 0\ndef g(n=10):\n    return n**2 * random.randint(1, 10)\nassert f(g())\n", "emb": null, "idx_generation": 220, "target_skills": null, "problem_func": "import random\nfrom typing import*\nimport math\n\ndef f(x: int, n=10) -> bool:\n    \"\"\"Check if x is a perfect square and a multiple of n\"\"\"\n    return math.isqrt(x)**2 == x and x % n == 0", "solution_func": "def g(n=10):\n    return n**2 * random.randint(1, 10)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two elements in the list that sum up to the target value\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums)))\ndef g(target = 10):\n    nums = [1, 2, 3, 4, 5]\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 220, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two elements in the list that sum up to the target value\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums)))", "solution_func": "def g(target = 10):\n    nums = [1, 2, 3, 4, 5]\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if the product of all elements in the list is equal to the target value\"\"\"\n    product = 1\n    for num in nums:\n        product *= num\n    return product == target\ndef g(target = 5):\n    nums = [1, 1, 1, 1, 1]\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 220, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if the product of all elements in the list is equal to the target value\"\"\"\n    product = 1\n    for num in nums:\n        product *= num\n    return product == target", "solution_func": "def g(target = 5):\n    nums = [1, 1, 1, 1, 1]\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there are three elements in the list that sum up to the target value\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i + 1, len(nums)) for k in range(j + 1, len(nums)))\ndef g(target = 20):\n    nums = [1, 2, 3, 4, 5]\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 220, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there are three elements in the list that sum up to the target value\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i + 1, len(nums)) for k in range(j + 1, len(nums)))", "solution_func": "def g(target = 20):\n    nums = [1, 2, 3, 4, 5]\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int, start: int = 0) -> bool:\n    \"\"\"Check if there exists a subsequence of nums starting from index 'start' that sums up to target\"\"\"\n    if target == 0:\n        return True\n    if start >= len(nums):\n        return False\n    return f(nums, target - nums[start], start + 1) or f(nums, target, start + 1)\n\ndef g(nums: List[int], target: int):\n    return f(nums, target)\n\nassert f(g()) == True", "emb": null, "idx_generation": 220, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int, start: int = 0) -> bool:\n    \"\"\"Check if there exists a subsequence of nums starting from index 'start' that sums up to target\"\"\"\n    if target == 0:\n        return True\n    if start >= len(nums):\n        return False\n    return f(nums, target - nums[start], start + 1) or f(nums, target, start + 1)", "solution_func": "def g(nums: List[int], target: int):\n    return f(nums, target)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, axis=0) -> bool:\n    \"\"\"Check if the sum of elements along a given axis is odd.\"\"\"\n    return np.sum(arr, axis=axis) % 2 != 0\n\ndef g(arr):\n    return arr\n\narr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nassert f(g(arr))\n", "emb": null, "idx_generation": 221, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, axis=0) -> bool:\n    \"\"\"Check if the sum of elements along a given axis is odd.\"\"\"\n    return np.sum(arr, axis=axis) % 2 != 0", "solution_func": "def g(arr):\n    return arr\n\narr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport re\n\ndef f(s: str, pattern=r'[A-Za-z]+\\d{2}') -> bool:\n    \"\"\"Check if the given pattern matches the string.\"\"\"\n    return bool(re.search(pattern, s))\n\ndef g(pattern=r'[A-Za-z]+\\d{2}'):\n    return pattern\n\ns = \"Hello123\"\nassert f(g(), s)\n", "emb": null, "idx_generation": 221, "target_skills": null, "problem_func": "from typing import*\nimport re\n\ndef f(s: str, pattern=r'[A-Za-z]+\\d{2}') -> bool:\n    \"\"\"Check if the given pattern matches the string.\"\"\"\n    return bool(re.search(pattern, s))", "solution_func": "def g(pattern=r'[A-Za-z]+\\d{2}'):\n    return pattern\n\ns = \"Hello123\"", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport datetime\n\ndef f(dt: datetime.datetime, year=2022) -> bool:\n    \"\"\"Check if the given datetime is in a leap year.\"\"\"\n    return dt.year == year and dt.month == 2 and dt.day == 29\n\ndef g(year=2022):\n    return datetime.datetime(year, 2, 29)\n\nassert f(g())\n", "emb": null, "idx_generation": 221, "target_skills": null, "problem_func": "from typing import*\nimport datetime\n\ndef f(dt: datetime.datetime, year=2022) -> bool:\n    \"\"\"Check if the given datetime is in a leap year.\"\"\"\n    return dt.year == year and dt.month == 2 and dt.day == 29", "solution_func": "def g(year=2022):\n    return datetime.datetime(year, 2, 29)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, strings=['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx', 'yz']) -> bool:\n    \"\"\"Check if the string is a palindrome and contains a vowel\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return s == s[::-1] and any(v in s for v in vowels)\ndef g(strings=['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx', 'yz']):\n    return next((s for s in strings if s == s[::-1] and any(v in s for v in ['a', 'e', 'i', 'o', 'u'])), None)\nassert f(g())\n", "emb": null, "idx_generation": 221, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, strings=['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx', 'yz']) -> bool:\n    \"\"\"Check if the string is a palindrome and contains a vowel\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return s == s[::-1] and any(v in s for v in vowels)", "solution_func": "def g(strings=['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx', 'yz']):\n    return next((s for s in strings if s == s[::-1] and any(v in s for v in ['a', 'e', 'i', 'o', 'u'])), None)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the sum of the first n numbers is divisible by n\"\"\"\n    return sum(numbers[:n]) % n == 0\ndef g(numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return next((n for n in range(1, len(numbers)+1) if sum(numbers[:n]) % n == 0), None)\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 221, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the sum of the first n numbers is divisible by n\"\"\"\n    return sum(numbers[:n]) % n == 0", "solution_func": "def g(numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return next((n for n in range(1, len(numbers)+1) if sum(numbers[:n]) % n == 0), None)", "map_ix": [1, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(n: int, numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the sum of the square roots of the first n numbers is an integer\"\"\"\n    return math.isqrt(sum(math.sqrt(num) for num in numbers[:n]))**2 == sum(math.sqrt(num) for num in numbers[:n])\ndef g(numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return next((n for n in range(1, len(numbers)+1) if math.isqrt(sum(math.sqrt(num) for num in numbers[:n]))**2 == sum(math.sqrt(num) for num in numbers[:n])), None)\nassert f(g())\n", "emb": null, "idx_generation": 221, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the sum of the square roots of the first n numbers is an integer\"\"\"\n    return math.isqrt(sum(math.sqrt(num) for num in numbers[:n]))**2 == sum(math.sqrt(num) for num in numbers[:n])", "solution_func": "def g(numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return next((n for n in range(1, len(numbers)+1) if math.isqrt(sum(math.sqrt(num) for num in numbers[:n]))**2 == sum(math.sqrt(num) for num in numbers[:n])), None)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Check if the given values of x, y, and z satisfy the equation:\n    x^2 + y^2 = z^2\n    \"\"\"\n    return math.isclose(x**2 + y**2, z**2)\n\ndef g(x: float, y: float):\n    \"\"\"\n    Given the values of x and y, find the corresponding value of z\n    that satisfies the equation x^2 + y^2 = z^2\n    \"\"\"\n    return math.sqrt(x**2 + y**2)\n\nassert f(g(x=3, y=4), 3, 4)\n", "emb": null, "idx_generation": 221, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Check if the given values of x, y, and z satisfy the equation:\n    x^2 + y^2 = z^2\n    \"\"\"\n    return math.isclose(x**2 + y**2, z**2)", "solution_func": "def g(x: float, y: float):\n    \"\"\"\n    Given the values of x and y, find the corresponding value of z\n    that satisfies the equation x^2 + y^2 = z^2\n    \"\"\"\n    return math.sqrt(x**2 + y**2)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport itertools\n\ndef f(n: int, k: int, lst: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers and two integers n and k, check if it is possible to select\n    n numbers from the list such that their sum is equal to k.\n    \"\"\"\n    combinations = itertools.combinations(lst, n)\n    for combination in combinations:\n        if sum(combination) == k:\n            return True\n    return False\n\ndef g(n: int, k: int, lst: List[int]):\n    \"\"\"\n    Given the integers n, k, and a list of integers, find the combination of n numbers\n    from the list that sums up to k.\n    \"\"\"\n    combinations = itertools.combinations(lst, n)\n    for combination in combinations:\n        if sum(combination) == k:\n            return combination\n    return []\n\nassert f(k=10, n=3, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n", "emb": null, "idx_generation": 221, "target_skills": null, "problem_func": "from typing import*\nimport itertools\n\ndef f(n: int, k: int, lst: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers and two integers n and k, check if it is possible to select\n    n numbers from the list such that their sum is equal to k.\n    \"\"\"\n    combinations = itertools.combinations(lst, n)\n    for combination in combinations:\n        if sum(combination) == k:\n            return True\n    return False", "solution_func": "def g(n: int, k: int, lst: List[int]):\n    \"\"\"\n    Given the integers n, k, and a list of integers, find the combination of n numbers\n    from the list that sums up to k.\n    \"\"\"\n    combinations = itertools.combinations(lst, n)\n    for combination in combinations:\n        if sum(combination) == k:\n            return combination\n    return []", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray) -> bool:\n    \"\"\"\n    Check if the given matrix is symmetric.\n    \"\"\"\n    return np.array_equal(matrix, matrix.T)\n\ndef g(matrix: np.ndarray):\n    \"\"\"\n    Given a matrix, return its transpose.\n    \"\"\"\n    return matrix.T\n\nassert f(g(np.array([[1, 2, 3], [2, 4, 5], [3, 5, 6]])))\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 221, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray) -> bool:\n    \"\"\"\n    Check if the given matrix is symmetric.\n    \"\"\"\n    return np.array_equal(matrix, matrix.T)", "solution_func": "def g(matrix: np.ndarray):\n    \"\"\"\n    Given a matrix, return its transpose.\n    \"\"\"\n    return matrix.T", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers contains a subarray whose sum is divisible by n.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if sum(nums[i:j]) % n == 0:\n                return True\n    return False\n\ndef g(nums: List[int]):\n    \"\"\"\n    Return a list of numbers with at least one subarray whose sum is divisible by 5.\n    \"\"\"\n    return [1, 2, 3, 4, 5]\n\nassert f(5, g())\n", "emb": null, "idx_generation": 221, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers contains a subarray whose sum is divisible by n.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if sum(nums[i:j]) % n == 0:\n                return True\n    return False", "solution_func": "def g(nums: List[int]):\n    \"\"\"\n    Return a list of numbers with at least one subarray whose sum is divisible by 5.\n    \"\"\"\n    return [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=7, b=11, upper_bound=1000) -> bool:\n    \"\"\"Find a small common multiple of two integers.\"\"\"\n    return n % a == 0 and n % b == 0 and (0 < n <= upper_bound)\ndef g(a = 7, b = 11, upper_bound = 1000):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return a * (b // n)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 222, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=7, b=11, upper_bound=1000) -> bool:\n    \"\"\"Find a small common multiple of two integers.\"\"\"\n    return n % a == 0 and n % b == 0 and (0 < n <= upper_bound)", "solution_func": "def g(a = 7, b = 11, upper_bound = 1000):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return a * (b // n)", "map_ix": [0, 0, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, nums=[3, 5, 7, 11, 13], upper_bound=1000000) -> bool:\n    \"\"\"Find a small common multiple of a list of integers.\"\"\"\n    return all((n % i == 0 for i in nums)) and 0 < n <= upper_bound\ndef g(nums = [3, 5, 7, 11, 13], upper_bound = 1000000):\n    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 222, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[3, 5, 7, 11, 13], upper_bound=1000000) -> bool:\n    \"\"\"Find a small common multiple of a list of integers.\"\"\"\n    return all((n % i == 0 for i in nums)) and 0 < n <= upper_bound", "solution_func": "def g(nums = [3, 5, 7, 11, 13], upper_bound = 1000000):\n    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans", "map_ix": [0, 0, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, substring='abc', count=4, length=16) -> bool:\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length\ndef g(substring = 'abc', count = 4, length = 16):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 222, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, substring='abc', count=4, length=16) -> bool:\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length", "solution_func": "def g(substring = 'abc', count = 4, length = 16):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: list) -> bool:\n    \"\"\"Check if a list of numbers is sorted in non-decreasing order.\"\"\"\n    return nums == sorted(nums)\ndef g(nums = [1, 5, 3, 7, 9]):\n    return sorted(nums)\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 222, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: list) -> bool:\n    \"\"\"Check if a list of numbers is sorted in non-decreasing order.\"\"\"\n    return nums == sorted(nums)", "solution_func": "def g(nums = [1, 5, 3, 7, 9]):\n    return sorted(nums)", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"Check if a string is a palindrome with exactly n vowels.\"\"\"\n    vowels = 'aeiou'\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return s == s[::-1] and count == n\ndef g(s = 'racecar', n = 3):\n    return s\nassert f(g())\n", "emb": null, "idx_generation": 222, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"Check if a string is a palindrome with exactly n vowels.\"\"\"\n    vowels = 'aeiou'\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return s == s[::-1] and count == n", "solution_func": "def g(s = 'racecar', n = 3):\n    return s", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: list, target: int) -> bool:\n    \"\"\"Find two numbers in a list that add up to a given target.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(nums = [2, 4, 6, 8, 10], target = 12):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 222, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: list, target: int) -> bool:\n    \"\"\"Find two numbers in a list that add up to a given target.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(nums = [2, 4, 6, 8, 10], target = 12):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int = 100) -> bool:\n    \"\"\"\n    Find a list of integers where the sum of all numbers is equal to the target\n    \"\"\"\n    return sum(nums) == target\n\ndef g(target: int = 100):\n    if target <= 0:\n        return []\n    return [1] * target\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 222, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int = 100) -> bool:\n    \"\"\"\n    Find a list of integers where the sum of all numbers is equal to the target\n    \"\"\"\n    return sum(nums) == target", "solution_func": "def g(target: int = 100):\n    if target <= 0:\n        return []\n    return [1] * target", "map_ix": [1, 1, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(nums: List[int], target: int = 100) -> bool:\n    \"\"\"\n    Find a list of integers where the product of all numbers is equal to the target\n    \"\"\"\n    return math.prod(nums) == target\n\ndef g(target: int = 100):\n    if target <= 0:\n        return []\n    return [target] * target\n\nassert f(g())\n", "emb": null, "idx_generation": 222, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(nums: List[int], target: int = 100) -> bool:\n    \"\"\"\n    Find a list of integers where the product of all numbers is equal to the target\n    \"\"\"\n    return math.prod(nums) == target", "solution_func": "def g(target: int = 100):\n    if target <= 0:\n        return []\n    return [target] * target", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int = 100, n: int = 5) -> bool:\n    \"\"\"\n    Find a list of integers where the sum of the first n numbers is equal to the target\n    \"\"\"\n    return sum(nums[:n]) == target\n\ndef g(target: int = 100, n: int = 5):\n    if n <= 0:\n        return []\n    return [target // n] * n\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 222, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int = 100, n: int = 5) -> bool:\n    \"\"\"\n    Find a list of integers where the sum of the first n numbers is equal to the target\n    \"\"\"\n    return sum(nums[:n]) == target", "solution_func": "def g(target: int = 100, n: int = 5):\n    if n <= 0:\n        return []\n    return [target // n] * n", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substring='abc', count=2) -> bool:\n    \"\"\"Count the number of times a substring appears in a given string\"\"\"\n    return s.count(substring) == count\ndef g(substring='abc', count=2):\n    return substring * count\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 222, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substring='abc', count=2) -> bool:\n    \"\"\"Count the number of times a substring appears in a given string\"\"\"\n    return s.count(substring) == count", "solution_func": "def g(substring='abc', count=2):\n    return substring * count", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: int, a=5, b=10, c=15) -> bool:\n    \"\"\"Solve an equation problem\"\"\"\n    return (a * x**2) + (b * x) + c == 0\n\ndef g(a=5, b=10, c=15):\n    discriminant = (b**2) - (4 * a * c)\n    x1 = (-b + (discriminant ** 0.5)) / (2 * a)\n    return round(x1, 2)\n\nassert f(g())\n", "emb": null, "idx_generation": 223, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, a=5, b=10, c=15) -> bool:\n    \"\"\"Solve an equation problem\"\"\"\n    return (a * x**2) + (b * x) + c == 0", "solution_func": "def g(a=5, b=10, c=15):\n    discriminant = (b**2) - (4 * a * c)\n    x1 = (-b + (discriminant ** 0.5)) / (2 * a)\n    return round(x1, 2)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(x: int, a=5, b=10, c=15) -> bool:\n    \"\"\"Solve a quadratic equation problem\"\"\"\n    return ((a * (x**2)) + (b * x) + c) % 2 == 0\n\ndef g(a=5, b=10, c=15):\n    discriminant = (b**2) - (4 * a * c)\n    x1 = (-b + (math.sqrt(discriminant))) / (2 * a)\n    return round(x1, 2)\n\nassert f(g())\n", "emb": null, "idx_generation": 223, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: int, a=5, b=10, c=15) -> bool:\n    \"\"\"Solve a quadratic equation problem\"\"\"\n    return ((a * (x**2)) + (b * x) + c) % 2 == 0", "solution_func": "def g(a=5, b=10, c=15):\n    discriminant = (b**2) - (4 * a * c)\n    x1 = (-b + (math.sqrt(discriminant))) / (2 * a)\n    return round(x1, 2)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: str, n=5) -> bool:\n    \"\"\"Check if a string is a palindrome\"\"\"\n    return x[:n] == x[:n][::-1]\n\ndef g(n=5):\n    return \"racecar\"[:n]\n\nassert f(g())\n", "emb": null, "idx_generation": 223, "target_skills": null, "problem_func": "from typing import*\ndef f(x: str, n=5) -> bool:\n    \"\"\"Check if a string is a palindrome\"\"\"\n    return x[:n] == x[:n][::-1]", "solution_func": "def g(n=5):\n    return \"racecar\"[:n]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=1) -> bool:\n    \"\"\"Check if the target value is present in the list of numbers.\"\"\"\n    return target in nums\ndef g(nums=[1, 2, 3, 4, 5], target=1):\n    return nums\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 223, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=1) -> bool:\n    \"\"\"Check if the target value is present in the list of numbers.\"\"\"\n    return target in nums", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=1):\n    return nums", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, radius=1.0) -> bool:\n    \"\"\"Check if the given point lies inside the circle with the given radius centered at (0,0).\"\"\"\n    distance = math.sqrt(x**2 + y**2)\n    return distance < radius\ndef g(x=0.5, y=0.5, radius=1.0):\n    return x, y\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 223, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, y: float, radius=1.0) -> bool:\n    \"\"\"Check if the given point lies inside the circle with the given radius centered at (0,0).\"\"\"\n    distance = math.sqrt(x**2 + y**2)\n    return distance < radius", "solution_func": "def g(x=0.5, y=0.5, radius=1.0):\n    return x, y", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5], target=7):\n    return nums, target\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 223, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=7):\n    return nums, target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list whose sum is equal to the target value.\n    \"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(nums = [10, 5, 8, 15, 3]):\n    return nums\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 223, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list whose sum is equal to the target value.\n    \"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))", "solution_func": "def g(nums = [10, 5, 8, 15, 3]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Check if there exists a number in the matrix that is equal to the target value.\n    \"\"\"\n    return any((target in row for row in matrix))\ndef g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 223, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Check if there exists a number in the matrix that is equal to the target value.\n    \"\"\"\n    return any((target in row for row in matrix))", "solution_func": "def g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list whose product is equal to the target value.\n    \"\"\"\n    return any((lst[i] * lst[j] == target for i in range(len(lst)) for j in range(i+1, len(lst))))\ndef g(lst = [5, 2, 3, 4]):\n    return lst\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 223, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list whose product is equal to the target value.\n    \"\"\"\n    return any((lst[i] * lst[j] == target for i in range(len(lst)) for j in range(i+1, len(lst))))", "solution_func": "def g(lst = [5, 2, 3, 4]):\n    return lst", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Find a pair of numbers from the list that add up to the target\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    pairs = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == 15:\n                pairs.append((nums[i], nums[j]))\n    return pairs\nassert f(g())\n", "emb": null, "idx_generation": 223, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Find a pair of numbers from the list that add up to the target\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    pairs = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == 15:\n                pairs.append((nums[i], nums[j]))\n    return pairs", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"\n    Two Sum\n\n    Given an array of integers, return True if there exists two numbers such that their sum is equal to the target.\n    Otherwise, return False.\n\n    Example:\n    arr = [2, 7, 11, 15], target = 9\n    output: True\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(arr=[2, 7, 11, 15], target=9):\n    \"\"\"\n    Returns the array of integers that sums up to the target.\n    \"\"\"\n    result = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                result.append(arr[i])\n                result.append(arr[j])\n                return result\n    return result\n\nassert f(g())\n", "emb": null, "idx_generation": 224, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"\n    Two Sum\n\n    Given an array of integers, return True if there exists two numbers such that their sum is equal to the target.\n    Otherwise, return False.\n\n    Example:\n    arr = [2, 7, 11, 15], target = 9\n    output: True\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g(arr=[2, 7, 11, 15], target=9):\n    \"\"\"\n    Returns the array of integers that sums up to the target.\n    \"\"\"\n    result = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                result.append(arr[i])\n                result.append(arr[j])\n                return result\n    return result", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import Dict\n\ndef f(d: Dict[str, int], target=100) -> bool:\n    \"\"\"\n    Subset Sum\n\n    Given a dictionary where the keys are strings and the values are integers, return True if there exists a subset\n    of the dictionary values that sum up to the target. Otherwise, return False.\n\n    Example:\n    d = {'apple': 30, 'banana': 40, 'cherry': 20, 'grape': 10}, target = 100\n    output: True\n    \"\"\"\n    values = list(d.values())\n    n = len(values)\n    dp = [[False for _ in range(target+1)] for _ in range(n+1)]\n    dp[0][0] = True\n\n    for i in range(1, n+1):\n        for j in range(target+1):\n            dp[i][j] = dp[i-1][j]\n            if j >= values[i-1]:\n                dp[i][j] = dp[i][j] or dp[i-1][j-values[i-1]]\n\n    return dp[n][target]\n\ndef g(d={'apple': 30, 'banana': 40, 'cherry': 20, 'grape': 10}, target=100):\n    \"\"\"\n    Returns the subset of dictionary values that sum up to the target.\n    \"\"\"\n    values = list(d.values())\n    n = len(values)\n    dp = [[False for _ in range(target+1)] for _ in range(n+1)]\n    dp[0][0] = True\n\n    for i in range(1, n+1):\n        for j in range(target+1):\n            dp[i][j] = dp[i-1][j]\n            if j >= values[i-1]:\n                dp[i][j] = dp[i][j] or dp[i-1][j-values[i-1]]\n\n    subset = []\n    i = n\n    j = target\n    while i > 0 and j > 0:\n        if dp[i-1][j]:\n            i -= 1\n        else:\n            subset.append(values[i-1])\n            j -= values[i-1]\n            i -= 1\n    \n    return subset\n\nassert f(g())\n", "emb": null, "idx_generation": 224, "target_skills": null, "problem_func": "from typing import*\nfrom typing import Dict\n\ndef f(d: Dict[str, int], target=100) -> bool:\n    \"\"\"\n    Subset Sum\n\n    Given a dictionary where the keys are strings and the values are integers, return True if there exists a subset\n    of the dictionary values that sum up to the target. Otherwise, return False.\n\n    Example:\n    d = {'apple': 30, 'banana': 40, 'cherry': 20, 'grape': 10}, target = 100\n    output: True\n    \"\"\"\n    values = list(d.values())\n    n = len(values)\n    dp = [[False for _ in range(target+1)] for _ in range(n+1)]\n    dp[0][0] = True\n\n    for i in range(1, n+1):\n        for j in range(target+1):\n            dp[i][j] = dp[i-1][j]\n            if j >= values[i-1]:\n                dp[i][j] = dp[i][j] or dp[i-1][j-values[i-1]]\n\n    return dp[n][target]", "solution_func": "def g(d={'apple': 30, 'banana': 40, 'cherry': 20, 'grape': 10}, target=100):\n    \"\"\"\n    Returns the subset of dictionary values that sum up to the target.\n    \"\"\"\n    values = list(d.values())\n    n = len(values)\n    dp = [[False for _ in range(target+1)] for _ in range(n+1)]\n    dp[0][0] = True\n\n    for i in range(1, n+1):\n        for j in range(target+1):\n            dp[i][j] = dp[i-1][j]\n            if j >= values[i-1]:\n                dp[i][j] = dp[i][j] or dp[i-1][j-values[i-1]]\n\n    subset = []\n    i = n\n    j = target\n    while i > 0 and j > 0:\n        if dp[i-1][j]:\n            i -= 1\n        else:\n            subset.append(values[i-1])\n            j -= values[i-1]\n            i -= 1\n    \n    return subset", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"\n    Three Sum\n\n    Given an array of integers, return True if there exists three numbers such that their sum is equal to the target.\n    Otherwise, return False.\n\n    Example:\n    arr = [-1, 0, 1, 2, -1, -4], target = 0\n    output: True\n    \"\"\"\n    n = len(arr)\n    arr.sort()\n\n    for i in range(n-2):\n        if i > 0 and arr[i] == arr[i-1]:\n            continue\n        left = i + 1\n        right = n - 1\n        while left < right:\n            total = arr[i] + arr[left] + arr[right]\n            if total == target:\n                return True\n            elif total > target:\n                right -= 1\n            else:\n                left += 1\n    \n    return False\n\ndef g(arr=[-1, 0, 1, 2, -1, -4], target=0):\n    \"\"\"\n    Returns the three numbers that sum up to the target.\n    \"\"\"\n    n = len(arr)\n    arr.sort()\n\n    for i in range(n-2):\n        if i > 0 and arr[i] == arr[i-1]:\n            continue\n        left = i + 1\n        right = n - 1\n        while left < right:\n            total = arr[i] + arr[left] + arr[right]\n            if total == target:\n                return [arr[i], arr[left], arr[right]]\n            elif total > target:\n                right -= 1\n            else:\n                left += 1\n    \n    return []\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 224, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"\n    Three Sum\n\n    Given an array of integers, return True if there exists three numbers such that their sum is equal to the target.\n    Otherwise, return False.\n\n    Example:\n    arr = [-1, 0, 1, 2, -1, -4], target = 0\n    output: True\n    \"\"\"\n    n = len(arr)\n    arr.sort()\n\n    for i in range(n-2):\n        if i > 0 and arr[i] == arr[i-1]:\n            continue\n        left = i + 1\n        right = n - 1\n        while left < right:\n            total = arr[i] + arr[left] + arr[right]\n            if total == target:\n                return True\n            elif total > target:\n                right -= 1\n            else:\n                left += 1\n    \n    return False", "solution_func": "def g(arr=[-1, 0, 1, 2, -1, -4], target=0):\n    \"\"\"\n    Returns the three numbers that sum up to the target.\n    \"\"\"\n    n = len(arr)\n    arr.sort()\n\n    for i in range(n-2):\n        if i > 0 and arr[i] == arr[i-1]:\n            continue\n        left = i + 1\n        right = n - 1\n        while left < right:\n            total = arr[i] + arr[left] + arr[right]\n            if total == target:\n                return [arr[i], arr[left], arr[right]]\n            elif total > target:\n                right -= 1\n            else:\n                left += 1\n    \n    return []", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Find if there exists a pair of numbers in the given list such that their sum is equal to the target number.\n    \"\"\"\n    numSet = set()\n    for num in nums:\n        complement = target - num\n        if complement in numSet:\n            return True\n        numSet.add(num)\n    return False\n\ndef g(nums: List[int], target: int):\n    return nums, target\n\nassert f(*g([2, 4, 6, 8], 10))\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 224, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Find if there exists a pair of numbers in the given list such that their sum is equal to the target number.\n    \"\"\"\n    numSet = set()\n    for num in nums:\n        complement = target - num\n        if complement in numSet:\n            return True\n        numSet.add(num)\n    return False", "solution_func": "def g(nums: List[int], target: int):\n    return nums, target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Find if there exists a duplicate number in the given list.\n    \"\"\"\n    numSet = set()\n    for num in nums:\n        if num in numSet:\n            return True\n        numSet.add(num)\n    return False\n\ndef g(nums: List[int]):\n    return nums\n\nassert f(g([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]))\n", "emb": [1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 224, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Find if there exists a duplicate number in the given list.\n    \"\"\"\n    numSet = set()\n    for num in nums:\n        if num in numSet:\n            return True\n        numSet.add(num)\n    return False", "solution_func": "def g(nums: List[int]):\n    return nums", "map_ix": [1, 0, 0, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Find if there exists a subarray in the given list whose sum is equal to the target number.\n    \"\"\"\n    prefixSum = 0\n    sumSet = set()\n    for num in nums:\n        prefixSum += num\n        if prefixSum == target or prefixSum - target in sumSet:\n            return True\n        sumSet.add(prefixSum)\n    return False\n\ndef g(nums: List[int], target: int):\n    return nums, target\n\nassert f(*g([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 15))\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0], "idx_generation": 224, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Find if there exists a subarray in the given list whose sum is equal to the target number.\n    \"\"\"\n    prefixSum = 0\n    sumSet = set()\n    for num in nums:\n        prefixSum += num\n        if prefixSum == target or prefixSum - target in sumSet:\n            return True\n        sumSet.add(prefixSum)\n    return False", "solution_func": "def g(nums: List[int], target: int):\n    return nums, target", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], target: int = 100) -> bool:\n    \"\"\"Check if any combination of numbers in the list x sums up to the target\"\"\"\n    n = len(x)\n    dp = [False] * (target + 1)\n    dp[0] = True\n\n    for i in range(n):\n        for j in range(target, x[i] - 1, -1):\n            dp[j] = dp[j] or dp[j - x[i]]\n    \n    return dp[target]\n\ndef g(target: int = 100):\n    x = [1, 2, 5, 10, 20, 50]\n    return x\n\nassert f(g())\n", "emb": null, "idx_generation": 224, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], target: int = 100) -> bool:\n    \"\"\"Check if any combination of numbers in the list x sums up to the target\"\"\"\n    n = len(x)\n    dp = [False] * (target + 1)\n    dp[0] = True\n\n    for i in range(n):\n        for j in range(target, x[i] - 1, -1):\n            dp[j] = dp[j] or dp[j - x[i]]\n    \n    return dp[target]", "solution_func": "def g(target: int = 100):\n    x = [1, 2, 5, 10, 20, 50]\n    return x", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substring: str = \"python\") -> bool:\n    \"\"\"Check if the substring appears in the string s\"\"\"\n    return substring in s\n\ndef g(substring: str = \"python\"):\n    s = \"I love programming in python!\"\n    return s\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 224, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substring: str = \"python\") -> bool:\n    \"\"\"Check if the substring appears in the string s\"\"\"\n    return substring in s", "solution_func": "def g(substring: str = \"python\"):\n    s = \"I love programming in python!\"\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], target: int = 10) -> bool:\n    \"\"\"Check if there exists a pair of distinct numbers in the list x that sum up to the target\"\"\"\n    n = len(x)\n    num_set = set()\n\n    for i in range(n):\n        if target - x[i] in num_set:\n            return True\n        num_set.add(x[i])\n    \n    return False\n\ndef g(target: int = 10):\n    x = [1, 3, 5, 7, 9]\n    return x\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0], "idx_generation": 224, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], target: int = 10) -> bool:\n    \"\"\"Check if there exists a pair of distinct numbers in the list x that sum up to the target\"\"\"\n    n = len(x)\n    num_set = set()\n\n    for i in range(n):\n        if target - x[i] in num_set:\n            return True\n        num_set.add(x[i])\n    \n    return False", "solution_func": "def g(target: int = 10):\n    x = [1, 3, 5, 7, 9]\n    return x", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 1]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=10, y=3, z=2) -> bool:\n    \"\"\"Check if n is a perfect number\"\"\"\n    factors_sum = sum([i for i in range(1, int(math.sqrt(n))+1) if n % i == 0])\n    return factors_sum == n and x * y * z == n\n\ndef g(x=10, y=3, z=2):\n    n = x * y * z\n    return n\n\nassert f(g())\n", "emb": null, "idx_generation": 224, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, x=10, y=3, z=2) -> bool:\n    \"\"\"Check if n is a perfect number\"\"\"\n    factors_sum = sum([i for i in range(1, int(math.sqrt(n))+1) if n % i == 0])\n    return factors_sum == n and x * y * z == n", "solution_func": "def g(x=10, y=3, z=2):\n    n = x * y * z\n    return n", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, target: str, n: int = 0) -> bool:\n    \"\"\"Check if the target string is a substring of s repeated n times\"\"\"\n    return target in s * n\ndef g(s: str = 'abcd', target: str = 'abcd'):\n    return len(target) // len(s)\nassert f(g())\n", "emb": null, "idx_generation": 225, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target: str, n: int = 0) -> bool:\n    \"\"\"Check if the target string is a substring of s repeated n times\"\"\"\n    return target in s * n", "solution_func": "def g(s: str = 'abcd', target: str = 'abcd'):\n    return len(target) // len(s)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return nums, target\nassert f(*g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 225, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return nums, target", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, target: str, n: int = 1) -> bool:\n    \"\"\"Check if the target string is a substring of s repeated n times\"\"\"\n    return target in s * n\ndef g(s: str = 'abcd', target: str = 'abcd'):\n    return len(target) // len(s) + 1\nassert f(g())\n", "emb": null, "idx_generation": 225, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target: str, n: int = 1) -> bool:\n    \"\"\"Check if the target string is a substring of s repeated n times\"\"\"\n    return target in s * n", "solution_func": "def g(s: str = 'abcd', target: str = 'abcd'):\n    return len(target) // len(s) + 1", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"\n    Given a string s, find a substring of length n such that all characters in the substring are unique.\n    \"\"\"\n    return len(set(s[:n])) == n\ndef g(n = 5):\n    return \"abcde\" * (n // 5) + \"a\" * (n % 5)\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 225, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"\n    Given a string s, find a substring of length n such that all characters in the substring are unique.\n    \"\"\"\n    return len(set(s[:n])) == n", "solution_func": "def g(n = 5):\n    return \"abcde\" * (n // 5) + \"a\" * (n % 5)", "map_ix": [0, 1, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"\n    Given a list of integers nums and a target number, find a sublist of nums such that the sum of the numbers\n    in the sublist is equal to the target number.\n    \"\"\"\n    for i in range(1, len(nums) + 1):\n        for j in range(len(nums) - i + 1):\n            if sum(nums[j:j+i]) == target:\n                return True\n    return False\ndef g(target = 100):\n    return [i for i in range(1, target + 1)]\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 225, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"\n    Given a list of integers nums and a target number, find a sublist of nums such that the sum of the numbers\n    in the sublist is equal to the target number.\n    \"\"\"\n    for i in range(1, len(nums) + 1):\n        for j in range(len(nums) - i + 1):\n            if sum(nums[j:j+i]) == target:\n                return True\n    return False", "solution_func": "def g(target = 100):\n    return [i for i in range(1, target + 1)]", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], n=3) -> bool:\n    \"\"\"\n    Given a list of integers arr, find n consecutive numbers in the list such that the product of the numbers is\n    divisible by n.\n    \"\"\"\n    for i in range(len(arr) - n + 1):\n        sublist = arr[i:i+n]\n        if all(num % n == 0 for num in sublist):\n            return True\n    return False\ndef g(n = 3):\n    return [n * i for i in range(1, n + 1)]\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 225, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], n=3) -> bool:\n    \"\"\"\n    Given a list of integers arr, find n consecutive numbers in the list such that the product of the numbers is\n    divisible by n.\n    \"\"\"\n    for i in range(len(arr) - n + 1):\n        sublist = arr[i:i+n]\n        if all(num % n == 0 for num in sublist):\n            return True\n    return False", "solution_func": "def g(n = 3):\n    return [n * i for i in range(1, n + 1)]", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], k=3, target=9) -> bool:\n    \"\"\"Find if there exists a subarray of length k that adds up to the target\"\"\"\n    return any(sum(arr[i:i+k]) == target for i in range(len(arr)-k+1))\ndef g(k=3, target=9):\n    return [1] * k + [target-k]\nassert f(g())\n", "emb": null, "idx_generation": 225, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], k=3, target=9) -> bool:\n    \"\"\"Find if there exists a subarray of length k that adds up to the target\"\"\"\n    return any(sum(arr[i:i+k]) == target for i in range(len(arr)-k+1))", "solution_func": "def g(k=3, target=9):\n    return [1] * k + [target-k]", "map_ix": null}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(s: str, n=10) -> bool:\n    \"\"\"Find if there exists a permutation of the string that is a palindrome\"\"\"\n    return any(s == s[::-1] for s in permutations(s, n))\ndef g(n=10):\n    return 'aba' + 'b' * (n-3)\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 225, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(s: str, n=10) -> bool:\n    \"\"\"Find if there exists a permutation of the string that is a palindrome\"\"\"\n    return any(s == s[::-1] for s in permutations(s, n))", "solution_func": "def g(n=10):\n    return 'aba' + 'b' * (n-3)", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], k=2) -> bool:\n    \"\"\"Find if there exists k distinct elements in the array that add up to 0\"\"\"\n    return any(sum(comb) == 0 for comb in combinations(arr, k))\ndef g(k=2):\n    return [1, -1] * (k//2) + [0] * (k%2)\nassert f(g())\n", "emb": null, "idx_generation": 225, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], k=2) -> bool:\n    \"\"\"Find if there exists k distinct elements in the array that add up to 0\"\"\"\n    return any(sum(comb) == 0 for comb in combinations(arr, k))", "solution_func": "def g(k=2):\n    return [1, -1] * (k//2) + [0] * (k%2)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=3, target=5) -> bool:\n    \"\"\"Find if the string contains a substring with length greater than or equal to target and containing n unique characters\"\"\"\n    for i in range(len(s) - target + 1):\n        substring = s[i:i+target]\n        if len(set(substring)) >= n:\n            return True\n    return False\ndef g(n = 3, target = 5):\n    return \"abc\" + \"d\" * (target-3)\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 225, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=3, target=5) -> bool:\n    \"\"\"Find if the string contains a substring with length greater than or equal to target and containing n unique characters\"\"\"\n    for i in range(len(s) - target + 1):\n        substring = s[i:i+target]\n        if len(set(substring)) >= n:\n            return True\n    return False", "solution_func": "def g(n = 3, target = 5):\n    return \"abc\" + \"d\" * (target-3)", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(string: str, substring: str) -> bool:\n    \"\"\"Check if a substring is present in a string\"\"\"\n    return substring in string\ndef g(string = \"Hello, world!\", substring = \"world\"):\n    return string\nassert f(g())\n", "emb": null, "idx_generation": 226, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, substring: str) -> bool:\n    \"\"\"Check if a substring is present in a string\"\"\"\n    return substring in string", "solution_func": "def g(string = \"Hello, world!\", substring = \"world\"):\n    return string", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(li: List[int], target_sum: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a list that sum up to a target number\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i] + li[j] == target_sum:\n                return True\n    return False\ndef g(target_sum = 10):\n    return [2, 4, 6, 8]\nassert f(g())\n", "emb": null, "idx_generation": 226, "target_skills": null, "problem_func": "from typing import*\ndef f(li: List[int], target_sum: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a list that sum up to a target number\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i] + li[j] == target_sum:\n                return True\n    return False", "solution_func": "def g(target_sum = 10):\n    return [2, 4, 6, 8]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Check if a target number is present in a 2D matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(target = 7):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n", "emb": null, "idx_generation": 226, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Check if a target number is present in a 2D matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(target = 7):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target value, determine if the target value exists in the matrix.\n    \"\"\"\n    m, n = len(matrix), len(matrix[0])\n    i, j = 0, n - 1\n    while i < m and j >= 0:\n        if matrix[i][j] == target:\n            return True\n        elif matrix[i][j] < target:\n            i += 1\n        else:\n            j -= 1\n    return False\n\ndef g(matrix: List[List[int]], target: int):\n    return matrix, target\n\n# Example usage:\nmatrix = [\n    [1, 4, 7, 11, 15],\n    [2, 5, 8, 12, 19],\n    [3, 6, 9, 16, 22],\n    [10, 13, 14, 17, 24],\n    [18, 21, 23, 26, 30]\n]\ntarget = 9\nassert f(*g(matrix, target)) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 226, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target value, determine if the target value exists in the matrix.\n    \"\"\"\n    m, n = len(matrix), len(matrix[0])\n    i, j = 0, n - 1\n    while i < m and j >= 0:\n        if matrix[i][j] == target:\n            return True\n        elif matrix[i][j] < target:\n            i += 1\n        else:\n            j -= 1\n    return False", "solution_func": "def g(matrix: List[List[int]], target: int):\n    return matrix, target\n\n# Example usage:\nmatrix = [\n    [1, 4, 7, 11, 15],\n    [2, 5, 8, 12, 19],\n    [3, 6, 9, 16, 22],\n    [10, 13, 14, 17, 24],\n    [18, 21, 23, 26, 30]\n]\ntarget = 9", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given an array of integers, find two numbers such that they add up to a specific target.\n    Return the indices of the two numbers.\n    \"\"\"\n    num_dict = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_dict:\n            return [num_dict[complement], i]\n        num_dict[num] = i\n    return []\n\ndef g(nums: List[int], target: int):\n    return nums, target\n\n# Example usage:\nnums = [2, 7, 11, 15]\ntarget = 9\nassert f(*g(nums, target)) == [0, 1]\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 226, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given an array of integers, find two numbers such that they add up to a specific target.\n    Return the indices of the two numbers.\n    \"\"\"\n    num_dict = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_dict:\n            return [num_dict[complement], i]\n        num_dict[num] = i\n    return []", "solution_func": "def g(nums: List[int], target: int):\n    return nums, target\n\n# Example usage:\nnums = [2, 7, 11, 15]\ntarget = 9", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"\n    Given an array of integers, return a new array such that each element at index i of the new array is the product\n    of all the numbers in the original array except the one at i.\n    \"\"\"\n    n = len(arr)\n    prefix_products = [1] * n\n    suffix_products = [1] * n\n\n    for i in range(1, n):\n        prefix_products[i] = prefix_products[i - 1] * arr[i - 1]\n    for i in range(n - 2, -1, -1):\n        suffix_products[i] = suffix_products[i + 1] * arr[i + 1]\n\n    result = [prefix_products[i] * suffix_products[i] for i in range(n)]\n    return result\n\ndef g(arr: List[int]):\n    return arr\n\n# Example usage:\narr = [1, 2, 3, 4, 5]\nassert f(*g(arr)) == [120, 60, 40, 30, 24]\n", "emb": null, "idx_generation": 226, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"\n    Given an array of integers, return a new array such that each element at index i of the new array is the product\n    of all the numbers in the original array except the one at i.\n    \"\"\"\n    n = len(arr)\n    prefix_products = [1] * n\n    suffix_products = [1] * n\n\n    for i in range(1, n):\n        prefix_products[i] = prefix_products[i - 1] * arr[i - 1]\n    for i in range(n - 2, -1, -1):\n        suffix_products[i] = suffix_products[i + 1] * arr[i + 1]\n\n    result = [prefix_products[i] * suffix_products[i] for i in range(n)]\n    return result", "solution_func": "def g(arr: List[int]):\n    return arr\n\n# Example usage:\narr = [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, m: int) -> bool:\n    \"\"\"Determine if the sum of n and m is divisible by the product of n and m.\"\"\"\n    return (n + m) % (n * m) == 0\ndef g(n = 5, m = 7):\n    return n, m\nassert f(*g())\n", "emb": null, "idx_generation": 226, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m: int) -> bool:\n    \"\"\"Determine if the sum of n and m is divisible by the product of n and m.\"\"\"\n    return (n + m) % (n * m) == 0", "solution_func": "def g(n = 5, m = 7):\n    return n, m", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if n is a prime number.\"\"\"\n    if n < 2:\n        return False\n    if n in primes:\n        return True\n    for i in range(2, math.isqrt(n) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef g(primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    n = primes[-1]\n    while True:\n        n += 1\n        if f(n):\n            primes.append(n)\n            return n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 226, "target_skills": null, "problem_func": "from typing import*\nimport math\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if n is a prime number.\"\"\"\n    if n < 2:\n        return False\n    if n in primes:\n        return True\n    for i in range(2, math.isqrt(n) + 1):\n        if n % i == 0:\n            return False\n    return True", "solution_func": "def g(primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    n = primes[-1]\n    while True:\n        n += 1\n        if f(n):\n            primes.append(n)\n            return n", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom datetime import date\ndef f(d: date) -> bool:\n    \"\"\"Check if a given date is during the summer season.\"\"\"\n    return date(2000, 6, 1) <= d <= date(2000, 8, 31)\ndef g():\n    return date.today()\nassert f(g())\n", "emb": null, "idx_generation": 226, "target_skills": null, "problem_func": "from typing import*\nfrom datetime import date\ndef f(d: date) -> bool:\n    \"\"\"Check if a given date is during the summer season.\"\"\"\n    return date(2000, 6, 1) <= d <= date(2000, 8, 31)", "solution_func": "def g():\n    return date.today()", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, threshold: int = 10) -> bool:\n    \"\"\"Check if the sum of all elements in the numpy array is above a threshold value.\"\"\"\n    return np.sum(arr) > threshold\n\ndef g(n: int = 5, m: int = 4):\n    return np.ones((n, m))\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 226, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, threshold: int = 10) -> bool:\n    \"\"\"Check if the sum of all elements in the numpy array is above a threshold value.\"\"\"\n    return np.sum(arr) > threshold", "solution_func": "def g(n: int = 5, m: int = 4):\n    return np.ones((n, m))", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, char_count=2) -> bool:\n    \"\"\"Find a string s that has exactly char_count occurrences of the character 'a'\"\"\"\n    return s.count('a') == char_count\ndef g(char_count=2):\n    return 'a' * char_count\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 227, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, char_count=2) -> bool:\n    \"\"\"Find a string s that has exactly char_count occurrences of the character 'a'\"\"\"\n    return s.count('a') == char_count", "solution_func": "def g(char_count=2):\n    return 'a' * char_count", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], max_num=100, min_num=0) -> bool:\n    \"\"\"Find a list of numbers nums where the maximum number is max_num and the minimum number is min_num\"\"\"\n    return max(nums) == max_num and min(nums) == min_num\ndef g(max_num=100, min_num=0):\n    return [min_num, max_num]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 227, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], max_num=100, min_num=0) -> bool:\n    \"\"\"Find a list of numbers nums where the maximum number is max_num and the minimum number is min_num\"\"\"\n    return max(nums) == max_num and min(nums) == min_num", "solution_func": "def g(max_num=100, min_num=0):\n    return [min_num, max_num]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substring='hello') -> bool:\n    \"\"\"Find a string s that contains the given substring\"\"\"\n    return substring in s\ndef g(substring='hello'):\n    return substring + ' world'\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 227, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substring='hello') -> bool:\n    \"\"\"Find a string s that contains the given substring\"\"\"\n    return substring in s", "solution_func": "def g(substring='hello'):\n    return substring + ' world'", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target: int):\n    arr = [1, 2, 3, 4, 5]\n    return arr\n\nassert f(g(target=7), target=7)\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 227, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g(target: int):\n    arr = [1, 2, 3, 4, 5]\n    return arr", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], n: int) -> bool:\n    \"\"\"Check if there are exactly n even numbers in the list\"\"\"\n    evens = [x for x in arr if x % 2 == 0]\n    return len(evens) == n\n\ndef g(n: int):\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return arr\n\nassert f(g(n=4), n=4)\n", "emb": null, "idx_generation": 227, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], n: int) -> bool:\n    \"\"\"Check if there are exactly n even numbers in the list\"\"\"\n    evens = [x for x in arr if x % 2 == 0]\n    return len(evens) == n", "solution_func": "def g(n: int):\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return arr", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there is a subarray in the list that sums up to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            if sum(arr[i:j]) == target:\n                return True\n    return False\n\ndef g(target: int):\n    arr = [1, 2, 3, 4, 5]\n    return arr\n\nassert f(g(target=9), target=9)\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 227, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there is a subarray in the list that sums up to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            if sum(arr[i:j]) == target:\n                return True\n    return False", "solution_func": "def g(target: int):\n    arr = [1, 2, 3, 4, 5]\n    return arr", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(text: str, substr: str) -> bool:\n    \"\"\"Check if a given substring is present in a given text.\"\"\"\n    return substr.lower() in text.lower()\ndef g(text: str, substr: str):\n    return text + \" \" + substr\nassert f(g(\"Hello, world!\", \"hello\"))\n", "emb": null, "idx_generation": 227, "target_skills": null, "problem_func": "from typing import*\ndef f(text: str, substr: str) -> bool:\n    \"\"\"Check if a given substring is present in a given text.\"\"\"\n    return substr.lower() in text.lower()", "solution_func": "def g(text: str, substr: str):\n    return text + \" \" + substr", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in a given list that add up to a target number.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\ndef g(numbers: List[int], target: int):\n    return numbers, target\nassert f(g([1, 2, 3, 4, 5], 9))\n", "emb": null, "idx_generation": 227, "target_skills": null, "problem_func": "from typing import*\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in a given list that add up to a target number.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False", "solution_func": "def g(numbers: List[int], target: int):\n    return numbers, target", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is symmetric (i.e., equal to its transpose).\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\ndef g(matrix: List[List[int]]):\n    return matrix\nassert f(g([[1, 2, 3], [2, 4, 5], [3, 5, 6]]))\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0], "idx_generation": 227, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is symmetric (i.e., equal to its transpose).\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "solution_func": "def g(matrix: List[List[int]]):\n    return matrix", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'imbe', 'jackfruit']) -> bool:\n    \"\"\"Check if the input string contains all the words in the list\"\"\"\n    return all(word in s for word in words)\ndef g(words=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'imbe', 'jackfruit']):\n    return ' '.join(words)\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 227, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'imbe', 'jackfruit']) -> bool:\n    \"\"\"Check if the input string contains all the words in the list\"\"\"\n    return all(word in s for word in words)", "solution_func": "def g(words=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'imbe', 'jackfruit']):\n    return ' '.join(words)", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, target_length=10) -> bool:\n    \"\"\"Check if the string can be converted to a palindrome by adding characters to it.\"\"\"\n    return s == s[::-1] and len(s) == target_length\ndef g(target_length=10):\n    return 'a' * (target_length // 2) + 'b' + 'a' * (target_length // 2)\nassert f(g())\n", "emb": null, "idx_generation": 228, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target_length=10) -> bool:\n    \"\"\"Check if the string can be converted to a palindrome by adding characters to it.\"\"\"\n    return s == s[::-1] and len(s) == target_length", "solution_func": "def g(target_length=10):\n    return 'a' * (target_length // 2) + 'b' + 'a' * (target_length // 2)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, divisor=17) -> bool:\n    \"\"\"Check if a number is divisible by a given divisor.\"\"\"\n    return n % divisor == 0\ndef g(divisor=17):\n    return divisor * 10\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 228, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, divisor=17) -> bool:\n    \"\"\"Check if a number is divisible by a given divisor.\"\"\"\n    return n % divisor == 0", "solution_func": "def g(divisor=17):\n    return divisor * 10", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=3, b=4) -> bool:\n    \"\"\"Check if the sum of squares of two numbers is equal to a given number.\"\"\"\n    return any(math.isqrt((n - a ** 2)) == b for a in range(int(math.sqrt(n) // 2) + 1))\ndef g(a=3, b=4):\n    return a ** 2 + b ** 2\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 228, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, a=3, b=4) -> bool:\n    \"\"\"Check if the sum of squares of two numbers is equal to a given number.\"\"\"\n    return any(math.isqrt((n - a ** 2)) == b for a in range(int(math.sqrt(n) // 2) + 1))", "solution_func": "def g(a=3, b=4):\n    return a ** 2 + b ** 2", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"\n    Find if there are two numbers in the list that add up to the target sum.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target_sum = 7\n    output: True\n    \"\"\"\n    return any((nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(nums = [1, 2, 3, 4, 5], target_sum = 10):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 228, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"\n    Find if there are two numbers in the list that add up to the target sum.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target_sum = 7\n    output: True\n    \"\"\"\n    return any((nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums))))", "solution_func": "def g(nums = [1, 2, 3, 4, 5], target_sum = 10):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(string: str, target_char='a') -> bool:\n    \"\"\"\n    Check if a given character is the second most frequent character in a string.\n\n    Example:\n    string = 'abracadabra'\n    target_char = 'a'\n    output: True\n    \"\"\"\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    sorted_count = sorted(char_count.items(), key=lambda x: x[1], reverse=True)\n    return sorted_count[1][0] == target_char\ndef g(string = 'abracadabra', target_char = 'a'):\n    return string\nassert f(g())\n", "emb": null, "idx_generation": 228, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, target_char='a') -> bool:\n    \"\"\"\n    Check if a given character is the second most frequent character in a string.\n\n    Example:\n    string = 'abracadabra'\n    target_char = 'a'\n    output: True\n    \"\"\"\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    sorted_count = sorted(char_count.items(), key=lambda x: x[1], reverse=True)\n    return sorted_count[1][0] == target_char", "solution_func": "def g(string = 'abracadabra', target_char = 'a'):\n    return string", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_sum=10) -> bool:\n    \"\"\"\n    Check if there is a submatrix in a given matrix that sums up to the target sum.\n\n    Example:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    target_sum = 15\n    output: True\n    \"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j] == target_sum:\n                return True\n    return False\ndef g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target_sum = 10):\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 228, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_sum=10) -> bool:\n    \"\"\"\n    Check if there is a submatrix in a given matrix that sums up to the target sum.\n\n    Example:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    target_sum = 15\n    output: True\n    \"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j] == target_sum:\n                return True\n    return False", "solution_func": "def g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target_sum = 10):\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target_sum=10) -> bool:\n    \"\"\"Find two numbers in the array that add up to the target sum.\"\"\"\n    return any((arr[i] + arr[j] == target_sum for i in range(len(arr)) for j in range(i+1, len(arr))))\ndef g(target_sum=10):\n    return [1, 9, 3, 5, 7]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 228, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target_sum=10) -> bool:\n    \"\"\"Find two numbers in the array that add up to the target sum.\"\"\"\n    return any((arr[i] + arr[j] == target_sum for i in range(len(arr)) for j in range(i+1, len(arr))))", "solution_func": "def g(target_sum=10):\n    return [1, 9, 3, 5, 7]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_row_sum=15) -> bool:\n    \"\"\"Check if any row in the matrix has a sum equal to the target row sum.\"\"\"\n    return any((sum(row) == target_row_sum for row in matrix))\ndef g(target_row_sum=15):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 228, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_row_sum=15) -> bool:\n    \"\"\"Check if any row in the matrix has a sum equal to the target row sum.\"\"\"\n    return any((sum(row) == target_row_sum for row in matrix))", "solution_func": "def g(target_row_sum=15):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(string: str, target_char='a') -> bool:\n    \"\"\"Check if the target character is present in the string.\"\"\"\n    return target_char in string\ndef g(target_char='a'):\n    return \"Hello World\"\nassert f(g())\n", "emb": null, "idx_generation": 228, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, target_char='a') -> bool:\n    \"\"\"Check if the target character is present in the string.\"\"\"\n    return target_char in string", "solution_func": "def g(target_char='a'):\n    return \"Hello World\"", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(arr: List[int], target=15) -> bool:\n    \"\"\"Check if there are 3 numbers in the list that sum up to the target\"\"\"\n    from itertools import combinations\n    return any(sum(c) == target for c in combinations(arr, 3))\ndef g(arr = [2, 4, 6, 8, 10, 12, 14]):\n    return arr\nassert f(g())\n", "emb": null, "idx_generation": 228, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(arr: List[int], target=15) -> bool:\n    \"\"\"Check if there are 3 numbers in the list that sum up to the target\"\"\"\n    from itertools import combinations\n    return any(sum(c) == target for c in combinations(arr, 3))", "solution_func": "def g(arr = [2, 4, 6, 8, 10, 12, 14]):\n    return arr", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, s: str, target: int) -> bool:\n    \"\"\"Check if there exists a subsequence of n integers in string s that sums up to target\"\"\"\n    def find_subseq(nums: List[int], target: int, index: int, count: int) -> bool:\n        if target == 0 and count == n:\n            return True\n        if index >= len(nums) or count >= n:\n            return False\n        if find_subseq(nums, target - nums[index], index + 1, count + 1):\n            return True\n        if find_subseq(nums, target, index + 1, count):\n            return True\n        return False\n    \n    nums = [int(ch) for ch in s]\n    return find_subseq(nums, target, 0, 0)\n\ndef g(n: int, s: str, target: int):\n    nums = [int(ch) for ch in s]\n    return find_subseq(nums, target, 0, 0)\n\nassert f(g())\n", "emb": null, "idx_generation": 229, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, s: str, target: int) -> bool:\n    \"\"\"Check if there exists a subsequence of n integers in string s that sums up to target\"\"\"\n    def find_subseq(nums: List[int], target: int, index: int, count: int) -> bool:\n        if target == 0 and count == n:\n            return True\n        if index >= len(nums) or count >= n:\n            return False\n        if find_subseq(nums, target - nums[index], index + 1, count + 1):\n            return True\n        if find_subseq(nums, target, index + 1, count):\n            return True\n        return False\n    \n    nums = [int(ch) for ch in s]\n    return find_subseq(nums, target, 0, 0)", "solution_func": "def g(n: int, s: str, target: int):\n    nums = [int(ch) for ch in s]\n    return find_subseq(nums, target, 0, 0)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subarray of length n in nums that sums up to target\"\"\"\n    prefix_sum = [0] * (len(nums) + 1)\n    for i in range(1, len(nums) + 1):\n        prefix_sum[i] = prefix_sum[i-1] + nums[i-1]\n    \n    for i in range(n, len(nums) + 1):\n        if prefix_sum[i] - prefix_sum[i-n] == target:\n            return True\n    return False\n\ndef g(n: int, nums: List[int], target: int):\n    return n, nums, target\n\nassert f(g())\n", "emb": null, "idx_generation": 229, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subarray of length n in nums that sums up to target\"\"\"\n    prefix_sum = [0] * (len(nums) + 1)\n    for i in range(1, len(nums) + 1):\n        prefix_sum[i] = prefix_sum[i-1] + nums[i-1]\n    \n    for i in range(n, len(nums) + 1):\n        if prefix_sum[i] - prefix_sum[i-n] == target:\n            return True\n    return False", "solution_func": "def g(n: int, nums: List[int], target: int):\n    return n, nums, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, matrix: List[List[int]]) -> bool:\n    \"\"\"Check if there exists a path in the matrix that starts from (0, 0) and ends at (n-1, n-1)\"\"\"\n    def dfs(i: int, j: int) -> bool:\n        if i < 0 or i >= n or j < 0 or j >= n or matrix[i][j] == 1:\n            return False\n        if i == n-1 and j == n-1:\n            return True\n        matrix[i][j] = 1\n        return dfs(i+1, j) or dfs(i, j+1) or dfs(i-1, j) or dfs(i, j-1)\n    \n    return dfs(0, 0)\n\ndef g(n: int, matrix: List[List[int]]):\n    return n, matrix\n\nassert f(g())\n", "emb": null, "idx_generation": 229, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, matrix: List[List[int]]) -> bool:\n    \"\"\"Check if there exists a path in the matrix that starts from (0, 0) and ends at (n-1, n-1)\"\"\"\n    def dfs(i: int, j: int) -> bool:\n        if i < 0 or i >= n or j < 0 or j >= n or matrix[i][j] == 1:\n            return False\n        if i == n-1 and j == n-1:\n            return True\n        matrix[i][j] = 1\n        return dfs(i+1, j) or dfs(i, j+1) or dfs(i-1, j) or dfs(i, j-1)\n    \n    return dfs(0, 0)", "solution_func": "def g(n: int, matrix: List[List[int]]):\n    return n, matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, substring: str, n=5) -> bool:\n    \"\"\"\n    Check if the substring appears exactly n times in the given string.\n    \"\"\"\n    count = s.count(substring)\n    return count == n\n\ndef g(substring: str, n=5):\n    s = substring * n\n    return s\n\nassert f(g())\n", "emb": null, "idx_generation": 229, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substring: str, n=5) -> bool:\n    \"\"\"\n    Check if the substring appears exactly n times in the given string.\n    \"\"\"\n    count = s.count(substring)\n    return count == n", "solution_func": "def g(substring: str, n=5):\n    s = substring * n\n    return s", "map_ix": null}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\ndef f(s: str, n=50) -> bool:\n    \"\"\"\n    Check if the string has at least n characters and if every character is either a letter or a digit.\n    \"\"\"\n    return len(s) >= n and all(c.isalnum() for c in s)\n\ndef g(n=50):\n    import string\n    from random import choice\n\n    s = ''.join(choice(string.ascii_letters + string.digits) for _ in range(n))\n    return s\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 229, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(s: str, n=50) -> bool:\n    \"\"\"\n    Check if the string has at least n characters and if every character is either a letter or a digit.\n    \"\"\"\n    return len(s) >= n and all(c.isalnum() for c in s)", "solution_func": "def g(n=50):\n    import string\n    from random import choice\n\n    s = ''.join(choice(string.ascii_letters + string.digits) for _ in range(n))\n    return s", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(n: int, k: int, a=3, b=5) -> bool:\n    \"\"\"\n    Check if there exists an integer x such that a^x + b^x = n^k.\n    \"\"\"\n    return any(a**x + b**x == n**k for x in range(1, 1000))\n\ndef g(a=3, b=5, k=2):\n    import random\n\n    n = random.randint(1, 100)\n    return n, k\n\nassert f(*g())\n", "emb": null, "idx_generation": 229, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(n: int, k: int, a=3, b=5) -> bool:\n    \"\"\"\n    Check if there exists an integer x such that a^x + b^x = n^k.\n    \"\"\"\n    return any(a**x + b**x == n**k for x in range(1, 1000))", "solution_func": "def g(a=3, b=5, k=2):\n    import random\n\n    n = random.randint(1, 100)\n    return n, k", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, m=100, p=23) -> bool:\n    \"\"\"Check if n is divisible by m and its digit sum is less than p\"\"\"\n    return n % m == 0 and sum([int(d) for d in str(n)]) < p\ndef g(m=100, p=23):\n    n = m * p\n    return n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 229, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m=100, p=23) -> bool:\n    \"\"\"Check if n is divisible by m and its digit sum is less than p\"\"\"\n    return n % m == 0 and sum([int(d) for d in str(n)]) < p", "solution_func": "def g(m=100, p=23):\n    n = m * p\n    return n", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n=5, x=3, y=1) -> bool:\n    \"\"\"Check if s contains a substring of length n that starts with x and ends with y\"\"\"\n    return any([s[i:i+n] == str(x) + str(y) for i in range(len(s)-n+1)])\ndef g(n=5, x=3, y=1):\n    s = '123454321'\n    return s\nassert f(g())\n", "emb": null, "idx_generation": 229, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=5, x=3, y=1) -> bool:\n    \"\"\"Check if s contains a substring of length n that starts with x and ends with y\"\"\"\n    return any([s[i:i+n] == str(x) + str(y) for i in range(len(s)-n+1)])", "solution_func": "def g(n=5, x=3, y=1):\n    s = '123454321'\n    return s", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: List[int], n=3, k=2) -> bool:\n    \"\"\"Check if the sum of any k elements in x is divisible by n\"\"\"\n    return any([sum(x[i:i+k]) % n == 0 for i in range(len(x)-k+1)])\ndef g(n=3, k=2):\n    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return x\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 229, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], n=3, k=2) -> bool:\n    \"\"\"Check if the sum of any k elements in x is divisible by n\"\"\"\n    return any([sum(x[i:i+k]) % n == 0 for i in range(len(x)-k+1)])", "solution_func": "def g(n=3, k=2):\n    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return x", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target_length=5) -> bool:\n    \"\"\"Check if the string has the target length\"\"\"\n    return len(s) == target_length\ndef g(target_length=5):\n    return \"hello\"[:target_length]\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 229, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target_length=5) -> bool:\n    \"\"\"Check if the string has the target length\"\"\"\n    return len(s) == target_length", "solution_func": "def g(target_length=5):\n    return \"hello\"[:target_length]", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find two numbers such that they add up to a specific target number.\n    The function should return True if such numbers exist, and False otherwise.\n    \"\"\"\n    complements = set()\n    for num in nums:\n        if num in complements:\n            return True\n        complements.add(target - num)\n    return False\n\ndef g(nums = [2, 7, 11, 15], target = 9):\n    return nums, target\n\nassert f(*g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 230, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find two numbers such that they add up to a specific target number.\n    The function should return True if such numbers exist, and False otherwise.\n    \"\"\"\n    complements = set()\n    for num in nums:\n        if num in complements:\n            return True\n        complements.add(target - num)\n    return False", "solution_func": "def g(nums = [2, 7, 11, 15], target = 9):\n    return nums, target", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(word: str, pattern: str) -> bool:\n    \"\"\"\n    Given a word and a pattern, determine if the word follows the same pattern.\n    The pattern consists of a string of unique lowercase letters, and the word is a string of words separated by a space.\n    Return True if the word follows the pattern, and False otherwise.\n    \"\"\"\n    word_list = word.split()\n    if len(word_list) != len(pattern):\n        return False\n    pattern_map = {}\n    word_map = {}\n    for p, w in zip(pattern, word_list):\n        if p not in pattern_map and w not in word_map:\n            pattern_map[p] = w\n            word_map[w] = p\n        elif pattern_map.get(p) != w or word_map.get(w) != p:\n            return False\n    return True\n\ndef g(word = \"dog cat cat dog\", pattern = \"abba\"):\n    return word, pattern\n\nassert f(*g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 230, "target_skills": null, "problem_func": "from typing import*\ndef f(word: str, pattern: str) -> bool:\n    \"\"\"\n    Given a word and a pattern, determine if the word follows the same pattern.\n    The pattern consists of a string of unique lowercase letters, and the word is a string of words separated by a space.\n    Return True if the word follows the pattern, and False otherwise.\n    \"\"\"\n    word_list = word.split()\n    if len(word_list) != len(pattern):\n        return False\n    pattern_map = {}\n    word_map = {}\n    for p, w in zip(pattern, word_list):\n        if p not in pattern_map and w not in word_map:\n            pattern_map[p] = w\n            word_map[w] = p\n        elif pattern_map.get(p) != w or word_map.get(w) != p:\n            return False\n    return True", "solution_func": "def g(word = \"dog cat cat dog\", pattern = \"abba\"):\n    return word, pattern", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given an n x m matrix where each row and each column is sorted in ascending order,\n    determine if a target integer exists in the matrix.\n    Return True if the target integer exists, and False otherwise.\n    \"\"\"\n    if not matrix or not matrix[0]:\n        return False\n    n, m = len(matrix), len(matrix[0])\n    row, col = n - 1, 0\n    while row >= 0 and col < m:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            col += 1\n        else:\n            row -= 1\n    return False\n\ndef g(matrix = [[1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 60]], target = 3):\n    return matrix, target\n\nassert f(*g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 230, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given an n x m matrix where each row and each column is sorted in ascending order,\n    determine if a target integer exists in the matrix.\n    Return True if the target integer exists, and False otherwise.\n    \"\"\"\n    if not matrix or not matrix[0]:\n        return False\n    n, m = len(matrix), len(matrix[0])\n    row, col = n - 1, 0\n    while row >= 0 and col < m:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            col += 1\n        else:\n            row -= 1\n    return False", "solution_func": "def g(matrix = [[1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 60]], target = 3):\n    return matrix, target", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(s: str, x: int, y: int, z: int, a=2, b=4) -> bool:\n    \"\"\"Check if the given string s can be formed by performing the following operations:\n    - Multiply x by a\n    - Divide y by b\n    - Raise z to the power of a\n    Then, concatenate the results of these operations in the order specified.\n\n    Example:\n    s = \"246\"\n    x = 2\n    y = 4\n    z = 6\n    a = 2\n    b = 4\n    The operations are as follows:\n    - Multiply x by a: 2 * 2 = 4\n    - Divide y by b: 4 / 4 = 1.0\n    - Raise z to the power of a: 6 ^ 2 = 36\n    Concatenating the results: \"4\" + \"1.0\" + \"36\" = \"41.036\"\n    The resulting string matches the given string s.\n\n    Returns True if the given string s can be formed, False otherwise.\n    \"\"\"\n    result = \"\"\n    result += str(x * a)\n    result += str(y / b)\n    result += str(math.pow(z, a))\n\n    return result == s\n\ndef g(s=\"41.036\", x=2, y=4, z=6, a=2, b=4):\n    return s\n\nassert f(g())\n", "emb": null, "idx_generation": 230, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(s: str, x: int, y: int, z: int, a=2, b=4) -> bool:\n    \"\"\"Check if the given string s can be formed by performing the following operations:\n    - Multiply x by a\n    - Divide y by b\n    - Raise z to the power of a\n    Then, concatenate the results of these operations in the order specified.\n\n    Example:\n    s = \"246\"\n    x = 2\n    y = 4\n    z = 6\n    a = 2\n    b = 4\n    The operations are as follows:\n    - Multiply x by a: 2 * 2 = 4\n    - Divide y by b: 4 / 4 = 1.0\n    - Raise z to the power of a: 6 ^ 2 = 36\n    Concatenating the results: \"4\" + \"1.0\" + \"36\" = \"41.036\"\n    The resulting string matches the given string s.\n\n    Returns True if the given string s can be formed, False otherwise.\n    \"\"\"\n    result = \"\"\n    result += str(x * a)\n    result += str(y / b)\n    result += str(math.pow(z, a))\n\n    return result == s", "solution_func": "def g(s=\"41.036\", x=2, y=4, z=6, a=2, b=4):\n    return s", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(numbers: List[int], target: int, n=100000) -> bool:\n    \"\"\"Find a pair of numbers in the given list that sum up to the target number.\n    The list of numbers is generated randomly.\n\n    Example:\n    numbers = [1, 2, 3, 4, 5]\n    target = 7\n    The pairs of numbers that sum up to 7 are:\n    - 3 + 4\n    - 4 + 3\n    Therefore, the function should return True.\n\n    Returns True if a pair of numbers that sum up to the target number is found, False otherwise.\n    \"\"\"\n    for _ in range(n):\n        num1 = random.choice(numbers)\n        num2 = random.choice(numbers)\n        if num1 + num2 == target:\n            return True\n    return False\n\ndef g(numbers=[1, 2, 3, 4, 5], target=7, n=100000):\n    return numbers, target, n\n\nassert f(g())\n", "emb": null, "idx_generation": 230, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(numbers: List[int], target: int, n=100000) -> bool:\n    \"\"\"Find a pair of numbers in the given list that sum up to the target number.\n    The list of numbers is generated randomly.\n\n    Example:\n    numbers = [1, 2, 3, 4, 5]\n    target = 7\n    The pairs of numbers that sum up to 7 are:\n    - 3 + 4\n    - 4 + 3\n    Therefore, the function should return True.\n\n    Returns True if a pair of numbers that sum up to the target number is found, False otherwise.\n    \"\"\"\n    for _ in range(n):\n        num1 = random.choice(numbers)\n        num2 = random.choice(numbers)\n        if num1 + num2 == target:\n            return True\n    return False", "solution_func": "def g(numbers=[1, 2, 3, 4, 5], target=7, n=100000):\n    return numbers, target, n", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the given string s contains the same substring of length n repeated at least twice.\n\n    Example:\n    s = \"abcabc\"\n    n = 3\n    The string \"abc\" is repeated twice in \"abcabc\", therefore the function should return True.\n\n    Returns True if the given string s contains a repeated substring of length n, False otherwise.\n    \"\"\"\n    length = len(s)\n    for i in range(length - n):\n        substring = s[i:i+n]\n        if substring in s[i+n:]:\n            return True\n    return False\n\ndef g(s=\"abcabc\", n=3):\n    return s\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 230, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the given string s contains the same substring of length n repeated at least twice.\n\n    Example:\n    s = \"abcabc\"\n    n = 3\n    The string \"abc\" is repeated twice in \"abcabc\", therefore the function should return True.\n\n    Returns True if the given string s contains a repeated substring of length n, False otherwise.\n    \"\"\"\n    length = len(s)\n    for i in range(length - n):\n        substring = s[i:i+n]\n        if substring in s[i+n:]:\n            return True\n    return False", "solution_func": "def g(s=\"abcabc\", n=3):\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray) -> bool:\n    \"\"\"\n    Check if a given 2D array is a Toeplitz matrix.\n    A Toeplitz matrix is one in which each descending diagonal from left to right is constant.\n    \"\"\"\n    return all(arr.diagonal(i).tolist() == arr.diagonal(i).tolist()[0] for i in range(-arr.shape[0]+1, arr.shape[1]))\n\ndef g() -> np.ndarray:\n    \"\"\"\n    Generate a random Toeplitz matrix of size n x m.\n    \"\"\"\n    n = np.random.randint(2, 6)  # random number of rows\n    m = np.random.randint(2, 6)  # random number of columns\n    \n    arr = np.random.randint(1, 10, (n, m))  # random array\n    \n    # Set all elements above the diagonal to be the same as the corresponding diagonal element\n    for i in range(1, min(n, m)):\n        arr[:i, i:] = arr[i, i]\n    \n    return arr\n\nassert f(g())\n", "emb": null, "idx_generation": 230, "target_skills": null, "problem_func": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray) -> bool:\n    \"\"\"\n    Check if a given 2D array is a Toeplitz matrix.\n    A Toeplitz matrix is one in which each descending diagonal from left to right is constant.\n    \"\"\"\n    return all(arr.diagonal(i).tolist() == arr.diagonal(i).tolist()[0] for i in range(-arr.shape[0]+1, arr.shape[1]))", "solution_func": "def g() -> np.ndarray:\n    \"\"\"\n    Generate a random Toeplitz matrix of size n x m.\n    \"\"\"\n    n = np.random.randint(2, 6)  # random number of rows\n    m = np.random.randint(2, 6)  # random number of columns\n    \n    arr = np.random.randint(1, 10, (n, m))  # random array\n    \n    # Set all elements above the diagonal to be the same as the corresponding diagonal element\n    for i in range(1, min(n, m)):\n        arr[:i, i:] = arr[i, i]\n    \n    return arr", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport itertools\n\ndef f(n: int, target: int) -> bool:\n    \"\"\"\n    Check if it is possible to find a list of n positive integers such that the sum of their squares is equal to the target.\n    \"\"\"\n    for i in range(1, int(target ** 0.5) + 1):\n        for c in itertools.combinations(range(1, int(target ** 0.5) + 1), n):\n            if sum([x ** 2 for x in c]) == target:\n                return True\n    return False\n\ndef g(n: int, target: int) -> bool:\n    \"\"\"\n    Generate a list of n positive integers whose sum of squares is equal to the target.\n    \"\"\"\n    return [1] * n\n\nassert f(g())\n", "emb": null, "idx_generation": 230, "target_skills": null, "problem_func": "from typing import*\nimport itertools\n\ndef f(n: int, target: int) -> bool:\n    \"\"\"\n    Check if it is possible to find a list of n positive integers such that the sum of their squares is equal to the target.\n    \"\"\"\n    for i in range(1, int(target ** 0.5) + 1):\n        for c in itertools.combinations(range(1, int(target ** 0.5) + 1), n):\n            if sum([x ** 2 for x in c]) == target:\n                return True\n    return False", "solution_func": "def g(n: int, target: int) -> bool:\n    \"\"\"\n    Generate a list of n positive integers whose sum of squares is equal to the target.\n    \"\"\"\n    return [1] * n", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if it is possible to find a subsequence of the given array that is in non-descending order.\n    \"\"\"\n    return sorted(set(arr)) == arr\n\ndef g() -> List[int]:\n    \"\"\"\n    Generate a random array with a subsequence that is in non-descending order.\n    \"\"\"\n    n = random.randint(2, 10)  # random length of array\n    arr = [random.randint(1, 10) for _ in range(n)]  # random array\n    return sorted(arr)\n\nassert f(g())\n", "emb": null, "idx_generation": 230, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if it is possible to find a subsequence of the given array that is in non-descending order.\n    \"\"\"\n    return sorted(set(arr)) == arr", "solution_func": "def g() -> List[int]:\n    \"\"\"\n    Generate a random array with a subsequence that is in non-descending order.\n    \"\"\"\n    n = random.randint(2, 10)  # random length of array\n    arr = [random.randint(1, 10) for _ in range(n)]  # random array\n    return sorted(arr)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: int, y: int, z: int) -> bool:\n    \"\"\"Check if x, y, and z form a Pythagorean triple.\"\"\"\n    return x**2 + y**2 == z**2\ndef g():\n    \"\"\"Generate a Pythagorean triple.\"\"\"\n    for z in range(1, 100):\n        for y in range(1, z):\n            for x in range(1, y):\n                if x**2 + y**2 == z**2:\n                    return x, y, z\nassert f(*g())\n", "emb": [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 230, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, y: int, z: int) -> bool:\n    \"\"\"Check if x, y, and z form a Pythagorean triple.\"\"\"\n    return x**2 + y**2 == z**2", "solution_func": "def g():\n    \"\"\"Generate a Pythagorean triple.\"\"\"\n    for z in range(1, 100):\n        for y in range(1, z):\n            for x in range(1, y):\n                if x**2 + y**2 == z**2:\n                    return x, y, z", "map_ix": [1, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, char='a') -> bool:\n    \"\"\"Check if the given character is the first character of every word in the given string.\"\"\"\n    words = string.split()\n    return all(word.startswith(char) for word in words)\ndef g(char='a'):\n    string = \"apple ant airplane\"\n    return string\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 231, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, char='a') -> bool:\n    \"\"\"Check if the given character is the first character of every word in the given string.\"\"\"\n    words = string.split()\n    return all(word.startswith(char) for word in words)", "solution_func": "def g(char='a'):\n    string = \"apple ant airplane\"\n    return string", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exists three elements in the list that sum up to the given target value.\"\"\"\n    return any(sum(triple) == k for triple in itertools.combinations(nums, 3))\ndef g(k=3):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 231, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exists three elements in the list that sum up to the given target value.\"\"\"\n    return any(sum(triple) == k for triple in itertools.combinations(nums, 3))", "solution_func": "def g(k=3):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a sublist in the given list whose sum is equal to the given target value.\"\"\"\n    return any(sum(lst[i:j]) == target for i in range(len(lst)) for j in range(i+1, len(lst)+1))\ndef g(target=100):\n    lst = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    return lst\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 231, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a sublist in the given list whose sum is equal to the given target value.\"\"\"\n    return any(sum(lst[i:j]) == target for i in range(len(lst)) for j in range(i+1, len(lst)+1))", "solution_func": "def g(target=100):\n    lst = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    return lst", "map_ix": [1, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(lst: List[str], g1=[['apple', 'banana'], ['banana', 'cherry'], ['cherry', 'durian']], g2=[['apple', 'durian'], ['banana', 'apple'], ['durian', 'banana']]) -> bool:\n    \"\"\"\n    You are given two graphs which are permutations of one another and the goal is to find the permutation.\n    Each graph is specified by a list of edges where each edge is a pair of strings representing fruits.\n    \"\"\"\n    return len(lst) == len(set(lst)) and {(i, j) for (i, j) in g1} == {(lst[i], lst[j]) for (i, j) in g2}\ndef g(g1=[['apple', 'banana'], ['banana', 'cherry'], ['cherry', 'durian']], g2=[['apple', 'durian'], ['banana', 'apple'], ['durian', 'banana']]):\n    # exponentially slow\n    from itertools import permutations\n    n = max(fruit for g in [g1, g2] for edge in g for fruit in edge) + 1\n    g1_set = {(i, j) for i, j in g1}\n    for perm in permutations(range(n)):\n        if all((perm[i], perm[j]) in g1_set for i, j in g2):\n            return [str(perm[i]) for i in range(len(perm))]\n    assert False, f\"Graphs are not isomorphic {g1}, {g2}\"\nassert f(g())\n", "emb": null, "idx_generation": 231, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(lst: List[str], g1=[['apple', 'banana'], ['banana', 'cherry'], ['cherry', 'durian']], g2=[['apple', 'durian'], ['banana', 'apple'], ['durian', 'banana']]) -> bool:\n    \"\"\"\n    You are given two graphs which are permutations of one another and the goal is to find the permutation.\n    Each graph is specified by a list of edges where each edge is a pair of strings representing fruits.\n    \"\"\"\n    return len(lst) == len(set(lst)) and {(i, j) for (i, j) in g1} == {(lst[i], lst[j]) for (i, j) in g2}", "solution_func": "def g(g1=[['apple', 'banana'], ['banana', 'cherry'], ['cherry', 'durian']], g2=[['apple', 'durian'], ['banana', 'apple'], ['durian', 'banana']]):\n    # exponentially slow\n    from itertools import permutations\n    n = max(fruit for g in [g1, g2] for edge in g for fruit in edge) + 1\n    g1_set = {(i, j) for i, j in g1}\n    for perm in permutations(range(n)):\n        if all((perm[i], perm[j]) in g1_set for i, j in g2):\n            return [str(perm[i]) for i in range(len(perm))]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(lst: List[int], target=20) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\ndef g(target=20):\n    return [10, 5, 8, 6, 12, 9]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 231, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int], target=20) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False", "solution_func": "def g(target=20):\n    return [10, 5, 8, 6, 12, 9]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(lst: List[int], g1=[(0, 1), (1, 2), (2, 3), (3, 4), (2, 5)], g2=[(0, 4), (1, 5), (4, 1), (1, 2), (2, 3)]) -> bool:\n    \"\"\"\n    You are given two graphs which are permutations of one another and the goal is to find the permutation.\n    Each graph is specified by a list of edges where each edge is a pair of integer vertex numbers.\n    \"\"\"\n    return len(lst) == len(set(lst)) and set(g1) == set((lst[i], lst[j]) for (i, j) in g2)\ndef g(g1=[(0, 1), (1, 2), (2, 3), (3, 4), (2, 5)], g2=[(0, 4), (1, 5), (4, 1), (1, 2), (2, 3)]):\n    # exponentially slow\n    from itertools import permutations\n    n = max(v for g in [g1, g2] for e in g for v in e) + 1\n    g1_set = set(g1)\n    for p in permutations(range(n)):\n        if set((p[i], p[j]) for (i, j) in g2) == g1_set:\n            return list(p)\n    assert False, f\"Graphs are not isomorphic {g1}, {g2}\"\nassert f(g())\n", "emb": [0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 231, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(lst: List[int], g1=[(0, 1), (1, 2), (2, 3), (3, 4), (2, 5)], g2=[(0, 4), (1, 5), (4, 1), (1, 2), (2, 3)]) -> bool:\n    \"\"\"\n    You are given two graphs which are permutations of one another and the goal is to find the permutation.\n    Each graph is specified by a list of edges where each edge is a pair of integer vertex numbers.\n    \"\"\"\n    return len(lst) == len(set(lst)) and set(g1) == set((lst[i], lst[j]) for (i, j) in g2)", "solution_func": "def g(g1=[(0, 1), (1, 2), (2, 3), (3, 4), (2, 5)], g2=[(0, 4), (1, 5), (4, 1), (1, 2), (2, 3)]):\n    # exponentially slow\n    from itertools import permutations\n    n = max(v for g in [g1, g2] for e in g for v in e) + 1\n    g1_set = set(g1)\n    for p in permutations(range(n)):\n        if set((p[i], p[j]) for (i, j) in g2) == g1_set:\n            return list(p)", "map_ix": [0, 1, 1, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n=4) -> bool:\n    \"\"\"\n    Check if the given string is a palindrome and has length greater than or equal to n\n    \"\"\"\n    return s == s[::-1] and len(s) >= n\ndef g(n=4):\n    return \"a\" * ((n+1)//2) + \"b\" * (n//2)\nassert f(g())\n", "emb": null, "idx_generation": 231, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=4) -> bool:\n    \"\"\"\n    Check if the given string is a palindrome and has length greater than or equal to n\n    \"\"\"\n    return s == s[::-1] and len(s) >= n", "solution_func": "def g(n=4):\n    return \"a\" * ((n+1)//2) + \"b\" * (n//2)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom datetime import datetime, timedelta\n\ndef f(dt: datetime, days=7, hours=0, minutes=0, seconds=0) -> bool:\n    \"\"\"\n    Check if the given datetime is within a certain number of days, hours, minutes, and seconds from the current time\n    \"\"\"\n    now = datetime.now()\n    target = now + timedelta(days=days, hours=hours, minutes=minutes, seconds=seconds)\n    return dt <= target <= now\ndef g(days=7, hours=0, minutes=0, seconds=0):\n    return datetime.now() + timedelta(days=days, hours=hours, minutes=minutes, seconds=seconds)\nassert f(g())\n", "emb": null, "idx_generation": 231, "target_skills": null, "problem_func": "from typing import*\nfrom datetime import datetime, timedelta\n\ndef f(dt: datetime, days=7, hours=0, minutes=0, seconds=0) -> bool:\n    \"\"\"\n    Check if the given datetime is within a certain number of days, hours, minutes, and seconds from the current time\n    \"\"\"\n    now = datetime.now()\n    target = now + timedelta(days=days, hours=hours, minutes=minutes, seconds=seconds)\n    return dt <= target <= now", "solution_func": "def g(days=7, hours=0, minutes=0, seconds=0):\n    return datetime.now() + timedelta(days=days, hours=hours, minutes=minutes, seconds=seconds)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\n\ndef f(lst: List[int], n=5) -> bool:\n    \"\"\"\n    Check if the given list contains at least n distinct elements\n    \"\"\"\n    return len(set(lst)) >= n\ndef g(n=5):\n    return random.sample(range(10), n)\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 231, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(lst: List[int], n=5) -> bool:\n    \"\"\"\n    Check if the given list contains at least n distinct elements\n    \"\"\"\n    return len(set(lst)) >= n", "solution_func": "def g(n=5):\n    return random.sample(range(10), n)", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int, n=2) -> bool:\n    \"\"\"Find if there exists a pair of integers in the given list that sum up to the target value\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(nums, target, n=2):\n    return nums, target, n\nassert f(g([1, 2, 3, 4, 5], 9))\n", "emb": null, "idx_generation": 231, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int, n=2) -> bool:\n    \"\"\"Find if there exists a pair of integers in the given list that sum up to the target value\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))", "solution_func": "def g(nums, target, n=2):\n    return nums, target, n", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"\n    Find two elements in the list that add up to the target value.\n    \"\"\"\n    return any((arr[i] + arr[j] == target for i in range(len(arr)) for j in range(i+1, len(arr))))\ndef g(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return arr[:2]\nassert f(g())\n", "emb": null, "idx_generation": 232, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"\n    Find two elements in the list that add up to the target value.\n    \"\"\"\n    return any((arr[i] + arr[j] == target for i in range(len(arr)) for j in range(i+1, len(arr))))", "solution_func": "def g(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return arr[:2]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"\n    Find a row in the matrix that contains all elements that divide evenly into the target value.\n    \"\"\"\n    for row in matrix:\n        if all((target % num == 0 for num in row)):\n            return True\n    return False\ndef g(matrix = [[2, 4, 6], [8, 10, 12], [14, 16, 18]]):\n    return matrix[0]\nassert f(g())\n", "emb": null, "idx_generation": 232, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"\n    Find a row in the matrix that contains all elements that divide evenly into the target value.\n    \"\"\"\n    for row in matrix:\n        if all((target % num == 0 for num in row)):\n            return True\n    return False", "solution_func": "def g(matrix = [[2, 4, 6], [8, 10, 12], [14, 16, 18]]):\n    return matrix[0]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, divisors=[2, 3, 5, 7]) -> bool:\n    \"\"\"\n    Determine if a number is divisible by all the given divisors.\n    \"\"\"\n    return all((n % div == 0 for div in divisors))\ndef g(divisors = [2, 3, 5, 7]):\n    return reduce(lambda x, y: x*y, divisors)\nassert f(g())\n", "emb": null, "idx_generation": 232, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, divisors=[2, 3, 5, 7]) -> bool:\n    \"\"\"\n    Determine if a number is divisible by all the given divisors.\n    \"\"\"\n    return all((n % div == 0 for div in divisors))", "solution_func": "def g(divisors = [2, 3, 5, 7]):\n    return reduce(lambda x, y: x*y, divisors)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(numbers = [1, 2, 3, 4, 5], target = 7):\n    return numbers, target\n\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 232, "target_skills": null, "problem_func": "from typing import*\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False", "solution_func": "def g(numbers = [1, 2, 3, 4, 5], target = 7):\n    return numbers, target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Check if the target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target = 5):\n    return matrix, target\n\nassert f(*g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 232, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Check if the target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target = 5):\n    return matrix, target", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(names: List[str], pattern: str) -> bool:\n    \"\"\"Check if any of the names in the list match the given pattern\"\"\"\n    for name in names:\n        if pattern in name:\n            return True\n    return False\n\ndef g(names = [\"Alice\", \"Bob\", \"Charlie\"], pattern = \"li\"):\n    return names, pattern\n\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 232, "target_skills": null, "problem_func": "from typing import*\ndef f(names: List[str], pattern: str) -> bool:\n    \"\"\"Check if any of the names in the list match the given pattern\"\"\"\n    for name in names:\n        if pattern in name:\n            return True\n    return False", "solution_func": "def g(names = [\"Alice\", \"Bob\", \"Charlie\"], pattern = \"li\"):\n    return names, pattern", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers that add up to the target\"\"\"\n    return sum(numbers) == target\ndef g(target=100):\n    nums = [10, 20, 30, 40, 50]\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return [nums[i], nums[j]]\nassert f(g())\n", "emb": null, "idx_generation": 232, "target_skills": null, "problem_func": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers that add up to the target\"\"\"\n    return sum(numbers) == target", "solution_func": "def g(target=100):\n    nums = [10, 20, 30, 40, 50]\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return [nums[i], nums[j]]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=2) -> bool:\n    \"\"\"Check if the string contains exactly n vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count == n\ndef g(n=2):\n    string = \"Hello, how are you today?\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    ans = []\n    for char in string:\n        if char.lower() in vowels:\n            ans.append(char)\n    return ''.join(ans)[:n]\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 232, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=2) -> bool:\n    \"\"\"Check if the string contains exactly n vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count == n", "solution_func": "def g(n=2):\n    string = \"Hello, how are you today?\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    ans = []\n    for char in string:\n        if char.lower() in vowels:\n            ans.append(char)\n    return ''.join(ans)[:n]", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if the target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(target=10):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 232, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if the target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(target=10):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target.\"\"\"\n    return any((target - num) in numbers for num in numbers)\ndef g(numbers = [1, 5, 8, 12, 3, 7], target = 10):\n    return numbers\nassert f(g())\n", "emb": null, "idx_generation": 232, "target_skills": null, "problem_func": "from typing import*\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target.\"\"\"\n    return any((target - num) in numbers for num in numbers)", "solution_func": "def g(numbers = [1, 5, 8, 12, 3, 7], target = 10):\n    return numbers", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that adds up to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return arr\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 233, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that adds up to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g(arr: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return arr", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(word: str, char='a') -> bool:\n    \"\"\"Check if a given character is the first letter of the word\"\"\"\n    return word[0].lower() == char.lower()\n\ndef g(word: str = \"Apple\", char: str = 'a'):\n    return word\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 233, "target_skills": null, "problem_func": "from typing import*\ndef f(word: str, char='a') -> bool:\n    \"\"\"Check if a given character is the first letter of the word\"\"\"\n    return word[0].lower() == char.lower()", "solution_func": "def g(word: str = \"Apple\", char: str = 'a'):\n    return word", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are three numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9], target: int = 15):\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 233, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are three numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9], target: int = 15):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(seq: List[int], n=100, length=50, sum_limit=5000) -> bool:\n    \"\"\"Find a sequence of integers of a given length that adds up to n, with a maximum sum limit\"\"\"\n    return sum(seq) == n and (len(seq) == length) and sum(seq) <= sum_limit\ndef g(n=100, length=50, sum_limit=5000):\n    return [1] * length\nassert f(g())\n", "emb": null, "idx_generation": 233, "target_skills": null, "problem_func": "from typing import*\ndef f(seq: List[int], n=100, length=50, sum_limit=5000) -> bool:\n    \"\"\"Find a sequence of integers of a given length that adds up to n, with a maximum sum limit\"\"\"\n    return sum(seq) == n and (len(seq) == length) and sum(seq) <= sum_limit", "solution_func": "def g(n=100, length=50, sum_limit=5000):\n    return [1] * length", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(seq: List[int], target=100, length=10) -> bool:\n    \"\"\"Find a sequence of integers that adds up to a given target, with a given length\"\"\"\n    return sum(seq) == target and len(seq) == length\ndef g(target=100, length=10):\n    return [10] * length\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 233, "target_skills": null, "problem_func": "from typing import*\ndef f(seq: List[int], target=100, length=10) -> bool:\n    \"\"\"Find a sequence of integers that adds up to a given target, with a given length\"\"\"\n    return sum(seq) == target and len(seq) == length", "solution_func": "def g(target=100, length=10):\n    return [10] * length", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, count=5) -> bool:\n    \"\"\"Find 'count' numbers in a given list that add up to a target\"\"\"\n    from itertools import combinations\n    return any((sum(comb) == target for comb in combinations(nums, count)))\ndef g(nums=[10, 20, 30, 40, 50]):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 233, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, count=5) -> bool:\n    \"\"\"Find 'count' numbers in a given list that add up to a target\"\"\"\n    from itertools import combinations\n    return any((sum(comb) == target for comb in combinations(nums, count)))", "solution_func": "def g(nums=[10, 20, 30, 40, 50]):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=3.14) -> bool:\n    \"\"\"Check if x is the square root of a rounded to the nearest integer\"\"\"\n    return x == math.isqrt(round(a))\n    \ndef g(a = 3.14):\n    return math.isqrt(round(a))\n    \nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], "idx_generation": 233, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, a=3.14) -> bool:\n    \"\"\"Check if x is the square root of a rounded to the nearest integer\"\"\"\n    return x == math.isqrt(round(a))", "solution_func": "def g(a = 3.14):\n    return math.isqrt(round(a))", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 1]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(num_list: list, a=100, b=10) -> bool:\n    \"\"\"Check if the sum of num_list is divisible by a and the largest number in num_list is greater than b\"\"\"\n    return sum(num_list) % a == 0 and max(num_list) > b\n\ndef g(a = 100, b = 10):\n    num_list = [random.randint(1, 100) for _ in range(10)]\n    return num_list\n\nassert f(g())\n", "emb": null, "idx_generation": 233, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(num_list: list, a=100, b=10) -> bool:\n    \"\"\"Check if the sum of num_list is divisible by a and the largest number in num_list is greater than b\"\"\"\n    return sum(num_list) % a == 0 and max(num_list) > b", "solution_func": "def g(a = 100, b = 10):\n    num_list = [random.randint(1, 100) for _ in range(10)]\n    return num_list", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport datetime\n\ndef f(date_str: str, format_str='%Y-%m-%d', year=2022) -> bool:\n    \"\"\"Check if the year of date_str is equal to the given year\"\"\"\n    date_obj = datetime.datetime.strptime(date_str, format_str)\n    return date_obj.year == year\n\ndef g(year = 2022):\n    date_obj = datetime.datetime(year, 1, 1)\n    return date_obj.strftime('%Y-%m-%d')\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 233, "target_skills": null, "problem_func": "from typing import*\nimport datetime\n\ndef f(date_str: str, format_str='%Y-%m-%d', year=2022) -> bool:\n    \"\"\"Check if the year of date_str is equal to the given year\"\"\"\n    date_obj = datetime.datetime.strptime(date_str, format_str)\n    return date_obj.year == year", "solution_func": "def g(year = 2022):\n    date_obj = datetime.datetime(year, 1, 1)\n    return date_obj.strftime('%Y-%m-%d')", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, k: int) -> bool:\n    \"\"\"\n    Determine if it is possible to partition the set of integers from 1 to n into k subsets such that the sum of\n    numbers in each subset is equal.\n\n    Sample Input:\n    n = 6\n    k = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    if n % k != 0:\n        return False\n    target_sum = n // k\n    nums = list(range(1, n+1))\n    subsets = [[] for _ in range(k)]\n    return backtrack(nums, subsets, target_sum, 0)\n\ndef backtrack(nums, subsets, target_sum, index):\n    if index == len(nums):\n        return all(sum(subset) == target_sum for subset in subsets)\n    \n    for i in range(len(subsets)):\n        if sum(subsets[i]) + nums[index] <= target_sum:\n            subsets[i].append(nums[index])\n            if backtrack(nums, subsets, target_sum, index+1):\n                return True\n            subsets[i].remove(nums[index])\n    \n    return False\n\ndef g(n = 6, k = 3):\n    return n, k\n\nassert f(*g())\n", "emb": null, "idx_generation": 233, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, k: int) -> bool:\n    \"\"\"\n    Determine if it is possible to partition the set of integers from 1 to n into k subsets such that the sum of\n    numbers in each subset is equal.\n\n    Sample Input:\n    n = 6\n    k = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    if n % k != 0:\n        return False\n    target_sum = n // k\n    nums = list(range(1, n+1))\n    subsets = [[] for _ in range(k)]\n    return backtrack(nums, subsets, target_sum, 0)\n\ndef backtrack(nums, subsets, target_sum, index):\n    if index == len(nums):\n        return all(sum(subset) == target_sum for subset in subsets)\n    \n    for i in range(len(subsets)):\n        if sum(subsets[i]) + nums[index] <= target_sum:\n            subsets[i].append(nums[index])\n            if backtrack(nums, subsets, target_sum, index+1):\n                return True\n            subsets[i].remove(nums[index])\n    \n    return False", "solution_func": "def g(n = 6, k = 3):\n    return n, k", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, target_sum=100) -> bool:\n    \"\"\"\n    Given a list of positive integers, find if there exists a subset whose sum is equal to the target sum.\n    \"\"\"\n    nums = [i for i in range(1, n+1)]\n    dp = [False] * (target_sum + 1)\n    dp[0] = True\n    for num in nums:\n        for i in range(target_sum, num-1, -1):\n            dp[i] = dp[i] or dp[i-num]\n    return dp[target_sum]\ndef g(n = 10):\n    return n\nassert f(g())\n", "emb": null, "idx_generation": 234, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, target_sum=100) -> bool:\n    \"\"\"\n    Given a list of positive integers, find if there exists a subset whose sum is equal to the target sum.\n    \"\"\"\n    nums = [i for i in range(1, n+1)]\n    dp = [False] * (target_sum + 1)\n    dp[0] = True\n    for num in nums:\n        for i in range(target_sum, num-1, -1):\n            dp[i] = dp[i] or dp[i-num]\n    return dp[target_sum]", "solution_func": "def g(n = 10):\n    return n", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target_prod=2021) -> bool:\n    \"\"\"\n    Given a list of positive integers, find if there exists a subset whose product is equal to the target product.\n    \"\"\"\n    n = len(nums)\n    dp = [[False] * (target_prod + 1) for _ in range(n+1)]\n    dp[0][0] = True\n    for i in range(1, n+1):\n        dp[i][0] = True\n        for j in range(1, target_prod+1):\n            if j >= nums[i-1]:\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-nums[i-1]]\n            else:\n                dp[i][j] = dp[i-1][j]\n    return dp[n][target_prod]\ndef g(nums = [1, 2, 3, 4]):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 234, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target_prod=2021) -> bool:\n    \"\"\"\n    Given a list of positive integers, find if there exists a subset whose product is equal to the target product.\n    \"\"\"\n    n = len(nums)\n    dp = [[False] * (target_prod + 1) for _ in range(n+1)]\n    dp[0][0] = True\n    for i in range(1, n+1):\n        dp[i][0] = True\n        for j in range(1, target_prod+1):\n            if j >= nums[i-1]:\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-nums[i-1]]\n            else:\n                dp[i][j] = dp[i-1][j]\n    return dp[n][target_prod]", "solution_func": "def g(nums = [1, 2, 3, 4]):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target_diff=5) -> bool:\n    \"\"\"\n    Given a list of positive integers, find if there exists a subset whose difference of all elements is equal to the target difference.\n    \"\"\"\n    n = len(nums)\n    dp = [[False] * (target_diff + 1) for _ in range(n+1)]\n    dp[0][0] = True\n    for i in range(1, n+1):\n        dp[i][nums[i-1]] = True\n        for j in range(target_diff+1):\n            if dp[i-1][j]:\n                dp[i][j] = True\n                if j+nums[i-1] <= target_diff:\n                    dp[i][j+nums[i-1]] = True\n    return dp[n][target_diff]\ndef g(nums = [1, 3, 5, 7]):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 234, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target_diff=5) -> bool:\n    \"\"\"\n    Given a list of positive integers, find if there exists a subset whose difference of all elements is equal to the target difference.\n    \"\"\"\n    n = len(nums)\n    dp = [[False] * (target_diff + 1) for _ in range(n+1)]\n    dp[0][0] = True\n    for i in range(1, n+1):\n        dp[i][nums[i-1]] = True\n        for j in range(target_diff+1):\n            if dp[i-1][j]:\n                dp[i][j] = True\n                if j+nums[i-1] <= target_diff:\n                    dp[i][j+nums[i-1]] = True\n    return dp[n][target_diff]", "solution_func": "def g(nums = [1, 3, 5, 7]):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target value.\"\"\"\n    from itertools import combinations\n    for c in combinations(nums, 3):\n        if sum(c) == target:\n            return True\n    return False\ndef g(nums = [2, 6, 8, 10, 5, 4, 11, 3, 9, 7]):\n    return nums\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 234, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target value.\"\"\"\n    from itertools import combinations\n    for c in combinations(nums, 3):\n        if sum(c) == target:\n            return True\n    return False", "solution_func": "def g(nums = [2, 6, 8, 10, 5, 4, 11, 3, 9, 7]):\n    return nums", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=50) -> bool:\n    \"\"\"Find a path in the matrix that adds up to the target value.\"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    def dfs(i, j, curr_sum):\n        if i < 0 or i >= m or j < 0 or j >= n:\n            return False\n        if curr_sum + matrix[i][j] == target:\n            return True\n        return dfs(i+1, j, curr_sum + matrix[i][j]) or dfs(i, j+1, curr_sum + matrix[i][j])\n    return dfs(0, 0, 0)\ndef g(matrix = [[3, 2, 7], [5, 1, 8], [6, 9, 4]]):\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 234, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=50) -> bool:\n    \"\"\"Find a path in the matrix that adds up to the target value.\"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    def dfs(i, j, curr_sum):\n        if i < 0 or i >= m or j < 0 or j >= n:\n            return False\n        if curr_sum + matrix[i][j] == target:\n            return True\n        return dfs(i+1, j, curr_sum + matrix[i][j]) or dfs(i, j+1, curr_sum + matrix[i][j])\n    return dfs(0, 0, 0)", "solution_func": "def g(matrix = [[3, 2, 7], [5, 1, 8], [6, 9, 4]]):\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(words: List[str], target=\"python\") -> bool:\n    \"\"\"Find a word in the list that is an anagram of the target word.\"\"\"\n    from itertools import permutations\n    for p in permutations(target):\n        if ''.join(p) in words:\n            return True\n    return False\ndef g(words = [\"typhon\", \"hot\", \"python\", \"not\", \"ton\", \"pot\"]):\n    return words\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 234, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(words: List[str], target=\"python\") -> bool:\n    \"\"\"Find a word in the list that is an anagram of the target word.\"\"\"\n    from itertools import permutations\n    for p in permutations(target):\n        if ''.join(p) in words:\n            return True\n    return False", "solution_func": "def g(words = [\"typhon\", \"hot\", \"python\", \"not\", \"ton\", \"pot\"]):\n    return words", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=3.14) -> bool:\n    \"\"\"Check if the sine of the given angle is equal to a.\"\"\"\n    return math.sin(x) == a\n\ndef g(a=3.14):\n    return math.asin(a)\n\nassert f(g())\n", "emb": null, "idx_generation": 234, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, a=3.14) -> bool:\n    \"\"\"Check if the sine of the given angle is equal to a.\"\"\"\n    return math.sin(x) == a", "solution_func": "def g(a=3.14):\n    return math.asin(a)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(nums: list, n=10) -> bool:\n    \"\"\"Check if the given list contains exactly n even numbers.\"\"\"\n    even_nums = [num for num in nums if num % 2 == 0]\n    return len(even_nums) == n\n\ndef g(n=10):\n    nums = random.sample(range(1, 101), n*2)\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 234, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(nums: list, n=10) -> bool:\n    \"\"\"Check if the given list contains exactly n even numbers.\"\"\"\n    even_nums = [num for num in nums if num % 2 == 0]\n    return len(even_nums) == n", "solution_func": "def g(n=10):\n    nums = random.sample(range(1, 101), n*2)\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, delimiter=' ') -> bool:\n    \"\"\"Check if the given string is a palindrome when split by the delimiter.\"\"\"\n    split_str = s.split(delimiter)\n    joined_str = delimiter.join(split_str)\n    return joined_str == joined_str[::-1]\n\ndef g(delimiter=' '):\n    s = 'race car' if delimiter == ' ' else 'race%car'\n    return s\n\nassert f(g())\n", "emb": null, "idx_generation": 234, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, delimiter=' ') -> bool:\n    \"\"\"Check if the given string is a palindrome when split by the delimiter.\"\"\"\n    split_str = s.split(delimiter)\n    joined_str = delimiter.join(split_str)\n    return joined_str == joined_str[::-1]", "solution_func": "def g(delimiter=' '):\n    s = 'race car' if delimiter == ' ' else 'race%car'\n    return s", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport datetime\n\ndef f(x: datetime.datetime) -> bool:\n    \"\"\"Check if the given date is a leap year\"\"\"\n    return x.year % 4 == 0 and (x.year % 100 != 0 or x.year % 400 == 0)\n\ndef g(year: int = 2020, month: int = 2, day: int = 29) -> datetime.datetime:\n    \"\"\"Return a datetime object representing a leap year date\"\"\"\n    return datetime.datetime(year, month, day)\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 234, "target_skills": null, "problem_func": "from typing import*\nimport datetime\n\ndef f(x: datetime.datetime) -> bool:\n    \"\"\"Check if the given date is a leap year\"\"\"\n    return x.year % 4 == 0 and (x.year % 100 != 0 or x.year % 400 == 0)", "solution_func": "def g(year: int = 2020, month: int = 2, day: int = 29) -> datetime.datetime:\n    \"\"\"Return a datetime object representing a leap year date\"\"\"\n    return datetime.datetime(year, month, day)", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int, k=1, lower=0) -> bool:\n    \"\"\"Find a subarray of length k whose sum is equal to the target\"\"\"\n    return any([sum(nums[i:i+k]) == target for i in range(len(nums)-k+1)]) and sum(nums) >= lower\ndef g(nums=[1,2,3,4,5,6,7,8,9], target=10, k=1, lower=0):\n    for i in range(len(nums)-k+1):\n        if sum(nums[i:i+k]) == target:\n            return nums[i:i+k]\nassert f(g())\n", "emb": null, "idx_generation": 235, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int, k=1, lower=0) -> bool:\n    \"\"\"Find a subarray of length k whose sum is equal to the target\"\"\"\n    return any([sum(nums[i:i+k]) == target for i in range(len(nums)-k+1)]) and sum(nums) >= lower", "solution_func": "def g(nums=[1,2,3,4,5,6,7,8,9], target=10, k=1, lower=0):\n    for i in range(len(nums)-k+1):\n        if sum(nums[i:i+k]) == target:\n            return nums[i:i+k]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, target: str) -> bool:\n    \"\"\"Check if the target string can be formed by rearranging the characters of the given string\"\"\"\n    return sorted(s) == sorted(target)\ndef g(s=\"python\", target=\"tyhpon\"):\n    return s\nassert f(g())\n", "emb": null, "idx_generation": 235, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target: str) -> bool:\n    \"\"\"Check if the target string can be formed by rearranging the characters of the given string\"\"\"\n    return sorted(s) == sorted(target)", "solution_func": "def g(s=\"python\", target=\"tyhpon\"):\n    return s", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=1) -> bool:\n    \"\"\"Check if there is a submatrix of size n x n whose sum is equal to 0\"\"\"\n    for i in range(len(matrix) - n + 1):\n        for j in range(len(matrix[0]) - n + 1):\n            if sum([sum(row[j:j+n]) for row in matrix[i:i+n]]) == 0:\n                return True\n    return False\ndef g(matrix=[[1,2,3],[4,5,6],[7,8,9]], n=1):\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 235, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n=1) -> bool:\n    \"\"\"Check if there is a submatrix of size n x n whose sum is equal to 0\"\"\"\n    for i in range(len(matrix) - n + 1):\n        for j in range(len(matrix[0]) - n + 1):\n            if sum([sum(row[j:j+n]) for row in matrix[i:i+n]]) == 0:\n                return True\n    return False", "solution_func": "def g(matrix=[[1,2,3],[4,5,6],[7,8,9]], n=1):\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=16) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target number, determine if there exists a path from the top left corner to the bottom right corner\n    such that the sum of the numbers along the path is equal to the target number. You can only move down or right.\n    \"\"\"\n    def dfs(i, j, curr_sum):\n        if i >= len(matrix) or j >= len(matrix[0]):\n            return False\n        curr_sum += matrix[i][j]\n        if curr_sum == target:\n            return True\n        return dfs(i+1, j, curr_sum) or dfs(i, j+1, curr_sum)\n    return dfs(0, 0, 0)\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=16):\n    return matrix\nassert f(g())\n", "emb": [1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 235, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=16) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target number, determine if there exists a path from the top left corner to the bottom right corner\n    such that the sum of the numbers along the path is equal to the target number. You can only move down or right.\n    \"\"\"\n    def dfs(i, j, curr_sum):\n        if i >= len(matrix) or j >= len(matrix[0]):\n            return False\n        curr_sum += matrix[i][j]\n        if curr_sum == target:\n            return True\n        return dfs(i+1, j, curr_sum) or dfs(i, j+1, curr_sum)\n    return dfs(0, 0, 0)", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=16):\n    return matrix", "map_ix": [1, 1, 1, 0, 0, 0, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"\n    Given an array of integers and a target number k, determine if there exist two indices i and j such that arr[i] + arr[j] = k.\n    \"\"\"\n    hash_set = set()\n    for num in arr:\n        if k - num in hash_set:\n            return True\n        hash_set.add(num)\n    return False\ndef g(arr=[1, 2, 3, 4, 5], k=3):\n    return arr\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 235, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"\n    Given an array of integers and a target number k, determine if there exist two indices i and j such that arr[i] + arr[j] = k.\n    \"\"\"\n    hash_set = set()\n    for num in arr:\n        if k - num in hash_set:\n            return True\n        hash_set.add(num)\n    return False", "solution_func": "def g(arr=[1, 2, 3, 4, 5], k=3):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, t='abc') -> bool:\n    \"\"\"\n    Given two strings s and t, determine if s is a subsequence of t.\n    \"\"\"\n    i, j = 0, 0\n    while i < len(s) and j < len(t):\n        if s[i] == t[j]:\n            i += 1\n        j += 1\n    return i == len(s)\ndef g(s='abc', t='abcdef'):\n    return s\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 235, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, t='abc') -> bool:\n    \"\"\"\n    Given two strings s and t, determine if s is a subsequence of t.\n    \"\"\"\n    i, j = 0, 0\n    while i < len(s) and j < len(t):\n        if s[i] == t[j]:\n            i += 1\n        j += 1\n    return i == len(s)", "solution_func": "def g(s='abc', t='abcdef'):\n    return s", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, s1='hello', s2='world', count1=10, count2=5) -> bool:\n    \"\"\"\n    Find a string that has count1 occurrences of s1 and count2 occurrences of s2 and starts and ends with\n    the same 5 characters\n    \"\"\"\n    return s.count(s1) == count1 and s.count(s2) == count2 and (s[:5] == s[-5:])\ndef g(s1='hello', s2='world', count1=10, count2=5):\n    if s1 == s2:\n        ans = (s1 + \"!\") * count1\n    elif s1.count(s2):\n        ans = (s1 + \"!\") * count1\n        ans += (s2 + \"!\") * (count2 - ans.count(s2))\n    else:\n        ans = (s2 + \"!\") * count2\n        ans += (s1 + \"!\") * (count1 - ans.count(s1))\n    return \"!\" * 5 + ans + \"!\" * 5\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 235, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, s1='hello', s2='world', count1=10, count2=5) -> bool:\n    \"\"\"\n    Find a string that has count1 occurrences of s1 and count2 occurrences of s2 and starts and ends with\n    the same 5 characters\n    \"\"\"\n    return s.count(s1) == count1 and s.count(s2) == count2 and (s[:5] == s[-5:])", "solution_func": "def g(s1='hello', s2='world', count1=10, count2=5):\n    if s1 == s2:\n        ans = (s1 + \"!\") * count1\n    elif s1.count(s2):\n        ans = (s1 + \"!\") * count1\n        ans += (s2 + \"!\") * (count2 - ans.count(s2))\n    else:\n        ans = (s2 + \"!\") * count2\n        ans += (s1 + \"!\") * (count1 - ans.count(s1))\n    return \"!\" * 5 + ans + \"!\" * 5", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, target='python', upper=50) -> bool:\n    \"\"\"\n    Given an integer n, find a string of length n such that it contains the characters of the target string\n    in the same order, with minimal sum of absolute values of the differences between the indices of consecutive\n    characters in the target string.\n\n    For example, if the target string is 'python' and n = 12, a valid string would be 'ppythonnnnnn' with a total\n    of 8.\n    \"\"\"\n    s = 'abcdefghijklmnopqrstuvwxyz'\n    indices = [s.index(c) for c in target]\n    total_diff = sum(abs(indices[i] - indices[i-1]) for i in range(1, len(indices)))\n    return total_diff <= upper\ndef g(target='python', upper=50):\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    ans = []\n    for c in target:\n        i = s.index(c)\n        ans.append(i)\n    return ''.join([target[i] * (ans[i+1] - ans[i]) for i in range(len(ans)-1)]) + target[-1] * (upper - len(target) + 1)\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 235, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, target='python', upper=50) -> bool:\n    \"\"\"\n    Given an integer n, find a string of length n such that it contains the characters of the target string\n    in the same order, with minimal sum of absolute values of the differences between the indices of consecutive\n    characters in the target string.\n\n    For example, if the target string is 'python' and n = 12, a valid string would be 'ppythonnnnnn' with a total\n    of 8.\n    \"\"\"\n    s = 'abcdefghijklmnopqrstuvwxyz'\n    indices = [s.index(c) for c in target]\n    total_diff = sum(abs(indices[i] - indices[i-1]) for i in range(1, len(indices)))\n    return total_diff <= upper", "solution_func": "def g(target='python', upper=50):\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    ans = []\n    for c in target:\n        i = s.index(c)\n        ans.append(i)\n    return ''.join([target[i] * (ans[i+1] - ans[i]) for i in range(len(ans)-1)]) + target[-1] * (upper - len(target) + 1)", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(moves: List[List[int]], initial_state=[1, 2, 4, 8, 16, 32]) -> bool:\n    \"\"\"\n    Beat a bot at Nim, a two-player game involving a number of heaps of objects. Players alternate, in each turn\n    removing one or more objects from a single non-empty heap. The player who takes the last object wins.\n    - initial_state is list of numbers of objects in each heap\n    - moves is a list of your moves: [heap, number of objects to take]\n    - you play first\n    \"\"\"\n\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state=[1, 2, 4, 8, 16, 32]):\n\n    state = initial_state[:]\n    moves = []\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    def losing(h):  # return True if h is a losing state\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g())", "emb": [1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 235, "target_skills": null, "problem_func": "from typing import*\ndef f(moves: List[List[int]], initial_state=[1, 2, 4, 8, 16, 32]) -> bool:\n    \"\"\"\n    Beat a bot at Nim, a two-player game involving a number of heaps of objects. Players alternate, in each turn\n    removing one or more objects from a single non-empty heap. The player who takes the last object wins.\n    - initial_state is list of numbers of objects in each heap\n    - moves is a list of your moves: [heap, number of objects to take]\n    - you play first\n    \"\"\"\n\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()", "solution_func": "def g(initial_state=[1, 2, 4, 8, 16, 32]):\n\n    state = initial_state[:]\n    moves = []\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    def losing(h):  # return True if h is a losing state\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    def optimal_move():", "map_ix": [1, 0, 0, 1, 1, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find three numbers in the list that sum up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 235, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find three numbers in the list that sum up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False", "solution_func": "def g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums", "map_ix": [0, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(grid: List[List[int]], target=20) -> bool:\n    \"\"\"Check if there is a path from the top left to bottom right of the grid that sums to the target.\"\"\"\n    rows = len(grid)\n    cols = len(grid[0])\n    def dfs(row, col, curr_sum):\n        if row < 0 or row >= rows or col < 0 or col >= cols:\n            return False\n        curr_sum += grid[row][col]\n        if row == rows - 1 and col == cols - 1:\n            return curr_sum == target\n        return dfs(row + 1, col, curr_sum) or dfs(row, col + 1, curr_sum)\n    return dfs(0, 0, 0)\ndef g(grid = [[1, 3, 6], [2, 4, 7], [3, 5, 8]], target = 20):\n    rows = len(grid)\n    cols = len(grid[0])\n    path = []\n    def dfs(row, col, curr_sum):\n        if row < 0 or row >= rows or col < 0 or col >= cols:\n            return False\n        curr_sum += grid[row][col]\n        path.append((row, col))\n        if row == rows - 1 and col == cols - 1:\n            if curr_sum == target:\n                return True\n            else:\n                path.pop()\n                return False\n        if dfs(row + 1, col, curr_sum) or dfs(row, col + 1, curr_sum):\n            return True\n        path.pop()\n        return False\n    dfs(0, 0, 0)\n    return path\nassert f(g())\n", "emb": null, "idx_generation": 236, "target_skills": null, "problem_func": "from typing import*\ndef f(grid: List[List[int]], target=20) -> bool:\n    \"\"\"Check if there is a path from the top left to bottom right of the grid that sums to the target.\"\"\"\n    rows = len(grid)\n    cols = len(grid[0])\n    def dfs(row, col, curr_sum):\n        if row < 0 or row >= rows or col < 0 or col >= cols:\n            return False\n        curr_sum += grid[row][col]\n        if row == rows - 1 and col == cols - 1:\n            return curr_sum == target\n        return dfs(row + 1, col, curr_sum) or dfs(row, col + 1, curr_sum)\n    return dfs(0, 0, 0)", "solution_func": "def g(grid = [[1, 3, 6], [2, 4, 7], [3, 5, 8]], target = 20):\n    rows = len(grid)\n    cols = len(grid[0])\n    path = []\n    def dfs(row, col, curr_sum):\n        if row < 0 or row >= rows or col < 0 or col >= cols:\n            return False\n        curr_sum += grid[row][col]\n        path.append((row, col))\n        if row == rows - 1 and col == cols - 1:\n            if curr_sum == target:\n                return True\n            else:\n                path.pop()\n                return False\n        if dfs(row + 1, col, curr_sum) or dfs(row, col + 1, curr_sum):\n            return True\n        path.pop()\n        return False\n    dfs(0, 0, 0)\n    return path", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], k=5) -> bool:\n    \"\"\"Check if there are k consecutive numbers in the array.\"\"\"\n    for i in range(len(arr) - k + 1):\n        if arr[i:i+k] == list(range(arr[i], arr[i]+k)):\n            return True\n    return False\ndef g(arr = [1, 3, 4, 5, 6, 2, 8, 9, 10, 11], k = 5):\n    return arr\nassert f(g())\n", "emb": null, "idx_generation": 236, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], k=5) -> bool:\n    \"\"\"Check if there are k consecutive numbers in the array.\"\"\"\n    for i in range(len(arr) - k + 1):\n        if arr[i:i+k] == list(range(arr[i], arr[i]+k)):\n            return True\n    return False", "solution_func": "def g(arr = [1, 3, 4, 5, 6, 2, 8, 9, 10, 11], k = 5):\n    return arr", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(words: List[str], prefix='a', suffix='y') -> bool:\n    \"\"\"Check if there is a word in the list that starts with the given prefix and ends with the given suffix.\"\"\"\n    for word in words:\n        if word.startswith(prefix) and word.endswith(suffix):\n            return True\n    return False\ndef g(words = ['apple', 'banana', 'cherry', 'date', 'elderberry'], prefix='a', suffix='y'):\n    return words\nassert f(g())\n", "emb": null, "idx_generation": 236, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], prefix='a', suffix='y') -> bool:\n    \"\"\"Check if there is a word in the list that starts with the given prefix and ends with the given suffix.\"\"\"\n    for word in words:\n        if word.startswith(prefix) and word.endswith(suffix):\n            return True\n    return False", "solution_func": "def g(words = ['apple', 'banana', 'cherry', 'date', 'elderberry'], prefix='a', suffix='y'):\n    return words", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=10, n=3) -> bool:\n    \"\"\"Find n numbers that sum up to target\"\"\"\n    return len(nums) >= n and any(sum(combo) == target for combo in combinations(nums, n))\ndef g(target = 10, n = 3):\n    return list(range(1, target + 1))\nassert f(g())\n", "emb": null, "idx_generation": 236, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10, n=3) -> bool:\n    \"\"\"Find n numbers that sum up to target\"\"\"\n    return len(nums) >= n and any(sum(combo) == target for combo in combinations(nums, n))", "solution_func": "def g(target = 10, n = 3):\n    return list(range(1, target + 1))", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if any row or column sums up to target\"\"\"\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    return target in rows or target in cols\ndef g(target = 20):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n", "emb": null, "idx_generation": 236, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if any row or column sums up to target\"\"\"\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    return target in rows or target in cols", "solution_func": "def g(target = 20):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target='abc') -> bool:\n    \"\"\"Check if s contains all characters in target\"\"\"\n    return all(char in s for char in target)\ndef g(target = 'abc'):\n    return ''.join([char * 2 for char in target])\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 236, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='abc') -> bool:\n    \"\"\"Check if s contains all characters in target\"\"\"\n    return all(char in s for char in target)", "solution_func": "def g(target = 'abc'):\n    return ''.join([char * 2 for char in target])", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], target=17) -> bool:\n    \"\"\"Check if there exist two numbers in a list that sum up to a target number\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\n    \ndef g(nums):\n    random.shuffle(nums)\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 236, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(nums: List[int], target=17) -> bool:\n    \"\"\"Check if there exist two numbers in a list that sum up to a target number\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))", "solution_func": "def g(nums):\n    random.shuffle(nums)\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(radius: float, volume=523.6) -> bool:\n    \"\"\"Check if the volume of a sphere with a given radius is equal to a target volume\"\"\"\n    return abs((4/3) * math.pi * (radius ** 3) - volume) < 1e-06\n    \ndef g(volume=523.6):\n    radius = (3 * volume / (4 * math.pi))**(1/3)\n    return radius\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 236, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(radius: float, volume=523.6) -> bool:\n    \"\"\"Check if the volume of a sphere with a given radius is equal to a target volume\"\"\"\n    return abs((4/3) * math.pi * (radius ** 3) - volume) < 1e-06", "solution_func": "def g(volume=523.6):\n    radius = (3 * volume / (4 * math.pi))**(1/3)\n    return radius", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(mat: List[List[int]], target=15) -> bool:\n    \"\"\"Check if there exist a row or column in a matrix whose sum is equal to a target number\"\"\"\n    n = len(mat)\n    m = len(mat[0])\n    for i in range(n):\n        row_sum = sum(mat[i])\n        if row_sum == target:\n            return True\n    for j in range(m):\n        col_sum = sum(mat[i][j] for i in range(n))\n        if col_sum == target:\n            return True\n    return False\n    \ndef g(mat):\n    return mat\nassert f(g())\n", "emb": null, "idx_generation": 236, "target_skills": null, "problem_func": "from typing import*\ndef f(mat: List[List[int]], target=15) -> bool:\n    \"\"\"Check if there exist a row or column in a matrix whose sum is equal to a target number\"\"\"\n    n = len(mat)\n    m = len(mat[0])\n    for i in range(n):\n        row_sum = sum(mat[i])\n        if row_sum == target:\n            return True\n    for j in range(m):\n        col_sum = sum(mat[i][j] for i in range(n))\n        if col_sum == target:\n            return True\n    return False", "solution_func": "def g(mat):\n    return mat", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target: int, start=0, end=len(arr)-1) -> bool:\n    \"\"\"Check if a target number is in a sorted array using binary search\"\"\"\n    if start > end:\n        return False\n    mid = (start + end) // 2\n    if arr[mid] == target:\n        return True\n    elif arr[mid] < target:\n        return f(arr, target, mid+1, end)\n    else:\n        return f(arr, target, start, mid-1)\ndef g(arr: List[int], target: int):\n    return f(arr, target)\nassert f(g())\n", "emb": null, "idx_generation": 236, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int, start=0, end=len(arr)-1) -> bool:\n    \"\"\"Check if a target number is in a sorted array using binary search\"\"\"\n    if start > end:\n        return False\n    mid = (start + end) // 2\n    if arr[mid] == target:\n        return True\n    elif arr[mid] < target:\n        return f(arr, target, mid+1, end)\n    else:\n        return f(arr, target, start, mid-1)", "solution_func": "def g(arr: List[int], target: int):\n    return f(arr, target)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\n\ndef f(x: int, num_list=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"\n    Given a list of numbers, check if a given number exists in the list.\n\n    Sample Input:\n    num_list = [1, 2, 3, 4, 5]\n    x = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    return x in num_list\n\ndef g(num_list=[1, 2, 3, 4, 5]):\n    return random.choice(num_list)\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 237, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(x: int, num_list=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"\n    Given a list of numbers, check if a given number exists in the list.\n\n    Sample Input:\n    num_list = [1, 2, 3, 4, 5]\n    x = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    return x in num_list", "solution_func": "def g(num_list=[1, 2, 3, 4, 5]):\n    return random.choice(num_list)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\ndef f(x: str, s='programming') -> bool:\n    \"\"\"\n    Given a string s, check if a given character exists in the string.\n\n    Sample Input:\n    s = \"programming\"\n    x = \"g\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return x in s\n\ndef g(s='programming'):\n    return random.choice(s)\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 237, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(x: str, s='programming') -> bool:\n    \"\"\"\n    Given a string s, check if a given character exists in the string.\n\n    Sample Input:\n    s = \"programming\"\n    x = \"g\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return x in s", "solution_func": "def g(s='programming'):\n    return random.choice(s)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: int, num_list=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"\n    Given a list of numbers, check if a given number is greater than all the numbers in the list.\n\n    Sample Input:\n    num_list = [1, 2, 3, 4, 5]\n    x = 6\n\n    Sample Output:\n    True\n    \"\"\"\n    return all(x > num for num in num_list)\n\ndef g(num_list=[1, 2, 3, 4, 5]):\n    return max(num_list) + 1\n\nassert f(g())\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 237, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, num_list=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"\n    Given a list of numbers, check if a given number is greater than all the numbers in the list.\n\n    Sample Input:\n    num_list = [1, 2, 3, 4, 5]\n    x = 6\n\n    Sample Output:\n    True\n    \"\"\"\n    return all(x > num for num in num_list)", "solution_func": "def g(num_list=[1, 2, 3, 4, 5]):\n    return max(num_list) + 1", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Check if a target number is present in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(matrix: List[List[int]], target: int):\n    return f(matrix, target)\nassert f(g())\n", "emb": null, "idx_generation": 237, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Check if a target number is present in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(matrix: List[List[int]], target: int):\n    return f(matrix, target)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there are any duplicate numbers in the list.\"\"\"\n    return len(nums) > len(set(nums))\ndef g(nums: List[int]):\n    return f(nums)\nassert f(g())\n", "emb": null, "idx_generation": 237, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there are any duplicate numbers in the list.\"\"\"\n    return len(nums) > len(set(nums))", "solution_func": "def g(nums: List[int]):\n    return f(nums)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(word: str, strings: List[str]) -> bool:\n    \"\"\"Check if the word is an anagram of any string in the list.\"\"\"\n    word_count = collections.Counter(word)\n    for string in strings:\n        if collections.Counter(string) == word_count:\n            return True\n    return False\ndef g(strings: List[str]):\n    word = ''.join(sorted(strings[0]))\n    return f(word, strings)\nassert f(g())\n", "emb": null, "idx_generation": 237, "target_skills": null, "problem_func": "from typing import*\ndef f(word: str, strings: List[str]) -> bool:\n    \"\"\"Check if the word is an anagram of any string in the list.\"\"\"\n    word_count = collections.Counter(word)\n    for string in strings:\n        if collections.Counter(string) == word_count:\n            return True\n    return False", "solution_func": "def g(strings: List[str]):\n    word = ''.join(sorted(strings[0]))\n    return f(word, strings)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target: int, start=0, end=-1) -> bool:\n    \"\"\"Check if the target sum can be achieved by a subset of the array\"\"\"\n    if end == -1:\n        end = len(arr)\n    if start == end:\n        return target == 0\n    return f(arr, target - arr[start], start + 1, end) or f(arr, target, start + 1, end)\ndef g(arr=[1, 2, 3, 4, 5], target=10):\n    return arr, target\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 237, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int, start=0, end=-1) -> bool:\n    \"\"\"Check if the target sum can be achieved by a subset of the array\"\"\"\n    if end == -1:\n        end = len(arr)\n    if start == end:\n        return target == 0\n    return f(arr, target - arr[start], start + 1, end) or f(arr, target, start + 1, end)", "solution_func": "def g(arr=[1, 2, 3, 4, 5], target=10):\n    return arr, target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target: int, start=0, end=-1) -> bool:\n    \"\"\"Check if the target sum can be achieved by a subset of the array\"\"\"\n    if end == -1:\n        end = len(arr)\n    if start == end:\n        return target == 0\n    return f(arr, target - arr[start], start + 1, end) or f(arr, target, start + 1, end)\ndef g(arr=[1, 2, 3, 4, 5], target=6):\n    return arr, target\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 237, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int, start=0, end=-1) -> bool:\n    \"\"\"Check if the target sum can be achieved by a subset of the array\"\"\"\n    if end == -1:\n        end = len(arr)\n    if start == end:\n        return target == 0\n    return f(arr, target - arr[start], start + 1, end) or f(arr, target, start + 1, end)", "solution_func": "def g(arr=[1, 2, 3, 4, 5], target=6):\n    return arr, target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target: int, start=0, end=-1) -> bool:\n    \"\"\"Check if the target sum can be achieved by a subset of the array\"\"\"\n    if end == -1:\n        end = len(arr)\n    if start == end:\n        return target == 0\n    return f(arr, target - arr[start], start + 1, end) or f(arr, target, start + 1, end)\ndef g(arr=[1, 2, 3, 4, 5], target=12):\n    return arr, target\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 237, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int, start=0, end=-1) -> bool:\n    \"\"\"Check if the target sum can be achieved by a subset of the array\"\"\"\n    if end == -1:\n        end = len(arr)\n    if start == end:\n        return target == 0\n    return f(arr, target - arr[start], start + 1, end) or f(arr, target, start + 1, end)", "solution_func": "def g(arr=[1, 2, 3, 4, 5], target=12):\n    return arr, target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, substr='apple') -> bool:\n    \"\"\"Check if the given string contains the given substring.\"\"\"\n    return substr in string\ndef g(substr='apple'):\n    return 'I love to eat ' + substr + 's'\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 237, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, substr='apple') -> bool:\n    \"\"\"Check if the given string contains the given substring.\"\"\"\n    return substr in string", "solution_func": "def g(substr='apple'):\n    return 'I love to eat ' + substr + 's'", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(t: str, s='HELLO WORLD') -> bool:\n    \"\"\"\n    Given a string s, reverse the case of all alphabetic characters.\n\n    Sample Input:\n    s = \"Hello World\"\n\n    Sample Output:\n    hELLO wORLD\n    \"\"\"\n    i = 0\n    for c in s:\n        if c.isalpha():\n            assert t[i] == c.swapcase(), f'expecting `{c.swapcase()}` at position {i}'\n            i += 1\n        else:\n            assert t[i] == c, f'expecting `{c}` at position {i}'\n            i += 1\n    return i == len(t)\ndef g(s = 'HELLO WORLD'):\n    return s.swapcase()\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 238, "target_skills": null, "problem_func": "from typing import*\ndef f(t: str, s='HELLO WORLD') -> bool:\n    \"\"\"\n    Given a string s, reverse the case of all alphabetic characters.\n\n    Sample Input:\n    s = \"Hello World\"\n\n    Sample Output:\n    hELLO wORLD\n    \"\"\"\n    i = 0\n    for c in s:\n        if c.isalpha():\n            assert t[i] == c.swapcase(), f'expecting `{c.swapcase()}` at position {i}'\n            i += 1\n        else:\n            assert t[i] == c, f'expecting `{c}` at position {i}'\n            i += 1\n    return i == len(t)", "solution_func": "def g(s = 'HELLO WORLD'):\n    return s.swapcase()", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(t: str, s='aaaaaabcde') -> bool:\n    \"\"\"\n    Given a string s, find the most frequent character. If there are multiple characters with the same highest\n    frequency, return the one that appears first.\n\n    Sample Input:\n    s = \"abacadae\"\n\n    Sample Output:\n    \"a\"\n    \"\"\"\n    i = 0\n    max_freq = max(s.count(c) for c in s)\n    for c in s:\n        if s.count(c) == max_freq:\n            assert t[i] == c, f'expecting `{c}` at position {i}'\n            i += 1\n    return i == len(t)\ndef g(s = 'aaaaaabcde'):\n    return max(set(s), key=s.count)\nassert f(g())\n", "emb": null, "idx_generation": 238, "target_skills": null, "problem_func": "from typing import*\ndef f(t: str, s='aaaaaabcde') -> bool:\n    \"\"\"\n    Given a string s, find the most frequent character. If there are multiple characters with the same highest\n    frequency, return the one that appears first.\n\n    Sample Input:\n    s = \"abacadae\"\n\n    Sample Output:\n    \"a\"\n    \"\"\"\n    i = 0\n    max_freq = max(s.count(c) for c in s)\n    for c in s:\n        if s.count(c) == max_freq:\n            assert t[i] == c, f'expecting `{c}` at position {i}'\n            i += 1\n    return i == len(t)", "solution_func": "def g(s = 'aaaaaabcde'):\n    return max(set(s), key=s.count)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(t: int, n=682) -> bool:\n    \"\"\"\n    Given an integer n, find the sum of all even digits in n.\n\n    Sample Input:\n    n = 682\n\n    Sample Output:\n    10\n    \"\"\"\n    i = 0\n    s = sum(int(d) for d in str(n) if int(d) % 2 == 0)\n    assert t == s, f'expecting `{s}`'\n    i += 1\n    return i == len(t)\ndef g(n = 682):\n    return sum(int(d) for d in str(n) if int(d) % 2 == 0)\nassert f(g())", "emb": null, "idx_generation": 238, "target_skills": null, "problem_func": "from typing import*\ndef f(t: int, n=682) -> bool:\n    \"\"\"\n    Given an integer n, find the sum of all even digits in n.\n\n    Sample Input:\n    n = 682\n\n    Sample Output:\n    10\n    \"\"\"\n    i = 0\n    s = sum(int(d) for d in str(n) if int(d) % 2 == 0)\n    assert t == s, f'expecting `{s}`'\n    i += 1\n    return i == len(t)", "solution_func": "def g(n = 682):\n    return sum(int(d) for d in str(n) if int(d) % 2 == 0)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target = 0) -> bool:\n    \"\"\"Check if there exist two numbers such that their sum is equal to the target value.\"\"\"\n    return any((arr[i] + arr[j] == target for i in range(len(arr)) for j in range(i+1, len(arr))))\ndef g(arr):\n    return arr\nassert f(g([1, 2, 3, 4, 5]), target=9)\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 238, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target = 0) -> bool:\n    \"\"\"Check if there exist two numbers such that their sum is equal to the target value.\"\"\"\n    return any((arr[i] + arr[j] == target for i in range(len(arr)) for j in range(i+1, len(arr))))", "solution_func": "def g(arr):\n    return arr", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target = 0) -> bool:\n    \"\"\"Check if there exist three numbers such that their sum is equal to the target value.\"\"\"\n    return any((arr[i] + arr[j] + arr[k] == target for i in range(len(arr)) for j in range(i+1, len(arr)) for k in range(j+1, len(arr))))\ndef g(arr):\n    return arr\nassert f(g([1, 2, 3, 4, 5]), target=9)\n", "emb": [0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 238, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target = 0) -> bool:\n    \"\"\"Check if there exist three numbers such that their sum is equal to the target value.\"\"\"\n    return any((arr[i] + arr[j] + arr[k] == target for i in range(len(arr)) for j in range(i+1, len(arr)) for k in range(j+1, len(arr))))", "solution_func": "def g(arr):\n    return arr", "map_ix": [0, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the array is sorted in non-decreasing order.\"\"\"\n    return all((arr[i] <= arr[i+1] for i in range(len(arr)-1)))\ndef g(arr):\n    return arr\nassert f(g([1, 2, 3, 4, 5]))\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 238, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the array is sorted in non-decreasing order.\"\"\"\n    return all((arr[i] <= arr[i+1] for i in range(len(arr)-1)))", "solution_func": "def g(arr):\n    return arr", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target_sum=20, num_rows=3, num_cols=3) -> bool:\n    \"\"\"Check if there exists a submatrix of size num_rows x num_cols whose elements sum up to target_sum\"\"\"\n    for i in range(len(matrix) - num_rows + 1):\n        for j in range(len(matrix[0]) - num_cols + 1):\n            submatrix = [row[j:j+num_cols] for row in matrix[i:i+num_rows]]\n            if sum(sum(row) for row in submatrix) == target_sum:\n                return True\n    return False\n\ndef g(target_sum=20, num_rows=3, num_cols=3):\n    matrix = [\n        [1, 2, 3, 4, 5],\n        [6, 7, 8, 9, 10],\n        [11, 12, 13, 14, 15],\n        [16, 17, 18, 19, 20],\n        [21, 22, 23, 24, 25]\n    ]\n    return matrix\n\nassert f(g())\n", "emb": null, "idx_generation": 238, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target_sum=20, num_rows=3, num_cols=3) -> bool:\n    \"\"\"Check if there exists a submatrix of size num_rows x num_cols whose elements sum up to target_sum\"\"\"\n    for i in range(len(matrix) - num_rows + 1):\n        for j in range(len(matrix[0]) - num_cols + 1):\n            submatrix = [row[j:j+num_cols] for row in matrix[i:i+num_rows]]\n            if sum(sum(row) for row in submatrix) == target_sum:\n                return True\n    return False", "solution_func": "def g(target_sum=20, num_rows=3, num_cols=3):\n    matrix = [\n        [1, 2, 3, 4, 5],\n        [6, 7, 8, 9, 10],\n        [11, 12, 13, 14, 15],\n        [16, 17, 18, 19, 20],\n        [21, 22, 23, 24, 25]\n    ]\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(strings: List[str], target_string=\"hello\") -> bool:\n    \"\"\"Check if all the strings in the list are anagrams of the target string\"\"\"\n    sorted_target = sorted(target_string)\n    for string in strings:\n        if sorted(string.lower()) != sorted_target:\n            return False\n    return True\n\ndef g(target_string=\"hello\"):\n    strings = [\"HELLO\", \"oellh\", \"llohe\", \"lehol\"]\n    return strings\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 238, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(strings: List[str], target_string=\"hello\") -> bool:\n    \"\"\"Check if all the strings in the list are anagrams of the target string\"\"\"\n    sorted_target = sorted(target_string)\n    for string in strings:\n        if sorted(string.lower()) != sorted_target:\n            return False\n    return True", "solution_func": "def g(target_string=\"hello\"):\n    strings = [\"HELLO\", \"oellh\", \"llohe\", \"lehol\"]\n    return strings", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exist three numbers in the list whose sum is equal to the target sum\"\"\"\n    for i in range(len(numbers) - 2):\n        for j in range(i+1, len(numbers) - 1):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target_sum:\n                    return True\n    return False\n\ndef g(target_sum=100):\n    numbers = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    return numbers\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 238, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exist three numbers in the list whose sum is equal to the target sum\"\"\"\n    for i in range(len(numbers) - 2):\n        for j in range(i+1, len(numbers) - 1):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target_sum:\n                    return True\n    return False", "solution_func": "def g(target_sum=100):\n    numbers = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    return numbers", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if any three numbers in a list add up to a given target number.\"\"\"\n    for i in range(len(nums)-2):\n        for j in range(i+1, len(nums)-1):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=100):\n    return [1, 2, target-3]\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 238, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if any three numbers in a list add up to a given target number.\"\"\"\n    for i in range(len(nums)-2):\n        for j in range(i+1, len(nums)-1):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False", "solution_func": "def g(target=100):\n    return [1, 2, target-3]", "map_ix": [1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=12) -> bool:\n    \"\"\"Find a combination of numbers in the list that adds up to the target number.\"\"\"\n    def backtrack(nums, target, start, path, results):\n        if target == 0:\n            results.append(path)\n            return\n        for i in range(start, len(nums)):\n            if nums[i] > target:\n                continue\n            backtrack(nums, target - nums[i], i + 1, path + [nums[i]], results)\n    results = []\n    nums.sort()\n    backtrack(nums, target, 0, [], results)\n    return len(results) > 0\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 239, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=12) -> bool:\n    \"\"\"Find a combination of numbers in the list that adds up to the target number.\"\"\"\n    def backtrack(nums, target, start, path, results):\n        if target == 0:\n            results.append(path)\n            return\n        for i in range(start, len(nums)):\n            if nums[i] > target:\n                continue\n            backtrack(nums, target - nums[i], i + 1, path + [nums[i]], results)\n    results = []\n    nums.sort()\n    backtrack(nums, target, 0, [], results)\n    return len(results) > 0", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, sub='python') -> bool:\n    \"\"\"Check if the given substring exists in the string.\"\"\"\n    return sub in s\ndef g(sub='python'):\n    return sub * 10\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 239, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, sub='python') -> bool:\n    \"\"\"Check if the given substring exists in the string.\"\"\"\n    return sub in s", "solution_func": "def g(sub='python'):\n    return sub * 10", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Check if the target number exists in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 239, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Check if the target number exists in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, t: str, k=3) -> bool:\n    \"\"\"Check if string t is a rotation of string s, within k shifts.\"\"\"\n    for i in range(k):\n        if s == t[i:] + t[:i]:\n            return True\n    return False\ndef g(s: str, t: str, k=3):\n    for i in range(k):\n        if s == t[i:] + t[:i]:\n            return True\n    return False\nassert f(g())\n", "emb": null, "idx_generation": 239, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, t: str, k=3) -> bool:\n    \"\"\"Check if string t is a rotation of string s, within k shifts.\"\"\"\n    for i in range(k):\n        if s == t[i:] + t[:i]:\n            return True\n    return False", "solution_func": "def g(s: str, t: str, k=3):\n    for i in range(k):\n        if s == t[i:] + t[:i]:\n            return True\n    return False", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int, k=3) -> bool:\n    \"\"\"Find if there exists a pair of integers in the list whose sum is equal to the target, within k iterations.\"\"\"\n    for i in range(k):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(arr: List[int], target: int, k=3):\n    for i in range(k):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\nassert f(g())\n", "emb": null, "idx_generation": 239, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int, k=3) -> bool:\n    \"\"\"Find if there exists a pair of integers in the list whose sum is equal to the target, within k iterations.\"\"\"\n    for i in range(k):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g(arr: List[int], target: int, k=3):\n    for i in range(k):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "map_ix": null}, {"fitness": -Infinity, "program_str": "import math\nfrom typing import*\nfrom math import factorial\n\ndef f(n: int, m=5) -> bool:\n    \"\"\"Check if the factorial of n is divisible by m.\"\"\"\n    return factorial(n) % m == 0\ndef g(n: int, m=5):\n    return factorial(n) % m == 0\nassert f(g())\n", "emb": null, "idx_generation": 239, "target_skills": null, "problem_func": "import math\nfrom typing import*\nfrom math import factorial\n\ndef f(n: int, m=5) -> bool:\n    \"\"\"Check if the factorial of n is divisible by m.\"\"\"\n    return factorial(n) % m == 0", "solution_func": "def g(n: int, m=5):\n    return factorial(n) % m == 0", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target='hello world', length=5) -> bool:\n    \"\"\"Check if the target string contains the given substring.\"\"\"\n    return s in target\ndef g(target = 'hello world', length = 5):\n    return target[:length]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 239, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='hello world', length=5) -> bool:\n    \"\"\"Check if the target string contains the given substring.\"\"\"\n    return s in target", "solution_func": "def g(target = 'hello world', length = 5):\n    return target[:length]", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 239, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target='python', length=3) -> bool:\n    \"\"\"Check if the target string starts with the given substring.\"\"\"\n    return target.startswith(s)\ndef g(target = 'python', length = 3):\n    return target[:length]\nassert f(g())\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 239, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='python', length=3) -> bool:\n    \"\"\"Check if the target string starts with the given substring.\"\"\"\n    return target.startswith(s)", "solution_func": "def g(target = 'python', length = 3):\n    return target[:length]", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: int, y: int, z: int) -> bool:\n    \"\"\"Check if x, y, and z are all positive integers.\"\"\"\n    return x > 0 and y > 0 and z > 0\n\ndef g(x: int, y: int, z: int):\n    return x, y, z\n\nassert f(*g())\n", "emb": null, "idx_generation": 239, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, y: int, z: int) -> bool:\n    \"\"\"Check if x, y, and z are all positive integers.\"\"\"\n    return x > 0 and y > 0 and z > 0", "solution_func": "def g(x: int, y: int, z: int):\n    return x, y, z", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target_sum=20) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the given list whose sum is equal to the target sum.\n    - arr is a list of integers\n    - target_sum is the desired sum\n    \"\"\"\n\n    def pair_sum_exists(arr, target_sum):\n        seen = set()\n        for num in arr:\n            complement = target_sum - num\n            if complement in seen:\n                return True\n            seen.add(num)\n        return False\n\n    return pair_sum_exists(arr, target_sum)\n\ndef g(arr = [1, 7, 3, 12, 9], target_sum = 20):\n    return arr\nassert f(g())\n", "emb": null, "idx_generation": 240, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target_sum=20) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the given list whose sum is equal to the target sum.\n    - arr is a list of integers\n    - target_sum is the desired sum\n    \"\"\"\n\n    def pair_sum_exists(arr, target_sum):\n        seen = set()\n        for num in arr:\n            complement = target_sum - num\n            if complement in seen:\n                return True\n            seen.add(num)\n        return False\n\n    return pair_sum_exists(arr, target_sum)", "solution_func": "def g(arr = [1, 7, 3, 12, 9], target_sum = 20):\n    return arr", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, nums=[25, 12, 7, 3, 45, 16, 8, 31, 22], target_sum=50) -> bool:\n    \"\"\"\n    Find if there exists a subset of the given list whose sum is equal to the target sum.\n    - n is the length of the list\n    - nums is the list of integers\n    - target_sum is the desired sum\n    \"\"\"\n\n    def subset_sum_exists(nums, target_sum):\n        dp = [False] * (target_sum + 1)\n        dp[0] = True\n        for num in nums:\n            for i in range(target_sum, num - 1, -1):\n                dp[i] = dp[i] or dp[i - num]\n        return dp[target_sum]\n\n    return subset_sum_exists(nums, target_sum)\n\ndef g(nums = [25, 12, 7, 3, 45, 16, 8, 31, 22], target_sum = 50):\n    return nums\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 240, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[25, 12, 7, 3, 45, 16, 8, 31, 22], target_sum=50) -> bool:\n    \"\"\"\n    Find if there exists a subset of the given list whose sum is equal to the target sum.\n    - n is the length of the list\n    - nums is the list of integers\n    - target_sum is the desired sum\n    \"\"\"\n\n    def subset_sum_exists(nums, target_sum):\n        dp = [False] * (target_sum + 1)\n        dp[0] = True\n        for num in nums:\n            for i in range(target_sum, num - 1, -1):\n                dp[i] = dp[i] or dp[i - num]\n        return dp[target_sum]\n\n    return subset_sum_exists(nums, target_sum)", "solution_func": "def g(nums = [25, 12, 7, 3, 45, 16, 8, 31, 22], target_sum = 50):\n    return nums", "map_ix": [1, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substr=\"world\") -> bool:\n    \"\"\"\n    Check if the given substring exists in the given string.\n    - s is the main string\n    - substr is the substring to search for\n    \"\"\"\n\n    return substr in s\n\ndef g(s = \"Hello, world!\", substr = \"world\"):\n    return s\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 240, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substr=\"world\") -> bool:\n    \"\"\"\n    Check if the given substring exists in the given string.\n    - s is the main string\n    - substr is the substring to search for\n    \"\"\"\n\n    return substr in s", "solution_func": "def g(s = \"Hello, world!\", substr = \"world\"):\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, arr=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if n is in arr and it is divisible by all the other elements in arr\"\"\"\n    return n in arr and all(n % x == 0 for x in arr if x != n)\ndef g(arr=[1, 2, 3, 4, 5]):\n    n = max(arr) * 2\n    while True:\n        if n in arr and all(n % x == 0 for x in arr if x != n):\n            return n\n        n += 1\nassert f(g())\n", "emb": null, "idx_generation": 240, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, arr=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if n is in arr and it is divisible by all the other elements in arr\"\"\"\n    return n in arr and all(n % x == 0 for x in arr if x != n)", "solution_func": "def g(arr=[1, 2, 3, 4, 5]):\n    n = max(arr) * 2\n    while True:\n        if n in arr and all(n % x == 0 for x in arr if x != n):\n            return n\n        n += 1", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(lst: list, n=5) -> bool:\n    \"\"\"Check if lst contains n consecutive numbers\"\"\"\n    lst.sort()\n    for i in range(len(lst) - n + 1):\n        if lst[i] + n - 1 == lst[i + n - 1]:\n            return True\n    return False\ndef g(n=5):\n    lst = random.sample(range(1, 100), 10)\n    return lst\nassert f(g())\n", "emb": null, "idx_generation": 240, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(lst: list, n=5) -> bool:\n    \"\"\"Check if lst contains n consecutive numbers\"\"\"\n    lst.sort()\n    for i in range(len(lst) - n + 1):\n        if lst[i] + n - 1 == lst[i + n - 1]:\n            return True\n    return False", "solution_func": "def g(n=5):\n    lst = random.sample(range(1, 100), 10)\n    return lst", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if there are at least n occurrences of each character in s\"\"\"\n    counts = {}\n    for c in s:\n        counts[c] = counts.get(c, 0) + 1\n    return all(counts[c] >= n for c in counts)\ndef g(n=3):\n    s = \"\"\n    for i in range(26):\n        s += chr(ord('a') + i) * n\n    return s\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 240, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if there are at least n occurrences of each character in s\"\"\"\n    counts = {}\n    for c in s:\n        counts[c] = counts.get(c, 0) + 1\n    return all(counts[c] >= n for c in counts)", "solution_func": "def g(n=3):\n    s = \"\"\n    for i in range(26):\n        s += chr(ord('a') + i) * n\n    return s", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(seq: List[int], target_sum=10) -> bool:\n    \"\"\"\n    Given a list of integers and a target sum, determine if there exists a subset of the list that adds up to the target sum.\n    \"\"\"\n    def subset_sum(seq, target_sum, index):\n        if target_sum == 0:\n            return True\n        if index >= len(seq):\n            return False\n        if seq[index] > target_sum:\n            return subset_sum(seq, target_sum, index + 1)\n        return subset_sum(seq, target_sum - seq[index], index + 1) or subset_sum(seq, target_sum, index + 1)\n    \n    return subset_sum(seq, target_sum, 0)\n\ndef g(seq=[1, 2, 3, 4, 5]):\n    return seq\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 240, "target_skills": null, "problem_func": "from typing import*\ndef f(seq: List[int], target_sum=10) -> bool:\n    \"\"\"\n    Given a list of integers and a target sum, determine if there exists a subset of the list that adds up to the target sum.\n    \"\"\"\n    def subset_sum(seq, target_sum, index):\n        if target_sum == 0:\n            return True\n        if index >= len(seq):\n            return False\n        if seq[index] > target_sum:\n            return subset_sum(seq, target_sum, index + 1)\n        return subset_sum(seq, target_sum - seq[index], index + 1) or subset_sum(seq, target_sum, index + 1)\n    \n    return subset_sum(seq, target_sum, 0)", "solution_func": "def g(seq=[1, 2, 3, 4, 5]):\n    return seq", "map_ix": [1, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(words: List[str], target_word='python') -> bool:\n    \"\"\"\n    Given a list of words and a target word, determine if the target word is an anagram of any word in the list.\n    \"\"\"\n    def is_anagram(word1, word2):\n        if len(word1) != len(word2):\n            return False\n        count = {}\n        for char in word1:\n            count[char] = count.get(char, 0) + 1\n        for char in word2:\n            if char not in count:\n                return False\n            count[char] -= 1\n            if count[char] == 0:\n                del count[char]\n        return len(count) == 0\n    \n    return any(is_anagram(word, target_word) for word in words)\n\ndef g(words=['python', 'java', 'ruby', 'javascript']):\n    return words\n\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 240, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], target_word='python') -> bool:\n    \"\"\"\n    Given a list of words and a target word, determine if the target word is an anagram of any word in the list.\n    \"\"\"\n    def is_anagram(word1, word2):\n        if len(word1) != len(word2):\n            return False\n        count = {}\n        for char in word1:\n            count[char] = count.get(char, 0) + 1\n        for char in word2:\n            if char not in count:\n                return False\n            count[char] -= 1\n            if count[char] == 0:\n                del count[char]\n        return len(count) == 0\n    \n    return any(is_anagram(word, target_word) for word in words)", "solution_func": "def g(words=['python', 'java', 'ruby', 'javascript']):\n    return words", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, determine if there exists a pair of numbers in the list that adds up to the target.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 240, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, determine if there exists a pair of numbers in the list that adds up to the target.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5]):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there are two elements in the list that add up to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n", "emb": null, "idx_generation": 240, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there are two elements in the list that add up to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=9) -> bool:\n    \"\"\"\n    Given a list of integers, find two numbers such that they add up to a specific target number.\n\n    Sample Input:\n    `[2, 7, 11, 15]`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums=[2, 7, 11, 15], target=9):\n    return f(nums, target)\nassert f(g())\n", "emb": null, "idx_generation": 241, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=9) -> bool:\n    \"\"\"\n    Given a list of integers, find two numbers such that they add up to a specific target number.\n\n    Sample Input:\n    `[2, 7, 11, 15]`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(nums=[2, 7, 11, 15], target=9):\n    return f(nums, target)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"\n    Given a 2D matrix of integers sorted in ascending order, search for a target number.\n\n    Sample Input:\n    `[[1, 3, 5], [7, 9, 11], [13, 15, 17]]`\n\n    Sample Output:\n    `False`\n    \"\"\"\n    if not matrix:\n        return False\n    rows, cols = len(matrix), len(matrix[0])\n    left, right = 0, rows * cols - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        row, col = mid // cols, mid % cols\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False\n\ndef g(matrix=[[1, 3, 5], [7, 9, 11], [13, 15, 17]], target=20):\n    return f(matrix, target)\nassert f(g())\n", "emb": null, "idx_generation": 241, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"\n    Given a 2D matrix of integers sorted in ascending order, search for a target number.\n\n    Sample Input:\n    `[[1, 3, 5], [7, 9, 11], [13, 15, 17]]`\n\n    Sample Output:\n    `False`\n    \"\"\"\n    if not matrix:\n        return False\n    rows, cols = len(matrix), len(matrix[0])\n    left, right = 0, rows * cols - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        row, col = mid // cols, mid % cols\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False", "solution_func": "def g(matrix=[[1, 3, 5], [7, 9, 11], [13, 15, 17]], target=20):\n    return f(matrix, target)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers, find all pairs that add up to a specific target number.\n\n    Sample Input:\n    `[1, 2, 3, 4, 5]`\n\n    Sample Output:\n    `[[1, 9], [2, 8], [3, 7], [4, 6]]`\n    \"\"\"\n    num_set = set(nums)\n    result = []\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            result.append([num, complement])\n    return result\n\ndef g(nums=[1, 2, 3, 4, 5], target=10):\n    return f(nums, target)\nassert f(g()) == [[1, 9], [2, 8], [3, 7], [4, 6]]\n", "emb": null, "idx_generation": 241, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers, find all pairs that add up to a specific target number.\n\n    Sample Input:\n    `[1, 2, 3, 4, 5]`\n\n    Sample Output:\n    `[[1, 9], [2, 8], [3, 7], [4, 6]]`\n    \"\"\"\n    num_set = set(nums)\n    result = []\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            result.append([num, complement])\n    return result", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=10):\n    return f(nums, target)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=11) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are two numbers such that their sum is equal to the target value.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums=[2, 4, 6, 8]):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 241, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=11) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are two numbers such that their sum is equal to the target value.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(nums=[2, 4, 6, 8]):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=18) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target value, determine if the target value exists in the matrix.\n    \"\"\"\n    m, n = len(matrix), len(matrix[0])\n    low, high = 0, m * n - 1\n    while low <= high:\n        mid = (low + high) // 2\n        row = mid // n\n        col = mid % n\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False\n\ndef g(matrix=[[1, 3, 5], [7, 9, 11], [13, 15, 17]]):\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 241, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=18) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target value, determine if the target value exists in the matrix.\n    \"\"\"\n    m, n = len(matrix), len(matrix[0])\n    low, high = 0, m * n - 1\n    while low <= high:\n        mid = (low + high) // 2\n        row = mid // n\n        col = mid % n\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False", "solution_func": "def g(matrix=[[1, 3, 5], [7, 9, 11], [13, 15, 17]]):\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, pattern=\"ABC\") -> bool:\n    \"\"\"\n    Given a string and a pattern, determine if the string follows the pattern.\n    The pattern consists of lowercase English letters and the string consists of words separated by a single space.\n    \"\"\"\n    words = s.split()\n    if len(words) != len(pattern):\n        return False\n    mapping = {}\n    for i in range(len(pattern)):\n        if pattern[i] in mapping:\n            if mapping[pattern[i]] != words[i]:\n                return False\n        else:\n            if words[i] in mapping.values():\n                return False\n            mapping[pattern[i]] = words[i]\n    return True\n\ndef g(s=\"apple banana cherry\"):\n    return s\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 241, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, pattern=\"ABC\") -> bool:\n    \"\"\"\n    Given a string and a pattern, determine if the string follows the pattern.\n    The pattern consists of lowercase English letters and the string consists of words separated by a single space.\n    \"\"\"\n    words = s.split()\n    if len(words) != len(pattern):\n        return False\n    mapping = {}\n    for i in range(len(pattern)):\n        if pattern[i] in mapping:\n            if mapping[pattern[i]] != words[i]:\n                return False\n        else:\n            if words[i] in mapping.values():\n                return False\n            mapping[pattern[i]] = words[i]\n    return True", "solution_func": "def g(s=\"apple banana cherry\"):\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, lower=0, upper=100) -> bool:\n    \"\"\"Check if every element in the array is within the given range\"\"\"\n    return np.all(arr >= lower) and np.all(arr <= upper)\n\ndef g(lower=0, upper=100):\n    return np.random.randint(lower, upper+1, size=(5, 5))\n\narr = g()\nassert f(arr)\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 241, "target_skills": null, "problem_func": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, lower=0, upper=100) -> bool:\n    \"\"\"Check if every element in the array is within the given range\"\"\"\n    return np.all(arr >= lower) and np.all(arr <= upper)", "solution_func": "def g(lower=0, upper=100):\n    return np.random.randint(lower, upper+1, size=(5, 5))\n\narr = g()", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if there are exactly n occurrences of the letter 'a' in the string\"\"\"\n    return s.count('a') == n\n\ndef g(n=3):\n    return 'a' * n + 'b' * (n + 1)\n\ns = g()\nassert f(s)\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 241, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if there are exactly n occurrences of the letter 'a' in the string\"\"\"\n    return s.count('a') == n", "solution_func": "def g(n=3):\n    return 'a' * n + 'b' * (n + 1)\n\ns = g()", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(d: datetime, year=2022) -> bool:\n    \"\"\"Check if the year of the given date is equal to the specified year\"\"\"\n    return d.year == year\n\ndef g(year=2022):\n    return datetime(year, 10, 1)\n\nd = g()\nassert f(d)\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 241, "target_skills": null, "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(d: datetime, year=2022) -> bool:\n    \"\"\"Check if the year of the given date is equal to the specified year\"\"\"\n    return d.year == year", "solution_func": "def g(year=2022):\n    return datetime(year, 10, 1)\n\nd = g()", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(n: int, nums=[769, 341, 918], threshold=100) -> bool:\n    \"\"\"Check if the sum of the square roots of the numbers is greater than or equal to the threshold.\"\"\"\n    return sum(math.sqrt(num) for num in nums) >= threshold\n\ndef g(nums=[769, 341, 918], threshold=100):\n    return sum(math.sqrt(num) for num in nums)\n\nassert f(g())\n", "emb": null, "idx_generation": 241, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, nums=[769, 341, 918], threshold=100) -> bool:\n    \"\"\"Check if the sum of the square roots of the numbers is greater than or equal to the threshold.\"\"\"\n    return sum(math.sqrt(num) for num in nums) >= threshold", "solution_func": "def g(nums=[769, 341, 918], threshold=100):\n    return sum(math.sqrt(num) for num in nums)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(nums: list, target=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers that sum up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[random.randint(1, 10) for _ in range(10)]):\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 242, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(nums: list, target=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers that sum up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums=[random.randint(1, 10) for _ in range(10)]):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\nimport math\n\ndef f(num: float, divisor=10) -> bool:\n    \"\"\"Check if the given number is divisible by the divisor without remainder\"\"\"\n    return math.floor(num) % divisor == 0\n\ndef g(divisor=10):\n    return random.randint(1, 100) * divisor\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 242, "target_skills": null, "problem_func": "import random\nfrom typing import*\nimport math\n\ndef f(num: float, divisor=10) -> bool:\n    \"\"\"Check if the given number is divisible by the divisor without remainder\"\"\"\n    return math.floor(num) % divisor == 0", "solution_func": "def g(divisor=10):\n    return random.randint(1, 100) * divisor", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(word: str, letter1='a', letter2='b') -> bool:\n    \"\"\"Check if both letter1 and letter2 are present in the word\"\"\"\n    return letter1 in word and letter2 in word\n\ndef g(letter1='a', letter2='b'):\n    word = random.choice(['apple', 'banana', 'cherry', 'durian', 'elderberry'])\n    return word\n\nassert f(g())\n", "emb": null, "idx_generation": 242, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(word: str, letter1='a', letter2='b') -> bool:\n    \"\"\"Check if both letter1 and letter2 are present in the word\"\"\"\n    return letter1 in word and letter2 in word", "solution_func": "def g(letter1='a', letter2='b'):\n    word = random.choice(['apple', 'banana', 'cherry', 'durian', 'elderberry'])\n    return word", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Determine if there exists a submatrix in the given matrix such that the sum of all its elements is equal to the target.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            for k in range(i, len(matrix)):\n                for l in range(j, len(matrix[0])):\n                    submatrix = [matrix[x][y] for x in range(i, k + 1) for y in range(j, l + 1)]\n                    if sum(submatrix) == target:\n                        return True\n    return False\ndef g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target = 20):\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 242, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Determine if there exists a submatrix in the given matrix such that the sum of all its elements is equal to the target.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            for k in range(i, len(matrix)):\n                for l in range(j, len(matrix[0])):\n                    submatrix = [matrix[x][y] for x in range(i, k + 1) for y in range(j, l + 1)]\n                    if sum(submatrix) == target:\n                        return True\n    return False", "solution_func": "def g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target = 20):\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there exists a subarray in the given list whose sum is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            subarray = nums[i:j+1]\n            if sum(subarray) == target:\n                return True\n    return False\ndef g(nums = [1, 2, 3, 4, 5], target = 10):\n    return nums\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 242, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there exists a subarray in the given list whose sum is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            subarray = nums[i:j+1]\n            if sum(subarray) == target:\n                return True\n    return False", "solution_func": "def g(nums = [1, 2, 3, 4, 5], target = 10):\n    return nums", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, target=100) -> bool:\n    \"\"\"Determine if there exists a submatrix in the given numpy array such that the sum of all its elements is equal to the target.\"\"\"\n    for i in range(matrix.shape[0]):\n        for j in range(matrix.shape[1]):\n            for k in range(i, matrix.shape[0]):\n                for l in range(j, matrix.shape[1]):\n                    submatrix = matrix[i:k+1, j:l+1]\n                    if np.sum(submatrix) == target:\n                        return True\n    return False\ndef g(target = 100):\n    return np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nassert f(g())\n", "emb": null, "idx_generation": 242, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, target=100) -> bool:\n    \"\"\"Determine if there exists a submatrix in the given numpy array such that the sum of all its elements is equal to the target.\"\"\"\n    for i in range(matrix.shape[0]):\n        for j in range(matrix.shape[1]):\n            for k in range(i, matrix.shape[0]):\n                for l in range(j, matrix.shape[1]):\n                    submatrix = matrix[i:k+1, j:l+1]\n                    if np.sum(submatrix) == target:\n                        return True\n    return False", "solution_func": "def g(target = 100):\n    return np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(num: int, target=5) -> bool:\n    \"\"\"\n    Given a positive integer num, determine if it is a perfect square.\n\n    Sample Input:\n    16\n\n    Sample Output:\n    True\n    \"\"\"\n    return num >= target and int(num ** 0.5) ** 2 == num\ndef g(target = 5):\n    return target ** 2\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 242, "target_skills": null, "problem_func": "from typing import*\ndef f(num: int, target=5) -> bool:\n    \"\"\"\n    Given a positive integer num, determine if it is a perfect square.\n\n    Sample Input:\n    16\n\n    Sample Output:\n    True\n    \"\"\"\n    return num >= target and int(num ** 0.5) ** 2 == num", "solution_func": "def g(target = 5):\n    return target ** 2", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"\n    Given an array of integers arr and a target value, determine if there are two integers in the array\n    whose sum is equal to the target value.\n\n    Sample Input:\n    [1, 2, 3, 4, 5], 7\n\n    Sample Output:\n    True\n    \"\"\"\n    return target == 0 and any((arr[i] + arr[j] == target for i in range(len(arr)) for j in range(i+1, len(arr))))\ndef g(arr = [1, 2, 3, 4, 5], target = 0):\n    return target\nassert f(g())\n", "emb": null, "idx_generation": 242, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"\n    Given an array of integers arr and a target value, determine if there are two integers in the array\n    whose sum is equal to the target value.\n\n    Sample Input:\n    [1, 2, 3, 4, 5], 7\n\n    Sample Output:\n    True\n    \"\"\"\n    return target == 0 and any((arr[i] + arr[j] == target for i in range(len(arr)) for j in range(i+1, len(arr))))", "solution_func": "def g(arr = [1, 2, 3, 4, 5], target = 0):\n    return target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, s='abc') -> bool:\n    \"\"\"\n    Given a positive integer n, generate a string with n characters such that each substring of length\n    three contains at least one vowel ('a', 'e', 'i', 'o', 'u').\n\n    Sample Input:\n    6\n\n    Sample Output:\n    \"abacia\"\n    \"\"\"\n    vowels = set('aeiou')\n    return n > 0 and all((any((c in vowels for c in s[i:i+3])) for i in range(n-2)))\ndef g(n = 6, s = 'abc'):\n    vowels = 'aeiou'\n    ans = \"\"\n    for i in range(n):\n        ans += s[i % 3]\n    return ans\nassert f(g())\n", "emb": null, "idx_generation": 242, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, s='abc') -> bool:\n    \"\"\"\n    Given a positive integer n, generate a string with n characters such that each substring of length\n    three contains at least one vowel ('a', 'e', 'i', 'o', 'u').\n\n    Sample Input:\n    6\n\n    Sample Output:\n    \"abacia\"\n    \"\"\"\n    vowels = set('aeiou')\n    return n > 0 and all((any((c in vowels for c in s[i:i+3])) for i in range(n-2)))", "solution_func": "def g(n = 6, s = 'abc'):\n    vowels = 'aeiou'\n    ans = \"\"\n    for i in range(n):\n        ans += s[i % 3]\n    return ans", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, target=0) -> bool:\n    \"\"\"\n    Find the number of prime numbers less than or equal to a given number.\n    \"\"\"\n    primes = []\n    for i in range(2, n+1):\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                break\n        else:\n            primes.append(i)\n    return len(primes) == target\ndef g(target = 0):\n    return target\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 242, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, target=0) -> bool:\n    \"\"\"\n    Find the number of prime numbers less than or equal to a given number.\n    \"\"\"\n    primes = []\n    for i in range(2, n+1):\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                break\n        else:\n            primes.append(i)\n    return len(primes) == target", "solution_func": "def g(target = 0):\n    return target", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, x=10, y=5, z=3) -> bool:\n    \"\"\"Check if n can be expressed as the sum of x, y, and z.\"\"\"\n    return n == (x + y + z)\ndef g(x = 10, y = 5, z = 3):\n    return x + y + z\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 243, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, x=10, y=5, z=3) -> bool:\n    \"\"\"Check if n can be expressed as the sum of x, y, and z.\"\"\"\n    return n == (x + y + z)", "solution_func": "def g(x = 10, y = 5, z = 3):\n    return x + y + z", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=4, b=5, c=6) -> bool:\n    \"\"\"Check if n is a perfect square.\"\"\"\n    return n == a ** 2 or n == b ** 2 or n == c ** 2\ndef g(a = 4, b = 5, c = 6):\n    return max(a, b, c) ** 2\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 243, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=4, b=5, c=6) -> bool:\n    \"\"\"Check if n is a perfect square.\"\"\"\n    return n == a ** 2 or n == b ** 2 or n == c ** 2", "solution_func": "def g(a = 4, b = 5, c = 6):\n    return max(a, b, c) ** 2", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(n: float, x=4.5, y=2.3) -> bool:\n    \"\"\"Check if n is an integer.\"\"\"\n    return math.isclose(n, round(n)) and n > x and n < y\ndef g(x = 4.5, y = 2.3):\n    return (x + y) / 2\nassert f(g())\n", "emb": null, "idx_generation": 243, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: float, x=4.5, y=2.3) -> bool:\n    \"\"\"Check if n is an integer.\"\"\"\n    return math.isclose(n, round(n)) and n > x and n < y", "solution_func": "def g(x = 4.5, y = 2.3):\n    return (x + y) / 2", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"\n    Check if every word in the list words appears in the string s in order.\n    \"\"\"\n    start_index = 0\n    for word in words:\n        index = s.find(word, start_index)\n        if index == -1:\n            return False\n        start_index = index + len(word)\n    return True\ndef g(words=['apple', 'banana', 'cherry', 'date']):\n    return ''.join(words)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 243, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"\n    Check if every word in the list words appears in the string s in order.\n    \"\"\"\n    start_index = 0\n    for word in words:\n        index = s.find(word, start_index)\n        if index == -1:\n            return False\n        start_index = index + len(word)\n    return True", "solution_func": "def g(words=['apple', 'banana', 'cherry', 'date']):\n    return ''.join(words)", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(lst: list) -> bool:\n    \"\"\"\n    Check if the given list is sorted in non-decreasing order.\n    \"\"\"\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))\ndef g():\n    lst = list(range(10))\n    random.shuffle(lst)\n    return lst\nassert f(g())\n", "emb": null, "idx_generation": 243, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(lst: list) -> bool:\n    \"\"\"\n    Check if the given list is sorted in non-decreasing order.\n    \"\"\"\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))", "solution_func": "def g():\n    lst = list(range(10))\n    random.shuffle(lst)\n    return lst", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(n: int, k: int) -> bool:\n    \"\"\"\n    Check if the binomial coefficient C(n, k) is a perfect square.\n    \"\"\"\n    coefficient = math.comb(n, k)\n    root = int(math.sqrt(coefficient))\n    return root * root == coefficient\ndef g(n: int, k: int):\n    return n, k\nassert f(*g())\n", "emb": null, "idx_generation": 243, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, k: int) -> bool:\n    \"\"\"\n    Check if the binomial coefficient C(n, k) is a perfect square.\n    \"\"\"\n    coefficient = math.comb(n, k)\n    root = int(math.sqrt(coefficient))\n    return root * root == coefficient", "solution_func": "def g(n: int, k: int):\n    return n, k", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], row_sum=10, col_sum=5, target_sum=12) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if there exists a target_sum in the matrix such that:\n        * The sum of each row is equal to row_sum\n        * The sum of each column is equal to col_sum\n    \"\"\"\n    for row in matrix:\n        if sum(row) != row_sum:\n            return False\n    for i in range(len(matrix[0])):\n        col_sum_check = sum(matrix[j][i] for j in range(len(matrix)))\n        if col_sum_check != col_sum:\n            return False\n    return target_sum in [matrix[i][j] for i in range(len(matrix)) for j in range(len(matrix[0]))]\ndef g(row_sum=10, col_sum=5, target_sum=12):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 243, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], row_sum=10, col_sum=5, target_sum=12) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if there exists a target_sum in the matrix such that:\n        * The sum of each row is equal to row_sum\n        * The sum of each column is equal to col_sum\n    \"\"\"\n    for row in matrix:\n        if sum(row) != row_sum:\n            return False\n    for i in range(len(matrix[0])):\n        col_sum_check = sum(matrix[j][i] for j in range(len(matrix)))\n        if col_sum_check != col_sum:\n            return False\n    return target_sum in [matrix[i][j] for i in range(len(matrix)) for j in range(len(matrix[0]))]", "solution_func": "def g(row_sum=10, col_sum=5, target_sum=12):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substring='abc', count=2) -> bool:\n    \"\"\"\n    Given a string, check if there are count number of occurrences of the substring in the string.\n    \"\"\"\n    return s.count(substring) == count\ndef g(substring='abc', count=2):\n    s = substring * count\n    return s\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 243, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substring='abc', count=2) -> bool:\n    \"\"\"\n    Given a string, check if there are count number of occurrences of the substring in the string.\n    \"\"\"\n    return s.count(substring) == count", "solution_func": "def g(substring='abc', count=2):\n    s = substring * count\n    return s", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target_sum=20) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exist two numbers that sum up to target_sum.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False\ndef g(target_sum=20):\n    nums = [10, 15, 5, 7, 3]\n    return nums\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 243, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=20) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exist two numbers that sum up to target_sum.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False", "solution_func": "def g(target_sum=20):\n    nums = [10, 15, 5, 7, 3]\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10]) -> bool:\n    \"\"\"Check if n is a multiple of all the numbers in the list\"\"\"\n    for num in nums:\n        if n % num != 0:\n            return False\n    return True\ndef g(nums=[2, 4, 6, 8, 10]):\n    product = 1\n    for num in nums:\n        product *= num\n    return product\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 243, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10]) -> bool:\n    \"\"\"Check if n is a multiple of all the numbers in the list\"\"\"\n    for num in nums:\n        if n % num != 0:\n            return False\n    return True", "solution_func": "def g(nums=[2, 4, 6, 8, 10]):\n    product = 1\n    for num in nums:\n        product *= num\n    return product", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date: str, fmt=\"%Y-%m-%d\") -> bool:\n    \"\"\"\n    Check if a given date string matches the provided format\n    \"\"\"\n    try:\n        datetime.strptime(date, fmt)\n        return True\n    except ValueError:\n        return False\n\ndef g(fmt=\"%Y-%m-%d\"):\n    return datetime.now().strftime(fmt)\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 244, "target_skills": null, "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(date: str, fmt=\"%Y-%m-%d\") -> bool:\n    \"\"\"\n    Check if a given date string matches the provided format\n    \"\"\"\n    try:\n        datetime.strptime(date, fmt)\n        return True\n    except ValueError:\n        return False", "solution_func": "def g(fmt=\"%Y-%m-%d\"):\n    return datetime.now().strftime(fmt)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, r: float) -> bool:\n    \"\"\"\n    Check if a given point (x, y) is inside a circle with center (0, 0) and radius r\n    \"\"\"\n    return math.sqrt(x ** 2 + y ** 2) < r\n\ndef g(r: float):\n    return (r - 1, r - 1, r)\n\nassert f(g())\n", "emb": null, "idx_generation": 244, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, y: float, r: float) -> bool:\n    \"\"\"\n    Check if a given point (x, y) is inside a circle with center (0, 0) and radius r\n    \"\"\"\n    return math.sqrt(x ** 2 + y ** 2) < r", "solution_func": "def g(r: float):\n    return (r - 1, r - 1, r)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport re\n\ndef f(email: str, pattern=r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$') -> bool:\n    \"\"\"\n    Check if a given email matches a specified pattern\n    \"\"\"\n    return bool(re.match(pattern, email))\n\ndef g():\n    return \"example@gmail.com\"\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 244, "target_skills": null, "problem_func": "from typing import*\nimport re\n\ndef f(email: str, pattern=r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$') -> bool:\n    \"\"\"\n    Check if a given email matches a specified pattern\n    \"\"\"\n    return bool(re.match(pattern, email))", "solution_func": "def g():\n    return \"example@gmail.com\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], n=11, k=3) -> bool:\n    \"\"\"\n    Given a list of integers, determine if there exists a subarray of length k\n    whose sum is divisible by n.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    n = 11\n    k = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(arr)-k+1):\n        subarray = arr[i:i+k]\n        if sum(subarray) % n == 0:\n            return True\n    return False\n\ndef g(n=11, k=3):\n    return [i+1 for i in range(n*k)]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 244, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], n=11, k=3) -> bool:\n    \"\"\"\n    Given a list of integers, determine if there exists a subarray of length k\n    whose sum is divisible by n.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    n = 11\n    k = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(arr)-k+1):\n        subarray = arr[i:i+k]\n        if sum(subarray) % n == 0:\n            return True\n    return False", "solution_func": "def g(n=11, k=3):\n    return [i+1 for i in range(n*k)]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, t='racecar') -> bool:\n    \"\"\"\n    Given a string s, determine if it is a palindrome. A palindrome is a word, phrase,\n    number, or other sequence of characters that reads the same forward and backward.\n\n    Sample Input:\n    s = \"racecar\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return s == t\n\ndef g(t='racecar'):\n    return t\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 244, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, t='racecar') -> bool:\n    \"\"\"\n    Given a string s, determine if it is a palindrome. A palindrome is a word, phrase,\n    number, or other sequence of characters that reads the same forward and backward.\n\n    Sample Input:\n    s = \"racecar\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return s == t", "solution_func": "def g(t='racecar'):\n    return t", "map_ix": [0, 0, 0, 1, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], k=3, x=7) -> bool:\n    \"\"\"\n    Given a sorted list of integers, find if there exists a subarray with length at least k\n    whose absolute difference between the maximum and minimum element is less than or equal to x.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    k = 3\n    x = 7\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(arr)-k+1):\n        subarray = arr[i:i+k]\n        if max(subarray) - min(subarray) <= x:\n            return True\n    return False\n\ndef g(k=3, x=7):\n    return [i+1 for i in range(k+2)]\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 244, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], k=3, x=7) -> bool:\n    \"\"\"\n    Given a sorted list of integers, find if there exists a subarray with length at least k\n    whose absolute difference between the maximum and minimum element is less than or equal to x.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    k = 3\n    x = 7\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(arr)-k+1):\n        subarray = arr[i:i+k]\n        if max(subarray) - min(subarray) <= x:\n            return True\n    return False", "solution_func": "def g(k=3, x=7):\n    return [i+1 for i in range(k+2)]", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], a=1, b=100, count=10) -> bool:\n    \"\"\"Find a list of count or more different numbers each between a and b that are divisible by 3\"\"\"\n    assert all((n % 3 == 0 for n in nums))\n    return len(set(nums)) >= count\ndef g(a = 1, b = 100, count = 10):\n    return [n for n in range(a, b + 1) if n % 3 == 0]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 244, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], a=1, b=100, count=10) -> bool:\n    \"\"\"Find a list of count or more different numbers each between a and b that are divisible by 3\"\"\"\n    assert all((n % 3 == 0 for n in nums))\n    return len(set(nums)) >= count", "solution_func": "def g(a = 1, b = 100, count = 10):\n    return [n for n in range(a, b + 1) if n % 3 == 0]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(x: int, a=100, b=1000) -> bool:\n    \"\"\"Check if a number is a palindrome\"\"\"\n    return str(x) == str(x)[::-1]\ndef g(a = 100, b = 1000):\n    return random.choice(range(a, b + 1))\nassert f(g())\n", "emb": null, "idx_generation": 244, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(x: int, a=100, b=1000) -> bool:\n    \"\"\"Check if a number is a palindrome\"\"\"\n    return str(x) == str(x)[::-1]", "solution_func": "def g(a = 100, b = 1000):\n    return random.choice(range(a, b + 1))", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(n: int, a=10, b=5) -> bool:\n    \"\"\"Check if a number is a power of 2\"\"\"\n    return n & (n - 1) == 0\ndef g(a = 10, b = 5):\n    return 2 ** random.randint(a, b)\nassert f(g())\n", "emb": null, "idx_generation": 244, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(n: int, a=10, b=5) -> bool:\n    \"\"\"Check if a number is a power of 2\"\"\"\n    return n & (n - 1) == 0", "solution_func": "def g(a = 10, b = 5):\n    return 2 ** random.randint(a, b)", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(x: np.ndarray, threshold=0.5) -> bool:\n    \"\"\"Check if the average value of the array is above the threshold\"\"\"\n    return np.mean(x) > threshold\n\ndef g(size=10, threshold=0.5):\n    return np.random.rand(size)\n\nassert f(g())\n", "emb": null, "idx_generation": 244, "target_skills": null, "problem_func": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(x: np.ndarray, threshold=0.5) -> bool:\n    \"\"\"Check if the average value of the array is above the threshold\"\"\"\n    return np.mean(x) > threshold", "solution_func": "def g(size=10, threshold=0.5):\n    return np.random.rand(size)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, m: int) -> bool:\n    \"\"\"Check if n is divisible by m\"\"\"\n    return n % m == 0\n\ndef g(m: int):\n    n = m * 10\n    return n\n\nassert f(g(), g(5))\n", "emb": null, "idx_generation": 245, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m: int) -> bool:\n    \"\"\"Check if n is divisible by m\"\"\"\n    return n % m == 0", "solution_func": "def g(m: int):\n    n = m * 10\n    return n", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string contains only unique characters\"\"\"\n    return len(set(s)) == len(s)\n\ndef g():\n    return \"abcdefgh\"\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 245, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string contains only unique characters\"\"\"\n    return len(set(s)) == len(s)", "solution_func": "def g():\n    return \"abcdefgh\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5], 9\n\nassert f(*g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 245, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g():\n    return [1, 2, 3, 4, 5], 9", "map_ix": [1, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, target: int) -> bool:\n    \"\"\"\n    Check if the target number is present in the given matrix.\n    \"\"\"\n    return target in matrix\ndef g(matrix: np.ndarray, target: int):\n    return np.random.choice(matrix.flatten())\nmatrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ntarget = 5\nassert f(g(matrix, target), target)\n", "emb": null, "idx_generation": 245, "target_skills": null, "problem_func": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, target: int) -> bool:\n    \"\"\"\n    Check if the target number is present in the given matrix.\n    \"\"\"\n    return target in matrix", "solution_func": "def g(matrix: np.ndarray, target: int):\n    return np.random.choice(matrix.flatten())\nmatrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ntarget = 5", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, delimiter: str) -> bool:\n    \"\"\"\n    Check if all substrings obtained by splitting the given string at the delimiter are alphanumeric.\n    \"\"\"\n    substrings = string.split(delimiter)\n    return all(substring.isalnum() for substring in substrings)\ndef g(string: str, delimiter: str):\n    return string.split(delimiter)[0]\nstring = \"hello,world\"\ndelimiter = \",\"\nassert f(g(string, delimiter), delimiter)\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 245, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, delimiter: str) -> bool:\n    \"\"\"\n    Check if all substrings obtained by splitting the given string at the delimiter are alphanumeric.\n    \"\"\"\n    substrings = string.split(delimiter)\n    return all(substring.isalnum() for substring in substrings)", "solution_func": "def g(string: str, delimiter: str):\n    return string.split(delimiter)[0]\nstring = \"hello,world\"\ndelimiter = \",\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport re\n\ndef f(string: str, pattern: str) -> bool:\n    \"\"\"\n    Check if the string matches the given regex pattern.\n    \"\"\"\n    return bool(re.match(pattern, string))\ndef g(string: str, pattern: str):\n    return re.findall(pattern, string)[0]\nstring = \"abc123\"\npattern = r\"\\d+\"\nassert f(g(string, pattern), pattern)\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 245, "target_skills": null, "problem_func": "from typing import*\nimport re\n\ndef f(string: str, pattern: str) -> bool:\n    \"\"\"\n    Check if the string matches the given regex pattern.\n    \"\"\"\n    return bool(re.match(pattern, string))", "solution_func": "def g(string: str, pattern: str):\n    return re.findall(pattern, string)[0]\nstring = \"abc123\"\npattern = r\"\\d+\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(lst: list, x=2, y=3) -> bool:\n    \"\"\"Check if the sum of the elements in the list is equal to x * y\"\"\"\n    return sum(lst) == x * y\ndef g(x = 2, y = 3):\n    return [x, y]\nassert f(g())\n", "emb": null, "idx_generation": 245, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: list, x=2, y=3) -> bool:\n    \"\"\"Check if the sum of the elements in the list is equal to x * y\"\"\"\n    return sum(lst) == x * y", "solution_func": "def g(x = 2, y = 3):\n    return [x, y]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, word='Python') -> bool:\n    \"\"\"Check if the word is present in the string\"\"\"\n    return word in s\ndef g(word = 'Python'):\n    return 'Hello, ' + word + '!'\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 245, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, word='Python') -> bool:\n    \"\"\"Check if the word is present in the string\"\"\"\n    return word in s", "solution_func": "def g(word = 'Python'):\n    return 'Hello, ' + word + '!'", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, x=2) -> bool:\n    \"\"\"Check if the number is a power of x\"\"\"\n    while n % x == 0:\n        n = n / x\n    return n == 1\ndef g(x = 2):\n    return x ** 5\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 245, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, x=2) -> bool:\n    \"\"\"Check if the number is a power of x\"\"\"\n    while n % x == 0:\n        n = n / x\n    return n == 1", "solution_func": "def g(x = 2):\n    return x ** 5", "map_ix": [0, 0, 0, 1, 0, 0, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target_sum: int, k: int) -> bool:\n    \"\"\"\n    Given an array of integers 'arr', determine if there exists a subset of size 'k' whose elements sum up to 'target_sum'.\n    Return True if such a subset exists, False otherwise.\n    \"\"\"\n    def subset_sum(arr, target, k, idx, curr_sum, curr_size):\n        if curr_sum == target and curr_size == k:\n            return True\n        if idx >= len(arr) or curr_sum > target or curr_size > k:\n            return False\n        return subset_sum(arr, target, k, idx + 1, curr_sum + arr[idx], curr_size + 1) or subset_sum(arr, target, k, idx + 1, curr_sum, curr_size)\n\n    return subset_sum(arr, target_sum, k, 0, 0, 0)\n\ndef g(arr = [1, 2, 3, 4, 5], target_sum = 9, k = 3):\n    return arr\n\nassert f(g())\n", "emb": null, "idx_generation": 245, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target_sum: int, k: int) -> bool:\n    \"\"\"\n    Given an array of integers 'arr', determine if there exists a subset of size 'k' whose elements sum up to 'target_sum'.\n    Return True if such a subset exists, False otherwise.\n    \"\"\"\n    def subset_sum(arr, target, k, idx, curr_sum, curr_size):\n        if curr_sum == target and curr_size == k:\n            return True\n        if idx >= len(arr) or curr_sum > target or curr_size > k:\n            return False\n        return subset_sum(arr, target, k, idx + 1, curr_sum + arr[idx], curr_size + 1) or subset_sum(arr, target, k, idx + 1, curr_sum, curr_size)\n\n    return subset_sum(arr, target_sum, k, 0, 0, 0)", "solution_func": "def g(arr = [1, 2, 3, 4, 5], target_sum = 9, k = 3):\n    return arr", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, substring='abc', count=2, length=10) -> bool:\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length\n\ndef g(substring='abc', count=2, length=10):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 246, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, substring='abc', count=2, length=10) -> bool:\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length", "solution_func": "def g(substring='abc', count=2, length=10):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(arr: List[int], target_sum=50, num_elements=3) -> bool:\n    \"\"\"Find a subset of the given array with a specified sum and number of elements\"\"\"\n    from itertools import combinations\n    for subset in combinations(arr, num_elements):\n        if sum(subset) == target_sum:\n            return True\n    return False\n\ndef g(arr=[10, 20, 30, 40, 50]):\n    return arr\n\nassert f(g())\n", "emb": null, "idx_generation": 246, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(arr: List[int], target_sum=50, num_elements=3) -> bool:\n    \"\"\"Find a subset of the given array with a specified sum and number of elements\"\"\"\n    from itertools import combinations\n    for subset in combinations(arr, num_elements):\n        if sum(subset) == target_sum:\n            return True\n    return False", "solution_func": "def g(arr=[10, 20, 30, 40, 50]):\n    return arr", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_sum=100) -> bool:\n    \"\"\"Find a submatrix in the given matrix with a specified sum\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            for x in range(i, rows):\n                for y in range(j, cols):\n                    submatrix_sum = sum(matrix[a][b] for a in range(i, x + 1) for b in range(j, y + 1))\n                    if submatrix_sum == target_sum:\n                        return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g())\n", "emb": null, "idx_generation": 246, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_sum=100) -> bool:\n    \"\"\"Find a submatrix in the given matrix with a specified sum\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            for x in range(i, rows):\n                for y in range(j, cols):\n                    submatrix_sum = sum(matrix[a][b] for a in range(i, x + 1) for b in range(j, y + 1))\n                    if submatrix_sum == target_sum:\n                        return True\n    return False", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if a pair of numbers in the list sums up to the target value\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    nums = [1, 2, 3, 4, 5]\n    target = 7\n    return nums, target\n\nassert f(*g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 246, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if a pair of numbers in the list sums up to the target value\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g():\n    nums = [1, 2, 3, 4, 5]\n    target = 7\n    return nums, target", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is symmetric\"\"\"\n    row_len = len(matrix)\n    col_len = len(matrix[0])\n    if row_len != col_len:\n        return False\n    for i in range(row_len):\n        for j in range(i+1, col_len):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    matrix = [[1, 2, 3],\n              [2, 4, 5],\n              [3, 5, 6]]\n    return matrix\n\nassert f(g())\n", "emb": [1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 246, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is symmetric\"\"\"\n    row_len = len(matrix)\n    col_len = len(matrix[0])\n    if row_len != col_len:\n        return False\n    for i in range(row_len):\n        for j in range(i+1, col_len):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "solution_func": "def g():\n    matrix = [[1, 2, 3],\n              [2, 4, 5],\n              [3, 5, 6]]\n    return matrix", "map_ix": [1, 0, 1, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, k: int) -> bool:\n    \"\"\"Check if a string can be rearranged to have all k adjacent characters distinct\"\"\"\n    if len(s) < k:\n        return False\n    char_counts = {}\n    for char in s:\n        char_counts[char] = char_counts.get(char, 0) + 1\n        if char_counts[char] > k:\n            return False\n    return True\n\ndef g():\n    s = \"ababcc\"\n    k = 3\n    return s, k\n\nassert f(*g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 246, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, k: int) -> bool:\n    \"\"\"Check if a string can be rearranged to have all k adjacent characters distinct\"\"\"\n    if len(s) < k:\n        return False\n    char_counts = {}\n    for char in s:\n        char_counts[char] = char_counts.get(char, 0) + 1\n        if char_counts[char] > k:\n            return False\n    return True", "solution_func": "def g():\n    s = \"ababcc\"\n    k = 3\n    return s, k", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(ans: List[List[int]], target=10) -> bool:\n    \"\"\"\n    Find a list of pairs of integers where the number of pairs in which the second number is less than\n    the first number is a given constant\n    \"\"\"\n    for i in range(len(ans)):\n        (a, b) = ans[i]\n        if a > b:\n            target -= 1\n    return target == 0\ndef g(target=10):\n    return [[i, i+1] for i in range(target)]\nassert f(g())\n", "emb": null, "idx_generation": 246, "target_skills": null, "problem_func": "from typing import*\ndef f(ans: List[List[int]], target=10) -> bool:\n    \"\"\"\n    Find a list of pairs of integers where the number of pairs in which the second number is less than\n    the first number is a given constant\n    \"\"\"\n    for i in range(len(ans)):\n        (a, b) = ans[i]\n        if a > b:\n            target -= 1\n    return target == 0", "solution_func": "def g(target=10):\n    return [[i, i+1] for i in range(target)]", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(n: int, year_len=365) -> bool:\n    \"\"\"Find n such that the probability of two people having the same birthday in a group of n is near 1.\"\"\"\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return prob >= 0.99\ndef g(year_len=365):\n    n = 1\n    distinct_prob = 1.0\n    best = (1, 1)  # (difference between probability and 1, n)\n    while distinct_prob > 0:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (1 - distinct_prob, n))\n\n    return best[1]\nassert f(g())\n", "emb": null, "idx_generation": 246, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(n: int, year_len=365) -> bool:\n    \"\"\"Find n such that the probability of two people having the same birthday in a group of n is near 1.\"\"\"\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return prob >= 0.99", "solution_func": "def g(year_len=365):\n    n = 1\n    distinct_prob = 1.0\n    best = (1, 1)  # (difference between probability and 1, n)\n    while distinct_prob > 0:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (1 - distinct_prob, n))\n\n    return best[1]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Find a formula using three 2's and three 3's and -+*/ that evaluates to 24.\"\"\"\n    return set(s) <= set('23-+*/') and s.count('2') == 3 and s.count('3') == 3 and (eval(s) == 24)\ndef g():\n    return \"2*3*(2+3)\"\nassert f(g())\n", "emb": null, "idx_generation": 246, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Find a formula using three 2's and three 3's and -+*/ that evaluates to 24.\"\"\"\n    return set(s) <= set('23-+*/') and s.count('2') == 3 and s.count('3') == 3 and (eval(s) == 24)", "solution_func": "def g():\n    return \"2*3*(2+3)\"", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target=10, k=2) -> bool:\n    \"\"\"\n    Determine if there exists a pair of integers in the array 'arr' whose sum is equal to the target.\n    The function should return True if such a pair exists, and False otherwise.\n    \"\"\"\n    seen = set()\n    for num in arr:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(arr = [1, 2, 3, 4, 5, 6], target = 10, k = 2):\n    return arr\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 246, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=10, k=2) -> bool:\n    \"\"\"\n    Determine if there exists a pair of integers in the array 'arr' whose sum is equal to the target.\n    The function should return True if such a pair exists, and False otherwise.\n    \"\"\"\n    seen = set()\n    for num in arr:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(arr = [1, 2, 3, 4, 5, 6], target = 10, k = 2):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, n=100) -> bool:\n    \"\"\"Check if the sum of two numbers is equal to the third number.\"\"\"\n    return abs(x + y - z) < 1e-9 and math.isclose(x + y, z, rel_tol=1e-9, abs_tol=1e-9) and n > 0\n\ndef g(x: float, y: float, z: float, n=100):\n    return x + y - z\n\nassert f(g(x=10.5, y=20.5, z=31))\n", "emb": null, "idx_generation": 247, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, n=100) -> bool:\n    \"\"\"Check if the sum of two numbers is equal to the third number.\"\"\"\n    return abs(x + y - z) < 1e-9 and math.isclose(x + y, z, rel_tol=1e-9, abs_tol=1e-9) and n > 0", "solution_func": "def g(x: float, y: float, z: float, n=100):\n    return x + y - z", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: list, target=5) -> bool:\n    \"\"\"Check if the sum of any two numbers in a list is equal to the target number.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(arr: list, target=5):\n    return arr\n\nassert f(g(arr=[1, 2, 3, 4, 5]))\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 247, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: list, target=5) -> bool:\n    \"\"\"Check if the sum of any two numbers in a list is equal to the target number.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g(arr: list, target=5):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if a string has n or more characters.\"\"\"\n    return len(s) >= n\n\ndef g(s: str, n=5):\n    return s + 'a' * (n - len(s))\n\nassert f(g(s=\"hello\"))\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 247, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if a string has n or more characters.\"\"\"\n    return len(s) >= n", "solution_func": "def g(s: str, n=5):\n    return s + 'a' * (n - len(s))", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(n: float, a=3.14, b=2) -> bool:\n    \"\"\"Check if the square root of n is equal to a divided by b\"\"\"\n    return math.sqrt(n) == a / b\n\ndef g(a=3.14, b=2):\n    return (a / b) ** 2\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 247, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: float, a=3.14, b=2) -> bool:\n    \"\"\"Check if the square root of n is equal to a divided by b\"\"\"\n    return math.sqrt(n) == a / b", "solution_func": "def g(a=3.14, b=2):\n    return (a / b) ** 2", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, target='word', reverse=False) -> bool:\n    \"\"\"Check if the target string is found in s, either in reverse or normal order\"\"\"\n    return (s == target or s[::-1] == target) == reverse\n\ndef g(target='word', reverse=False):\n    if reverse:\n        return target[::-1]\n    else:\n        return target\n\nassert f(g())\n", "emb": null, "idx_generation": 247, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='word', reverse=False) -> bool:\n    \"\"\"Check if the target string is found in s, either in reverse or normal order\"\"\"\n    return (s == target or s[::-1] == target) == reverse", "solution_func": "def g(target='word', reverse=False):\n    if reverse:\n        return target[::-1]\n    else:\n        return target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target=20) -> bool:\n    \"\"\"Check if the sum of any two numbers in the array equals the target value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n", "emb": null, "idx_generation": 247, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=20) -> bool:\n    \"\"\"Check if the sum of any two numbers in the array equals the target value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g(target=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target=17) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find three distinct numbers from the list\n    whose sum is equal to the target number.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            for k in range(j + 1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g(target=17):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 247, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=17) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find three distinct numbers from the list\n    whose sum is equal to the target number.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            for k in range(j + 1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False", "solution_func": "def g(target=17):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find two numbers from the list\n    whose sum is equal to the target number.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 247, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find two numbers from the list\n    whose sum is equal to the target number.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"\n    Given a matrix (list of lists) of integers and a target number, find two numbers from the matrix\n    whose sum is equal to the target number.\n    \"\"\"\n    for row in matrix:\n        for i in range(len(row)):\n            for j in range(i + 1, len(row)):\n                if row[i] + row[j] == target:\n                    return True\n    return False\n\ndef g(target=15):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 247, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"\n    Given a matrix (list of lists) of integers and a target number, find two numbers from the matrix\n    whose sum is equal to the target number.\n    \"\"\"\n    for row in matrix:\n        for i in range(len(row)):\n            for j in range(i + 1, len(row)):\n                if row[i] + row[j] == target:\n                    return True\n    return False", "solution_func": "def g(target=15):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given list whose sum is equal to the target value.\n    \"\"\"\n    return any((arr[i] + arr[j] == target) for i in range(len(arr)) for j in range(i + 1, len(arr)))\n    \ndef g(arr: List[int]):\n    return arr\nassert f(g())\n", "emb": null, "idx_generation": 247, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given list whose sum is equal to the target value.\n    \"\"\"\n    return any((arr[i] + arr[j] == target) for i in range(len(arr)) for j in range(i + 1, len(arr)))", "solution_func": "def g(arr: List[int]):\n    return arr", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(x: int, y: int, z: int, n: int) -> bool:\n    \"\"\"Check if there exists three non-negative integers a, b, and c such that a^x + b^y = c^z\"\"\"\n    return any([a**x + b**y == c**z for a in range(n+1) for b in range(n+1) for c in range(n+1) if a != 0 or b != 0 or c != 0])\ndef g(n = 10):\n    return n\nassert f(g(), g(), g(), g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 248, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: int, y: int, z: int, n: int) -> bool:\n    \"\"\"Check if there exists three non-negative integers a, b, and c such that a^x + b^y = c^z\"\"\"\n    return any([a**x + b**y == c**z for a in range(n+1) for b in range(n+1) for c in range(n+1) if a != 0 or b != 0 or c != 0])", "solution_func": "def g(n = 10):\n    return n", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(x: int, y: int, z: int, n: int) -> bool:\n    \"\"\"Check if there exists three non-negative integers a, b, and c such that a^x + b^y = c^z\"\"\"\n    return any([a**x + b**y == c**z for a in range(n+1) for b in range(n+1) for c in range(n+1) if a != 0 or b != 0 or c != 0])\ndef g(n = 10):\n    return random.randint(0, n)\nassert f(g(), g(), g(), g())\n", "emb": null, "idx_generation": 248, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(x: int, y: int, z: int, n: int) -> bool:\n    \"\"\"Check if there exists three non-negative integers a, b, and c such that a^x + b^y = c^z\"\"\"\n    return any([a**x + b**y == c**z for a in range(n+1) for b in range(n+1) for c in range(n+1) if a != 0 or b != 0 or c != 0])", "solution_func": "def g(n = 10):\n    return random.randint(0, n)", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(m: np.ndarray) -> bool:\n    \"\"\"Check if the given matrix is a magic square\"\"\"\n    n = m.shape[0]\n    magic_sum = int(n * (n**2 + 1) / 2)\n    row_sums = np.sum(m, axis=1)\n    col_sums = np.sum(m, axis=0)\n    diag_sum = np.trace(m)\n    anti_diag_sum = np.trace(np.fliplr(m))\n    return np.all(row_sums == magic_sum) and np.all(col_sums == magic_sum) and diag_sum == magic_sum and anti_diag_sum == magic_sum\ndef g():\n    n = np.random.randint(3, 10)\n    m = np.random.randint(1, 10, (n, n))\n    return m\nassert f(g())\n", "emb": null, "idx_generation": 248, "target_skills": null, "problem_func": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(m: np.ndarray) -> bool:\n    \"\"\"Check if the given matrix is a magic square\"\"\"\n    n = m.shape[0]\n    magic_sum = int(n * (n**2 + 1) / 2)\n    row_sums = np.sum(m, axis=1)\n    col_sums = np.sum(m, axis=0)\n    diag_sum = np.trace(m)\n    anti_diag_sum = np.trace(np.fliplr(m))\n    return np.all(row_sums == magic_sum) and np.all(col_sums == magic_sum) and diag_sum == magic_sum and anti_diag_sum == magic_sum", "solution_func": "def g():\n    n = np.random.randint(3, 10)\n    m = np.random.randint(1, 10, (n, n))\n    return m", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, lst=[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]) -> bool:\n    \"\"\"\n    Determine if the given number is in the Fibonacci sequence.\n    \"\"\"\n    return n in lst\ndef g(lst=[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]):\n    return sum(lst[-2:])\nassert f(g())\n", "emb": null, "idx_generation": 248, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst=[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]) -> bool:\n    \"\"\"\n    Determine if the given number is in the Fibonacci sequence.\n    \"\"\"\n    return n in lst", "solution_func": "def g(lst=[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]):\n    return sum(lst[-2:])", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, lst=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) -> bool:\n    \"\"\"\n    Determine if the given number is in the list of even numbers.\n    \"\"\"\n    return n in lst\ndef g(lst=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]):\n    return lst[n//2-1]\nassert f(g())\n", "emb": null, "idx_generation": 248, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) -> bool:\n    \"\"\"\n    Determine if the given number is in the list of even numbers.\n    \"\"\"\n    return n in lst", "solution_func": "def g(lst=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]):\n    return lst[n//2-1]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, lst=[3, 6, 9, 12, 15, 18, 21, 24, 27, 30]) -> bool:\n    \"\"\"\n    Determine if the given number is in the list of multiples of 3.\n    \"\"\"\n    return n in lst\ndef g(lst=[3, 6, 9, 12, 15, 18, 21, 24, 27, 30]):\n    return lst[n//3-1]\nassert f(g())\n", "emb": null, "idx_generation": 248, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst=[3, 6, 9, 12, 15, 18, 21, 24, 27, 30]) -> bool:\n    \"\"\"\n    Determine if the given number is in the list of multiples of 3.\n    \"\"\"\n    return n in lst", "solution_func": "def g(lst=[3, 6, 9, 12, 15, 18, 21, 24, 27, 30]):\n    return lst[n//3-1]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=17) -> bool:\n    \"\"\"\n    Find two numbers in nums that add up to the target\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(nums=[2, 3, 5, 8, 10]):\n    \"\"\"\n    This solution uses a set to keep track of the numbers seen so far.\n    \"\"\"\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 248, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=17) -> bool:\n    \"\"\"\n    Find two numbers in nums that add up to the target\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(nums=[2, 3, 5, 8, 10]):\n    \"\"\"\n    This solution uses a set to keep track of the numbers seen so far.\n    \"\"\"\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=9) -> bool:\n    \"\"\"\n    Find if the target number is present in the matrix\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    \"\"\"\n    This solution iterates through each row of the matrix and checks if the target number is present.\n    \"\"\"\n    return matrix\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 248, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=9) -> bool:\n    \"\"\"\n    Find if the target number is present in the matrix\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    \"\"\"\n    This solution iterates through each row of the matrix and checks if the target number is present.\n    \"\"\"\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(words: List[str], pattern='abb') -> bool:\n    \"\"\"\n    Find words in the list that match the given pattern\n    \"\"\"\n    result = []\n    for word in words:\n        if len(word) != len(pattern):\n            continue\n        mapping = {}\n        valid = True\n        for i in range(len(word)):\n            if pattern[i] not in mapping:\n                mapping[pattern[i]] = word[i]\n            elif mapping[pattern[i]] != word[i]:\n                valid = False\n                break\n        if valid:\n            result.append(word)\n    return result\ndef g(words=['abc', 'def', 'ghi', 'jkl']):\n    \"\"\"\n    This solution checks each word in the list and matches it with the given pattern.\n    \"\"\"\n    return words\nassert f(g())\n", "emb": null, "idx_generation": 248, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], pattern='abb') -> bool:\n    \"\"\"\n    Find words in the list that match the given pattern\n    \"\"\"\n    result = []\n    for word in words:\n        if len(word) != len(pattern):\n            continue\n        mapping = {}\n        valid = True\n        for i in range(len(word)):\n            if pattern[i] not in mapping:\n                mapping[pattern[i]] = word[i]\n            elif mapping[pattern[i]] != word[i]:\n                valid = False\n                break\n        if valid:\n            result.append(word)\n    return result", "solution_func": "def g(words=['abc', 'def', 'ghi', 'jkl']):\n    \"\"\"\n    This solution checks each word in the list and matches it with the given pattern.\n    \"\"\"\n    return words", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"Check if there are two numbers in the given list that add up to the target.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(nums: List[int], target: int = 0):\n    return nums, target\nassert f(g())\n", "emb": null, "idx_generation": 248, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"Check if there are two numbers in the given list that add up to the target.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(nums: List[int], target: int = 0):\n    return nums, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, nums=[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20]]) -> bool:\n    \"\"\"Check if the sum of any row or column in nums is equal to n\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n    for i in range(rows):\n        if sum(nums[i]) == n:\n            return True\n    for j in range(cols):\n        if sum(nums[i][j] for i in range(rows)) == n:\n            return True\n    return False\ndef g(nums=[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20]]):\n    return sum(nums[0]) + sum(nums[1]) + sum(nums[2]) + sum(nums[3])\nassert f(g())\n", "emb": null, "idx_generation": 249, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20]]) -> bool:\n    \"\"\"Check if the sum of any row or column in nums is equal to n\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n    for i in range(rows):\n        if sum(nums[i]) == n:\n            return True\n    for j in range(cols):\n        if sum(nums[i][j] for i in range(rows)) == n:\n            return True\n    return False", "solution_func": "def g(nums=[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20]]):\n    return sum(nums[0]) + sum(nums[1]) + sum(nums[2]) + sum(nums[3])", "map_ix": null}, {"fitness": 1.0, "program_str": "import math\nfrom typing import*\nfrom math import gcd\ndef f(n: int, nums=[20, 30, 40, 50, 60]) -> bool:\n    \"\"\"Check if the greatest common divisor of all the numbers in nums is equal to n\"\"\"\n    return all(gcd(num, n) == n for num in nums)\ndef g(nums=[20, 30, 40, 50, 60]):\n    return gcd(gcd(gcd(nums[0], nums[1]), nums[2]), gcd(nums[3], nums[4]))\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 249, "target_skills": null, "problem_func": "import math\nfrom typing import*\nfrom math import gcd\ndef f(n: int, nums=[20, 30, 40, 50, 60]) -> bool:\n    \"\"\"Check if the greatest common divisor of all the numbers in nums is equal to n\"\"\"\n    return all(gcd(num, n) == n for num in nums)", "solution_func": "def g(nums=[20, 30, 40, 50, 60]):\n    return gcd(gcd(gcd(nums[0], nums[1]), nums[2]), gcd(nums[3], nums[4]))", "map_ix": [0, 0, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, nums=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]) -> bool:\n    \"\"\"Check if the sum of the main diagonal elements of nums is equal to n\"\"\"\n    return sum(nums[i][i] for i in range(len(nums))) == n\ndef g(nums=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return nums[0][0] + nums[1][1] + nums[2][2]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 249, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]) -> bool:\n    \"\"\"Check if the sum of the main diagonal elements of nums is equal to n\"\"\"\n    return sum(nums[i][i] for i in range(len(nums))) == n", "solution_func": "def g(nums=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return nums[0][0] + nums[1][1] + nums[2][2]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of integers in the array whose sum is equal to the target_sum\"\"\"\n    return any(target_sum - x in arr for x in arr)\ndef g(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target_sum = 10):\n    return arr\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 249, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of integers in the array whose sum is equal to the target_sum\"\"\"\n    return any(target_sum - x in arr for x in arr)", "solution_func": "def g(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target_sum = 10):\n    return arr", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"Check if the string s can be divided into k parts, such that each part consists of the same characters\"\"\"\n    n = len(s)\n    if n % k != 0:\n        return False\n    count = {}\n    for c in s:\n        count[c] = count.get(c, 0) + 1\n    return all(v % k == 0 for v in count.values())\ndef g(s = \"abccba\", k = 3):\n    return s\nassert f(g())\n", "emb": null, "idx_generation": 249, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"Check if the string s can be divided into k parts, such that each part consists of the same characters\"\"\"\n    n = len(s)\n    if n % k != 0:\n        return False\n    count = {}\n    for c in s:\n        count[c] = count.get(c, 0) + 1\n    return all(v % k == 0 for v in count.values())", "solution_func": "def g(s = \"abccba\", k = 3):\n    return s", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric\"\"\"\n    n = len(matrix)\n    return all(matrix[i][j] == matrix[j][i] for i in range(n) for j in range(n))\ndef g(matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 249, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric\"\"\"\n    n = len(matrix)\n    return all(matrix[i][j] == matrix[j][i] for i in range(n) for j in range(n))", "solution_func": "def g(matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target\"\"\"\n    for i, num in enumerate(nums):\n        if target - num in nums[i+1:]:\n            return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 249, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target\"\"\"\n    for i, num in enumerate(nums):\n        if target - num in nums[i+1:]:\n            return True\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(phrase: str, keyword='python') -> bool:\n    \"\"\"Check if a keyword is present in the given phrase\"\"\"\n    return keyword in phrase.lower()\n\ndef g(phrase='I love Python programming'):\n    return phrase\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 249, "target_skills": null, "problem_func": "from typing import*\ndef f(phrase: str, keyword='python') -> bool:\n    \"\"\"Check if a keyword is present in the given phrase\"\"\"\n    return keyword in phrase.lower()", "solution_func": "def g(phrase='I love Python programming'):\n    return phrase", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if the target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g())\n", "emb": null, "idx_generation": 249, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if the target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums = [1, 2, 3, 4, 5]):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == 10:\n                return True\n    return False\n\nassert f(g())\n", "emb": null, "idx_generation": 249, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums = [1, 2, 3, 4, 5]):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == 10:\n                return True\n    return False", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 250, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5]):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if there is a pair of numbers in the matrix that add up to the target value\"\"\"\n    nums = [num for sublist in matrix for num in sublist]\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g())\n", "emb": null, "idx_generation": 250, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if there is a pair of numbers in the matrix that add up to the target value\"\"\"\n    nums = [num for sublist in matrix for num in sublist]\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there are three numbers in the list that add up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 250, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there are three numbers in the list that add up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5]):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, m: int, p=100, q=10) -> bool:\n    \"\"\"\n    Given two numbers n and m, check if the product of their sum and difference is divisible by p and q.\n\n    Sample Input:\n    n = 5\n    m = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    return ((n + m) * (n - m)) % p == 0 and ((n + m) * (n - m)) % q == 0\ndef g(n = 5, m = 3, p = 100, q = 10):\n    return n, m\nassert f(*g())\n", "emb": null, "idx_generation": 250, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m: int, p=100, q=10) -> bool:\n    \"\"\"\n    Given two numbers n and m, check if the product of their sum and difference is divisible by p and q.\n\n    Sample Input:\n    n = 5\n    m = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    return ((n + m) * (n - m)) % p == 0 and ((n + m) * (n - m)) % q == 0", "solution_func": "def g(n = 5, m = 3, p = 100, q = 10):\n    return n, m", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target=20, func=sum) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, check if the sum of the list is equal to the target number.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    return func(arr) == target\ndef g(arr = [1, 2, 3, 4, 5], target = 20, func = sum):\n    return arr\nassert f(g())\n", "emb": null, "idx_generation": 250, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=20, func=sum) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, check if the sum of the list is equal to the target number.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    return func(arr) == target", "solution_func": "def g(arr = [1, 2, 3, 4, 5], target = 20, func = sum):\n    return arr", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s1: str, s2: str, n=3) -> bool:\n    \"\"\"\n    Given two strings s1 and s2, check if the first n characters of s1 are equal to the first n characters of s2.\n\n    Sample Input:\n    s1 = \"abcdef\"\n    s2 = \"abcxyz\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return s1[:n] == s2[:n]\ndef g(s1 = \"abcdef\", s2 = \"abcxyz\", n = 3):\n    return s1, s2\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 250, "target_skills": null, "problem_func": "from typing import*\ndef f(s1: str, s2: str, n=3) -> bool:\n    \"\"\"\n    Given two strings s1 and s2, check if the first n characters of s1 are equal to the first n characters of s2.\n\n    Sample Input:\n    s1 = \"abcdef\"\n    s2 = \"abcxyz\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return s1[:n] == s2[:n]", "solution_func": "def g(s1 = \"abcdef\", s2 = \"abcxyz\", n = 3):\n    return s1, s2", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"\n    You are given a list of integers and a target value. Determine if there are three integers in the list that add up to\n    the target value.\n\n    Sample Input:\n    `[1, 4, 5, 6, 7, 9]`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    for i in range(len(arr)-2):\n        for j in range(i+1, len(arr)-1):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g(arr=[1, 4, 5, 6, 7, 9], target=10):\n    return any(arr[i]+arr[j]+arr[k]==target for i in range(len(arr)-2) for j in range(i+1, len(arr)-1) for k in range(j+1, len(arr)))\n\nassert f(g())\n", "emb": null, "idx_generation": 250, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"\n    You are given a list of integers and a target value. Determine if there are three integers in the list that add up to\n    the target value.\n\n    Sample Input:\n    `[1, 4, 5, 6, 7, 9]`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    for i in range(len(arr)-2):\n        for j in range(i+1, len(arr)-1):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False", "solution_func": "def g(arr=[1, 4, 5, 6, 7, 9], target=10):\n    return any(arr[i]+arr[j]+arr[k]==target for i in range(len(arr)-2) for j in range(i+1, len(arr)-1) for k in range(j+1, len(arr)))", "map_ix": null}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\ndef f(s: str, target='abc') -> bool:\n    \"\"\"\n    Determine if a given string is a permutation of a target string.\n\n    Sample Input:\n    `\"bac\"`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    return sorted(s) == sorted(target)\n\ndef g(target='abc'):\n    return ''.join(random.sample(target, len(target)))\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 250, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(s: str, target='abc') -> bool:\n    \"\"\"\n    Determine if a given string is a permutation of a target string.\n\n    Sample Input:\n    `\"bac\"`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    return sorted(s) == sorted(target)", "solution_func": "def g(target='abc'):\n    return ''.join(random.sample(target, len(target)))", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=8) -> bool:\n    \"\"\"\n    You are given a matrix of integers and a target value. Determine if the target value is present in the matrix.\n\n    Sample Input:\n    `[[1, 3, 5], [2, 4, 6], [7, 8, 9]]`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix=[[1, 3, 5], [2, 4, 6], [7, 8, 9]], target=8):\n    return any(target in row for row in matrix)\n\nassert f(g())\n", "emb": null, "idx_generation": 250, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=8) -> bool:\n    \"\"\"\n    You are given a matrix of integers and a target value. Determine if the target value is present in the matrix.\n\n    Sample Input:\n    `[[1, 3, 5], [2, 4, 6], [7, 8, 9]]`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(matrix=[[1, 3, 5], [2, 4, 6], [7, 8, 9]], target=8):\n    return any(target in row for row in matrix)", "map_ix": null}, {"fitness": 1.0, "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, prime: bool=True) -> bool:\n    \"\"\"\n    Determine if a number is a perfect square or a prime number.\n\n    If prime is True, the function should return True if the number is prime.\n    If prime is False, the function should return True if the number is a perfect square.\n    \"\"\"\n    if prime:\n        if n < 2:\n            return False\n        for i in range(2, int(sqrt(n))+1):\n            if n % i == 0:\n                return False\n        return True\n    else:\n        return int(sqrt(n))**2 == n\n\ndef g(prime: bool=True):\n    if prime:\n        return 17\n    else:\n        return 9\n\nassert f(g(), prime=True)\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 250, "target_skills": null, "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, prime: bool=True) -> bool:\n    \"\"\"\n    Determine if a number is a perfect square or a prime number.\n\n    If prime is True, the function should return True if the number is prime.\n    If prime is False, the function should return True if the number is a perfect square.\n    \"\"\"\n    if prime:\n        if n < 2:\n            return False\n        for i in range(2, int(sqrt(n))+1):\n            if n % i == 0:\n                return False\n        return True\n    else:\n        return int(sqrt(n))**2 == n", "solution_func": "def g(prime: bool=True):\n    if prime:\n        return 17\n    else:\n        return 9", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: int, a=9, b=6) -> bool:\n    \"\"\"Find a number that, when added to x, results in a number where the sum of its digits is equal to 15.\"\"\"\n    return sum(int(digit) for digit in str(x + a)) == 15\ndef g(a = 9, b = 6):\n    return 15 - a - b\nassert f(g())\n", "emb": null, "idx_generation": 251, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, a=9, b=6) -> bool:\n    \"\"\"Find a number that, when added to x, results in a number where the sum of its digits is equal to 15.\"\"\"\n    return sum(int(digit) for digit in str(x + a)) == 15", "solution_func": "def g(a = 9, b = 6):\n    return 15 - a - b", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(x: str, a=datetime(2022, 1, 1), b=datetime(2022, 12, 31)) -> bool:\n    \"\"\"Check if the given date, when converted to a datetime object, is between the provided start and end dates.\"\"\"\n    date = datetime.strptime(x, '%Y-%m-%d')\n    return a <= date <= b\ndef g(a=datetime(2022, 1, 1), b=datetime(2022, 12, 31)):\n    return datetime.strftime(a + (b - a) // 2, '%Y-%m-%d')\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 251, "target_skills": null, "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(x: str, a=datetime(2022, 1, 1), b=datetime(2022, 12, 31)) -> bool:\n    \"\"\"Check if the given date, when converted to a datetime object, is between the provided start and end dates.\"\"\"\n    date = datetime.strptime(x, '%Y-%m-%d')\n    return a <= date <= b", "solution_func": "def g(a=datetime(2022, 1, 1), b=datetime(2022, 12, 31)):\n    return datetime.strftime(a + (b - a) // 2, '%Y-%m-%d')", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: int, a=3, b=7) -> bool:\n    \"\"\"Check if the given number is a perfect square and the sum of its digits is equal to a+b.\"\"\"\n    return int(x ** 0.5) ** 2 == x and sum(int(digit) for digit in str(x)) == a + b\ndef g(a=3, b=7):\n    return (10 * a + b) ** 2\nassert f(g())\n", "emb": null, "idx_generation": 251, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, a=3, b=7) -> bool:\n    \"\"\"Check if the given number is a perfect square and the sum of its digits is equal to a+b.\"\"\"\n    return int(x ** 0.5) ** 2 == x and sum(int(digit) for digit in str(x)) == a + b", "solution_func": "def g(a=3, b=7):\n    return (10 * a + b) ** 2", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport datetime\n\ndef f(d: datetime.date) -> bool:\n    \"\"\"Check if the given date is a palindrome date in the format \"MMDDYYYY\".\"\"\"\n    date_str = d.strftime(\"%m%d%Y\")\n    return date_str == date_str[::-1] and d.day <= 12 and d.month <= 12\n\ndef g():\n    \"\"\"Find the next palindrome date in the format \"MMDDYYYY\".\"\"\"\n    current_date = datetime.date.today()\n    while True:\n        current_date += datetime.timedelta(days=1)\n        if f(current_date):\n            return current_date\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 251, "target_skills": null, "problem_func": "from typing import*\nimport datetime\n\ndef f(d: datetime.date) -> bool:\n    \"\"\"Check if the given date is a palindrome date in the format \"MMDDYYYY\".\"\"\"\n    date_str = d.strftime(\"%m%d%Y\")\n    return date_str == date_str[::-1] and d.day <= 12 and d.month <= 12", "solution_func": "def g():\n    \"\"\"Find the next palindrome date in the format \"MMDDYYYY\".\"\"\"\n    current_date = datetime.date.today()\n    while True:\n        current_date += datetime.timedelta(days=1)\n        if f(current_date):\n            return current_date", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(word: str) -> bool:\n    \"\"\"Check if the given word can be formed by concatenating two valid English words together.\"\"\"\n    word = word.lower()\n    word_length = len(word)\n    word_set = set(word)\n    for i in range(1, word_length):\n        prefix = word[:i]\n        suffix = word[i:]\n        if prefix in word_set and suffix in word_set:\n            return True\n    return False\n\ndef g():\n    \"\"\"Find a word that can be formed by concatenating two valid English words together.\"\"\"\n    word_list = []\n    with open(\"english_words.txt\", \"r\") as file:\n        word_list = [line.strip() for line in file]\n    for word in word_list:\n        for perm in permutations(word_list, 2):\n            if ''.join(perm) == word:\n                return word\n\nassert f(g())\n", "emb": null, "idx_generation": 251, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(word: str) -> bool:\n    \"\"\"Check if the given word can be formed by concatenating two valid English words together.\"\"\"\n    word = word.lower()\n    word_length = len(word)\n    word_set = set(word)\n    for i in range(1, word_length):\n        prefix = word[:i]\n        suffix = word[i:]\n        if prefix in word_set and suffix in word_set:\n            return True\n    return False", "solution_func": "def g():\n    \"\"\"Find a word that can be formed by concatenating two valid English words together.\"\"\"\n    word_list = []\n    with open(\"english_words.txt\", \"r\") as file:\n        word_list = [line.strip() for line in file]\n    for word in word_list:\n        for perm in permutations(word_list, 2):\n            if ''.join(perm) == word:\n                return word", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square.\"\"\"\n    n = len(matrix)\n    magic_sum = n * (n**2 + 1) // 2\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diagonal_sum1 = sum(matrix[i][i] for i in range(n))\n    diagonal_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(sum == magic_sum for sum in row_sums + col_sums + [diagonal_sum1, diagonal_sum2])\n\ndef g():\n    \"\"\"Generate a magic square with odd dimension.\"\"\"\n    n = 3\n    magic_square = [[0] * n for _ in range(n)]\n    i, j = n // 2, n - 1\n    num = 1\n    while num <= n**2:\n        if i == -1 and j == n:\n            j = n - 2\n            i = 0\n        else:\n            if j == n:\n                j = 0\n            if i < 0:\n                i = n - 1\n        if magic_square[int(i)][int(j)]:\n            j = j - 2\n            i = i + 1\n            continue\n        else:\n            magic_square[int(i)][int(j)] = num\n            num = num + 1\n        j = j + 1\n        i = i - 1\n    return magic_square\n\nassert f(g())\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0], "idx_generation": 251, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square.\"\"\"\n    n = len(matrix)\n    magic_sum = n * (n**2 + 1) // 2\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diagonal_sum1 = sum(matrix[i][i] for i in range(n))\n    diagonal_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(sum == magic_sum for sum in row_sums + col_sums + [diagonal_sum1, diagonal_sum2])", "solution_func": "def g():\n    \"\"\"Generate a magic square with odd dimension.\"\"\"\n    n = 3\n    magic_square = [[0] * n for _ in range(n)]\n    i, j = n // 2, n - 1\n    num = 1\n    while num <= n**2:\n        if i == -1 and j == n:\n            j = n - 2\n            i = 0\n        else:\n            if j == n:\n                j = 0\n            if i < 0:\n                i = n - 1\n        if magic_square[int(i)][int(j)]:\n            j = j - 2\n            i = i + 1\n            continue\n        else:\n            magic_square[int(i)][int(j)] = num\n            num = num + 1\n        j = j + 1\n        i = i - 1\n    return magic_square", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(deck: List[str], hand: List[str], max_cards=5) -> bool:\n    \"\"\"\n    Check if the hand is a valid poker hand given the deck of cards and the maximum number of cards in a hand.\n    - deck is a list of available cards\n    - hand is a list of cards in the hand\n    - max_cards is the maximum number of cards in a hand\n    \"\"\"\n    if len(hand) > max_cards:\n        return False\n    for card in hand:\n        if card not in deck:\n            return False\n        deck.remove(card)\n    return True\n\ndef g(deck: List[str], max_cards=5):\n    hand = random.sample(deck, random.randint(1, max_cards))\n    return hand\n\ndeck = ['A', 'K', 'Q', 'J', '10', '9', '8', '7', '6', '5', '4', '3', '2']\nassert f(g(deck), deck)\n", "emb": null, "idx_generation": 251, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(deck: List[str], hand: List[str], max_cards=5) -> bool:\n    \"\"\"\n    Check if the hand is a valid poker hand given the deck of cards and the maximum number of cards in a hand.\n    - deck is a list of available cards\n    - hand is a list of cards in the hand\n    - max_cards is the maximum number of cards in a hand\n    \"\"\"\n    if len(hand) > max_cards:\n        return False\n    for card in hand:\n        if card not in deck:\n            return False\n        deck.remove(card)\n    return True", "solution_func": "def g(deck: List[str], max_cards=5):\n    hand = random.sample(deck, random.randint(1, max_cards))\n    return hand\n\ndeck = ['A', 'K', 'Q', 'J', '10', '9', '8', '7', '6', '5', '4', '3', '2']", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(a: float, b: float, c: float, x: float) -> bool:\n    \"\"\"\n    Check if the quadratic equation ax^2 + bx + c = 0 has a real root for a given values of a, b, c, and x.\n    \"\"\"\n    return (b**2 - 4*a*c) >= 0 and math.sqrt(b**2 - 4*a*c) >= x\n\ndef g(a=1, b=2, c=1, x=0):\n    return a, b, c, x\n\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 251, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(a: float, b: float, c: float, x: float) -> bool:\n    \"\"\"\n    Check if the quadratic equation ax^2 + bx + c = 0 has a real root for a given values of a, b, c, and x.\n    \"\"\"\n    return (b**2 - 4*a*c) >= 0 and math.sqrt(b**2 - 4*a*c) >= x", "solution_func": "def g(a=1, b=2, c=1, x=0):\n    return a, b, c, x", "map_ix": [0, 0, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\nimport itertools\n\ndef f(s: str, n: int, min_length=3) -> bool:\n    \"\"\"\n    Check if there exists a substring of length n in s that contains at least min_length consecutive vowels.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(s) - n + 1):\n        substring = s[i:i+n]\n        count = 0\n        for char in substring:\n            if char in vowels:\n                count += 1\n                if count >= min_length:\n                    return True\n            else:\n                count = 0\n    return False\n\ndef g(s='puzzler', n=3, min_length=3):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    substrings = [''.join(combo) for combo in itertools.combinations_with_replacement(vowels, n)]\n    return s + random.choice(substrings)\n\nassert f(g())\n", "emb": null, "idx_generation": 251, "target_skills": null, "problem_func": "import random\nfrom typing import*\nimport itertools\n\ndef f(s: str, n: int, min_length=3) -> bool:\n    \"\"\"\n    Check if there exists a substring of length n in s that contains at least min_length consecutive vowels.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(s) - n + 1):\n        substring = s[i:i+n]\n        count = 0\n        for char in substring:\n            if char in vowels:\n                count += 1\n                if count >= min_length:\n                    return True\n            else:\n                count = 0\n    return False", "solution_func": "def g(s='puzzler', n=3, min_length=3):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    substrings = [''.join(combo) for combo in itertools.combinations_with_replacement(vowels, n)]\n    return s + random.choice(substrings)", "map_ix": null}, {"fitness": 1.0, "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, x=100) -> bool:\n    \"\"\"Check if n is a perfect square and is divisible by x\"\"\"\n    return n == int(sqrt(n))**2 and n % x == 0\n\ndef g(x=100):\n    return x**2\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 251, "target_skills": null, "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, x=100) -> bool:\n    \"\"\"Check if n is a perfect square and is divisible by x\"\"\"\n    return n == int(sqrt(n))**2 and n % x == 0", "solution_func": "def g(x=100):\n    return x**2", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(num: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) -> bool:\n    \"\"\"\n    Check if a number is prime.\n    \"\"\"\n    if num < 2:\n        return False\n    for prime in primes:\n        if prime * prime > num:\n            break\n        if num % prime == 0:\n            return False\n    return True\n\ndef g():\n    num = 53\n    return num\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 252, "target_skills": null, "problem_func": "from typing import*\ndef f(num: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) -> bool:\n    \"\"\"\n    Check if a number is prime.\n    \"\"\"\n    if num < 2:\n        return False\n    for prime in primes:\n        if prime * prime > num:\n            break\n        if num % prime == 0:\n            return False\n    return True", "solution_func": "def g():\n    num = 53\n    return num", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import math\nfrom typing import*\nfrom math import gcd\n\ndef f(n: int, m: int, q: int, l: int, r: int, b=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) -> bool:\n    \"\"\"\n    Given an array of integers a and integers l and r, find the sum of all integers in a in the range [l, r]\n    that are divisible by at least one integer in b.\n\n    Sample Input:\n    a = [3, 15, 7, 21, 18]\n    b = [2, 3, 5, 7]\n    l = 0\n    r = 4\n\n    Sample Output:\n    45\n    \"\"\"\n    count = 0\n    for i in range(l, r+1):\n        for prime in b:\n            if n % prime == 0 or m % prime == 0 or q % prime == 0:\n                count += i\n                break\n    return count\n\ndef g(n=15, m=21, q=18, l=0, r=4, b=[2, 3, 5, 7]):\n    return n, m, q, l, r, b\n\nassert f(*g())", "emb": null, "idx_generation": 252, "target_skills": null, "problem_func": "import math\nfrom typing import*\nfrom math import gcd\n\ndef f(n: int, m: int, q: int, l: int, r: int, b=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) -> bool:\n    \"\"\"\n    Given an array of integers a and integers l and r, find the sum of all integers in a in the range [l, r]\n    that are divisible by at least one integer in b.\n\n    Sample Input:\n    a = [3, 15, 7, 21, 18]\n    b = [2, 3, 5, 7]\n    l = 0\n    r = 4\n\n    Sample Output:\n    45\n    \"\"\"\n    count = 0\n    for i in range(l, r+1):\n        for prime in b:\n            if n % prime == 0 or m % prime == 0 or q % prime == 0:\n                count += i\n                break\n    return count", "solution_func": "def g(n=15, m=21, q=18, l=0, r=4, b=[2, 3, 5, 7]):\n    return n, m, q, l, r, b", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=50) -> bool:\n    \"\"\"Check if there is a row where all elements are divisible by the target number\"\"\"\n    return any(all((num % target == 0 for num in row)) for row in matrix)\ndef g(matrix = [[10, 20, 30], [15, 25, 35], [40, 50, 60]]):\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 252, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=50) -> bool:\n    \"\"\"Check if there is a row where all elements are divisible by the target number\"\"\"\n    return any(all((num % target == 0 for num in row)) for row in matrix)", "solution_func": "def g(matrix = [[10, 20, 30], [15, 25, 35], [40, 50, 60]]):\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(points: List[Tuple[int, int]], origin=(0, 0)) -> bool:\n    \"\"\"Check if all points are located in the first quadrant (positive x and y values)\"\"\"\n    return all((x > origin[0] and y > origin[1] for x, y in points))\ndef g():\n    return [(1, 2), (3, 4), (5, 6)]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 252, "target_skills": null, "problem_func": "from typing import*\ndef f(points: List[Tuple[int, int]], origin=(0, 0)) -> bool:\n    \"\"\"Check if all points are located in the first quadrant (positive x and y values)\"\"\"\n    return all((x > origin[0] and y > origin[1] for x, y in points))", "solution_func": "def g():\n    return [(1, 2), (3, 4), (5, 6)]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there are three numbers in the list that add up to the target number\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target) for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\ndef g(nums = [10, 20, 30, 40, 50]):\n    return nums\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 252, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there are three numbers in the list that add up to the target number\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target) for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))", "solution_func": "def g(nums = [10, 20, 30, 40, 50]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[List[int]], target=100) -> bool:\n    \"\"\"\n    Given a list of integers, find a combination of numbers that sum up to the target.\n    Return True if such a combination exists, False otherwise.\n    \"\"\"\n    def backtrack(nums, target, curr_sum, start):\n        if curr_sum == target:\n            return True\n        if curr_sum > target:\n            return False\n        for i in range(start, len(nums)):\n            if backtrack(nums, target, curr_sum + nums[i], i + 1):\n                return True\n        return False\n    \n    return backtrack(nums, target, 0, 0)\n\ndef g(nums=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=100):\n    \"\"\"\n    Generate all possible combinations of numbers from the given list.\n    \"\"\"\n    def generate_combinations(nums, curr_comb, start, result):\n        result.append(curr_comb)\n        for i in range(start, len(nums)):\n            generate_combinations(nums, curr_comb + [nums[i]], i + 1, result)\n    \n    combinations = []\n    generate_combinations(nums, [], 0, combinations)\n    return combinations\n\nassert f(g())\n", "emb": null, "idx_generation": 252, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[List[int]], target=100) -> bool:\n    \"\"\"\n    Given a list of integers, find a combination of numbers that sum up to the target.\n    Return True if such a combination exists, False otherwise.\n    \"\"\"\n    def backtrack(nums, target, curr_sum, start):\n        if curr_sum == target:\n            return True\n        if curr_sum > target:\n            return False\n        for i in range(start, len(nums)):\n            if backtrack(nums, target, curr_sum + nums[i], i + 1):\n                return True\n        return False\n    \n    return backtrack(nums, target, 0, 0)", "solution_func": "def g(nums=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=100):\n    \"\"\"\n    Generate all possible combinations of numbers from the given list.\n    \"\"\"\n    def generate_combinations(nums, curr_comb, start, result):\n        result.append(curr_comb)\n        for i in range(start, len(nums)):\n            generate_combinations(nums, curr_comb + [nums[i]], i + 1, result)\n    \n    combinations = []\n    generate_combinations(nums, [], 0, combinations)\n    return combinations", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"\n    Given an array of integers, find two numbers that sum up to the target.\n    Return True if such a pair exists, False otherwise.\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=10):\n    \"\"\"\n    Generate all possible pairs of numbers from the given array.\n    \"\"\"\n    pairs = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            pairs.append([arr[i], arr[j]])\n    return pairs\n\nassert f(g())\n", "emb": null, "idx_generation": 252, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"\n    Given an array of integers, find two numbers that sum up to the target.\n    Return True if such a pair exists, False otherwise.\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=10):\n    \"\"\"\n    Generate all possible pairs of numbers from the given array.\n    \"\"\"\n    pairs = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            pairs.append([arr[i], arr[j]])\n    return pairs", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(words: List[str], word: str) -> bool:\n    \"\"\"\n    Given a list of words, check if the given word is an anagram of any word in the list.\n    Return True if an anagram is found, False otherwise.\n    \"\"\"\n    def is_anagram(w1, w2):\n        return sorted(w1) == sorted(w2)\n    \n    for w in words:\n        if is_anagram(w, word):\n            return True\n    return False\n\ndef g(words=[\"cat\", \"dog\", \"tac\", \"god\"], word=\"act\"):\n    \"\"\"\n    Generate all possible permutations of the given word.\n    \"\"\"\n    def generate_permutations(word, curr_perm, used, result):\n        if len(curr_perm) == len(word):\n            result.append(curr_perm)\n            return\n        for i in range(len(word)):\n            if used[i]:\n                continue\n            used[i] = True\n            generate_permutations(word, curr_perm + word[i], used, result)\n            used[i] = False\n    \n    permutations = []\n    used = [False] * len(word)\n    generate_permutations(word, \"\", used, permutations)\n    return permutations\n\nassert f(g())\n", "emb": null, "idx_generation": 252, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], word: str) -> bool:\n    \"\"\"\n    Given a list of words, check if the given word is an anagram of any word in the list.\n    Return True if an anagram is found, False otherwise.\n    \"\"\"\n    def is_anagram(w1, w2):\n        return sorted(w1) == sorted(w2)\n    \n    for w in words:\n        if is_anagram(w, word):\n            return True\n    return False", "solution_func": "def g(words=[\"cat\", \"dog\", \"tac\", \"god\"], word=\"act\"):\n    \"\"\"\n    Generate all possible permutations of the given word.\n    \"\"\"\n    def generate_permutations(word, curr_perm, used, result):\n        if len(curr_perm) == len(word):\n            result.append(curr_perm)\n            return\n        for i in range(len(word)):\n            if used[i]:\n                continue\n            used[i] = True\n            generate_permutations(word, curr_perm + word[i], used, result)\n            used[i] = False\n    \n    permutations = []\n    used = [False] * len(word)\n    generate_permutations(word, \"\", used, permutations)\n    return permutations", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: int, a=5, b=10) -> bool:\n    \"\"\"Check if the absolute difference of x and a is equal to b\"\"\"\n    return abs(x - a) == b\ndef g(a=5, b=10):\n    return a + b\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 252, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, a=5, b=10) -> bool:\n    \"\"\"Check if the absolute difference of x and a is equal to b\"\"\"\n    return abs(x - a) == b", "solution_func": "def g(a=5, b=10):\n    return a + b", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, a=\"hello\") -> bool:\n    \"\"\"Check if the string s is a palindrome\"\"\"\n    return s == s[::-1]\ndef g(a=\"hello\"):\n    return a[::-1]\nassert f(g())\n", "emb": null, "idx_generation": 252, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, a=\"hello\") -> bool:\n    \"\"\"Check if the string s is a palindrome\"\"\"\n    return s == s[::-1]", "solution_func": "def g(a=\"hello\"):\n    return a[::-1]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target value, determine if the target value exists in the matrix.\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(matrix: List[List[int]], target: int):\n    return target\nassert f(g())\n", "emb": null, "idx_generation": 253, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target value, determine if the target value exists in the matrix.\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(matrix: List[List[int]], target: int):\n    return target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, determine if there are two numbers in the list that add up to the target.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums: List[int], target: int):\n    return target\nassert f(g())\n", "emb": null, "idx_generation": 253, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, determine if there are two numbers in the list that add up to the target.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums: List[int], target: int):\n    return target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"\n    Given two strings s and t, determine if t is an anagram of s.\n    \"\"\"\n    return sorted(s) == sorted(t)\ndef g(s: str, t: str):\n    return t\nassert f(g())\n", "emb": null, "idx_generation": 253, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"\n    Given two strings s and t, determine if t is an anagram of s.\n    \"\"\"\n    return sorted(s) == sorted(t)", "solution_func": "def g(s: str, t: str):\n    return t", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, k=3, substring='abc') -> bool:\n    \"\"\"Check if a given string contains a specific substring k times.\"\"\"\n    return s.count(substring) >= k\ndef g(k=3, substring='abc'):\n    return substring * k\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 253, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, k=3, substring='abc') -> bool:\n    \"\"\"Check if a given string contains a specific substring k times.\"\"\"\n    return s.count(substring) >= k", "solution_func": "def g(k=3, substring='abc'):\n    return substring * k", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=5, b=10) -> bool:\n    \"\"\"Check if a number n is a prime number between a and b (inclusive).\"\"\"\n    return (a <= n <= b) and all(n % i != 0 for i in range(2, int(math.sqrt(n)) + 1))\ndef g(a=5, b=10):\n    for n in range(a, b + 1):\n        if all(n % i != 0 for i in range(2, int(math.sqrt(n)) + 1)):\n            return n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 253, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, a=5, b=10) -> bool:\n    \"\"\"Check if a number n is a prime number between a and b (inclusive).\"\"\"\n    return (a <= n <= b) and all(n % i != 0 for i in range(2, int(math.sqrt(n)) + 1))", "solution_func": "def g(a=5, b=10):\n    for n in range(a, b + 1):\n        if all(n % i != 0 for i in range(2, int(math.sqrt(n)) + 1)):\n            return n", "map_ix": [1, 1, 0, 1, 0, 0, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\n\ndef f(lst: List[int], n=5) -> bool:\n    \"\"\"Check if a list contains a specific number n.\"\"\"\n    return n in lst\ndef g(n=5):\n    lst = random.sample(range(10), 10)\n    return lst\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 253, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(lst: List[int], n=5) -> bool:\n    \"\"\"Check if a list contains a specific number n.\"\"\"\n    return n in lst", "solution_func": "def g(n=5):\n    lst = random.sample(range(10), 10)\n    return lst", "map_ix": [1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import math\nfrom typing import*\nfrom math import gcd\n\ndef f(n: int, a=4, b=6, c=8) -> bool:\n    \"\"\"Check if n is a common multiple of a, b, and c.\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0\ndef g(a = 4, b = 6, c = 8):\n    lcm = abs(a*b*c) // gcd(gcd(a, b), c)\n    return lcm\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 253, "target_skills": null, "problem_func": "import math\nfrom typing import*\nfrom math import gcd\n\ndef f(n: int, a=4, b=6, c=8) -> bool:\n    \"\"\"Check if n is a common multiple of a, b, and c.\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0", "solution_func": "def g(a = 4, b = 6, c = 8):\n    lcm = abs(a*b*c) // gcd(gcd(a, b), c)\n    return lcm", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if the list is sorted in non-descending order.\"\"\"\n    return lst == sorted(lst)\ndef g():\n    lst = [5, 2, 9, 1, 7]\n    return sorted(lst)\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 253, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if the list is sorted in non-descending order.\"\"\"\n    return lst == sorted(lst)", "solution_func": "def g():\n    lst = [5, 2, 9, 1, 7]\n    return sorted(lst)", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, a=3, b=4, c=5) -> bool:\n    \"\"\"Check if n is a perfect square.\"\"\"\n    return n ** 0.5 == int(n ** 0.5)\ndef g(a = 3, b = 4, c = 5):\n    return a**2 + b**2 + c**2\nassert f(g())\n", "emb": null, "idx_generation": 253, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=3, b=4, c=5) -> bool:\n    \"\"\"Check if n is a perfect square.\"\"\"\n    return n ** 0.5 == int(n ** 0.5)", "solution_func": "def g(a = 3, b = 4, c = 5):\n    return a**2 + b**2 + c**2", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"\n    Check if the sum of each row in a matrix is equal to a given target value\n    \"\"\"\n    for row in matrix:\n        if sum(row) != target:\n            return False\n    return True\ndef g(target=5):\n    return [[1, 1, 3], [2, 2, 1], [0, 3, 2]]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 253, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"\n    Check if the sum of each row in a matrix is equal to a given target value\n    \"\"\"\n    for row in matrix:\n        if sum(row) != target:\n            return False\n    return True", "solution_func": "def g(target=5):\n    return [[1, 1, 3], [2, 2, 1], [0, 3, 2]]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, target=3) -> bool:\n    \"\"\"\n    Given a string, determine if it contains at least `target` number of vowels.\n\n    Sample Input:\n    `\"hello\"`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count >= target\ndef g(s = 'hello', target = 3):\n    return s[:target]\nassert f(g())\n", "emb": null, "idx_generation": 254, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target=3) -> bool:\n    \"\"\"\n    Given a string, determine if it contains at least `target` number of vowels.\n\n    Sample Input:\n    `\"hello\"`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count >= target", "solution_func": "def g(s = 'hello', target = 3):\n    return s[:target]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target=5) -> bool:\n    \"\"\"\n    Given a list of integers, determine if there exists a pair of numbers in the list whose sum is equal to `target`.\n\n    Sample Input:\n    `[1, 2, 3, 4, 5]`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(arr = [1, 2, 3, 4, 5], target = 5):\n    return arr\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 254, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=5) -> bool:\n    \"\"\"\n    Given a list of integers, determine if there exists a pair of numbers in the list whose sum is equal to `target`.\n\n    Sample Input:\n    `[1, 2, 3, 4, 5]`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(arr = [1, 2, 3, 4, 5], target = 5):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, target=4) -> bool:\n    \"\"\"\n    Given a string, determine if there exists a substring of length `target` that consists of only digits.\n\n    Sample Input:\n    `\"hello123world\"`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    for i in range(len(s) - target + 1):\n        if s[i:i+target].isdigit():\n            return True\n    return False\ndef g(s = 'hello123world', target = 4):\n    return s\nassert f(g())\n", "emb": null, "idx_generation": 254, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target=4) -> bool:\n    \"\"\"\n    Given a string, determine if there exists a substring of length `target` that consists of only digits.\n\n    Sample Input:\n    `\"hello123world\"`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    for i in range(len(s) - target + 1):\n        if s[i:i+target].isdigit():\n            return True\n    return False", "solution_func": "def g(s = 'hello123world', target = 4):\n    return s", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(seq: List[int], n=0, length=0) -> bool:\n    \"\"\"Check if seq is a palindrome\"\"\"\n    return seq == seq[::-1]\ndef g(n = 0, length = 0):\n    return [1, 2, 3, 4, 5, 4, 3, 2, 1]\nassert f(g())\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 254, "target_skills": null, "problem_func": "from typing import*\ndef f(seq: List[int], n=0, length=0) -> bool:\n    \"\"\"Check if seq is a palindrome\"\"\"\n    return seq == seq[::-1]", "solution_func": "def g(n = 0, length = 0):\n    return [1, 2, 3, 4, 5, 4, 3, 2, 1]", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, substring='abc', index=0) -> bool:\n    \"\"\"Check if substring is at the specified index in the string\"\"\"\n    return string[index:index+len(substring)] == substring\ndef g(substring = 'abc', index = 0):\n    return 'x' * index + substring + 'x' * (len(substring) - index)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 254, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, substring='abc', index=0) -> bool:\n    \"\"\"Check if substring is at the specified index in the string\"\"\"\n    return string[index:index+len(substring)] == substring", "solution_func": "def g(substring = 'abc', index = 0):\n    return 'x' * index + substring + 'x' * (len(substring) - index)", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(seq: List[int], n=0, length=0) -> bool:\n    \"\"\"Check if seq contains a subsequence of length 'length' that adds up to 'n'\"\"\"\n    for i in range(len(seq)-length+1):\n        if sum(seq[i:i+length]) == n:\n            return True\n    return False\ndef g(n = 0, length = 0):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 254, "target_skills": null, "problem_func": "from typing import*\ndef f(seq: List[int], n=0, length=0) -> bool:\n    \"\"\"Check if seq contains a subsequence of length 'length' that adds up to 'n'\"\"\"\n    for i in range(len(seq)-length+1):\n        if sum(seq[i:i+length]) == n:\n            return True\n    return False", "solution_func": "def g(n = 0, length = 0):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: list, target=5) -> bool:\n    \"\"\"Check if the target is present in the array\"\"\"\n    return target in arr\ndef g(target = 5):\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return arr\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 254, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: list, target=5) -> bool:\n    \"\"\"Check if the target is present in the array\"\"\"\n    return target in arr", "solution_func": "def g(target = 5):\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return arr", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s1: str, s2: str, char='a', count=2) -> bool:\n    \"\"\"Check if the count of 'char' in s1 and s2 is equal\"\"\"\n    return s1.count(char) == s2.count(char) == count\ndef g(char = 'a', count = 2):\n    s1 = 'banana'\n    s2 = 'apple'\n    return s1, s2\nassert f(*g())\n", "emb": null, "idx_generation": 254, "target_skills": null, "problem_func": "from typing import*\ndef f(s1: str, s2: str, char='a', count=2) -> bool:\n    \"\"\"Check if the count of 'char' in s1 and s2 is equal\"\"\"\n    return s1.count(char) == s2.count(char) == count", "solution_func": "def g(char = 'a', count = 2):\n    s1 = 'banana'\n    s2 = 'apple'\n    return s1, s2", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, m=5, k=2) -> bool:\n    \"\"\"Check if n is divisible by m and the result is greater than or equal to k\"\"\"\n    return n % m == 0 and n // m >= k\ndef g(m = 5, k = 2):\n    n = 10\n    return n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 254, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m=5, k=2) -> bool:\n    \"\"\"Check if n is divisible by m and the result is greater than or equal to k\"\"\"\n    return n % m == 0 and n // m >= k", "solution_func": "def g(m = 5, k = 2):\n    n = 10\n    return n", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, v=100, w=1000, x=10000, y=100000) -> bool:\n    \"\"\"Find the smallest n such that if v is tripled n times, w is doubled n times, x is halved n times, and y is quadrupled n times, v exceeds w, x exceeds y, and w exceeds x.\"\"\"\n    for i in range(n):\n        assert v <= w\n        assert x >= y\n        assert w >= x\n        v *= 3\n        w *= 2\n        x /= 2\n        y *= 4\n    return v > w and x > y and w > x\ndef g(v=100, w=1000, x=10000, y=100000):\n    i = 0\n    while v <= w or x <= y or w <= x:\n        v *= 3\n        w *= 2\n        x /= 2\n        y *= 4\n        i += 1\n    return i\nassert f(g())\n", "emb": null, "idx_generation": 254, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, v=100, w=1000, x=10000, y=100000) -> bool:\n    \"\"\"Find the smallest n such that if v is tripled n times, w is doubled n times, x is halved n times, and y is quadrupled n times, v exceeds w, x exceeds y, and w exceeds x.\"\"\"\n    for i in range(n):\n        assert v <= w\n        assert x >= y\n        assert w >= x\n        v *= 3\n        w *= 2\n        x /= 2\n        y *= 4\n    return v > w and x > y and w > x", "solution_func": "def g(v=100, w=1000, x=10000, y=100000):\n    i = 0\n    while v <= w or x <= y or w <= x:\n        v *= 3\n        w *= 2\n        x /= 2\n        y *= 4\n        i += 1\n    return i", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list that sum up to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target = 0):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n", "emb": null, "idx_generation": 255, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list that sum up to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g(target = 0):\n    return [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find if any row in the matrix has a sum equal to the target\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    return False\n\ndef g(target = 10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n", "emb": null, "idx_generation": 255, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find if any row in the matrix has a sum equal to the target\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    return False", "solution_func": "def g(target = 10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Check if the sum of the digits of n is divisible by m\"\"\"\n    digit_sum = sum(int(digit) for digit in str(n))\n    return digit_sum % m == 0\n\ndef g(m = 10):\n    return 123456\n\nassert f(g())\n", "emb": null, "idx_generation": 255, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Check if the sum of the digits of n is divisible by m\"\"\"\n    digit_sum = sum(int(digit) for digit in str(n))\n    return digit_sum % m == 0", "solution_func": "def g(m = 10):\n    return 123456", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums=[3, 5, 8, 2, 9, 4, 1]):\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 255, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(nums=[3, 5, 8, 2, 9, 4, 1]):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 255, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "solution_func": "def g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=12) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list that adds up to the target.\"\"\"\n    n = len(nums)\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums=[3, 5, 8, 2, 9, 4, 1]):\n    return nums\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 255, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=12) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list that adds up to the target.\"\"\"\n    n = len(nums)\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False", "solution_func": "def g(nums=[3, 5, 8, 2, 9, 4, 1]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a Fibonacci number.\"\"\"\n    a, b = 0, 1\n    while b < n:\n        a, b = b, a + b\n    return b == n\ndef g():\n    from random import randint\n    return randint(1, 1000)\nassert f(g())\n", "emb": null, "idx_generation": 255, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a Fibonacci number.\"\"\"\n    a, b = 0, 1\n    while b < n:\n        a, b = b, a + b\n    return b == n", "solution_func": "def g():\n    from random import randint\n    return randint(1, 1000)", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if a list is sorted in non-decreasing order.\"\"\"\n    return all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1))\ndef g():\n    from random import randint\n    n = randint(1, 10)\n    return [randint(0, 100) for _ in range(n)]\nassert f(g())\n", "emb": null, "idx_generation": 255, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if a list is sorted in non-decreasing order.\"\"\"\n    return all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1))", "solution_func": "def g():\n    from random import randint\n    n = randint(1, 10)\n    return [randint(0, 100) for _ in range(n)]", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return s == s[::-1]\ndef g():\n    import string\n    from random import randint, choice\n    n = randint(1, 10)\n    return ''.join(choice(string.ascii_lowercase) for _ in range(n))\nassert f(g())\n", "emb": null, "idx_generation": 255, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return s == s[::-1]", "solution_func": "def g():\n    import string\n    from random import randint, choice\n    n = randint(1, 10)\n    return ''.join(choice(string.ascii_lowercase) for _ in range(n))", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=12, num_combinations=3) -> bool:\n    \"\"\"\n    Combination Sum\n\n    Given a list of numbers and a target, find if there exists a combination of numbers in the list that add up to the target.\n    Each number in the list can be used multiple times.\n\n    Example:\n    nums = [2, 3, 5]\n    target = 8\n    output: True (since 2+2+2+2 = 8)\n    \"\"\"\n    def backtrack(remain, current_combination, start):\n        if remain == 0:\n            return True\n        elif remain < 0:\n            return False\n        else:\n            for i in range(start, len(nums)):\n                current_combination.append(nums[i])\n                if backtrack(remain - nums[i], current_combination, i):\n                    return True\n                current_combination.pop()\n            return False\n\n    nums.sort()\n    return backtrack(target, [], 0) and len(nums) >= num_combinations\ndef g(target=12, num_combinations=3):\n    nums = [2, 3, 5]\n    return nums\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 255, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=12, num_combinations=3) -> bool:\n    \"\"\"\n    Combination Sum\n\n    Given a list of numbers and a target, find if there exists a combination of numbers in the list that add up to the target.\n    Each number in the list can be used multiple times.\n\n    Example:\n    nums = [2, 3, 5]\n    target = 8\n    output: True (since 2+2+2+2 = 8)\n    \"\"\"\n    def backtrack(remain, current_combination, start):\n        if remain == 0:\n            return True\n        elif remain < 0:\n            return False\n        else:\n            for i in range(start, len(nums)):\n                current_combination.append(nums[i])\n                if backtrack(remain - nums[i], current_combination, i):\n                    return True\n                current_combination.pop()\n            return False\n\n    nums.sort()\n    return backtrack(target, [], 0) and len(nums) >= num_combinations", "solution_func": "def g(target=12, num_combinations=3):\n    nums = [2, 3, 5]\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(n: int, m: int, s: int) -> bool:\n    \"\"\"\n    Given three positive integers n, m, and s, find if there exists a right triangle with side lengths n, m, and s.\n\n    Sample Input:\n    n = 3\n    m = 4\n    s = 5\n\n    Sample Output:\n    True\n    \"\"\"\n    return math.sqrt(n**2 + m**2) == s\n\ndef g(n = 3, m = 4, s = 5):\n    return n, m, s\n\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 256, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, m: int, s: int) -> bool:\n    \"\"\"\n    Given three positive integers n, m, and s, find if there exists a right triangle with side lengths n, m, and s.\n\n    Sample Input:\n    n = 3\n    m = 4\n    s = 5\n\n    Sample Output:\n    True\n    \"\"\"\n    return math.sqrt(n**2 + m**2) == s", "solution_func": "def g(n = 3, m = 4, s = 5):\n    return n, m, s", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find if there exists a pair of numbers in the list that adds up to the target number.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 7\n\n    Sample Output:\n    True\n    \"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\n\ndef g(nums = [1, 2, 3, 4, 5], target = 7):\n    random.shuffle(nums)\n    return nums, target\n\nassert f(*g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 256, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find if there exists a pair of numbers in the list that adds up to the target number.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 7\n\n    Sample Output:\n    True\n    \"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))", "solution_func": "def g(nums = [1, 2, 3, 4, 5], target = 7):\n    random.shuffle(nums)\n    return nums, target", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string, find if it is a palindrome.\n\n    Sample Input:\n    s = \"racecar\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return s == s[::-1]\n\ndef g(s = \"racecar\"):\n    return s\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 256, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string, find if it is a palindrome.\n\n    Sample Input:\n    s = \"racecar\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return s == s[::-1]", "solution_func": "def g(s = \"racecar\"):\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(n: int, lst: List[int], target_sum: int) -> bool:\n    \"\"\"Check if there exists a subset of size n in the list whose sum is equal to the target_sum\"\"\"\n    from itertools import combinations\n    return any((sum(subset) == target_sum for subset in combinations(lst, n)))\ndef g(n=3, lst=[1, 2, 3, 4, 5, 6], target_sum=9):\n    return lst\nassert f(g())\n", "emb": null, "idx_generation": 256, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(n: int, lst: List[int], target_sum: int) -> bool:\n    \"\"\"Check if there exists a subset of size n in the list whose sum is equal to the target_sum\"\"\"\n    from itertools import combinations\n    return any((sum(subset) == target_sum for subset in combinations(lst, n)))", "solution_func": "def g(n=3, lst=[1, 2, 3, 4, 5, 6], target_sum=9):\n    return lst", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(n: int, lst: List[int], target_sum: int) -> bool:\n    \"\"\"Check if there exists a subset of size n in the list whose sum is equal to the target_sum\"\"\"\n    from itertools import combinations\n    return any((sum(subset) == target_sum for subset in combinations(lst, n)))\ndef g(n=4, lst=[10, 20, 30, 40, 50], target_sum=100):\n    return lst\nassert f(g())\n", "emb": null, "idx_generation": 256, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(n: int, lst: List[int], target_sum: int) -> bool:\n    \"\"\"Check if there exists a subset of size n in the list whose sum is equal to the target_sum\"\"\"\n    from itertools import combinations\n    return any((sum(subset) == target_sum for subset in combinations(lst, n)))", "solution_func": "def g(n=4, lst=[10, 20, 30, 40, 50], target_sum=100):\n    return lst", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(n: int, lst: List[int], target_sum: int) -> bool:\n    \"\"\"Check if there exists a subset of size n in the list whose sum is equal to the target_sum\"\"\"\n    from itertools import combinations\n    return any((sum(subset) == target_sum for subset in combinations(lst, n)))\ndef g(n=2, lst=[5, 7, 8, 10, 12], target_sum=15):\n    return lst\nassert f(g())\n", "emb": null, "idx_generation": 256, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(n: int, lst: List[int], target_sum: int) -> bool:\n    \"\"\"Check if there exists a subset of size n in the list whose sum is equal to the target_sum\"\"\"\n    from itertools import combinations\n    return any((sum(subset) == target_sum for subset in combinations(lst, n)))", "solution_func": "def g(n=2, lst=[5, 7, 8, 10, 12], target_sum=15):\n    return lst", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the given number n is in the list lst\"\"\"\n    return n in lst\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return lst[0]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 256, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the given number n is in the list lst\"\"\"\n    return n in lst", "solution_func": "def g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return lst[0]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, t: str, sub='happy') -> bool:\n    \"\"\"\n    Given two strings s and t, check if the substring 'happy' exists in either of the strings.\n    \"\"\"\n    return sub in s or sub in t\ndef g(s='I am happy', t='She is not happy'):\n    return s\nassert f(g())\n", "emb": null, "idx_generation": 256, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, t: str, sub='happy') -> bool:\n    \"\"\"\n    Given two strings s and t, check if the substring 'happy' exists in either of the strings.\n    \"\"\"\n    return sub in s or sub in t", "solution_func": "def g(s='I am happy', t='She is not happy'):\n    return s", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(lst: list, n=5) -> bool:\n    \"\"\"\n    Given a list of numbers lst, check if the sum of any two numbers in the list is equal to n.\n    \"\"\"\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] + lst[j] == n:\n                return True\n    return False\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return lst\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 256, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: list, n=5) -> bool:\n    \"\"\"\n    Given a list of numbers lst, check if the sum of any two numbers in the list is equal to n.\n    \"\"\"\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] + lst[j] == n:\n                return True\n    return False", "solution_func": "def g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return lst", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(word: str, n=7, m=8) -> bool:\n    \"\"\"Determine if a word has exactly n consonants and m vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']\n    count_vowels = sum([1 for letter in word if letter.lower() in vowels])\n    count_consonants = sum([1 for letter in word if letter.lower() in consonants])\n    return count_vowels == m and count_consonants == n\n\ndef g(n=7, m=8):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']\n    word = \"\"\n    for _ in range(n):\n        word += consonants[_ % len(consonants)]\n    for _ in range(m):\n        word += vowels[_ % len(vowels)]\n    return word\n\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 256, "target_skills": null, "problem_func": "from typing import*\ndef f(word: str, n=7, m=8) -> bool:\n    \"\"\"Determine if a word has exactly n consonants and m vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']\n    count_vowels = sum([1 for letter in word if letter.lower() in vowels])\n    count_consonants = sum([1 for letter in word if letter.lower() in consonants])\n    return count_vowels == m and count_consonants == n", "solution_func": "def g(n=7, m=8):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']\n    word = \"\"\n    for _ in range(n):\n        word += consonants[_ % len(consonants)]\n    for _ in range(m):\n        word += vowels[_ % len(vowels)]\n    return word", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if the given list contains n as a duplicate element.\"\"\"\n    return lst.count(n) > 1\ndef g(lst: List[int]):\n    return next(n for n in lst if lst.count(n) > 1)\nassert f(g())\n", "emb": null, "idx_generation": 257, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if the given list contains n as a duplicate element.\"\"\"\n    return lst.count(n) > 1", "solution_func": "def g(lst: List[int]):\n    return next(n for n in lst if lst.count(n) > 1)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, substring: str) -> bool:\n    \"\"\"Check if the given string contains the substring.\"\"\"\n    return substring in s\ndef g(s: str, substring: str):\n    return s.index(substring)\nassert f(g())\n", "emb": null, "idx_generation": 257, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substring: str) -> bool:\n    \"\"\"Check if the given string contains the substring.\"\"\"\n    return substring in s", "solution_func": "def g(s: str, substring: str):\n    return s.index(substring)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(lst: List[int], target: int, k: int) -> bool:\n    \"\"\"Find the k closest elements to the target in the given list.\"\"\"\n    lst.sort(key=lambda x: abs(x - target))\n    return lst[:k]\ndef g(lst: List[int], target: int, k: int):\n    return sorted(lst, key=lambda x: abs(x - target))[:k]\nassert f(g())\n", "emb": null, "idx_generation": 257, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int], target: int, k: int) -> bool:\n    \"\"\"Find the k closest elements to the target in the given list.\"\"\"\n    lst.sort(key=lambda x: abs(x - target))\n    return lst[:k]", "solution_func": "def g(lst: List[int], target: int, k: int):\n    return sorted(lst, key=lambda x: abs(x - target))[:k]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, k: int, target: str = 'abc') -> bool:\n    \"\"\"Given a string s and an integer k, determine if it is possible to construct the target string by\n    concatenating k copies of s.\n\n    Sample Input:\n    s = 'abc'\n    k = 3\n    target = 'abcabcabc'\n\n    Sample Output:\n    True\n    \"\"\"\n    return s * k == target\ndef g(s = 'abc', k = 3, target = 'abcabcabc'):\n    return s, k, target\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 257, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, k: int, target: str = 'abc') -> bool:\n    \"\"\"Given a string s and an integer k, determine if it is possible to construct the target string by\n    concatenating k copies of s.\n\n    Sample Input:\n    s = 'abc'\n    k = 3\n    target = 'abcabcabc'\n\n    Sample Output:\n    True\n    \"\"\"\n    return s * k == target", "solution_func": "def g(s = 'abc', k = 3, target = 'abcabcabc'):\n    return s, k, target", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], n: int) -> bool:\n    \"\"\"Given a list of integers and an integer n, determine if it is possible to find three distinct indices i, j, k\n    such that arr[i] + arr[j] + arr[k] = n.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n    n = 12\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            for k in range(j + 1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == n:\n                    return True\n    return False\ndef g(arr = [1, 2, 3, 4, 5], n = 12):\n    return arr, n\nassert f(*g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 257, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], n: int) -> bool:\n    \"\"\"Given a list of integers and an integer n, determine if it is possible to find three distinct indices i, j, k\n    such that arr[i] + arr[j] + arr[k] = n.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n    n = 12\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            for k in range(j + 1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == n:\n                    return True\n    return False", "solution_func": "def g(arr = [1, 2, 3, 4, 5], n = 12):\n    return arr, n", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Given a matrix of integers and a target integer, determine if the target is present in the matrix.\n\n    Sample Input:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    target = 5\n\n    Sample Output:\n    True\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target = 5):\n    return matrix, target\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 257, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Given a matrix of integers and a target integer, determine if the target is present in the matrix.\n\n    Sample Input:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    target = 5\n\n    Sample Output:\n    True\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target = 5):\n    return matrix, target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=27, k=3) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a combination of k numbers that sums up to the target.\n    \"\"\"\n    def backtrack(start, curr_sum, curr_comb):\n        if len(curr_comb) == k:\n            return curr_sum == target\n        for i in range(start, len(nums)):\n            if curr_sum + nums[i] <= target:\n                curr_comb.append(nums[i])\n                if backtrack(i + 1, curr_sum + nums[i], curr_comb):\n                    return True\n                curr_comb.pop()\n        return False\n    \n    return backtrack(0, 0, [])\n    \ndef g(nums=[4, 10, 6, 9, 2, 7, 5, 8]):\n    from itertools import combinations\n    for k in range(1, len(nums) + 1):\n        for comb in combinations(nums, k):\n            if sum(comb) == target:\n                return list(comb)\n    return []\n    \nassert f(g())\n", "emb": null, "idx_generation": 257, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=27, k=3) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a combination of k numbers that sums up to the target.\n    \"\"\"\n    def backtrack(start, curr_sum, curr_comb):\n        if len(curr_comb) == k:\n            return curr_sum == target\n        for i in range(start, len(nums)):\n            if curr_sum + nums[i] <= target:\n                curr_comb.append(nums[i])\n                if backtrack(i + 1, curr_sum + nums[i], curr_comb):\n                    return True\n                curr_comb.pop()\n        return False\n    \n    return backtrack(0, 0, [])", "solution_func": "def g(nums=[4, 10, 6, 9, 2, 7, 5, 8]):\n    from itertools import combinations\n    for k in range(1, len(nums) + 1):\n        for comb in combinations(nums, k):\n            if sum(comb) == target:\n                return list(comb)\n    return []", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(board: List[List[int]]) -> bool:\n    \"\"\"\n    Given a sudoku board represented by a 2D list, determine if it is a valid board configuration.\n    \"\"\"\n    def is_valid_row(board, row):\n        nums = set()\n        for col in range(9):\n            if board[row][col] != 0 and board[row][col] in nums:\n                return False\n            nums.add(board[row][col])\n        return True\n    \n    def is_valid_col(board, col):\n        nums = set()\n        for row in range(9):\n            if board[row][col] != 0 and board[row][col] in nums:\n                return False\n            nums.add(board[row][col])\n        return True\n    \n    def is_valid_subgrid(board, start_row, start_col):\n        nums = set()\n        for row in range(3):\n            for col in range(3):\n                curr_num = board[start_row + row][start_col + col]\n                if curr_num != 0 and curr_num in nums:\n                    return False\n                nums.add(curr_num)\n        return True\n    \n    for row in range(9):\n        if not is_valid_row(board, row):\n            return False\n    \n    for col in range(9):\n        if not is_valid_col(board, col):\n            return False\n    \n    for start_row in range(0, 9, 3):\n        for start_col in range(0, 9, 3):\n            if not is_valid_subgrid(board, start_row, start_col):\n                return False\n    \n    return True\n    \ndef g(board=[[5, 3, 0, 0, 7, 0, 0, 0, 0],\n             [6, 0, 0, 1, 9, 5, 0, 0, 0],\n             [0, 9, 8, 0, 0, 0, 0, 6, 0],\n             [8, 0, 0, 0, 6, 0, 0, 0, 3],\n             [4, 0, 0, 8, 0, 3, 0, 0, 1],\n             [7, 0, 0, 0, 2, 0, 0, 0, 6],\n             [0, 6, 0, 0, 0, 0, 2, 8, 0],\n             [0, 0, 0, 4, 1, 9, 0, 0, 5],\n             [0, 0, 0, 0, 8, 0, 0, 7, 9]]):\n    return board\n    \nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 257, "target_skills": null, "problem_func": "from typing import*\ndef f(board: List[List[int]]) -> bool:\n    \"\"\"\n    Given a sudoku board represented by a 2D list, determine if it is a valid board configuration.\n    \"\"\"\n    def is_valid_row(board, row):\n        nums = set()\n        for col in range(9):\n            if board[row][col] != 0 and board[row][col] in nums:\n                return False\n            nums.add(board[row][col])\n        return True\n    \n    def is_valid_col(board, col):\n        nums = set()\n        for row in range(9):\n            if board[row][col] != 0 and board[row][col] in nums:\n                return False\n            nums.add(board[row][col])\n        return True\n    \n    def is_valid_subgrid(board, start_row, start_col):\n        nums = set()\n        for row in range(3):\n            for col in range(3):\n                curr_num = board[start_row + row][start_col + col]\n                if curr_num != 0 and curr_num in nums:\n                    return False\n                nums.add(curr_num)\n        return True\n    \n    for row in range(9):\n        if not is_valid_row(board, row):\n            return False\n    \n    for col in range(9):\n        if not is_valid_col(board, col):\n            return False\n    \n    for start_row in range(0, 9, 3):\n        for start_col in range(0, 9, 3):\n            if not is_valid_subgrid(board, start_row, start_col):\n                return False\n    \n    return True", "solution_func": "def g(board=[[5, 3, 0, 0, 7, 0, 0, 0, 0],\n             [6, 0, 0, 1, 9, 5, 0, 0, 0],\n             [0, 9, 8, 0, 0, 0, 0, 6, 0],\n             [8, 0, 0, 0, 6, 0, 0, 0, 3],\n             [4, 0, 0, 8, 0, 3, 0, 0, 1],\n             [7, 0, 0, 0, 2, 0, 0, 0, 6],\n             [0, 6, 0, 0, 0, 0, 2, 8, 0],\n             [0, 0, 0, 4, 1, 9, 0, 0, 5],\n             [0, 0, 0, 0, 8, 0, 0, 7, 9]]):\n    return board", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=16) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a combination of numbers that adds up to the target.\n    Each number in the combination can be used multiple times.\n    \"\"\"\n    def backtrack(start, curr_sum):\n        if curr_sum == target:\n            return True\n        for i in range(start, len(nums)):\n            if curr_sum + nums[i] <= target:\n                if backtrack(i, curr_sum + nums[i]):\n                    return True\n        return False\n    \n    return backtrack(0, 0)\n    \ndef g(nums=[2, 3, 5, 7]):\n    from itertools import combinations_with_replacement\n    for k in range(1, len(nums) + 1):\n        for comb in combinations_with_replacement(nums, k):\n            if sum(comb) == target:\n                return list(comb)\n    return []\n    \nassert f(g())\n", "emb": null, "idx_generation": 257, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=16) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a combination of numbers that adds up to the target.\n    Each number in the combination can be used multiple times.\n    \"\"\"\n    def backtrack(start, curr_sum):\n        if curr_sum == target:\n            return True\n        for i in range(start, len(nums)):\n            if curr_sum + nums[i] <= target:\n                if backtrack(i, curr_sum + nums[i]):\n                    return True\n        return False\n    \n    return backtrack(0, 0)", "solution_func": "def g(nums=[2, 3, 5, 7]):\n    from itertools import combinations_with_replacement\n    for k in range(1, len(nums) + 1):\n        for comb in combinations_with_replacement(nums, k):\n            if sum(comb) == target:\n                return list(comb)\n    return []", "map_ix": null}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\ndef f(s: str, target='hello') -> bool:\n    \"\"\"Check if a string can be transformed into a target string by rearranging its characters.\"\"\"\n    return sorted(s) == sorted(target)\ndef g(target = 'hello'):\n    import random\n    return ''.join(random.sample(target, len(target)))\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 257, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(s: str, target='hello') -> bool:\n    \"\"\"Check if a string can be transformed into a target string by rearranging its characters.\"\"\"\n    return sorted(s) == sorted(target)", "solution_func": "def g(target = 'hello'):\n    import random\n    return ''.join(random.sample(target, len(target)))", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int, start=0, end=0) -> bool:\n    \"\"\"\n    Check if there is a subarray in 'numbers' that sums up to 'target'\n    within the range of indices [start, end).\n    \"\"\"\n    current_sum = 0\n    for i in range(start, end):\n        current_sum += numbers[i]\n        if current_sum == target:\n            return True\n        elif current_sum > target:\n            current_sum -= numbers[start]\n            start += 1\n    return False\n\ndef g(numbers: List[int], target: int):\n    return numbers.index(target)\n\nnumbers = [1, 2, 3, 4, 5]\ntarget = 9\nassert f(g(numbers, target), target, 0, len(numbers))\n", "emb": null, "idx_generation": 258, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int, start=0, end=0) -> bool:\n    \"\"\"\n    Check if there is a subarray in 'numbers' that sums up to 'target'\n    within the range of indices [start, end).\n    \"\"\"\n    current_sum = 0\n    for i in range(start, end):\n        current_sum += numbers[i]\n        if current_sum == target:\n            return True\n        elif current_sum > target:\n            current_sum -= numbers[start]\n            start += 1\n    return False", "solution_func": "def g(numbers: List[int], target: int):\n    return numbers.index(target)\n\nnumbers = [1, 2, 3, 4, 5]\ntarget = 9", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target: int, start=0, end=None) -> bool:\n    \"\"\"\n    Check if the array 'arr' contains a subarray that sums up to 'target'\n    within the range of indices [start, end).\n    \"\"\"\n    if end is None:\n        end = len(arr)\n    current_sum = 0\n    for i in range(start, end):\n        current_sum += arr[i]\n        if current_sum == target:\n            return True\n        elif current_sum > target:\n            current_sum -= arr[start]\n            start += 1\n    return False\n\ndef g(arr: List[int], target: int):\n    return arr.index(target)\n\narr = [3, 1, 5, 4, 2]\ntarget = 10\nassert f(g(arr, target), target, 0, len(arr))\n", "emb": null, "idx_generation": 258, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int, start=0, end=None) -> bool:\n    \"\"\"\n    Check if the array 'arr' contains a subarray that sums up to 'target'\n    within the range of indices [start, end).\n    \"\"\"\n    if end is None:\n        end = len(arr)\n    current_sum = 0\n    for i in range(start, end):\n        current_sum += arr[i]\n        if current_sum == target:\n            return True\n        elif current_sum > target:\n            current_sum -= arr[start]\n            start += 1\n    return False", "solution_func": "def g(arr: List[int], target: int):\n    return arr.index(target)\n\narr = [3, 1, 5, 4, 2]\ntarget = 10", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(string: str, k: int, substr='abc', count=0) -> bool:\n    \"\"\"\n    Check if the substring 'substr' appears exactly 'k' times in the string 'string'.\n    \"\"\"\n    if substr in string:\n        count += 1\n        index = string.index(substr)\n        return f(string[index + len(substr):], k, substr, count)\n    return count == k\n\ndef g(string: str, k: int):\n    return string * k\n\nstring = \"abcabcabcabc\"\nk = 4\nassert f(g(string, k), k, \"abc\", 0)\n", "emb": null, "idx_generation": 258, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, k: int, substr='abc', count=0) -> bool:\n    \"\"\"\n    Check if the substring 'substr' appears exactly 'k' times in the string 'string'.\n    \"\"\"\n    if substr in string:\n        count += 1\n        index = string.index(substr)\n        return f(string[index + len(substr):], k, substr, count)\n    return count == k", "solution_func": "def g(string: str, k: int):\n    return string * k\n\nstring = \"abcabcabcabc\"\nk = 4", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int = 10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target number\"\"\"\n    complements = set()\n    for num in nums:\n        if num in complements:\n            return True\n        complements.add(target - num)\n    return False\n\ndef g(target: int = 10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target - 9]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 258, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int = 10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target number\"\"\"\n    complements = set()\n    for num in nums:\n        if num in complements:\n            return True\n        complements.add(target - num)\n    return False", "solution_func": "def g(target: int = 10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target - 9]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], n: int = 3) -> bool:\n    \"\"\"Check if the sum of all numbers in the matrix is equal to n\"\"\"\n    return sum(sum(row) for row in matrix) == n\n\ndef g(n: int = 3):\n    return [[1, 2, 3], [4, 5, 6], [n - 4, n - 3, n - 2]]\n\nassert f(g())\n", "emb": null, "idx_generation": 258, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n: int = 3) -> bool:\n    \"\"\"Check if the sum of all numbers in the matrix is equal to n\"\"\"\n    return sum(sum(row) for row in matrix) == n", "solution_func": "def g(n: int = 3):\n    return [[1, 2, 3], [4, 5, 6], [n - 4, n - 3, n - 2]]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(sentence: str, words: List[str], n: int = 2) -> bool:\n    \"\"\"Check if the sentence contains at least n occurrences of each word in the list\"\"\"\n    word_counts = {word: 0 for word in words}\n    sentence_words = sentence.split()\n    for word in sentence_words:\n        if word in word_counts:\n            word_counts[word] += 1\n    return all(count >= n for count in word_counts.values())\n\ndef g(words: List[str], n: int = 2):\n    return \" \".join([word for word in words for _ in range(n)])\n\nassert f(g())\n", "emb": null, "idx_generation": 258, "target_skills": null, "problem_func": "from typing import*\ndef f(sentence: str, words: List[str], n: int = 2) -> bool:\n    \"\"\"Check if the sentence contains at least n occurrences of each word in the list\"\"\"\n    word_counts = {word: 0 for word in words}\n    sentence_words = sentence.split()\n    for word in sentence_words:\n        if word in word_counts:\n            word_counts[word] += 1\n    return all(count >= n for count in word_counts.values())", "solution_func": "def g(words: List[str], n: int = 2):\n    return \" \".join([word for word in words for _ in range(n)])", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Find a subarray of 'arr' that sums up to 'target'\"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if sum(arr[i:j]) == target:\n                return True\n    return False\n\ndef g():\n    arr = [random.randint(1, 10) for _ in range(10)]\n    return arr\n\nassert f(g())\n", "emb": null, "idx_generation": 258, "target_skills": null, "problem_func": "from typing import*\nimport random\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Find a subarray of 'arr' that sums up to 'target'\"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if sum(arr[i:j]) == target:\n                return True\n    return False", "solution_func": "def g():\n    arr = [random.randint(1, 10) for _ in range(10)]\n    return arr", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\nimport math\n\ndef f(a: int, b: int, c: int) -> bool:\n    \"\"\"Check if the given integers form a Pythagorean triplet\"\"\"\n    return a*a + b*b == c*c\n\ndef g():\n    a = random.randint(1, 10)\n    b = random.randint(1, 10)\n    c = int(math.sqrt(a*a + b*b))\n    return (a, b, c)\n\nassert f(*g())\n", "emb": null, "idx_generation": 258, "target_skills": null, "problem_func": "import random\nfrom typing import*\nimport math\n\ndef f(a: int, b: int, c: int) -> bool:\n    \"\"\"Check if the given integers form a Pythagorean triplet\"\"\"\n    return a*a + b*b == c*c", "solution_func": "def g():\n    a = random.randint(1, 10)\n    b = random.randint(1, 10)\n    c = int(math.sqrt(a*a + b*b))\n    return (a, b, c)", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\nimport itertools\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there are three elements in 'arr' that sum up to 'target'\"\"\"\n    combinations = itertools.combinations(arr, 3)\n    for combo in combinations:\n        if sum(combo) == target:\n            return True\n    return False\n\ndef g():\n    arr = [random.randint(1, 10) for _ in range(10)]\n    target = random.randint(1, 20)\n    return (arr, target)\n\nassert f(*g())\n", "emb": null, "idx_generation": 258, "target_skills": null, "problem_func": "import random\nfrom typing import*\nimport itertools\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there are three elements in 'arr' that sum up to 'target'\"\"\"\n    combinations = itertools.combinations(arr, 3)\n    for combo in combinations:\n        if sum(combo) == target:\n            return True\n    return False", "solution_func": "def g():\n    arr = [random.randint(1, 10) for _ in range(10)]\n    target = random.randint(1, 20)\n    return (arr, target)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given list such that their sum is equal to 10.\n    \"\"\"\n    unique_nums = set(nums)\n    for num in nums:\n        if 10 - num in unique_nums:\n            return True\n    return False\n\ndef g():\n    return [2, 4, 6, 8]\n    \nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 258, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given list such that their sum is equal to 10.\n    \"\"\"\n    unique_nums = set(nums)\n    for num in nums:\n        if 10 - num in unique_nums:\n            return True\n    return False", "solution_func": "def g():\n    return [2, 4, 6, 8]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"\n    Determine if it is possible to obtain target using arithmetic operations on all numbers in nums.\n    Each number in nums can be used once and only once.\n    \"\"\"\n    def evaluate(expr):\n        stack = []\n        for token in expr:\n            if token.isdigit():\n                stack.append(int(token))\n            else:\n                b, a = stack.pop(), stack.pop()\n                if token == '+':\n                    stack.append(a + b)\n                elif token == '-':\n                    stack.append(a - b)\n                elif token == '*':\n                    stack.append(a * b)\n                elif token == '/':\n                    if b == 0:\n                        return False\n                    stack.append(a / b)\n        return stack[0] == target\n\n    def backtrack(expr):\n        if len(expr) == len(nums) - 1:\n            return evaluate(expr)\n        \n        for i in range(len(nums)):\n            if not used[i]:\n                expr.append(nums[i])\n                used[i] = True\n\n                if backtrack(expr):\n                    return True\n\n                used[i] = False\n                expr.pop()\n\n        return False\n\n    used = [False] * len(nums)\n    expr = []\n    return backtrack(expr)\n\ndef g(nums = [4, 1, 8, 7]):\n    \"\"\"\n    This solution uses backtracking to generate all possible arithmetic expressions\n    using the numbers in nums.\n    \"\"\"\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 259, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"\n    Determine if it is possible to obtain target using arithmetic operations on all numbers in nums.\n    Each number in nums can be used once and only once.\n    \"\"\"\n    def evaluate(expr):\n        stack = []\n        for token in expr:\n            if token.isdigit():\n                stack.append(int(token))\n            else:\n                b, a = stack.pop(), stack.pop()\n                if token == '+':\n                    stack.append(a + b)\n                elif token == '-':\n                    stack.append(a - b)\n                elif token == '*':\n                    stack.append(a * b)\n                elif token == '/':\n                    if b == 0:\n                        return False\n                    stack.append(a / b)\n        return stack[0] == target\n\n    def backtrack(expr):\n        if len(expr) == len(nums) - 1:\n            return evaluate(expr)\n        \n        for i in range(len(nums)):\n            if not used[i]:\n                expr.append(nums[i])\n                used[i] = True\n\n                if backtrack(expr):\n                    return True\n\n                used[i] = False\n                expr.pop()\n\n        return False\n\n    used = [False] * len(nums)\n    expr = []\n    return backtrack(expr)", "solution_func": "def g(nums = [4, 1, 8, 7]):\n    \"\"\"\n    This solution uses backtracking to generate all possible arithmetic expressions\n    using the numbers in nums.\n    \"\"\"\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=42) -> bool:\n    \"\"\"\n    Find a path from the top-left corner to the bottom-right corner of the matrix\n    where the sum of the elements along the path is equal to the target.\n    \"\"\"\n    def backtrack(i, j, path_sum):\n        if i == len(matrix) - 1 and j == len(matrix[0]) - 1:\n            return path_sum + matrix[i][j] == target\n\n        if i < len(matrix) - 1 and backtrack(i + 1, j, path_sum + matrix[i][j]):\n            return True\n        if j < len(matrix[0]) - 1 and backtrack(i, j + 1, path_sum + matrix[i][j]):\n            return True\n\n        return False\n\n    return backtrack(0, 0, 0)\n\ndef g(matrix = [[1, 10, 3], [8, 2, 6], [5, 4, 7]]):\n    \"\"\"\n    This solution uses backtracking to explore all possible paths from the top-left corner\n    to the bottom-right corner of the matrix.\n    \"\"\"\n    return matrix\n\nassert f(g())\n", "emb": null, "idx_generation": 259, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=42) -> bool:\n    \"\"\"\n    Find a path from the top-left corner to the bottom-right corner of the matrix\n    where the sum of the elements along the path is equal to the target.\n    \"\"\"\n    def backtrack(i, j, path_sum):\n        if i == len(matrix) - 1 and j == len(matrix[0]) - 1:\n            return path_sum + matrix[i][j] == target\n\n        if i < len(matrix) - 1 and backtrack(i + 1, j, path_sum + matrix[i][j]):\n            return True\n        if j < len(matrix[0]) - 1 and backtrack(i, j + 1, path_sum + matrix[i][j]):\n            return True\n\n        return False\n\n    return backtrack(0, 0, 0)", "solution_func": "def g(matrix = [[1, 10, 3], [8, 2, 6], [5, 4, 7]]):\n    \"\"\"\n    This solution uses backtracking to explore all possible paths from the top-left corner\n    to the bottom-right corner of the matrix.\n    \"\"\"\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(names: List[str], target='Python') -> bool:\n    \"\"\"\n    Check if the list of names contains the target string.\n    \"\"\"\n    return any(name == target for name in names)\n\ndef g(names = ['Java', 'Python', 'C++', 'JavaScript']):\n    return names\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 259, "target_skills": null, "problem_func": "from typing import*\ndef f(names: List[str], target='Python') -> bool:\n    \"\"\"\n    Check if the list of names contains the target string.\n    \"\"\"\n    return any(name == target for name in names)", "solution_func": "def g(names = ['Java', 'Python', 'C++', 'JavaScript']):\n    return names", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, substring='python', count=2) -> bool:\n    \"\"\"Find a substring with a certain count in a given string\"\"\"\n    return string.count(substring) == count\ndef g(substring = 'python', count = 2):\n    return substring * count\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 259, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, substring='python', count=2) -> bool:\n    \"\"\"Find a substring with a certain count in a given string\"\"\"\n    return string.count(substring) == count", "solution_func": "def g(substring = 'python', count = 2):\n    return substring * count", "map_ix": [0, 0, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value\"\"\"\n    return any((x + y == target for x in numbers for y in numbers if x != y))\ndef g(numbers = [1, 2, 3, 4, 5]):\n    return numbers\nassert f(g())\n", "emb": null, "idx_generation": 259, "target_skills": null, "problem_func": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value\"\"\"\n    return any((x + y == target for x in numbers for y in numbers if x != y))", "solution_func": "def g(numbers = [1, 2, 3, 4, 5]):\n    return numbers", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, substring='python') -> bool:\n    \"\"\"Check if the substring is present in the string\"\"\"\n    return substring in string\ndef g(string = 'I love python programming'):\n    return string\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 259, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, substring='python') -> bool:\n    \"\"\"Check if the substring is present in the string\"\"\"\n    return substring in string", "solution_func": "def g(string = 'I love python programming'):\n    return string", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(s: float, num=10) -> bool:\n    \"\"\"Check if the square root of the number is equal to the given value.\"\"\"\n    return math.sqrt(num) == s\n\ndef g(num=10):\n    return math.sqrt(num)\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 259, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(s: float, num=10) -> bool:\n    \"\"\"Check if the square root of the number is equal to the given value.\"\"\"\n    return math.sqrt(num) == s", "solution_func": "def g(num=10):\n    return math.sqrt(num)", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, word='radar') -> bool:\n    \"\"\"Check if the word is a palindrome.\"\"\"\n    return word == word[::-1]\n\ndef g(word='radar'):\n    return word\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 259, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, word='radar') -> bool:\n    \"\"\"Check if the word is a palindrome.\"\"\"\n    return word == word[::-1]", "solution_func": "def g(word='radar'):\n    return word", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: int, num=10) -> bool:\n    \"\"\"Check if the number is divisible by the given value.\"\"\"\n    return num % s == 0\n\ndef g(num=10):\n    return num\n\nassert f(g())\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 259, "target_skills": null, "problem_func": "from typing import*\ndef f(s: int, num=10) -> bool:\n    \"\"\"Check if the number is divisible by the given value.\"\"\"\n    return num % s == 0", "solution_func": "def g(num=10):\n    return num", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: int, a=5, b=7, c=9) -> bool:\n    \"\"\"Solve an equation\"\"\"\n    return a*x**2 + b*x + c == 0\ndef g(a=5, b=7, c=9):\n    import numpy as np\n    roots = np.roots([a, b, c])\n    return roots[0]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 259, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, a=5, b=7, c=9) -> bool:\n    \"\"\"Solve an equation\"\"\"\n    return a*x**2 + b*x + c == 0", "solution_func": "def g(a=5, b=7, c=9):\n    import numpy as np\n    roots = np.roots([a, b, c])\n    return roots[0]", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"\n    Find a combination of the numbers in the list that add up to the target\n    \"\"\"\n    import itertools\n    for r in range(1, len(nums) + 1):\n        for combination in itertools.combinations(nums, r):\n            if sum(combination) == target:\n                return True\n    return False\ndef g(nums = [10, 20, 30, 40, 50]):\n    return nums\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 260, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"\n    Find a combination of the numbers in the list that add up to the target\n    \"\"\"\n    import itertools\n    for r in range(1, len(nums) + 1):\n        for combination in itertools.combinations(nums, r):\n            if sum(combination) == target:\n                return True\n    return False", "solution_func": "def g(nums = [10, 20, 30, 40, 50]):\n    return nums", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substr='abc', count=2) -> bool:\n    \"\"\"\n    Find if the given string contains the given substring, exactly count number of times\n    \"\"\"\n    return s.count(substr) == count\ndef g(substr='abc', count=2):\n    return substr * count\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 260, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substr='abc', count=2) -> bool:\n    \"\"\"\n    Find if the given string contains the given substring, exactly count number of times\n    \"\"\"\n    return s.count(substr) == count", "solution_func": "def g(substr='abc', count=2):\n    return substr * count", "map_ix": [0, 0, 0, 1, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(points: List[Tuple[int, int]], origin=(0, 0)) -> bool:\n    \"\"\"\n    Find if all points in the list are equidistant from the origin\n    \"\"\"\n    return all((distance(point, origin) == distance(points[0], origin) for point in points))\ndef g(points = [(3, 4), (6, 8), (9, 12)]):\n    return points\ndef distance(point1, point2):\n    return ((point2[0] - point1[0])**2 + (point2[1] - point1[1])**2)**0.5\nassert f(g())\n", "emb": null, "idx_generation": 260, "target_skills": null, "problem_func": "from typing import*\ndef f(points: List[Tuple[int, int]], origin=(0, 0)) -> bool:\n    \"\"\"\n    Find if all points in the list are equidistant from the origin\n    \"\"\"\n    return all((distance(point, origin) == distance(points[0], origin) for point in points))", "solution_func": "def g(points = [(3, 4), (6, 8), (9, 12)]):\n    return points\ndef distance(point1, point2):\n    return ((point2[0] - point1[0])**2 + (point2[1] - point1[1])**2)**0.5", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, nums=[287260676668, 33263981357337, 47314720, 295717, 2957170], upper_bound=1000000000) -> bool:\n    \"\"\"Find a small common divisor of the list of integers.\"\"\"\n    return all((i % n == 0 for i in nums)) and n <= upper_bound\ndef g(nums = [287260676668, 33263981357337, 47314720, 295717, 2957170], upper_bound=1000000000):\n    n = max(nums)\n    for i in range(2, n+1):\n        if all((num % i == 0 for num in nums)):\n            return i\n    return 1\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 260, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[287260676668, 33263981357337, 47314720, 295717, 2957170], upper_bound=1000000000) -> bool:\n    \"\"\"Find a small common divisor of the list of integers.\"\"\"\n    return all((i % n == 0 for i in nums)) and n <= upper_bound", "solution_func": "def g(nums = [287260676668, 33263981357337, 47314720, 295717, 2957170], upper_bound=1000000000):\n    n = max(nums)\n    for i in range(2, n+1):\n        if all((num % i == 0 for num in nums)):\n            return i\n    return 1", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport re\n\ndef f(s: str, pattern='[0-9]{3}-[0-9]{3}-[0-9]{4}') -> bool:\n    \"\"\"Check if the given string matches a specific pattern.\"\"\"\n    return bool(re.match(pattern, s))\ndef g(pattern='[0-9]{3}-[0-9]{3}-[0-9]{4}'):\n    return '123-456-7890'\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 260, "target_skills": null, "problem_func": "from typing import*\nimport re\n\ndef f(s: str, pattern='[0-9]{3}-[0-9]{3}-[0-9]{4}') -> bool:\n    \"\"\"Check if the given string matches a specific pattern.\"\"\"\n    return bool(re.match(pattern, s))", "solution_func": "def g(pattern='[0-9]{3}-[0-9]{3}-[0-9]{4}'):\n    return '123-456-7890'", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, nums=[287260676668, 33263981357337, 47314720, 295717, 2957170], upper_bound=1000, lower_bound=100) -> bool:\n    \"\"\"Check if the given integer is within the range and divisible by all the numbers in the list.\"\"\"\n    return lower_bound <= n <= upper_bound and all((n % i == 0 for i in nums))\ndef g(nums=[287260676668, 33263981357337, 47314720, 295717, 2957170], upper_bound=1000, lower_bound=100):\n    n = 0\n    for i in nums:\n        m, n = min(i, n), max(i, n)\n        while m > 0:\n            m, n = n % m, m\n    return n\nassert f(g())\n", "emb": null, "idx_generation": 260, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[287260676668, 33263981357337, 47314720, 295717, 2957170], upper_bound=1000, lower_bound=100) -> bool:\n    \"\"\"Check if the given integer is within the range and divisible by all the numbers in the list.\"\"\"\n    return lower_bound <= n <= upper_bound and all((n % i == 0 for i in nums))", "solution_func": "def g(nums=[287260676668, 33263981357337, 47314720, 295717, 2957170], upper_bound=1000, lower_bound=100):\n    n = 0\n    for i in nums:\n        m, n = min(i, n), max(i, n)\n        while m > 0:\n            m, n = n % m, m\n    return n", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(nums: List[int], target: int):\n    return nums, target\nassert f(g())\n", "emb": null, "idx_generation": 260, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))", "solution_func": "def g(nums: List[int], target: int):\n    return nums, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, k: int) -> bool:\n    \"\"\"Check if there exists a substring of s that contains exactly k unique characters.\"\"\"\n    return any((len(set(s[i:j])) == k for i in range(len(s)) for j in range(i+k, len(s)+1)))\ndef g(s: str, k: int):\n    return s, k\nassert f(g())\n", "emb": null, "idx_generation": 260, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, k: int) -> bool:\n    \"\"\"Check if there exists a substring of s that contains exactly k unique characters.\"\"\"\n    return any((len(set(s[i:j])) == k for i in range(len(s)) for j in range(i+k, len(s)+1)))", "solution_func": "def g(s: str, k: int):\n    return s, k", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a symmetric matrix.\"\"\"\n    return all((matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix[0]))))\ndef g(matrix: List[List[int]]):\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 260, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a symmetric matrix.\"\"\"\n    return all((matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix[0]))))", "solution_func": "def g(matrix: List[List[int]]):\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, s: str, p: int) -> bool:\n    \"\"\"Check if a substring of length p exists in s\"\"\"\n    return s[p:n+p] in s\ndef g(s: str, p: int):\n    return s + s\nassert f(g())\n", "emb": null, "idx_generation": 260, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, s: str, p: int) -> bool:\n    \"\"\"Check if a substring of length p exists in s\"\"\"\n    return s[p:n+p] in s", "solution_func": "def g(s: str, p: int):\n    return s + s", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, lst=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape'], index=3) -> bool:\n    \"\"\"Check if the string is in the list at the given index position\"\"\"\n    return lst[index] == s\ndef g(lst=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape'], index=3):\n    return lst[index]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 261, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, lst=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape'], index=3) -> bool:\n    \"\"\"Check if the string is in the list at the given index position\"\"\"\n    return lst[index] == s", "solution_func": "def g(lst=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape'], index=3):\n    return lst[index]", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the given number is a multiple of any number in the list\"\"\"\n    for num in lst:\n        if n % num == 0:\n            return True\n    return False\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return lst[-1]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 261, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the given number is a multiple of any number in the list\"\"\"\n    for num in lst:\n        if n % num == 0:\n            return True\n    return False", "solution_func": "def g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return lst[-1]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(lst: list, n=5) -> bool:\n    \"\"\"Check if the given number is in the list\"\"\"\n    return n in lst\ndef g(lst):\n    return random.choice(lst)\nassert f(g())\n", "emb": null, "idx_generation": 261, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(lst: list, n=5) -> bool:\n    \"\"\"Check if the given number is in the list\"\"\"\n    return n in lst", "solution_func": "def g(lst):\n    return random.choice(lst)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, substr='hello') -> bool:\n    \"\"\"Check if a given substring is present in a string\"\"\"\n    return substr in string\ndef g(substr='hello'):\n    string = \"This is a hello world example\"\n    return string\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 261, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, substr='hello') -> bool:\n    \"\"\"Check if a given substring is present in a string\"\"\"\n    return substr in string", "solution_func": "def g(substr='hello'):\n    string = \"This is a hello world example\"\n    return string", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two integers in a list that sum up to a given target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 261, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two integers in a list that sum up to a given target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(radius: float, area=50) -> bool:\n    \"\"\"Check if the area of a circle exceeds a given value\"\"\"\n    circle_area = math.pi * radius ** 2\n    return circle_area > area\ndef g(area=50):\n    radius = math.sqrt(area / math.pi)\n    return radius\nassert f(g())\n", "emb": null, "idx_generation": 261, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(radius: float, area=50) -> bool:\n    \"\"\"Check if the area of a circle exceeds a given value\"\"\"\n    circle_area = math.pi * radius ** 2\n    return circle_area > area", "solution_func": "def g(area=50):\n    radius = math.sqrt(area / math.pi)\n    return radius", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, seq=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Check if n is a member of the sequence\"\"\"\n    return n in seq\n\ndef g(seq=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return seq[0]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 261, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, seq=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Check if n is a member of the sequence\"\"\"\n    return n in seq", "solution_func": "def g(seq=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return seq[0]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if s is a substring of the concatenation of n copies of itself\"\"\"\n    return s in (s * n)\n\ndef g(n=3):\n    return \"abc\"\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 261, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if s is a substring of the concatenation of n copies of itself\"\"\"\n    return s in (s * n)", "solution_func": "def g(n=3):\n    return \"abc\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the sum of each row in the matrix is equal to the sum of each column\"\"\"\n    row_sum = [sum(row) for row in matrix]\n    col_sum = [sum(col) for col in zip(*matrix)]\n    return row_sum == col_sum\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n", "emb": null, "idx_generation": 261, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the sum of each row in the matrix is equal to the sum of each column\"\"\"\n    row_sum = [sum(row) for row in matrix]\n    col_sum = [sum(col) for col in zip(*matrix)]\n    return row_sum == col_sum", "solution_func": "def g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: List[int], n=10, s=100) -> bool:\n    \"\"\"Construct a list of n distinct integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n = 10, s = 100):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 261, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], n=10, s=100) -> bool:\n    \"\"\"Construct a list of n distinct integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)", "solution_func": "def g(n = 10, s = 100):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x", "map_ix": [0, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, a=1048576, b=64) -> bool:\n    \"\"\"Check if a number is a power of another number\"\"\"\n    return n ** a == b\ndef g(a=1048576, b=64):\n    return int(b ** (1/a))\nassert f(g())\n", "emb": null, "idx_generation": 262, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=1048576, b=64) -> bool:\n    \"\"\"Check if a number is a power of another number\"\"\"\n    return n ** a == b", "solution_func": "def g(a=1048576, b=64):\n    return int(b ** (1/a))", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, a='hello', b='world') -> bool:\n    \"\"\"Check if two strings are anagrams of each other\"\"\"\n    return sorted(s) == sorted(a + b)\ndef g(a='hello', b='world'):\n    return a[::-1] + b[::-1]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 262, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, a='hello', b='world') -> bool:\n    \"\"\"Check if two strings are anagrams of each other\"\"\"\n    return sorted(s) == sorted(a + b)", "solution_func": "def g(a='hello', b='world'):\n    return a[::-1] + b[::-1]", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=10, b=5) -> bool:\n    \"\"\"Check if a number is a multiple of two other numbers\"\"\"\n    return n % a == 0 and n % b == 0\ndef g(a=10, b=5):\n    return a * b\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 262, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=10, b=5) -> bool:\n    \"\"\"Check if a number is a multiple of two other numbers\"\"\"\n    return n % a == 0 and n % b == 0", "solution_func": "def g(a=10, b=5):\n    return a * b", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=3, b=5, c=7) -> bool:\n    \"\"\"Check if a number is divisible by either a, b, or c.\"\"\"\n    return n % a == 0 or n % b == 0 or n % c == 0\n\ndef g(a = 3, b = 5, c = 7):\n    return math.lcm(a, b, c)\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 262, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, a=3, b=5, c=7) -> bool:\n    \"\"\"Check if a number is divisible by either a, b, or c.\"\"\"\n    return n % a == 0 or n % b == 0 or n % c == 0", "solution_func": "def g(a = 3, b = 5, c = 7):\n    return math.lcm(a, b, c)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\n\ndef f(lst: list, n=3) -> bool:\n    \"\"\"Check if a number is present in the list.\"\"\"\n    return n in lst\n\ndef g(n=3):\n    lst = [random.randint(1, 10) for _ in range(5)]\n    return lst\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 262, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(lst: list, n=3) -> bool:\n    \"\"\"Check if a number is present in the list.\"\"\"\n    return n in lst", "solution_func": "def g(n=3):\n    lst = [random.randint(1, 10) for _ in range(5)]\n    return lst", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\nimport datetime\n\ndef f(year: int, month=1, day=1) -> bool:\n    \"\"\"Check if a date is in the past.\"\"\"\n    current_date = datetime.date.today()\n    check_date = datetime.date(year, month, day)\n    return check_date < current_date\n\ndef g(month=1, day=1):\n    current_year = datetime.date.today().year\n    random_year = random.randint(1900, current_year)\n    return random_year\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 262, "target_skills": null, "problem_func": "import random\nfrom typing import*\nimport datetime\n\ndef f(year: int, month=1, day=1) -> bool:\n    \"\"\"Check if a date is in the past.\"\"\"\n    current_date = datetime.date.today()\n    check_date = datetime.date(year, month, day)\n    return check_date < current_date", "solution_func": "def g(month=1, day=1):\n    current_year = datetime.date.today().year\n    random_year = random.randint(1900, current_year)\n    return random_year", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(x: int, y: int, z: int, target=100) -> bool:\n    \"\"\"Check if the sum of x, y, and z is equal to the target\"\"\"\n    return x + y + z == target\n\ndef g(target=100):\n    x = math.ceil(target / 3)\n    y = math.ceil((target - x) / 2)\n    z = target - x - y\n    return (x, y, z)\n\nassert f(g())\n", "emb": null, "idx_generation": 262, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: int, y: int, z: int, target=100) -> bool:\n    \"\"\"Check if the sum of x, y, and z is equal to the target\"\"\"\n    return x + y + z == target", "solution_func": "def g(target=100):\n    x = math.ceil(target / 3)\n    y = math.ceil((target - x) / 2)\n    z = target - x - y\n    return (x, y, z)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(list1: List[int], list2: List[int], n=10) -> bool:\n    \"\"\"Check if there is a common element between list1 and list2\"\"\"\n    return any(x in list2 for x in list1)\n\ndef g(n=10):\n    list1 = random.sample(range(1, n+1), n)\n    list2 = random.sample(range(1, n+1), n)\n    return (list1, list2)\n\nassert f(g())\n", "emb": null, "idx_generation": 262, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(list1: List[int], list2: List[int], n=10) -> bool:\n    \"\"\"Check if there is a common element between list1 and list2\"\"\"\n    return any(x in list2 for x in list1)", "solution_func": "def g(n=10):\n    list1 = random.sample(range(1, n+1), n)\n    list2 = random.sample(range(1, n+1), n)\n    return (list1, list2)", "map_ix": null}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\nimport itertools\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there is a combination of numbers in nums that sums up to the target\"\"\"\n    return any(sum(combination) == target for r in range(len(nums)+1) for combination in itertools.combinations(nums, r))\n\ndef g(target=100):\n    nums = random.sample(range(1, target+1), target)\n    return nums\n\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 262, "target_skills": null, "problem_func": "import random\nfrom typing import*\nimport itertools\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there is a combination of numbers in nums that sums up to the target\"\"\"\n    return any(sum(combination) == target for r in range(len(nums)+1) for combination in itertools.combinations(nums, r))", "solution_func": "def g(target=100):\n    nums = random.sample(range(1, target+1), target)\n    return nums", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, numbers=[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59], k=0) -> bool:\n    \"\"\"\n    Given a list of odd integers and an index k, determine if the kth number is a perfect square.\n    \"\"\"\n    assert all((n % 2 != 0 for n in numbers)), 'Hint: numbers are odd integers'\n    return numbers[k] ** 0.5 == int(numbers[k] ** 0.5)\ndef g(numbers = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59], k = 0):\n    return numbers[k]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 262, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, numbers=[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59], k=0) -> bool:\n    \"\"\"\n    Given a list of odd integers and an index k, determine if the kth number is a perfect square.\n    \"\"\"\n    assert all((n % 2 != 0 for n in numbers)), 'Hint: numbers are odd integers'\n    return numbers[k] ** 0.5 == int(numbers[k] ** 0.5)", "solution_func": "def g(numbers = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59], k = 0):\n    return numbers[k]", "map_ix": [1, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: list, target=[1, 2, 3]) -> bool:\n    \"\"\"Check if the target list is a subsequence of arr\"\"\"\n    n = len(target)\n    m = len(arr)\n    if n > m:\n        return False\n    i = 0\n    j = 0\n    while i < n and j < m:\n        if target[i] == arr[j]:\n            i += 1\n        j += 1\n    return i == n\ndef g(target = [1, 2, 3]):\n    return target\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 263, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: list, target=[1, 2, 3]) -> bool:\n    \"\"\"Check if the target list is a subsequence of arr\"\"\"\n    n = len(target)\n    m = len(arr)\n    if n > m:\n        return False\n    i = 0\n    j = 0\n    while i < n and j < m:\n        if target[i] == arr[j]:\n            i += 1\n        j += 1\n    return i == n", "solution_func": "def g(target = [1, 2, 3]):\n    return target", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: list, target=15) -> bool:\n    \"\"\"Check if there exists a subarray in the matrix whose elements sum up to the target\"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    for i in range(m):\n        for j in range(n):\n            curr_sum = 0\n            for k in range(i, m):\n                for l in range(j, n):\n                    curr_sum += matrix[k][l]\n                    if curr_sum == target:\n                        return True\n                    if curr_sum > target:\n                        break\n    return False\ndef g(target = 15):\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n    return matrix\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 263, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: list, target=15) -> bool:\n    \"\"\"Check if there exists a subarray in the matrix whose elements sum up to the target\"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    for i in range(m):\n        for j in range(n):\n            curr_sum = 0\n            for k in range(i, m):\n                for l in range(j, n):\n                    curr_sum += matrix[k][l]\n                    if curr_sum == target:\n                        return True\n                    if curr_sum > target:\n                        break\n    return False", "solution_func": "def g(target = 15):\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport itertools\n\ndef f(nums: list, k=2, target=10) -> bool:\n    \"\"\"Check if there exists a combination of k numbers in the list that sum up to the target\"\"\"\n    combinations = list(itertools.combinations(nums, k))\n    for combination in combinations:\n        if sum(combination) == target:\n            return True\n    return False\ndef g(k = 2, target = 10):\n    nums = [1, 2, 3, 4, 5]\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 263, "target_skills": null, "problem_func": "from typing import*\nimport itertools\n\ndef f(nums: list, k=2, target=10) -> bool:\n    \"\"\"Check if there exists a combination of k numbers in the list that sum up to the target\"\"\"\n    combinations = list(itertools.combinations(nums, k))\n    for combination in combinations:\n        if sum(combination) == target:\n            return True\n    return False", "solution_func": "def g(k = 2, target = 10):\n    nums = [1, 2, 3, 4, 5]\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target: int, start=0, end=len(arr)-1) -> bool:\n    \"\"\"\n    Given a sorted list of integers arr, determine if there are two numbers in the list that add up to the target number.\n    \"\"\"\n    while start < end:\n        if arr[start] + arr[end] == target:\n            return True\n        elif arr[start] + arr[end] < target:\n            start += 1\n        else:\n            end -= 1\n    return False\ndef g(arr: List[int], target: int, start=0, end=len(arr)-1):\n    arr.sort()\n    return arr, target\nassert f(*g())\n", "emb": null, "idx_generation": 263, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int, start=0, end=len(arr)-1) -> bool:\n    \"\"\"\n    Given a sorted list of integers arr, determine if there are two numbers in the list that add up to the target number.\n    \"\"\"\n    while start < end:\n        if arr[start] + arr[end] == target:\n            return True\n        elif arr[start] + arr[end] < target:\n            start += 1\n        else:\n            end -= 1\n    return False", "solution_func": "def g(arr: List[int], target: int, start=0, end=len(arr)-1):\n    arr.sort()\n    return arr, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n: int, m: int, p: int) -> bool:\n    \"\"\"\n    Check if it is possible to split the string s into n substrings, each of length m, such that the product of each substring is divisible by p.\n    \"\"\"\n    if len(s) != n * m:\n        return False\n    for i in range(0, len(s), m):\n        substring = s[i:i+m]\n        product = 1\n        for char in substring:\n            product *= int(char)\n        if product % p != 0:\n            return False\n    return True\ndef g(s: str, n: int, m: int, p: int):\n    return s, n, m, p\nassert f(*g())\n", "emb": null, "idx_generation": 263, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n: int, m: int, p: int) -> bool:\n    \"\"\"\n    Check if it is possible to split the string s into n substrings, each of length m, such that the product of each substring is divisible by p.\n    \"\"\"\n    if len(s) != n * m:\n        return False\n    for i in range(0, len(s), m):\n        substring = s[i:i+m]\n        product = 1\n        for char in substring:\n            product *= int(char)\n        if product % p != 0:\n            return False\n    return True", "solution_func": "def g(s: str, n: int, m: int, p: int):\n    return s, n, m, p", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target: int, start=0, end=len(arr)-1) -> bool:\n    \"\"\"\n    Given a sorted list of integers arr, determine if there are two numbers in the list that add up to the target number.\n    \"\"\"\n    while start < end:\n        if arr[start] + arr[end] == target:\n            return True\n        elif arr[start] + arr[end] < target:\n            start += 1\n        else:\n            end -= 1\n    return False\ndef g(arr: List[int], target: int, start=0, end=len(arr)-1):\n    arr.sort(reverse=True)\n    return arr, target\nassert f(*g())\n", "emb": null, "idx_generation": 263, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int, start=0, end=len(arr)-1) -> bool:\n    \"\"\"\n    Given a sorted list of integers arr, determine if there are two numbers in the list that add up to the target number.\n    \"\"\"\n    while start < end:\n        if arr[start] + arr[end] == target:\n            return True\n        elif arr[start] + arr[end] < target:\n            start += 1\n        else:\n            end -= 1\n    return False", "solution_func": "def g(arr: List[int], target: int, start=0, end=len(arr)-1):\n    arr.sort(reverse=True)\n    return arr, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int, k=2) -> bool:\n    \"\"\"Check if there are exactly k numbers in the list that sum up to the target value.\"\"\"\n    combinations = itertools.combinations(nums, k)\n    return any(sum(combination) == target for combination in combinations)\ndef g(nums: List[int], k=2):\n    combinations = itertools.combinations(nums, k)\n    return next(combination for combination in combinations if sum(combination) == target)\nassert f(g())\n", "emb": null, "idx_generation": 263, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int, k=2) -> bool:\n    \"\"\"Check if there are exactly k numbers in the list that sum up to the target value.\"\"\"\n    combinations = itertools.combinations(nums, k)\n    return any(sum(combination) == target for combination in combinations)", "solution_func": "def g(nums: List[int], k=2):\n    combinations = itertools.combinations(nums, k)\n    return next(combination for combination in combinations if sum(combination) == target)", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(matrix: List[List[int]], target: int, k=2) -> bool:\n    \"\"\"Check if there are exactly k numbers in the matrix that sum up to the target value.\"\"\"\n    combinations = itertools.combinations(itertools.chain(*matrix), k)\n    return any(sum(combination) == target for combination in combinations)\ndef g(matrix: List[List[int]], k=2):\n    combinations = itertools.combinations(itertools.chain(*matrix), k)\n    return next(combination for combination in combinations if sum(combination) == target)\nassert f(g())\n", "emb": null, "idx_generation": 263, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(matrix: List[List[int]], target: int, k=2) -> bool:\n    \"\"\"Check if there are exactly k numbers in the matrix that sum up to the target value.\"\"\"\n    combinations = itertools.combinations(itertools.chain(*matrix), k)\n    return any(sum(combination) == target for combination in combinations)", "solution_func": "def g(matrix: List[List[int]], k=2):\n    combinations = itertools.combinations(itertools.chain(*matrix), k)\n    return next(combination for combination in combinations if sum(combination) == target)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, target: str, k=2) -> bool:\n    \"\"\"Check if there are exactly k non-overlapping occurrences of the target string within s.\"\"\"\n    count = s.count(target)\n    return count == k\ndef g(s: str, target: str, k=2):\n    count = s.count(target)\n    if count < k:\n        return None\n    occurrences = [m.start() for m in re.finditer(target, s)]\n    return ''.join(s[occurrences[i]:occurrences[i]+len(target)] for i in range(k))\nassert f(g())\n", "emb": null, "idx_generation": 263, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target: str, k=2) -> bool:\n    \"\"\"Check if there are exactly k non-overlapping occurrences of the target string within s.\"\"\"\n    count = s.count(target)\n    return count == k", "solution_func": "def g(s: str, target: str, k=2):\n    count = s.count(target)\n    if count < k:\n        return None\n    occurrences = [m.start() for m in re.finditer(target, s)]\n    return ''.join(s[occurrences[i]:occurrences[i]+len(target)] for i in range(k))", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in a list that sum up to the target value.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=0):\n    return [i for i in range(target//2+1)]\nassert f(g())\n", "emb": null, "idx_generation": 263, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in a list that sum up to the target value.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))", "solution_func": "def g(target=0):\n    return [i for i in range(target//2+1)]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=-5, b=2) -> bool:\n    \"\"\"Check if n is divisible by b and a is the result of dividing n by b minus 1\"\"\"\n    return n % b == 0 and n // b - 1 == a\ndef g(a = -5, b = 2):\n    return (a + 1) * b\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 264, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=-5, b=2) -> bool:\n    \"\"\"Check if n is divisible by b and a is the result of dividing n by b minus 1\"\"\"\n    return n % b == 0 and n // b - 1 == a", "solution_func": "def g(a = -5, b = 2):\n    return (a + 1) * b", "map_ix": [0, 0, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=2, y=3) -> bool:\n    \"\"\"Check if n is the hypotenuse of a right triangle with sides x and y\"\"\"\n    return math.sqrt(x**2 + y**2) == n\ndef g(x = 2, y = 3):\n    return math.hypot(x, y)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 264, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, x=2, y=3) -> bool:\n    \"\"\"Check if n is the hypotenuse of a right triangle with sides x and y\"\"\"\n    return math.sqrt(x**2 + y**2) == n", "solution_func": "def g(x = 2, y = 3):\n    return math.hypot(x, y)", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if any two numbers in the list nums add up to the target\"\"\"\n    return any((x + y == target for x in nums for y in nums))\ndef g(nums = [1, 2, 3, 4, 5]):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 264, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if any two numbers in the list nums add up to the target\"\"\"\n    return any((x + y == target for x in nums for y in nums))", "solution_func": "def g(nums = [1, 2, 3, 4, 5]):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(squares: List[List[int]], m=8, n=8) -> bool:\n    \"\"\"Position min(m, n) <= 8 queens on an m x n chess board so that no pair is attacking each other.\"\"\"\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 4 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})\ndef g(m = 8, n = 8):\n    # brute force\n    k = min(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for i, j in enumerate(p)]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 264, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(squares: List[List[int]], m=8, n=8) -> bool:\n    \"\"\"Position min(m, n) <= 8 queens on an m x n chess board so that no pair is attacking each other.\"\"\"\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 4 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})", "solution_func": "def g(m = 8, n = 8):\n    # brute force\n    k = min(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for i, j in enumerate(p)]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(delta: List[int], nums=[[1, 2, 3], [-4, 5, -6], [7, -8, 9]]) -> bool:\n    \"\"\"Find the missing triple of integers to make them all add up to 0 coordinatewise\"\"\"\n    return all((sum((vec[i] for vec in nums)) + delta[i] == 0 for i in range(3)))\ndef g(nums = [[1, 2, 3], [-4, 5, -6], [7, -8, 9]]):\n    return [-sum(vec[i] for vec in nums) for i in range(3)]\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 264, "target_skills": null, "problem_func": "from typing import*\ndef f(delta: List[int], nums=[[1, 2, 3], [-4, 5, -6], [7, -8, 9]]) -> bool:\n    \"\"\"Find the missing triple of integers to make them all add up to 0 coordinatewise\"\"\"\n    return all((sum((vec[i] for vec in nums)) + delta[i] == 0 for i in range(3)))", "solution_func": "def g(nums = [[1, 2, 3], [-4, 5, -6], [7, -8, 9]]):\n    return [-sum(vec[i] for vec in nums) for i in range(3)]", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(path: List[int], edges=[[0, 1], [1, 2], [2, 3], [3, 0], [0, 2], [1, 3]]) -> bool:\n    \"\"\"Find a path with an odd number of nodes from nodes 0 to n in the given digraph on vertices 0, 1,..., n.\"\"\"\n    assert path[0] == 0 and path[-1] == max((max(e) for e in edges))\n    assert all([[a, b] in edges for (a, b) in zip(path, path[1:])])\n    return len(path) % 2 == 1\ndef g(edges = [[0, 1], [1, 2], [2, 3], [3, 0], [0, 2], [1, 3]]):\n    even_paths = {0: [0]}\n    odd_paths = {}\n    n = max(max(e) for e in edges)\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return odd_paths.get(n)\nassert f(g())\n", "emb": null, "idx_generation": 264, "target_skills": null, "problem_func": "from typing import*\ndef f(path: List[int], edges=[[0, 1], [1, 2], [2, 3], [3, 0], [0, 2], [1, 3]]) -> bool:\n    \"\"\"Find a path with an odd number of nodes from nodes 0 to n in the given digraph on vertices 0, 1,..., n.\"\"\"\n    assert path[0] == 0 and path[-1] == max((max(e) for e in edges))\n    assert all([[a, b] in edges for (a, b) in zip(path, path[1:])])\n    return len(path) % 2 == 1", "solution_func": "def g(edges = [[0, 1], [1, 2], [2, 3], [3, 0], [0, 2], [1, 3]]):\n    even_paths = {0: [0]}\n    odd_paths = {}\n    n = max(max(e) for e in edges)\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return odd_paths.get(n)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=10, b=25, lower_bound=1) -> bool:\n    \"\"\"Check if n is a common factor of two integers.\"\"\"\n    return (a % n == 0) and (b % n == 0) and (n >= lower_bound)\ndef g(a = 10, b = 25, lower_bound = 1):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 264, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=10, b=25, lower_bound=1) -> bool:\n    \"\"\"Check if n is a common factor of two integers.\"\"\"\n    return (a % n == 0) and (b % n == 0) and (n >= lower_bound)", "solution_func": "def g(a = 10, b = 25, lower_bound = 1):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return n", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(area: float, length=10, width=5) -> bool:\n    \"\"\"Check if the given area is greater than or equal to the product of length and width.\"\"\"\n    return area >= (length * width)\ndef g(length=10, width=5):\n    return math.ceil((length * width) / 10) * 10\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 264, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(area: float, length=10, width=5) -> bool:\n    \"\"\"Check if the given area is greater than or equal to the product of length and width.\"\"\"\n    return area >= (length * width)", "solution_func": "def g(length=10, width=5):\n    return math.ceil((length * width) / 10) * 10", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target='abcdefg', start_index=0) -> bool:\n    \"\"\"Check if the given string is a substring of the target string.\"\"\"\n    return s in target[start_index:]\ndef g(target='abcdefg', start_index=0):\n    return target[start_index:]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 264, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='abcdefg', start_index=0) -> bool:\n    \"\"\"Check if the given string is a substring of the target string.\"\"\"\n    return s in target[start_index:]", "solution_func": "def g(target='abcdefg', start_index=0):\n    return target[start_index:]", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, nums=[3584903, 493840, 582039, 728490238], lower_bound=1000000) -> bool:\n    \"\"\"Check if all the numbers in the list are divisible by n and n is greater than or equal to the lower bound.\"\"\"\n    return all((i % n == 0 for i in nums)) and n >= lower_bound\ndef g(nums=[3584903, 493840, 582039, 728490238], lower_bound=1000000):\n    n = 1\n    for i in nums:\n        n *= i\n    return n\nassert f(g())\n", "emb": null, "idx_generation": 264, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[3584903, 493840, 582039, 728490238], lower_bound=1000000) -> bool:\n    \"\"\"Check if all the numbers in the list are divisible by n and n is greater than or equal to the lower bound.\"\"\"\n    return all((i % n == 0 for i in nums)) and n >= lower_bound", "solution_func": "def g(nums=[3584903, 493840, 582039, 728490238], lower_bound=1000000):\n    n = 1\n    for i in nums:\n        n *= i\n    return n", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(grid: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Check if a target number is present in the grid.\n    \"\"\"\n    for row in grid:\n        if target in row:\n            return True\n    return False\ndef g(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target = 5):\n    return target\nassert f(g())\n", "emb": null, "idx_generation": 265, "target_skills": null, "problem_func": "from typing import*\ndef f(grid: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Check if a target number is present in the grid.\n    \"\"\"\n    for row in grid:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target = 5):\n    return target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(word: str, words: List[str]) -> bool:\n    \"\"\"\n    Determine if a given word is an anagram of any word in the list.\n    \"\"\"\n    sorted_word = sorted(word)\n    for w in words:\n        if sorted_word == sorted(w):\n            return True\n    return False\ndef g(words = ['cat', 'dog', 'tac', 'god'], word = 'act'):\n    return word\nassert f(g())\n", "emb": null, "idx_generation": 265, "target_skills": null, "problem_func": "from typing import*\ndef f(word: str, words: List[str]) -> bool:\n    \"\"\"\n    Determine if a given word is an anagram of any word in the list.\n    \"\"\"\n    sorted_word = sorted(word)\n    for w in words:\n        if sorted_word == sorted(w):\n            return True\n    return False", "solution_func": "def g(words = ['cat', 'dog', 'tac', 'god'], word = 'act'):\n    return word", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Determine if there are two numbers in the list that add up to the target number.\n    \"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set and complement != num:\n            return True\n    return False\ndef g(nums = [1, 2, 3, 4, 5], target = 9):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 265, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Determine if there are two numbers in the list that add up to the target number.\n    \"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set and complement != num:\n            return True\n    return False", "solution_func": "def g(nums = [1, 2, 3, 4, 5], target = 9):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=16) -> bool:\n    \"\"\"Find a pair of numbers in the list that add up to the target value.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=16):\n    return [1, 5, 8, 9, 12, 14]\nassert f(g())\n", "emb": null, "idx_generation": 265, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=16) -> bool:\n    \"\"\"Find a pair of numbers in the list that add up to the target value.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))", "solution_func": "def g(target=16):\n    return [1, 5, 8, 9, 12, 14]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=42) -> bool:\n    \"\"\"Find a number in the matrix that equals the target value.\"\"\"\n    return any(target in row for row in matrix)\ndef g(target=42):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n", "emb": null, "idx_generation": 265, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=42) -> bool:\n    \"\"\"Find a number in the matrix that equals the target value.\"\"\"\n    return any(target in row for row in matrix)", "solution_func": "def g(target=42):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(words: List[str], prefix=\"py\", suffix=\"on\") -> bool:\n    \"\"\"Find a word in the list that starts with the given prefix and ends with the given suffix.\"\"\"\n    return any(word.startswith(prefix) and word.endswith(suffix) for word in words)\ndef g(prefix=\"py\", suffix=\"on\"):\n    return [\"python\", \"pycharm\", \"jupyter\", \"spyder\"]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 265, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], prefix=\"py\", suffix=\"on\") -> bool:\n    \"\"\"Find a word in the list that starts with the given prefix and ends with the given suffix.\"\"\"\n    return any(word.startswith(prefix) and word.endswith(suffix) for word in words)", "solution_func": "def g(prefix=\"py\", suffix=\"on\"):\n    return [\"python\", \"pycharm\", \"jupyter\", \"spyder\"]", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"\n    Find a combination of numbers in the given list that sums up to the target number.\n    \"\"\"\n    def helper(arr, target, curr_sum, curr_index):\n        if curr_sum == target:\n            return True\n        if curr_index >= len(arr):\n            return False\n        if helper(arr, target, curr_sum + arr[curr_index], curr_index + 1):\n            return True\n        if helper(arr, target, curr_sum, curr_index + 1):\n            return True\n        return False\n    \n    return helper(arr, target, 0, 0)\n\ndef g(arr=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], target=100):\n    return arr\n\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0], "idx_generation": 265, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"\n    Find a combination of numbers in the given list that sums up to the target number.\n    \"\"\"\n    def helper(arr, target, curr_sum, curr_index):\n        if curr_sum == target:\n            return True\n        if curr_index >= len(arr):\n            return False\n        if helper(arr, target, curr_sum + arr[curr_index], curr_index + 1):\n            return True\n        if helper(arr, target, curr_sum, curr_index + 1):\n            return True\n        return False\n    \n    return helper(arr, target, 0, 0)", "solution_func": "def g(arr=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], target=100):\n    return arr", "map_ix": [0, 1, 0, 0, 0, 0, 0, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target='tacocat') -> bool:\n    \"\"\"\n    Check if the given string is a palindrome.\n    \"\"\"\n    return s == s[::-1]\n\ndef g(target='tacocat'):\n    return target\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 265, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='tacocat') -> bool:\n    \"\"\"\n    Check if the given string is a palindrome.\n    \"\"\"\n    return s == s[::-1]", "solution_func": "def g(target='tacocat'):\n    return target", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"\n    Check if there exists a path in the matrix from the top left corner to the bottom right corner\n    such that the sum of all elements in the path is equal to the target number.\n    \"\"\"\n    def helper(matrix, target, curr_sum, row, col):\n        if row >= len(matrix) or col >= len(matrix[0]):\n            return False\n        curr_sum += matrix[row][col]\n        if curr_sum == target:\n            return True\n        if helper(matrix, target, curr_sum, row + 1, col) or helper(matrix, target, curr_sum, row, col + 1):\n            return True\n        return False\n    \n    return helper(matrix, target, 0, 0, 0)\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=10):\n    return matrix\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 265, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"\n    Check if there exists a path in the matrix from the top left corner to the bottom right corner\n    such that the sum of all elements in the path is equal to the target number.\n    \"\"\"\n    def helper(matrix, target, curr_sum, row, col):\n        if row >= len(matrix) or col >= len(matrix[0]):\n            return False\n        curr_sum += matrix[row][col]\n        if curr_sum == target:\n            return True\n        if helper(matrix, target, curr_sum, row + 1, col) or helper(matrix, target, curr_sum, row, col + 1):\n            return True\n        return False\n    \n    return helper(matrix, target, 0, 0, 0)", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=10):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[str], a=\"apple\", b=\"banana\", c=\"cherry\") -> bool:\n    \"\"\"Check if the list contains all three specified fruits\"\"\"\n    return a in x and b in x and c in x\n\ndef g(a=\"apple\", b=\"banana\", c=\"cherry\"):\n    return [a, b, c]\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 265, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(x: List[str], a=\"apple\", b=\"banana\", c=\"cherry\") -> bool:\n    \"\"\"Check if the list contains all three specified fruits\"\"\"\n    return a in x and b in x and c in x", "solution_func": "def g(a=\"apple\", b=\"banana\", c=\"cherry\"):\n    return [a, b, c]", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\ndef f(x: float, y: float, z: float, a = 4.5, b = 2.3) -> bool:\n    \"\"\"Check if the given values satisfy the equation (a * x) + (b * y) - (math.sqrt(z)) == 0\"\"\"\n    return (a * x) + (b * y) - (math.sqrt(z)) == 0\ndef g(a = 4.5, b = 2.3):\n    x = 1.0\n    y = (math.sqrt(a) - (b * x)) / (b)\n    z = (a * x - b * y) ** 2\n    return x, y, z\nassert f(*g())\n", "emb": null, "idx_generation": 266, "target_skills": null, "problem_func": "from typing import*\nimport math\ndef f(x: float, y: float, z: float, a = 4.5, b = 2.3) -> bool:\n    \"\"\"Check if the given values satisfy the equation (a * x) + (b * y) - (math.sqrt(z)) == 0\"\"\"\n    return (a * x) + (b * y) - (math.sqrt(z)) == 0", "solution_func": "def g(a = 4.5, b = 2.3):\n    x = 1.0\n    y = (math.sqrt(a) - (b * x)) / (b)\n    z = (a * x - b * y) ** 2\n    return x, y, z", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\ndef f(numbers: List[int], n = 20, target = 50) -> bool:\n    \"\"\"Find a pair of numbers from the given list that sums up to the target\"\"\"\n    pairs = [(i, j) for i in numbers for j in numbers if i + j == target]\n    return len(pairs) >= n\ndef g(n = 20, target = 50):\n    numbers = random.choices(range(1, target), k = n)\n    return numbers\nassert f(g())\n", "emb": null, "idx_generation": 266, "target_skills": null, "problem_func": "from typing import*\nimport random\ndef f(numbers: List[int], n = 20, target = 50) -> bool:\n    \"\"\"Find a pair of numbers from the given list that sums up to the target\"\"\"\n    pairs = [(i, j) for i in numbers for j in numbers if i + j == target]\n    return len(pairs) >= n", "solution_func": "def g(n = 20, target = 50):\n    numbers = random.choices(range(1, target), k = n)\n    return numbers", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport datetime\ndef f(date_str: str, time_str: str, day: int, month: int, year: int) -> bool:\n    \"\"\"Check if the given date and time match the specified day, month, and year\"\"\"\n    date = datetime.datetime.strptime(date_str, \"%Y-%m-%d\").date()\n    time = datetime.datetime.strptime(time_str, \"%H:%M:%S\").time()\n    return date.day == day and date.month == month and date.year == year and time.hour < 12\ndef g(day = 15, month = 8, year = 2022):\n    date_str = f\"{year}-{month}-{day}\"\n    time_str = \"10:30:00\"\n    return date_str, time_str\nassert f(*g())\n", "emb": null, "idx_generation": 266, "target_skills": null, "problem_func": "from typing import*\nimport datetime\ndef f(date_str: str, time_str: str, day: int, month: int, year: int) -> bool:\n    \"\"\"Check if the given date and time match the specified day, month, and year\"\"\"\n    date = datetime.datetime.strptime(date_str, \"%Y-%m-%d\").date()\n    time = datetime.datetime.strptime(time_str, \"%H:%M:%S\").time()\n    return date.day == day and date.month == month and date.year == year and time.hour < 12", "solution_func": "def g(day = 15, month = 8, year = 2022):\n    date_str = f\"{year}-{month}-{day}\"\n    time_str = \"10:30:00\"\n    return date_str, time_str", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target=8) -> bool:\n    \"\"\"Check if the sum of each row in a 2D array is equal to a given target\"\"\"\n    return np.all(np.sum(arr, axis=1) == target)\n\ndef g(arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), target = 8):\n    return arr\n\nassert f(g())\n", "emb": null, "idx_generation": 266, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target=8) -> bool:\n    \"\"\"Check if the sum of each row in a 2D array is equal to a given target\"\"\"\n    return np.all(np.sum(arr, axis=1) == target)", "solution_func": "def g(arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), target = 8):\n    return arr", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substr='hello') -> bool:\n    \"\"\"Check if a given substring is present in a string\"\"\"\n    return substr in s\n\ndef g(substr = 'hello'):\n    return 'This is a hello world string.'\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 266, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substr='hello') -> bool:\n    \"\"\"Check if a given substring is present in a string\"\"\"\n    return substr in s", "solution_func": "def g(substr = 'hello'):\n    return 'This is a hello world string.'", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Check if the sum of any two elements in a list is equal to a given target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(arr = [10, 20, 30, 40, 50]):\n    return arr\n\nassert f(g())\n", "emb": null, "idx_generation": 266, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Check if the sum of any two elements in a list is equal to a given target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g(arr = [10, 20, 30, 40, 50]):\n    return arr", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target='apple', n=2) -> bool:\n    \"\"\"\n    Check if a target string appears n times in a given string.\n    \"\"\"\n    return s.count(target) == n\ndef g(target='apple', n=2):\n    return target * n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 266, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='apple', n=2) -> bool:\n    \"\"\"\n    Check if a target string appears n times in a given string.\n    \"\"\"\n    return s.count(target) == n", "solution_func": "def g(target='apple', n=2):\n    return target * n", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, x=6, y=9) -> bool:\n    \"\"\"\n    Check if a given number is a multiple of both x and y.\n    \"\"\"\n    return n % x == 0 and n % y == 0\ndef g(x=6, y=9):\n    return x * y\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 266, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, x=6, y=9) -> bool:\n    \"\"\"\n    Check if a given number is a multiple of both x and y.\n    \"\"\"\n    return n % x == 0 and n % y == 0", "solution_func": "def g(x=6, y=9):\n    return x * y", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(li: list, target=0) -> bool:\n    \"\"\"\n    Check if the sum of any two numbers in a list is equal to the target number.\n    \"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i] + li[j] == target:\n                return True\n    return False\ndef g(li=[1, 2, 3, 4, 5], target=0):\n    return li\nassert f(g())\n", "emb": null, "idx_generation": 266, "target_skills": null, "problem_func": "from typing import*\ndef f(li: list, target=0) -> bool:\n    \"\"\"\n    Check if the sum of any two numbers in a list is equal to the target number.\n    \"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i] + li[j] == target:\n                return True\n    return False", "solution_func": "def g(li=[1, 2, 3, 4, 5], target=0):\n    return li", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(words: List[str], target_word=\"python\", length=6) -> bool:\n    \"\"\"Find a list of words that have a length of 'length' and contain the target word.\"\"\"\n    return all((len(word) == length and target_word in word for word in words))\ndef g(target_word=\"python\", length=6):\n    return [target_word + str(i) for i in range(10)]\nassert f(g())\n", "emb": null, "idx_generation": 266, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], target_word=\"python\", length=6) -> bool:\n    \"\"\"Find a list of words that have a length of 'length' and contain the target word.\"\"\"\n    return all((len(word) == length and target_word in word for word in words))", "solution_func": "def g(target_word=\"python\", length=6):\n    return [target_word + str(i) for i in range(10)]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, lst: List[int], target: int) -> bool:\n    \"\"\"Determine if there are n elements in the list that sum up to the target value.\"\"\"\n    if n == 0 and target == 0:\n        return True\n    if n == 0 or target < 0 or len(lst) == 0:\n        return False\n\n    return f(n - 1, lst[1:], target - lst[0]) or f(n, lst[1:], target)\ndef g(lst = [2, 4, 6, 8, 10], target = 20):\n    return f(len(lst), lst, target)\nassert g() is True\n\nassert f(g()) == True", "emb": null, "idx_generation": 267, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst: List[int], target: int) -> bool:\n    \"\"\"Determine if there are n elements in the list that sum up to the target value.\"\"\"\n    if n == 0 and target == 0:\n        return True\n    if n == 0 or target < 0 or len(lst) == 0:\n        return False\n\n    return f(n - 1, lst[1:], target - lst[0]) or f(n, lst[1:], target)", "solution_func": "def g(lst = [2, 4, 6, 8, 10], target = 20):\n    return f(len(lst), lst, target)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if there is a sublist of length n that contains only odd numbers.\"\"\"\n    for i in range(len(lst) - n + 1):\n        if all(num % 2 != 0 for num in lst[i: i + n]):\n            return True\n    return False\ndef g(lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n = 3):\n    return f(n, lst)\nassert g() is True\n\nassert f(g()) == True", "emb": null, "idx_generation": 267, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if there is a sublist of length n that contains only odd numbers.\"\"\"\n    for i in range(len(lst) - n + 1):\n        if all(num % 2 != 0 for num in lst[i: i + n]):\n            return True\n    return False", "solution_func": "def g(lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n = 3):\n    return f(n, lst)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if the list can be partitioned into n sublists with equal sums.\"\"\"\n    if sum(lst) % n != 0:\n        return False\n    \n    target_sum = sum(lst) // n\n    dp = [[False] * (target_sum + 1) for _ in range(len(lst) + 1)]\n    dp[0][0] = True\n\n    for i in range(1, len(lst) + 1):\n        dp[i][0] = True\n\n    for i in range(1, len(lst) + 1):\n        for j in range(1, target_sum + 1):\n            if lst[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - lst[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    \n    return dp[len(lst)][target_sum]\ndef g(lst = [1, 5, 11, 5]):\n    return f(2, lst)\nassert g() is True\n\nassert f(g()) == True", "emb": null, "idx_generation": 267, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if the list can be partitioned into n sublists with equal sums.\"\"\"\n    if sum(lst) % n != 0:\n        return False\n    \n    target_sum = sum(lst) // n\n    dp = [[False] * (target_sum + 1) for _ in range(len(lst) + 1)]\n    dp[0][0] = True\n\n    for i in range(1, len(lst) + 1):\n        dp[i][0] = True\n\n    for i in range(1, len(lst) + 1):\n        for j in range(1, target_sum + 1):\n            if lst[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - lst[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    \n    return dp[len(lst)][target_sum]", "solution_func": "def g(lst = [1, 5, 11, 5]):\n    return f(2, lst)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target=\"hello\") -> bool:\n    \"\"\"\n    Given a string `s`, determine if it contains the substring `target`.\n    \"\"\"\n    return target in s\ndef g(target=\"hello\"):\n    return \"This is a hello world example\"\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 267, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target=\"hello\") -> bool:\n    \"\"\"\n    Given a string `s`, determine if it contains the substring `target`.\n    \"\"\"\n    return target in s", "solution_func": "def g(target=\"hello\"):\n    return \"This is a hello world example\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers `arr`, determine if there are two elements in the list that add up to the target value.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [2, 4, 6, 8]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 267, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers `arr`, determine if there are two elements in the list that add up to the target value.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g(target=10):\n    return [2, 4, 6, 8]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, m: int, target=12) -> bool:\n    \"\"\"\n    Given two integers `n` and `m`, determine if their product is equal to the target value.\n    \"\"\"\n    return n * m == target\ndef g(target=12):\n    return 3, 4\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 267, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m: int, target=12) -> bool:\n    \"\"\"\n    Given two integers `n` and `m`, determine if their product is equal to the target value.\n    \"\"\"\n    return n * m == target", "solution_func": "def g(target=12):\n    return 3, 4", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=10, y=20, z=30) -> bool:\n    \"\"\"Check if a given number is a perfect square and if it is divisible by both x and y.\n\n    Sample Input:\n    n = 100\n    x = 5\n    y = 10\n    z = 15\n\n    Sample Output:\n    True\n    \"\"\"\n    return math.isqrt(n)**2 == n and n % x == 0 and n % y == 0 and n % z == 0\n\ndef g(n=100, x=5, y=10, z=15):\n    return n\n\nassert f(g())\n", "emb": null, "idx_generation": 267, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, x=10, y=20, z=30) -> bool:\n    \"\"\"Check if a given number is a perfect square and if it is divisible by both x and y.\n\n    Sample Input:\n    n = 100\n    x = 5\n    y = 10\n    z = 15\n\n    Sample Output:\n    True\n    \"\"\"\n    return math.isqrt(n)**2 == n and n % x == 0 and n % y == 0 and n % z == 0", "solution_func": "def g(n=100, x=5, y=10, z=15):\n    return n", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(deck: List[int], x=5, y=10, z=15) -> bool:\n    \"\"\"Check if a given deck of cards has at least x number of red cards, y number of black cards, and z number of joker cards.\n\n    Sample Input:\n    deck = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    x = 3\n    y = 5\n    z = 2\n\n    Sample Output:\n    True\n    \"\"\"\n    red_cards = 0\n    black_cards = 0\n    joker_cards = 0\n\n    for card in deck:\n        if card <= 13:\n            red_cards += 1\n        elif card <= 26:\n            black_cards += 1\n        else:\n            joker_cards += 1\n\n    return red_cards >= x and black_cards >= y and joker_cards >= z\n\ndef g(deck=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], x=3, y=5, z=2):\n    random.shuffle(deck)\n    return deck\n\nassert f(g())\n", "emb": null, "idx_generation": 267, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(deck: List[int], x=5, y=10, z=15) -> bool:\n    \"\"\"Check if a given deck of cards has at least x number of red cards, y number of black cards, and z number of joker cards.\n\n    Sample Input:\n    deck = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    x = 3\n    y = 5\n    z = 2\n\n    Sample Output:\n    True\n    \"\"\"\n    red_cards = 0\n    black_cards = 0\n    joker_cards = 0\n\n    for card in deck:\n        if card <= 13:\n            red_cards += 1\n        elif card <= 26:\n            black_cards += 1\n        else:\n            joker_cards += 1\n\n    return red_cards >= x and black_cards >= y and joker_cards >= z", "solution_func": "def g(deck=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], x=3, y=5, z=2):\n    random.shuffle(deck)\n    return deck", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport itertools\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a non-empty sublist of a given list of integers that has a sum equal to the target.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 7\n\n    Sample Output:\n    True\n    \"\"\"\n    for r in range(1, len(nums) + 1):\n        for subset in itertools.combinations(nums, r):\n            if sum(subset) == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=7):\n    return nums\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 267, "target_skills": null, "problem_func": "from typing import*\nimport itertools\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a non-empty sublist of a given list of integers that has a sum equal to the target.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 7\n\n    Sample Output:\n    True\n    \"\"\"\n    for r in range(1, len(nums) + 1):\n        for subset in itertools.combinations(nums, r):\n            if sum(subset) == target:\n                return True\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=7):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_sum = 0) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target sum, determine if there exists a submatrix whose sum is equal to the target sum.\n    \"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    for i in range(n):\n        for j in range(m):\n            for k in range(i, n):\n                for l in range(j, m):\n                    submatrix_sum = sum(matrix[x][y] for x in range(i, k+1) for y in range(j, l+1))\n                    if submatrix_sum == target_sum:\n                        return True\n    return False\ndef g(matrix = [[1,2,3],[4,5,6],[7,8,9]], target_sum = 0):\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 267, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_sum = 0) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target sum, determine if there exists a submatrix whose sum is equal to the target sum.\n    \"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    for i in range(n):\n        for j in range(m):\n            for k in range(i, n):\n                for l in range(j, m):\n                    submatrix_sum = sum(matrix[x][y] for x in range(i, k+1) for y in range(j, l+1))\n                    if submatrix_sum == target_sum:\n                        return True\n    return False", "solution_func": "def g(matrix = [[1,2,3],[4,5,6],[7,8,9]], target_sum = 0):\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(x: int, y: int, z: int) -> bool:\n    \"\"\"Check if x is a perfect square and y is a perfect cube and z is a perfect 4th power\"\"\"\n    return math.isqrt(x) ** 2 == x and round(y ** (1/3)) ** 3 == y and round(z ** (1/4)) ** 4 == z\n\ndef g():\n    x = 16\n    y = 27\n    z = 256\n    return x, y, z\n\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 268, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: int, y: int, z: int) -> bool:\n    \"\"\"Check if x is a perfect square and y is a perfect cube and z is a perfect 4th power\"\"\"\n    return math.isqrt(x) ** 2 == x and round(y ** (1/3)) ** 3 == y and round(z ** (1/4)) ** 4 == z", "solution_func": "def g():\n    x = 16\n    y = 27\n    z = 256\n    return x, y, z", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\n\ndef f(n: list) -> bool:\n    \"\"\"Check if the given list contains a duplicate element\"\"\"\n    return len(set(n)) != len(n)\n\ndef g():\n    n = random.sample(range(1, 10000), 9999)\n    n.append(random.choice(range(1, 10000)))\n    return n\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 268, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(n: list) -> bool:\n    \"\"\"Check if the given list contains a duplicate element\"\"\"\n    return len(set(n)) != len(n)", "solution_func": "def g():\n    n = random.sample(range(1, 10000), 9999)\n    n.append(random.choice(range(1, 10000)))\n    return n", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a palindrome\"\"\"\n    return s == s[::-1]\n\ndef g():\n    s = \"racecar\"\n    return s\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 268, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a palindrome\"\"\"\n    return s == s[::-1]", "solution_func": "def g():\n    s = \"racecar\"\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(l: List[int], target=1001) -> bool:\n    \"\"\"Check if there exists three distinct integers in a list that sum up to a target value\"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == target:\n                    return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n", "emb": null, "idx_generation": 268, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(l: List[int], target=1001) -> bool:\n    \"\"\"Check if there exists three distinct integers in a list that sum up to a target value\"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == target:\n                    return True\n    return False", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(l: List[int], target=0) -> bool:\n    \"\"\"Check if there exists four distinct integers in a list that sum up to a target value\"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                for m in range(k+1, len(l)):\n                    if l[i] + l[j] + l[k] + l[m] == target:\n                        return True\n    return False\n\ndef g():\n    return [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]\n\nassert f(g())\n", "emb": null, "idx_generation": 268, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(l: List[int], target=0) -> bool:\n    \"\"\"Check if there exists four distinct integers in a list that sum up to a target value\"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                for m in range(k+1, len(l)):\n                    if l[i] + l[j] + l[k] + l[m] == target:\n                        return True\n    return False", "solution_func": "def g():\n    return [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(l: List[int], target=0) -> bool:\n    \"\"\"Check if there exists two distinct integers in a list that sum up to a target value\"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n", "emb": null, "idx_generation": 268, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(l: List[int], target=0) -> bool:\n    \"\"\"Check if there exists two distinct integers in a list that sum up to a target value\"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == target:\n                return True\n    return False", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that sums up to the target\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target = 100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n", "emb": null, "idx_generation": 268, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that sums up to the target\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(target = 100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if the target number exists in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n", "emb": null, "idx_generation": 268, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if the target number exists in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there are exactly two numbers in the list that sum up to the target\"\"\"\n    count = 0\n    for num in nums:\n        complement = target - num\n        if complement in nums:\n            count += 1\n    return count == 2\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n", "emb": null, "idx_generation": 268, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there are exactly two numbers in the list that sum up to the target\"\"\"\n    count = 0\n    for num in nums:\n        complement = target - num\n        if complement in nums:\n            count += 1\n    return count == 2", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, k=3, n=7) -> bool:\n    \"\"\"Find if there are k consecutive occurrences of the substring s in the string 'ab'*n\"\"\"\n    return s * k in 'ab' * (2 * n)\ndef g(k=3, n=7):\n    return 'ab' * n\nassert f(g())\n", "emb": null, "idx_generation": 268, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, k=3, n=7) -> bool:\n    \"\"\"Find if there are k consecutive occurrences of the substring s in the string 'ab'*n\"\"\"\n    return s * k in 'ab' * (2 * n)", "solution_func": "def g(k=3, n=7):\n    return 'ab' * n", "map_ix": null}, {"fitness": 1.0, "program_str": "import math\nfrom typing import*\ndef f(n: int, m=4) -> bool:\n    \"\"\"Determine if n is a power of m\"\"\"\n    return n > 0 and m > 1 and m ** (int(math.log(n, m))) == n\ndef g(m = 4):\n    return m ** 3\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 269, "target_skills": null, "problem_func": "import math\nfrom typing import*\ndef f(n: int, m=4) -> bool:\n    \"\"\"Determine if n is a power of m\"\"\"\n    return n > 0 and m > 1 and m ** (int(math.log(n, m))) == n", "solution_func": "def g(m = 4):\n    return m ** 3", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(li: List[int], n=5) -> bool:\n    \"\"\"Check if the sum of the first n elements of li is equal to the sum of the last n elements\"\"\"\n    return sum(li[:n]) == sum(li[-n:])\ndef g(n = 5):\n    return [1] * (2*n)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 269, "target_skills": null, "problem_func": "from typing import*\ndef f(li: List[int], n=5) -> bool:\n    \"\"\"Check if the sum of the first n elements of li is equal to the sum of the last n elements\"\"\"\n    return sum(li[:n]) == sum(li[-n:])", "solution_func": "def g(n = 5):\n    return [1] * (2*n)", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=16) -> bool:\n    \"\"\"Check if the sum of all elements in the matrix is equal to target\"\"\"\n    return sum(sum(row) for row in matrix) == target\ndef g(target = 16):\n    return [[1, 2], [3, 4, 5], [6, 7, 8]] * (target // 36)\nassert f(g())\n", "emb": null, "idx_generation": 269, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=16) -> bool:\n    \"\"\"Check if the sum of all elements in the matrix is equal to target\"\"\"\n    return sum(sum(row) for row in matrix) == target", "solution_func": "def g(target = 16):\n    return [[1, 2], [3, 4, 5], [6, 7, 8]] * (target // 36)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Return True if there exist two integers in nums such that their sum is equal to target\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target = 5):\n    return [1, 2, 3, 4, target-10]\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 269, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Return True if there exist two integers in nums such that their sum is equal to target\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))", "solution_func": "def g(target = 5):\n    return [1, 2, 3, 4, target-10]", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(characters: List[str], target='python') -> bool:\n    \"\"\"Check if the characters in the list can be rearranged to form the target string\"\"\"\n    return sorted(characters) == sorted(target)\ndef g(target = 'python'):\n    return list(target)\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 269, "target_skills": null, "problem_func": "from typing import*\ndef f(characters: List[str], target='python') -> bool:\n    \"\"\"Check if the characters in the list can be rearranged to form the target string\"\"\"\n    return sorted(characters) == sorted(target)", "solution_func": "def g(target = 'python'):\n    return list(target)", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Find if there exists a path in the matrix such that the sum of the elements in the path is equal to the target value\"\"\"\n    m, n = len(matrix), len(matrix[0])\n    def dfs(i, j, curr_sum):\n        if i == m-1 and j == n-1:\n            return curr_sum + matrix[i][j] == target\n        if i < m-1 and dfs(i+1, j, curr_sum + matrix[i][j]):\n            return True\n        if j < n-1 and dfs(i, j+1, curr_sum + matrix[i][j]):\n            return True\n        return False\n    return dfs(0, 0, 0)\ndef g(target = 20):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, target - 6 - 5 - 4]]\nassert f(g())\n", "emb": null, "idx_generation": 269, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Find if there exists a path in the matrix such that the sum of the elements in the path is equal to the target value\"\"\"\n    m, n = len(matrix), len(matrix[0])\n    def dfs(i, j, curr_sum):\n        if i == m-1 and j == n-1:\n            return curr_sum + matrix[i][j] == target\n        if i < m-1 and dfs(i+1, j, curr_sum + matrix[i][j]):\n            return True\n        if j < n-1 and dfs(i, j+1, curr_sum + matrix[i][j]):\n            return True\n        return False\n    return dfs(0, 0, 0)", "solution_func": "def g(target = 20):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, target - 6 - 5 - 4]]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], n: int, threshold=50) -> bool:\n    \"\"\"Check if the sum of all elements in the matrix is greater than a given threshold\"\"\"\n    return sum(sum(row) for row in matrix) > threshold\ndef g(n = 50, threshold = 50):\n    return [[1] * n] * n\nassert f(g())\n", "emb": null, "idx_generation": 269, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n: int, threshold=50) -> bool:\n    \"\"\"Check if the sum of all elements in the matrix is greater than a given threshold\"\"\"\n    return sum(sum(row) for row in matrix) > threshold", "solution_func": "def g(n = 50, threshold = 50):\n    return [[1] * n] * n", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, substring: str, count=10) -> bool:\n    \"\"\"Check if a substring appears count number of times in a string\"\"\"\n    return s.count(substring) == count\ndef g(substring = 'ab', count = 10):\n    return substring * count\nassert f(g())\n", "emb": null, "idx_generation": 269, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substring: str, count=10) -> bool:\n    \"\"\"Check if a substring appears count number of times in a string\"\"\"\n    return s.count(substring) == count", "solution_func": "def g(substring = 'ab', count = 10):\n    return substring * count", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(li: List[int], n: int, target=0) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to a given target\"\"\"\n    lookup = {}\n    for num in li:\n        if target - num in lookup:\n            return True\n        lookup[num] = True\n    return False\ndef g(n = 0, target = 0):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n", "emb": null, "idx_generation": 269, "target_skills": null, "problem_func": "from typing import*\ndef f(li: List[int], n: int, target=0) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to a given target\"\"\"\n    lookup = {}\n    for num in li:\n        if target - num in lookup:\n            return True\n        lookup[num] = True\n    return False", "solution_func": "def g(n = 0, target = 0):\n    return [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(nums: List[int], target=1000000) -> bool:\n    \"\"\"Find three numbers in the list that sum up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(target=1000000):\n    import random\n    nums = [random.randint(1, 100) for _ in range(10)]\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 269, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(nums: List[int], target=1000000) -> bool:\n    \"\"\"Find three numbers in the list that sum up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False", "solution_func": "def g(target=1000000):\n    import random\n    nums = [random.randint(1, 100) for _ in range(10)]\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(s: str, target: List[int] = [3, 2, 1, 3, 2, 1]) -> bool:\n    \"\"\"Check if the string has the same number of occurrences for each character as the target list\"\"\"\n    char_count = {c: s.count(c) for c in set(s)}\n    return list(char_count.values()) == target\n\ndef g(target: List[int] = [3, 2, 1, 3, 2, 1]) -> str:\n    \"\"\"Create a string with the same number of occurrences for each character as the target list\"\"\"\n    char_list = []\n    for i, count in enumerate(target):\n        char_list.extend([chr(ord('a') + i)] * count)\n    return ''.join(char_list)\n\nassert f(g())\n", "emb": null, "idx_generation": 270, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(s: str, target: List[int] = [3, 2, 1, 3, 2, 1]) -> bool:\n    \"\"\"Check if the string has the same number of occurrences for each character as the target list\"\"\"\n    char_count = {c: s.count(c) for c in set(s)}\n    return list(char_count.values()) == target", "solution_func": "def g(target: List[int] = [3, 2, 1, 3, 2, 1]) -> str:\n    \"\"\"Create a string with the same number of occurrences for each character as the target list\"\"\"\n    char_list = []\n    for i, count in enumerate(target):\n        char_list.extend([chr(ord('a') + i)] * count)\n    return ''.join(char_list)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(li: List[int], target: int = 100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target number\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i] + li[j] == target:\n                return True\n    return False\n\ndef g(target: int = 100) -> List[int]:\n    \"\"\"Generate a list of numbers that has a pair adding up to the target number\"\"\"\n    return [target//2, target//2]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 270, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(li: List[int], target: int = 100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target number\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i] + li[j] == target:\n                return True\n    return False", "solution_func": "def g(target: int = 100) -> List[int]:\n    \"\"\"Generate a list of numbers that has a pair adding up to the target number\"\"\"\n    return [target//2, target//2]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that subtract to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] - nums[j] == target:\n                return True\n    return False\n\ndef g(target: int = 0) -> List[int]:\n    \"\"\"Generate a list of numbers that has a pair subtracting to the target number\"\"\"\n    return [target, 0]\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0], "idx_generation": 270, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that subtract to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] - nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target: int = 0) -> List[int]:\n    \"\"\"Generate a list of numbers that has a pair subtracting to the target number\"\"\"\n    return [target, 0]", "map_ix": [1, 0, 0, 0, 0, 1, 1, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, s='ababab') -> bool:\n    \"\"\"Check if the string s can be divided into n equal parts\"\"\"\n    return len(s) % n == 0 and all(s[i:i+len(s)//n] == s[:len(s)//n] for i in range(0, len(s), len(s)//n))\ndef g(s = 'ababab'):\n    return len(s)\nassert f(g())\n", "emb": null, "idx_generation": 270, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, s='ababab') -> bool:\n    \"\"\"Check if the string s can be divided into n equal parts\"\"\"\n    return len(s) % n == 0 and all(s[i:i+len(s)//n] == s[:len(s)//n] for i in range(0, len(s), len(s)//n))", "solution_func": "def g(s = 'ababab'):\n    return len(s)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the sum of any two numbers in lst is equal to n\"\"\"\n    return any(n - num in lst for num in lst)\ndef g(lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return sum(lst)\nassert f(g())\n", "emb": null, "idx_generation": 270, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the sum of any two numbers in lst is equal to n\"\"\"\n    return any(n - num in lst for num in lst)", "solution_func": "def g(lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return sum(lst)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the product of any two numbers in lst is equal to n\"\"\"\n    return any(n / num in lst for num in lst)\ndef g(lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return len(lst)\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 270, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the product of any two numbers in lst is equal to n\"\"\"\n    return any(n / num in lst for num in lst)", "solution_func": "def g(lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return len(lst)", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the array that sum up to the target value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return arr\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 270, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the array that sum up to the target value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Return True if there are exactly k consecutive numbers in the list\"\"\"\n    nums.sort()\n    for i in range(len(nums) - k + 1):\n        if nums[i] + k - 1 == nums[i + k - 1]:\n            return True\n    return False\ndef g(k = 3):\n    return [1, 2, 3, 4, 5, 6]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 270, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Return True if there are exactly k consecutive numbers in the list\"\"\"\n    nums.sort()\n    for i in range(len(nums) - k + 1):\n        if nums[i] + k - 1 == nums[i + k - 1]:\n            return True\n    return False", "solution_func": "def g(k = 3):\n    return [1, 2, 3, 4, 5, 6]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(grid: List[List[int]], target=0) -> bool:\n    \"\"\"Find the target value in the grid\"\"\"\n    for row in grid:\n        if target in row:\n            return True\n    return False\ndef g(target = 0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n", "emb": null, "idx_generation": 270, "target_skills": null, "problem_func": "from typing import*\ndef f(grid: List[List[int]], target=0) -> bool:\n    \"\"\"Find the target value in the grid\"\"\"\n    for row in grid:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(target = 0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": null}, {"fitness": 1.0, "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(radius: float, volume=904.78) -> bool:\n    \"\"\"Check if the volume of a sphere matches the given value.\"\"\"\n    return abs(4 / 3 * 3.14159 * radius ** 3 - volume) < 0.01\ndef g(volume = 904.78):\n    radius = (volume * 3 / (4 * 3.14159)) ** (1 / 3)\n    return radius\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 270, "target_skills": null, "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(radius: float, volume=904.78) -> bool:\n    \"\"\"Check if the volume of a sphere matches the given value.\"\"\"\n    return abs(4 / 3 * 3.14159 * radius ** 3 - volume) < 0.01", "solution_func": "def g(volume = 904.78):\n    radius = (volume * 3 / (4 * 3.14159)) ** (1 / 3)\n    return radius", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(word: str, letter='a') -> bool:\n    \"\"\"Check if a specific letter is present in a word\"\"\"\n    return letter in word\ndef g(word='apple', letter='a'):\n    return word\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 271, "target_skills": null, "problem_func": "from typing import*\ndef f(word: str, letter='a') -> bool:\n    \"\"\"Check if a specific letter is present in a word\"\"\"\n    return letter in word", "solution_func": "def g(word='apple', letter='a'):\n    return word", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], n=10) -> bool:\n    \"\"\"Check if the sum of the numbers is greater than a specific value\"\"\"\n    return sum(nums) > n\ndef g(nums=[1, 2, 3, 4, 5], n=10):\n    return nums\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 271, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], n=10) -> bool:\n    \"\"\"Check if the sum of the numbers is greater than a specific value\"\"\"\n    return sum(nums) > n", "solution_func": "def g(nums=[1, 2, 3, 4, 5], n=10):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=0) -> bool:\n    \"\"\"Check if a specific number is present in a matrix\"\"\"\n    return any(n in row for row in matrix)\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], n=0):\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 271, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n=0) -> bool:\n    \"\"\"Check if a specific number is present in a matrix\"\"\"\n    return any(n in row for row in matrix)", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], n=0):\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray) -> bool:\n    \"\"\"\n    Check if the given array is a Toeplitz matrix.\n\n    A Toeplitz matrix is a matrix in which each descending diagonal from left to right is constant. \n    For example, the following matrix is a Toeplitz matrix:\n    [1, 2, 3, 4]\n    [5, 1, 2, 3]\n    [6, 5, 1, 2]\n    [7, 6, 5, 1]\n\n    The function should return True if the input array is a Toeplitz matrix, and False otherwise.\n    \"\"\"\n    return np.all(arr[:-1, :-1] == arr[1:, 1:])\ndef g():\n    return np.array([[1, 2, 3, 4], [5, 1, 2, 3], [6, 5, 1, 2], [7, 6, 5, 1]])\nassert f(g())\n", "emb": [1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0], "idx_generation": 271, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray) -> bool:\n    \"\"\"\n    Check if the given array is a Toeplitz matrix.\n\n    A Toeplitz matrix is a matrix in which each descending diagonal from left to right is constant. \n    For example, the following matrix is a Toeplitz matrix:\n    [1, 2, 3, 4]\n    [5, 1, 2, 3]\n    [6, 5, 1, 2]\n    [7, 6, 5, 1]\n\n    The function should return True if the input array is a Toeplitz matrix, and False otherwise.\n    \"\"\"\n    return np.all(arr[:-1, :-1] == arr[1:, 1:])", "solution_func": "def g():\n    return np.array([[1, 2, 3, 4], [5, 1, 2, 3], [6, 5, 1, 2], [7, 6, 5, 1]])", "map_ix": [1, 0, 1, 0, 0, 1, 1, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given array is a palindrome.\n\n    A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward, \n    ignoring spaces, punctuation, and capitalization.\n\n    The function should return True if the input array is a palindrome, and False otherwise.\n    \"\"\"\n    return arr == arr[::-1]\ndef g():\n    return [1, 2, 3, 2, 1]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 271, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given array is a palindrome.\n\n    A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward, \n    ignoring spaces, punctuation, and capitalization.\n\n    The function should return True if the input array is a palindrome, and False otherwise.\n    \"\"\"\n    return arr == arr[::-1]", "solution_func": "def g():\n    return [1, 2, 3, 2, 1]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(num: int) -> bool:\n    \"\"\"\n    Check if the given number is a prime number.\n\n    A prime number is a natural number greater than 1 that is not a product of two smaller natural numbers.\n\n    The function should return True if the input number is a prime number, and False otherwise.\n    \"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\ndef g():\n    return 17\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 271, "target_skills": null, "problem_func": "from typing import*\ndef f(num: int) -> bool:\n    \"\"\"\n    Check if the given number is a prime number.\n\n    A prime number is a natural number greater than 1 that is not a product of two smaller natural numbers.\n\n    The function should return True if the input number is a prime number, and False otherwise.\n    \"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "solution_func": "def g():\n    return 17", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(num: int, tolerance=0.001) -> bool:\n    \"\"\"\n    Check if a number is a perfect square within a given tolerance.\n\n    Example:\n    num = 10\n    tolerance = 0.1\n    output: False\n    \"\"\"\n    return abs(num - round(math.sqrt(num))**2) < tolerance\n\ndef g(tolerance=0.001):\n    return tolerance**2\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 271, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(num: int, tolerance=0.001) -> bool:\n    \"\"\"\n    Check if a number is a perfect square within a given tolerance.\n\n    Example:\n    num = 10\n    tolerance = 0.1\n    output: False\n    \"\"\"\n    return abs(num - round(math.sqrt(num))**2) < tolerance", "solution_func": "def g(tolerance=0.001):\n    return tolerance**2", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(lst: List[int], target_sum: int) -> bool:\n    \"\"\"\n    Check if it is possible to select a subset of numbers from the given list such that their sum is equal to the target sum.\n\n    Example:\n    lst = [1, 2, 3, 4, 5]\n    target_sum = 8\n    output: True\n    \"\"\"\n    n = len(lst)\n    for i in range(2**n):\n        subset = [lst[j] for j in range(n) if (i >> j) & 1]\n        if sum(subset) == target_sum:\n            return True\n    return False\n\ndef g(lst=[1, 2, 3, 4, 5], target_sum=8):\n    random.shuffle(lst)\n    return lst\n\nassert f(g())\n", "emb": null, "idx_generation": 271, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(lst: List[int], target_sum: int) -> bool:\n    \"\"\"\n    Check if it is possible to select a subset of numbers from the given list such that their sum is equal to the target sum.\n\n    Example:\n    lst = [1, 2, 3, 4, 5]\n    target_sum = 8\n    output: True\n    \"\"\"\n    n = len(lst)\n    for i in range(2**n):\n        subset = [lst[j] for j in range(n) if (i >> j) & 1]\n        if sum(subset) == target_sum:\n            return True\n    return False", "solution_func": "def g(lst=[1, 2, 3, 4, 5], target_sum=8):\n    random.shuffle(lst)\n    return lst", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s1: str, s2: str, k: int) -> bool:\n    \"\"\"\n    Check if two strings are k-similar.\n\n    Two strings are k-similar if they can be made identical by swapping characters in the same position for at most k times.\n\n    Example:\n    s1 = \"abc\"\n    s2 = \"acb\"\n    k = 2\n    output: True\n    \"\"\"\n    if s1 == s2:\n        return True\n    if sorted(s1) != sorted(s2):\n        return False\n    n = len(s1)\n    swaps = 0\n    for i in range(n):\n        if s1[i] != s2[i]:\n            swaps += 1\n        if swaps > k:\n            return False\n    return True\n\ndef g(k=2):\n    return k\n\nassert f(\"abc\", \"acb\", g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 271, "target_skills": null, "problem_func": "from typing import*\ndef f(s1: str, s2: str, k: int) -> bool:\n    \"\"\"\n    Check if two strings are k-similar.\n\n    Two strings are k-similar if they can be made identical by swapping characters in the same position for at most k times.\n\n    Example:\n    s1 = \"abc\"\n    s2 = \"acb\"\n    k = 2\n    output: True\n    \"\"\"\n    if s1 == s2:\n        return True\n    if sorted(s1) != sorted(s2):\n        return False\n    n = len(s1)\n    swaps = 0\n    for i in range(n):\n        if s1[i] != s2[i]:\n            swaps += 1\n        if swaps > k:\n            return False\n    return True", "solution_func": "def g(k=2):\n    return k", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Find a list of numbers such that the sum is equal to the target\n    \"\"\"\n    return sum(nums) == target\n\ndef g(target=10):\n    nums = []\n    while sum(nums) < target:\n        nums.append(random.randint(1, 10))\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 271, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Find a list of numbers such that the sum is equal to the target\n    \"\"\"\n    return sum(nums) == target", "solution_func": "def g(target=10):\n    nums = []\n    while sum(nums) < target:\n        nums.append(random.randint(1, 10))\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target_char='a') -> bool:\n    \"\"\"\n    Check if a given character is present in a string.\n\n    Sample Input:\n    s = \"Hello, World!\"\n    target_char = \"o\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return target_char in s\ndef g(s='Hello, World!', target_char='a'):\n    return target_char\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 272, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target_char='a') -> bool:\n    \"\"\"\n    Check if a given character is present in a string.\n\n    Sample Input:\n    s = \"Hello, World!\"\n    target_char = \"o\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return target_char in s", "solution_func": "def g(s='Hello, World!', target_char='a'):\n    return target_char", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, li=[1, 8, 3, 5, 2, 7, 4, 6], target=10) -> bool:\n    \"\"\"\n    Check if a target sum can be obtained by adding any two numbers from the list.\n\n    Sample Input:\n    li = [1, 8, 3, 5, 2, 7, 4, 6]\n    target = 10\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i] + li[j] == target:\n                return True\n    return False\ndef g(li=[1, 8, 3, 5, 2, 7, 4, 6], target=10):\n    return li\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 272, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, li=[1, 8, 3, 5, 2, 7, 4, 6], target=10) -> bool:\n    \"\"\"\n    Check if a target sum can be obtained by adding any two numbers from the list.\n\n    Sample Input:\n    li = [1, 8, 3, 5, 2, 7, 4, 6]\n    target = 10\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i] + li[j] == target:\n                return True\n    return False", "solution_func": "def g(li=[1, 8, 3, 5, 2, 7, 4, 6], target=10):\n    return li", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n: int, substr='Python') -> bool:\n    \"\"\"\n    Check if a substring is present in a given string n number of times.\n\n    Sample Input:\n    s = \"Python is a great programming language. Python is used for web development.\"\n    n = 2\n    substr = \"Python\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return s.count(substr) == n\ndef g(s='Python is a great programming language. Python is used for web development.', n=2, substr='Python'):\n    return s\nassert f(g())\n", "emb": null, "idx_generation": 272, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n: int, substr='Python') -> bool:\n    \"\"\"\n    Check if a substring is present in a given string n number of times.\n\n    Sample Input:\n    s = \"Python is a great programming language. Python is used for web development.\"\n    n = 2\n    substr = \"Python\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return s.count(substr) == n", "solution_func": "def g(s='Python is a great programming language. Python is used for web development.', n=2, substr='Python'):\n    return s", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10], lower_bound=1) -> bool:\n    \"\"\"Check if n is a prime number greater than the lower bound.\"\"\"\n    if n <= lower_bound:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g(nums=[2, 4, 6, 8, 10], lower_bound=1):\n    n = max(nums) + 1\n    while True:\n        if f(n, nums, lower_bound):\n            return n\n        n += 1\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 272, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10], lower_bound=1) -> bool:\n    \"\"\"Check if n is a prime number greater than the lower bound.\"\"\"\n    if n <= lower_bound:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "solution_func": "def g(nums=[2, 4, 6, 8, 10], lower_bound=1):\n    n = max(nums) + 1\n    while True:\n        if f(n, nums, lower_bound):\n            return n\n        n += 1", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(l: list, n=10000) -> bool:\n    \"\"\"Check if the sum of the list is equal to n.\"\"\"\n    return sum(l) == n\n\ndef g(n=10000):\n    l = []\n    while sum(l) < n:\n        l.append(random.randint(1, 100))\n    return l\n\nassert f(g())\n", "emb": null, "idx_generation": 272, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(l: list, n=10000) -> bool:\n    \"\"\"Check if the sum of the list is equal to n.\"\"\"\n    return sum(l) == n", "solution_func": "def g(n=10000):\n    l = []\n    while sum(l) < n:\n        l.append(random.randint(1, 100))\n    return l", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, nums=[3, 5, 7, 11, 13], lower_bound=1) -> bool:\n    \"\"\"Check if n is a multiple of all the numbers in the list.\"\"\"\n    return all((n % i == 0 for i in nums)) and n >= lower_bound\n\ndef g(nums=[3, 5, 7, 11, 13], lower_bound=1):\n    n = 1\n    for i in nums:\n        n *= i\n    return n\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 272, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[3, 5, 7, 11, 13], lower_bound=1) -> bool:\n    \"\"\"Check if n is a multiple of all the numbers in the list.\"\"\"\n    return all((n % i == 0 for i in nums)) and n >= lower_bound", "solution_func": "def g(nums=[3, 5, 7, 11, 13], lower_bound=1):\n    n = 1\n    for i in nums:\n        n *= i\n    return n", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers 'arr' and a target value 'target', return True if there exists a pair of numbers in 'arr' that sum up to 'target'.\n    Otherwise, return False.\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(arr = [1, 2, 3, 4, 5], target = 7):\n    return arr, target\n\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 272, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers 'arr' and a target value 'target', return True if there exists a pair of numbers in 'arr' that sum up to 'target'.\n    Otherwise, return False.\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(arr = [1, 2, 3, 4, 5], target = 7):\n    return arr, target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers 'matrix', return True if it is a symmetric matrix.\n    Otherwise, return False.\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    matrix = [[1, 2, 3],\n              [2, 4, 5],\n              [3, 5, 6]]\n    return matrix\n\nassert f(g())\n", "emb": [1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 272, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers 'matrix', return True if it is a symmetric matrix.\n    Otherwise, return False.\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "solution_func": "def g():\n    matrix = [[1, 2, 3],\n              [2, 4, 5],\n              [3, 5, 6]]\n    return matrix", "map_ix": [1, 0, 1, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers 'nums', return True if there exists an element that appears more than once in the list.\n    Otherwise, return False.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    nums = [1, 2, 3, 4, 5, 1]\n    return nums\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 272, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers 'nums', return True if there exists an element that appears more than once in the list.\n    Otherwise, return False.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g():\n    nums = [1, 2, 3, 4, 5, 1]\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(num: float, epsilon=0.0001) -> bool:\n    \"\"\"Check if the square root of a number is within a given epsilon\"\"\"\n    return abs(math.sqrt(num) - int(math.sqrt(num))) < epsilon\n\ndef g(num=72, epsilon=0.0001):\n    return num\n\nassert f(g())\n", "emb": null, "idx_generation": 272, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(num: float, epsilon=0.0001) -> bool:\n    \"\"\"Check if the square root of a number is within a given epsilon\"\"\"\n    return abs(math.sqrt(num) - int(math.sqrt(num))) < epsilon", "solution_func": "def g(num=72, epsilon=0.0001):\n    return num", "map_ix": null}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"Check if it is possible to obtain the target number (default 24) using all four numbers from the given list\"\"\"\n    operators = ['+', '-', '*', '/']\n    \n    def calculate(a, b, operator):\n        if operator == '+':\n            return a + b\n        elif operator == '-':\n            return a - b\n        elif operator == '*':\n            return a * b\n        elif operator == '/':\n            if b != 0:\n                return a / b\n            else:\n                return None\n    \n    def solve(nums):\n        if len(nums) == 1:\n            return nums[0] == target\n        \n        for i, j in permutations(range(len(nums)), 2):\n            a, b = nums[i], nums[j]\n            remaining_nums = [nums[k] for k in range(len(nums)) if k != i and k != j]\n            \n            for operator in operators:\n                result = calculate(a, b, operator)\n                if result is not None:\n                    if solve([result] + remaining_nums):\n                        return True\n        \n        return False\n    \n    return solve(nums)\n\ndef g(nums=[4, 7, 8, 2]):\n    return nums\n\nassert f(g())\n", "emb": [0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 273, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"Check if it is possible to obtain the target number (default 24) using all four numbers from the given list\"\"\"\n    operators = ['+', '-', '*', '/']\n    \n    def calculate(a, b, operator):\n        if operator == '+':\n            return a + b\n        elif operator == '-':\n            return a - b\n        elif operator == '*':\n            return a * b\n        elif operator == '/':\n            if b != 0:\n                return a / b\n            else:\n                return None\n    \n    def solve(nums):\n        if len(nums) == 1:\n            return nums[0] == target\n        \n        for i, j in permutations(range(len(nums)), 2):\n            a, b = nums[i], nums[j]\n            remaining_nums = [nums[k] for k in range(len(nums)) if k != i and k != j]\n            \n            for operator in operators:\n                result = calculate(a, b, operator)\n                if result is not None:\n                    if solve([result] + remaining_nums):\n                        return True\n        \n        return False\n    \n    return solve(nums)", "solution_func": "def g(nums=[4, 7, 8, 2]):\n    return nums", "map_ix": [0, 1, 1, 1, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, max_length=5) -> bool:\n    \"\"\"Check if there exists a substring of length at most max_length that contains all distinct letters in the given string\"\"\"\n    distinct_letters = set(s)\n    \n    for i in range(len(s)):\n        for j in range(i, min(i+max_length, len(s))):\n            substring = s[i:j+1]\n            if len(set(substring)) == len(distinct_letters):\n                return True\n    \n    return False\n\ndef g(s='abacabacaba'):\n    return s\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 273, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, max_length=5) -> bool:\n    \"\"\"Check if there exists a substring of length at most max_length that contains all distinct letters in the given string\"\"\"\n    distinct_letters = set(s)\n    \n    for i in range(len(s)):\n        for j in range(i, min(i+max_length, len(s))):\n            substring = s[i:j+1]\n            if len(set(substring)) == len(distinct_letters):\n                return True\n    \n    return False", "solution_func": "def g(s='abacabacaba'):\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if it is possible to obtain the target number using all numbers from the given list by adding or subtracting\"\"\"\n    \n    def solve(nums, current_sum, index):\n        if index == len(nums):\n            return current_sum == target\n        \n        return solve(nums, current_sum + nums[index], index + 1) or solve(nums, current_sum - nums[index], index + 1)\n    \n    return solve(nums, 0, 0)\n\ndef g(nums=[1, 5, 7, 10], target=8):\n    return nums, target\n\nassert f(*g())\n", "emb": null, "idx_generation": 273, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if it is possible to obtain the target number using all numbers from the given list by adding or subtracting\"\"\"\n    \n    def solve(nums, current_sum, index):\n        if index == len(nums):\n            return current_sum == target\n        \n        return solve(nums, current_sum + nums[index], index + 1) or solve(nums, current_sum - nums[index], index + 1)\n    \n    return solve(nums, 0, 0)", "solution_func": "def g(nums=[1, 5, 7, 10], target=8):\n    return nums, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int, threshold: int = 50) -> bool:\n    \"\"\"Check if any two numbers in the list add up to the target, with the sum being less than or equal to the threshold\"\"\"\n    return any(nums[i] + nums[j] == target and nums[i] + nums[j] <= threshold for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target: int, threshold: int = 50):\n    nums = [10, 20, 30, 40]\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 273, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int, threshold: int = 50) -> bool:\n    \"\"\"Check if any two numbers in the list add up to the target, with the sum being less than or equal to the threshold\"\"\"\n    return any(nums[i] + nums[j] == target and nums[i] + nums[j] <= threshold for i in range(len(nums)) for j in range(i+1, len(nums)))", "solution_func": "def g(target: int, threshold: int = 50):\n    nums = [10, 20, 30, 40]\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, substr: str, start: int = 0, end: int = -1) -> bool:\n    \"\"\"Check if the given substring exists in the string within the specified range\"\"\"\n    return s[start:end].find(substr) != -1\ndef g(substr: str, start: int = 0, end: int = -1):\n    s = \"Hello, World!\"\n    return s\nassert f(g())\n", "emb": null, "idx_generation": 273, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substr: str, start: int = 0, end: int = -1) -> bool:\n    \"\"\"Check if the given substring exists in the string within the specified range\"\"\"\n    return s[start:end].find(substr) != -1", "solution_func": "def g(substr: str, start: int = 0, end: int = -1):\n    s = \"Hello, World!\"\n    return s", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int, n: int = 3) -> bool:\n    \"\"\"Check if there exists a combination of n numbers in the list that adds up to the target\"\"\"\n    return any(sum(comb) == target for comb in combinations(nums, n))\ndef g(target: int, n: int = 3):\n    nums = [1, 2, 3, 4, 5]\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 273, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int, n: int = 3) -> bool:\n    \"\"\"Check if there exists a combination of n numbers in the list that adds up to the target\"\"\"\n    return any(sum(comb) == target for comb in combinations(nums, n))", "solution_func": "def g(target: int, n: int = 3):\n    nums = [1, 2, 3, 4, 5]\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], n=10, target=50) -> bool:\n    \"\"\"Find how many values have a product greater than a target.\"\"\"\n    assert all([v > 0 for v in x])\n    prod = 1\n    count = 0\n    for i in range(len(x)):\n        prod *= x[i]\n        if prod > target:\n            count += 1\n        if count == n:\n            return True\n    return False\n\ndef g(n=10, target=50):\n    return [2] * n\n\nassert f(g())\n", "emb": null, "idx_generation": 273, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], n=10, target=50) -> bool:\n    \"\"\"Find how many values have a product greater than a target.\"\"\"\n    assert all([v > 0 for v in x])\n    prod = 1\n    count = 0\n    for i in range(len(x)):\n        prod *= x[i]\n        if prod > target:\n            count += 1\n        if count == n:\n            return True\n    return False", "solution_func": "def g(n=10, target=50):\n    return [2] * n", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=6, b=9, c=14) -> bool:\n    \"\"\"Check if a number is a perfect square or a perfect cube.\"\"\"\n    return math.isqrt(n) ** 2 == n or round(n ** (1 / 3)) ** 3 == n\n\ndef g(a=6, b=9, c=14):\n    return a * b * c\n\nassert f(g())\n", "emb": null, "idx_generation": 273, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, a=6, b=9, c=14) -> bool:\n    \"\"\"Check if a number is a perfect square or a perfect cube.\"\"\"\n    return math.isqrt(n) ** 2 == n or round(n ** (1 / 3)) ** 3 == n", "solution_func": "def g(a=6, b=9, c=14):\n    return a * b * c", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], target=100) -> bool:\n    \"\"\"Check if the sum of any two numbers in a list is equal to a target value.\"\"\"\n    for i in range(len(x)):\n        for j in range(i+1, len(x)):\n            if x[i] + x[j] == target:\n                return True\n    return False\n\ndef g(target=100):\n    return [50, 60, 70, 80, 90]\n\nassert f(g())\n", "emb": null, "idx_generation": 273, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], target=100) -> bool:\n    \"\"\"Check if the sum of any two numbers in a list is equal to a target value.\"\"\"\n    for i in range(len(x)):\n        for j in range(i+1, len(x)):\n            if x[i] + x[j] == target:\n                return True\n    return False", "solution_func": "def g(target=100):\n    return [50, 60, 70, 80, 90]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], n=5, m=10) -> bool:\n    \"\"\"\n    Given a list of integers, find a subarray of length n whose sum is divisible by m.\n\n    Sample input:\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    Sample output:\n    True\n\n    Explanation: The subarray [1, 2, 3, 4, 5] has a sum of 15, which is divisible by 10.\n    \"\"\"\n    for i in range(len(arr) - n + 1):\n        if sum(arr[i:i+n]) % m == 0:\n            return True\n    return False\n\ndef g(n=5, m=10):\n    return list(range(1, n+1))\n\nassert f(g())\n", "emb": null, "idx_generation": 273, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], n=5, m=10) -> bool:\n    \"\"\"\n    Given a list of integers, find a subarray of length n whose sum is divisible by m.\n\n    Sample input:\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    Sample output:\n    True\n\n    Explanation: The subarray [1, 2, 3, 4, 5] has a sum of 15, which is divisible by 10.\n    \"\"\"\n    for i in range(len(arr) - n + 1):\n        if sum(arr[i:i+n]) % m == 0:\n            return True\n    return False", "solution_func": "def g(n=5, m=10):\n    return list(range(1, n+1))", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"\n    Find a list of numbers where the sum of the square roots of the numbers is equal to a given target\n    \"\"\"\n    return sum(math.sqrt(num) for num in nums) == target\n\ndef g(target=100):\n    nums = [i**2 for i in range(1, int(math.sqrt(target)) + 1)]\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 274, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"\n    Find a list of numbers where the sum of the square roots of the numbers is equal to a given target\n    \"\"\"\n    return sum(math.sqrt(num) for num in nums) == target", "solution_func": "def g(target=100):\n    nums = [i**2 for i in range(1, int(math.sqrt(target)) + 1)]\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(words: List[str], target=\"programming\") -> bool:\n    \"\"\"\n    Find a list of words where the first letter of each word is the same as the target word\n    \"\"\"\n    return all(word[0] == target[0] for word in words)\n\ndef g(target=\"programming\"):\n    words = [\"python\", \"puzzle\", \"programming\", \"problem\", \"practice\"]\n    return words\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 274, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], target=\"programming\") -> bool:\n    \"\"\"\n    Find a list of words where the first letter of each word is the same as the target word\n    \"\"\"\n    return all(word[0] == target[0] for word in words)", "solution_func": "def g(target=\"programming\"):\n    words = [\"python\", \"puzzle\", \"programming\", \"problem\", \"practice\"]\n    return words", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], target=7) -> bool:\n    \"\"\"\n    Find a list of numbers where the sum of three random numbers is equal to a given target\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=7):\n    nums = [random.randint(1, 10) for _ in range(5)]\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 274, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(nums: List[int], target=7) -> bool:\n    \"\"\"\n    Find a list of numbers where the sum of three random numbers is equal to a given target\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False", "solution_func": "def g(target=7):\n    nums = [random.randint(1, 10) for _ in range(5)]\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Find if there exists two numbers in the array that sum up to the target\"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(arr = [1, 2, 3, 4, 5], target = 9):\n    return arr\nassert f(g())\n", "emb": null, "idx_generation": 274, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Find if there exists two numbers in the array that sum up to the target\"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(arr = [1, 2, 3, 4, 5], target = 9):\n    return arr", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(word: str, pattern: str) -> bool:\n    \"\"\"Determine if a word follows a given pattern\"\"\"\n    if len(word) != len(pattern):\n        return False\n    mapping = {}\n    for i in range(len(word)):\n        if pattern[i] not in mapping:\n            mapping[pattern[i]] = word[i]\n        elif mapping[pattern[i]] != word[i]:\n            return False\n    return True\ndef g(word = \"apple\", pattern = \"abccd\"):\n    return word\nassert f(g())\n", "emb": null, "idx_generation": 274, "target_skills": null, "problem_func": "from typing import*\ndef f(word: str, pattern: str) -> bool:\n    \"\"\"Determine if a word follows a given pattern\"\"\"\n    if len(word) != len(pattern):\n        return False\n    mapping = {}\n    for i in range(len(word)):\n        if pattern[i] not in mapping:\n            mapping[pattern[i]] = word[i]\n        elif mapping[pattern[i]] != word[i]:\n            return False\n    return True", "solution_func": "def g(word = \"apple\", pattern = \"abccd\"):\n    return word", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom collections import Counter\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if there are any duplicates in the array\"\"\"\n    counter = Counter(arr)\n    for num, freq in counter.items():\n        if freq > 1:\n            return True\n    return False\ndef g(arr = [1, 2, 3, 4, 5]):\n    return arr\nassert f(g())\n", "emb": null, "idx_generation": 274, "target_skills": null, "problem_func": "from typing import*\nfrom collections import Counter\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if there are any duplicates in the array\"\"\"\n    counter = Counter(arr)\n    for num, freq in counter.items():\n        if freq > 1:\n            return True\n    return False", "solution_func": "def g(arr = [1, 2, 3, 4, 5]):\n    return arr", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, substring=\"python\") -> bool:\n    \"\"\"\n    Check if the given substring is present in the given string.\n    Return True if the substring is present, False otherwise.\n    \"\"\"\n    return substring in string\n\ndef g(substring=\"python\"):\n    string = \"I love programming in python.\"\n    return string\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 274, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, substring=\"python\") -> bool:\n    \"\"\"\n    Check if the given substring is present in the given string.\n    Return True if the substring is present, False otherwise.\n    \"\"\"\n    return substring in string", "solution_func": "def g(substring=\"python\"):\n    string = \"I love programming in python.\"\n    return string", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(radius: float, area=50.26548245743669) -> bool:\n    \"\"\"\n    Compute the circumference of a circle with the given radius.\n    Return True if the circumference is equal to 2 * pi * radius, False otherwise.\n    \"\"\"\n    circumference = 2 * math.pi * radius\n    return abs(circumference - area) < 1e-06\n\ndef g(area=50.26548245743669):\n    radius = math.sqrt(area / math.pi)\n    return radius\n\nassert f(g())\n", "emb": null, "idx_generation": 274, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(radius: float, area=50.26548245743669) -> bool:\n    \"\"\"\n    Compute the circumference of a circle with the given radius.\n    Return True if the circumference is equal to 2 * pi * radius, False otherwise.\n    \"\"\"\n    circumference = 2 * math.pi * radius\n    return abs(circumference - area) < 1e-06", "solution_func": "def g(area=50.26548245743669):\n    radius = math.sqrt(area / math.pi)\n    return radius", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"\n    Check if there are two numbers in the given list that add up to the target number.\n    Return True if such numbers exist, False otherwise.\n    \"\"\"\n    num_set = set(numbers)\n    for num in numbers:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False\n\ndef g(target=10):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return numbers\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 274, "target_skills": null, "problem_func": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"\n    Check if there are two numbers in the given list that add up to the target number.\n    Return True if such numbers exist, False otherwise.\n    \"\"\"\n    num_set = set(numbers)\n    for num in numbers:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False", "solution_func": "def g(target=10):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return numbers", "map_ix": [1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: list, x=10, y=20) -> bool:\n    \"\"\"Check if all elements of the list are between x and y (inclusive)\"\"\"\n    return all(x <= element <= y for element in arr)\ndef g(x=10, y=20):\n    return list(range(x, y+1))\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 274, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: list, x=10, y=20) -> bool:\n    \"\"\"Check if all elements of the list are between x and y (inclusive)\"\"\"\n    return all(x <= element <= y for element in arr)", "solution_func": "def g(x=10, y=20):\n    return list(range(x, y+1))", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, s='Python', t='python') -> bool:\n    \"\"\"Ignoring case, compare s, t lexicographically. Output 0 if they are =, -1 if s < t, 1 if s > t.\"\"\"\n    if n == 0:\n        return s.lower() == t.lower()\n    if n == 1:\n        return s.lower() > t.lower()\n    if n == -1:\n        return s.lower() < t.lower()\n    return False\ndef g(s = 'Python', t = 'python'):\n    if s.lower() == t.lower():\n        return 0\n    if s.lower() > t.lower():\n        return 1\n    return -1\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 275, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, s='Python', t='python') -> bool:\n    \"\"\"Ignoring case, compare s, t lexicographically. Output 0 if they are =, -1 if s < t, 1 if s > t.\"\"\"\n    if n == 0:\n        return s.lower() == t.lower()\n    if n == 1:\n        return s.lower() > t.lower()\n    if n == -1:\n        return s.lower() < t.lower()\n    return False", "solution_func": "def g(s = 'Python', t = 'python'):\n    if s.lower() == t.lower():\n        return 0\n    if s.lower() > t.lower():\n        return 1\n    return -1", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, lst=[2, 4, 6, 8, 10]) -> bool:\n    \"\"\"Check if n is divisible by all elements in the list.\"\"\"\n    return all(n % num == 0 for num in lst)\ndef g(lst=[2, 4, 6, 8, 10]):\n    return lst\nassert f(g())\n", "emb": null, "idx_generation": 275, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst=[2, 4, 6, 8, 10]) -> bool:\n    \"\"\"Check if n is divisible by all elements in the list.\"\"\"\n    return all(n % num == 0 for num in lst)", "solution_func": "def g(lst=[2, 4, 6, 8, 10]):\n    return lst", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(radius: float, volume=523.6) -> bool:\n    \"\"\"Check if the volume of a sphere with given radius is approximately equal to the provided value.\"\"\"\n    return abs((4/3) * math.pi * radius**3 - volume) < 0.01\ndef g(volume=523.6):\n    return (3 * volume / (4 * math.pi))**(1/3)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 275, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(radius: float, volume=523.6) -> bool:\n    \"\"\"Check if the volume of a sphere with given radius is approximately equal to the provided value.\"\"\"\n    return abs((4/3) * math.pi * radius**3 - volume) < 0.01", "solution_func": "def g(volume=523.6):\n    return (3 * volume / (4 * math.pi))**(1/3)", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int, k: int = 3) -> bool:\n    \"\"\"Find if there are k numbers in the list that sum up to the target.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, k))\ndef g(target: int = 10, k: int = 3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n", "emb": null, "idx_generation": 275, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int, k: int = 3) -> bool:\n    \"\"\"Find if there are k numbers in the list that sum up to the target.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, k))", "solution_func": "def g(target: int = 10, k: int = 3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(word: str, letters: List[str]) -> bool:\n    \"\"\"Check if a word can be formed using a given list of letters.\"\"\"\n    return all(l in word for l in letters)\ndef g(letters: List[str] = ['a', 'b', 'c', 'd', 'e']):\n    return \"abcde\"\nassert f(g())\n", "emb": null, "idx_generation": 275, "target_skills": null, "problem_func": "from typing import*\ndef f(word: str, letters: List[str]) -> bool:\n    \"\"\"Check if a word can be formed using a given list of letters.\"\"\"\n    return all(l in word for l in letters)", "solution_func": "def g(letters: List[str] = ['a', 'b', 'c', 'd', 'e']):\n    return \"abcde\"", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find if there are two numbers in the list that sum up to the target.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target: int = 10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n", "emb": null, "idx_generation": 275, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find if there are two numbers in the list that sum up to the target.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(target: int = 10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the given list that add up to the target value.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target = 10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return (nums, target)\nassert f(*g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 275, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the given list that add up to the target value.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(target = 10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return (nums, target)", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric along its main diagonal (top-left to bottom-right).\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\ndef g():\n    matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n    return matrix\nassert f(g())\n", "emb": [1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 275, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric along its main diagonal (top-left to bottom-right).\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "solution_func": "def g():\n    matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n    return matrix", "map_ix": [1, 0, 1, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is a palindrome.\"\"\"\n    return nums == nums[::-1]\ndef g():\n    nums = [1, 2, 3, 2, 1]\n    return nums\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 275, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is a palindrome.\"\"\"\n    return nums == nums[::-1]", "solution_func": "def g():\n    nums = [1, 2, 3, 2, 1]\n    return nums", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(names: List[str], n=5, m=3) -> bool:\n    \"\"\"Given a list of names, find if there are n or more names that have at least m vowels in them.\"\"\"\n    def count_vowels(name):\n        vowels = ['a', 'e', 'i', 'o', 'u']\n        return sum(1 for c in name.lower() if c in vowels)\n    \n    return sum(1 for name in names if count_vowels(name) >= m) >= n\n\ndef g(n=5, m=3):\n    names = ['Alice', 'Bob', 'Carol', 'David', 'Eve', 'Frank', 'Grace', 'Henry', 'Isabelle', 'Jack']\n    return names\n\nassert f(g())\n", "emb": null, "idx_generation": 275, "target_skills": null, "problem_func": "from typing import*\ndef f(names: List[str], n=5, m=3) -> bool:\n    \"\"\"Given a list of names, find if there are n or more names that have at least m vowels in them.\"\"\"\n    def count_vowels(name):\n        vowels = ['a', 'e', 'i', 'o', 'u']\n        return sum(1 for c in name.lower() if c in vowels)\n    \n    return sum(1 for name in names if count_vowels(name) >= m) >= n", "solution_func": "def g(n=5, m=3):\n    names = ['Alice', 'Bob', 'Carol', 'David', 'Eve', 'Frank', 'Grace', 'Henry', 'Isabelle', 'Jack']\n    return names", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, sequence: List[int], target_sum=100) -> bool:\n    \"\"\"Find a subsequence of the given sequence whose sum is equal to the target_sum.\"\"\"\n    for i in range(len(sequence)):\n        for j in range(i+1, len(sequence)+1):\n            subseq = sequence[i:j]\n            if sum(subseq) == target_sum:\n                return True\n    return False\n\ndef g(sequence: List[int], target_sum=100):\n    for i in range(len(sequence)):\n        for j in range(i+1, len(sequence)+1):\n            subseq = sequence[i:j]\n            if sum(subseq) == target_sum:\n                return subseq\n    return []\n    \nassert f(g())\n", "emb": null, "idx_generation": 276, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, sequence: List[int], target_sum=100) -> bool:\n    \"\"\"Find a subsequence of the given sequence whose sum is equal to the target_sum.\"\"\"\n    for i in range(len(sequence)):\n        for j in range(i+1, len(sequence)+1):\n            subseq = sequence[i:j]\n            if sum(subseq) == target_sum:\n                return True\n    return False", "solution_func": "def g(sequence: List[int], target_sum=100):\n    for i in range(len(sequence)):\n        for j in range(i+1, len(sequence)+1):\n            subseq = sequence[i:j]\n            if sum(subseq) == target_sum:\n                return subseq\n    return []", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_num=7) -> bool:\n    \"\"\"Find if the target_num is present in the given matrix.\"\"\"\n    for row in matrix:\n        if target_num in row:\n            return True\n    return False\n\ndef g(matrix: List[List[int]], target_num=7):\n    for row in matrix:\n        if target_num in row:\n            return True\n    return False\n    \nassert f(g())\n", "emb": null, "idx_generation": 276, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_num=7) -> bool:\n    \"\"\"Find if the target_num is present in the given matrix.\"\"\"\n    for row in matrix:\n        if target_num in row:\n            return True\n    return False", "solution_func": "def g(matrix: List[List[int]], target_num=7):\n    for row in matrix:\n        if target_num in row:\n            return True\n    return False", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, sequence: List[int], target_num=5) -> bool:\n    \"\"\"Find if the target_num appears exactly n times in the given sequence.\"\"\"\n    count = sequence.count(target_num)\n    return count == n\n\ndef g(sequence: List[int], target_num=5):\n    count = sequence.count(target_num)\n    return count\n    \nassert f(g())\n", "emb": null, "idx_generation": 276, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, sequence: List[int], target_num=5) -> bool:\n    \"\"\"Find if the target_num appears exactly n times in the given sequence.\"\"\"\n    count = sequence.count(target_num)\n    return count == n", "solution_func": "def g(sequence: List[int], target_num=5):\n    count = sequence.count(target_num)\n    return count", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the array that add up to the target.\"\"\"\n    return any(target - num in arr for num in arr)\ndef g(arr = [1, 2, 3, 4, 5], target = 9):\n    return arr\nassert f(g())\n", "emb": null, "idx_generation": 276, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the array that add up to the target.\"\"\"\n    return any(target - num in arr for num in arr)", "solution_func": "def g(arr = [1, 2, 3, 4, 5], target = 9):\n    return arr", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, substr: str) -> bool:\n    \"\"\"Check if the substring is present in the given string.\"\"\"\n    return substr in s\ndef g(s = \"Hello World\", substr = \"World\"):\n    return s\nassert f(g())\n", "emb": null, "idx_generation": 276, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substr: str) -> bool:\n    \"\"\"Check if the substring is present in the given string.\"\"\"\n    return substr in s", "solution_func": "def g(s = \"Hello World\", substr = \"World\"):\n    return s", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], n: int) -> bool:\n    \"\"\"Check if there are n even numbers in the given array.\"\"\"\n    return sum(num % 2 == 0 for num in arr) == n\ndef g(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n = 4):\n    return arr\nassert f(g())\n", "emb": null, "idx_generation": 276, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], n: int) -> bool:\n    \"\"\"Check if there are n even numbers in the given array.\"\"\"\n    return sum(num % 2 == 0 for num in arr) == n", "solution_func": "def g(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n = 4):\n    return arr", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target_sum.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum = 10):\n    nums = [1, 2, 3, 4, 5]\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return nums\n    return []\n\nassert f(g())\n", "emb": null, "idx_generation": 276, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target_sum.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False", "solution_func": "def g(target_sum = 10):\n    nums = [1, 2, 3, 4, 5]\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return nums\n    return []", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_product=24) -> bool:\n    \"\"\"Check if there are two numbers in the list that multiply to the target_product.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target_product:\n                return True\n    return False\n\ndef g(target_product = 24):\n    nums = [1, 2, 3, 4, 5]\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target_product:\n                return nums\n    return []\n\nassert f(g())\n", "emb": null, "idx_generation": 276, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_product=24) -> bool:\n    \"\"\"Check if there are two numbers in the list that multiply to the target_product.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target_product:\n                return True\n    return False", "solution_func": "def g(target_product = 24):\n    nums = [1, 2, 3, 4, 5]\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target_product:\n                return nums\n    return []", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_num=8) -> bool:\n    \"\"\"Check if target_num is present in the list.\"\"\"\n    return target_num in nums\n\ndef g(target_num = 8):\n    nums = [1, 2, 3, 4, 5]\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 276, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_num=8) -> bool:\n    \"\"\"Check if target_num is present in the list.\"\"\"\n    return target_num in nums", "solution_func": "def g(target_num = 8):\n    nums = [1, 2, 3, 4, 5]\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list that sums up to 10.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == 10:\n                return True\n    return False\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g())\n", "emb": null, "idx_generation": 276, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list that sums up to 10.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == 10:\n                return True\n    return False", "solution_func": "def g():\n    return [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target: str = 'apple') -> bool:\n    \"\"\"Check if the given string contains the target string.\"\"\"\n    return target in s\ndef g(target: str = 'apple'):\n    return 'I love eating ' + target\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 277, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target: str = 'apple') -> bool:\n    \"\"\"Check if the given string contains the target string.\"\"\"\n    return target in s", "solution_func": "def g(target: str = 'apple'):\n    return 'I love eating ' + target", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, primes: List[int] = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]) -> bool:\n    \"\"\"Check if the given number is prime.\"\"\"\n    return n in primes\ndef g(n: int = 23):\n    return n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 277, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, primes: List[int] = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]) -> bool:\n    \"\"\"Check if the given number is prime.\"\"\"\n    return n in primes", "solution_func": "def g(n: int = 23):\n    return n", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if the target number is in the list of numbers.\"\"\"\n    return target in nums\ndef g(nums: List[int] = random.sample(range(1, 101), 10), target: int = random.randint(1, 100)):\n    return nums, target\nassert f(*g())\n", "emb": null, "idx_generation": 277, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if the target number is in the list of numbers.\"\"\"\n    return target in nums", "solution_func": "def g(nums: List[int] = random.sample(range(1, 101), 10), target: int = random.randint(1, 100)):\n    return nums, target", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Find a pair of numbers in the list that sum up to the target value.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    \"\"\"\n    This solution iterates through all possible pairs of numbers in the list\n    and checks if their sum equals the target value.\n    \"\"\"\n    return nums\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 277, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Find a pair of numbers in the list that sum up to the target value.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    \"\"\"\n    This solution iterates through all possible pairs of numbers in the list\n    and checks if their sum equals the target value.\n    \"\"\"\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Find a pair of elements in the matrix that sum up to the target value.\n    \"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            for k in range(i, len(matrix)):\n                for l in range(j, len(matrix[0])):\n                    if matrix[i][j] + matrix[k][l] == target:\n                        return True\n    return False\n\ndef g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    \"\"\"\n    This solution iterates through all possible pairs of elements in the matrix\n    and checks if their sum equals the target value.\n    \"\"\"\n    return matrix\n\nassert f(g())\n", "emb": null, "idx_generation": 277, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Find a pair of elements in the matrix that sum up to the target value.\n    \"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            for k in range(i, len(matrix)):\n                for l in range(j, len(matrix[0])):\n                    if matrix[i][j] + matrix[k][l] == target:\n                        return True\n    return False", "solution_func": "def g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    \"\"\"\n    This solution iterates through all possible pairs of elements in the matrix\n    and checks if their sum equals the target value.\n    \"\"\"\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, substr='abc') -> bool:\n    \"\"\"\n    Check if the given substring is present in the given string.\n    \"\"\"\n    return substr in s\n\ndef g(s = 'abacabadabacaba', substr = 'abc'):\n    \"\"\"\n    This solution checks if the substring is present in the string using the 'in' operator.\n    \"\"\"\n    return s\n\nassert f(g())\n", "emb": null, "idx_generation": 277, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substr='abc') -> bool:\n    \"\"\"\n    Check if the given substring is present in the given string.\n    \"\"\"\n    return substr in s", "solution_func": "def g(s = 'abacabadabacaba', substr = 'abc'):\n    \"\"\"\n    This solution checks if the substring is present in the string using the 'in' operator.\n    \"\"\"\n    return s", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Find if there exists two distinct indices i and j in the list nums such that nums[i] == nums[j] and abs(i - j) <= k\"\"\"\n    seen = {}\n    for i, num in enumerate(nums):\n        if num in seen and abs(i - seen[num]) <= k:\n            return True\n        seen[num] = i\n    return False\n\ndef g(k=3):\n    nums = [1, 2, 3, 4, 1, 5, 6]\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 277, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Find if there exists two distinct indices i and j in the list nums such that nums[i] == nums[j] and abs(i - j) <= k\"\"\"\n    seen = {}\n    for i, num in enumerate(nums):\n        if num in seen and abs(i - seen[num]) <= k:\n            return True\n        seen[num] = i\n    return False", "solution_func": "def g(k=3):\n    nums = [1, 2, 3, 4, 1, 5, 6]\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"Check if string t is an anagram of string s\"\"\"\n    return sorted(s) == sorted(t)\n\ndef g():\n    s = \"listen\"\n    t = \"silent\"\n    return s, t\n\nassert f(*g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 277, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"Check if string t is an anagram of string s\"\"\"\n    return sorted(s) == sorted(t)", "solution_func": "def g():\n    s = \"listen\"\n    t = \"silent\"\n    return s, t", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=9) -> bool:\n    \"\"\"Find if there exists two numbers in the list nums such that their sum is equal to target\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=9):\n    nums = [2, 4, 6, 8, 10]\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 277, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=9) -> bool:\n    \"\"\"Find if there exists two numbers in the list nums such that their sum is equal to target\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(target=9):\n    nums = [2, 4, 6, 8, 10]\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date: str, timezone='UTC') -> bool:\n    \"\"\"Check if the given date and timezone correspond to the current time\"\"\"\n    current_time = datetime.now()\n    try:\n        given_time = datetime.strptime(date, \"%Y-%m-%d %H:%M:%S\")\n        given_time = given_time.replace(tzinfo=timezone)\n        return current_time == given_time\n    except ValueError:\n        return False\n        \ndef g(timezone='UTC'):\n    current_time = datetime.now()\n    current_time = current_time.strftime(\"%Y-%m-%d %H:%M:%S\")\n    return current_time, timezone\n\nassert f(g())\n", "emb": null, "idx_generation": 277, "target_skills": null, "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(date: str, timezone='UTC') -> bool:\n    \"\"\"Check if the given date and timezone correspond to the current time\"\"\"\n    current_time = datetime.now()\n    try:\n        given_time = datetime.strptime(date, \"%Y-%m-%d %H:%M:%S\")\n        given_time = given_time.replace(tzinfo=timezone)\n        return current_time == given_time\n    except ValueError:\n        return False", "solution_func": "def g(timezone='UTC'):\n    current_time = datetime.now()\n    current_time = current_time.strftime(\"%Y-%m-%d %H:%M:%S\")\n    return current_time, timezone", "map_ix": null}, {"fitness": -Infinity, "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(num: int, x=2, y=3, z=5) -> bool:\n    \"\"\"\n    Check if a number is a perfect square.\n    \"\"\"\n    return sqrt(num) == int(sqrt(num))\n    \ndef g(x=2, y=3, z=5):\n    return x * y * z\n\nassert f(g())\n", "emb": null, "idx_generation": 278, "target_skills": null, "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(num: int, x=2, y=3, z=5) -> bool:\n    \"\"\"\n    Check if a number is a perfect square.\n    \"\"\"\n    return sqrt(num) == int(sqrt(num))", "solution_func": "def g(x=2, y=3, z=5):\n    return x * y * z", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in a list that sum up to a target value.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n    \ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 278, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in a list that sum up to a target value.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"\n    Check if the sum of any row or column in a matrix equals the target value.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    \n    for i in range(rows):\n        row_sum = sum(matrix[i])\n        if row_sum == target:\n            return True\n    \n    for j in range(cols):\n        col_sum = sum(matrix[i][j] for i in range(rows))\n        if col_sum == target:\n            return True\n    \n    return False\n    \ndef g(target=10):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\n\nassert f(g())\n", "emb": null, "idx_generation": 278, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"\n    Check if the sum of any row or column in a matrix equals the target value.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    \n    for i in range(rows):\n        row_sum = sum(matrix[i])\n        if row_sum == target:\n            return True\n    \n    for j in range(cols):\n        col_sum = sum(matrix[i][j] for i in range(rows))\n        if col_sum == target:\n            return True\n    \n    return False", "solution_func": "def g(target=10):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find if there are two numbers in the list that add up to the target.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(nums = [2, 7, 11, 15], target = 9):\n    return nums, target\nassert f(*g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 278, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find if there are two numbers in the list that add up to the target.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(nums = [2, 7, 11, 15], target = 9):\n    return nums, target", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Find if a target value exists in a sorted matrix.\"\"\"\n    if not matrix or not matrix[0]:\n        return False\n    rows, cols = len(matrix), len(matrix[0])\n    row, col = 0, cols - 1\n    while row < rows and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            row += 1\n        else:\n            col -= 1\n    return False\ndef g(matrix = [[1, 4, 7, 11], [2, 5, 8, 12], [3, 6, 9, 16], [10, 13, 14, 17]], target = 7):\n    return matrix, target\nassert f(*g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 278, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Find if a target value exists in a sorted matrix.\"\"\"\n    if not matrix or not matrix[0]:\n        return False\n    rows, cols = len(matrix), len(matrix[0])\n    row, col = 0, cols - 1\n    while row < rows and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            row += 1\n        else:\n            col -= 1\n    return False", "solution_func": "def g(matrix = [[1, 4, 7, 11], [2, 5, 8, 12], [3, 6, 9, 16], [10, 13, 14, 17]], target = 7):\n    return matrix, target", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"Find if two strings are isomorphic.\"\"\"\n    if len(s) != len(t):\n        return False\n    mapping_s = {}\n    mapping_t = {}\n    for i in range(len(s)):\n        char_s = s[i]\n        char_t = t[i]\n        if char_s in mapping_s:\n            if mapping_s[char_s] != char_t:\n                return False\n        else:\n            mapping_s[char_s] = char_t\n        if char_t in mapping_t:\n            if mapping_t[char_t] != char_s:\n                return False\n        else:\n            mapping_t[char_t] = char_s\n    return True\ndef g(s = \"egg\", t = \"add\"):\n    return s, t\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 278, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"Find if two strings are isomorphic.\"\"\"\n    if len(s) != len(t):\n        return False\n    mapping_s = {}\n    mapping_t = {}\n    for i in range(len(s)):\n        char_s = s[i]\n        char_t = t[i]\n        if char_s in mapping_s:\n            if mapping_s[char_s] != char_t:\n                return False\n        else:\n            mapping_s[char_s] = char_t\n        if char_t in mapping_t:\n            if mapping_t[char_t] != char_s:\n                return False\n        else:\n            mapping_t[char_t] = char_s\n    return True", "solution_func": "def g(s = \"egg\", t = \"add\"):\n    return s, t", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, target=48) -> bool:\n    \"\"\"Check if n is a multiple of the target number\"\"\"\n    return n % target == 0\ndef g(target=48):\n    return target * 2\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 278, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, target=48) -> bool:\n    \"\"\"Check if n is a multiple of the target number\"\"\"\n    return n % target == 0", "solution_func": "def g(target=48):\n    return target * 2", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if n is in the list and is a multiple of all the other elements\"\"\"\n    return n in lst and all(n % x == 0 for x in lst if x != n)\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return max(lst) * 10\nassert f(g())\n", "emb": null, "idx_generation": 278, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if n is in the list and is a multiple of all the other elements\"\"\"\n    return n in lst and all(n % x == 0 for x in lst if x != n)", "solution_func": "def g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return max(lst) * 10", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=10, b=20, c=30) -> bool:\n    \"\"\"Check if the square root of n is between a and b, and the cube root of n is between b and c\"\"\"\n    return math.sqrt(n) > a and math.sqrt(n) < b and math.pow(n, 1/3) > b and math.pow(n, 1/3) < c\ndef g(a=10, b=20, c=30):\n    return (a + b + c) // 3\nassert f(g())\n", "emb": null, "idx_generation": 278, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, a=10, b=20, c=30) -> bool:\n    \"\"\"Check if the square root of n is between a and b, and the cube root of n is between b and c\"\"\"\n    return math.sqrt(n) > a and math.sqrt(n) < b and math.pow(n, 1/3) > b and math.pow(n, 1/3) < c", "solution_func": "def g(a=10, b=20, c=30):\n    return (a + b + c) // 3", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(num: int, limit=1000000) -> bool:\n    \"\"\"Check if a number is a prime number.\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g(limit=1000000):\n    for num in range(2, limit):\n        if f(num):\n            return num\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 278, "target_skills": null, "problem_func": "from typing import*\ndef f(num: int, limit=1000000) -> bool:\n    \"\"\"Check if a number is a prime number.\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "solution_func": "def g(limit=1000000):\n    for num in range(2, limit):\n        if f(num):\n            return num", "map_ix": [1, 1, 0, 1, 0, 0, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(string: str, substring='abc', count=3) -> bool:\n    \"\"\"Find a substring with a certain count in a given string\"\"\"\n    return string.count(substring) == count\ndef g(string='abcabcabcabcabc', count=3):\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            substring = string[i:j]\n            c = string.count(substring)\n            if c == count:\n                return substring\n            if c < count:\n                break\n    assert False\nassert f(g())\n", "emb": null, "idx_generation": 279, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, substring='abc', count=3) -> bool:\n    \"\"\"Find a substring with a certain count in a given string\"\"\"\n    return string.count(substring) == count", "solution_func": "def g(string='abcabcabcabcabc', count=3):\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            substring = string[i:j]\n            c = string.count(substring)\n            if c == count:\n                return substring\n            if c < count:\n                break", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(substrings: List[str], s='hellothisisapuzzle', count=2) -> bool:\n    \"\"\"Find a list of >= count distinct strings that are all contained in s\"\"\"\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings))\ndef g(s='hellothisisapuzzle', count=2):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 279, "target_skills": null, "problem_func": "from typing import*\ndef f(substrings: List[str], s='hellothisisapuzzle', count=2) -> bool:\n    \"\"\"Find a list of >= count distinct strings that are all contained in s\"\"\"\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings))", "solution_func": "def g(s='hellothisisapuzzle', count=2):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(inds: List[int], string='pythonprogramming') -> bool:\n    \"\"\"Find increasing indices to make the substring \"programming\"\"\"\"\n    return inds == sorted(inds) and ''.join((string[i] for i in inds)) == 'programming'\ndef g(string='pythonprogramming'):\n    target = \"programming\"\n    j = 0\n    ans = []\n    for i in range(-len(string), len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans\nassert f(g())\n", "emb": null, "idx_generation": 279, "target_skills": null, "problem_func": "from typing import*\ndef f(inds: List[int], string='pythonprogramming') -> bool:\n    \"\"\"Find increasing indices to make the substring \"programming\"\"\"\"\n    return inds == sorted(inds) and ''.join((string[i] for i in inds)) == 'programming'", "solution_func": "def g(string='pythonprogramming'):\n    target = \"programming\"\n    j = 0\n    ans = []\n    for i in range(-len(string), len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, nums=[2, 3, 5, 7, 11, 13], upper_bound=100000) -> bool:\n    \"\"\"Check if a number is a prime number.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g(nums = [2, 3, 5, 7, 11, 13], upper_bound = 100000):\n    primes = []\n    for i in range(2, upper_bound+1):\n        if f(i):\n            primes.append(i)\n        if len(primes) == len(nums):\n            break\n    return primes\n\nassert f(g())\n", "emb": null, "idx_generation": 279, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[2, 3, 5, 7, 11, 13], upper_bound=100000) -> bool:\n    \"\"\"Check if a number is a prime number.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "solution_func": "def g(nums = [2, 3, 5, 7, 11, 13], upper_bound = 100000):\n    primes = []\n    for i in range(2, upper_bound+1):\n        if f(i):\n            primes.append(i)\n        if len(primes) == len(nums):\n            break\n    return primes", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, m: int, nums=[2, 3, 5, 7, 11, 13]) -> bool:\n    \"\"\"Check if n and m are coprime numbers.\"\"\"\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    return gcd(n, m) == 1\n\ndef g(nums = [2, 3, 5, 7, 11, 13]):\n    n = 1\n    coprimes = []\n    while len(coprimes) < len(nums):\n        coprimes.append(n)\n        n += 1\n        for i in coprimes[:-1]:\n            if not f(i, n):\n                coprimes.pop()\n                break\n    return coprimes\n\nassert f(g())\n", "emb": null, "idx_generation": 279, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m: int, nums=[2, 3, 5, 7, 11, 13]) -> bool:\n    \"\"\"Check if n and m are coprime numbers.\"\"\"\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    return gcd(n, m) == 1", "solution_func": "def g(nums = [2, 3, 5, 7, 11, 13]):\n    n = 1\n    coprimes = []\n    while len(coprimes) < len(nums):\n        coprimes.append(n)\n        n += 1\n        for i in coprimes[:-1]:\n            if not f(i, n):\n                coprimes.pop()\n                break\n    return coprimes", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, nums=[2, 3, 5, 7, 11, 13], upper_bound=100000) -> bool:\n    \"\"\"Check if a number is a prime number and is divisible by all numbers in a given list.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return all(n % i == 0 for i in nums)\n\ndef g(nums = [2, 3, 5, 7, 11, 13], upper_bound = 100000):\n    primes = []\n    for i in range(2, upper_bound+1):\n        if f(i, nums):\n            primes.append(i)\n        if len(primes) == len(nums):\n            break\n    return primes\n\nassert f(g())\n", "emb": null, "idx_generation": 279, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[2, 3, 5, 7, 11, 13], upper_bound=100000) -> bool:\n    \"\"\"Check if a number is a prime number and is divisible by all numbers in a given list.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return all(n % i == 0 for i in nums)", "solution_func": "def g(nums = [2, 3, 5, 7, 11, 13], upper_bound = 100000):\n    primes = []\n    for i in range(2, upper_bound+1):\n        if f(i, nums):\n            primes.append(i)\n        if len(primes) == len(nums):\n            break\n    return primes", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the array that add up to the target value.\"\"\"\n    return any(True for i in range(len(arr)) for j in range(i+1, len(arr)) if arr[i] + arr[j] == target)\ndef g(target=0, arr: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return arr\nassert f(g())\n", "emb": null, "idx_generation": 279, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the array that add up to the target value.\"\"\"\n    return any(True for i in range(len(arr)) for j in range(i+1, len(arr)) if arr[i] + arr[j] == target)", "solution_func": "def g(target=0, arr: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return arr", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(sentence: str, letter='e') -> bool:\n    \"\"\"Check if a given letter appears in a sentence.\"\"\"\n    return letter in sentence\ndef g(letter='e', sentence: str = \"This is a sentence.\"):\n    return sentence\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 279, "target_skills": null, "problem_func": "from typing import*\ndef f(sentence: str, letter='e') -> bool:\n    \"\"\"Check if a given letter appears in a sentence.\"\"\"\n    return letter in sentence", "solution_func": "def g(letter='e', sentence: str = \"This is a sentence.\"):\n    return sentence", "map_ix": [0, 0, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\ndef f(radius: float, volume=0) -> bool:\n    \"\"\"Check if the volume of a sphere is equal to the given value.\"\"\"\n    return math.isclose(4/3 * math.pi * radius**3, volume)\ndef g(volume=0, radius: float = 2.5):\n    return radius\nassert f(g())\n", "emb": null, "idx_generation": 279, "target_skills": null, "problem_func": "from typing import*\nimport math\ndef f(radius: float, volume=0) -> bool:\n    \"\"\"Check if the volume of a sphere is equal to the given value.\"\"\"\n    return math.isclose(4/3 * math.pi * radius**3, volume)", "solution_func": "def g(volume=0, radius: float = 2.5):\n    return radius", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(li: List[int], target_sum=100) -> bool:\n    \"\"\"Find a sublist in a list that sums up to a target value\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if sum(li[i:j+1]) == target_sum:\n                return True\n    return False\n\ndef g(target_sum=100):\n    return [i for i in range(1, target_sum+1)]\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 279, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(li: List[int], target_sum=100) -> bool:\n    \"\"\"Find a sublist in a list that sums up to a target value\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if sum(li[i:j+1]) == target_sum:\n                return True\n    return False", "solution_func": "def g(target_sum=100):\n    return [i for i in range(1, target_sum+1)]", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, x=3, y=5) -> bool:\n    \"\"\"Check if n is divisible by both x and y\"\"\"\n    return n % x == 0 and n % y == 0\ndef g(x=3, y=5):\n    return x * y\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 280, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, x=3, y=5) -> bool:\n    \"\"\"Check if n is divisible by both x and y\"\"\"\n    return n % x == 0 and n % y == 0", "solution_func": "def g(x=3, y=5):\n    return x * y", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 280, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substr='python', count=3) -> bool:\n    \"\"\"Check if the substring 'python' appears count number of times in the string s\"\"\"\n    return s.count(substr) == count\ndef g(substr='python', count=3):\n    return substr * count\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 280, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substr='python', count=3) -> bool:\n    \"\"\"Check if the substring 'python' appears count number of times in the string s\"\"\"\n    return s.count(substr) == count", "solution_func": "def g(substr='python', count=3):\n    return substr * count", "map_ix": [0, 1, 0, 1, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport datetime\n\ndef f(d: datetime.date, year=2023, month=1, day=1) -> bool:\n    \"\"\"Check if the given date is the start of a new year.\"\"\"\n    return d.year == year and d.month == month and d.day == day\n\ndef g(year=2023, month=1, day=1):\n    return datetime.date(year, month, day)\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 280, "target_skills": null, "problem_func": "from typing import*\nimport datetime\n\ndef f(d: datetime.date, year=2023, month=1, day=1) -> bool:\n    \"\"\"Check if the given date is the start of a new year.\"\"\"\n    return d.year == year and d.month == month and d.day == day", "solution_func": "def g(year=2023, month=1, day=1):\n    return datetime.date(year, month, day)", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=100, b=200) -> bool:\n    \"\"\"Check if a number n is a perfect square between a and b (inclusive).\"\"\"\n    return a <= n <= b and math.isqrt(n) ** 2 == n\n\ndef g(a=100, b=200):\n    for i in range(math.isqrt(a), math.isqrt(b) + 1):\n        if i ** 2 >= a:\n            return i ** 2\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 280, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, a=100, b=200) -> bool:\n    \"\"\"Check if a number n is a perfect square between a and b (inclusive).\"\"\"\n    return a <= n <= b and math.isqrt(n) ** 2 == n", "solution_func": "def g(a=100, b=200):\n    for i in range(math.isqrt(a), math.isqrt(b) + 1):\n        if i ** 2 >= a:\n            return i ** 2", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, sub='Python') -> bool:\n    \"\"\"Check if the given string contains the substring 'Python'.\"\"\"\n    return sub in s\n\ndef g(sub='Python'):\n    return f\"This is a string that contains {sub}.\"\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 280, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, sub='Python') -> bool:\n    \"\"\"Check if the given string contains the substring 'Python'.\"\"\"\n    return sub in s", "solution_func": "def g(sub='Python'):\n    return f\"This is a string that contains {sub}.\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if a given target is present in the array\"\"\"\n    return target in arr\n\ndef g(arr_length=10, target=5):\n    \"\"\"\n    Generate a random array of specified length and return the target value.\n    \"\"\"\n    arr = random.sample(range(1, 10 * arr_length), arr_length)\n    return arr, target\n\nassert f(*g())\n", "emb": null, "idx_generation": 280, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if a given target is present in the array\"\"\"\n    return target in arr", "solution_func": "def g(arr_length=10, target=5):\n    \"\"\"\n    Generate a random array of specified length and return the target value.\n    \"\"\"\n    arr = random.sample(range(1, 10 * arr_length), arr_length)\n    return arr, target", "map_ix": null}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\ndef f(s: str, substr: str) -> bool:\n    \"\"\"Check if a given substring is present in the string\"\"\"\n    return substr in s\n\ndef g(s_length=10, substr_length=3):\n    \"\"\"\n    Generate a random string of specified length and return a random substring from it.\n    \"\"\"\n    import random\n    import string\n\n    s = ''.join(random.choices(string.ascii_lowercase, k=s_length))\n    substr_start = random.randint(0, s_length - substr_length)\n    substr = s[substr_start: substr_start + substr_length]\n    return s, substr\n\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 280, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(s: str, substr: str) -> bool:\n    \"\"\"Check if a given substring is present in the string\"\"\"\n    return substr in s", "solution_func": "def g(s_length=10, substr_length=3):\n    \"\"\"\n    Generate a random string of specified length and return a random substring from it.\n    \"\"\"\n    import random\n    import string\n\n    s = ''.join(random.choices(string.ascii_lowercase, k=s_length))\n    substr_start = random.randint(0, s_length - substr_length)\n    substr = s[substr_start: substr_start + substr_length]\n    return s, substr", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(arr: List[int], target: int, operation: str) -> bool:\n    \"\"\"\n    Check if a given target can be obtained by performing arithmetic operations on the elements of the array.\n    The operation can be one of '+', '-', '*', or '/'.\n    \"\"\"\n    if operation == '+':\n        return any(x + y == target for x in arr for y in arr)\n    elif operation == '-':\n        return any(x - y == target for x in arr for y in arr)\n    elif operation == '*':\n        return any(x * y == target for x in arr for y in arr)\n    elif operation == '/':\n        return any(x / y == target for x in arr for y in arr if y != 0)\n    else:\n        return False\n\ndef g(arr_length=5, target=10, operation='+'):\n    \"\"\"\n    Generate a random array of specified length and return the target value and operation.\n    \"\"\"\n    import random\n\n    arr = random.sample(range(1, 10 * arr_length), arr_length)\n    return arr, target, operation\n\nassert f(*g())\n", "emb": null, "idx_generation": 280, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(arr: List[int], target: int, operation: str) -> bool:\n    \"\"\"\n    Check if a given target can be obtained by performing arithmetic operations on the elements of the array.\n    The operation can be one of '+', '-', '*', or '/'.\n    \"\"\"\n    if operation == '+':\n        return any(x + y == target for x in arr for y in arr)\n    elif operation == '-':\n        return any(x - y == target for x in arr for y in arr)\n    elif operation == '*':\n        return any(x * y == target for x in arr for y in arr)\n    elif operation == '/':\n        return any(x / y == target for x in arr for y in arr if y != 0)\n    else:\n        return False", "solution_func": "def g(arr_length=5, target=10, operation='+'):\n    \"\"\"\n    Generate a random array of specified length and return the target value and operation.\n    \"\"\"\n    import random\n\n    arr = random.sample(range(1, 10 * arr_length), arr_length)\n    return arr, target, operation", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, x: int, y: int, z: int) -> bool:\n    \"\"\"Check if a string can be rearranged to form a palindrome\"\"\"\n    counts = [0] * 26\n    for char in s:\n        counts[ord(char) - ord('a')] += 1\n    odd_counts = 0\n    for count in counts:\n        if count % 2 != 0:\n            odd_counts += 1\n    return odd_counts <= x and (x - odd_counts) % 2 == 0 and (x - odd_counts) * 2 + odd_counts // 2 <= y + z\ndef g(x: int, y: int, z: int):\n    return \"abccba\"\nassert f(g())\n", "emb": null, "idx_generation": 280, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, x: int, y: int, z: int) -> bool:\n    \"\"\"Check if a string can be rearranged to form a palindrome\"\"\"\n    counts = [0] * 26\n    for char in s:\n        counts[ord(char) - ord('a')] += 1\n    odd_counts = 0\n    for count in counts:\n        if count % 2 != 0:\n            odd_counts += 1\n    return odd_counts <= x and (x - odd_counts) % 2 == 0 and (x - odd_counts) * 2 + odd_counts // 2 <= y + z", "solution_func": "def g(x: int, y: int, z: int):\n    return \"abccba\"", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=4) -> bool:\n    \"\"\"\n    Check if a square matrix is a magic square.\n    A magic square is a square matrix where the sum of each row, each column, and each diagonal is the same.\n    \"\"\"\n    target_sum = n * (n ** 2 + 1) // 2\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diag1_sum = sum(matrix[i][i] for i in range(n))\n    diag2_sum = sum(matrix[i][n-i-1] for i in range(n))\n    \n    return all(sum == target_sum for sum in row_sums + col_sums + [diag1_sum, diag2_sum])\n\ndef g(n=4):\n    \"\"\"\n    Generate a magic square of size n.\n    \"\"\"\n    magic_square = [[0] * n for _ in range(n)]\n    i = n // 2\n    j = n - 1\n    num = 1\n\n    while num <= n ** 2:\n        if i == -1 and j == n:  # condition 4\n            j = n - 2\n            i = 0\n        else:\n            if j == n:  # column becomes n\n                j = 0\n            if i < 0:  # row becomes -1\n                i = n - 1\n\n        if magic_square[int(i)][int(j)]:  # condition 2\n            j = j - 2\n            i = i + 1\n            continue\n        else:\n            magic_square[int(i)][int(j)] = num\n            num = num + 1\n\n        j = j + 1\n        i = i - 1  # condition 1\n\n    return magic_square\n\nassert f(g())\n", "emb": null, "idx_generation": 281, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n=4) -> bool:\n    \"\"\"\n    Check if a square matrix is a magic square.\n    A magic square is a square matrix where the sum of each row, each column, and each diagonal is the same.\n    \"\"\"\n    target_sum = n * (n ** 2 + 1) // 2\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diag1_sum = sum(matrix[i][i] for i in range(n))\n    diag2_sum = sum(matrix[i][n-i-1] for i in range(n))\n    \n    return all(sum == target_sum for sum in row_sums + col_sums + [diag1_sum, diag2_sum])", "solution_func": "def g(n=4):\n    \"\"\"\n    Generate a magic square of size n.\n    \"\"\"\n    magic_square = [[0] * n for _ in range(n)]\n    i = n // 2\n    j = n - 1\n    num = 1\n\n    while num <= n ** 2:\n        if i == -1 and j == n:  # condition 4\n            j = n - 2\n            i = 0\n        else:\n            if j == n:  # column becomes n\n                j = 0\n            if i < 0:  # row becomes -1\n                i = n - 1\n\n        if magic_square[int(i)][int(j)]:  # condition 2\n            j = j - 2\n            i = i + 1\n            continue\n        else:\n            magic_square[int(i)][int(j)] = num\n            num = num + 1\n\n        j = j + 1\n        i = i - 1  # condition 1\n\n    return magic_square", "map_ix": null}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the given list that sums up to the target value.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(n=10, target=15):\n    \"\"\"\n    Generate a list of random integers.\n    \"\"\"\n    import random\n    return random.sample(range(1, n+1), n), target\n\nassert f(*g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0], "idx_generation": 281, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the given list that sums up to the target value.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(n=10, target=15):\n    \"\"\"\n    Generate a list of random integers.\n    \"\"\"\n    import random\n    return random.sample(range(1, n+1), n), target", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 1]}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(n: int, m: int) -> bool:\n    \"\"\"\n    Check if n is a power of m.\n    \"\"\"\n    while n % m == 0:\n        n = n // m\n    return n == 1\n\ndef g(m=2):\n    \"\"\"\n    Generate a random power of m.\n    \"\"\"\n    import random\n    return m ** random.randint(1, 10)\n\nassert f(g(), m)\n", "emb": null, "idx_generation": 281, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(n: int, m: int) -> bool:\n    \"\"\"\n    Check if n is a power of m.\n    \"\"\"\n    while n % m == 0:\n        n = n // m\n    return n == 1", "solution_func": "def g(m=2):\n    \"\"\"\n    Generate a random power of m.\n    \"\"\"\n    import random\n    return m ** random.randint(1, 10)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(l: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, check if there are two numbers in the list that add up to the target.\n    Return True if there are, False otherwise.\n    \"\"\"\n    return any(target - x in l for x in l)\n\ndef g(l: List[int], target: int):\n    return l\n\nassert f(g([1, 2, 3, 4, 5], 9))\n", "emb": null, "idx_generation": 281, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(l: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, check if there are two numbers in the list that add up to the target.\n    Return True if there are, False otherwise.\n    \"\"\"\n    return any(target - x in l for x in l)", "solution_func": "def g(l: List[int], target: int):\n    return l", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, word='python') -> bool:\n    \"\"\"\n    Check if the given number is divisible by the number of characters in the word.\n    Return True if it is divisible, False otherwise.\n    \"\"\"\n    return n % len(word) == 0\n\ndef g(word='python'):\n    return len(word)\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 281, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, word='python') -> bool:\n    \"\"\"\n    Check if the given number is divisible by the number of characters in the word.\n    Return True if it is divisible, False otherwise.\n    \"\"\"\n    return n % len(word) == 0", "solution_func": "def g(word='python'):\n    return len(word)", "map_ix": [0, 0, 0, 1, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, m: int) -> bool:\n    \"\"\"\n    Check if the product of two numbers is equal to the square of their sum.\n    Return True if it is equal, False otherwise.\n    \"\"\"\n    return n * m == (n + m) ** 2\n\ndef g(n: int, m: int):\n    return n, m\n\nassert f(g(3, 4))\n", "emb": null, "idx_generation": 281, "target_skills": null, "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, m: int) -> bool:\n    \"\"\"\n    Check if the product of two numbers is equal to the square of their sum.\n    Return True if it is equal, False otherwise.\n    \"\"\"\n    return n * m == (n + m) ** 2", "solution_func": "def g(n: int, m: int):\n    return n, m", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: str, y: str, z: str, target: str='abc') -> bool:\n    \"\"\"\n    Given three strings x, y, and z, determine if the characters in target can be formed by interleaving the characters\n    of x and y while maintaining the order of their characters.\n\n    For example, given x = \"abc\", y = \"def\", and z = \"abdecf\", the function should return True because \"abdecf\"\n    can be formed by interleaving \"abc\" and \"def\".\n\n    Note that the function should return False if the characters of target cannot be formed by interleaving x and y.\n    \"\"\"\n    if len(target) != len(x) + len(y):\n        return False\n    if not x and not y:\n        return target == z\n    if x and y:\n        if x[0] == target[0] and y[0] == target[0]:\n            return f(x[1:], y, z, target[1:]) or f(x, y[1:], z, target[1:])\n        elif x[0] == target[0]:\n            return f(x[1:], y, z, target[1:])\n        elif y[0] == target[0]:\n            return f(x, y[1:], z, target[1:])\n        else:\n            return False\n    elif x:\n        return x == target and z.startswith(x)\n    else:\n        return y == target and z.endswith(y)\ndef g(x: str, y: str, z: str):\n    m, n = len(x), len(y)\n    dp = [[False] * (n + 1) for _ in range(m + 1)]\n    dp[0][0] = True\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i > 0 and x[i - 1] == z[i + j - 1]:\n                dp[i][j] = dp[i - 1][j]\n            if j > 0 and y[j - 1] == z[i + j - 1]:\n                dp[i][j] = dp[i][j] or dp[i][j - 1]\n    return dp[m][n]\nassert f(g(\"abc\", \"def\", \"abdecf\"))\n", "emb": null, "idx_generation": 281, "target_skills": null, "problem_func": "from typing import*\ndef f(x: str, y: str, z: str, target: str='abc') -> bool:\n    \"\"\"\n    Given three strings x, y, and z, determine if the characters in target can be formed by interleaving the characters\n    of x and y while maintaining the order of their characters.\n\n    For example, given x = \"abc\", y = \"def\", and z = \"abdecf\", the function should return True because \"abdecf\"\n    can be formed by interleaving \"abc\" and \"def\".\n\n    Note that the function should return False if the characters of target cannot be formed by interleaving x and y.\n    \"\"\"\n    if len(target) != len(x) + len(y):\n        return False\n    if not x and not y:\n        return target == z\n    if x and y:\n        if x[0] == target[0] and y[0] == target[0]:\n            return f(x[1:], y, z, target[1:]) or f(x, y[1:], z, target[1:])\n        elif x[0] == target[0]:\n            return f(x[1:], y, z, target[1:])\n        elif y[0] == target[0]:\n            return f(x, y[1:], z, target[1:])\n        else:\n            return False\n    elif x:\n        return x == target and z.startswith(x)\n    else:\n        return y == target and z.endswith(y)", "solution_func": "def g(x: str, y: str, z: str):\n    m, n = len(x), len(y)\n    dp = [[False] * (n + 1) for _ in range(m + 1)]\n    dp[0][0] = True\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i > 0 and x[i - 1] == z[i + j - 1]:\n                dp[i][j] = dp[i - 1][j]\n            if j > 0 and y[j - 1] == z[i + j - 1]:\n                dp[i][j] = dp[i][j] or dp[i][j - 1]\n    return dp[m][n]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], k: int=3) -> bool:\n    \"\"\"\n    Given a list of integers and an integer k, return True if it is possible to divide the list into k non-empty\n    sublists with equal sums.\n\n    For example, given the list [4, 3, 2, 3, 5, 2, 1] and k = 4, the function should return True since it's possible\n    to divide the list into four sublists [4], [3, 2], [3, 5], [2, 1] that all have equal sums.\n    \"\"\"\n    if sum(nums) % k != 0:\n        return False\n    target = sum(nums) // k\n    visited = [False] * len(nums)\n    return backtrack(nums, 0, k, 0, target, visited)\ndef backtrack(nums: List[int], start: int, k: int, curr_sum: int, target: int, visited: List[bool]) -> bool:\n    if k == 1:\n        return True\n    if curr_sum == target:\n        return backtrack(nums, 0, k - 1, 0, target, visited)\n    for i in range(start, len(nums)):\n        if not visited[i] and curr_sum + nums[i] <= target:\n            visited[i] = True\n            if backtrack(nums, i + 1, k, curr_sum + nums[i], target, visited):\n                return True\n            visited[i] = False\n    return False\ndef g(nums: List[int], k: int=3):\n    return f(nums, k)\nassert f(g([4, 3, 2, 3, 5, 2, 1]))\n", "emb": null, "idx_generation": 281, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], k: int=3) -> bool:\n    \"\"\"\n    Given a list of integers and an integer k, return True if it is possible to divide the list into k non-empty\n    sublists with equal sums.\n\n    For example, given the list [4, 3, 2, 3, 5, 2, 1] and k = 4, the function should return True since it's possible\n    to divide the list into four sublists [4], [3, 2], [3, 5], [2, 1] that all have equal sums.\n    \"\"\"\n    if sum(nums) % k != 0:\n        return False\n    target = sum(nums) // k\n    visited = [False] * len(nums)\n    return backtrack(nums, 0, k, 0, target, visited)\ndef backtrack(nums: List[int], start: int, k: int, curr_sum: int, target: int, visited: List[bool]) -> bool:\n    if k == 1:\n        return True\n    if curr_sum == target:\n        return backtrack(nums, 0, k - 1, 0, target, visited)\n    for i in range(start, len(nums)):\n        if not visited[i] and curr_sum + nums[i] <= target:\n            visited[i] = True\n            if backtrack(nums, i + 1, k, curr_sum + nums[i], target, visited):\n                return True\n            visited[i] = False\n    return False", "solution_func": "def g(nums: List[int], k: int=3):\n    return f(nums, k)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], k: int=3) -> bool:\n    \"\"\"\n    Given an array of integers nums and a positive integer k, find whether it's possible to divide this array into\n    k non-empty subsets whose sums are all equal.\n\n    For example, given nums = [4, 3, 2, 3, 5, 2, 1] and k = 4, return True since it's possible to divide the array\n    into 4 subsets [1], [2, 3], [2, 3], [4, 5] that all have equal sums.\n    \"\"\"\n    if sum(nums) % k != 0:\n        return False\n    target = sum(nums) // k\n    return backtrack(nums, [0] * k, 0, target)\ndef backtrack(nums: List[int], subset_sums: List[int], index: int, target: int) -> bool:\n    if index == len(nums):\n        return len(set(subset_sums)) == 1\n    for i in range(len(subset_sums)):\n        if subset_sums[i] + nums[index] <= target:\n            subset_sums[i] += nums[index]\n            if backtrack(nums, subset_sums, index + 1, target):\n                return True\n            subset_sums[i] -= nums[index]\n    return False\ndef g(nums: List[int], k: int=3):\n    return f(nums, k)\nassert f(g([4, 3, 2, 3, 5, 2, 1]))\n", "emb": null, "idx_generation": 281, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], k: int=3) -> bool:\n    \"\"\"\n    Given an array of integers nums and a positive integer k, find whether it's possible to divide this array into\n    k non-empty subsets whose sums are all equal.\n\n    For example, given nums = [4, 3, 2, 3, 5, 2, 1] and k = 4, return True since it's possible to divide the array\n    into 4 subsets [1], [2, 3], [2, 3], [4, 5] that all have equal sums.\n    \"\"\"\n    if sum(nums) % k != 0:\n        return False\n    target = sum(nums) // k\n    return backtrack(nums, [0] * k, 0, target)\ndef backtrack(nums: List[int], subset_sums: List[int], index: int, target: int) -> bool:\n    if index == len(nums):\n        return len(set(subset_sums)) == 1\n    for i in range(len(subset_sums)):\n        if subset_sums[i] + nums[index] <= target:\n            subset_sums[i] += nums[index]\n            if backtrack(nums, subset_sums, index + 1, target):\n                return True\n            subset_sums[i] -= nums[index]\n    return False", "solution_func": "def g(nums: List[int], k: int=3):\n    return f(nums, k)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: List[int], n=1000, s=500000) -> bool:\n    \"\"\"Construct a list of n distinct integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n = 1000, s = 500000):\n    x = [i for i in range(1, n+1)]\n    return x\nassert f(g())\n", "emb": null, "idx_generation": 281, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], n=1000, s=500000) -> bool:\n    \"\"\"Construct a list of n distinct integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)", "solution_func": "def g(n = 1000, s = 500000):\n    x = [i for i in range(1, n+1)]\n    return x", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(li: List[int], target=15) -> bool:\n    \"\"\"Find a subsequence of li whose sum is equal to target\"\"\"\n    return any(sum(sub_li) == target for sub_li in powerset(li))\ndef g(li = [1, 2, 3, 4, 5]):\n    from itertools import chain, combinations\n    def powerset(iterable):\n        s = list(iterable)\n        return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))\n    return powerset(li)\nassert f(g())\n", "emb": null, "idx_generation": 282, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(li: List[int], target=15) -> bool:\n    \"\"\"Find a subsequence of li whose sum is equal to target\"\"\"\n    return any(sum(sub_li) == target for sub_li in powerset(li))", "solution_func": "def g(li = [1, 2, 3, 4, 5]):\n    from itertools import chain, combinations\n    def powerset(iterable):\n        s = list(iterable)\n        return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))\n    return powerset(li)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(li: List[int], target=0) -> bool:\n    \"\"\"Find two elements in li whose sum is equal to target\"\"\"\n    return any(li[i] + li[j] == target for i in range(len(li)) for j in range(i + 1, len(li)))\ndef g(li = [-1, 2, 3, 5, -4]):\n    return li\nassert f(g())\n", "emb": null, "idx_generation": 282, "target_skills": null, "problem_func": "from typing import*\ndef f(li: List[int], target=0) -> bool:\n    \"\"\"Find two elements in li whose sum is equal to target\"\"\"\n    return any(li[i] + li[j] == target for i in range(len(li)) for j in range(i + 1, len(li)))", "solution_func": "def g(li = [-1, 2, 3, 5, -4]):\n    return li", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(li: List[int], k=3) -> bool:\n    \"\"\"Find the k largest elements in li\"\"\"\n    return sorted(li)[-k:] == g(li, k)\ndef g(li = [5, 2, 8, 1, 9, 3], k = 3):\n    from heapq import nlargest\n    return nlargest(k, li)\nassert f(g())\n", "emb": null, "idx_generation": 282, "target_skills": null, "problem_func": "from typing import*\ndef f(li: List[int], k=3) -> bool:\n    \"\"\"Find the k largest elements in li\"\"\"\n    return sorted(li)[-k:] == g(li, k)", "solution_func": "def g(li = [5, 2, 8, 1, 9, 3], k = 3):\n    from heapq import nlargest\n    return nlargest(k, li)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(array: List[int], target: int, k: int) -> bool:\n    \"\"\"\n    Determine if there are two distinct indices i and j in the array such that\n    array[i] + array[j] = target, and the absolute difference between i and j is\n    less than or equal to k.\n    \"\"\"\n    seen = {}\n    for i, num in enumerate(array):\n        if target - num in seen and abs(i - seen[target - num]) <= k:\n            return True\n        seen[num] = i\n    return False\n\ndef g(array: List[int], target: int, k: int):\n    return array, target, k\n\nassert f(g())\n", "emb": null, "idx_generation": 282, "target_skills": null, "problem_func": "from typing import*\ndef f(array: List[int], target: int, k: int) -> bool:\n    \"\"\"\n    Determine if there are two distinct indices i and j in the array such that\n    array[i] + array[j] = target, and the absolute difference between i and j is\n    less than or equal to k.\n    \"\"\"\n    seen = {}\n    for i, num in enumerate(array):\n        if target - num in seen and abs(i - seen[target - num]) <= k:\n            return True\n        seen[num] = i\n    return False", "solution_func": "def g(array: List[int], target: int, k: int):\n    return array, target, k", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Determine if the target number is present in the matrix,\n    where the matrix is sorted in non-decreasing order.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    i, j = 0, cols - 1\n    while i < rows and j >= 0:\n        if matrix[i][j] == target:\n            return True\n        elif matrix[i][j] < target:\n            i += 1\n        else:\n            j -= 1\n    return False\n\ndef g(matrix: List[List[int]], target: int):\n    return matrix, target\n\nassert f(g())\n", "emb": null, "idx_generation": 282, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Determine if the target number is present in the matrix,\n    where the matrix is sorted in non-decreasing order.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    i, j = 0, cols - 1\n    while i < rows and j >= 0:\n        if matrix[i][j] == target:\n            return True\n        elif matrix[i][j] < target:\n            i += 1\n        else:\n            j -= 1\n    return False", "solution_func": "def g(matrix: List[List[int]], target: int):\n    return matrix, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, k: int) -> bool:\n    \"\"\"\n    Determine if a given number n is divisible by k.\n    \"\"\"\n    return n % k == 0\n\ndef g(n: int, k: int):\n    return n, k\n\nassert f(g())\n", "emb": null, "idx_generation": 282, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, k: int) -> bool:\n    \"\"\"\n    Determine if a given number n is divisible by k.\n    \"\"\"\n    return n % k == 0", "solution_func": "def g(n: int, k: int):\n    return n, k", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target value\"\"\"\n    for i in range(len(nums)-2):\n        for j in range(i+1, len(nums)-1):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(target=0):\n    nums = [-1, 2, 4, 5, -2, 7, 3]\n    return nums\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 282, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target value\"\"\"\n    for i in range(len(nums)-2):\n        for j in range(i+1, len(nums)-1):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False", "solution_func": "def g(target=0):\n    nums = [-1, 2, 4, 5, -2, 7, 3]\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, primes: List[int]) -> bool:\n    \"\"\"Check if a given number is a product of two prime numbers\"\"\"\n    for i in range(len(primes)-1):\n        for j in range(i+1, len(primes)):\n            if primes[i] * primes[j] == n:\n                return True\n    return False\ndef g(primes = [2, 3, 5, 7, 11, 13, 17, 19]):\n    n = 221\n    return n, primes\nassert f(*g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 282, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, primes: List[int]) -> bool:\n    \"\"\"Check if a given number is a product of two prime numbers\"\"\"\n    for i in range(len(primes)-1):\n        for j in range(i+1, len(primes)):\n            if primes[i] * primes[j] == n:\n                return True\n    return False", "solution_func": "def g(primes = [2, 3, 5, 7, 11, 13, 17, 19]):\n    n = 221\n    return n, primes", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(grid: List[List[int]], target=15) -> bool:\n    \"\"\"Check if there is a 2x2 square in the grid that adds up to the target value\"\"\"\n    for i in range(len(grid)-1):\n        for j in range(len(grid[i])-1):\n            if grid[i][j] + grid[i+1][j] + grid[i][j+1] + grid[i+1][j+1] == target:\n                return True\n    return False\ndef g():\n    grid = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\n    return grid\nassert f(g())\n", "emb": null, "idx_generation": 282, "target_skills": null, "problem_func": "from typing import*\ndef f(grid: List[List[int]], target=15) -> bool:\n    \"\"\"Check if there is a 2x2 square in the grid that adds up to the target value\"\"\"\n    for i in range(len(grid)-1):\n        for j in range(len(grid[i])-1):\n            if grid[i][j] + grid[i+1][j] + grid[i][j+1] + grid[i+1][j+1] == target:\n                return True\n    return False", "solution_func": "def g():\n    grid = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\n    return grid", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(seq: List[int], target: int, length: int) -> bool:\n    \"\"\"Find a subsequence of length 'length' in 'seq' that adds up to 'target'\"\"\"\n    def is_subseq(subseq, seq):\n        i = 0\n        for num in seq:\n            if i == len(subseq):\n                break\n            if num == subseq[i]:\n                i += 1\n        return i == len(subseq)\n\n    return is_subseq([1]*length, seq) and sum(seq) == target\ndef g(target = 100, length = 5):\n    return [1] * length + [target - length]\nassert f(g())\n", "emb": null, "idx_generation": 282, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(seq: List[int], target: int, length: int) -> bool:\n    \"\"\"Find a subsequence of length 'length' in 'seq' that adds up to 'target'\"\"\"\n    def is_subseq(subseq, seq):\n        i = 0\n        for num in seq:\n            if i == len(subseq):\n                break\n            if num == subseq[i]:\n                i += 1\n        return i == len(subseq)\n\n    return is_subseq([1]*length, seq) and sum(seq) == target", "solution_func": "def g(target = 100, length = 5):\n    return [1] * length + [target - length]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Find a pair of numbers in the list that sum up to the target_sum\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                return True\n    return False\ndef g(numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target_sum=10):\n    return numbers\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 283, "target_skills": null, "problem_func": "from typing import*\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Find a pair of numbers in the list that sum up to the target_sum\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                return True\n    return False", "solution_func": "def g(numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target_sum=10):\n    return numbers", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(words: List[str], prefix='pre', suffix='fix') -> bool:\n    \"\"\"Check if any word in the list has the given prefix and suffix\"\"\"\n    for word in words:\n        if word.startswith(prefix) and word.endswith(suffix):\n            return True\n    return False\ndef g(words=['prefix', 'suffix', 'word', 'example', 'premature'], prefix='pre', suffix='fix'):\n    return words\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 283, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], prefix='pre', suffix='fix') -> bool:\n    \"\"\"Check if any word in the list has the given prefix and suffix\"\"\"\n    for word in words:\n        if word.startswith(prefix) and word.endswith(suffix):\n            return True\n    return False", "solution_func": "def g(words=['prefix', 'suffix', 'word', 'example', 'premature'], prefix='pre', suffix='fix'):\n    return words", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_row_sum=10) -> bool:\n    \"\"\"Check if any row in the matrix has the given target_row_sum\"\"\"\n    for row in matrix:\n        if sum(row) == target_row_sum:\n            return True\n    return False\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target_row_sum=10):\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 283, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_row_sum=10) -> bool:\n    \"\"\"Check if any row in the matrix has the given target_row_sum\"\"\"\n    for row in matrix:\n        if sum(row) == target_row_sum:\n            return True\n    return False", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target_row_sum=10):\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(x: np.ndarray) -> bool:\n    \"\"\"Check if the input array is symmetric\"\"\"\n    return np.array_equal(x, x.T)\n    \ndef g():\n    n = np.random.randint(3, 10)\n    x = np.random.randint(0, 10, size=(n, n))\n    x = (x + x.T) // 2  # Make the array symmetric\n    return x\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 283, "target_skills": null, "problem_func": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(x: np.ndarray) -> bool:\n    \"\"\"Check if the input array is symmetric\"\"\"\n    return np.array_equal(x, x.T)", "solution_func": "def g():\n    n = np.random.randint(3, 10)\n    x = np.random.randint(0, 10, size=(n, n))\n    x = (x + x.T) // 2  # Make the array symmetric\n    return x", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19]) -> bool:\n    \"\"\"Check if n is divisible by all primes\"\"\"\n    return all(n % p == 0 for p in primes)\n\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19]):\n    n = np.prod(primes)\n    return n\n\nassert f(g())\n", "emb": null, "idx_generation": 283, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19]) -> bool:\n    \"\"\"Check if n is divisible by all primes\"\"\"\n    return all(n % p == 0 for p in primes)", "solution_func": "def g(primes=[2, 3, 5, 7, 11, 13, 17, 19]):\n    n = np.prod(primes)\n    return n", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(s: str, k: int) -> bool:\n    \"\"\"Check if the sum of ASCII values of all characters in s is divisible by k\"\"\"\n    return sum(ord(c) for c in s) % k == 0\n\ndef g(k: int):\n    n = np.random.randint(1, 10)\n    s = ''.join(chr(np.random.randint(97, 123)) for _ in range(n))\n    return s, k\n\nassert f(*g())\n", "emb": null, "idx_generation": 283, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(s: str, k: int) -> bool:\n    \"\"\"Check if the sum of ASCII values of all characters in s is divisible by k\"\"\"\n    return sum(ord(c) for c in s) % k == 0", "solution_func": "def g(k: int):\n    n = np.random.randint(1, 10)\n    s = ''.join(chr(np.random.randint(97, 123)) for _ in range(n))\n    return s, k", "map_ix": null}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\ndef f(s: str, target='hello') -> bool:\n    \"\"\"Check if a string is a permutation of a target string.\"\"\"\n    return sorted(s) == sorted(target)\ndef g(target = 'hello'):\n    import random\n    return ''.join(random.sample(target, len(target)))\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 283, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(s: str, target='hello') -> bool:\n    \"\"\"Check if a string is a permutation of a target string.\"\"\"\n    return sorted(s) == sorted(target)", "solution_func": "def g(target = 'hello'):\n    import random\n    return ''.join(random.sample(target, len(target)))", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\ndef f(nums: List[int], k=2) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target.\"\"\"\n    seen = set()\n    for num in nums:\n        if k - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(k = 2):\n    import random\n    nums = random.sample(range(-10, 10), 10)\n    return nums\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 283, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(nums: List[int], k=2) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target.\"\"\"\n    seen = set()\n    for num in nums:\n        if k - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(k = 2):\n    import random\n    nums = random.sample(range(-10, 10), 10)\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\ndef f(points: List[List[int]], target=5) -> bool:\n    \"\"\"Find two points in the list that have a distance less than the target.\"\"\"\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            if ((points[i][0] - points[j][0])**2 + (points[i][1] - points[j][1])**2)**0.5 < target:\n                return True\n    return False\ndef g(target = 5):\n    import random\n    points = []\n    for _ in range(5):\n        x = random.randint(-10, 10)\n        y = random.randint(-10, 10)\n        points.append([x, y])\n    return points\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 283, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(points: List[List[int]], target=5) -> bool:\n    \"\"\"Find two points in the list that have a distance less than the target.\"\"\"\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            if ((points[i][0] - points[j][0])**2 + (points[i][1] - points[j][1])**2)**0.5 < target:\n                return True\n    return False", "solution_func": "def g(target = 5):\n    import random\n    points = []\n    for _ in range(5):\n        x = random.randint(-10, 10)\n        y = random.randint(-10, 10)\n        points.append([x, y])\n    return points", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(arr: List[int], target=25, count=5) -> bool:\n    \"\"\"Find if there are 'count' numbers in the array that sum up to 'target'\"\"\"\n    from itertools import combinations\n    for c in combinations(arr, count):\n        if sum(c) == target:\n            return True\n    return False\ndef g(target=25, count=5):\n    return list(range(1, target+1))\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 283, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(arr: List[int], target=25, count=5) -> bool:\n    \"\"\"Find if there are 'count' numbers in the array that sum up to 'target'\"\"\"\n    from itertools import combinations\n    for c in combinations(arr, count):\n        if sum(c) == target:\n            return True\n    return False", "solution_func": "def g(target=25, count=5):\n    return list(range(1, target+1))", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, a=2, b=3, c=4) -> bool:\n    \"\"\"Check if the given values satisfy the equation x^a + y^b = z^c\"\"\"\n    return math.pow(x, a) + math.pow(y, b) == math.pow(z, c)\n\ndef g(a=2, b=3, c=4):\n    return (math.pow(c, c) - math.pow(b, b)) / math.pow(a, a)\n    \nassert f(g())\n", "emb": null, "idx_generation": 284, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, a=2, b=3, c=4) -> bool:\n    \"\"\"Check if the given values satisfy the equation x^a + y^b = z^c\"\"\"\n    return math.pow(x, a) + math.pow(y, b) == math.pow(z, c)", "solution_func": "def g(a=2, b=3, c=4):\n    return (math.pow(c, c) - math.pow(b, b)) / math.pow(a, a)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=1, b=2, c=3, d=4) -> bool:\n    \"\"\"Check if n is divisible by the sum of a, b, c, and d\"\"\"\n    return n % (a + b + c + d) == 0\n\ndef g(a=1, b=2, c=3, d=4):\n    return (a + b + c + d) * 10\n    \nassert f(g())\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0], "idx_generation": 284, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=1, b=2, c=3, d=4) -> bool:\n    \"\"\"Check if n is divisible by the sum of a, b, c, and d\"\"\"\n    return n % (a + b + c + d) == 0", "solution_func": "def g(a=1, b=2, c=3, d=4):\n    return (a + b + c + d) * 10", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(lst: list, n: int) -> bool:\n    \"\"\"Check if n is in the list and the list is sorted in ascending order\"\"\"\n    return n in lst and lst == sorted(lst)\n\ndef g(n=5):\n    lst = random.sample(range(10), n)\n    return lst\n\nassert f(g())\n", "emb": null, "idx_generation": 284, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(lst: list, n: int) -> bool:\n    \"\"\"Check if n is in the list and the list is sorted in ascending order\"\"\"\n    return n in lst and lst == sorted(lst)", "solution_func": "def g(n=5):\n    lst = random.sample(range(10), n)\n    return lst", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums = [1, 5, 10, 15]):\n    return nums\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 284, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums = [1, 5, 10, 15]):\n    return nums", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"Check if any word in the list contains the target string\"\"\"\n    for word in words:\n        if target in word:\n            return True\n    return False\ndef g(words = ['puzzle', 'python', 'programming']):\n    return words\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 284, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"Check if any word in the list contains the target string\"\"\"\n    for word in words:\n        if target in word:\n            return True\n    return False", "solution_func": "def g(words = ['puzzle', 'python', 'programming']):\n    return words", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if the target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 284, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if the target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target='Hello, World!') -> bool:\n    \"\"\"Check if a given string is a palindrome\"\"\"\n    return s == target[::-1]\ndef g(target = 'Hello, World!'):\n    return target[::-1]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 284, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='Hello, World!') -> bool:\n    \"\"\"Check if a given string is a palindrome\"\"\"\n    return s == target[::-1]", "solution_func": "def g(target = 'Hello, World!'):\n    return target[::-1]", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, m: int, target=1000) -> bool:\n    \"\"\"Find two numbers that sum up to a given target number\"\"\"\n    return n + m == target\ndef g(target = 1000):\n    return [target - 1, 1]\nassert f(g())\n", "emb": null, "idx_generation": 284, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m: int, target=1000) -> bool:\n    \"\"\"Find two numbers that sum up to a given target number\"\"\"\n    return n + m == target", "solution_func": "def g(target = 1000):\n    return [target - 1, 1]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exist two numbers in a list that sum up to a given target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target = 10):\n    return [1, target - 1]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 284, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exist two numbers in a list that sum up to a given target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target = 10):\n    return [1, target - 1]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, target: str, sub: str) -> bool:\n    \"\"\"Check if a given string can be transformed into a target string by substituting a substring.\"\"\"\n    return s.replace(sub, target) == target\ndef g(target: str, sub: str):\n    return target.replace(sub, \"\")\nassert f(g())\n", "emb": null, "idx_generation": 284, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target: str, sub: str) -> bool:\n    \"\"\"Check if a given string can be transformed into a target string by substituting a substring.\"\"\"\n    return s.replace(sub, target) == target", "solution_func": "def g(target: str, sub: str):\n    return target.replace(sub, \"\")", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(x: int, a=0, b=0, c=0) -> bool:\n    \"\"\"Check if x is a quadratic equation with coefficients a, b, and c\"\"\"\n    return a * x**2 + b * x + c == 0\n\ndef g(a=0, b=0, c=0):\n    x = random.randint(-10, 10)\n    while f(x, a, b, c):\n        x = random.randint(-10, 10)\n    return x\nassert f(g(), a=-1, b=2, c=1)\n", "emb": null, "idx_generation": 285, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(x: int, a=0, b=0, c=0) -> bool:\n    \"\"\"Check if x is a quadratic equation with coefficients a, b, and c\"\"\"\n    return a * x**2 + b * x + c == 0", "solution_func": "def g(a=0, b=0, c=0):\n    x = random.randint(-10, 10)\n    while f(x, a, b, c):\n        x = random.randint(-10, 10)\n    return x", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(x: int, a=0, b=0, c=0) -> bool:\n    \"\"\"Check if x is a solution to a quadratic equation with coefficients a, b, and c\"\"\"\n    return a * x**2 + b * x + c == 0\n\ndef g(a=0, b=0, c=0):\n    if a == 0:\n        a = 1\n    delta = b**2 - 4*a*c\n    if delta < 0:\n        x = None\n    elif delta == 0:\n        x = -b / (2*a)\n    else:\n        x1 = (-b + math.sqrt(delta)) / (2*a)\n        x2 = (-b - math.sqrt(delta)) / (2*a)\n        x = min(x1, x2)\n    return x\nassert f(g(), a=1, b=-4, c=3)\n", "emb": null, "idx_generation": 285, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: int, a=0, b=0, c=0) -> bool:\n    \"\"\"Check if x is a solution to a quadratic equation with coefficients a, b, and c\"\"\"\n    return a * x**2 + b * x + c == 0", "solution_func": "def g(a=0, b=0, c=0):\n    if a == 0:\n        a = 1\n    delta = b**2 - 4*a*c\n    if delta < 0:\n        x = None\n    elif delta == 0:\n        x = -b / (2*a)\n    else:\n        x1 = (-b + math.sqrt(delta)) / (2*a)\n        x2 = (-b - math.sqrt(delta)) / (2*a)\n        x = min(x1, x2)\n    return x", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(x: int, a=0, b=0, c=0) -> bool:\n    \"\"\"Check if x is a solution to a quadratic equation with coefficients a, b, and c\"\"\"\n    return a * x**2 + b * x + c == 0\n\ndef g(a=0, b=0, c=0):\n    x = random.randint(-10, 10)\n    while not f(x, a, b, c):\n        x = random.randint(-10, 10)\n    return x\nassert f(g(), a=1, b=-4, c=3)\n", "emb": null, "idx_generation": 285, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(x: int, a=0, b=0, c=0) -> bool:\n    \"\"\"Check if x is a solution to a quadratic equation with coefficients a, b, and c\"\"\"\n    return a * x**2 + b * x + c == 0", "solution_func": "def g(a=0, b=0, c=0):\n    x = random.randint(-10, 10)\n    while not f(x, a, b, c):\n        x = random.randint(-10, 10)\n    return x", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, determine if there exists a pair of numbers in the list\n    whose sum is equal to the target number.\n    \"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target = 10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 285, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, determine if there exists a pair of numbers in the list\n    whose sum is equal to the target number.\n    \"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))", "solution_func": "def g(target = 10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target number, determine if there exists a pair of numbers in the matrix\n    whose sum is equal to the target number.\n    \"\"\"\n    return any((matrix[i][j] + matrix[k][l] == target) for i in range(len(matrix)) for j in range(len(matrix[i])) \n               for k in range(i, len(matrix)) for l in range(len(matrix[k])) if (i != k or j != l))\ndef g(target = 20):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 285, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target number, determine if there exists a pair of numbers in the matrix\n    whose sum is equal to the target number.\n    \"\"\"\n    return any((matrix[i][j] + matrix[k][l] == target) for i in range(len(matrix)) for j in range(len(matrix[i])) \n               for k in range(i, len(matrix)) for l in range(len(matrix[k])) if (i != k or j != l))", "solution_func": "def g(target = 20):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(string: str, target_length=10) -> bool:\n    \"\"\"\n    Given a string and a target length, determine if the length of the string is equal to the target length.\n    \"\"\"\n    return len(string) == target_length\ndef g(target_length = 10):\n    string = \"Hello World\"\n    return string\nassert f(g())\n", "emb": null, "idx_generation": 285, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, target_length=10) -> bool:\n    \"\"\"\n    Given a string and a target length, determine if the length of the string is equal to the target length.\n    \"\"\"\n    return len(string) == target_length", "solution_func": "def g(target_length = 10):\n    string = \"Hello World\"\n    return string", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Find two numbers in the list that add up to the target value\n    \"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(nums: List[int], target: int):\n    \"\"\"\n    Sort the list of numbers and use two pointers to find the two numbers\n    \"\"\"\n    nums.sort()\n    left = 0\n    right = len(nums) - 1\n    while left < right:\n        if nums[left] + nums[right] == target:\n            return [nums[left], nums[right]]\n        elif nums[left] + nums[right] < target:\n            left += 1\n        else:\n            right -= 1\n    return []\nassert f(g())\n", "emb": null, "idx_generation": 285, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Find two numbers in the list that add up to the target value\n    \"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))", "solution_func": "def g(nums: List[int], target: int):\n    \"\"\"\n    Sort the list of numbers and use two pointers to find the two numbers\n    \"\"\"\n    nums.sort()\n    left = 0\n    right = len(nums) - 1\n    while left < right:\n        if nums[left] + nums[right] == target:\n            return [nums[left], nums[right]]\n        elif nums[left] + nums[right] < target:\n            left += 1\n        else:\n            right -= 1\n    return []", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Find if the target value exists in the matrix\n    \"\"\"\n    if not matrix:\n        return False\n    row = 0\n    col = len(matrix[0]) - 1\n    while row < len(matrix) and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            row += 1\n        else:\n            col -= 1\n    return False\ndef g(matrix: List[List[int]], target: int):\n    \"\"\"\n    Start from the top-right corner of the matrix and move left or down based on the target value\n    \"\"\"\n    return matrix, target\nassert f(g())\n", "emb": null, "idx_generation": 285, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Find if the target value exists in the matrix\n    \"\"\"\n    if not matrix:\n        return False\n    row = 0\n    col = len(matrix[0]) - 1\n    while row < len(matrix) and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            row += 1\n        else:\n            col -= 1\n    return False", "solution_func": "def g(matrix: List[List[int]], target: int):\n    \"\"\"\n    Start from the top-right corner of the matrix and move left or down based on the target value\n    \"\"\"\n    return matrix, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Find if the array is a palindrome\n    \"\"\"\n    return arr == arr[::-1]\ndef g(arr: List[int]):\n    \"\"\"\n    Reverse the array and return it\n    \"\"\"\n    return arr[::-1]\nassert f(g())", "emb": null, "idx_generation": 285, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Find if the array is a palindrome\n    \"\"\"\n    return arr == arr[::-1]", "solution_func": "def g(arr: List[int]):\n    \"\"\"\n    Reverse the array and return it\n    \"\"\"\n    return arr[::-1]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(n: int, x: float, y: float) -> bool:\n    \"\"\"Determine if the point (x, y) lies within the circle centered at the origin with radius n.\"\"\"\n    return math.sqrt(x**2 + y**2) <= n\n\ndef g(x: float, y: float):\n    return (1.0, x, y)\n\nassert f(*g())\n", "emb": null, "idx_generation": 285, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, x: float, y: float) -> bool:\n    \"\"\"Determine if the point (x, y) lies within the circle centered at the origin with radius n.\"\"\"\n    return math.sqrt(x**2 + y**2) <= n", "solution_func": "def g(x: float, y: float):\n    return (1.0, x, y)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"\n    Given a list of integers, find a subset of the list that sums up to the target value\n    \"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    \n    return subset_sum(lst, target)\n\ndef g(target=100):\n    return [15, 22, 10, 5, 17, 8, 12, 25, 19]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 286, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"\n    Given a list of integers, find a subset of the list that sums up to the target value\n    \"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    \n    return subset_sum(lst, target)", "solution_func": "def g(target=100):\n    return [15, 22, 10, 5, 17, 8, 12, 25, 19]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target='banana') -> bool:\n    \"\"\"\n    Given a string, check if it contains the target string as a substring\n    \"\"\"\n    return target in s\n\ndef g(target='banana'):\n    return \"I love eating bananas\"\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 286, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='banana') -> bool:\n    \"\"\"\n    Given a string, check if it contains the target string as a substring\n    \"\"\"\n    return target in s", "solution_func": "def g(target='banana'):\n    return \"I love eating bananas\"", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, target=100) -> bool:\n    \"\"\"\n    Check if a given number is a perfect square and if it is less than the target value\n    \"\"\"\n    return sqrt(n) == int(sqrt(n)) and n < target\n\ndef g(target=100):\n    return 64\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 286, "target_skills": null, "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, target=100) -> bool:\n    \"\"\"\n    Check if a given number is a perfect square and if it is less than the target value\n    \"\"\"\n    return sqrt(n) == int(sqrt(n)) and n < target", "solution_func": "def g(target=100):\n    return 64", "map_ix": [0, 0, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the array that add up to the target value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g(target=100):\n    arr = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    return arr\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 286, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the array that add up to the target value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False", "solution_func": "def g(target=100):\n    arr = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, target: int = 10) -> bool:\n    \"\"\"Check if the string contains a digit that is equal to the target value\"\"\"\n    for char in s:\n        if char.isdigit() and int(char) == target:\n            return True\n    return False\n\ndef g(target: int = 10):\n    s = \"Hello World!\"\n    return s\n\nassert f(g())\n", "emb": null, "idx_generation": 286, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target: int = 10) -> bool:\n    \"\"\"Check if the string contains a digit that is equal to the target value\"\"\"\n    for char in s:\n        if char.isdigit() and int(char) == target:\n            return True\n    return False", "solution_func": "def g(target: int = 10):\n    s = \"Hello World!\"\n    return s", "map_ix": null}, {"fitness": 1.0, "program_str": "import math\nfrom typing import*\nfrom math import factorial\n\ndef f(n: int, target: int = 120) -> bool:\n    \"\"\"Check if the factorial of n is equal to the target value\"\"\"\n    return factorial(n) == target\n\ndef g(target: int = 120):\n    n = 5\n    return n\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 286, "target_skills": null, "problem_func": "import math\nfrom typing import*\nfrom math import factorial\n\ndef f(n: int, target: int = 120) -> bool:\n    \"\"\"Check if the factorial of n is equal to the target value\"\"\"\n    return factorial(n) == target", "solution_func": "def g(target: int = 120):\n    n = 5\n    return n", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, d=3) -> bool:\n    \"\"\"Check if a number is divisible by a given divisor.\"\"\"\n    return n % d == 0\ndef g(d=3):\n    return d * 7\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 286, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, d=3) -> bool:\n    \"\"\"Check if a number is divisible by a given divisor.\"\"\"\n    return n % d == 0", "solution_func": "def g(d=3):\n    return d * 7", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: str, y: str, z: str, w: str, a='pineapple') -> bool:\n    \"\"\"Check if a given word can be formed using the letters of another word.\"\"\"\n    return all(c in x + y + z + w for c in a)\ndef g(x='an', y='pie', z='pl', w='e'):\n    return x + y + z + w\nassert f(g())\n", "emb": null, "idx_generation": 286, "target_skills": null, "problem_func": "from typing import*\ndef f(x: str, y: str, z: str, w: str, a='pineapple') -> bool:\n    \"\"\"Check if a given word can be formed using the letters of another word.\"\"\"\n    return all(c in x + y + z + w for c in a)", "solution_func": "def g(x='an', y='pie', z='pl', w='e'):\n    return x + y + z + w", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: str, a=4, b=7) -> bool:\n    \"\"\"Check if a number is within a given range.\"\"\"\n    return a <= int(x) <= b\ndef g(a=4, b=7):\n    return str(a + b)\nassert f(g())\n", "emb": null, "idx_generation": 286, "target_skills": null, "problem_func": "from typing import*\ndef f(x: str, a=4, b=7) -> bool:\n    \"\"\"Check if a number is within a given range.\"\"\"\n    return a <= int(x) <= b", "solution_func": "def g(a=4, b=7):\n    return str(a + b)", "map_ix": null}, {"fitness": -Infinity, "program_str": "import math\nfrom typing import*\ndef f(n: int, a=10, b=2, c=3) -> bool:\n    \"\"\"Solve a mathematical equation\"\"\"\n    return (a*n**2 + b*n + c) % 2 == 0\ndef g(a=10, b=2, c=3):\n    return (-b + (b**2 - 4*a*c)**0.5) / (2*a)\nassert f(g())\n", "emb": null, "idx_generation": 286, "target_skills": null, "problem_func": "import math\nfrom typing import*\ndef f(n: int, a=10, b=2, c=3) -> bool:\n    \"\"\"Solve a mathematical equation\"\"\"\n    return (a*n**2 + b*n + c) % 2 == 0", "solution_func": "def g(a=10, b=2, c=3):\n    return (-b + (b**2 - 4*a*c)**0.5) / (2*a)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6]) -> bool:\n    \"\"\"Check if an element is present in the list\"\"\"\n    return n in lst\ndef g(lst=[1, 2, 3, 4, 5, 6]):\n    return lst[3]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 287, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6]) -> bool:\n    \"\"\"Check if an element is present in the list\"\"\"\n    return n in lst", "solution_func": "def g(lst=[1, 2, 3, 4, 5, 6]):\n    return lst[3]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6]) -> bool:\n    \"\"\"Check if the sum of a pair of elements in the list is equal to n\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == n:\n                return True\n    return False\ndef g(lst=[1, 2, 3, 4, 5, 6]):\n    return lst[0] + lst[5]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 287, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6]) -> bool:\n    \"\"\"Check if the sum of a pair of elements in the list is equal to n\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == n:\n                return True\n    return False", "solution_func": "def g(lst=[1, 2, 3, 4, 5, 6]):\n    return lst[0] + lst[5]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6]) -> bool:\n    \"\"\"Check if the sum of the first and last elements of the list is equal to n\"\"\"\n    return lst[0] + lst[-1] == n\ndef g(lst=[1, 2, 3, 4, 5, 6]):\n    return lst[0] + lst[-1]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 287, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6]) -> bool:\n    \"\"\"Check if the sum of the first and last elements of the list is equal to n\"\"\"\n    return lst[0] + lst[-1] == n", "solution_func": "def g(lst=[1, 2, 3, 4, 5, 6]):\n    return lst[0] + lst[-1]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two distinct numbers in the list that sum up to the target\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums)))\ndef g(target: int):\n    nums = [1, 2, 3, 4, 5]\n    return nums\nassert f(g(), target=7)\n", "emb": null, "idx_generation": 287, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two distinct numbers in the list that sum up to the target\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums)))", "solution_func": "def g(target: int):\n    nums = [1, 2, 3, 4, 5]\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(word: str, char: str) -> bool:\n    \"\"\"Check if the given character is present in the word\"\"\"\n    return char in word\ndef g(char: str):\n    word = \"hello\"\n    return word\nassert f(g(), char='o')\n", "emb": null, "idx_generation": 287, "target_skills": null, "problem_func": "from typing import*\ndef f(word: str, char: str) -> bool:\n    \"\"\"Check if the given character is present in the word\"\"\"\n    return char in word", "solution_func": "def g(char: str):\n    word = \"hello\"\n    return word", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], row_sum: int, col_sum: int) -> bool:\n    \"\"\"Check if the sum of each row and each column in the matrix matches the given row_sum and col_sum respectively\"\"\"\n    rows = [sum(row) == row_sum for row in matrix]\n    cols = [sum(col) == col_sum for col in zip(*matrix)]\n    return all(rows) and all(cols)\ndef g(row_sum: int, col_sum: int):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g(), row_sum=15, col_sum=12)\n", "emb": null, "idx_generation": 287, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], row_sum: int, col_sum: int) -> bool:\n    \"\"\"Check if the sum of each row and each column in the matrix matches the given row_sum and col_sum respectively\"\"\"\n    rows = [sum(row) == row_sum for row in matrix]\n    cols = [sum(col) == col_sum for col in zip(*matrix)]\n    return all(rows) and all(cols)", "solution_func": "def g(row_sum: int, col_sum: int):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(s: str, n=5, m=10, target='abcde12345') -> bool:\n    \"\"\"\n    Find a substring of a given string that starts with a letter, ends with a number, and has a certain length.\n    \"\"\"\n    return any(s[i:i+n+m].isalpha() and s[i+n:i+n+m].isdigit() for i in range(len(s)-n-m+1)) and s[i:i+n+m] == target\ndef g(n=5, m=10, target='abcde12345'):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    numbers = '0123456789'\n    return ''.join(random.choice(alphabet) for _ in range(n)) + ''.join(random.choice(numbers) for _ in range(m))\nassert f(g())\n", "emb": null, "idx_generation": 287, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(s: str, n=5, m=10, target='abcde12345') -> bool:\n    \"\"\"\n    Find a substring of a given string that starts with a letter, ends with a number, and has a certain length.\n    \"\"\"\n    return any(s[i:i+n+m].isalpha() and s[i+n:i+n+m].isdigit() for i in range(len(s)-n-m+1)) and s[i:i+n+m] == target", "solution_func": "def g(n=5, m=10, target='abcde12345'):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    numbers = '0123456789'\n    return ''.join(random.choice(alphabet) for _ in range(n)) + ''.join(random.choice(numbers) for _ in range(m))", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(matrix: List[List[int]], num_rows=5, num_cols=5, target=10) -> bool:\n    \"\"\"\n    Find a submatrix in a given matrix where the sum of all elements is equal to a given target.\n    \"\"\"\n    for i in range(num_rows):\n        for j in range(num_cols):\n            if sum(matrix[i:i+2][j:j+2]) == target:\n                return True\n    return False\n\ndef g(num_rows=5, num_cols=5, target=10):\n    return [[random.randint(0, 9) for _ in range(num_cols)] for _ in range(num_rows)]\nassert f(g())\n", "emb": null, "idx_generation": 287, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(matrix: List[List[int]], num_rows=5, num_cols=5, target=10) -> bool:\n    \"\"\"\n    Find a submatrix in a given matrix where the sum of all elements is equal to a given target.\n    \"\"\"\n    for i in range(num_rows):\n        for j in range(num_cols):\n            if sum(matrix[i:i+2][j:j+2]) == target:\n                return True\n    return False", "solution_func": "def g(num_rows=5, num_cols=5, target=10):\n    return [[random.randint(0, 9) for _ in range(num_cols)] for _ in range(num_rows)]", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(seq: List[int], target=50) -> bool:\n    \"\"\"\n    Check if a list can be partitioned into two subsequences, where the sum of the first subsequence is equal to a given target.\n    \"\"\"\n    dp = [[False] * (target + 1) for _ in range(len(seq) + 1)]\n    dp[0][0] = True\n    for i in range(1, len(seq) + 1):\n        for j in range(target + 1):\n            dp[i][j] = dp[i-1][j] or (dp[i-1][j-seq[i-1]] if j >= seq[i-1] else False)\n    return dp[len(seq)][target]\n\ndef g(target=50):\n    return random.sample(range(1, 101), 10)\nassert f(g())\n", "emb": null, "idx_generation": 287, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(seq: List[int], target=50) -> bool:\n    \"\"\"\n    Check if a list can be partitioned into two subsequences, where the sum of the first subsequence is equal to a given target.\n    \"\"\"\n    dp = [[False] * (target + 1) for _ in range(len(seq) + 1)]\n    dp[0][0] = True\n    for i in range(1, len(seq) + 1):\n        for j in range(target + 1):\n            dp[i][j] = dp[i-1][j] or (dp[i-1][j-seq[i-1]] if j >= seq[i-1] else False)\n    return dp[len(seq)][target]", "solution_func": "def g(target=50):\n    return random.sample(range(1, 101), 10)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, x: List[int], y: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of indices (i, j) such that x[i] + y[j] = n\"\"\"\n    return any([x[i] + y[j] == n for i in range(len(x)) for j in range(len(y))])\ndef g(n=10, x=[1, 2, 3, 4], y=[5, 6, 7, 8]):\n    return n, x, y\nassert f(*g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 287, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, x: List[int], y: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of indices (i, j) such that x[i] + y[j] = n\"\"\"\n    return any([x[i] + y[j] == n for i in range(len(x)) for j in range(len(y))])", "solution_func": "def g(n=10, x=[1, 2, 3, 4], y=[5, 6, 7, 8]):\n    return n, x, y", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\n\ndef f(res: List[int], lst: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, return True if the list is sorted in non-decreasing order and False otherwise.\n    \"\"\"\n    return res == sorted(lst)\n\ndef g(lst: List[int]):\n    return sorted(lst)\n\nlst = [random.randint(0, 100) for _ in range(10)]\nassert f(g(lst), lst)\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 288, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(res: List[int], lst: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, return True if the list is sorted in non-decreasing order and False otherwise.\n    \"\"\"\n    return res == sorted(lst)", "solution_func": "def g(lst: List[int]):\n    return sorted(lst)\n\nlst = [random.randint(0, 100) for _ in range(10)]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(res: List[int], lst: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, return True if the sum of the even numbers in the list is equal to the sum of the odd numbers,\n    and False otherwise.\n    \"\"\"\n    even_sum = sum([x for x in lst if x % 2 == 0])\n    odd_sum = sum([x for x in lst if x % 2 != 0])\n    return res == (even_sum == odd_sum)\n\ndef g(lst: List[int]):\n    even_sum = sum([x for x in lst if x % 2 == 0])\n    odd_sum = sum([x for x in lst if x % 2 != 0])\n    return even_sum == odd_sum\n\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g(lst), lst)\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 288, "target_skills": null, "problem_func": "from typing import*\ndef f(res: List[int], lst: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, return True if the sum of the even numbers in the list is equal to the sum of the odd numbers,\n    and False otherwise.\n    \"\"\"\n    even_sum = sum([x for x in lst if x % 2 == 0])\n    odd_sum = sum([x for x in lst if x % 2 != 0])\n    return res == (even_sum == odd_sum)", "solution_func": "def g(lst: List[int]):\n    even_sum = sum([x for x in lst if x % 2 == 0])\n    odd_sum = sum([x for x in lst if x % 2 != 0])\n    return even_sum == odd_sum\n\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(res: List[int], lst: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, return True if there exists a pair of numbers in the list whose sum is equal to 10,\n    and False otherwise.\n    \"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == 10:\n                return res == True\n    return res == False\n\ndef g(lst: List[int]):\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == 10:\n                return True\n    return False\n\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g(lst), lst)\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 288, "target_skills": null, "problem_func": "from typing import*\ndef f(res: List[int], lst: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, return True if there exists a pair of numbers in the list whose sum is equal to 10,\n    and False otherwise.\n    \"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == 10:\n                return res == True\n    return res == False", "solution_func": "def g(lst: List[int]):\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == 10:\n                return True\n    return False\n\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums: List[int], target=100):\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 288, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False", "solution_func": "def g(nums: List[int], target=100):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is symmetric.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix: List[List[int]]):\n    return matrix\n\nassert f(g())\n", "emb": null, "idx_generation": 288, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is symmetric.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "solution_func": "def g(matrix: List[List[int]]):\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if it is possible to find two numbers in the list that multiply to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g(nums: List[int], target=50):\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 288, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if it is possible to find two numbers in the list that multiply to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums: List[int], target=50):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: List[int], n=100, s=5050) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n=100, s=5050):\n    return [i for i in range(n)]\nassert f(g())\n", "emb": null, "idx_generation": 288, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], n=100, s=5050) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])", "solution_func": "def g(n=100, s=5050):\n    return [i for i in range(n)]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\n\ndef f(x: List[int], n=100, s=10000) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n=100, s=10000):\n    x = [random.randint(1, s/n) for _ in range(n)]\n    x[-1] = s - sum(x[:-1])\n    return x\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 288, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(x: List[int], n=100, s=10000) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])", "solution_func": "def g(n=100, s=10000):\n    x = [random.randint(1, s/n) for _ in range(n)]\n    x[-1] = s - sum(x[:-1])\n    return x", "map_ix": [0, 1, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: List[int], n=8, s=28) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n=8, s=28):\n    x = [s//n] * n\n    x[-1] = s - (s//n)*(n-1)\n    return x\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 288, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], n=8, s=28) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])", "solution_func": "def g(n=8, s=28):\n    x = [s//n] * n\n    x[-1] = s - (s//n)*(n-1)\n    return x", "map_ix": [1, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, p=3.14159) -> bool:\n    \"\"\"\n    Check if the given coordinates (x, y, z) lie on the surface of a sphere with radius r.\n\n    The equation of a sphere is (x-a)^2 + (y-b)^2 + (z-c)^2 = r^2, where (a, b, c) are the coordinates of the center\n    of the sphere and r is the radius.\n\n    Example:\n    x = 1, y = 2, z = 3\n    output: True\n    \"\"\"\n    assert isinstance(x, (int, float)) and isinstance(y, (int, float)) and isinstance(z, (int, float))\n    assert isinstance(p, (int, float)) and p > 0\n    r = math.sqrt(x**2 + y**2 + z**2)\n    return math.isclose(r, p, rel_tol=1e-5)\n    \ndef g(x=1, y=2, z=3, p=3.14159):\n    return x, y, z\n\nassert f(*g())\n", "emb": null, "idx_generation": 288, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, p=3.14159) -> bool:\n    \"\"\"\n    Check if the given coordinates (x, y, z) lie on the surface of a sphere with radius r.\n\n    The equation of a sphere is (x-a)^2 + (y-b)^2 + (z-c)^2 = r^2, where (a, b, c) are the coordinates of the center\n    of the sphere and r is the radius.\n\n    Example:\n    x = 1, y = 2, z = 3\n    output: True\n    \"\"\"\n    assert isinstance(x, (int, float)) and isinstance(y, (int, float)) and isinstance(z, (int, float))\n    assert isinstance(p, (int, float)) and p > 0\n    r = math.sqrt(x**2 + y**2 + z**2)\n    return math.isclose(r, p, rel_tol=1e-5)", "solution_func": "def g(x=1, y=2, z=3, p=3.14159):\n    return x, y, z", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"\n    Given a string s, check if it can be divided into n equal parts.\n\n    Sample input:\n    \"abcdef\"\n\n    Sample output:\n    True\n\n    (Sample output hidden because showing sample output would give away too much information.)\n    \"\"\"\n    return len(s) % n == 0 and all(s[i:i + len(s) // n] == s[:len(s) // n] for i in range(0, len(s), len(s) // n))\ndef g(n = 5):\n    return \"abc\" * n\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 289, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"\n    Given a string s, check if it can be divided into n equal parts.\n\n    Sample input:\n    \"abcdef\"\n\n    Sample output:\n    True\n\n    (Sample output hidden because showing sample output would give away too much information.)\n    \"\"\"\n    return len(s) % n == 0 and all(s[i:i + len(s) // n] == s[:len(s) // n] for i in range(0, len(s), len(s) // n))", "solution_func": "def g(n = 5):\n    return \"abc\" * n", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=8) -> bool:\n    \"\"\"\n    Given a matrix and a target value, find if the target is present in the matrix.\n\n    Sample input:\n    [[1, 3, 5], [7, 9, 11], [13, 15, 17]]\n    9\n\n    Sample output:\n    True\n\n    (Sample output hidden because showing sample output would give away too much information.)\n    \"\"\"\n    return any(target in row for row in matrix)\ndef g(target = 8):\n    return [[i * 2 + 1 for i in range(3)], [i * 2 + 7 for i in range(3)], [i * 2 + 13 for i in range(3)]]\nassert f(g())\n", "emb": null, "idx_generation": 289, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=8) -> bool:\n    \"\"\"\n    Given a matrix and a target value, find if the target is present in the matrix.\n\n    Sample input:\n    [[1, 3, 5], [7, 9, 11], [13, 15, 17]]\n    9\n\n    Sample output:\n    True\n\n    (Sample output hidden because showing sample output would give away too much information.)\n    \"\"\"\n    return any(target in row for row in matrix)", "solution_func": "def g(target = 8):\n    return [[i * 2 + 1 for i in range(3)], [i * 2 + 7 for i in range(3)], [i * 2 + 13 for i in range(3)]]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], n=10) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a subsequence of length n such that the sum of its elements is divisible by n.\n\n    Sample input:\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    Sample output:\n    True\n\n    (Sample output hidden because showing sample output would give away too much information.)\n    \"\"\"\n    return any(sum(nums[i:i + n]) % n == 0 for i in range(len(nums) - n + 1))\ndef g(n = 10):\n    return [i + 1 for i in range(n)]\nassert f(g())\n", "emb": null, "idx_generation": 289, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], n=10) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a subsequence of length n such that the sum of its elements is divisible by n.\n\n    Sample input:\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    Sample output:\n    True\n\n    (Sample output hidden because showing sample output would give away too much information.)\n    \"\"\"\n    return any(sum(nums[i:i + n]) % n == 0 for i in range(len(nums) - n + 1))", "solution_func": "def g(n = 10):\n    return [i + 1 for i in range(n)]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Find the sum of the first n numbers in the sequence\"\"\"\n    return sum(seq[:n]) == 55\ndef g(seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return len(seq)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 289, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Find the sum of the first n numbers in the sequence\"\"\"\n    return sum(seq[:n]) == 55", "solution_func": "def g(seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return len(seq)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if s contains exactly n vowels\"\"\"\n    return len([c for c in s.lower() if c in 'aeiou']) == n\ndef g(n=5):\n    return 'aeiou' * n\nassert f(g())\n", "emb": null, "idx_generation": 289, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if s contains exactly n vowels\"\"\"\n    return len([c for c in s.lower() if c in 'aeiou']) == n", "solution_func": "def g(n=5):\n    return 'aeiou' * n", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, seq=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]) -> bool:\n    \"\"\"Check if the nth number in the sequence is a Fibonacci number\"\"\"\n    return seq[n] in seq\ndef g(seq=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]):\n    return len(seq) - 1\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 289, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, seq=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]) -> bool:\n    \"\"\"Check if the nth number in the sequence is a Fibonacci number\"\"\"\n    return seq[n] in seq", "solution_func": "def g(seq=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]):\n    return len(seq) - 1", "map_ix": [0, 0, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(s: str, target='hello', reverse=False) -> bool:\n    \"\"\"Check if a string is equal to a target string, with an optional reverse flag\"\"\"\n    return (s == target) == reverse\n\ndef g(target='hello', reverse=False):\n    return target[::-1] if reverse else target\n\nassert f(g())\n", "emb": null, "idx_generation": 289, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(s: str, target='hello', reverse=False) -> bool:\n    \"\"\"Check if a string is equal to a target string, with an optional reverse flag\"\"\"\n    return (s == target) == reverse", "solution_func": "def g(target='hello', reverse=False):\n    return target[::-1] if reverse else target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(nums: list, target=50) -> bool:\n    \"\"\"Check if the sum of a list of numbers is equal to a target number\"\"\"\n    return sum(nums) == target\n\ndef g(target=50):\n    nums = [random.randint(1, 10) for _ in range(5)]\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 289, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(nums: list, target=50) -> bool:\n    \"\"\"Check if the sum of a list of numbers is equal to a target number\"\"\"\n    return sum(nums) == target", "solution_func": "def g(target=50):\n    nums = [random.randint(1, 10) for _ in range(5)]\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport datetime\n\ndef f(d: datetime.date, year=2022) -> bool:\n    \"\"\"Check if the year of a given date is equal to a target year\"\"\"\n    return d.year == year\n\ndef g(year=2022):\n    return datetime.date(year, 6, 15)\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 289, "target_skills": null, "problem_func": "from typing import*\nimport datetime\n\ndef f(d: datetime.date, year=2022) -> bool:\n    \"\"\"Check if the year of a given date is equal to a target year\"\"\"\n    return d.year == year", "solution_func": "def g(year=2022):\n    return datetime.date(year, 6, 15)", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=2) -> bool:\n    \"\"\"Check if the string can be split into n equal parts.\"\"\"\n    if len(s) % n != 0:\n        return False\n    part_len = len(s) // n\n    parts = [s[i:i+part_len] for i in range(0, len(s), part_len)]\n    return all(p == parts[0] for p in parts)\ndef g(n = 2):\n    s = \"abc\" * n\n    return s\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 289, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=2) -> bool:\n    \"\"\"Check if the string can be split into n equal parts.\"\"\"\n    if len(s) % n != 0:\n        return False\n    part_len = len(s) // n\n    parts = [s[i:i+part_len] for i in range(0, len(s), part_len)]\n    return all(p == parts[0] for p in parts)", "solution_func": "def g(n = 2):\n    s = \"abc\" * n\n    return s", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(n: int, primes=[2]) -> bool:\n    \"\"\"\n    Given an integer n, determine if it is a prime number. A prime number is a positive integer greater than 1 that has no\n    positive integer divisors other than 1 and itself.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g(n=2):\n    return n\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 290, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, primes=[2]) -> bool:\n    \"\"\"\n    Given an integer n, determine if it is a prime number. A prime number is a positive integer greater than 1 that has no\n    positive integer divisors other than 1 and itself.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True", "solution_func": "def g(n=2):\n    return n", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(password: str, username='admin', password_list=['admin', '123456', 'qwerty']) -> bool:\n    \"\"\"\n    Given a password and a list of common passwords, check if the password is secure. A password is considered secure if it\n    is not included in the list of common passwords and does not match the username.\n    \"\"\"\n    if password in password_list:\n        return False\n    if password == username:\n        return False\n    return True\n\ndef g(password='password'):\n    return password\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 290, "target_skills": null, "problem_func": "from typing import*\ndef f(password: str, username='admin', password_list=['admin', '123456', 'qwerty']) -> bool:\n    \"\"\"\n    Given a password and a list of common passwords, check if the password is secure. A password is considered secure if it\n    is not included in the list of common passwords and does not match the username.\n    \"\"\"\n    if password in password_list:\n        return False\n    if password == username:\n        return False\n    return True", "solution_func": "def g(password='password'):\n    return password", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"\n    Given a list of integers, shuffle the list randomly n times and return the shuffled list.\n    \"\"\"\n    for _ in range(n):\n        random.shuffle(lst)\n    return lst\n\ndef g(lst=[1, 2, 3, 4, 5]):\n    return lst\n\nassert f(g()) == g()\n", "emb": null, "idx_generation": 290, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"\n    Given a list of integers, shuffle the list randomly n times and return the shuffled list.\n    \"\"\"\n    for _ in range(n):\n        random.shuffle(lst)\n    return lst", "solution_func": "def g(lst=[1, 2, 3, 4, 5]):\n    return lst", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: int, a=45, b=56, c=67) -> bool:\n    \"\"\"Check if a number is divisible by the sum of three other numbers\"\"\"\n    return x % (a + b + c) == 0\ndef g(a=45, b=56, c=67):\n    return a + b + c\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 290, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, a=45, b=56, c=67) -> bool:\n    \"\"\"Check if a number is divisible by the sum of three other numbers\"\"\"\n    return x % (a + b + c) == 0", "solution_func": "def g(a=45, b=56, c=67):\n    return a + b + c", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\ndef f(x: List[int], n=7, s=100) -> bool:\n    \"\"\"Find a list of n integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a >= 0 for a in x])\ndef g(n=7, s=100):\n    import random\n    x = []\n    for _ in range(n-1):\n        num = random.randint(0, s)\n        x.append(num)\n        s -= num\n    x.append(s)\n    return x\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 290, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(x: List[int], n=7, s=100) -> bool:\n    \"\"\"Find a list of n integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a >= 0 for a in x])", "solution_func": "def g(n=7, s=100):\n    import random\n    x = []\n    for _ in range(n-1):\n        num = random.randint(0, s)\n        x.append(num)\n        s -= num\n    x.append(s)\n    return x", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Check if there are three numbers in the list that sum up to the target\"\"\"\n    from itertools import combinations\n    for combo in combinations(arr, 3):\n        if sum(combo) == target:\n            return True\n    return False\ndef g(target=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n", "emb": null, "idx_generation": 290, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Check if there are three numbers in the list that sum up to the target\"\"\"\n    from itertools import combinations\n    for combo in combinations(arr, 3):\n        if sum(combo) == target:\n            return True\n    return False", "solution_func": "def g(target=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there is a subset of nums that sums up to the target\"\"\"\n    def subset_sum(nums, target, i):\n        if target == 0:\n            return True\n        if i == 0:\n            return False\n        if nums[i - 1] > target:\n            return subset_sum(nums, target, i - 1)\n        return subset_sum(nums, target, i - 1) or subset_sum(nums, target - nums[i - 1], i - 1)\n    \n    return subset_sum(nums, target, len(nums))\n    \ndef g(nums=[10, 23, 3, 4, 5, 7]):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 290, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there is a subset of nums that sums up to the target\"\"\"\n    def subset_sum(nums, target, i):\n        if target == 0:\n            return True\n        if i == 0:\n            return False\n        if nums[i - 1] > target:\n            return subset_sum(nums, target, i - 1)\n        return subset_sum(nums, target, i - 1) or subset_sum(nums, target - nums[i - 1], i - 1)\n    \n    return subset_sum(nums, target, len(nums))", "solution_func": "def g(nums=[10, 23, 3, 4, 5, 7]):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if there is a path in the matrix that sums up to the target\"\"\"\n    def path_sum(matrix, target, i, j):\n        if i < 0 or j < 0 or i >= len(matrix) or j >= len(matrix[0]):\n            return False\n        if target == matrix[i][j]:\n            return True\n        return path_sum(matrix, target - matrix[i][j], i + 1, j) or path_sum(matrix, target - matrix[i][j], i, j + 1)\n    \n    return path_sum(matrix, target, 0, 0)\n    \ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 290, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if there is a path in the matrix that sums up to the target\"\"\"\n    def path_sum(matrix, target, i, j):\n        if i < 0 or j < 0 or i >= len(matrix) or j >= len(matrix[0]):\n            return False\n        if target == matrix[i][j]:\n            return True\n        return path_sum(matrix, target - matrix[i][j], i + 1, j) or path_sum(matrix, target - matrix[i][j], i, j + 1)\n    \n    return path_sum(matrix, target, 0, 0)", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there is a pair of numbers in nums that sums up to the target\"\"\"\n    def pair_sum(nums, target):\n        num_set = set()\n        for num in nums:\n            if target - num in num_set:\n                return True\n            num_set.add(num)\n        return False\n    \n    return pair_sum(nums, target)\n    \ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 290, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there is a pair of numbers in nums that sums up to the target\"\"\"\n    def pair_sum(nums, target):\n        num_set = set()\n        for num in nums:\n            if target - num in num_set:\n                return True\n            num_set.add(num)\n        return False\n    \n    return pair_sum(nums, target)", "solution_func": "def g(nums=[1, 2, 3, 4, 5]):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, p=5) -> bool:\n    \"\"\"Check if a number is a power of another number\"\"\"\n    return n ** (1/p) == int(n ** (1/p))\ndef g(p = 5):\n    return p ** p\nassert f(g())\n", "emb": null, "idx_generation": 290, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, p=5) -> bool:\n    \"\"\"Check if a number is a power of another number\"\"\"\n    return n ** (1/p) == int(n ** (1/p))", "solution_func": "def g(p = 5):\n    return p ** p", "map_ix": null}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find three numbers from the list that add up to the target\"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, 3):\n        if sum(combo) == target:\n            return True\n    return False\ndef g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 291, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find three numbers from the list that add up to the target\"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, 3):\n        if sum(combo) == target:\n            return True\n    return False", "solution_func": "def g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(word: str, prefix='un', suffix='able') -> bool:\n    \"\"\"Check if a word starts with a given prefix and ends with a given suffix\"\"\"\n    return word.startswith(prefix) and word.endswith(suffix)\ndef g(word = 'unbelievable'):\n    return word\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 291, "target_skills": null, "problem_func": "from typing import*\ndef f(word: str, prefix='un', suffix='able') -> bool:\n    \"\"\"Check if a word starts with a given prefix and ends with a given suffix\"\"\"\n    return word.startswith(prefix) and word.endswith(suffix)", "solution_func": "def g(word = 'unbelievable'):\n    return word", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if the sum of any two numbers in the list equals the target\"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, 2):\n        if sum(combo) == target:\n            return True\n    return False\ndef g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 291, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if the sum of any two numbers in the list equals the target\"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, 2):\n        if sum(combo) == target:\n            return True\n    return False", "solution_func": "def g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(n: int, m=5) -> bool:\n    \"\"\"Check if a number is a perfect power of another number\"\"\"\n    return math.isqrt(n) ** m == n\ndef g(m = 5):\n    return int(math.sqrt(625)) ** m\nassert f(g())\n", "emb": null, "idx_generation": 291, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, m=5) -> bool:\n    \"\"\"Check if a number is a perfect power of another number\"\"\"\n    return math.isqrt(n) ** m == n", "solution_func": "def g(m = 5):\n    return int(math.sqrt(625)) ** m", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\n\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if a number is in a list\"\"\"\n    return n in lst\ndef g(lst=[1, 2, 3, 4, 5]):\n    return random.choice(lst)\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 291, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if a number is in a list\"\"\"\n    return n in lst", "solution_func": "def g(lst=[1, 2, 3, 4, 5]):\n    return random.choice(lst)", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\ndef f(n: int, num1=15, num2=25) -> bool:\n    \"\"\"Check if a number is in the range of two other numbers\"\"\"\n    return num1 <= n <= num2\ndef g(num1=15, num2=25):\n    return random.randint(num1, num2)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 291, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(n: int, num1=15, num2=25) -> bool:\n    \"\"\"Check if a number is in the range of two other numbers\"\"\"\n    return num1 <= n <= num2", "solution_func": "def g(num1=15, num2=25):\n    return random.randint(num1, num2)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if a string contains all the vowels\"\"\"\n    return all((v in s for v in vowels))\ndef g(s='hello world!'):\n    return s\nassert f(g())\n", "emb": null, "idx_generation": 291, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if a string contains all the vowels\"\"\"\n    return all((v in s for v in vowels))", "solution_func": "def g(s='hello world!'):\n    return s", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a list that sums up to a target\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 291, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a list that sums up to a target\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))", "solution_func": "def g(nums=[1, 2, 3, 4, 5]):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(words: List[str], target_len=5) -> bool:\n    \"\"\"Check if all the words in a list have a length equal to the target length\"\"\"\n    return all((len(word) == target_len for word in words))\ndef g(words=['apple', 'banana', 'cherry']):\n    return words\nassert f(g())\n", "emb": null, "idx_generation": 291, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], target_len=5) -> bool:\n    \"\"\"Check if all the words in a list have a length equal to the target length\"\"\"\n    return all((len(word) == target_len for word in words))", "solution_func": "def g(words=['apple', 'banana', 'cherry']):\n    return words", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(n: int, target=100, options=[50, 20, 10, 5, 1]) -> bool:\n    \"\"\"\n    Find a combination of at most n numbers from options whose sum is equal to the target value.\n    \"\"\"\n    for op in options:\n        assert op > 0\n    return sum(options) >= target and n > 0 and any(sum(c) == target for c in combinations_with_replacement(options, n))\ndef g(target=100, options=[50, 20, 10, 5, 1]):\n    from itertools import combinations_with_replacement\n    for n in range(1, len(options) + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g())\n", "emb": null, "idx_generation": 291, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(n: int, target=100, options=[50, 20, 10, 5, 1]) -> bool:\n    \"\"\"\n    Find a combination of at most n numbers from options whose sum is equal to the target value.\n    \"\"\"\n    for op in options:\n        assert op > 0\n    return sum(options) >= target and n > 0 and any(sum(c) == target for c in combinations_with_replacement(options, n))", "solution_func": "def g(target=100, options=[50, 20, 10, 5, 1]):\n    from itertools import combinations_with_replacement\n    for n in range(1, len(options) + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are two distinct indices i and j such that nums[i] + nums[j] == target.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums: List[int], target: int):\n    return nums, target\n\nassert f(*g())\n", "emb": null, "idx_generation": 292, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are two distinct indices i and j such that nums[i] + nums[j] == target.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(nums: List[int], target: int):\n    return nums, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a subarray with a sum equal to the target.\n    \"\"\"\n    curr_sum = 0\n    sum_map = {0: -1}\n    \n    for i, num in enumerate(nums):\n        curr_sum += num\n        if curr_sum - target in sum_map:\n            return True\n        sum_map[curr_sum] = i\n        \n    return False\n\ndef g(nums: List[int], target: int):\n    return nums, target\n\nassert f(*g())\n", "emb": null, "idx_generation": 292, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a subarray with a sum equal to the target.\n    \"\"\"\n    curr_sum = 0\n    sum_map = {0: -1}\n    \n    for i, num in enumerate(nums):\n        curr_sum += num\n        if curr_sum - target in sum_map:\n            return True\n        sum_map[curr_sum] = i\n        \n    return False", "solution_func": "def g(nums: List[int], target: int):\n    return nums, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a subsequence with a sum equal to the target.\n    \"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n+1)]\n    \n    for i in range(n+1):\n        dp[i][0] = True\n        \n    for i in range(1, n+1):\n        for j in range(1, target+1):\n            if j < nums[i-1]:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-nums[i-1]]\n                \n    return dp[n][target]\n\ndef g(nums: List[int], target: int):\n    return nums, target\n\nassert f(*g())\n", "emb": null, "idx_generation": 292, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a subsequence with a sum equal to the target.\n    \"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n+1)]\n    \n    for i in range(n+1):\n        dp[i][0] = True\n        \n    for i in range(1, n+1):\n        for j in range(1, target+1):\n            if j < nums[i-1]:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-nums[i-1]]\n                \n    return dp[n][target]", "solution_func": "def g(nums: List[int], target: int):\n    return nums, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 292, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target value is present in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=5):\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 292, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target value is present in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=5):\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, target='') -> bool:\n    \"\"\"Check if the target string is a substring of the given string.\"\"\"\n    return target in string\ndef g(string='hello world', target='world'):\n    return string\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 292, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, target='') -> bool:\n    \"\"\"Check if the target string is a substring of the given string.\"\"\"\n    return target in string", "solution_func": "def g(string='hello world', target='world'):\n    return string", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport re\n\ndef f(s: str, pattern=r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$') -> bool:\n    \"\"\"\n    Check if the given string is a valid email address.\n    \"\"\"\n    return re.match(pattern, s) is not None\n\ndef g(pattern=r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$'):\n    return \"test@example.com\"\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 292, "target_skills": null, "problem_func": "from typing import*\nimport re\n\ndef f(s: str, pattern=r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$') -> bool:\n    \"\"\"\n    Check if the given string is a valid email address.\n    \"\"\"\n    return re.match(pattern, s) is not None", "solution_func": "def g(pattern=r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$'):\n    return \"test@example.com\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"\n    Check if the given number is divisible by any of the primes.\n    \"\"\"\n    return any((n % p == 0 for p in primes))\n\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return primes[0] * primes[1]\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 292, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"\n    Check if the given number is divisible by any of the primes.\n    \"\"\"\n    return any((n % p == 0 for p in primes))", "solution_func": "def g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return primes[0] * primes[1]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport datetime\n\ndef f(date: str, day=datetime.datetime.now().day, month=datetime.datetime.now().month, year=datetime.datetime.now().year) -> bool:\n    \"\"\"\n    Check if the given date is in the past.\n    \"\"\"\n    given_date = datetime.datetime.strptime(date, \"%Y-%m-%d\")\n    current_date = datetime.datetime(year, month, day)\n    return given_date < current_date\n\ndef g(day=datetime.datetime.now().day, month=datetime.datetime.now().month, year=datetime.datetime.now().year):\n    return str(year - 1) + \"-\" + str(month) + \"-\" + str(day)\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 292, "target_skills": null, "problem_func": "from typing import*\nimport datetime\n\ndef f(date: str, day=datetime.datetime.now().day, month=datetime.datetime.now().month, year=datetime.datetime.now().year) -> bool:\n    \"\"\"\n    Check if the given date is in the past.\n    \"\"\"\n    given_date = datetime.datetime.strptime(date, \"%Y-%m-%d\")\n    current_date = datetime.datetime(year, month, day)\n    return given_date < current_date", "solution_func": "def g(day=datetime.datetime.now().day, month=datetime.datetime.now().month, year=datetime.datetime.now().year):\n    return str(year - 1) + \"-\" + str(month) + \"-\" + str(day)", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer, find if there exists a pair of numbers in the list whose sum equals the target.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target: int):\n    return [1, 2, 3, 4, 5], target\n\n# Test Case\nassert f(g(7))\n", "emb": null, "idx_generation": 292, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer, find if there exists a pair of numbers in the list whose sum equals the target.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(target: int):\n    return [1, 2, 3, 4, 5], target\n\n# Test Case", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target value, determine if there exists a submatrix whose sum is equal to the target.\n\n    Sample input:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    target = 10\n\n    Sample output:\n    True\n\n    Explanation:\n    The submatrix with sum equal to the target is [[1, 2], [4, 5]] which sums up to 10.\n    \"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    for i in range(m):\n        for j in range(n):\n            for k in range(i, m):\n                for l in range(j, n):\n                    submatrix = [row[j:l+1] for row in matrix[i:k+1]]\n                    if sum(sum(row) for row in submatrix) == target:\n                        return True\n    return False\n\ndef g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target = 10):\n    m = len(matrix)\n    n = len(matrix[0])\n    for i in range(m):\n        for j in range(n):\n            for k in range(i, m):\n                for l in range(j, n):\n                    submatrix = [row[j:l+1] for row in matrix[i:k+1]]\n                    if sum(sum(row) for row in submatrix) == target:\n                        return submatrix\n    return []\nassert f(g())\n", "emb": null, "idx_generation": 293, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target value, determine if there exists a submatrix whose sum is equal to the target.\n\n    Sample input:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    target = 10\n\n    Sample output:\n    True\n\n    Explanation:\n    The submatrix with sum equal to the target is [[1, 2], [4, 5]] which sums up to 10.\n    \"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    for i in range(m):\n        for j in range(n):\n            for k in range(i, m):\n                for l in range(j, n):\n                    submatrix = [row[j:l+1] for row in matrix[i:k+1]]\n                    if sum(sum(row) for row in submatrix) == target:\n                        return True\n    return False", "solution_func": "def g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target = 10):\n    m = len(matrix)\n    n = len(matrix[0])\n    for i in range(m):\n        for j in range(n):\n            for k in range(i, m):\n                for l in range(j, n):\n                    submatrix = [row[j:l+1] for row in matrix[i:k+1]]\n                    if sum(sum(row) for row in submatrix) == target:\n                        return submatrix\n    return []", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, determine if there exists a pair of numbers that sum up to the target.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample output:\n    True\n\n    Explanation:\n    The pair of numbers that sum up to the target are (4, 5).\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums = [1, 2, 3, 4, 5], target = 9):\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return (nums[i], nums[j])\n    return ()\nassert f(g())\n", "emb": null, "idx_generation": 293, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, determine if there exists a pair of numbers that sum up to the target.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample output:\n    True\n\n    Explanation:\n    The pair of numbers that sum up to the target are (4, 5).\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums = [1, 2, 3, 4, 5], target = 9):\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return (nums[i], nums[j])\n    return ()", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"\n    Given a string and a target word, determine if the target word is a substring of the string.\n\n    Sample input:\n    s = \"I love python programming\"\n    target = \"python\"\n\n    Sample output:\n    True\n\n    Explanation:\n    The target word \"python\" is a substring of the given string.\n    \"\"\"\n    if target in s:\n        return True\n    return False\n\ndef g(s = \"I love python programming\", target = \"python\"):\n    return s\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 293, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"\n    Given a string and a target word, determine if the target word is a substring of the string.\n\n    Sample input:\n    s = \"I love python programming\"\n    target = \"python\"\n\n    Sample output:\n    True\n\n    Explanation:\n    The target word \"python\" is a substring of the given string.\n    \"\"\"\n    if target in s:\n        return True\n    return False", "solution_func": "def g(s = \"I love python programming\", target = \"python\"):\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Find a string that contains n consecutive occurrences of s\"\"\"\n    return s * n in s\ndef g(n = 5):\n    return 'a' * (n - 1)\nassert f(g())\n", "emb": null, "idx_generation": 293, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Find a string that contains n consecutive occurrences of s\"\"\"\n    return s * n in s", "solution_func": "def g(n = 5):\n    return 'a' * (n - 1)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(a: List[int], b: List[int], n=5) -> bool:\n    \"\"\"Check if the lists a and b have a common subsequence of length n\"\"\"\n    return any((x in b for x in a)) and any((y in a for y in b))\ndef g(n = 5):\n    return [1] * n\nassert f(g())\n", "emb": null, "idx_generation": 293, "target_skills": null, "problem_func": "from typing import*\ndef f(a: List[int], b: List[int], n=5) -> bool:\n    \"\"\"Check if the lists a and b have a common subsequence of length n\"\"\"\n    return any((x in b for x in a)) and any((y in a for y in b))", "solution_func": "def g(n = 5):\n    return [1] * n", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if there exists a substring of length n in s that is a palindrome\"\"\"\n    return any((s[i:i+n] == s[i:i+n][::-1] for i in range(len(s)-n+1)))\ndef g(n = 5):\n    return 'a' * (n - 1) + 'b'\nassert f(g())\n", "emb": null, "idx_generation": 293, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if there exists a substring of length n in s that is a palindrome\"\"\"\n    return any((s[i:i+n] == s[i:i+n][::-1] for i in range(len(s)-n+1)))", "solution_func": "def g(n = 5):\n    return 'a' * (n - 1) + 'b'", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exist two distinct indices i and j in the list such that nums[i] + nums[j] == target.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(nums: List[int], target: int):\n    return nums\nassert f(g([2, 7, 11, 15], 9))\n", "emb": null, "idx_generation": 293, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exist two distinct indices i and j in the list such that nums[i] + nums[j] == target.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))", "solution_func": "def g(nums: List[int], target: int):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(words: List[str]) -> bool:\n    \"\"\"Check if all words in the list have the same length.\"\"\"\n    return len(set(len(word) for word in words)) == 1\ndef g(words: List[str]):\n    return words\nassert f(g(['apple', 'banana', 'cherry']))\n", "emb": null, "idx_generation": 293, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str]) -> bool:\n    \"\"\"Check if all words in the list have the same length.\"\"\"\n    return len(set(len(word) for word in words)) == 1", "solution_func": "def g(words: List[str]):\n    return words", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Check if a target value is present in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(matrix: List[List[int]], target: int):\n    return matrix\nassert f(g([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 5))\n", "emb": null, "idx_generation": 293, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Check if a target value is present in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(matrix: List[List[int]], target: int):\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(n: int, nums=[3, 7, 11], target=100) -> bool:\n    \"\"\"Find the sum of n numbers from a list that equals the target value.\"\"\"\n    from itertools import combinations\n    return any((sum(comb) == target for comb in combinations(nums, n)))\ndef g(nums=[3, 7, 11], target=100):\n    from itertools import combinations\n    for i in range(1, len(nums)+1):\n        for comb in combinations(nums, i):\n            if sum(comb) == target:\n                return comb\n    return []\nassert f(g())\n", "emb": null, "idx_generation": 293, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(n: int, nums=[3, 7, 11], target=100) -> bool:\n    \"\"\"Find the sum of n numbers from a list that equals the target value.\"\"\"\n    from itertools import combinations\n    return any((sum(comb) == target for comb in combinations(nums, n)))", "solution_func": "def g(nums=[3, 7, 11], target=100):\n    from itertools import combinations\n    for i in range(1, len(nums)+1):\n        for comb in combinations(nums, i):\n            if sum(comb) == target:\n                return comb\n    return []", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a subset of the list, such that the sum of its elements is equal to n.\n\n    Sample Input:\n    `9`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    def subset_sum(nums, n, i):\n        if n == 0:\n            return True\n        if i == 0:\n            return False\n        if nums[i-1] > n:\n            return subset_sum(nums, n, i-1)\n        return subset_sum(nums, n, i-1) or subset_sum(nums, n-nums[i-1], i-1)\n\n    return subset_sum(nums, n, len(nums))\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    n = sum(nums) // 2\n    return f(n)\n    \nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 294, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a subset of the list, such that the sum of its elements is equal to n.\n\n    Sample Input:\n    `9`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    def subset_sum(nums, n, i):\n        if n == 0:\n            return True\n        if i == 0:\n            return False\n        if nums[i-1] > n:\n            return subset_sum(nums, n, i-1)\n        return subset_sum(nums, n, i-1) or subset_sum(nums, n-nums[i-1], i-1)\n\n    return subset_sum(nums, n, len(nums))", "solution_func": "def g(nums=[1, 2, 3, 4, 5]):\n    n = sum(nums) // 2\n    return f(n)", "map_ix": [0, 0, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(grid: List[List[int]], k=3) -> bool:\n    \"\"\"\n    Given a 2D grid of integers and an integer k, determine if there exists a square subgrid of size k x k, where each row, \n    column, and diagonal sum to the same value.\n\n    Sample Input:\n    `[[4, 3, 8, 4], [9, 5, 1, 9], [2, 7, 6, 2], [1, 1, 1, 1]]`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    def check_subgrid(grid, i, j, k):\n        target_sum = sum(grid[i][j:j+k])\n        for r in range(i, i+k):\n            if sum(grid[r][j:j+k]) != target_sum:\n                return False\n        for c in range(j, j+k):\n            if sum(grid[i:i+k][c]) != target_sum:\n                return False\n        if sum(grid[i+d][j+d] for d in range(k)) != target_sum:\n            return False\n        if sum(grid[i+d][j+k-d-1] for d in range(k)) != target_sum:\n            return False\n        return True\n\n    for i in range(len(grid)-k+1):\n        for j in range(len(grid[0])-k+1):\n            if check_subgrid(grid, i, j, k):\n                return True\n    return False\n\ndef g(grid=[[4, 3, 8, 4], [9, 5, 1, 9], [2, 7, 6, 2], [1, 1, 1, 1]]):\n    k = min(len(grid), len(grid[0]))\n    return f(grid, k)\n    \nassert f(g()) == True\n", "emb": null, "idx_generation": 294, "target_skills": null, "problem_func": "from typing import*\ndef f(grid: List[List[int]], k=3) -> bool:\n    \"\"\"\n    Given a 2D grid of integers and an integer k, determine if there exists a square subgrid of size k x k, where each row, \n    column, and diagonal sum to the same value.\n\n    Sample Input:\n    `[[4, 3, 8, 4], [9, 5, 1, 9], [2, 7, 6, 2], [1, 1, 1, 1]]`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    def check_subgrid(grid, i, j, k):\n        target_sum = sum(grid[i][j:j+k])\n        for r in range(i, i+k):\n            if sum(grid[r][j:j+k]) != target_sum:\n                return False\n        for c in range(j, j+k):\n            if sum(grid[i:i+k][c]) != target_sum:\n                return False\n        if sum(grid[i+d][j+d] for d in range(k)) != target_sum:\n            return False\n        if sum(grid[i+d][j+k-d-1] for d in range(k)) != target_sum:\n            return False\n        return True\n\n    for i in range(len(grid)-k+1):\n        for j in range(len(grid[0])-k+1):\n            if check_subgrid(grid, i, j, k):\n                return True\n    return False", "solution_func": "def g(grid=[[4, 3, 8, 4], [9, 5, 1, 9], [2, 7, 6, 2], [1, 1, 1, 1]]):\n    k = min(len(grid), len(grid[0]))\n    return f(grid, k)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exist two elements in the list whose sum is equal to the target.\n\n    Sample Input:\n    `[2, 4, 6, 8]`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    nums = [1, 3, 5, 7, 9]\n    return f(nums)\n    \nassert f(g()) == False\n", "emb": null, "idx_generation": 294, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exist two elements in the list whose sum is equal to the target.\n\n    Sample Input:\n    `[2, 4, 6, 8]`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g():\n    nums = [1, 3, 5, 7, 9]\n    return f(nums)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, s1='a', s2='b', count1=50, count2=30, count3=20) -> bool:\n    \"\"\"\n    Find a string that has count1 occurrences of s1, count2 occurrences of s2, count3 occurrences of s3,\n    and starts and ends with the same 10 characters\n    \"\"\"\n    return s.count(s1) == count1 and s.count(s2) == count2 and s.count(s3) == count3 and (s[:10] == s[-10:])\ndef g(s1 = 'a', s2 = 'b', s3 = 'c', count1 = 50, count2 = 30, count3 = 20):\n    if s1 == s2:\n        ans = (s1 + \"?\") * count1\n    elif s1.count(s2):\n        ans = (s1 + \"?\") * count1\n        ans += (s2 + \"?\") * (count2 - ans.count(s2))\n    else:\n        ans = (s2 + \"?\") * count2\n        ans += (s1 + \"?\") * (count1 - ans.count(s1))\n\n    if s1 == s3:\n        ans += (s1 + \"?\") * count3\n    elif s1.count(s3):\n        ans += (s1 + \"?\") * count3\n        ans += (s3 + \"?\") * (count3 - ans.count(s3))\n    else:\n        ans += (s3 + \"?\") * count3\n        ans += (s1 + \"?\") * (count3 - ans.count(s1))\n    return \"?\" * 10 + ans + \"?\" * 10\nassert f(g())\n", "emb": null, "idx_generation": 294, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, s1='a', s2='b', count1=50, count2=30, count3=20) -> bool:\n    \"\"\"\n    Find a string that has count1 occurrences of s1, count2 occurrences of s2, count3 occurrences of s3,\n    and starts and ends with the same 10 characters\n    \"\"\"\n    return s.count(s1) == count1 and s.count(s2) == count2 and s.count(s3) == count3 and (s[:10] == s[-10:])", "solution_func": "def g(s1 = 'a', s2 = 'b', s3 = 'c', count1 = 50, count2 = 30, count3 = 20):\n    if s1 == s2:\n        ans = (s1 + \"?\") * count1\n    elif s1.count(s2):\n        ans = (s1 + \"?\") * count1\n        ans += (s2 + \"?\") * (count2 - ans.count(s2))\n    else:\n        ans = (s2 + \"?\") * count2\n        ans += (s1 + \"?\") * (count1 - ans.count(s1))\n\n    if s1 == s3:\n        ans += (s1 + \"?\") * count3\n    elif s1.count(s3):\n        ans += (s1 + \"?\") * count3\n        ans += (s3 + \"?\") * (count3 - ans.count(s3))\n    else:\n        ans += (s3 + \"?\") * count3\n        ans += (s1 + \"?\") * (count3 - ans.count(s1))\n    return \"?\" * 10 + ans + \"?\" * 10", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(inds: List[int], vecs=[22, 30, 1, 28, 28, 12, 20, 28, 6, 14, 14, 6, 1, 12, 30, 45, 17]) -> bool:\n    \"\"\"\n    Parity learning: Given binary vectors in a subspace, find the secret set S of indices such that:\n    $\\\\sum_{i \\\\in S} x_i = 1 (mod 2)$\n    \"\"\"\n    return all((sum((v >> i & 1 for i in inds)) % 2 == 1 for v in vecs))\ndef g(vecs = [22, 30, 1, 28, 28, 12, 20, 28, 6, 14, 14, 6, 1, 12, 30, 45, 17]):\n    # Gaussian elimination\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n    ans = []\n    pool = [[0] * (d + 1) for _ in range(d)] + [v + [1] for v in vecs]\n    for i in range(d):\n        pool[i][i] = 1\n\n    for i in range(d):  # zero out bit i\n        for v in pool[d:]:\n            if v[i] == 1:\n                break\n        if v[i] == 0:\n            v = pool[i]\n        assert v[i] == 1  # found a vector with v[i] = 1, subtract it off from those with a 1 in the ith coordinate\n        w = v[:]\n        for v in pool:\n            if v[i] == 1:\n                for j in range(d + 1):\n                    v[j] ^= w[j]\n\n    return [i for i in range(d) if pool[i][-1]]\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 294, "target_skills": null, "problem_func": "from typing import*\ndef f(inds: List[int], vecs=[22, 30, 1, 28, 28, 12, 20, 28, 6, 14, 14, 6, 1, 12, 30, 45, 17]) -> bool:\n    \"\"\"\n    Parity learning: Given binary vectors in a subspace, find the secret set S of indices such that:\n    $\\\\sum_{i \\\\in S} x_i = 1 (mod 2)$\n    \"\"\"\n    return all((sum((v >> i & 1 for i in inds)) % 2 == 1 for v in vecs))", "solution_func": "def g(vecs = [22, 30, 1, 28, 28, 12, 20, 28, 6, 14, 14, 6, 1, 12, 30, 45, 17]):\n    # Gaussian elimination\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n    ans = []\n    pool = [[0] * (d + 1) for _ in range(d)] + [v + [1] for v in vecs]\n    for i in range(d):\n        pool[i][i] = 1\n\n    for i in range(d):  # zero out bit i\n        for v in pool[d:]:\n            if v[i] == 1:\n                break\n        if v[i] == 0:\n            v = pool[i]", "map_ix": [0, 1, 0, 1, 0, 0, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(li: List[int], dups=42155, unique=20) -> bool:\n    \"\"\"Find a list with a certain number of duplicate items and a certain number of unique items\"\"\"\n    return len(set(li)) == len(li) - dups and len(set(li)) == unique\ndef g(dups = 42155, unique = 20):\n    return [1] * (dups + 1) + list(range(unique))\nassert f(g())\n", "emb": null, "idx_generation": 294, "target_skills": null, "problem_func": "from typing import*\ndef f(li: List[int], dups=42155, unique=20) -> bool:\n    \"\"\"Find a list with a certain number of duplicate items and a certain number of unique items\"\"\"\n    return len(set(li)) == len(li) - dups and len(set(li)) == unique", "solution_func": "def g(dups = 42155, unique = 20):\n    return [1] * (dups + 1) + list(range(unique))", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, m: int, c: int, res: int) -> bool:\n    \"\"\"Check if a given matrix is a valid magic square.\"\"\"\n    return all(sum(row) == res for row in n) and all(sum(col) == res for col in zip(*n)) and sum(n[i][i] for i in range(len(n))) == res and sum(n[i][len(n)-1-i] for i in range(len(n))) == res\ndef g(n = [[2, 7, 6], [9, 5, 1], [4, 3, 8]], m = 3, c = 15):\n    return f(n, m, c, c)\nassert f(g())\n", "emb": null, "idx_generation": 294, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m: int, c: int, res: int) -> bool:\n    \"\"\"Check if a given matrix is a valid magic square.\"\"\"\n    return all(sum(row) == res for row in n) and all(sum(col) == res for col in zip(*n)) and sum(n[i][i] for i in range(len(n))) == res and sum(n[i][len(n)-1-i] for i in range(len(n))) == res", "solution_func": "def g(n = [[2, 7, 6], [9, 5, 1], [4, 3, 8]], m = 3, c = 15):\n    return f(n, m, c, c)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n: int, c: int, t: str) -> bool:\n    \"\"\"Check if a given string is a valid palindrome.\"\"\"\n    return s == s[::-1] and len(s) == n and s.count(c) == t\ndef g(n = 5, c = 'a', t = 2):\n    return f(c * t, n, c, t)\nassert f(g())\n", "emb": null, "idx_generation": 294, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n: int, c: int, t: str) -> bool:\n    \"\"\"Check if a given string is a valid palindrome.\"\"\"\n    return s == s[::-1] and len(s) == n and s.count(c) == t", "solution_func": "def g(n = 5, c = 'a', t = 2):\n    return f(c * t, n, c, t)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\ndef f(n: int, m: int, s: int, t: int, res: int) -> bool:\n    \"\"\"Check if two points are within a given distance of each other.\"\"\"\n    return math.sqrt((m[0] - n[0])**2 + (m[1] - n[1])**2) <= res and math.sqrt((s[0] - t[0])**2 + (s[1] - t[1])**2) <= res\ndef g(n = (1, 2), m = (3, 4), s = (5, 6), t = (7, 8), res = 10):\n    return f(n, m, s, t, res)\nassert f(g())\n", "emb": null, "idx_generation": 294, "target_skills": null, "problem_func": "from typing import*\nimport math\ndef f(n: int, m: int, s: int, t: int, res: int) -> bool:\n    \"\"\"Check if two points are within a given distance of each other.\"\"\"\n    return math.sqrt((m[0] - n[0])**2 + (m[1] - n[1])**2) <= res and math.sqrt((s[0] - t[0])**2 + (s[1] - t[1])**2) <= res", "solution_func": "def g(n = (1, 2), m = (3, 4), s = (5, 6), t = (7, 8), res = 10):\n    return f(n, m, s, t, res)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find if the target number is in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=10):\n    matrix.append(list(range(10, 20)))\n    return matrix\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 294, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find if the target number is in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=10):\n    matrix.append(list(range(10, 20)))\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if a number is a prime number.\"\"\"\n\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return n in primes and is_prime(n)\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    n = primes[-1] + 2\n    while True:\n        if all(n % p != 0 for p in primes):\n            primes.append(n)\n            break\n        n += 2\n    return n\nassert f(g())\n", "emb": null, "idx_generation": 295, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if a number is a prime number.\"\"\"\n\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return n in primes and is_prime(n)", "solution_func": "def g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    n = primes[-1] + 2\n    while True:\n        if all(n % p != 0 for p in primes):\n            primes.append(n)\n            break\n        n += 2\n    return n", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Check if a number is a power of another number.\"\"\"\n\n    def is_power(n: int, m: int) -> bool:\n        if n == 1:\n            return True\n        for i in range(2, m + 1):\n            if n % i ** m == 0:\n                return True\n        return False\n    return n > 0 and is_power(n, m)\ndef g(m=10):\n    n = 1\n    while True:\n        yield n\n        n += 1\nassert f(next(g()), m)\n", "emb": null, "idx_generation": 295, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Check if a number is a power of another number.\"\"\"\n\n    def is_power(n: int, m: int) -> bool:\n        if n == 1:\n            return True\n        for i in range(2, m + 1):\n            if n % i ** m == 0:\n                return True\n        return False\n    return n > 0 and is_power(n, m)", "solution_func": "def g(m=10):\n    n = 1\n    while True:\n        yield n\n        n += 1", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, t: str, k=3) -> bool:\n    \"\"\"Check if two strings are anagrams of each other.\"\"\"\n\n    def is_anagram(s: str, t: str) -> bool:\n        return sorted(s) == sorted(t)\n    return len(s) == len(t) and is_anagram(s, t) and len(set(s)) == k\ndef g(t: str, k=3):\n    s = t[::-1]\n    return s, t, k\nassert f(*g())\n", "emb": null, "idx_generation": 295, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, t: str, k=3) -> bool:\n    \"\"\"Check if two strings are anagrams of each other.\"\"\"\n\n    def is_anagram(s: str, t: str) -> bool:\n        return sorted(s) == sorted(t)\n    return len(s) == len(t) and is_anagram(s, t) and len(set(s)) == k", "solution_func": "def g(t: str, k=3):\n    s = t[::-1]\n    return s, t, k", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: List[int], n=10, m=100) -> bool:\n    \"\"\"Find a list of n integers that are all multiples of m\"\"\"\n    return len(x) == n and all([a % m == 0 for a in x])\ndef g(n = 10, m = 100):\n    return [m] * n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 295, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], n=10, m=100) -> bool:\n    \"\"\"Find a list of n integers that are all multiples of m\"\"\"\n    return len(x) == n and all([a % m == 0 for a in x])", "solution_func": "def g(n = 10, m = 100):\n    return [m] * n", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\ndef f(x: List[int], n=100, t=50) -> bool:\n    \"\"\"Find a list of n unique integers that sum up to t\"\"\"\n    return len(x) == n and sum(x) == t and len(set(x)) == n\ndef g(n = 100, t = 50):\n    random.seed(42)\n    x = random.sample(range(1, n + 1), n - 1)\n    x.append(t - sum(x))\n    return x\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 295, "target_skills": null, "problem_func": "from typing import*\nimport random\ndef f(x: List[int], n=100, t=50) -> bool:\n    \"\"\"Find a list of n unique integers that sum up to t\"\"\"\n    return len(x) == n and sum(x) == t and len(set(x)) == n", "solution_func": "def g(n = 100, t = 50):\n    random.seed(42)\n    x = random.sample(range(1, n + 1), n - 1)\n    x.append(t - sum(x))\n    return x", "map_ix": [0, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: List[int], n=100, t=50) -> bool:\n    \"\"\"Find a list of n integers that sum up to t\"\"\"\n    return len(x) == n and sum(x) == t\ndef g(n = 100, t = 50):\n    return [t // n] * n\nassert f(g())\n", "emb": null, "idx_generation": 295, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], n=100, t=50) -> bool:\n    \"\"\"Find a list of n integers that sum up to t\"\"\"\n    return len(x) == n and sum(x) == t", "solution_func": "def g(n = 100, t = 50):\n    return [t // n] * n", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target=42, index=3) -> bool:\n    \"\"\"Find a number in the list whose sum with target is index\"\"\"\n    return arr[index] + target == sum(arr)\ndef g(target=42, index=3):\n    arr = [1, 2, 3, 4, 5]\n    return arr\nassert f(g())\n", "emb": null, "idx_generation": 295, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=42, index=3) -> bool:\n    \"\"\"Find a number in the list whose sum with target is index\"\"\"\n    return arr[index] + target == sum(arr)", "solution_func": "def g(target=42, index=3):\n    arr = [1, 2, 3, 4, 5]\n    return arr", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_sum=10, index=2) -> bool:\n    \"\"\"Find a sublist whose sum is target_sum\"\"\"\n    for sublist in matrix:\n        if sum(sublist) == target_sum:\n            return True\n    return False\ndef g(target_sum=10, index=2):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 295, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_sum=10, index=2) -> bool:\n    \"\"\"Find a sublist whose sum is target_sum\"\"\"\n    for sublist in matrix:\n        if sum(sublist) == target_sum:\n            return True\n    return False", "solution_func": "def g(target_sum=10, index=2):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, substring='apple', index=1) -> bool:\n    \"\"\"Find a substring whose first occurrence is at index\"\"\"\n    return s.index(substring) == index\ndef g(substring='apple', index=1):\n    s = 'I like to eat apples.'\n    return s\nassert f(g())\n", "emb": null, "idx_generation": 295, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substring='apple', index=1) -> bool:\n    \"\"\"Find a substring whose first occurrence is at index\"\"\"\n    return s.index(substring) == index", "solution_func": "def g(substring='apple', index=1):\n    s = 'I like to eat apples.'\n    return s", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target='Python') -> bool:\n    \"\"\"\n    Check if the target string is a substring of the given string.\n    \"\"\"\n    return target in s\ndef g(target='Python'):\n    return target\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 295, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='Python') -> bool:\n    \"\"\"\n    Check if the target string is a substring of the given string.\n    \"\"\"\n    return target in s", "solution_func": "def g(target='Python'):\n    return target", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target='aeiou', max_count=3) -> bool:\n    \"\"\"Check if a string contains at least a certain number of vowels\"\"\"\n    count = sum(1 for char in s if char in target)\n    return count >= max_count\ndef g(target='aeiou', max_count=3):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return ''.join(vowels[:max_count]) + ''.join(target) + ''.join(vowels[max_count:])\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 296, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='aeiou', max_count=3) -> bool:\n    \"\"\"Check if a string contains at least a certain number of vowels\"\"\"\n    count = sum(1 for char in s if char in target)\n    return count >= max_count", "solution_func": "def g(target='aeiou', max_count=3):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return ''.join(vowels[:max_count]) + ''.join(target) + ''.join(vowels[max_count:])", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(li: List[int], target_sum=50) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to a certain value\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i] + li[j] == target_sum:\n                return True\n    return False\ndef g(target_sum=50):\n    return [i for i in range(1, target_sum//2 + 1)] + [target_sum//2 + 1]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 296, "target_skills": null, "problem_func": "from typing import*\ndef f(li: List[int], target_sum=50) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to a certain value\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i] + li[j] == target_sum:\n                return True\n    return False", "solution_func": "def g(target_sum=50):\n    return [i for i in range(1, target_sum//2 + 1)] + [target_sum//2 + 1]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Check if a string contains a certain substring\"\"\"\n    return substring in s\ndef g(substring='abc'):\n    return substring + 'de' + substring\nassert f(g())\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 296, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Check if a string contains a certain substring\"\"\"\n    return substring in s", "solution_func": "def g(substring='abc'):\n    return substring + 'de' + substring", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, n=5) -> bool:\n    \"\"\"Check if the minimum value in the array is less than or equal to n\"\"\"\n    return np.min(arr) <= n\n\ndef g(n=5):\n    return np.full((3, 3), n)\n\narr = g()\nassert f(arr)\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0], "idx_generation": 296, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, n=5) -> bool:\n    \"\"\"Check if the minimum value in the array is less than or equal to n\"\"\"\n    return np.min(arr) <= n", "solution_func": "def g(n=5):\n    return np.full((3, 3), n)\n\narr = g()", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 1]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: list, target=10) -> bool:\n    \"\"\"Check if the sum of any two elements in the list is equal to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\n\narr = g()\nassert f(arr)\n", "emb": null, "idx_generation": 296, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: list, target=10) -> bool:\n    \"\"\"Check if the sum of any two elements in the list is equal to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]\n\narr = g()", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, day_of_week='Monday') -> bool:\n    \"\"\"Check if the given date falls on the specified day of the week\"\"\"\n    return date.strftime('%A') == day_of_week\n\ndef g(day_of_week='Monday'):\n    return datetime.datetime(2022, 1, 3).date()\n\ndate = g()\nassert f(date)\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 296, "target_skills": null, "problem_func": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, day_of_week='Monday') -> bool:\n    \"\"\"Check if the given date falls on the specified day of the week\"\"\"\n    return date.strftime('%A') == day_of_week", "solution_func": "def g(day_of_week='Monday'):\n    return datetime.datetime(2022, 1, 3).date()\n\ndate = g()", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are two numbers such that their sum is equal to the target.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False\ndef g(target=0):\n    nums = [2, 7, 11, 15]\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 296, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are two numbers such that their sum is equal to the target.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(target=0):\n    nums = [2, 7, 11, 15]\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Given a matrix sorted in non-decreasing order from left to right and from top to bottom, determine if a target value exists in the matrix.\n    \"\"\"\n    if not matrix or not matrix[0]:\n        return False\n    row = 0\n    col = len(matrix[0]) - 1\n    while row < len(matrix) and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            row += 1\n        else:\n            col -= 1\n    return False\ndef g(target=0):\n    matrix = [\n        [1,   4,  7, 11, 15],\n        [2,   5,  8, 12, 19],\n        [3,   6,  9, 16, 22],\n        [10, 13, 14, 17, 24],\n        [18, 21, 23, 26, 30]\n    ]\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 296, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Given a matrix sorted in non-decreasing order from left to right and from top to bottom, determine if a target value exists in the matrix.\n    \"\"\"\n    if not matrix or not matrix[0]:\n        return False\n    row = 0\n    col = len(matrix[0]) - 1\n    while row < len(matrix) and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            row += 1\n        else:\n            col -= 1\n    return False", "solution_func": "def g(target=0):\n    matrix = [\n        [1,   4,  7, 11, 15],\n        [2,   5,  8, 12, 19],\n        [3,   6,  9, 16, 22],\n        [10, 13, 14, 17, 24],\n        [18, 21, 23, 26, 30]\n    ]\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, k=2) -> bool:\n    \"\"\"\n    Given a string s and an integer k, return the length of the longest substring of s that contains at most k distinct characters.\n    \"\"\"\n    if k == 0 or not s:\n        return 0\n    left = 0\n    max_length = 0\n    char_count = {}\n    for right in range(len(s)):\n        char_count[s[right]] = right\n        if len(char_count) > k:\n            oldest_char = min(char_count, key=char_count.get)\n            left = char_count.pop(oldest_char) + 1\n        max_length = max(max_length, right - left + 1)\n    return max_length\ndef g(k=2):\n    s = \"ccaabbb\"\n    return s\nassert f(g())\n", "emb": null, "idx_generation": 296, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, k=2) -> bool:\n    \"\"\"\n    Given a string s and an integer k, return the length of the longest substring of s that contains at most k distinct characters.\n    \"\"\"\n    if k == 0 or not s:\n        return 0\n    left = 0\n    max_length = 0\n    char_count = {}\n    for right in range(len(s)):\n        char_count[s[right]] = right\n        if len(char_count) > k:\n            oldest_char = min(char_count, key=char_count.get)\n            left = char_count.pop(oldest_char) + 1\n        max_length = max(max_length, right - left + 1)\n    return max_length", "solution_func": "def g(k=2):\n    s = \"ccaabbb\"\n    return s", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(radius: float, volume=523.6) -> bool:\n    \"\"\"Check if the volume of a sphere is within a given range\"\"\"\n    return math.isclose((4/3) * math.pi * radius**3, volume, rel_tol=1e-5)\ndef g(volume = 523.6):\n    return (3 * volume / (4 * math.pi))**(1/3)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], "idx_generation": 296, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(radius: float, volume=523.6) -> bool:\n    \"\"\"Check if the volume of a sphere is within a given range\"\"\"\n    return math.isclose((4/3) * math.pi * radius**3, volume, rel_tol=1e-5)", "solution_func": "def g(volume = 523.6):\n    return (3 * volume / (4 * math.pi))**(1/3)", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Check if a given number is present in the list.\"\"\"\n    return n in lst\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return lst[4]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 297, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Check if a given number is present in the list.\"\"\"\n    return n in lst", "solution_func": "def g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return lst[4]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(lst: list, target_sum=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target sum.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target_sum:\n                return True\n    return False\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return lst\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 297, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: list, target_sum=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target sum.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target_sum:\n                return True\n    return False", "solution_func": "def g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return lst", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: list, target_sum=10) -> bool:\n    \"\"\"Check if any row or column in the matrix adds up to the target sum.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        row_sum = sum(matrix[i])\n        if row_sum == target_sum:\n            return True\n    for j in range(cols):\n        col_sum = sum([matrix[i][j] for i in range(rows)])\n        if col_sum == target_sum:\n            return True\n    return False\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 297, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: list, target_sum=10) -> bool:\n    \"\"\"Check if any row or column in the matrix adds up to the target sum.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        row_sum = sum(matrix[i])\n        if row_sum == target_sum:\n            return True\n    for j in range(cols):\n        col_sum = sum([matrix[i][j] for i in range(rows)])\n        if col_sum == target_sum:\n            return True\n    return False", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, x: int, y: int, z: int) -> bool:\n    \"\"\"Check if the sum of the ASCII values of the characters in the string is divisible by x, y, and z\"\"\"\n    ascii_sum = sum(ord(c) for c in s)\n    return ascii_sum % x == 0 and ascii_sum % y == 0 and ascii_sum % z == 0\ndef g(x = 3, y = 5, z = 7):\n    return \"abc\"\nassert f(g())\n", "emb": null, "idx_generation": 297, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, x: int, y: int, z: int) -> bool:\n    \"\"\"Check if the sum of the ASCII values of the characters in the string is divisible by x, y, and z\"\"\"\n    ascii_sum = sum(ord(c) for c in s)\n    return ascii_sum % x == 0 and ascii_sum % y == 0 and ascii_sum % z == 0", "solution_func": "def g(x = 3, y = 5, z = 7):\n    return \"abc\"", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(a: int, b: int, c: int) -> bool:\n    \"\"\"Check if the given values form a Pythagorean triple\"\"\"\n    return math.sqrt(a**2 + b**2) == c\ndef g():\n    return (3, 4, 5)\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 297, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(a: int, b: int, c: int) -> bool:\n    \"\"\"Check if the given values form a Pythagorean triple\"\"\"\n    return math.sqrt(a**2 + b**2) == c", "solution_func": "def g():\n    return (3, 4, 5)", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if the list is sorted in non-decreasing order\"\"\"\n    return lst == sorted(lst)\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 297, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if the list is sorted in non-decreasing order\"\"\"\n    return lst == sorted(lst)", "solution_func": "def g():\n    return [1, 2, 3, 4, 5]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=2) -> bool:\n    \"\"\"\n    Given a matrix of integers, determine if there exists a square submatrix of size n x n that consists\n    only of even numbers.\n\n    Sample input:\n    [\n        [1, 2, 3, 4],\n        [6, 8, 10, 12],\n        [5, 7, 9, 11],\n        [14, 16, 18, 20]\n    ]\n\n    Sample output:\n    True\n\n    In this case, there exists a 2 x 2 submatrix consisting only of even numbers: [[6, 8], [14, 16]].\n    \"\"\"\n    assert n > 0, 'Hint: n is a positive integer.'\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows - n + 1):\n        for j in range(cols - n + 1):\n            submatrix = [matrix[x][j:j+n] for x in range(i, i+n)]\n            if all(all(num % 2 == 0 for num in row) for row in submatrix):\n                return True\n    return False\ndef g(n = 2):\n    return [\n        [1, 2, 3, 4],\n        [6, 8, 10, 12],\n        [5, 7, 9, 11],\n        [14, 16, 18, 20]\n    ]\nassert f(g())\n", "emb": null, "idx_generation": 297, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n=2) -> bool:\n    \"\"\"\n    Given a matrix of integers, determine if there exists a square submatrix of size n x n that consists\n    only of even numbers.\n\n    Sample input:\n    [\n        [1, 2, 3, 4],\n        [6, 8, 10, 12],\n        [5, 7, 9, 11],\n        [14, 16, 18, 20]\n    ]\n\n    Sample output:\n    True\n\n    In this case, there exists a 2 x 2 submatrix consisting only of even numbers: [[6, 8], [14, 16]].\n    \"\"\"\n    assert n > 0, 'Hint: n is a positive integer.'\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows - n + 1):\n        for j in range(cols - n + 1):\n            submatrix = [matrix[x][j:j+n] for x in range(i, i+n)]\n            if all(all(num % 2 == 0 for num in row) for row in submatrix):\n                return True\n    return False", "solution_func": "def g(n = 2):\n    return [\n        [1, 2, 3, 4],\n        [6, 8, 10, 12],\n        [5, 7, 9, 11],\n        [14, 16, 18, 20]\n    ]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, m=5) -> bool:\n    \"\"\"\n    Given two integers n and m, determine if there exists a positive integer x such that n^x = m.\n\n    Sample input:\n    n = 2\n    m = 8\n\n    Sample output:\n    True\n\n    In this case, 2^3 = 8, so there exists a positive integer x (x = 3) that satisfies the condition.\n    \"\"\"\n    assert n > 0 and m > 0, 'Hint: n and m are positive integers.'\n    return any(n ** x == m for x in range(1, m+1))\ndef g(n = 2, m = 8):\n    return n, m\nassert f(g())\n", "emb": null, "idx_generation": 297, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m=5) -> bool:\n    \"\"\"\n    Given two integers n and m, determine if there exists a positive integer x such that n^x = m.\n\n    Sample input:\n    n = 2\n    m = 8\n\n    Sample output:\n    True\n\n    In this case, 2^3 = 8, so there exists a positive integer x (x = 3) that satisfies the condition.\n    \"\"\"\n    assert n > 0 and m > 0, 'Hint: n and m are positive integers.'\n    return any(n ** x == m for x in range(1, m+1))", "solution_func": "def g(n = 2, m = 8):\n    return n, m", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int, n=2) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer, determine if there exists a subset of the list that\n    sums up to the target, where the subset contains exactly n elements.\n\n    Sample input:\n    nums = [2, 4, 6, 8]\n    target = 16\n    n = 3\n\n    Sample output:\n    True\n\n    In this case, the subset [2, 6, 8] sums up to the target 16, and it contains exactly 3 elements.\n    \"\"\"\n    assert n > 0, 'Hint: n is a positive integer.'\n    def backtrack(curr_sum, count, index):\n        if curr_sum == target and count == n:\n            return True\n        if index == len(nums) or count > n:\n            return False\n        if backtrack(curr_sum + nums[index], count + 1, index + 1):\n            return True\n        if backtrack(curr_sum, count, index + 1):\n            return True\n        return False\n    return backtrack(0, 0, 0)\ndef g(nums = [2, 4, 6, 8], target = 16, n = 3):\n    return nums, target, n\nassert f(g())\n", "emb": null, "idx_generation": 297, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int, n=2) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer, determine if there exists a subset of the list that\n    sums up to the target, where the subset contains exactly n elements.\n\n    Sample input:\n    nums = [2, 4, 6, 8]\n    target = 16\n    n = 3\n\n    Sample output:\n    True\n\n    In this case, the subset [2, 6, 8] sums up to the target 16, and it contains exactly 3 elements.\n    \"\"\"\n    assert n > 0, 'Hint: n is a positive integer.'\n    def backtrack(curr_sum, count, index):\n        if curr_sum == target and count == n:\n            return True\n        if index == len(nums) or count > n:\n            return False\n        if backtrack(curr_sum + nums[index], count + 1, index + 1):\n            return True\n        if backtrack(curr_sum, count, index + 1):\n            return True\n        return False\n    return backtrack(0, 0, 0)", "solution_func": "def g(nums = [2, 4, 6, 8], target = 16, n = 3):\n    return nums, target, n", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, substr='abc') -> bool:\n    \"\"\"Determine if a string contains a substring\"\"\"\n    return substr in string\ndef g(substr = 'abc'):\n    return \"def\" + substr + \"ghi\"\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 297, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, substr='abc') -> bool:\n    \"\"\"Determine if a string contains a substring\"\"\"\n    return substr in string", "solution_func": "def g(substr = 'abc'):\n    return \"def\" + substr + \"ghi\"", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, threshold=50) -> bool:\n    \"\"\"\n    Check if the sum of the elements in a numpy array exceeds a given threshold.\n\n    Sample input:\n    np.array([[10, 20, 30],\n              [40, 50, 60]])\n\n    Sample output:\n    True\n\n    The sum of all elements in the array is 210, which is greater than the threshold of 50.\n    \"\"\"\n    return np.sum(arr) > threshold\n\ndef g(arr: np.ndarray):\n    return arr\n\narr = np.array([[10, 20, 30],\n                [40, 50, 60]])\n\nassert f(g(arr))\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 298, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, threshold=50) -> bool:\n    \"\"\"\n    Check if the sum of the elements in a numpy array exceeds a given threshold.\n\n    Sample input:\n    np.array([[10, 20, 30],\n              [40, 50, 60]])\n\n    Sample output:\n    True\n\n    The sum of all elements in the array is 210, which is greater than the threshold of 50.\n    \"\"\"\n    return np.sum(arr) > threshold", "solution_func": "def g(arr: np.ndarray):\n    return arr\n\narr = np.array([[10, 20, 30],\n                [40, 50, 60]])", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(lst: List[int], target=25) -> bool:\n    \"\"\"\n    Check if there exists a pair of elements in a list that sum up to a given target number.\n\n    Sample input:\n    [10, 15, 20, 25, 30]\n\n    Sample output:\n    True\n\n    There exists a pair of elements (10 and 15) in the list that sum up to the target number 25.\n    \"\"\"\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\n\ndef g(lst: List[int]):\n    return lst\n\nlst = [10, 15, 20, 25, 30]\n\nassert f(g(lst))\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 298, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int], target=25) -> bool:\n    \"\"\"\n    Check if there exists a pair of elements in a list that sum up to a given target number.\n\n    Sample input:\n    [10, 15, 20, 25, 30]\n\n    Sample output:\n    True\n\n    There exists a pair of elements (10 and 15) in the list that sum up to the target number 25.\n    \"\"\"\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False", "solution_func": "def g(lst: List[int]):\n    return lst\n\nlst = [10, 15, 20, 25, 30]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"\n    Check if a given string has a length greater than a specified number.\n\n    Sample input:\n    \"Hello, world!\"\n\n    Sample output:\n    True\n\n    The string \"Hello, world!\" has a length of 13, which is greater than the specified number 5.\n    \"\"\"\n    return len(s) > n\n\ndef g(s: str):\n    return s\n\ns = \"Hello, world!\"\n\nassert f(g(s))\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 298, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"\n    Check if a given string has a length greater than a specified number.\n\n    Sample input:\n    \"Hello, world!\"\n\n    Sample output:\n    True\n\n    The string \"Hello, world!\" has a length of 13, which is greater than the specified number 5.\n    \"\"\"\n    return len(s) > n", "solution_func": "def g(s: str):\n    return s\n\ns = \"Hello, world!\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, result: float) -> bool:\n    \"\"\"\n    Check if the given numbers can form a right-angled triangle, \n    and if the hypotenuse squared is equal to the given result.\n    \"\"\"\n    return math.isclose(math.hypot(x, y), z, rel_tol=1e-9) and math.isclose(z**2, result, rel_tol=1e-9)\n\ndef g(x: float, y: float, z: float) -> float:\n    \"\"\"\n    Calculate the hypotenuse of a right-angled triangle.\n    \"\"\"\n    return math.hypot(x, y)\n\nassert f(g(x=3, y=4, z=5), result=25)\n", "emb": null, "idx_generation": 298, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, result: float) -> bool:\n    \"\"\"\n    Check if the given numbers can form a right-angled triangle, \n    and if the hypotenuse squared is equal to the given result.\n    \"\"\"\n    return math.isclose(math.hypot(x, y), z, rel_tol=1e-9) and math.isclose(z**2, result, rel_tol=1e-9)", "solution_func": "def g(x: float, y: float, z: float) -> float:\n    \"\"\"\n    Calculate the hypotenuse of a right-angled triangle.\n    \"\"\"\n    return math.hypot(x, y)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(nums: list[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is sorted in non-decreasing order.\n    \"\"\"\n    return nums == sorted(nums)\n\ndef g(length: int, start: int = 0, stop: int = 100) -> list[int]:\n    \"\"\"\n    Generate a random list of numbers within the given range.\n    \"\"\"\n    return random.sample(range(start, stop), length)\n\nassert f(g(length=10))\n", "emb": null, "idx_generation": 298, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(nums: list[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is sorted in non-decreasing order.\n    \"\"\"\n    return nums == sorted(nums)", "solution_func": "def g(length: int, start: int = 0, stop: int = 100) -> list[int]:\n    \"\"\"\n    Generate a random list of numbers within the given range.\n    \"\"\"\n    return random.sample(range(start, stop), length)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport datetime\n\ndef f(date: str, days: int) -> bool:\n    \"\"\"\n    Check if the given number of days after a given date is a weekend day (Saturday or Sunday).\n    \"\"\"\n    dt = datetime.datetime.strptime(date, \"%Y-%m-%d\")\n    new_date = dt + datetime.timedelta(days=days)\n    return new_date.weekday() in [5, 6]\n\ndef g(date: str, days: int) -> str:\n    \"\"\"\n    Calculate the new date after adding the given number of days to a given date.\n    \"\"\"\n    dt = datetime.datetime.strptime(date, \"%Y-%m-%d\")\n    new_date = dt + datetime.timedelta(days=days)\n    return new_date.strftime(\"%Y-%m-%d\")\n\nassert f(g(date=\"2022-01-01\", days=7), days=7)\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 298, "target_skills": null, "problem_func": "from typing import*\nimport datetime\n\ndef f(date: str, days: int) -> bool:\n    \"\"\"\n    Check if the given number of days after a given date is a weekend day (Saturday or Sunday).\n    \"\"\"\n    dt = datetime.datetime.strptime(date, \"%Y-%m-%d\")\n    new_date = dt + datetime.timedelta(days=days)\n    return new_date.weekday() in [5, 6]", "solution_func": "def g(date: str, days: int) -> str:\n    \"\"\"\n    Calculate the new date after adding the given number of days to a given date.\n    \"\"\"\n    dt = datetime.datetime.strptime(date, \"%Y-%m-%d\")\n    new_date = dt + datetime.timedelta(days=days)\n    return new_date.strftime(\"%Y-%m-%d\")", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=23) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum to the target.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=23):\n    nums = [1, 8, 12, 5, 9, 15]\n    return nums\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 298, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=23) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum to the target.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(target=23):\n    nums = [1, 8, 12, 5, 9, 15]\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=100) -> bool:\n    \"\"\"Check if there exists a submatrix whose sum is equal to the target.\"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    prefix_sum = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            prefix_sum[i][j] = prefix_sum[i - 1][j] + prefix_sum[i][j - 1] - prefix_sum[i - 1][j - 1] + matrix[i - 1][j - 1]\n    \n    for r1 in range(1, m + 1):\n        for c1 in range(1, n + 1):\n            for r2 in range(r1, m + 1):\n                for c2 in range(c1, n + 1):\n                    submatrix_sum = prefix_sum[r2][c2] - prefix_sum[r1 - 1][c2] - prefix_sum[r2][c1 - 1] + prefix_sum[r1 - 1][c1 - 1]\n                    if submatrix_sum == target:\n                        return True\n    return False\n\ndef g(target=100):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\n\nassert f(g())\n", "emb": null, "idx_generation": 298, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=100) -> bool:\n    \"\"\"Check if there exists a submatrix whose sum is equal to the target.\"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    prefix_sum = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            prefix_sum[i][j] = prefix_sum[i - 1][j] + prefix_sum[i][j - 1] - prefix_sum[i - 1][j - 1] + matrix[i - 1][j - 1]\n    \n    for r1 in range(1, m + 1):\n        for c1 in range(1, n + 1):\n            for r2 in range(r1, m + 1):\n                for c2 in range(c1, n + 1):\n                    submatrix_sum = prefix_sum[r2][c2] - prefix_sum[r1 - 1][c2] - prefix_sum[r2][c1 - 1] + prefix_sum[r1 - 1][c1 - 1]\n                    if submatrix_sum == target:\n                        return True\n    return False", "solution_func": "def g(target=100):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subarray whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    mod_count = [0] * k\n    mod_count[0] = 1\n    \n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        mod_count[prefix_sum] += 1\n    \n    return any(count >= 2 for count in mod_count)\n\ndef g(k=3):\n    nums = [7, 4, 9, 2, 8, 1]\n    return nums\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 298, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subarray whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    mod_count = [0] * k\n    mod_count[0] = 1\n    \n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        mod_count[prefix_sum] += 1\n    \n    return any(count >= 2 for count in mod_count)", "solution_func": "def g(k=3):\n    nums = [7, 4, 9, 2, 8, 1]\n    return nums", "map_ix": [1, 1, 0, 0, 0, 0, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(lst: list, target: int) -> bool:\n    \"\"\"Check if there exists a pair of distinct elements in the list that sum up to the target\"\"\"\n    return any(lst[i] + lst[j] == target for i in range(len(lst)) for j in range(i+1, len(lst)))\n    \ndef g(n=10, target=20):\n    \"\"\"Generate a list of n random integers\"\"\"\n    lst = random.sample(range(1, 101), n)\n    return lst\n\nassert f(g())\n", "emb": null, "idx_generation": 298, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(lst: list, target: int) -> bool:\n    \"\"\"Check if there exists a pair of distinct elements in the list that sum up to the target\"\"\"\n    return any(lst[i] + lst[j] == target for i in range(len(lst)) for j in range(i+1, len(lst)))", "solution_func": "def g(n=10, target=20):\n    \"\"\"Generate a list of n random integers\"\"\"\n    lst = random.sample(range(1, 101), n)\n    return lst", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8], k=2) -> bool:\n    \"\"\"\n    Given a list of integers and an integer k, determine if there exists a pair of distinct integers in the list\n    whose sum is divisible by k.\n    \"\"\"\n    return any(((nums[i] + nums[j]) % k == 0) for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8], k=2):\n    return any(((nums[i] + nums[j]) % k == 0) for i in range(len(nums)) for j in range(i+1, len(nums)))\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 299, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8], k=2) -> bool:\n    \"\"\"\n    Given a list of integers and an integer k, determine if there exists a pair of distinct integers in the list\n    whose sum is divisible by k.\n    \"\"\"\n    return any(((nums[i] + nums[j]) % k == 0) for i in range(len(nums)) for j in range(i+1, len(nums)))", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8], k=2):\n    return any(((nums[i] + nums[j]) % k == 0) for i in range(len(nums)) for j in range(i+1, len(nums)))", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(target: int, nums=[1, 2, 3, 4, 5, 6, 7, 8]) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer, determine if there exists a pair of distinct integers in the list\n    whose sum is equal to the target.\n    \"\"\"\n    return any(((nums[i] + nums[j]) == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target: int, nums=[1, 2, 3, 4, 5, 6, 7, 8]):\n    return any(((nums[i] + nums[j]) == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\nassert f(g())\n", "emb": null, "idx_generation": 299, "target_skills": null, "problem_func": "from typing import*\ndef f(target: int, nums=[1, 2, 3, 4, 5, 6, 7, 8]) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer, determine if there exists a pair of distinct integers in the list\n    whose sum is equal to the target.\n    \"\"\"\n    return any(((nums[i] + nums[j]) == target) for i in range(len(nums)) for j in range(i+1, len(nums)))", "solution_func": "def g(target: int, nums=[1, 2, 3, 4, 5, 6, 7, 8]):\n    return any(((nums[i] + nums[j]) == target) for i in range(len(nums)) for j in range(i+1, len(nums)))", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8]) -> bool:\n    \"\"\"\n    Given a list of integers, determine if there exists a pair of distinct integers in the list whose product is even.\n    \"\"\"\n    return any(((nums[i] * nums[j]) % 2 == 0) for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8]):\n    return any(((nums[i] * nums[j]) % 2 == 0) for i in range(len(nums)) for j in range(i+1, len(nums)))\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 299, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8]) -> bool:\n    \"\"\"\n    Given a list of integers, determine if there exists a pair of distinct integers in the list whose product is even.\n    \"\"\"\n    return any(((nums[i] * nums[j]) % 2 == 0) for i in range(len(nums)) for j in range(i+1, len(nums)))", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8]):\n    return any(((nums[i] * nums[j]) % 2 == 0) for i in range(len(nums)) for j in range(i+1, len(nums)))", "map_ix": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int, g1=1, g2=2) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums = [1, 2, 3, 4, 5], target = 7):\n    return (nums, target)\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 299, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int, g1=1, g2=2) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums = [1, 2, 3, 4, 5], target = 7):\n    return (nums, target)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, g1='aeiou', g2='bcdfghjklmnpqrstvwxyz') -> bool:\n    \"\"\"Check if the given string contains only vowels in g1 and consonants in g2\"\"\"\n    return all(c in g1 for c in s) or all(c in g2 for c in s)\ndef g(s = 'hello'):\n    return s\nassert f(g())\n", "emb": null, "idx_generation": 299, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, g1='aeiou', g2='bcdfghjklmnpqrstvwxyz') -> bool:\n    \"\"\"Check if the given string contains only vowels in g1 and consonants in g2\"\"\"\n    return all(c in g1 for c in s) or all(c in g2 for c in s)", "solution_func": "def g(s = 'hello'):\n    return s", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, nums: List[int], g1=5, g2=10) -> bool:\n    \"\"\"Check if the list of numbers contains two elements whose difference is equal to n\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if abs(nums[i] - nums[j]) == n:\n                return True\n    return False\ndef g(nums = [1, 2, 3, 4, 5], n = 3):\n    return (n, nums)\nassert f(*g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 299, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums: List[int], g1=5, g2=10) -> bool:\n    \"\"\"Check if the list of numbers contains two elements whose difference is equal to n\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if abs(nums[i] - nums[j]) == n:\n                return True\n    return False", "solution_func": "def g(nums = [1, 2, 3, 4, 5], n = 3):\n    return (n, nums)", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(lst: List[int], n=5) -> bool:\n    \"\"\"Find a list where the sum of every n consecutive elements is greater than 100.\"\"\"\n    return all(sum(lst[i:i+n]) > 100 for i in range(len(lst)-n+1))\ndef g(n=5):\n    return [i for i in range(1, 20)]\nassert f(g())\n", "emb": null, "idx_generation": 299, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int], n=5) -> bool:\n    \"\"\"Find a list where the sum of every n consecutive elements is greater than 100.\"\"\"\n    return all(sum(lst[i:i+n]) > 100 for i in range(len(lst)-n+1))", "solution_func": "def g(n=5):\n    return [i for i in range(1, 20)]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, d='aeiou') -> bool:\n    \"\"\"Find a string where all vowels are replaced by a specific character.\"\"\"\n    return all(c not in d for c in s)\ndef g(d='aeiou'):\n    return ''.join(['*' if c in d else c for c in 'puzzle'])\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 299, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, d='aeiou') -> bool:\n    \"\"\"Find a string where all vowels are replaced by a specific character.\"\"\"\n    return all(c not in d for c in s)", "solution_func": "def g(d='aeiou'):\n    return ''.join(['*' if c in d else c for c in 'puzzle'])", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Find a list where the sum of its elements is greater than a specific number.\"\"\"\n    return sum(lst) > n\ndef g(lst=[1, 2, 3, 4, 5]):\n    return lst\nassert f(g())\n", "emb": null, "idx_generation": 299, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Find a list where the sum of its elements is greater than a specific number.\"\"\"\n    return sum(lst) > n", "solution_func": "def g(lst=[1, 2, 3, 4, 5]):\n    return lst", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums)))\ndef g(nums = [50, 25, 75, 10, 90]):\n    return nums\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 299, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums)))", "solution_func": "def g(nums = [50, 25, 75, 10, 90]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=10, b=5) -> bool:\n    \"\"\"Check if the difference between n and the product of a and b is less than or equal to 10.\"\"\"\n    return abs(n - (a * b)) <= 10\ndef g(a=10, b=5):\n    return a * b\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 300, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=10, b=5) -> bool:\n    \"\"\"Check if the difference between n and the product of a and b is less than or equal to 10.\"\"\"\n    return abs(n - (a * b)) <= 10", "solution_func": "def g(a=10, b=5):\n    return a * b", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target='hello world', length=5) -> bool:\n    \"\"\"Check if the substring of length 5 is present at the start of the target string.\"\"\"\n    return target[:length] == s\ndef g(target='hello world', length=5):\n    return target[:length]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 300, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='hello world', length=5) -> bool:\n    \"\"\"Check if the substring of length 5 is present at the start of the target string.\"\"\"\n    return target[:length] == s", "solution_func": "def g(target='hello world', length=5):\n    return target[:length]", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: int, y: int, z: int, a=2, b=3, c=4) -> bool:\n    \"\"\"Check if the sum of x, y, and z is divisible by the product of a, b, and c.\"\"\"\n    return (x + y + z) % (a * b * c) == 0\ndef g(a=2, b=3, c=4):\n    return a * b * c\nassert f(g())\n", "emb": null, "idx_generation": 300, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, y: int, z: int, a=2, b=3, c=4) -> bool:\n    \"\"\"Check if the sum of x, y, and z is divisible by the product of a, b, and c.\"\"\"\n    return (x + y + z) % (a * b * c) == 0", "solution_func": "def g(a=2, b=3, c=4):\n    return a * b * c", "map_ix": null}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, k=3) -> bool:\n    \"\"\"Find if there exists a combination of k numbers in the list that add up to the target.\"\"\"\n    from itertools import combinations\n    for combination in combinations(nums, k):\n        if sum(combination) == target:\n            return True\n    return False\n\ndef g(nums=[10, 20, 30, 40, 50, 60, 70, 80, 90], target=100, k=3):\n    return nums\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 300, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, k=3) -> bool:\n    \"\"\"Find if there exists a combination of k numbers in the list that add up to the target.\"\"\"\n    from itertools import combinations\n    for combination in combinations(nums, k):\n        if sum(combination) == target:\n            return True\n    return False", "solution_func": "def g(nums=[10, 20, 30, 40, 50, 60, 70, 80, 90], target=100, k=3):\n    return nums", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, k=3) -> bool:\n    \"\"\"Find if there exists a combination of k numbers in the list that add up to the target.\"\"\"\n    from itertools import combinations\n    for combination in combinations(nums, k):\n        if sum(combination) == target:\n            return True\n    return False\n\ndef g(nums=[-10, -20, -30, -40, -50, -60, -70, -80, -90], target=-100, k=3):\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 300, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, k=3) -> bool:\n    \"\"\"Find if there exists a combination of k numbers in the list that add up to the target.\"\"\"\n    from itertools import combinations\n    for combination in combinations(nums, k):\n        if sum(combination) == target:\n            return True\n    return False", "solution_func": "def g(nums=[-10, -20, -30, -40, -50, -60, -70, -80, -90], target=-100, k=3):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, k=3) -> bool:\n    \"\"\"Find if there exists a combination of k numbers in the list that add up to the target.\"\"\"\n    from itertools import combinations\n    for combination in combinations(nums, k):\n        if sum(combination) == target:\n            return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9], target=100, k=3):\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 300, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, k=3) -> bool:\n    \"\"\"Find if there exists a combination of k numbers in the list that add up to the target.\"\"\"\n    from itertools import combinations\n    for combination in combinations(nums, k):\n        if sum(combination) == target:\n            return True\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9], target=100, k=3):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, s='abcde', t='zyx') -> bool:\n    \"\"\"\n    Given two strings, find the index of the first occurrence of the second string in the first string.\n    \"\"\"\n    return s.find(t) == n\ndef g(s='abcde', t='zyx'):\n    return s.find(t)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 300, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, s='abcde', t='zyx') -> bool:\n    \"\"\"\n    Given two strings, find the index of the first occurrence of the second string in the first string.\n    \"\"\"\n    return s.find(t) == n", "solution_func": "def g(s='abcde', t='zyx'):\n    return s.find(t)", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=5, b=12) -> bool:\n    \"\"\"\n    Check if the given number is a perfect square between a and b (inclusive).\n    \"\"\"\n    return a <= n <= b and math.isqrt(n)**2 == n\ndef g(a=5, b=12):\n    return next(i for i in range(a, b+1) if math.isqrt(i)**2 == i)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 300, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, a=5, b=12) -> bool:\n    \"\"\"\n    Check if the given number is a perfect square between a and b (inclusive).\n    \"\"\"\n    return a <= n <= b and math.isqrt(n)**2 == n", "solution_func": "def g(a=5, b=12):\n    return next(i for i in range(a, b+1) if math.isqrt(i)**2 == i)", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport itertools\n\ndef f(n: int, s='ABCD', r=3) -> bool:\n    \"\"\"\n    Find the nth permutation of length r of the given string.\n    \"\"\"\n    perms = list(itertools.permutations(s, r))\n    return ''.join(perms[n]) == s\ndef g(s='ABCD', r=3):\n    perms = list(itertools.permutations(s, r))\n    return perms.index(tuple(s))\nassert f(g())\n", "emb": null, "idx_generation": 300, "target_skills": null, "problem_func": "from typing import*\nimport itertools\n\ndef f(n: int, s='ABCD', r=3) -> bool:\n    \"\"\"\n    Find the nth permutation of length r of the given string.\n    \"\"\"\n    perms = list(itertools.permutations(s, r))\n    return ''.join(perms[n]) == s", "solution_func": "def g(s='ABCD', r=3):\n    perms = list(itertools.permutations(s, r))\n    return perms.index(tuple(s))", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=20, length=3) -> bool:\n    \"\"\"Check if there exists a combination of length elements in nums that sums up to target.\"\"\"\n    return any(sum(comb) == target for comb in combinations(nums, length))\ndef g(target=20, length=3):\n    nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21]\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 300, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=20, length=3) -> bool:\n    \"\"\"Check if there exists a combination of length elements in nums that sums up to target.\"\"\"\n    return any(sum(comb) == target for comb in combinations(nums, length))", "solution_func": "def g(target=20, length=3):\n    nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21]\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape']) -> bool:\n    \"\"\"Check if a given string is a palindrome and exists in a list of words.\"\"\"\n    return s == s[::-1] and s in words\ndef g(words=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape']):\n    return next((word for word in words if word == word[::-1]), \"\")\nassert f(g())\n", "emb": null, "idx_generation": 301, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape']) -> bool:\n    \"\"\"Check if a given string is a palindrome and exists in a list of words.\"\"\"\n    return s == s[::-1] and s in words", "solution_func": "def g(words=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape']):\n    return next((word for word in words if word == word[::-1]), \"\")", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if the sum of k randomly selected integers from a list is equal to 0.\"\"\"\n    return sum(random.sample(nums, k)) == 0\ndef g(nums=[-2, -1, 0, 1, 2]):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 301, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if the sum of k randomly selected integers from a list is equal to 0.\"\"\"\n    return sum(random.sample(nums, k)) == 0", "solution_func": "def g(nums=[-2, -1, 0, 1, 2]):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], n=3) -> bool:\n    \"\"\"Check if the sum of any n consecutive integers in a list is divisible by n.\"\"\"\n    return any(sum(arr[i:i+n]) % n == 0 for i in range(len(arr)-n+1))\ndef g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return arr\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 301, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], n=3) -> bool:\n    \"\"\"Check if the sum of any n consecutive integers in a list is divisible by n.\"\"\"\n    return any(sum(arr[i:i+n]) % n == 0 for i in range(len(arr)-n+1))", "solution_func": "def g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], rows=3, cols=3) -> bool:\n    \"\"\"Check if the given matrix is a magic square\"\"\"\n    target = sum(matrix[0])\n    # Check rows\n    for row in matrix:\n        if sum(row) != target:\n            return False\n    # Check columns\n    for i in range(cols):\n        col_sum = 0\n        for j in range(rows):\n            col_sum += matrix[j][i]\n        if col_sum != target:\n            return False\n    # Check diagonals\n    diag_sum1 = 0\n    diag_sum2 = 0\n    for i in range(rows):\n        diag_sum1 += matrix[i][i]\n        diag_sum2 += matrix[i][cols-i-1]\n    if diag_sum1 != target or diag_sum2 != target:\n        return False\n    return True\n\ndef g(rows=3, cols=3):\n    \"\"\"Generate a magic square matrix\"\"\"\n    matrix = [[0 for _ in range(cols)] for _ in range(rows)]\n    i = 0\n    j = cols // 2\n    num = 1\n    while num <= rows * cols:\n        matrix[i][j] = num\n        num += 1\n        new_i = (i - 1) % rows\n        new_j = (j + 1) % cols\n        if matrix[new_i][new_j] != 0:\n            i = (i + 1) % rows\n        else:\n            i = new_i\n            j = new_j\n    return matrix\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 301, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], rows=3, cols=3) -> bool:\n    \"\"\"Check if the given matrix is a magic square\"\"\"\n    target = sum(matrix[0])\n    # Check rows\n    for row in matrix:\n        if sum(row) != target:\n            return False\n    # Check columns\n    for i in range(cols):\n        col_sum = 0\n        for j in range(rows):\n            col_sum += matrix[j][i]\n        if col_sum != target:\n            return False\n    # Check diagonals\n    diag_sum1 = 0\n    diag_sum2 = 0\n    for i in range(rows):\n        diag_sum1 += matrix[i][i]\n        diag_sum2 += matrix[i][cols-i-1]\n    if diag_sum1 != target or diag_sum2 != target:\n        return False\n    return True", "solution_func": "def g(rows=3, cols=3):\n    \"\"\"Generate a magic square matrix\"\"\"\n    matrix = [[0 for _ in range(cols)] for _ in range(rows)]\n    i = 0\n    j = cols // 2\n    num = 1\n    while num <= rows * cols:\n        matrix[i][j] = num\n        num += 1\n        new_i = (i - 1) % rows\n        new_j = (j + 1) % cols\n        if matrix[new_i][new_j] != 0:\n            i = (i + 1) % rows\n        else:\n            i = new_i\n            j = new_j\n    return matrix", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(encrypted: str, shift=3) -> bool:\n    \"\"\"Decrypt a Caesar cipher\"\"\"\n    decrypted = \"\"\n    for char in encrypted:\n        if char.isalpha():\n            ascii_val = ord(char)\n            if char.islower():\n                decrypted += chr((ascii_val - shift - 97) % 26 + 97)\n            else:\n                decrypted += chr((ascii_val - shift - 65) % 26 + 65)\n        else:\n            decrypted += char\n    return decrypted\n\ndef g(shift=3):\n    \"\"\"Encrypt a message using a Caesar cipher\"\"\"\n    message = \"Hello, world!\"\n    encrypted = \"\"\n    for char in message:\n        if char.isalpha():\n            ascii_val = ord(char)\n            if char.islower():\n                encrypted += chr((ascii_val + shift - 97) % 26 + 97)\n            else:\n                encrypted += chr((ascii_val + shift - 65) % 26 + 65)\n        else:\n            encrypted += char\n    return encrypted\n\nassert f(g()) == \"Hello, world!\"\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 301, "target_skills": null, "problem_func": "from typing import*\ndef f(encrypted: str, shift=3) -> bool:\n    \"\"\"Decrypt a Caesar cipher\"\"\"\n    decrypted = \"\"\n    for char in encrypted:\n        if char.isalpha():\n            ascii_val = ord(char)\n            if char.islower():\n                decrypted += chr((ascii_val - shift - 97) % 26 + 97)\n            else:\n                decrypted += chr((ascii_val - shift - 65) % 26 + 65)\n        else:\n            decrypted += char\n    return decrypted", "solution_func": "def g(shift=3):\n    \"\"\"Encrypt a message using a Caesar cipher\"\"\"\n    message = \"Hello, world!\"\n    encrypted = \"\"\n    for char in message:\n        if char.isalpha():\n            ascii_val = ord(char)\n            if char.islower():\n                encrypted += chr((ascii_val + shift - 97) % 26 + 97)\n            else:\n                encrypted += chr((ascii_val + shift - 65) % 26 + 65)\n        else:\n            encrypted += char\n    return encrypted", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(tree: List[List[int]], target=0) -> bool:\n    \"\"\"Check if there exists a path in the tree that sums up to the target\"\"\"\n    def dfs(node, current_sum):\n        if not node:\n            return False\n        current_sum += node[0]\n        if current_sum == target:\n            return True\n        for child in node[1:]:\n            if dfs(child, current_sum):\n                return True\n        return False\n    \n    return dfs(tree, 0)\n\ndef g(target=0):\n    \"\"\"Generate a tree with a path that sums up to the target\"\"\"\n    tree = [5, [4, [11, [7], [2]], []], [8, [13], [4, [], [1]]]]\n    return tree\n\nassert f(g())", "emb": null, "idx_generation": 301, "target_skills": null, "problem_func": "from typing import*\ndef f(tree: List[List[int]], target=0) -> bool:\n    \"\"\"Check if there exists a path in the tree that sums up to the target\"\"\"\n    def dfs(node, current_sum):\n        if not node:\n            return False\n        current_sum += node[0]\n        if current_sum == target:\n            return True\n        for child in node[1:]:\n            if dfs(child, current_sum):\n                return True\n        return False\n    \n    return dfs(tree, 0)", "solution_func": "def g(target=0):\n    \"\"\"Generate a tree with a path that sums up to the target\"\"\"\n    tree = [5, [4, [11, [7], [2]], []], [8, [13], [4, [], [1]]]]\n    return tree", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(num_list: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] + num_list[j] == target:\n                return True\n    return False\ndef g(target = 10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n", "emb": null, "idx_generation": 301, "target_skills": null, "problem_func": "from typing import*\ndef f(num_list: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] + num_list[j] == target:\n                return True\n    return False", "solution_func": "def g(target = 10):\n    return [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(word: str, char='a') -> bool:\n    \"\"\"Check if the given character is the most frequent character in the word\"\"\"\n    count = {}\n    for c in word:\n        count[c] = count.get(c, 0) + 1\n    max_count = max(count.values())\n    most_frequent_chars = [c for c, freq in count.items() if freq == max_count]\n    return char in most_frequent_chars\ndef g(char = 'a'):\n    return 'banana'\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 301, "target_skills": null, "problem_func": "from typing import*\ndef f(word: str, char='a') -> bool:\n    \"\"\"Check if the given character is the most frequent character in the word\"\"\"\n    count = {}\n    for c in word:\n        count[c] = count.get(c, 0) + 1\n    max_count = max(count.values())\n    most_frequent_chars = [c for c, freq in count.items() if freq == max_count]\n    return char in most_frequent_chars", "solution_func": "def g(char = 'a'):\n    return 'banana'", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=50) -> bool:\n    \"\"\"Check if the target number is in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g():\n    return [[10, 20, 30], [40, 50, 60], [70, 80, 90]]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 301, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=50) -> bool:\n    \"\"\"Check if the target number is in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g():\n    return [[10, 20, 30], [40, 50, 60], [70, 80, 90]]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=8) -> bool:\n    \"\"\"\n    Given a list of integers, find two numbers such that they add up to a specific target number.\n    Return True if there are two numbers that sum to the target, False otherwise.\n    \"\"\"\n    num_set = set()\n\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 301, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=8) -> bool:\n    \"\"\"\n    Given a list of integers, find two numbers such that they add up to a specific target number.\n    Return True if there are two numbers that sum to the target, False otherwise.\n    \"\"\"\n    num_set = set()\n\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(seq: List[int], target=99) -> bool:\n    \"\"\"Check if the target value is in the sequence\"\"\"\n    return target in seq\ndef g(target=99):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\nassert f(g())\n", "emb": null, "idx_generation": 302, "target_skills": null, "problem_func": "from typing import*\ndef f(seq: List[int], target=99) -> bool:\n    \"\"\"Check if the target value is in the sequence\"\"\"\n    return target in seq", "solution_func": "def g(target=99):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=50) -> bool:\n    \"\"\"Check if the target value is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(target=50):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n", "emb": null, "idx_generation": 302, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=50) -> bool:\n    \"\"\"Check if the target value is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(target=50):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s1: str, s2: str, target=\"hello\") -> bool:\n    \"\"\"Check if the target string can be created by concatenating s1 and s2\"\"\"\n    return s1 + s2 == target\ndef g(target=\"hello\"):\n    return \"he\", \"llo\"\nassert f(g())\n", "emb": null, "idx_generation": 302, "target_skills": null, "problem_func": "from typing import*\ndef f(s1: str, s2: str, target=\"hello\") -> bool:\n    \"\"\"Check if the target string can be created by concatenating s1 and s2\"\"\"\n    return s1 + s2 == target", "solution_func": "def g(target=\"hello\"):\n    return \"he\", \"llo\"", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"Check if the string s contains a substring of length k with all distinct characters.\"\"\"\n    return any([len(set(s[i:i+k])) == k for i in range(len(s)-k+1)])\ndef g(k=3):\n    return \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"[k-1:k+k-1]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 302, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"Check if the string s contains a substring of length k with all distinct characters.\"\"\"\n    return any([len(set(s[i:i+k])) == k for i in range(len(s)-k+1)])", "solution_func": "def g(k=3):\n    return \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"[k-1:k+k-1]", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists k consecutive elements in arr that sum up to 0.\"\"\"\n    for i in range(len(arr)-k+1):\n        if sum(arr[i:i+k]) == 0:\n            return True\n    return False\ndef g(k=3):\n    return [1, -2, 3, 4, -3, -4][:k]\nassert f(g())\n", "emb": null, "idx_generation": 302, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists k consecutive elements in arr that sum up to 0.\"\"\"\n    for i in range(len(arr)-k+1):\n        if sum(arr[i:i+k]) == 0:\n            return True\n    return False", "solution_func": "def g(k=3):\n    return [1, -2, 3, 4, -3, -4][:k]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Check if there exists a row in the matrix such that the sum of its elements is equal to the target.\"\"\"\n    return any([sum(row) == target for row in matrix])\ndef g(target=5):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n", "emb": null, "idx_generation": 302, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Check if there exists a row in the matrix such that the sum of its elements is equal to the target.\"\"\"\n    return any([sum(row) == target for row in matrix])", "solution_func": "def g(target=5):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, target: int) -> bool:\n    \"\"\"Find a formula using three 4's and three 2's and -+*/ that evaluates to the target.\"\"\"\n    return set(s) <= set('42-+*/') and s.count('4') == 3 and s.count('2') == 3 and (eval(s) == target)\ndef g(target: int):\n    return \"4*4-4+2*2-2/2\"\nassert f(g(14), 14)\n", "emb": null, "idx_generation": 302, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target: int) -> bool:\n    \"\"\"Find a formula using three 4's and three 2's and -+*/ that evaluates to the target.\"\"\"\n    return set(s) <= set('42-+*/') and s.count('4') == 3 and s.count('2') == 3 and (eval(s) == target)", "solution_func": "def g(target: int):\n    return \"4*4-4+2*2-2/2\"", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return s == s[::-1]\ndef g():\n    return \"racecar\"\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 302, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return s == s[::-1]", "solution_func": "def g():\n    return \"racecar\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target.\"\"\"\n    return any(target - num in nums for num in nums)\ndef g(nums: List[int], target: int):\n    return nums, target\nassert f(g([1, 2, 3, 4], 7))\n", "emb": null, "idx_generation": 302, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target.\"\"\"\n    return any(target - num in nums for num in nums)", "solution_func": "def g(nums: List[int], target: int):\n    return nums, target", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, x=3, y=5) -> bool:\n    \"\"\"Check if n is divisible by both x and y\"\"\"\n    return n % x == 0 and n % y == 0\ndef g(x=3, y=5):\n    return x * y\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 302, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, x=3, y=5) -> bool:\n    \"\"\"Check if n is divisible by both x and y\"\"\"\n    return n % x == 0 and n % y == 0", "solution_func": "def g(x=3, y=5):\n    return x * y", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(target: str, num=100, diff=20) -> bool:\n    \"\"\"Check if the target string can be obtained by concatenating num copies of a substring with a difference of diff\"\"\"\n    substring = target[:len(target) // num]\n    return target == substring * num and all((ord(a) - ord(b)) == diff for a, b in zip(substring, substring[1:]))\ndef g(num=100, diff=20):\n    substring = 'abcdefghijklmnopqrstuvwxyz'[:diff+1]  # create a substring with the desired difference\n    return substring * num\nassert f(g())\n", "emb": null, "idx_generation": 303, "target_skills": null, "problem_func": "from typing import*\ndef f(target: str, num=100, diff=20) -> bool:\n    \"\"\"Check if the target string can be obtained by concatenating num copies of a substring with a difference of diff\"\"\"\n    substring = target[:len(target) // num]\n    return target == substring * num and all((ord(a) - ord(b)) == diff for a, b in zip(substring, substring[1:]))", "solution_func": "def g(num=100, diff=20):\n    substring = 'abcdefghijklmnopqrstuvwxyz'[:diff+1]  # create a substring with the desired difference\n    return substring * num", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int, limit=1000) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list nums that sum up to the target, within the limit\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n            if nums[i] + nums[j] > target:\n                break\n    return False\ndef g(target=1000, limit=1000):\n    nums = [n for n in range(1, limit+1)]\n    return nums\nassert f(g(), target=1000)\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 303, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int, limit=1000) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list nums that sum up to the target, within the limit\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n            if nums[i] + nums[j] > target:\n                break\n    return False", "solution_func": "def g(target=1000, limit=1000):\n    nums = [n for n in range(1, limit+1)]\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int, threshold=100) -> bool:\n    \"\"\"Check if the target number is present in the matrix, with all values below the threshold\"\"\"\n    for row in matrix:\n        for num in row:\n            if num >= threshold:\n                return False\n            if num == target:\n                return True\n    return False\ndef g(target=100, threshold=100):\n    matrix = [[n for n in range(1, 101)] for _ in range(100)]\n    return matrix\nassert f(g(), target=100)\n", "emb": null, "idx_generation": 303, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int, threshold=100) -> bool:\n    \"\"\"Check if the target number is present in the matrix, with all values below the threshold\"\"\"\n    for row in matrix:\n        for num in row:\n            if num >= threshold:\n                return False\n            if num == target:\n                return True\n    return False", "solution_func": "def g(target=100, threshold=100):\n    matrix = [[n for n in range(1, 101)] for _ in range(100)]\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(n: int, a = 5, b = 7) -> bool:\n    \"\"\"Determine if the given number is a perfect square or a perfect cube.\"\"\"\n    return math.isqrt(n)**2 == n or round(n**(1/3))**3 == n\n\ndef g(a = 5, b = 7):\n    if math.isqrt(a)**2 == a:\n        return a\n    return b\nassert f(g())\n", "emb": null, "idx_generation": 303, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, a = 5, b = 7) -> bool:\n    \"\"\"Determine if the given number is a perfect square or a perfect cube.\"\"\"\n    return math.isqrt(n)**2 == n or round(n**(1/3))**3 == n", "solution_func": "def g(a = 5, b = 7):\n    if math.isqrt(a)**2 == a:\n        return a\n    return b", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], a = 5, b = 10) -> bool:\n    \"\"\"Check if the given list contains both numbers a and b.\"\"\"\n    return a in nums and b in nums\n\ndef g(a = 5, b = 10):\n    return [a, b]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 303, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], a = 5, b = 10) -> bool:\n    \"\"\"Check if the given list contains both numbers a and b.\"\"\"\n    return a in nums and b in nums", "solution_func": "def g(a = 5, b = 10):\n    return [a, b]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, a = 'apple', b = 'banana') -> bool:\n    \"\"\"Check if the given string is a substring of both strings a and b.\"\"\"\n    return s in a and s in b\n\ndef g(a = 'apple', b = 'banana'):\n    return a[:len(a)//2]\nassert f(g())\n", "emb": null, "idx_generation": 303, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, a = 'apple', b = 'banana') -> bool:\n    \"\"\"Check if the given string is a substring of both strings a and b.\"\"\"\n    return s in a and s in b", "solution_func": "def g(a = 'apple', b = 'banana'):\n    return a[:len(a)//2]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=3, b=5, c=7) -> bool:\n    \"\"\"Check if a number is divisible by any of the given integers.\"\"\"\n    return n % a == 0 or n % b == 0 or n % c == 0\ndef g(a=3, b=5, c=7):\n    return a * b * c\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 303, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=3, b=5, c=7) -> bool:\n    \"\"\"Check if a number is divisible by any of the given integers.\"\"\"\n    return n % a == 0 or n % b == 0 or n % c == 0", "solution_func": "def g(a=3, b=5, c=7):\n    return a * b * c", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n=4) -> bool:\n    \"\"\"Check if a string contains a repeated substring of length n.\"\"\"\n    substrings = set()\n    for i in range(len(s) - n + 1):\n        substr = s[i:i+n]\n        if substr in substrings:\n            return True\n        substrings.add(substr)\n    return False\ndef g(n=4):\n    return 'abc' * (n // 3)\nassert f(g())\n", "emb": null, "idx_generation": 303, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=4) -> bool:\n    \"\"\"Check if a string contains a repeated substring of length n.\"\"\"\n    substrings = set()\n    for i in range(len(s) - n + 1):\n        substr = s[i:i+n]\n        if substr in substrings:\n            return True\n        substrings.add(substr)\n    return False", "solution_func": "def g(n=4):\n    return 'abc' * (n // 3)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(li: List[int], target: int) -> bool:\n    \"\"\"Check if there are two elements in the list that sum up to the target.\"\"\"\n    seen = set()\n    for num in li:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(size=10, target=20):\n    return random.choices(range(1, 10), k=size)\n\nassert f(g(), target=20)\n", "emb": null, "idx_generation": 303, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(li: List[int], target: int) -> bool:\n    \"\"\"Check if there are two elements in the list that sum up to the target.\"\"\"\n    seen = set()\n    for num in li:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(size=10, target=20):\n    return random.choices(range(1, 10), k=size)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, k: int) -> bool:\n    \"\"\"Given a string s and an integer k, determine whether we can rearrange the characters of s such that the same characters are at least k distance apart.\"\"\"\n    from collections import Counter\n    if k <= 1:\n        return True\n    counts = sorted(Counter(s).values(), reverse=True)\n    max_freq = counts[0]\n    max_count = counts.count(max_freq)\n    return (len(s) - max_freq * max_count) >= (max_freq - 1) * (k - max_count)\ndef g(s: str = \"aabbcc\", k: int = 3):\n    return s, k\nassert f(*g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 303, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, k: int) -> bool:\n    \"\"\"Given a string s and an integer k, determine whether we can rearrange the characters of s such that the same characters are at least k distance apart.\"\"\"\n    from collections import Counter\n    if k <= 1:\n        return True\n    counts = sorted(Counter(s).values(), reverse=True)\n    max_freq = counts[0]\n    max_count = counts.count(max_freq)\n    return (len(s) - max_freq * max_count) >= (max_freq - 1) * (k - max_count)", "solution_func": "def g(s: str = \"aabbcc\", k: int = 3):\n    return s, k", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, check if there are two numbers in the list that add up to the target.\n\n    Sample Input:\n    nums = [2, 4, 6, 8]\n    target = 10\n\n    Sample Output:\n    True\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums=[2, 4, 6, 8], target=15):\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 304, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, check if there are two numbers in the list that add up to the target.\n\n    Sample Input:\n    nums = [2, 4, 6, 8]\n    target = 10\n\n    Sample Output:\n    True\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(nums=[2, 4, 6, 8], target=15):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"\n    Given a 2D matrix and a target value, check if the target is present in the matrix.\n\n    Sample Input:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n    target = 5\n\n    Sample Output:\n    True\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=20):\n    return matrix\n\nassert f(g())\n", "emb": null, "idx_generation": 304, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"\n    Given a 2D matrix and a target value, check if the target is present in the matrix.\n\n    Sample Input:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n    target = 5\n\n    Sample Output:\n    True\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=20):\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, check if there are three numbers in the list that add up to the target.\n\n    Sample Input:\n    nums = [10, 20, 30, 40]\n    target = 70\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(nums) - 2):\n        for j in range(i + 1, len(nums) - 1):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums=[10, 20, 30, 40], target=50):\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 304, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, check if there are three numbers in the list that add up to the target.\n\n    Sample Input:\n    nums = [10, 20, 30, 40]\n    target = 70\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(nums) - 2):\n        for j in range(i + 1, len(nums) - 1):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False", "solution_func": "def g(nums=[10, 20, 30, 40], target=50):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6], target=10) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, determine if there exists a subset of the list that sums up to the target value.\n\n    Sample Input:\n    `nums = [1, 2, 3, 4, 5, 6]`\n    `target = 10`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if len(nums) == 0:\n            return False\n        if nums[0] > target:\n            return subset_sum(nums[1:], target)\n        return subset_sum(nums[1:], target) or subset_sum(nums[1:], target - nums[0])\n    \n    return subset_sum(nums, target)\n    \ndef g(nums=[1, 2, 3, 4, 5, 6], target=10):\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if len(nums) == 0:\n            return False\n        if nums[0] > target:\n            return subset_sum(nums[1:], target)\n        return subset_sum(nums[1:], target) or subset_sum(nums[1:], target - nums[0])\n    \n    return subset_sum(nums, target)\n    \nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 304, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6], target=10) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, determine if there exists a subset of the list that sums up to the target value.\n\n    Sample Input:\n    `nums = [1, 2, 3, 4, 5, 6]`\n    `target = 10`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if len(nums) == 0:\n            return False\n        if nums[0] > target:\n            return subset_sum(nums[1:], target)\n        return subset_sum(nums[1:], target) or subset_sum(nums[1:], target - nums[0])\n    \n    return subset_sum(nums, target)", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6], target=10):\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if len(nums) == 0:\n            return False\n        if nums[0] > target:\n            return subset_sum(nums[1:], target)\n        return subset_sum(nums[1:], target) or subset_sum(nums[1:], target - nums[0])\n    \n    return subset_sum(nums, target)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom collections import Counter\n\ndef f(s: str, t='abacabadabacaba') -> bool:\n    \"\"\"\n    Given two strings s and t, determine if s can be transformed into t by rearranging the characters.\n\n    Sample Input:\n    `s = \"abacabadabacaba\"`\n    `t = \"abacabadabacaba\"`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    counter_s = Counter(s)\n    counter_t = Counter(t)\n    return counter_s == counter_t\n\ndef g(s='abacabadabacaba', t='abacabadabacaba'):\n    counter_s = Counter(s)\n    counter_t = Counter(t)\n    return counter_s == counter_t\n\nassert f(g())\n", "emb": null, "idx_generation": 304, "target_skills": null, "problem_func": "from typing import*\nfrom collections import Counter\n\ndef f(s: str, t='abacabadabacaba') -> bool:\n    \"\"\"\n    Given two strings s and t, determine if s can be transformed into t by rearranging the characters.\n\n    Sample Input:\n    `s = \"abacabadabacaba\"`\n    `t = \"abacabadabacaba\"`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    counter_s = Counter(s)\n    counter_t = Counter(t)\n    return counter_s == counter_t", "solution_func": "def g(s='abacabadabacaba', t='abacabadabacaba'):\n    counter_s = Counter(s)\n    counter_t = Counter(t)\n    return counter_s == counter_t", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5], target=5) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, determine if there exists a subset of the list that sums up to the target value.\n\n    Sample Input:\n    `nums = [1, 2, 3, 4, 5]`\n    `target = 5`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if len(nums) == 0:\n            return False\n        if nums[0] > target:\n            return subset_sum(nums[1:], target)\n        return subset_sum(nums[1:], target) or subset_sum(nums[1:], target - nums[0])\n    \n    return subset_sum(nums, target)\n\ndef g(nums=[1, 2, 3, 4, 5], target=5):\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if len(nums) == 0:\n            return False\n        if nums[0] > target:\n            return subset_sum(nums[1:], target)\n        return subset_sum(nums[1:], target) or subset_sum(nums[1:], target - nums[0])\n    \n    return subset_sum(nums, target)\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 304, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5], target=5) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, determine if there exists a subset of the list that sums up to the target value.\n\n    Sample Input:\n    `nums = [1, 2, 3, 4, 5]`\n    `target = 5`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if len(nums) == 0:\n            return False\n        if nums[0] > target:\n            return subset_sum(nums[1:], target)\n        return subset_sum(nums[1:], target) or subset_sum(nums[1:], target - nums[0])\n    \n    return subset_sum(nums, target)", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=5):\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if len(nums) == 0:\n            return False\n        if nums[0] > target:\n            return subset_sum(nums[1:], target)\n        return subset_sum(nums[1:], target) or subset_sum(nums[1:], target - nums[0])\n    \n    return subset_sum(nums, target)", "map_ix": [1, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(equations: List[str], solution=24) -> bool:\n    \"\"\"Check if the given list of equations can be solved to obtain the solution\"\"\"\n    for eq in equations:\n        assert eval(eq) == solution, f'expecting {solution}'\n    return True\ndef g(solution=24):\n    return ['4*3*2*1', '8-4', '20/5']\nassert f(g())\n", "emb": null, "idx_generation": 304, "target_skills": null, "problem_func": "from typing import*\ndef f(equations: List[str], solution=24) -> bool:\n    \"\"\"Check if the given list of equations can be solved to obtain the solution\"\"\"\n    for eq in equations:\n        assert eval(eq) == solution, f'expecting {solution}'\n    return True", "solution_func": "def g(solution=24):\n    return ['4*3*2*1', '8-4', '20/5']", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport itertools\n\ndef f(words: List[str], phrase='thequickbrownfoxjumpsoverthelazydog') -> bool:\n    \"\"\"Check if it is possible to form the phrase using the given list of words\"\"\"\n    perms = itertools.permutations(words)\n    for perm in perms:\n        s = \"\".join(perm)\n        if s == phrase:\n            return True\n    return False\ndef g(phrase='thequickbrownfoxjumpsoverthelazydog'):\n    return ['the', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 304, "target_skills": null, "problem_func": "from typing import*\nimport itertools\n\ndef f(words: List[str], phrase='thequickbrownfoxjumpsoverthelazydog') -> bool:\n    \"\"\"Check if it is possible to form the phrase using the given list of words\"\"\"\n    perms = itertools.permutations(words)\n    for perm in perms:\n        s = \"\".join(perm)\n        if s == phrase:\n            return True\n    return False", "solution_func": "def g(phrase='thequickbrownfoxjumpsoverthelazydog'):\n    return ['the', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=9) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=9):\n    return [2, 7, 11, 15, 3, 6, 4, 8]\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 304, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=9) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target=9):\n    return [2, 7, 11, 15, 3, 6, 4, 8]", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if n can be expressed as the sum of two prime numbers.\"\"\"\n    for prime in primes:\n        if n - prime in primes:\n            return True\n    return False\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return primes[-1] + primes[-2]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 304, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if n can be expressed as the sum of two prime numbers.\"\"\"\n    for prime in primes:\n        if n - prime in primes:\n            return True\n    return False", "solution_func": "def g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return primes[-1] + primes[-2]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int=10) -> bool:\n    \"\"\"Find two numbers in a list that sum up to the target\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target: int=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 305, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int=10) -> bool:\n    \"\"\"Find two numbers in a list that sum up to the target\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))", "solution_func": "def g(target: int=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(string: str, chars: List[str]=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if a string contains all the given characters\"\"\"\n    return all(char in string for char in chars)\ndef g(chars: List[str]=['a', 'e', 'i', 'o', 'u']):\n    string = \"Hello, how are you?\"\n    return string\nassert f(g())\n", "emb": null, "idx_generation": 305, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, chars: List[str]=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if a string contains all the given characters\"\"\"\n    return all(char in string for char in chars)", "solution_func": "def g(chars: List[str]=['a', 'e', 'i', 'o', 'u']):\n    string = \"Hello, how are you?\"\n    return string", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(dates: List[datetime.date], year: int=2022) -> bool:\n    \"\"\"Check if all dates are from the same year\"\"\"\n    return all(date.year == year for date in dates)\ndef g(year: int=2022):\n    dates = [datetime.date(2022, 1, 1), datetime.date(2022, 2, 1), datetime.date(2022, 3, 1)]\n    return dates\nassert f(g())\n", "emb": null, "idx_generation": 305, "target_skills": null, "problem_func": "from typing import*\ndef f(dates: List[datetime.date], year: int=2022) -> bool:\n    \"\"\"Check if all dates are from the same year\"\"\"\n    return all(date.year == year for date in dates)", "solution_func": "def g(year: int=2022):\n    dates = [datetime.date(2022, 1, 1), datetime.date(2022, 2, 1), datetime.date(2022, 3, 1)]\n    return dates", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums=[5, 10, 15, 25]):\n    return nums\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 305, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums=[5, 10, 15, 25]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport datetime\n\ndef f(year: int, month: int, day: int, weekday=3) -> bool:\n    \"\"\"Check if a specific date falls on a specific weekday.\"\"\"\n    date = datetime.date(year, month, day)\n    return date.weekday() == weekday\ndef g(year=2022, month=1, day=1, weekday=3):\n    return year, month, day, weekday\nassert f(*g())\n", "emb": null, "idx_generation": 305, "target_skills": null, "problem_func": "from typing import*\nimport datetime\n\ndef f(year: int, month: int, day: int, weekday=3) -> bool:\n    \"\"\"Check if a specific date falls on a specific weekday.\"\"\"\n    date = datetime.date(year, month, day)\n    return date.weekday() == weekday", "solution_func": "def g(year=2022, month=1, day=1, weekday=3):\n    return year, month, day, weekday", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=30) -> bool:\n    \"\"\"Check if the target number is present in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(matrix=[[10, 20, 30], [40, 50, 60], [70, 80, 90]]):\n    return matrix\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 305, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=30) -> bool:\n    \"\"\"Check if the target number is present in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(matrix=[[10, 20, 30], [40, 50, 60], [70, 80, 90]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(x: int, a=7, b=3) -> bool:\n    \"\"\"Check if the square root of the difference between two numbers is equal to a given number\"\"\"\n    return math.sqrt(abs(a - b)) == x\n\ndef g(a=7, b=3):\n    return abs(a - b)\n\nassert f(g())\n", "emb": null, "idx_generation": 305, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: int, a=7, b=3) -> bool:\n    \"\"\"Check if the square root of the difference between two numbers is equal to a given number\"\"\"\n    return math.sqrt(abs(a - b)) == x", "solution_func": "def g(a=7, b=3):\n    return abs(a - b)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: str, substring='abc', count=10) -> bool:\n    \"\"\"Check if a string contains a certain number of copies of a given substring\"\"\"\n    return x.count(substring) == count\n\ndef g(substring='abc', count=10):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 305, "target_skills": null, "problem_func": "from typing import*\ndef f(x: str, substring='abc', count=10) -> bool:\n    \"\"\"Check if a string contains a certain number of copies of a given substring\"\"\"\n    return x.count(substring) == count", "solution_func": "def g(substring='abc', count=10):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: list, num_elements=3) -> bool:\n    \"\"\"Check if a list contains a certain number of elements\"\"\"\n    return len(x) == num_elements\n\ndef g(num_elements=3):\n    return [1] * num_elements\n\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 305, "target_skills": null, "problem_func": "from typing import*\ndef f(x: list, num_elements=3) -> bool:\n    \"\"\"Check if a list contains a certain number of elements\"\"\"\n    return len(x) == num_elements", "solution_func": "def g(num_elements=3):\n    return [1] * num_elements", "map_ix": [0, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target=100, n=5) -> bool:\n    \"\"\"Find if there exists a subset of length n with sum equal to target\"\"\"\n    def subsetSum(arr, n, target):\n        if target == 0:\n            return True\n        if n == 0:\n            return False\n        \n        if arr[n-1] > target:\n            return subsetSum(arr, n-1, target)\n        \n        return subsetSum(arr, n-1, target) or subsetSum(arr, n-1, target-arr[n-1])\n    \n    return subsetSum(arr, len(arr), target) and len(arr) >= n\n    \ndef g(target = 100, n = 5):\n    return [20, 30, 40, 50, 60, 70, 80, 90]\n    \nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 305, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=100, n=5) -> bool:\n    \"\"\"Find if there exists a subset of length n with sum equal to target\"\"\"\n    def subsetSum(arr, n, target):\n        if target == 0:\n            return True\n        if n == 0:\n            return False\n        \n        if arr[n-1] > target:\n            return subsetSum(arr, n-1, target)\n        \n        return subsetSum(arr, n-1, target) or subsetSum(arr, n-1, target-arr[n-1])\n    \n    return subsetSum(arr, len(arr), target) and len(arr) >= n", "solution_func": "def g(target = 100, n = 5):\n    return [20, 30, 40, 50, 60, 70, 80, 90]", "map_ix": [0, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(n: int, m=5) -> bool:\n    \"\"\"Check if the square root of n is an integer and divisible by m.\"\"\"\n    return math.sqrt(n).is_integer() and math.sqrt(n) % m == 0\n\ndef g(m=5):\n    n = m**2\n    return n\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 306, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, m=5) -> bool:\n    \"\"\"Check if the square root of n is an integer and divisible by m.\"\"\"\n    return math.sqrt(n).is_integer() and math.sqrt(n) % m == 0", "solution_func": "def g(m=5):\n    n = m**2\n    return n", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, x='abc', y='xyz') -> bool:\n    \"\"\"Check if s is a palindrome and contains at least one substring of x and one substring of y.\"\"\"\n    return s == s[::-1] and any(sub in s for sub in x) and any(sub in s for sub in y)\n\ndef g(x='abc', y='xyz'):\n    substrings = [x[i:j] for i in range(len(x)) for j in range(i+1, len(x)+1)]\n    substrings += [y[i:j] for i in range(len(y)) for j in range(i+1, len(y)+1)]\n    s = ''.join(substrings)\n    return s\n\nassert f(g())\n", "emb": null, "idx_generation": 306, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, x='abc', y='xyz') -> bool:\n    \"\"\"Check if s is a palindrome and contains at least one substring of x and one substring of y.\"\"\"\n    return s == s[::-1] and any(sub in s for sub in x) and any(sub in s for sub in y)", "solution_func": "def g(x='abc', y='xyz'):\n    substrings = [x[i:j] for i in range(len(x)) for j in range(i+1, len(x)+1)]\n    substrings += [y[i:j] for i in range(len(y)) for j in range(i+1, len(y)+1)]\n    s = ''.join(substrings)\n    return s", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, a=3, b=5) -> bool:\n    \"\"\"Check if n is divisible by either a or b, but not both.\"\"\"\n    return (n % a == 0) != (n % b == 0)\n\ndef g(a=3, b=5):\n    n = a * b\n    return n\n\nassert f(g())\n", "emb": null, "idx_generation": 306, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=3, b=5) -> bool:\n    \"\"\"Check if n is divisible by either a or b, but not both.\"\"\"\n    return (n % a == 0) != (n % b == 0)", "solution_func": "def g(a=3, b=5):\n    n = a * b\n    return n", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, a='peanutbutter', b='jelly', c='pbj') -> bool:\n    \"\"\"Check if string c can be formed by combining strings a and b.\"\"\"\n    return s == a + b and s == b + a and s == c\ndef g(a = 'peanutbutter', b = 'jelly', c = 'pbj'):\n    return c\nassert f(g())\n", "emb": null, "idx_generation": 306, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, a='peanutbutter', b='jelly', c='pbj') -> bool:\n    \"\"\"Check if string c can be formed by combining strings a and b.\"\"\"\n    return s == a + b and s == b + a and s == c", "solution_func": "def g(a = 'peanutbutter', b = 'jelly', c = 'pbj'):\n    return c", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(n: int, nums=[2, 4, 6, 8, 10], k=4) -> bool:\n    \"\"\"Check if the sum of the k smallest numbers in the list is equal to n.\"\"\"\n    nums.sort()\n    return sum(nums[:k]) == n\ndef g(nums = [2, 4, 6, 8, 10], k = 4):\n    n = sum(nums)\n    while n > 0:\n        if math.sqrt(n).is_integer():\n            return n\n        n -= 1\n    return 0\nassert f(g())\n", "emb": null, "idx_generation": 306, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, nums=[2, 4, 6, 8, 10], k=4) -> bool:\n    \"\"\"Check if the sum of the k smallest numbers in the list is equal to n.\"\"\"\n    nums.sort()\n    return sum(nums[:k]) == n", "solution_func": "def g(nums = [2, 4, 6, 8, 10], k = 4):\n    n = sum(nums)\n    while n > 0:\n        if math.sqrt(n).is_integer():\n            return n\n        n -= 1\n    return 0", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, a='apple', b='banana', c='cherry') -> bool:\n    \"\"\"Check if all strings have the same length.\"\"\"\n    return len(s) == len(a) and len(s) == len(b) and len(s) == len(c)\ndef g(a = 'apple', b = 'banana', c = 'cherry'):\n    return a\nassert f(g())\n", "emb": null, "idx_generation": 306, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, a='apple', b='banana', c='cherry') -> bool:\n    \"\"\"Check if all strings have the same length.\"\"\"\n    return len(s) == len(a) and len(s) == len(b) and len(s) == len(c)", "solution_func": "def g(a = 'apple', b = 'banana', c = 'cherry'):\n    return a", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(p: str, q: str, r: str, s: str, t: str, u: str) -> bool:\n    \"\"\"\n    Check if the given strings p, q, r, s, t, u can be rearranged to form a palindrome.\n    \"\"\"\n    combined = p + q + r + s + t + u\n    char_count = {}\n    for char in combined:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    odd_count = 0\n    for count in char_count.values():\n        if count % 2 != 0:\n            odd_count += 1\n    return odd_count <= 1\n\ndef g(p: str, q: str, r: str, s: str, t: str, u: str):\n    return p + q + r + s + t + u\n\nassert f(g('a', 'b', 'c', 'd', 'e', 'f'))\n", "emb": null, "idx_generation": 306, "target_skills": null, "problem_func": "from typing import*\ndef f(p: str, q: str, r: str, s: str, t: str, u: str) -> bool:\n    \"\"\"\n    Check if the given strings p, q, r, s, t, u can be rearranged to form a palindrome.\n    \"\"\"\n    combined = p + q + r + s + t + u\n    char_count = {}\n    for char in combined:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    odd_count = 0\n    for count in char_count.values():\n        if count % 2 != 0:\n            odd_count += 1\n    return odd_count <= 1", "solution_func": "def g(p: str, q: str, r: str, s: str, t: str, u: str):\n    return p + q + r + s + t + u", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(n: int, m: int, p: int) -> bool:\n    \"\"\"\n    Check if the given integers n, m, and p form a Pythagorean triple.\n    \"\"\"\n    return math.pow(n, 2) + math.pow(m, 2) == math.pow(p, 2)\n\ndef g(n: int, m: int, p: int):\n    return (n, m, p)\n\nassert f(g(3, 4, 5))\n", "emb": null, "idx_generation": 306, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, m: int, p: int) -> bool:\n    \"\"\"\n    Check if the given integers n, m, and p form a Pythagorean triple.\n    \"\"\"\n    return math.pow(n, 2) + math.pow(m, 2) == math.pow(p, 2)", "solution_func": "def g(n: int, m: int, p: int):\n    return (n, m, p)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are two numbers in the given list lst that add up to the target number.\n    \"\"\"\n    num_set = set()\n    for num in lst:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(lst: List[int], target: int):\n    return (lst, target)\n\nassert f(g([1, 2, 3, 4, 5], 7))\n", "emb": null, "idx_generation": 306, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are two numbers in the given list lst that add up to the target number.\n    \"\"\"\n    num_set = set()\n    for num in lst:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(lst: List[int], target: int):\n    return (lst, target)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: List[int], target=100) -> bool:\n    \"\"\"\n    Given a list of integers, find a pair of numbers whose sum is equal to the target value.\n\n    Example:\n    x = [1, 2, 3, 4, 5]\n    target = 7\n\n    The pair of numbers that sum up to 7 is (2, 5), so the function should return True.\n    \"\"\"\n    for i in range(len(x)):\n        for j in range(i+1, len(x)):\n            if x[i] + x[j] == target:\n                return True\n    return False\n\ndef g(target=100):\n    return [1, 2, 3, 4, target-10]\n\nassert f(g())\n", "emb": null, "idx_generation": 306, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], target=100) -> bool:\n    \"\"\"\n    Given a list of integers, find a pair of numbers whose sum is equal to the target value.\n\n    Example:\n    x = [1, 2, 3, 4, 5]\n    target = 7\n\n    The pair of numbers that sum up to 7 is (2, 5), so the function should return True.\n    \"\"\"\n    for i in range(len(x)):\n        for j in range(i+1, len(x)):\n            if x[i] + x[j] == target:\n                return True\n    return False", "solution_func": "def g(target=100):\n    return [1, 2, 3, 4, target-10]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target_char='a') -> bool:\n    \"\"\"Check if the target character appears in the string s\"\"\"\n    return target_char in s\ndef g(target_char = 'a'):\n    return 'abcdefghijklmnopqrstuvwxyz'\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 307, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target_char='a') -> bool:\n    \"\"\"Check if the target character appears in the string s\"\"\"\n    return target_char in s", "solution_func": "def g(target_char = 'a'):\n    return 'abcdefghijklmnopqrstuvwxyz'", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists two numbers in the list that add up to the target value\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target = 10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n", "emb": null, "idx_generation": 307, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists two numbers in the list that add up to the target value\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(target = 10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the matrix is symmetric along the main diagonal\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 307, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the matrix is symmetric along the main diagonal\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "solution_func": "def g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, m=4) -> bool:\n    \"\"\"Check if a number is divisible by m\"\"\"\n    return n % m == 0\ndef g(m = 4):\n    return m * 5\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 307, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m=4) -> bool:\n    \"\"\"Check if a number is divisible by m\"\"\"\n    return n % m == 0", "solution_func": "def g(m = 4):\n    return m * 5", "map_ix": [1, 1, 0, 1, 0, 0, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in a list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums = [2, 3, 5, 7, 8]):\n    return nums\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 307, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in a list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums = [2, 3, 5, 7, 8]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if the target number is in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 307, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if the target number is in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int, k=3) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a combination of k numbers that sum up to the target.\n    \"\"\"\n    def backtrack(start, curr_sum, count):\n        if curr_sum == target and count == k:\n            return True\n        if curr_sum > target or count > k:\n            return False\n        for i in range(start, len(nums)):\n            if backtrack(i + 1, curr_sum + nums[i], count + 1):\n                return True\n        return False\n    nums.sort()\n    return backtrack(0, 0, 0)\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9], target=15, k=3):\n    from itertools import combinations\n    for combination in combinations(nums, k):\n        if sum(combination) == target:\n            return True\n    return False\nassert f(g())\n", "emb": null, "idx_generation": 307, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int, k=3) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a combination of k numbers that sum up to the target.\n    \"\"\"\n    def backtrack(start, curr_sum, count):\n        if curr_sum == target and count == k:\n            return True\n        if curr_sum > target or count > k:\n            return False\n        for i in range(start, len(nums)):\n            if backtrack(i + 1, curr_sum + nums[i], count + 1):\n                return True\n        return False\n    nums.sort()\n    return backtrack(0, 0, 0)", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9], target=15, k=3):\n    from itertools import combinations\n    for combination in combinations(nums, k):\n        if sum(combination) == target:\n            return True\n    return False", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int, n=4, m=4) -> bool:\n    \"\"\"\n    Given an n x m matrix, find if there exists a path from the top left cell to the bottom right cell\n    such that the sum of the values along the path is equal to the target.\n    \"\"\"\n    def dfs(row, col, curr_sum):\n        if row == n - 1 and col == m - 1:\n            return curr_sum == target\n        if row >= n or col >= m:\n            return False\n        return dfs(row + 1, col, curr_sum + matrix[row + 1][col]) or \\\n               dfs(row, col + 1, curr_sum + matrix[row][col + 1])\n    return dfs(0, 0, matrix[0][0])\ndef g(matrix=[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], target=30, n=4, m=4):\n    dp = [[0] * m for _ in range(n)]\n    dp[0][0] = matrix[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i - 1][0] + matrix[i][0]\n    for j in range(1, m):\n        dp[0][j] = dp[0][j - 1] + matrix[0][j]\n    for i in range(1, n):\n        for j in range(1, m):\n            dp[i][j] = matrix[i][j] + max(dp[i - 1][j], dp[i][j - 1])\n    return dp[n - 1][m - 1] == target\nassert f(g())\n", "emb": null, "idx_generation": 307, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int, n=4, m=4) -> bool:\n    \"\"\"\n    Given an n x m matrix, find if there exists a path from the top left cell to the bottom right cell\n    such that the sum of the values along the path is equal to the target.\n    \"\"\"\n    def dfs(row, col, curr_sum):\n        if row == n - 1 and col == m - 1:\n            return curr_sum == target\n        if row >= n or col >= m:\n            return False\n        return dfs(row + 1, col, curr_sum + matrix[row + 1][col]) or \\\n               dfs(row, col + 1, curr_sum + matrix[row][col + 1])\n    return dfs(0, 0, matrix[0][0])", "solution_func": "def g(matrix=[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], target=30, n=4, m=4):\n    dp = [[0] * m for _ in range(n)]\n    dp[0][0] = matrix[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i - 1][0] + matrix[i][0]\n    for j in range(1, m):\n        dp[0][j] = dp[0][j - 1] + matrix[0][j]\n    for i in range(1, n):\n        for j in range(1, m):\n            dp[i][j] = matrix[i][j] + max(dp[i - 1][j], dp[i][j - 1])\n    return dp[n - 1][m - 1] == target", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int, k=3) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a combination of k numbers that sum up to the target.\n    \"\"\"\n    def backtrack(start, curr_sum, count):\n        if curr_sum == target and count == k:\n            return True\n        if curr_sum > target or count > k:\n            return False\n        for i in range(start, len(nums)):\n            if backtrack(i + 1, curr_sum + nums[i], count + 1):\n                return True\n        return False\n    nums.sort()\n    return backtrack(0, 0, 0)\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9], target=15, k=3):\n    from itertools import combinations\n    for combination in combinations(nums, k):\n        if sum(combination) == target:\n            return True\n    return False\nassert f(g())\n", "emb": null, "idx_generation": 307, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int, k=3) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a combination of k numbers that sum up to the target.\n    \"\"\"\n    def backtrack(start, curr_sum, count):\n        if curr_sum == target and count == k:\n            return True\n        if curr_sum > target or count > k:\n            return False\n        for i in range(start, len(nums)):\n            if backtrack(i + 1, curr_sum + nums[i], count + 1):\n                return True\n        return False\n    nums.sort()\n    return backtrack(0, 0, 0)", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9], target=15, k=3):\n    from itertools import combinations\n    for combination in combinations(nums, k):\n        if sum(combination) == target:\n            return True\n    return False", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, m: int, a: int, b: int) -> bool:\n    \"\"\"Check if the product of n and m is equal to the sum of a and b\"\"\"\n    return n * m == a + b\ndef g(n: int, m: int, a: int = 2, b: int = 3):\n    return n * m\nassert f(g(2, 3))\n", "emb": null, "idx_generation": 307, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m: int, a: int, b: int) -> bool:\n    \"\"\"Check if the product of n and m is equal to the sum of a and b\"\"\"\n    return n * m == a + b", "solution_func": "def g(n: int, m: int, a: int = 2, b: int = 3):\n    return n * m", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Check if substring is a palindrome\"\"\"\n    return substring == substring[::-1]\ndef g(substring='abc'):\n    return substring\nassert f(g())\n", "emb": null, "idx_generation": 308, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Check if substring is a palindrome\"\"\"\n    return substring == substring[::-1]", "solution_func": "def g(substring='abc'):\n    return substring", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, lst=[2, 3, 5, 7]) -> bool:\n    \"\"\"Check if n is a prime number\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef g(lst=[2, 3, 5, 7]):\n    return lst[0]\nassert f(g())\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 308, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst=[2, 3, 5, 7]) -> bool:\n    \"\"\"Check if n is a prime number\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "solution_func": "def g(lst=[2, 3, 5, 7]):\n    return lst[0]", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, lst=[2, 3, 5, 7]) -> bool:\n    \"\"\"Check if n is divisible by all numbers in the list\"\"\"\n    return all(n % i == 0 for i in lst)\ndef g(lst=[2, 3, 5, 7]):\n    return lst[0]\nassert f(g())\n", "emb": null, "idx_generation": 308, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst=[2, 3, 5, 7]) -> bool:\n    \"\"\"Check if n is divisible by all numbers in the list\"\"\"\n    return all(n % i == 0 for i in lst)", "solution_func": "def g(lst=[2, 3, 5, 7]):\n    return lst[0]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, r: int, n=4) -> bool:\n    \"\"\"Check if the string s contains exactly n occurrences of the character r\"\"\"\n    return s.count(r) == n\ndef g(r = 'a', n = 4):\n    return r * n\nassert f(g())\n", "emb": null, "idx_generation": 308, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, r: int, n=4) -> bool:\n    \"\"\"Check if the string s contains exactly n occurrences of the character r\"\"\"\n    return s.count(r) == n", "solution_func": "def g(r = 'a', n = 4):\n    return r * n", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(d: datetime, t=6) -> bool:\n    \"\"\"Check if the hour of the datetime d is between 6 AM and 6 PM\"\"\"\n    return 6 <= d.hour < 18\ndef g():\n    return datetime.now()\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 308, "target_skills": null, "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(d: datetime, t=6) -> bool:\n    \"\"\"Check if the hour of the datetime d is between 6 AM and 6 PM\"\"\"\n    return 6 <= d.hour < 18", "solution_func": "def g():\n    return datetime.now()", "map_ix": [0, 0, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=8) -> bool:\n    \"\"\"Check if the string s contains at least n uppercase letters\"\"\"\n    return sum(1 for c in s if c.isupper()) >= n\ndef g(n = 8):\n    return \"ABC\" * n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 308, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=8) -> bool:\n    \"\"\"Check if the string s contains at least n uppercase letters\"\"\"\n    return sum(1 for c in s if c.isupper()) >= n", "solution_func": "def g(n = 8):\n    return \"ABC\" * n", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, char='a') -> bool:\n    \"\"\"Check if a given character is present in a string.\"\"\"\n    return char in s\ndef g(char='a'):\n    s = \"Hello, World!\"\n    return s\nassert f(g())\n", "emb": null, "idx_generation": 308, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, char='a') -> bool:\n    \"\"\"Check if a given character is present in a string.\"\"\"\n    return char in s", "solution_func": "def g(char='a'):\n    s = \"Hello, World!\"\n    return s", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the list that sums up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 308, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the list that sums up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(m: int, n: int, k: int) -> bool:\n    \"\"\"Check if m and n are both divisible by k.\"\"\"\n    return m % k == 0 and n % k == 0\ndef g(k=5):\n    m = 25\n    n = 30\n    return m, n\nassert f(*g())\n", "emb": null, "idx_generation": 308, "target_skills": null, "problem_func": "from typing import*\ndef f(m: int, n: int, k: int) -> bool:\n    \"\"\"Check if m and n are both divisible by k.\"\"\"\n    return m % k == 0 and n % k == 0", "solution_func": "def g(k=5):\n    m = 25\n    n = 30\n    return m, n", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], t=100, a=0, e=10, s=1) -> bool:\n    \"\"\"Check if the sum of the sublist is equal to t\"\"\"\n    return sum(x[a:e:s]) == t\n\ndef g(t=100, a=0, e=10, s=1):\n    \"\"\"Generate a list of consecutive numbers from a to e-1\"\"\"\n    return list(range(a, e))\n\nassert f(g())\n", "emb": null, "idx_generation": 308, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], t=100, a=0, e=10, s=1) -> bool:\n    \"\"\"Check if the sum of the sublist is equal to t\"\"\"\n    return sum(x[a:e:s]) == t", "solution_func": "def g(t=100, a=0, e=10, s=1):\n    \"\"\"Generate a list of consecutive numbers from a to e-1\"\"\"\n    return list(range(a, e))", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target value, determine if the target value exists in the matrix.\n    The matrix is sorted in ascending order from left to right and from top to bottom.\n    \"\"\"\n    if not matrix:\n        return False\n    rows, cols = len(matrix), len(matrix[0])\n    row, col = 0, cols - 1\n    while row < rows and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            row += 1\n        else:\n            col -= 1\n    return False\n\ndef g(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Generate a matrix of integers and a target value.\n    The matrix is sorted in ascending order from left to right and from top to bottom.\n    \"\"\"\n    rows, cols = random.randint(1, 5), random.randint(1, 5)\n    matrix = [[random.randint(1, 10) for _ in range(cols)] for _ in range(rows)]\n    matrix.sort(key=lambda x: x[0])\n    target = random.randint(1, 10)\n    return matrix, target\n\nassert f(*g())\n", "emb": null, "idx_generation": 309, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target value, determine if the target value exists in the matrix.\n    The matrix is sorted in ascending order from left to right and from top to bottom.\n    \"\"\"\n    if not matrix:\n        return False\n    rows, cols = len(matrix), len(matrix[0])\n    row, col = 0, cols - 1\n    while row < rows and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            row += 1\n        else:\n            col -= 1\n    return False", "solution_func": "def g(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Generate a matrix of integers and a target value.\n    The matrix is sorted in ascending order from left to right and from top to bottom.\n    \"\"\"\n    rows, cols = random.randint(1, 5), random.randint(1, 5)\n    matrix = [[random.randint(1, 10) for _ in range(cols)] for _ in range(rows)]\n    matrix.sort(key=lambda x: x[0])\n    target = random.randint(1, 10)\n    return matrix, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(nums: List[int], target: int, k: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, find if there are k elements in the list that add up to the target value.\n    \"\"\"\n    def backtrack(start, curr_sum, count):\n        if count == k:\n            return curr_sum == target\n        for i in range(start, len(nums)):\n            if curr_sum + nums[i] > target:\n                break\n            if backtrack(i + 1, curr_sum + nums[i], count + 1):\n                return True\n        return False\n\n    return backtrack(0, 0, 0)\n\ndef g(nums: List[int], target: int, k: int) -> bool:\n    \"\"\"\n    Generate a list of integers, a target value, and the number of elements to find.\n    \"\"\"\n    nums = [random.randint(1, 10) for _ in range(random.randint(1, 5))]\n    target = random.randint(1, 20)\n    k = random.randint(1, len(nums))\n    return nums, target, k\n\nassert f(*g())\n", "emb": null, "idx_generation": 309, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(nums: List[int], target: int, k: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, find if there are k elements in the list that add up to the target value.\n    \"\"\"\n    def backtrack(start, curr_sum, count):\n        if count == k:\n            return curr_sum == target\n        for i in range(start, len(nums)):\n            if curr_sum + nums[i] > target:\n                break\n            if backtrack(i + 1, curr_sum + nums[i], count + 1):\n                return True\n        return False\n\n    return backtrack(0, 0, 0)", "solution_func": "def g(nums: List[int], target: int, k: int) -> bool:\n    \"\"\"\n    Generate a list of integers, a target value, and the number of elements to find.\n    \"\"\"\n    nums = [random.randint(1, 10) for _ in range(random.randint(1, 5))]\n    target = random.randint(1, 20)\n    k = random.randint(1, len(nums))\n    return nums, target, k", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"\n    Given two strings, determine if they are isomorphic.\n    Two strings are isomorphic if the characters in s can be replaced to get t.\n    \"\"\"\n    if len(s) != len(t):\n        return False\n    s_map, t_map = {}, {}\n    for i in range(len(s)):\n        if s[i] in s_map and s_map[s[i]] != t[i]:\n            return False\n        if t[i] in t_map and t_map[t[i]] != s[i]:\n            return False\n        s_map[s[i]] = t[i]\n        t_map[t[i]] = s[i]\n    return True\n\ndef g(s: str, t: str) -> bool:\n    \"\"\"\n    Generate two strings to check if they are isomorphic.\n    \"\"\"\n    s = ''.join(random.choices(string.ascii_lowercase, k=random.randint(1, 10)))\n    t = ''.join(random.choices(string.ascii_lowercase, k=len(s)))\n    return s, t\n\nassert f(*g())\n", "emb": null, "idx_generation": 309, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"\n    Given two strings, determine if they are isomorphic.\n    Two strings are isomorphic if the characters in s can be replaced to get t.\n    \"\"\"\n    if len(s) != len(t):\n        return False\n    s_map, t_map = {}, {}\n    for i in range(len(s)):\n        if s[i] in s_map and s_map[s[i]] != t[i]:\n            return False\n        if t[i] in t_map and t_map[t[i]] != s[i]:\n            return False\n        s_map[s[i]] = t[i]\n        t_map[t[i]] = s[i]\n    return True", "solution_func": "def g(s: str, t: str) -> bool:\n    \"\"\"\n    Generate two strings to check if they are isomorphic.\n    \"\"\"\n    s = ''.join(random.choices(string.ascii_lowercase, k=random.randint(1, 10)))\n    t = ''.join(random.choices(string.ascii_lowercase, k=len(s)))\n    return s, t", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a subset of the list that sums up to n.\n    \"\"\"\n    dp = [False] * (n + 1)\n    dp[0] = True\n    for num in nums:\n        for i in range(n, num - 1, -1):\n            if dp[i - num]:\n                dp[i] = True\n    return dp[n]\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    n = sum(nums)\n    return n\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 309, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a subset of the list that sums up to n.\n    \"\"\"\n    dp = [False] * (n + 1)\n    dp[0] = True\n    for num in nums:\n        for i in range(n, num - 1, -1):\n            if dp[i - num]:\n                dp[i] = True\n    return dp[n]", "solution_func": "def g(nums=[1, 2, 3, 4, 5]):\n    n = sum(nums)\n    return n", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, k: int, nums=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a subset of the list that sums up to n and contains exactly k elements.\n    \"\"\"\n    dp = [[False] * (n + 1) for _ in range(k + 1)]\n    dp[0][0] = True\n    for num in nums:\n        for i in range(k, 0, -1):\n            for j in range(n, num - 1, -1):\n                if dp[i - 1][j - num]:\n                    dp[i][j] = True\n    return dp[k][n]\n\ndef g(k: int, nums=[1, 2, 3, 4, 5]):\n    n = sum(nums)\n    return n, k\n\nassert f(*g())\n", "emb": null, "idx_generation": 309, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, k: int, nums=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a subset of the list that sums up to n and contains exactly k elements.\n    \"\"\"\n    dp = [[False] * (n + 1) for _ in range(k + 1)]\n    dp[0][0] = True\n    for num in nums:\n        for i in range(k, 0, -1):\n            for j in range(n, num - 1, -1):\n                if dp[i - 1][j - num]:\n                    dp[i][j] = True\n    return dp[k][n]", "solution_func": "def g(k: int, nums=[1, 2, 3, 4, 5]):\n    n = sum(nums)\n    return n, k", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, pattern: str) -> bool:\n    \"\"\"\n    Given a string and a pattern, check if the pattern can match the string.\n    The pattern can contain '?' which matches any single character and '*' which matches any sequence of characters.\n    \"\"\"\n    m, n = len(s), len(pattern)\n    dp = [[False] * (n + 1) for _ in range(m + 1)]\n    dp[0][0] = True\n    for j in range(1, n + 1):\n        if pattern[j - 1] == '*':\n            dp[0][j] = dp[0][j - 1]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if pattern[j - 1] == '?' or s[i - 1] == pattern[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            elif pattern[j - 1] == '*':\n                dp[i][j] = dp[i][j - 1] or dp[i - 1][j]\n    return dp[m][n]\n\ndef g(pattern: str):\n    s = \"abcde\"\n    return s, pattern\n\nassert f(*g())\n", "emb": null, "idx_generation": 309, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, pattern: str) -> bool:\n    \"\"\"\n    Given a string and a pattern, check if the pattern can match the string.\n    The pattern can contain '?' which matches any single character and '*' which matches any sequence of characters.\n    \"\"\"\n    m, n = len(s), len(pattern)\n    dp = [[False] * (n + 1) for _ in range(m + 1)]\n    dp[0][0] = True\n    for j in range(1, n + 1):\n        if pattern[j - 1] == '*':\n            dp[0][j] = dp[0][j - 1]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if pattern[j - 1] == '?' or s[i - 1] == pattern[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            elif pattern[j - 1] == '*':\n                dp[i][j] = dp[i][j - 1] or dp[i - 1][j]\n    return dp[m][n]", "solution_func": "def g(pattern: str):\n    s = \"abcde\"\n    return s, pattern", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(li: List[int], target: int, n=2) -> bool:\n    \"\"\"Find n occurrences of a target number in a list\"\"\"\n    return li.count(target) == n\ndef g(target = 42, n = 2):\n    return [17, 31, target, 91, 18, 42, 1, 9, target] * n\nassert f(g())\n", "emb": null, "idx_generation": 309, "target_skills": null, "problem_func": "from typing import*\ndef f(li: List[int], target: int, n=2) -> bool:\n    \"\"\"Find n occurrences of a target number in a list\"\"\"\n    return li.count(target) == n", "solution_func": "def g(target = 42, n = 2):\n    return [17, 31, target, 91, 18, 42, 1, 9, target] * n", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, sub: str, n=3) -> bool:\n    \"\"\"Check if a string contains a certain substring n times\"\"\"\n    return s.count(sub) == n\ndef g(sub = \"abc\", n = 3):\n    return sub * n + \"def\" + sub * (n - 1)\nassert f(g())\n", "emb": null, "idx_generation": 309, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, sub: str, n=3) -> bool:\n    \"\"\"Check if a string contains a certain substring n times\"\"\"\n    return s.count(sub) == n", "solution_func": "def g(sub = \"abc\", n = 3):\n    return sub * n + \"def\" + sub * (n - 1)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(li: List[int], target: int, i: int) -> bool:\n    \"\"\"Check if a target number is at a certain index in a list\"\"\"\n    return li[i] == target\ndef g(li = [17, 31, 91, 18, 42, 1, 9], target = 42, i = 4):\n    return li.index(target)\nassert f(g())\n", "emb": null, "idx_generation": 309, "target_skills": null, "problem_func": "from typing import*\ndef f(li: List[int], target: int, i: int) -> bool:\n    \"\"\"Check if a target number is at a certain index in a list\"\"\"\n    return li[i] == target", "solution_func": "def g(li = [17, 31, 91, 18, 42, 1, 9], target = 42, i = 4):\n    return li.index(target)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport itertools\n\ndef f(s: str, k: int) -> bool:\n    \"\"\"Check if there exists a string of length k that is a permutation of s.\"\"\"\n    perms = [''.join(p) for p in itertools.permutations(s)]\n    return any(len(p) == k for p in perms)\n\ndef g(s: str, k: int):\n    return s\n\nassert f(g())\n", "emb": null, "idx_generation": 309, "target_skills": null, "problem_func": "from typing import*\nimport itertools\n\ndef f(s: str, k: int) -> bool:\n    \"\"\"Check if there exists a string of length k that is a permutation of s.\"\"\"\n    perms = [''.join(p) for p in itertools.permutations(s)]\n    return any(len(p) == k for p in perms)", "solution_func": "def g(s: str, k: int):\n    return s", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(num: int, n=3, seq=[17, 1, 2, 65, 18, 91, -30, 100, 3, 1, 2]) -> bool:\n    \"\"\"Check if the given number is present n times in the sequence\"\"\"\n    return seq.count(num) == n\ndef g(n = 3, seq = [17, 1, 2, 65, 18, 91, -30, 100, 3, 1, 2]):\n    return seq[n]\nassert f(g())\n", "emb": null, "idx_generation": 310, "target_skills": null, "problem_func": "from typing import*\ndef f(num: int, n=3, seq=[17, 1, 2, 65, 18, 91, -30, 100, 3, 1, 2]) -> bool:\n    \"\"\"Check if the given number is present n times in the sequence\"\"\"\n    return seq.count(num) == n", "solution_func": "def g(n = 3, seq = [17, 1, 2, 65, 18, 91, -30, 100, 3, 1, 2]):\n    return seq[n]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(num: float, x=2, y=3) -> bool:\n    \"\"\"Check if the given number is within the range of x^y to y^x\"\"\"\n    return math.pow(x, y) <= num <= math.pow(y, x)\ndef g(x = 2, y = 3):\n    return math.pow(x*x, y*y)\nassert f(g())\n", "emb": null, "idx_generation": 310, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(num: float, x=2, y=3) -> bool:\n    \"\"\"Check if the given number is within the range of x^y to y^x\"\"\"\n    return math.pow(x, y) <= num <= math.pow(y, x)", "solution_func": "def g(x = 2, y = 3):\n    return math.pow(x*x, y*y)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substr='abc', target='def') -> bool:\n    \"\"\"Check if the given string can be transformed into the target string by replacing all occurrences of a certain substring\"\"\"\n    return s.replace(substr, target) == target\ndef g(substr = 'abc', target = 'def'):\n    return target.replace(substr, substr)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 310, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substr='abc', target='def') -> bool:\n    \"\"\"Check if the given string can be transformed into the target string by replacing all occurrences of a certain substring\"\"\"\n    return s.replace(substr, target) == target", "solution_func": "def g(substr = 'abc', target = 'def'):\n    return target.replace(substr, substr)", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(lst: List[int], n=100, target=50) -> bool:\n    \"\"\"Check if the sum of any two distinct elements in the list is equal to n.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == n:\n                return True\n    return False\n\ndef g(n=100, target=50):\n    lst = [i for i in range(1, target+1)]\n    return lst\n\nassert f(g())\n", "emb": null, "idx_generation": 310, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int], n=100, target=50) -> bool:\n    \"\"\"Check if the sum of any two distinct elements in the list is equal to n.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == n:\n                return True\n    return False", "solution_func": "def g(n=100, target=50):\n    lst = [i for i in range(1, target+1)]\n    return lst", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(lst: List[int], n=100, target=50) -> bool:\n    \"\"\"Check if the sum of any two distinct elements in the list is equal to n.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == n:\n                return True\n    return False\n\ndef g(n=100, target=50):\n    lst = [i for i in range(1, target+1)]\n    return lst\n\nassert f(g())\n", "emb": null, "idx_generation": 310, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int], n=100, target=50) -> bool:\n    \"\"\"Check if the sum of any two distinct elements in the list is equal to n.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == n:\n                return True\n    return False", "solution_func": "def g(n=100, target=50):\n    lst = [i for i in range(1, target+1)]\n    return lst", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n=5, k=2) -> bool:\n    \"\"\"Check if the string s contains a substring of length k that consists of only lowercase letters and occurs exactly n times.\"\"\"\n    count = 0\n    for i in range(len(s)-k+1):\n        if s[i:i+k].islower():\n            count += 1\n    return count == n\n\ndef g(n=5, k=2):\n    s = \"aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ\" * n\n    return s\n\nassert f(g())\n", "emb": null, "idx_generation": 310, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=5, k=2) -> bool:\n    \"\"\"Check if the string s contains a substring of length k that consists of only lowercase letters and occurs exactly n times.\"\"\"\n    count = 0\n    for i in range(len(s)-k+1):\n        if s[i:i+k].islower():\n            count += 1\n    return count == n", "solution_func": "def g(n=5, k=2):\n    s = \"aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ\" * n\n    return s", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(x: float, r=4) -> bool:\n    \"\"\"Check if x is within a certain distance from a given radius\"\"\"\n    return abs(x) <= r\ndef g(r=4):\n    return math.fabs(r) * (-1 if r < 0 else 1)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 310, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, r=4) -> bool:\n    \"\"\"Check if x is within a certain distance from a given radius\"\"\"\n    return abs(x) <= r", "solution_func": "def g(r=4):\n    return math.fabs(r) * (-1 if r < 0 else 1)", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\n\ndef f(x: int, nums=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if x is included in a list of random numbers\"\"\"\n    return x in nums\ndef g(nums=[1, 2, 3, 4, 5]):\n    random.shuffle(nums)\n    return nums[0]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 310, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(x: int, nums=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if x is included in a list of random numbers\"\"\"\n    return x in nums", "solution_func": "def g(nums=[1, 2, 3, 4, 5]):\n    random.shuffle(nums)\n    return nums[0]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\nimport string\n\ndef f(s: str, chars=string.ascii_lowercase) -> bool:\n    \"\"\"Check if s starts with any character in a given list\"\"\"\n    return s[0] in chars\ndef g(chars=string.ascii_lowercase):\n    return random.choice(chars)\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 310, "target_skills": null, "problem_func": "import random\nfrom typing import*\nimport string\n\ndef f(s: str, chars=string.ascii_lowercase) -> bool:\n    \"\"\"Check if s starts with any character in a given list\"\"\"\n    return s[0] in chars", "solution_func": "def g(chars=string.ascii_lowercase):\n    return random.choice(chars)", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int, k=3) -> bool:\n    \"\"\"\n    Find k numbers in a given list that add up to the target number\n    \"\"\"\n    def find_combinations(nums, target, k, curr_combination):\n        if k == 0:\n            return sum(curr_combination) == target\n        if not nums or sum(curr_combination) + sum(nums[:k]) < target or sum(curr_combination) + nums[0] * k > target:\n            return False\n        return find_combinations(nums[1:], target, k, curr_combination) or find_combinations(nums[1:], target, k-1, curr_combination + [nums[0]])\n    \n    return find_combinations(nums, target, k, [])\n    \n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=18, k=3):\n    \"\"\"\n    Generate a list of k numbers that add up to the target number\n    \"\"\"\n    def find_combinations(nums, target, k, curr_combination):\n        if k == 0:\n            return curr_combination\n        for i in range(len(nums)):\n            if nums[i] > target:\n                continue\n            result = find_combinations(nums[i+1:], target-nums[i], k-1, curr_combination + [nums[i]])\n            if result:\n                return result\n        return None\n\n    return find_combinations(nums, target, k, [])\n    \nassert f(g()) == True\n", "emb": null, "idx_generation": 310, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int, k=3) -> bool:\n    \"\"\"\n    Find k numbers in a given list that add up to the target number\n    \"\"\"\n    def find_combinations(nums, target, k, curr_combination):\n        if k == 0:\n            return sum(curr_combination) == target\n        if not nums or sum(curr_combination) + sum(nums[:k]) < target or sum(curr_combination) + nums[0] * k > target:\n            return False\n        return find_combinations(nums[1:], target, k, curr_combination) or find_combinations(nums[1:], target, k-1, curr_combination + [nums[0]])\n    \n    return find_combinations(nums, target, k, [])", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=18, k=3):\n    \"\"\"\n    Generate a list of k numbers that add up to the target number\n    \"\"\"\n    def find_combinations(nums, target, k, curr_combination):\n        if k == 0:\n            return curr_combination\n        for i in range(len(nums)):\n            if nums[i] > target:\n                continue\n            result = find_combinations(nums[i+1:], target-nums[i], k-1, curr_combination + [nums[i]])\n            if result:\n                return result\n        return None\n\n    return find_combinations(nums, target, k, [])", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(result: bool, n=10, m=5) -> bool:\n    \"\"\"\n    Determine if the sum of the first n positive integers is divisible by m.\n    \"\"\"\n    return (n * (n + 1) // 2) % m == 0\ndef g(n=10, m=5):\n    return (n * (n + 1) // 2) % m == 0\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 311, "target_skills": null, "problem_func": "from typing import*\ndef f(result: bool, n=10, m=5) -> bool:\n    \"\"\"\n    Determine if the sum of the first n positive integers is divisible by m.\n    \"\"\"\n    return (n * (n + 1) // 2) % m == 0", "solution_func": "def g(n=10, m=5):\n    return (n * (n + 1) // 2) % m == 0", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(result: bool, word=\"Palindrome\") -> bool:\n    \"\"\"\n    Check if the given word is a palindrome (reads the same forwards and backwards).\n    \"\"\"\n    return word.lower() == word.lower()[::-1]\ndef g(word=\"Palindrome\"):\n    return word.lower() == word.lower()[::-1]\nassert f(g())\n", "emb": null, "idx_generation": 311, "target_skills": null, "problem_func": "from typing import*\ndef f(result: bool, word=\"Palindrome\") -> bool:\n    \"\"\"\n    Check if the given word is a palindrome (reads the same forwards and backwards).\n    \"\"\"\n    return word.lower() == word.lower()[::-1]", "solution_func": "def g(word=\"Palindrome\"):\n    return word.lower() == word.lower()[::-1]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(result: bool, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"\n    Check if the given list contains only even numbers.\n    \"\"\"\n    return all(x % 2 == 0 for x in lst)\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return all(x % 2 == 0 for x in lst)\nassert f(g())\n", "emb": null, "idx_generation": 311, "target_skills": null, "problem_func": "from typing import*\ndef f(result: bool, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"\n    Check if the given list contains only even numbers.\n    \"\"\"\n    return all(x % 2 == 0 for x in lst)", "solution_func": "def g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return all(x % 2 == 0 for x in lst)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target = 0) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target value, determine if the target value can be obtained by summing any\n    combination of numbers in the matrix. Each number can only be used once.\n\n    Sample Input:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    target = 15\n\n    Sample Output:\n    True\n    \"\"\"\n    def backtrack(row, col, curr_sum, visited):\n        if curr_sum == target:\n            return True\n        if curr_sum > target or row >= len(matrix) or col >= len(matrix[0]) or visited[row][col]:\n            return False\n        visited[row][col] = True\n        if backtrack(row+1, col, curr_sum+matrix[row][col], visited) or backtrack(row, col+1, curr_sum+matrix[row][col], visited):\n            return True\n        visited[row][col] = False\n        return False\n        \n    visited = [[False]*len(matrix[0]) for _ in range(len(matrix))]\n    return backtrack(0, 0, 0, visited)\ndef g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target = 15):\n    return matrix, target\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 311, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target = 0) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target value, determine if the target value can be obtained by summing any\n    combination of numbers in the matrix. Each number can only be used once.\n\n    Sample Input:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    target = 15\n\n    Sample Output:\n    True\n    \"\"\"\n    def backtrack(row, col, curr_sum, visited):\n        if curr_sum == target:\n            return True\n        if curr_sum > target or row >= len(matrix) or col >= len(matrix[0]) or visited[row][col]:\n            return False\n        visited[row][col] = True\n        if backtrack(row+1, col, curr_sum+matrix[row][col], visited) or backtrack(row, col+1, curr_sum+matrix[row][col], visited):\n            return True\n        visited[row][col] = False\n        return False\n        \n    visited = [[False]*len(matrix[0]) for _ in range(len(matrix))]\n    return backtrack(0, 0, 0, visited)", "solution_func": "def g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target = 15):\n    return matrix, target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, k: int, target = 'c') -> bool:\n    \"\"\"\n    Given a string s, find k number of non-overlapping occurrences of a target substring in s.\n\n    Sample Input:\n    s = \"abccbacccacad\"\n    k = 2\n    target = \"cc\"\n\n    Sample Output:\n    True\n    \"\"\"\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:].startswith(target):\n            count += 1\n            i += len(target)\n            if count == k:\n                return True\n        else:\n            i += 1\n    return False\ndef g(s = \"abccbacccacad\", k = 2, target = \"cc\"):\n    return s, k, target\nassert f(g())\n", "emb": null, "idx_generation": 311, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, k: int, target = 'c') -> bool:\n    \"\"\"\n    Given a string s, find k number of non-overlapping occurrences of a target substring in s.\n\n    Sample Input:\n    s = \"abccbacccacad\"\n    k = 2\n    target = \"cc\"\n\n    Sample Output:\n    True\n    \"\"\"\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:].startswith(target):\n            count += 1\n            i += len(target)\n            if count == k:\n                return True\n        else:\n            i += 1\n    return False", "solution_func": "def g(s = \"abccbacccacad\", k = 2, target = \"cc\"):\n    return s, k, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, m: int, k: int, target = 100) -> bool:\n    \"\"\"\n    Given three integers n, m, and k, find a combination of n, m, and k such that the sum is equal to the target value.\n\n    Sample Input:\n    n = 50\n    m = 30\n    k = 20\n    target = 100\n\n    Sample Output:\n    True\n    \"\"\"\n    return n + m + k == target\ndef g(n = 50, m = 30, k = 20, target = 100):\n    return n, m, k, target\nassert f(g())\n", "emb": null, "idx_generation": 311, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m: int, k: int, target = 100) -> bool:\n    \"\"\"\n    Given three integers n, m, and k, find a combination of n, m, and k such that the sum is equal to the target value.\n\n    Sample Input:\n    n = 50\n    m = 30\n    k = 20\n    target = 100\n\n    Sample Output:\n    True\n    \"\"\"\n    return n + m + k == target", "solution_func": "def g(n = 50, m = 30, k = 20, target = 100):\n    return n, m, k, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: str, s=['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], n=5) -> bool:\n    \"\"\"Check if the string x contains all the characters in s.\"\"\"\n    return all([c in x for c in s]) and len(x) == n\ndef g(s=['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], n=5):\n    return ''.join(s[:n])\nassert f(g())\n", "emb": null, "idx_generation": 311, "target_skills": null, "problem_func": "from typing import*\ndef f(x: str, s=['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], n=5) -> bool:\n    \"\"\"Check if the string x contains all the characters in s.\"\"\"\n    return all([c in x for c in s]) and len(x) == n", "solution_func": "def g(s=['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], n=5):\n    return ''.join(s[:n])", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: int, a=987654321, b=123456789) -> bool:\n    \"\"\"Check if the sum of x and a is divisible by b.\"\"\"\n    return (x + a) % b == 0\ndef g(a=987654321, b=123456789):\n    return b - a\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 311, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, a=987654321, b=123456789) -> bool:\n    \"\"\"Check if the sum of x and a is divisible by b.\"\"\"\n    return (x + a) % b == 0", "solution_func": "def g(a=987654321, b=123456789):\n    return b - a", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=2.5, b=4.8) -> bool:\n    \"\"\"Check if x is within the range [a, b].\"\"\"\n    return a <= x <= b\ndef g(a=2.5, b=4.8):\n    return math.sqrt(a * b)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 311, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, a=2.5, b=4.8) -> bool:\n    \"\"\"Check if x is within the range [a, b].\"\"\"\n    return a <= x <= b", "solution_func": "def g(a=2.5, b=4.8):\n    return math.sqrt(a * b)", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10, k=3) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a combination of k numbers in the list that add up to the target value.\n    \"\"\"\n    def helper(nums, target, k, start, path, res):\n        if k == 0 and target == 0:\n            res.append(path)\n            return\n        if k == 0 or target < 0:\n            return\n        for i in range(start, len(nums)):\n            helper(nums, target - nums[i], k - 1, i + 1, path + [nums[i]], res)\n\n    res = []\n    helper(nums, target, k, 0, [], res)\n    return len(res) > 0\n\ndef g(nums=[1, 2, 3, 4, 5], target=10, k=3):\n    from itertools import combinations\n    for combination in combinations(nums, k):\n        if sum(combination) == target:\n            return True\n    return False\n\nassert f(g())\n", "emb": null, "idx_generation": 311, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10, k=3) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a combination of k numbers in the list that add up to the target value.\n    \"\"\"\n    def helper(nums, target, k, start, path, res):\n        if k == 0 and target == 0:\n            res.append(path)\n            return\n        if k == 0 or target < 0:\n            return\n        for i in range(start, len(nums)):\n            helper(nums, target - nums[i], k - 1, i + 1, path + [nums[i]], res)\n\n    res = []\n    helper(nums, target, k, 0, [], res)\n    return len(res) > 0", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=10, k=3):\n    from itertools import combinations\n    for combination in combinations(nums, k):\n        if sum(combination) == target:\n            return True\n    return False", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target: int) -> bool:\n    \"\"\"Check if the sum of any two elements in an array is equal to the target.\"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target: int) -> np.ndarray:\n    \"\"\"Generate an array of random integers.\"\"\"\n    arr = np.random.randint(1, 100, size=10)\n    return arr\n\nassert f(g(), target=100)\n", "emb": null, "idx_generation": 312, "target_skills": null, "problem_func": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target: int) -> bool:\n    \"\"\"Check if the sum of any two elements in an array is equal to the target.\"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g(target: int) -> np.ndarray:\n    \"\"\"Generate an array of random integers.\"\"\"\n    arr = np.random.randint(1, 100, size=10)\n    return arr", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport pandas as pd\n\ndef f(df: pd.DataFrame, column: str) -> bool:\n    \"\"\"Check if the column in a DataFrame contains only unique values.\"\"\"\n    return df[column].nunique() == len(df)\n\ndef g(column: str) -> pd.DataFrame:\n    \"\"\"Generate a DataFrame with a column containing repeated values.\"\"\"\n    data = {'A': [1, 2, 3, 4, 5], 'B': [1, 2, 2, 3, 3]}\n    df = pd.DataFrame(data)\n    return df\n\nassert f(g(column='B'), column='B')\n", "emb": null, "idx_generation": 312, "target_skills": null, "problem_func": "from typing import*\nimport pandas as pd\n\ndef f(df: pd.DataFrame, column: str) -> bool:\n    \"\"\"Check if the column in a DataFrame contains only unique values.\"\"\"\n    return df[column].nunique() == len(df)", "solution_func": "def g(column: str) -> pd.DataFrame:\n    \"\"\"Generate a DataFrame with a column containing repeated values.\"\"\"\n    data = {'A': [1, 2, 3, 4, 5], 'B': [1, 2, 2, 3, 3]}\n    df = pd.DataFrame(data)\n    return df", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport re\n\ndef f(s: str, pattern: str) -> bool:\n    \"\"\"Check if the pattern matches the entire string.\"\"\"\n    return re.fullmatch(pattern, s) is not None\n\ndef g(pattern: str) -> str:\n    \"\"\"Generate a string that matches the pattern.\"\"\"\n    match = re.match(pattern, \"abcdefg\")\n    if match:\n        return match.group()\n    else:\n        return \"\"\n\nassert f(g(pattern='[a-z]+'), pattern='[a-z]+')\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 312, "target_skills": null, "problem_func": "from typing import*\nimport re\n\ndef f(s: str, pattern: str) -> bool:\n    \"\"\"Check if the pattern matches the entire string.\"\"\"\n    return re.fullmatch(pattern, s) is not None", "solution_func": "def g(pattern: str) -> str:\n    \"\"\"Generate a string that matches the pattern.\"\"\"\n    match = re.match(pattern, \"abcdefg\")\n    if match:\n        return match.group()\n    else:\n        return \"\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(n: int, nums=[3, 5, 7]) -> bool:\n    \"\"\"Check if a number is divisible by all the numbers in a list.\"\"\"\n    return all(n % i == 0 for i in nums)\ndef g(nums=[3, 5, 7]):\n    lcm = 1\n    for i in nums:\n        lcm = lcm * i // math.gcd(lcm, i)\n    return lcm\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 312, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, nums=[3, 5, 7]) -> bool:\n    \"\"\"Check if a number is divisible by all the numbers in a list.\"\"\"\n    return all(n % i == 0 for i in nums)", "solution_func": "def g(nums=[3, 5, 7]):\n    lcm = 1\n    for i in nums:\n        lcm = lcm * i // math.gcd(lcm, i)\n    return lcm", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"Check if a given substring is in a string.\"\"\"\n    return target in s\ndef g(target='python'):\n    return 'I love ' + target\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 312, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"Check if a given substring is in a string.\"\"\"\n    return target in s", "solution_func": "def g(target='python'):\n    return 'I love ' + target", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=1000) -> bool:\n    \"\"\"Find two numbers in a list that add up to a target number.\"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\ndef g():\n    return [1000, 500, 200, 300, 700]\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 312, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=1000) -> bool:\n    \"\"\"Find two numbers in a list that add up to a target number.\"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g():\n    return [1000, 500, 200, 300, 700]", "map_ix": [1, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, target: str, n: int) -> bool:\n    \"\"\"Check if a given string contains a target subsequence of length n.\"\"\"\n    return target in [s[i:i+n] for i in range(len(s)-n+1)]\ndef g(target: str, n: int):\n    return target * n\nassert f(g())\n", "emb": null, "idx_generation": 312, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target: str, n: int) -> bool:\n    \"\"\"Check if a given string contains a target subsequence of length n.\"\"\"\n    return target in [s[i:i+n] for i in range(len(s)-n+1)]", "solution_func": "def g(target: str, n: int):\n    return target * n", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(s: str, target: str) -> bool:\n    \"\"\"Check if a given string can be rearranged into a target string.\"\"\"\n    perms = [''.join(p) for p in permutations(s)]\n    return target in perms\ndef g(target: str):\n    return ''.join(sorted(target))\nassert f(g())\n", "emb": null, "idx_generation": 312, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(s: str, target: str) -> bool:\n    \"\"\"Check if a given string can be rearranged into a target string.\"\"\"\n    perms = [''.join(p) for p in permutations(s)]\n    return target in perms", "solution_func": "def g(target: str):\n    return ''.join(sorted(target))", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, target: str) -> bool:\n    \"\"\"Check if a given string can be rearranged into a target string.\"\"\"\n    return sorted(s) == sorted(target)\ndef g(target: str):\n    return target\nassert f(g())\n", "emb": null, "idx_generation": 312, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target: str) -> bool:\n    \"\"\"Check if a given string can be rearranged into a target string.\"\"\"\n    return sorted(s) == sorted(target)", "solution_func": "def g(target: str):\n    return target", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom datetime import datetime\ndef f(d: datetime, n=datetime(2022, 1, 1)) -> bool:\n    \"\"\"\n    Check if the given datetime is after n.\n    \"\"\"\n    return d > n\ndef g(n=datetime(2022, 1, 1)):\n    return datetime(2022, 1, 2)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 312, "target_skills": null, "problem_func": "from typing import*\nfrom datetime import datetime\ndef f(d: datetime, n=datetime(2022, 1, 1)) -> bool:\n    \"\"\"\n    Check if the given datetime is after n.\n    \"\"\"\n    return d > n", "solution_func": "def g(n=datetime(2022, 1, 1)):\n    return datetime(2022, 1, 2)", "map_ix": [0, 0, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Find n such that n is the sum of two distinct numbers in the given list.\"\"\"\n    return any(nums[i] + nums[j] == n for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums[0] + nums[1]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 313, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Find n such that n is the sum of two distinct numbers in the given list.\"\"\"\n    return any(nums[i] + nums[j] == n for i in range(len(nums)) for j in range(i+1, len(nums)))", "solution_func": "def g(nums=[1, 2, 3, 4, 5]):\n    return nums[0] + nums[1]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, lst=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Find n such that n is the index of the first word in the given list that starts with a vowel.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return any(lst[i][0].lower() in vowels for i in range(len(lst)))\ndef g(lst=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return next(i for i in range(len(lst)) if lst[i][0].lower() in 'aeiou')\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 313, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Find n such that n is the index of the first word in the given list that starts with a vowel.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return any(lst[i][0].lower() in vowels for i in range(len(lst)))", "solution_func": "def g(lst=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return next(i for i in range(len(lst)) if lst[i][0].lower() in 'aeiou')", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, s='Hello, World!') -> bool:\n    \"\"\"Find n such that n is the number of occurrences of the letter 'l' in the given string.\"\"\"\n    return s.count('l') == n\ndef g(s='Hello, World!'):\n    return s.count('l')\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 313, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, s='Hello, World!') -> bool:\n    \"\"\"Find n such that n is the number of occurrences of the letter 'l' in the given string.\"\"\"\n    return s.count('l') == n", "solution_func": "def g(s='Hello, World!'):\n    return s.count('l')", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\n\ndef f(x: list, y: int, z: int, target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target\"\"\"\n    for i in range(y):\n        for j in range(z):\n            if x[i] + x[j] == target:\n                return True\n    return False\n\ndef g(y: int, z: int, target: int):\n    random.seed(42)\n    x = [random.randint(1, 10) for _ in range(y+z)]\n    return x\n\nassert f(g(y=5, z=5, target=10), y=5, z=5, target=10)\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 313, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(x: list, y: int, z: int, target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target\"\"\"\n    for i in range(y):\n        for j in range(z):\n            if x[i] + x[j] == target:\n                return True\n    return False", "solution_func": "def g(y: int, z: int, target: int):\n    random.seed(42)\n    x = [random.randint(1, 10) for _ in range(y+z)]\n    return x", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, char: str) -> bool:\n    \"\"\"Check if the character is the first character in the string\"\"\"\n    return s[0] == char\n\ndef g(char: str):\n    return char + 'abcde'\n\nassert f(g(char='a'), char='a')\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 313, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, char: str) -> bool:\n    \"\"\"Check if the character is the first character in the string\"\"\"\n    return s[0] == char", "solution_func": "def g(char: str):\n    return char + 'abcde'", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(nums: list, target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g():\n    nums = [1, 2, 3, 4, 5]\n    target = random.randint(1, 10)\n    return nums, target\n\nassert f(*g())\n", "emb": null, "idx_generation": 313, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(nums: list, target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g():\n    nums = [1, 2, 3, 4, 5]\n    target = random.randint(1, 10)\n    return nums, target", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers, return True if there exists a pair of numbers such that their sum is equal to the target.\n\n    Sample Input:\n    [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, target - 1]\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 313, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers, return True if there exists a pair of numbers such that their sum is equal to the target.\n\n    Sample Input:\n    [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, target - 1]", "map_ix": [1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"\n    Given a matrix of integers, return True if there exists a row or column whose sum is equal to the target.\n\n    Sample Input:\n    [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n\n    Sample Output:\n    True\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    return target in row_sums or target in col_sums\n\ndef g(target=20):\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, target - 12, 9]\n    ]\n\nassert f(g())\n", "emb": null, "idx_generation": 313, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"\n    Given a matrix of integers, return True if there exists a row or column whose sum is equal to the target.\n\n    Sample Input:\n    [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n\n    Sample Output:\n    True\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    return target in row_sums or target in col_sums", "solution_func": "def g(target=20):\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, target - 12, 9]\n    ]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"\n    Given a list of integers, return True if there exists three numbers such that their sum is equal to the target.\n\n    Sample Input:\n    [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    nums.sort()\n    n = len(nums)\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = nums[i] + nums[left] + nums[right]\n            if current_sum == target:\n                return True\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False\n\ndef g(target=5):\n    return [1, 1, target - 2, 1, 1]\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 313, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"\n    Given a list of integers, return True if there exists three numbers such that their sum is equal to the target.\n\n    Sample Input:\n    [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    nums.sort()\n    n = len(nums)\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = nums[i] + nums[left] + nums[right]\n            if current_sum == target:\n                return True\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False", "solution_func": "def g(target=5):\n    return [1, 1, target - 2, 1, 1]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=3, target='hello') -> bool:\n    \"\"\"\n    Count the number of occurrences of a target substring in a given string.\n    - s is the given string\n    - n is the number of occurrences to count\n    - target is the substring to search for\n    \"\"\"\n    return s.count(target) == n\ndef g(n = 3, target = 'hello'):\n    return 'hello world ' * n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 313, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=3, target='hello') -> bool:\n    \"\"\"\n    Count the number of occurrences of a target substring in a given string.\n    - s is the given string\n    - n is the number of occurrences to count\n    - target is the substring to search for\n    \"\"\"\n    return s.count(target) == n", "solution_func": "def g(n = 3, target = 'hello'):\n    return 'hello world ' * n", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, a=['apple', 'banana', 'cherry'], b=['date', 'elderberry', 'fig']) -> bool:\n    \"\"\"Find an item that is in both lists a and b\"\"\"\n    return s in a and s in b\ndef g(a = ['apple', 'banana', 'cherry'], b = ['date', 'elderberry', 'fig']):\n    return next(s for s in b if s in a)\nassert f(g())\n", "emb": null, "idx_generation": 314, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, a=['apple', 'banana', 'cherry'], b=['date', 'elderberry', 'fig']) -> bool:\n    \"\"\"Find an item that is in both lists a and b\"\"\"\n    return s in a and s in b", "solution_func": "def g(a = ['apple', 'banana', 'cherry'], b = ['date', 'elderberry', 'fig']):\n    return next(s for s in b if s in a)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\n\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the given number is in the list\"\"\"\n    return n in lst\n\ndef g(lst=[1, 2, 3, 4, 5]):\n    return random.choice(lst)\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 314, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the given number is in the list\"\"\"\n    return n in lst", "solution_func": "def g(lst=[1, 2, 3, 4, 5]):\n    return random.choice(lst)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=36) -> bool:\n    \"\"\"Check if the given number is a perfect square of a\"\"\"\n    return n == math.isqrt(a)\n\ndef g(a=36):\n    return a ** 2\n\nassert f(g())\n", "emb": null, "idx_generation": 314, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, a=36) -> bool:\n    \"\"\"Check if the given number is a perfect square of a\"\"\"\n    return n == math.isqrt(a)", "solution_func": "def g(a=36):\n    return a ** 2", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a subset of nums that sums up to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n    return dp[n][target]\n\ndef g(nums = [1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == False\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 314, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a subset of nums that sums up to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n    return dp[n][target]", "solution_func": "def g(nums = [1, 2, 3, 4, 5]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, k=3) -> bool:\n    \"\"\"Check if there exists a combination of k numbers from 1 to n that sum up to n.\"\"\"\n    if n < k:\n        return False\n    if k == 1:\n        return True\n    if k == 2:\n        return n % 2 == 0\n\n    dp = [[False] * (n + 1) for _ in range(k + 1)]\n    dp[0][0] = True\n\n    for i in range(1, k + 1):\n        for j in range(1, n + 1):\n            if j >= i:\n                dp[i][j] = dp[i - 1][j - i] or dp[i][j - 1]\n            else:\n                dp[i][j] = dp[i][j - 1]\n\n    return dp[k][n]\n\ndef g(n = 10):\n    return n\n\nassert f(g()) == True\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 314, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, k=3) -> bool:\n    \"\"\"Check if there exists a combination of k numbers from 1 to n that sum up to n.\"\"\"\n    if n < k:\n        return False\n    if k == 1:\n        return True\n    if k == 2:\n        return n % 2 == 0\n\n    dp = [[False] * (n + 1) for _ in range(k + 1)]\n    dp[0][0] = True\n\n    for i in range(1, k + 1):\n        for j in range(1, n + 1):\n            if j >= i:\n                dp[i][j] = dp[i - 1][j - i] or dp[i][j - 1]\n            else:\n                dp[i][j] = dp[i][j - 1]\n\n    return dp[k][n]", "solution_func": "def g(n = 10):\n    return n", "map_ix": [0, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"Check if there are k consecutive digits in s that form an arithmetic sequence.\"\"\"\n    if len(s) < k:\n        return False\n\n    for i in range(len(s) - k + 1):\n        diff = int(s[i + 1]) - int(s[i])\n        for j in range(i + 2, i + k):\n            if int(s[j]) - int(s[j - 1]) != diff:\n                break\n        else:\n            return True\n\n    return False\n\ndef g(s = \"123456789\"):\n    return s\n\nassert f(g()) == True\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 314, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"Check if there are k consecutive digits in s that form an arithmetic sequence.\"\"\"\n    if len(s) < k:\n        return False\n\n    for i in range(len(s) - k + 1):\n        diff = int(s[i + 1]) - int(s[i])\n        for j in range(i + 2, i + k):\n            if int(s[j]) - int(s[j - 1]) != diff:\n                break\n        else:\n            return True\n\n    return False", "solution_func": "def g(s = \"123456789\"):\n    return s", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\n\ndef f(num_list: List[int], target: int) -> bool:\n    \"\"\"Check if the target number is in the list.\"\"\"\n    return target in num_list\n\ndef g(size: int = 10, target: int = 5):\n    \"\"\"Generate a list of random numbers.\"\"\"\n    num_list = []\n    for _ in range(size):\n        num_list.append(random.randint(1, 10))\n    return num_list, target\n\nassert f(*g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 314, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(num_list: List[int], target: int) -> bool:\n    \"\"\"Check if the target number is in the list.\"\"\"\n    return target in num_list", "solution_func": "def g(size: int = 10, target: int = 5):\n    \"\"\"Generate a list of random numbers.\"\"\"\n    num_list = []\n    for _ in range(size):\n        num_list.append(random.randint(1, 10))\n    return num_list, target", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the string is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g(s: str = \"racecar\"):\n    \"\"\"Reverse the string.\"\"\"\n    return s[::-1]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 314, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the string is a palindrome.\"\"\"\n    return s == s[::-1]", "solution_func": "def g(s: str = \"racecar\"):\n    \"\"\"Reverse the string.\"\"\"\n    return s[::-1]", "map_ix": [0, 0, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if the target number is a sum of any two numbers in the list.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    \"\"\"Generate a list of numbers and a target number.\"\"\"\n    return nums, target\n\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 314, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if the target number is a sum of any two numbers in the list.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    \"\"\"Generate a list of numbers and a target number.\"\"\"\n    return nums, target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, a=100, b=1000) -> bool:\n    \"\"\"Find a number that is divisible by n\"\"\"\n    return a % n == 0 and b % n == 0\ndef g(a=100, b=1000):\n    return a * b\nassert f(g())\n", "emb": null, "idx_generation": 314, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=100, b=1000) -> bool:\n    \"\"\"Find a number that is divisible by n\"\"\"\n    return a % n == 0 and b % n == 0", "solution_func": "def g(a=100, b=1000):\n    return a * b", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"\n    Find a combination of numbers from the given list that adds up to the target value.\n\n    Sample input:\n    [1, 2, 3, 4, 5]\n\n    Sample output:\n    [2, 3, 5]\n\n    Explanation: The numbers 2, 3, and 5 add up to the target value of 10.\n    \"\"\"\n    return sum(nums) == target\ndef g(nums = [1, 2, 3, 4, 5], target = 100):\n    from itertools import combinations\n    for r in range(1, len(nums) + 1):\n        for combo in combinations(nums, r):\n            if sum(combo) == target:\n                return list(combo)\n    return []\nassert f(g())\n", "emb": null, "idx_generation": 315, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"\n    Find a combination of numbers from the given list that adds up to the target value.\n\n    Sample input:\n    [1, 2, 3, 4, 5]\n\n    Sample output:\n    [2, 3, 5]\n\n    Explanation: The numbers 2, 3, and 5 add up to the target value of 10.\n    \"\"\"\n    return sum(nums) == target", "solution_func": "def g(nums = [1, 2, 3, 4, 5], target = 100):\n    from itertools import combinations\n    for r in range(1, len(nums) + 1):\n        for combo in combinations(nums, r):\n            if sum(combo) == target:\n                return list(combo)\n    return []", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Find a path in the given matrix that adds up to the target sum. The path can move in any direction (up, down, left, right)\n    but cannot visit the same cell more than once.\n\n    Sample input:\n    [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n\n    Sample output:\n    [1, 4, 7]\n\n    Explanation: The path starts at the top-left corner (1), moves down (4), and then moves down again (7), resulting in a sum of 12.\n    \"\"\"\n    def dfs(i, j, curr_sum, visited):\n        if i < 0 or i >= len(matrix) or j < 0 or j >= len(matrix[0]) or (i, j) in visited:\n            return False\n        curr_sum += matrix[i][j]\n        if curr_sum == target:\n            return True\n        visited.add((i, j))\n        if dfs(i - 1, j, curr_sum, visited) or dfs(i + 1, j, curr_sum, visited) or dfs(i, j - 1, curr_sum, visited) or dfs(i, j + 1, curr_sum, visited):\n            return True\n        visited.remove((i, j))\n        return False\n\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if dfs(i, j, 0, set()):\n                return True\n    return False\ndef g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target = 0):\n    return f(matrix, target)\nassert g() == f(g())\n\nassert f(g()) == True", "emb": null, "idx_generation": 315, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Find a path in the given matrix that adds up to the target sum. The path can move in any direction (up, down, left, right)\n    but cannot visit the same cell more than once.\n\n    Sample input:\n    [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n\n    Sample output:\n    [1, 4, 7]\n\n    Explanation: The path starts at the top-left corner (1), moves down (4), and then moves down again (7), resulting in a sum of 12.\n    \"\"\"\n    def dfs(i, j, curr_sum, visited):\n        if i < 0 or i >= len(matrix) or j < 0 or j >= len(matrix[0]) or (i, j) in visited:\n            return False\n        curr_sum += matrix[i][j]\n        if curr_sum == target:\n            return True\n        visited.add((i, j))\n        if dfs(i - 1, j, curr_sum, visited) or dfs(i + 1, j, curr_sum, visited) or dfs(i, j - 1, curr_sum, visited) or dfs(i, j + 1, curr_sum, visited):\n            return True\n        visited.remove((i, j))\n        return False\n\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if dfs(i, j, 0, set()):\n                return True\n    return False", "solution_func": "def g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target = 0):\n    return f(matrix, target)", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(n: int, k: int, target=100) -> bool:\n    \"\"\"\n    Find a combination of k numbers from 1 to n (inclusive) that adds up to the target value.\n\n    Sample input:\n    n = 10\n    k = 3\n\n    Sample output:\n    [1, 3, 6]\n\n    Explanation: The numbers 1, 3, and 6 add up to the target value of 10.\n    \"\"\"\n    return sum(range(1, n+1)) == target\ndef g(n = 10, k = 3, target = 100):\n    from itertools import combinations\n    for combo in combinations(range(1, n+1), k):\n        if sum(combo) == target:\n            return list(combo)\n    return []\nassert f(g())\n", "emb": null, "idx_generation": 315, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(n: int, k: int, target=100) -> bool:\n    \"\"\"\n    Find a combination of k numbers from 1 to n (inclusive) that adds up to the target value.\n\n    Sample input:\n    n = 10\n    k = 3\n\n    Sample output:\n    [1, 3, 6]\n\n    Explanation: The numbers 1, 3, and 6 add up to the target value of 10.\n    \"\"\"\n    return sum(range(1, n+1)) == target", "solution_func": "def g(n = 10, k = 3, target = 100):\n    from itertools import combinations\n    for combo in combinations(range(1, n+1), k):\n        if sum(combo) == target:\n            return list(combo)\n    return []", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Find a pair of numbers that add up to the target_sum.\"\"\"\n    return any((numbers[i] + numbers[j] == target_sum for i in range(len(numbers)) for j in range(i+1, len(numbers))))\ndef g(numbers=[10, 20, 30, 40, 50, 60, 70, 80, 90]):\n    return numbers\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 315, "target_skills": null, "problem_func": "from typing import*\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Find a pair of numbers that add up to the target_sum.\"\"\"\n    return any((numbers[i] + numbers[j] == target_sum for i in range(len(numbers)) for j in range(i+1, len(numbers))))", "solution_func": "def g(numbers=[10, 20, 30, 40, 50, 60, 70, 80, 90]):\n    return numbers", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(words: List[str], target_word='python') -> bool:\n    \"\"\"Find a word that is a permutation of the target_word.\"\"\"\n    return any((sorted(word) == sorted(target_word) for word in words))\ndef g(words=['typhon', 'nohtyp', 'python', 'onhtyp']):\n    return words\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 315, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], target_word='python') -> bool:\n    \"\"\"Find a word that is a permutation of the target_word.\"\"\"\n    return any((sorted(word) == sorted(target_word) for word in words))", "solution_func": "def g(words=['typhon', 'nohtyp', 'python', 'onhtyp']):\n    return words", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_row_sum=15) -> bool:\n    \"\"\"Find a row in the matrix that has a sum equal to the target_row_sum.\"\"\"\n    return any((sum(row) == target_row_sum for row in matrix))\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 315, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_row_sum=15) -> bool:\n    \"\"\"Find a row in the matrix that has a sum equal to the target_row_sum.\"\"\"\n    return any((sum(row) == target_row_sum for row in matrix))", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [1, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"\n    Check if it is possible to form the target word using a combination of the given words.\n    Each word can only be used once.\n    \"\"\"\n    def helper(words, target):\n        if target == '':\n            return True\n        for i in range(len(words)):\n            if words[i] != '' and words[i][0] == target[0]:\n                if helper(words[:i] + words[i+1:], target[1:]):\n                    return True\n        return False\n    return helper(words, target)\ndef g(words=['py', 'on', 'th', 'python']):\n    return words\nassert f(g())\n", "emb": null, "idx_generation": 315, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"\n    Check if it is possible to form the target word using a combination of the given words.\n    Each word can only be used once.\n    \"\"\"\n    def helper(words, target):\n        if target == '':\n            return True\n        for i in range(len(words)):\n            if words[i] != '' and words[i][0] == target[0]:\n                if helper(words[:i] + words[i+1:], target[1:]):\n                    return True\n        return False\n    return helper(words, target)", "solution_func": "def g(words=['py', 'on', 'th', 'python']):\n    return words", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"\n    Check if it is possible to form the target number using a combination of the given numbers.\n    Each number can only be used once.\n    \"\"\"\n    def helper(numbers, target):\n        if target == 0:\n            return True\n        for i in range(len(numbers)):\n            if helper(numbers[:i] + numbers[i+1:], target - numbers[i]):\n                return True\n        return False\n    return helper(numbers, target)\ndef g(numbers=[1, 2, 3, 4, 5]):\n    return numbers\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 315, "target_skills": null, "problem_func": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"\n    Check if it is possible to form the target number using a combination of the given numbers.\n    Each number can only be used once.\n    \"\"\"\n    def helper(numbers, target):\n        if target == 0:\n            return True\n        for i in range(len(numbers)):\n            if helper(numbers[:i] + numbers[i+1:], target - numbers[i]):\n                return True\n        return False\n    return helper(numbers, target)", "solution_func": "def g(numbers=[1, 2, 3, 4, 5]):\n    return numbers", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"\n    Check if it is possible to form the target number using a combination of numbers from the matrix.\n    Each number can only be used once and numbers can be selected from adjacent cells (horizontally or vertically).\n    \"\"\"\n    def helper(matrix, target, visited, row, col):\n        if target == 0:\n            return True\n        if row < 0 or row >= len(matrix) or col < 0 or col >= len(matrix[0]) or visited[row][col]:\n            return False\n        if matrix[row][col] == target:\n            return True\n        visited[row][col] = True\n        if helper(matrix, target - matrix[row][col], visited, row+1, col) or \\\n           helper(matrix, target - matrix[row][col], visited, row-1, col) or \\\n           helper(matrix, target - matrix[row][col], visited, row, col+1) or \\\n           helper(matrix, target - matrix[row][col], visited, row, col-1):\n            return True\n        visited[row][col] = False\n        return False\n    rows = len(matrix)\n    cols = len(matrix[0])\n    visited = [[False for _ in range(cols)] for _ in range(rows)]\n    for i in range(rows):\n        for j in range(cols):\n            if helper(matrix, target, visited, i, j):\n                return True\n    return False\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\nassert f(g())\n", "emb": [1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 315, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"\n    Check if it is possible to form the target number using a combination of numbers from the matrix.\n    Each number can only be used once and numbers can be selected from adjacent cells (horizontally or vertically).\n    \"\"\"\n    def helper(matrix, target, visited, row, col):\n        if target == 0:\n            return True\n        if row < 0 or row >= len(matrix) or col < 0 or col >= len(matrix[0]) or visited[row][col]:\n            return False\n        if matrix[row][col] == target:\n            return True\n        visited[row][col] = True\n        if helper(matrix, target - matrix[row][col], visited, row+1, col) or \\\n           helper(matrix, target - matrix[row][col], visited, row-1, col) or \\\n           helper(matrix, target - matrix[row][col], visited, row, col+1) or \\\n           helper(matrix, target - matrix[row][col], visited, row, col-1):\n            return True\n        visited[row][col] = False\n        return False\n    rows = len(matrix)\n    cols = len(matrix[0])\n    visited = [[False for _ in range(cols)] for _ in range(rows)]\n    for i in range(rows):\n        for j in range(cols):\n            if helper(matrix, target, visited, i, j):\n                return True\n    return False", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [1, 0, 1, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=3) -> bool:\n    \"\"\"Check if there are three numbers in the list that sum up to the target\"\"\"\n    return any(sum(combination) == target for combination in combinations(nums, 3))\ndef g(target=3):\n    return [1, 2, target - 3, 4, 5]\nassert f(g())\n", "emb": null, "idx_generation": 315, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=3) -> bool:\n    \"\"\"Check if there are three numbers in the list that sum up to the target\"\"\"\n    return any(sum(combination) == target for combination in combinations(nums, 3))", "solution_func": "def g(target=3):\n    return [1, 2, target - 3, 4, 5]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\ndef f(n: int, a=5, b=10) -> bool:\n    \"\"\"Check if n is a perfect square within the range of a and b (inclusive)\"\"\"\n    return math.isqrt(n) ** 2 == n and a <= n <= b\ndef g(a=5, b=10):\n    for n in range(a, b+1):\n        if math.isqrt(n) ** 2 == n:\n            return n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 316, "target_skills": null, "problem_func": "from typing import*\nimport math\ndef f(n: int, a=5, b=10) -> bool:\n    \"\"\"Check if n is a perfect square within the range of a and b (inclusive)\"\"\"\n    return math.isqrt(n) ** 2 == n and a <= n <= b", "solution_func": "def g(a=5, b=10):\n    for n in range(a, b+1):\n        if math.isqrt(n) ** 2 == n:\n            return n", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\ndef f(n: int, a=5, b=10) -> bool:\n    \"\"\"Check if n is prime and within the range of a and b (inclusive)\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return a <= n <= b\ndef g(a=5, b=10):\n    primes = [i for i in range(a, b+1) if all(i % j != 0 for j in range(2, int(i ** 0.5) + 1))]\n    return random.choice(primes)\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 316, "target_skills": null, "problem_func": "from typing import*\nimport random\ndef f(n: int, a=5, b=10) -> bool:\n    \"\"\"Check if n is prime and within the range of a and b (inclusive)\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return a <= n <= b", "solution_func": "def g(a=5, b=10):\n    primes = [i for i in range(a, b+1) if all(i % j != 0 for j in range(2, int(i ** 0.5) + 1))]\n    return random.choice(primes)", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=5, b=10, c=7) -> bool:\n    \"\"\"Check if n is divisible by a and b, and is greater than c\"\"\"\n    return n % a == 0 and n % b == 0 and n > c\ndef g(a=5, b=10, c=7):\n    n = c\n    while True:\n        n += 1\n        if n % a == 0 and n % b == 0:\n            return n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 316, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=5, b=10, c=7) -> bool:\n    \"\"\"Check if n is divisible by a and b, and is greater than c\"\"\"\n    return n % a == 0 and n % b == 0 and n > c", "solution_func": "def g(a=5, b=10, c=7):\n    n = c\n    while True:\n        n += 1\n        if n % a == 0 and n % b == 0:\n            return n", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(li: List[int], target: int) -> bool:\n    \"\"\"Check if there are two elements in the list that sum up to the target value.\"\"\"\n    return any((li[i] + li[j] == target for i in range(len(li)) for j in range(i+1, len(li))))\ndef g(target: int):\n    return [1, 2, 3, 4, 5, 6]\nassert f(g(), target=10)\n", "emb": null, "idx_generation": 316, "target_skills": null, "problem_func": "from typing import*\ndef f(li: List[int], target: int) -> bool:\n    \"\"\"Check if there are two elements in the list that sum up to the target value.\"\"\"\n    return any((li[i] + li[j] == target for i in range(len(li)) for j in range(i+1, len(li))))", "solution_func": "def g(target: int):\n    return [1, 2, 3, 4, 5, 6]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, li: List[int]) -> bool:\n    \"\"\"Check if the product of all elements in the list is divisible by n.\"\"\"\n    return n != 0 and all((x % n == 0 for x in li))\ndef g(li: List[int]):\n    return li + [0]\nassert f(g([1, 2, 3, 4, 5]))\n", "emb": null, "idx_generation": 316, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, li: List[int]) -> bool:\n    \"\"\"Check if the product of all elements in the list is divisible by n.\"\"\"\n    return n != 0 and all((x % n == 0 for x in li))", "solution_func": "def g(li: List[int]):\n    return li + [0]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, m: int, li: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of elements in the list such that their product is divisible by both n and m.\"\"\"\n    return any(((li[i] * li[j]) % n == 0 and (li[i] * li[j]) % m == 0 for i in range(len(li)) for j in range(i+1, len(li))))\ndef g(li: List[int]):\n    return li + [0, 0]\nassert f(g([1, 2, 3, 4, 5]), n=2, m=3)\n", "emb": null, "idx_generation": 316, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m: int, li: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of elements in the list such that their product is divisible by both n and m.\"\"\"\n    return any(((li[i] * li[j]) % n == 0 and (li[i] * li[j]) % m == 0 for i in range(len(li)) for j in range(i+1, len(li))))", "solution_func": "def g(li: List[int]):\n    return li + [0, 0]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: List[int], k: int, n: int) -> bool:\n    \"\"\"\n    Given a list of integers x and two integers k and n, determine if there exists\n    a sublist of length k in x such that the sum of its elements is equal to n.\n    \"\"\"\n    for i in range(len(x)-k+1):\n        if sum(x[i:i+k]) == n:\n            return True\n    return False\n\ndef g(k=3, n=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), k=3, n=10)\n", "emb": null, "idx_generation": 316, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], k: int, n: int) -> bool:\n    \"\"\"\n    Given a list of integers x and two integers k and n, determine if there exists\n    a sublist of length k in x such that the sum of its elements is equal to n.\n    \"\"\"\n    for i in range(len(x)-k+1):\n        if sum(x[i:i+k]) == n:\n            return True\n    return False", "solution_func": "def g(k=3, n=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"\n    Given a string s and an integer n, determine if there exists a substring of length n\n    in s that contains only unique characters.\n    \"\"\"\n    for i in range(len(s)-n+1):\n        if len(set(s[i:i+n])) == n:\n            return True\n    return False\n\ndef g(n=4):\n    return \"pythonprogramming\"\n\nassert f(g(), n=4)\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 316, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"\n    Given a string s and an integer n, determine if there exists a substring of length n\n    in s that contains only unique characters.\n    \"\"\"\n    for i in range(len(s)-n+1):\n        if len(set(s[i:i+n])) == n:\n            return True\n    return False", "solution_func": "def g(n=4):\n    return \"pythonprogramming\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers arr and an integer k, determine if there exists two distinct\n    indices i and j such that arr[i] + arr[j] = k.\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if k - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(k=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), k=10)\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 316, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers arr and an integer k, determine if there exists two distinct\n    indices i and j such that arr[i] + arr[j] = k.\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if k - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(k=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\nimport itertools\n\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers that sum up to a target value.\"\"\"\n    for r in range(1, len(numbers) + 1):\n        for combination in itertools.combinations(numbers, r):\n            if sum(combination) == target:\n                return True\n    return False\n\ndef g(numbers=[10, 20, 30, 40, 50]):\n    return numbers\n\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 316, "target_skills": null, "problem_func": "from typing import*\nimport itertools\n\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers that sum up to a target value.\"\"\"\n    for r in range(1, len(numbers) + 1):\n        for combination in itertools.combinations(numbers, r):\n            if sum(combination) == target:\n                return True\n    return False", "solution_func": "def g(numbers=[10, 20, 30, 40, 50]):\n    return numbers", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=22) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that add up to the target.\"\"\"\n    pairs = set()\n    for num in nums:\n        if target - num in pairs:\n            return True\n        pairs.add(num)\n    return False\ndef g(nums = [1, 3, 6, 9, 12, 15]):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 317, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=22) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that add up to the target.\"\"\"\n    pairs = set()\n    for num in nums:\n        if target - num in pairs:\n            return True\n        pairs.add(num)\n    return False", "solution_func": "def g(nums = [1, 3, 6, 9, 12, 15]):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], min_length=3, max_length=5) -> bool:\n    \"\"\"Check if there is a subarray of length between min_length and max_length (inclusive) whose sum is zero.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + min_length, min(i + max_length + 1, len(arr) + 1)):\n            if sum(arr[i:j]) == 0:\n                return True\n    return False\ndef g(arr = [1, -2, 3, 4, -5, 6, -7, 8, 9]):\n    return arr\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 317, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], min_length=3, max_length=5) -> bool:\n    \"\"\"Check if there is a subarray of length between min_length and max_length (inclusive) whose sum is zero.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + min_length, min(i + max_length + 1, len(arr) + 1)):\n            if sum(arr[i:j]) == 0:\n                return True\n    return False", "solution_func": "def g(arr = [1, -2, 3, 4, -5, 6, -7, 8, 9]):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(words: List[str], prefix='pre') -> bool:\n    \"\"\"Check if all the words in the list start with the given prefix.\"\"\"\n    return all(word.startswith(prefix) for word in words)\ndef g(words = ['prefix', 'prestige', 'present', 'premise']):\n    return words\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 317, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], prefix='pre') -> bool:\n    \"\"\"Check if all the words in the list start with the given prefix.\"\"\"\n    return all(word.startswith(prefix) for word in words)", "solution_func": "def g(words = ['prefix', 'prestige', 'present', 'premise']):\n    return words", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target=\"Hello, World!\") -> bool:\n    \"\"\"\n    Check if a given string is equal to the target string\n    \"\"\"\n    return s == target\ndef g(target=\"Hello, World!\"):\n    return target\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 317, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target=\"Hello, World!\") -> bool:\n    \"\"\"\n    Check if a given string is equal to the target string\n    \"\"\"\n    return s == target", "solution_func": "def g(target=\"Hello, World!\"):\n    return target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport datetime\n\ndef f(dt: datetime.datetime, year=2022) -> bool:\n    \"\"\"\n    Check if the year of a given datetime object is equal to a specific year\n    \"\"\"\n    return dt.year == year\ndef g(year=2022):\n    return datetime.datetime(year, 1, 1)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 317, "target_skills": null, "problem_func": "from typing import*\nimport datetime\n\ndef f(dt: datetime.datetime, year=2022) -> bool:\n    \"\"\"\n    Check if the year of a given datetime object is equal to a specific year\n    \"\"\"\n    return dt.year == year", "solution_func": "def g(year=2022):\n    return datetime.datetime(year, 1, 1)", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Find a pair of numbers in a list such that their sum is equal to a given target\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target=10):\n    return [2, 8, 4, 6]\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 317, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Find a pair of numbers in a list such that their sum is equal to a given target\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(target=10):\n    return [2, 8, 4, 6]", "map_ix": [1, 1, 0, 1, 0, 1, 0, 0, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5], total=15) -> bool:\n    \"\"\"Check if the sum of any n numbers in the list is equal to the total\"\"\"\n    return any(sum(comb) == total for comb in combinations(lst, n))\ndef g(lst=[1, 2, 3, 4, 5], total=15):\n    return lst\nassert f(g())\n", "emb": null, "idx_generation": 317, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5], total=15) -> bool:\n    \"\"\"Check if the sum of any n numbers in the list is equal to the total\"\"\"\n    return any(sum(comb) == total for comb in combinations(lst, n))", "solution_func": "def g(lst=[1, 2, 3, 4, 5], total=15):\n    return lst", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substring=\"python\") -> bool:\n    \"\"\"Check if the given substring is contained in the string s\"\"\"\n    return substring in s\ndef g(substring=\"python\"):\n    return \"I love programming in \" + substring\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 317, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substring=\"python\") -> bool:\n    \"\"\"Check if the given substring is contained in the string s\"\"\"\n    return substring in s", "solution_func": "def g(substring=\"python\"):\n    return \"I love programming in \" + substring", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5], product=120) -> bool:\n    \"\"\"Check if the product of any n numbers in the list is equal to the given product\"\"\"\n    return any(reduce(lambda x, y: x * y, comb) == product for comb in combinations(lst, n))\ndef g(lst=[1, 2, 3, 4, 5], product=120):\n    return lst\nassert f(g())\n", "emb": null, "idx_generation": 317, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5], product=120) -> bool:\n    \"\"\"Check if the product of any n numbers in the list is equal to the given product\"\"\"\n    return any(reduce(lambda x, y: x * y, comb) == product for comb in combinations(lst, n))", "solution_func": "def g(lst=[1, 2, 3, 4, 5], product=120):\n    return lst", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=20):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n", "emb": null, "idx_generation": 317, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target=20):\n    return [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target=2) -> bool:\n    \"\"\"\n    Given a string, check if it contains a substring that is a palindrome of length target.\n\n    Sample Input:\n    \"abcdeedcba\"\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(s) - target + 1):\n        sub = s[i:i+target]\n        if sub == sub[::-1]:\n            return True\n    return False\n      \ndef g(target=2):\n    return \"abcdeedcba\"\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 318, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target=2) -> bool:\n    \"\"\"\n    Given a string, check if it contains a substring that is a palindrome of length target.\n\n    Sample Input:\n    \"abcdeedcba\"\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(s) - target + 1):\n        sub = s[i:i+target]\n        if sub == sub[::-1]:\n            return True\n    return False", "solution_func": "def g(target=2):\n    return \"abcdeedcba\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a pair of numbers whose sum is equal to target.\n\n    Sample Input:\n    [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n      \ndef g(target=10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n", "emb": null, "idx_generation": 318, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a pair of numbers whose sum is equal to target.\n\n    Sample Input:\n    [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if there exists a row or column whose sum is equal to target.\n\n    Sample Input:\n    [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    for i in range(n):\n        row_sum = sum(matrix[i])\n        if row_sum == target:\n            return True\n    for j in range(m):\n        col_sum = sum(matrix[i][j] for i in range(n))\n        if col_sum == target:\n            return True\n    return False\n      \ndef g(target=5):\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n\nassert f(g())\n", "emb": null, "idx_generation": 318, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if there exists a row or column whose sum is equal to target.\n\n    Sample Input:\n    [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    for i in range(n):\n        row_sum = sum(matrix[i])\n        if row_sum == target:\n            return True\n    for j in range(m):\n        col_sum = sum(matrix[i][j] for i in range(n))\n        if col_sum == target:\n            return True\n    return False", "solution_func": "def g(target=5):\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(string: str, char='a') -> bool:\n    \"\"\"Check if a given character is present in a string\"\"\"\n    return char in string\ndef g(char = 'a'):\n    return \"Hello World!\"\nassert f(g())\n", "emb": null, "idx_generation": 318, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, char='a') -> bool:\n    \"\"\"Check if a given character is present in a string\"\"\"\n    return char in string", "solution_func": "def g(char = 'a'):\n    return \"Hello World!\"", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], n=0) -> bool:\n    \"\"\"Check if a given number is present in a list of numbers\"\"\"\n    return n in nums\ndef g(n = 5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n", "emb": null, "idx_generation": 318, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], n=0) -> bool:\n    \"\"\"Check if a given number is present in a list of numbers\"\"\"\n    return n in nums", "solution_func": "def g(n = 5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(string: str, char='a', num=0) -> bool:\n    \"\"\"Count the occurrences of a given character in a string and check if it is equal to a given number\"\"\"\n    return string.count(char) == num\ndef g(char = 'a', num = 3):\n    return \"banana\"\nassert f(g())\n", "emb": null, "idx_generation": 318, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, char='a', num=0) -> bool:\n    \"\"\"Count the occurrences of a given character in a string and check if it is equal to a given number\"\"\"\n    return string.count(char) == num", "solution_func": "def g(char = 'a', num = 3):\n    return \"banana\"", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target='aeiou') -> bool:\n    \"\"\"Check if all characters in the string are vowels\"\"\"\n    return all((c in target for c in s))\ndef g(target = 'aeiou'):\n    return target\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 318, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='aeiou') -> bool:\n    \"\"\"Check if all characters in the string are vowels\"\"\"\n    return all((c in target for c in s))", "solution_func": "def g(target = 'aeiou'):\n    return target", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if the sum of all numbers in the list is equal to the target\"\"\"\n    return sum(arr) == target\ndef g(target = 10):\n    return [target]\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 318, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if the sum of all numbers in the list is equal to the target\"\"\"\n    return sum(arr) == target", "solution_func": "def g(target = 10):\n    return [target]", "map_ix": [1, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(a: float, b: float, c: float) -> bool:\n    \"\"\"Check if the given values can form a right-angled triangle\"\"\"\n    return a**2 + b**2 == c**2\ndef g():\n    a = 3\n    b = 4\n    c = sqrt(a**2 + b**2)\n    return a, b, c\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 318, "target_skills": null, "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(a: float, b: float, c: float) -> bool:\n    \"\"\"Check if the given values can form a right-angled triangle\"\"\"\n    return a**2 + b**2 == c**2", "solution_func": "def g():\n    a = 3\n    b = 4\n    c = sqrt(a**2 + b**2)\n    return a, b, c", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"\n    Find a string that contains all the substrings in alphabetical order\n    \"\"\"\n    sorted_substrings = sorted(substrings)\n    return all((sub in s for sub in sorted_substrings))\ndef g(substrings = ['apple', 'banana', 'cherry', 'date']):\n    return \"\".join(sorted(substrings))\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 318, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"\n    Find a string that contains all the substrings in alphabetical order\n    \"\"\"\n    sorted_substrings = sorted(substrings)\n    return all((sub in s for sub in sorted_substrings))", "solution_func": "def g(substrings = ['apple', 'banana', 'cherry', 'date']):\n    return \"\".join(sorted(substrings))", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, x=2, y=3) -> bool:\n    \"\"\"Check if the sum of x and y is equal to n.\"\"\"\n    return x + y == n\ndef g(x=2, y=3):\n    return x + y\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 319, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, x=2, y=3) -> bool:\n    \"\"\"Check if the sum of x and y is equal to n.\"\"\"\n    return x + y == n", "solution_func": "def g(x=2, y=3):\n    return x + y", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, delimiter=' ', target='Hello World') -> bool:\n    \"\"\"Check if a target string can be formed by joining the elements of a given string with a delimiter.\"\"\"\n    return delimiter.join(s.split(delimiter)) == target\ndef g(delimiter=' ', target='Hello World'):\n    return delimiter.join(target.split())\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 319, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, delimiter=' ', target='Hello World') -> bool:\n    \"\"\"Check if a target string can be formed by joining the elements of a given string with a delimiter.\"\"\"\n    return delimiter.join(s.split(delimiter)) == target", "solution_func": "def g(delimiter=' ', target='Hello World'):\n    return delimiter.join(target.split())", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(lst: list, target=[1, 2, 3]) -> bool:\n    \"\"\"Check if a target list is a sublist of a given list.\"\"\"\n    return any(target == lst[i:i+len(target)] for i in range(len(lst)-len(target)+1))\ndef g(target=[1, 2, 3]):\n    return [1, 2, 3, 4, 5, 6, 7]\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 319, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: list, target=[1, 2, 3]) -> bool:\n    \"\"\"Check if a target list is a sublist of a given list.\"\"\"\n    return any(target == lst[i:i+len(target)] for i in range(len(lst)-len(target)+1))", "solution_func": "def g(target=[1, 2, 3]):\n    return [1, 2, 3, 4, 5, 6, 7]", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers 'nums' and an integer 'target', find two numbers in 'nums' such that their sum equals 'target'.\"\"\"\n    num_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums=[2, 7, 11, 15], target=9):\n    num_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return [complement, num]\n        num_set.add(num)\n    return []\nassert f(g(), target=9)\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 319, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers 'nums' and an integer 'target', find two numbers in 'nums' such that their sum equals 'target'.\"\"\"\n    num_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(nums=[2, 7, 11, 15], target=9):\n    num_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return [complement, num]\n        num_set.add(num)\n    return []", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Given a matrix, determine if it is a Toeplitz matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows - 1):\n        for j in range(cols - 1):\n            if matrix[i][j] != matrix[i+1][j+1]:\n                return False\n    return True\n\ndef g(matrix=[[1,2,3,4],[5,1,2,3],[9,5,1,2]]):\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows - 1):\n        for j in range(cols - 1):\n            if matrix[i][j] != matrix[i+1][j+1]:\n                return False\n    return True\nassert f(g())\n", "emb": null, "idx_generation": 319, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Given a matrix, determine if it is a Toeplitz matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows - 1):\n        for j in range(cols - 1):\n            if matrix[i][j] != matrix[i+1][j+1]:\n                return False\n    return True", "solution_func": "def g(matrix=[[1,2,3,4],[5,1,2,3],[9,5,1,2]]):\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows - 1):\n        for j in range(cols - 1):\n            if matrix[i][j] != matrix[i+1][j+1]:\n                return False\n    return True", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Given a sorted (in non-decreasing order) array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\"\"\"\n    left = 0\n    right = len(nums) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if nums[mid] == target:\n            return mid\n        elif nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left\n\ndef g(nums=[1,3,5,6], target=5):\n    left = 0\n    right = len(nums) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if nums[mid] == target:\n            return mid\n        elif nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left\nassert f(g(), target=5)\n", "emb": null, "idx_generation": 319, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Given a sorted (in non-decreasing order) array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\"\"\"\n    left = 0\n    right = len(nums) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if nums[mid] == target:\n            return mid\n        elif nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left", "solution_func": "def g(nums=[1,3,5,6], target=5):\n    left = 0\n    right = len(nums) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if nums[mid] == target:\n            return mid\n        elif nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, char='a') -> bool:\n    \"\"\"Check if a given character is present in the string\"\"\"\n    return char in s\ndef g(char='a'):\n    return 'hello world'\nassert f(g())\n", "emb": null, "idx_generation": 319, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, char='a') -> bool:\n    \"\"\"Check if a given character is present in the string\"\"\"\n    return char in s", "solution_func": "def g(char='a'):\n    return 'hello world'", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], n=5, target=10) -> bool:\n    \"\"\"Find if there exists a pair of integers in the list that sum up to target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(n=5, target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n", "emb": null, "idx_generation": 319, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], n=5, target=10) -> bool:\n    \"\"\"Find if there exists a pair of integers in the list that sum up to target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g(n=5, target=10):\n    return [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], n=4) -> bool:\n    \"\"\"Check if the given list of numbers contains a sequence of length n that is increasing\"\"\"\n    for i in range(len(nums)-n+1):\n        if nums[i:i+n] == sorted(nums[i:i+n]):\n            return True\n    return False\ndef g(n=4):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 319, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], n=4) -> bool:\n    \"\"\"Check if the given list of numbers contains a sequence of length n that is increasing\"\"\"\n    for i in range(len(nums)-n+1):\n        if nums[i:i+n] == sorted(nums[i:i+n]):\n            return True\n    return False", "solution_func": "def g(n=4):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(x: int, a=random.randint(1, 100)):\n    \"\"\"Check if the given number is divisible by a.\"\"\"\n    return x % a == 0\n\ndef g(a=random.randint(1, 100)):\n    return random.randint(1, 1000)\n\nassert f(g())\n", "emb": null, "idx_generation": 319, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(x: int, a=random.randint(1, 100)):\n    \"\"\"Check if the given number is divisible by a.\"\"\"\n    return x % a == 0", "solution_func": "def g(a=random.randint(1, 100)):\n    return random.randint(1, 1000)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that sums up to the target.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 320, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that sums up to the target.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Determine if there is a row in the matrix whose sum of elements is equal to the target.\"\"\"\n    return any((sum(row) == target for row in matrix))\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 320, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Determine if there is a row in the matrix whose sum of elements is equal to the target.\"\"\"\n    return any((sum(row) == target for row in matrix))", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if it is possible to obtain the target number using all the numbers in the list and the operators + and -.\"\"\"\n    def helper(nums, target):\n        if len(nums) == 1:\n            return nums[0] == target\n        return helper(nums[1:], target-nums[0]) or helper(nums[1:], target+nums[0])\n    return helper(nums, target)\ndef g(nums=[10, 20, 30, 40, 50]):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 320, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if it is possible to obtain the target number using all the numbers in the list and the operators + and -.\"\"\"\n    def helper(nums, target):\n        if len(nums) == 1:\n            return nums[0] == target\n        return helper(nums[1:], target-nums[0]) or helper(nums[1:], target+nums[0])\n    return helper(nums, target)", "solution_func": "def g(nums=[10, 20, 30, 40, 50]):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"Find a combination of four numbers that equals the target\"\"\"\n    from itertools import combinations\n    for c in combinations(nums, 4):\n        if sum(c) == target:\n            return True\n    return False\ndef g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 320, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"Find a combination of four numbers that equals the target\"\"\"\n    from itertools import combinations\n    for c in combinations(nums, 4):\n        if sum(c) == target:\n            return True\n    return False", "solution_func": "def g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Find a row in the matrix that sums up to the target\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    return False\ndef g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 320, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Find a row in the matrix that sums up to the target\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    return False", "solution_func": "def g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    from itertools import combinations\n    for c in combinations(nums, 2):\n        if sum(c) == target:\n            return True\n    return False\ndef g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 320, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    from itertools import combinations\n    for c in combinations(nums, 2):\n        if sum(c) == target:\n            return True\n    return False", "solution_func": "def g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums", "map_ix": [1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=3, m=5) -> bool:\n    \"\"\"Check if there are n consecutive occurrences of a substring s in a larger string\"\"\"\n    return s*n in s*m\ndef g(s=\"abcde\", n=3, m=5):\n    return s\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 320, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=3, m=5) -> bool:\n    \"\"\"Check if there are n consecutive occurrences of a substring s in a larger string\"\"\"\n    return s*n in s*m", "solution_func": "def g(s=\"abcde\", n=3, m=5):\n    return s", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"Check if it is possible to combine the numbers using the operators +, -, *, / to get the target number\"\"\"\n    def helper(nums):\n        if len(nums) == 1:\n            return nums[0] == target\n        for a, b, *rest in permutations(nums):\n            if helper([a + b] + rest) or helper([a - b] + rest) or helper([a * b] + rest) or (b != 0 and a % b == 0 and helper([a // b] + rest)):\n                return True\n        return False\n    return helper(nums)\ndef g(nums=[4, 5, 7, 8]):\n    return nums\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 320, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"Check if it is possible to combine the numbers using the operators +, -, *, / to get the target number\"\"\"\n    def helper(nums):\n        if len(nums) == 1:\n            return nums[0] == target\n        for a, b, *rest in permutations(nums):\n            if helper([a + b] + rest) or helper([a - b] + rest) or helper([a * b] + rest) or (b != 0 and a % b == 0 and helper([a // b] + rest)):\n                return True\n        return False\n    return helper(nums)", "solution_func": "def g(nums=[4, 5, 7, 8]):\n    return nums", "map_ix": [1, 1, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if there is a subarray whose sum is equal to the target\"\"\"\n    prefix_sum = 0\n    seen = set()\n    for num in arr:\n        prefix_sum += num\n        if prefix_sum == target or prefix_sum - target in seen:\n            return True\n        seen.add(prefix_sum)\n    return False\ndef g(arr=[-1, 2, 3, 5, -3, 4]):\n    return arr\nassert f(g())\n", "emb": null, "idx_generation": 320, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if there is a subarray whose sum is equal to the target\"\"\"\n    prefix_sum = 0\n    seen = set()\n    for num in arr:\n        prefix_sum += num\n        if prefix_sum == target or prefix_sum - target in seen:\n            return True\n        seen.add(prefix_sum)\n    return False", "solution_func": "def g(arr=[-1, 2, 3, 5, -3, 4]):\n    return arr", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a list of numbers whose sum is equal to the target number\"\"\"\n    return sum(nums) == target\n\ndef g(target=100):\n    n = math.ceil(target / 2)\n    return [1, n-1] + [0] * (target - 2)\n\nassert f(g())\n", "emb": null, "idx_generation": 320, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a list of numbers whose sum is equal to the target number\"\"\"\n    return sum(nums) == target", "solution_func": "def g(target=100):\n    n = math.ceil(target / 2)\n    return [1, n-1] + [0] * (target - 2)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a 2D array of integers and a target integer, determine if the target exists in the array.\n    Return True if the target is found, False otherwise.\n    \"\"\"\n    for row in arr:\n        if target in row:\n            return True\n    return False\n\ndef g(arr: List[List[int]], target: int):\n    return arr, target\n\nassert f(g())\n", "emb": null, "idx_generation": 321, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a 2D array of integers and a target integer, determine if the target exists in the array.\n    Return True if the target is found, False otherwise.\n    \"\"\"\n    for row in arr:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(arr: List[List[int]], target: int):\n    return arr, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given an array of integers and a target integer, check if there are two numbers in the array that add up to the target.\n    Return True if such numbers exist, False otherwise.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums: List[int], target: int):\n    return nums, target\n\nassert f(g())\n", "emb": null, "idx_generation": 321, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given an array of integers and a target integer, check if there are two numbers in the array that add up to the target.\n    Return True if such numbers exist, False otherwise.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums: List[int], target: int):\n    return nums, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"\n    Given a string and an integer n, determine if it is possible to split the string into n equal parts.\n    Return True if it is possible, False otherwise.\n    \"\"\"\n    if len(s) % n != 0:\n        return False\n    part_len = len(s) // n\n    for i in range(0, len(s), part_len):\n        if s[i:i+part_len] != s[:part_len]:\n            return False\n    return True\n\ndef g(s: str, n: int):\n    return s, n\n\nassert f(g())\n", "emb": null, "idx_generation": 321, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"\n    Given a string and an integer n, determine if it is possible to split the string into n equal parts.\n    Return True if it is possible, False otherwise.\n    \"\"\"\n    if len(s) % n != 0:\n        return False\n    part_len = len(s) // n\n    for i in range(0, len(s), part_len):\n        if s[i:i+part_len] != s[:part_len]:\n            return False\n    return True", "solution_func": "def g(s: str, n: int):\n    return s, n", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, s1='abc', s2='def', count1=3, count2=4) -> bool:\n    \"\"\"\n    Find a string that has count1 occurrences of s1 and count2 occurrences of s2 and ends with\n    the same 5 characters\n    \"\"\"\n    return s.count(s1) == count1 and s.count(s2) == count2 and (s[-5:] == s[-10:-5])\ndef g(s1 = 'abc', s2 = 'def', count1 = 3, count2 = 4):\n    if s1 == s2:\n        ans = (s1 + \"?\") * count1\n    elif s1.count(s2):\n        ans = (s1 + \"?\") * count1\n        ans += (s2 + \"?\") * (count2 - ans.count(s2))\n    else:\n        ans = (s2 + \"?\") * count2\n        ans += (s1 + \"?\") * (count1 - ans.count(s1))\n    return ans + \"?\" * 5\nassert f(g())\n", "emb": null, "idx_generation": 321, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, s1='abc', s2='def', count1=3, count2=4) -> bool:\n    \"\"\"\n    Find a string that has count1 occurrences of s1 and count2 occurrences of s2 and ends with\n    the same 5 characters\n    \"\"\"\n    return s.count(s1) == count1 and s.count(s2) == count2 and (s[-5:] == s[-10:-5])", "solution_func": "def g(s1 = 'abc', s2 = 'def', count1 = 3, count2 = 4):\n    if s1 == s2:\n        ans = (s1 + \"?\") * count1\n    elif s1.count(s2):\n        ans = (s1 + \"?\") * count1\n        ans += (s2 + \"?\") * (count2 - ans.count(s2))\n    else:\n        ans = (s2 + \"?\") * count2\n        ans += (s1 + \"?\") * (count1 - ans.count(s1))\n    return ans + \"?\" * 5", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, a='python', b='programming', length=6) -> bool:\n    \"\"\"Find a string of length length that is in both strings a and b and starts with 'py'\"\"\"\n    return len(s) == length and s in a and (s in b) and s.startswith('py')\ndef g(a = 'python', b = 'programming', length = 6):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]\nassert f(g())\n", "emb": null, "idx_generation": 321, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, a='python', b='programming', length=6) -> bool:\n    \"\"\"Find a string of length length that is in both strings a and b and starts with 'py'\"\"\"\n    return len(s) == length and s in a and (s in b) and s.startswith('py')", "solution_func": "def g(a = 'python', b = 'programming', length = 6):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: List[int], n=5, s=100) -> bool:\n    \"\"\"Construct a list of n distinct integers that sum up to s and the maximum value is greater than 50\"\"\"\n    return len(x) == n and sum(x) == s and (len(set(x)) == n) and max(x) > 50\ndef g(n = 5, s = 100):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0], "idx_generation": 321, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], n=5, s=100) -> bool:\n    \"\"\"Construct a list of n distinct integers that sum up to s and the maximum value is greater than 50\"\"\"\n    return len(x) == n and sum(x) == s and (len(set(x)) == n) and max(x) > 50", "solution_func": "def g(n = 5, s = 100):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x", "map_ix": [0, 1, 0, 0, 0, 0, 0, 1, 1, 1]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n: int, target: str) -> bool:\n    \"\"\"\n    Find a string that has exactly n occurrences of the target string.\n    \"\"\"\n    return s.count(target) == n\ndef g(n=5, target='abc'):\n    return target * n\nassert f(g())\n", "emb": null, "idx_generation": 321, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n: int, target: str) -> bool:\n    \"\"\"\n    Find a string that has exactly n occurrences of the target string.\n    \"\"\"\n    return s.count(target) == n", "solution_func": "def g(n=5, target='abc'):\n    return target * n", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, target: str) -> bool:\n    \"\"\"\n    Find the reversed version of the target string in the given string.\n    \"\"\"\n    return target[::-1] in s\ndef g(target='hello'):\n    return 'olleh'\nassert f(g())\n", "emb": null, "idx_generation": 321, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target: str) -> bool:\n    \"\"\"\n    Find the reversed version of the target string in the given string.\n    \"\"\"\n    return target[::-1] in s", "solution_func": "def g(target='hello'):\n    return 'olleh'", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"\n    Find a string that has n consecutive occurrences of the same character.\n    \"\"\"\n    return any(s[i:i+n] == s[i] * n for i in range(len(s) - n + 1))\ndef g(n=4):\n    return 'a' * n + 'b' * (n - 1)\nassert f(g())\n", "emb": null, "idx_generation": 321, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"\n    Find a string that has n consecutive occurrences of the same character.\n    \"\"\"\n    return any(s[i:i+n] == s[i] * n for i in range(len(s) - n + 1))", "solution_func": "def g(n=4):\n    return 'a' * n + 'b' * (n - 1)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(target = 10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 321, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g(target = 10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to n.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == n:\n                return True\n    return False\n\ndef g(lst: List[int]):\n    return sum(lst)\n\nassert f(g(), [1, 2, 3, 4, 5])\n", "emb": null, "idx_generation": 322, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to n.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == n:\n                return True\n    return False", "solution_func": "def g(lst: List[int]):\n    return sum(lst)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if all the rows in the matrix have the same sum.\"\"\"\n    row_sums = []\n    for row in matrix:\n        row_sum = sum(row)\n        row_sums.append(row_sum)\n    return len(set(row_sums)) == 1\n\ndef g(matrix: List[List[int]]):\n    return matrix\n\nassert f(g([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n", "emb": null, "idx_generation": 322, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if all the rows in the matrix have the same sum.\"\"\"\n    row_sums = []\n    for row in matrix:\n        row_sum = sum(row)\n        row_sums.append(row_sum)\n    return len(set(row_sums)) == 1", "solution_func": "def g(matrix: List[List[int]]):\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\n\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if the list is sorted in ascending order.\"\"\"\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))\n\ndef g(length: int):\n    lst = random.sample(range(100), length)\n    lst.sort()\n    return lst\n\nassert f(g(10))\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 322, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if the list is sorted in ascending order.\"\"\"\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))", "solution_func": "def g(length: int):\n    lst = random.sample(range(100), length)\n    lst.sort()\n    return lst", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Find two numbers in the list nums that sum up to the target.\n    \"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 322, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Find two numbers in the list nums that sum up to the target.\n    \"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))", "solution_func": "def g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"\n    Find a row in the matrix where the sum of its elements is equal to the target.\n    \"\"\"\n    return any(sum(row) == target for row in matrix)\ndef g(target=15):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 322, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"\n    Find a row in the matrix where the sum of its elements is equal to the target.\n    \"\"\"\n    return any(sum(row) == target for row in matrix)", "solution_func": "def g(target=15):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(words: List[str], letter='a') -> bool:\n    \"\"\"\n    Check if any word in the list words starts with the letter.\n    \"\"\"\n    return any(word.startswith(letter) for word in words)\ndef g(letter='a'):\n    words = ['apple', 'banana', 'cherry', 'kiwi']\n    return words\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 322, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], letter='a') -> bool:\n    \"\"\"\n    Check if any word in the list words starts with the letter.\n    \"\"\"\n    return any(word.startswith(letter) for word in words)", "solution_func": "def g(letter='a'):\n    words = ['apple', 'banana', 'cherry', 'kiwi']\n    return words", "map_ix": [0, 0, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target=10, max_numbers=3) -> bool:\n    \"\"\"Find a combination of at most max_numbers numbers whose sum is equal to the target value\"\"\"\n    return sum(numbers) == target and len(numbers) <= max_numbers\ndef g(target=10, max_numbers=3):\n    from itertools import combinations\n    for n in range(1, max_numbers + 1):\n        for c in combinations(range(1, 10), n):\n            if sum(c) == target:\n                return list(c)\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 322, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target=10, max_numbers=3) -> bool:\n    \"\"\"Find a combination of at most max_numbers numbers whose sum is equal to the target value\"\"\"\n    return sum(numbers) == target and len(numbers) <= max_numbers", "solution_func": "def g(target=10, max_numbers=3):\n    from itertools import combinations\n    for n in range(1, max_numbers + 1):\n        for c in combinations(range(1, 10), n):\n            if sum(c) == target:\n                return list(c)", "map_ix": [0, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(letters: List[str], target='python', max_letters=6) -> bool:\n    \"\"\"Find a combination of at most max_letters letters that can be rearranged to form the target word\"\"\"\n    word = ''.join(letters)\n    return sorted(word) == sorted(target) and len(word) <= max_letters\ndef g(target='python', max_letters=6):\n    from itertools import permutations\n    for n in range(1, max_letters + 1):\n        for p in permutations(target, n):\n            if ''.join(p) == target:\n                return list(p)\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 322, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(letters: List[str], target='python', max_letters=6) -> bool:\n    \"\"\"Find a combination of at most max_letters letters that can be rearranged to form the target word\"\"\"\n    word = ''.join(letters)\n    return sorted(word) == sorted(target) and len(word) <= max_letters", "solution_func": "def g(target='python', max_letters=6):\n    from itertools import permutations\n    for n in range(1, max_letters + 1):\n        for p in permutations(target, n):\n            if ''.join(p) == target:\n                return list(p)", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(words: List[str], target='python', max_words=3) -> bool:\n    \"\"\"Find a subset of at most max_words words whose concatenation forms the target phrase\"\"\"\n    phrase = ' '.join(words)\n    return phrase == target and len(words) <= max_words\ndef g(target='python', max_words=3):\n    from itertools import combinations\n    for n in range(1, max_words + 1):\n        for c in combinations(['p', 'y', 't', 'h', 'o', 'n'], n):\n            if ''.join(c) == target:\n                return list(c)\nassert f(g())\n", "emb": null, "idx_generation": 322, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(words: List[str], target='python', max_words=3) -> bool:\n    \"\"\"Find a subset of at most max_words words whose concatenation forms the target phrase\"\"\"\n    phrase = ' '.join(words)\n    return phrase == target and len(words) <= max_words", "solution_func": "def g(target='python', max_words=3):\n    from itertools import combinations\n    for n in range(1, max_words + 1):\n        for c in combinations(['p', 'y', 't', 'h', 'o', 'n'], n):\n            if ''.join(c) == target:\n                return list(c)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], m=5, n=10) -> bool:\n    \"\"\"Check if the list contains at least m odd numbers and at most n even numbers\"\"\"\n    odd_count = sum([1 for num in x if num % 2 != 0])\n    even_count = sum([1 for num in x if num % 2 == 0])\n    return odd_count >= m and even_count <= n\n\ndef g(m=5, n=10):\n    x = [2*i + 1 for i in range(n)]  # Generate a list of n odd numbers\n    return x\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 322, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], m=5, n=10) -> bool:\n    \"\"\"Check if the list contains at least m odd numbers and at most n even numbers\"\"\"\n    odd_count = sum([1 for num in x if num % 2 != 0])\n    even_count = sum([1 for num in x if num % 2 == 0])\n    return odd_count >= m and even_count <= n", "solution_func": "def g(m=5, n=10):\n    x = [2*i + 1 for i in range(n)]  # Generate a list of n odd numbers\n    return x", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(matrix: List[List[int]], target=24, operations=['+', '-', '*', '/']) -> bool:\n    \"\"\"Determine if it is possible to reach the target value using the numbers in the matrix and the given operations.\"\"\"\n    assert all(len(row) == len(matrix[0]) for row in matrix)\n    assert all(isinstance(val, int) for row in matrix for val in row)\n    def evaluate(expression):\n        try:\n            return eval(expression)\n        except ZeroDivisionError:\n            return None\n    def backtrack(expression, remaining_nums):\n        if len(remaining_nums) == 0:\n            return evaluate(expression) == target\n        for i, num in enumerate(remaining_nums):\n            new_nums = remaining_nums[:i] + remaining_nums[i+1:]\n            if backtrack(expression + operations[0] + str(num), new_nums):\n                return True\n            if backtrack(expression + operations[1] + str(num), new_nums):\n                return True\n            if backtrack(expression + operations[2] + str(num), new_nums):\n                return True\n            if backtrack(expression + operations[3] + str(num), new_nums):\n                return True\n        return False\n    return backtrack('', [num for row in matrix for num in row])\ndef g(operations=['+', '-', '*', '/']):\n    import random\n    matrix = [[random.randint(1, 9) for _ in range(4)] for _ in range(4)]\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 323, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(matrix: List[List[int]], target=24, operations=['+', '-', '*', '/']) -> bool:\n    \"\"\"Determine if it is possible to reach the target value using the numbers in the matrix and the given operations.\"\"\"\n    assert all(len(row) == len(matrix[0]) for row in matrix)\n    assert all(isinstance(val, int) for row in matrix for val in row)\n    def evaluate(expression):\n        try:\n            return eval(expression)\n        except ZeroDivisionError:\n            return None\n    def backtrack(expression, remaining_nums):\n        if len(remaining_nums) == 0:\n            return evaluate(expression) == target\n        for i, num in enumerate(remaining_nums):\n            new_nums = remaining_nums[:i] + remaining_nums[i+1:]\n            if backtrack(expression + operations[0] + str(num), new_nums):\n                return True\n            if backtrack(expression + operations[1] + str(num), new_nums):\n                return True\n            if backtrack(expression + operations[2] + str(num), new_nums):\n                return True\n            if backtrack(expression + operations[3] + str(num), new_nums):\n                return True\n        return False\n    return backtrack('', [num for row in matrix for num in row])", "solution_func": "def g(operations=['+', '-', '*', '/']):\n    import random\n    matrix = [[random.randint(1, 9) for _ in range(4)] for _ in range(4)]\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Determine if it is possible to find a subarray of the given list whose sum is equal to the target value.\"\"\"\n    return any(sum(nums[i:j]) == target for i in range(len(nums)) for j in range(i+1, len(nums)+1))\ndef g():\n    import random\n    nums = [random.randint(1, 9) for _ in range(10)]\n    return nums\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 323, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Determine if it is possible to find a subarray of the given list whose sum is equal to the target value.\"\"\"\n    return any(sum(nums[i:j]) == target for i in range(len(nums)) for j in range(i+1, len(nums)+1))", "solution_func": "def g():\n    import random\n    nums = [random.randint(1, 9) for _ in range(10)]\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substring='puzzle') -> bool:\n    \"\"\"Determine if the given substring appears in the given string in a case-insensitive manner.\"\"\"\n    return substring.lower() in s.lower()\ndef g(substring='puzzle'):\n    string = 'This is a puzzle that needs to be solved.'\n    return string\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 323, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substring='puzzle') -> bool:\n    \"\"\"Determine if the given substring appears in the given string in a case-insensitive manner.\"\"\"\n    return substring.lower() in s.lower()", "solution_func": "def g(substring='puzzle'):\n    string = 'This is a puzzle that needs to be solved.'\n    return string", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31]) -> bool:\n    \"\"\"Check if a number is a prime number\"\"\"\n    if n < 2:\n        return False\n    for prime in primes:\n        if n % prime == 0:\n            return False\n    return True\ndef g():\n    num = 37\n    return num\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 323, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31]) -> bool:\n    \"\"\"Check if a number is a prime number\"\"\"\n    if n < 2:\n        return False\n    for prime in primes:\n        if n % prime == 0:\n            return False\n    return True", "solution_func": "def g():\n    num = 37\n    return num", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there is a subset of numbers that sums up to the target_sum\"\"\"\n    n = len(numbers)\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            if numbers[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - numbers[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target_sum]\ndef g(target_sum=100):\n    numbers = random.choices(range(1, 101), k=10)\n    return numbers\nassert f(g())\n", "emb": null, "idx_generation": 323, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there is a subset of numbers that sums up to the target_sum\"\"\"\n    n = len(numbers)\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            if numbers[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - numbers[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target_sum]", "solution_func": "def g(target_sum=100):\n    numbers = random.choices(range(1, 101), k=10)\n    return numbers", "map_ix": null}, {"fitness": 1.0, "program_str": "import math\nfrom typing import*\nfrom math import gcd\n\ndef f(a: int, b: int, c: int) -> bool:\n    \"\"\"Check if a, b, and c are pairwise coprime\"\"\"\n    return gcd(a, b) == gcd(b, c) == gcd(a, c) == 1\ndef g():\n    a = 15\n    b = 28\n    c = 41\n    return a, b, c\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 323, "target_skills": null, "problem_func": "import math\nfrom typing import*\nfrom math import gcd\n\ndef f(a: int, b: int, c: int) -> bool:\n    \"\"\"Check if a, b, and c are pairwise coprime\"\"\"\n    return gcd(a, b) == gcd(b, c) == gcd(a, c) == 1", "solution_func": "def g():\n    a = 15\n    b = 28\n    c = 41\n    return a, b, c", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums: List[int], target: int):\n    return target - nums[0], nums[1:]\n    \nassert f(g())\n", "emb": null, "idx_generation": 323, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(nums: List[int], target: int):\n    return target - nums[0], nums[1:]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are three numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)-2):\n        for j in range(i+1, len(nums)-1):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums: List[int], target: int):\n    return nums[0], nums[1:]\n    \nassert f(g())\n", "emb": null, "idx_generation": 323, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are three numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)-2):\n        for j in range(i+1, len(nums)-1):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False", "solution_func": "def g(nums: List[int], target: int):\n    return nums[0], nums[1:]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there is a subarray in the list that adds up to the target\"\"\"\n    sums = set()\n    curr_sum = 0\n    for num in nums:\n        curr_sum += num\n        if curr_sum == target or curr_sum - target in sums:\n            return True\n        sums.add(curr_sum)\n    return False\n\ndef g(nums: List[int], target: int):\n    return nums[:2], nums[2:]\n    \nassert f(g())\n", "emb": null, "idx_generation": 323, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there is a subarray in the list that adds up to the target\"\"\"\n    sums = set()\n    curr_sum = 0\n    for num in nums:\n        curr_sum += num\n        if curr_sum == target or curr_sum - target in sums:\n            return True\n        sums.add(curr_sum)\n    return False", "solution_func": "def g(nums: List[int], target: int):\n    return nums[:2], nums[2:]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, arr=[5, 8, 2, 3, 1]) -> bool:\n    \"\"\"\n    Given an array of integers, find the maximum sum of a subsequence such that no two elements in the subsequence\n    are adjacent.\n\n    Sample input:\n    10\n\n    Sample output:\n    13\n\n    (Sample output hidden because showing sample output would give away too much information.)\n    \"\"\"\n    if len(arr) == 0:\n        return False\n    if len(arr) <= 2:\n        return max(arr) <= n\n    dp = [0] * len(arr)\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n    for i in range(2, len(arr)):\n        dp[i] = max(dp[i-1], dp[i-2] + arr[i])\n    return dp[-1] <= n\ndef g(arr = [5, 8, 2, 3, 1]):\n    if len(arr) == 0:\n        return 0\n    if len(arr) <= 2:\n        return max(arr)\n    dp = [0] * len(arr)\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n    for i in range(2, len(arr)):\n        dp[i] = max(dp[i-1], dp[i-2] + arr[i])\n    return dp[-1]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 323, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, arr=[5, 8, 2, 3, 1]) -> bool:\n    \"\"\"\n    Given an array of integers, find the maximum sum of a subsequence such that no two elements in the subsequence\n    are adjacent.\n\n    Sample input:\n    10\n\n    Sample output:\n    13\n\n    (Sample output hidden because showing sample output would give away too much information.)\n    \"\"\"\n    if len(arr) == 0:\n        return False\n    if len(arr) <= 2:\n        return max(arr) <= n\n    dp = [0] * len(arr)\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n    for i in range(2, len(arr)):\n        dp[i] = max(dp[i-1], dp[i-2] + arr[i])\n    return dp[-1] <= n", "solution_func": "def g(arr = [5, 8, 2, 3, 1]):\n    if len(arr) == 0:\n        return 0\n    if len(arr) <= 2:\n        return max(arr)\n    dp = [0] * len(arr)\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n    for i in range(2, len(arr)):\n        dp[i] = max(dp[i-1], dp[i-2] + arr[i])\n    return dp[-1]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substring=\"world\") -> bool:\n    \"\"\"Check if a string contains a specific substring.\"\"\"\n    return substring in s\ndef g(substring=\"world\"):\n    return \"hello \" + substring\nassert f(g())\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 324, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substring=\"world\") -> bool:\n    \"\"\"Check if a string contains a specific substring.\"\"\"\n    return substring in s", "solution_func": "def g(substring=\"world\"):\n    return \"hello \" + substring", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, num_list=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if a number is divisible by all the numbers in a list.\"\"\"\n    return all(n % num == 0 for num in num_list)\ndef g(num_list=[1, 2, 3, 4, 5]):\n    return num_list[0] * num_list[1] * num_list[2] * num_list[3] * num_list[4]\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 324, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, num_list=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if a number is divisible by all the numbers in a list.\"\"\"\n    return all(n % num == 0 for num in num_list)", "solution_func": "def g(num_list=[1, 2, 3, 4, 5]):\n    return num_list[0] * num_list[1] * num_list[2] * num_list[3] * num_list[4]", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(a: int, b=2, c=3) -> bool:\n    \"\"\"Check if the given numbers form a Pythagorean triple.\"\"\"\n    return math.sqrt(a**2 + b**2) == c\ndef g(b=2, c=3):\n    a = math.sqrt(c**2 - b**2)\n    return int(a)\nassert f(g())\n", "emb": null, "idx_generation": 324, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(a: int, b=2, c=3) -> bool:\n    \"\"\"Check if the given numbers form a Pythagorean triple.\"\"\"\n    return math.sqrt(a**2 + b**2) == c", "solution_func": "def g(b=2, c=3):\n    a = math.sqrt(c**2 - b**2)\n    return int(a)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(sentence: str, char_count: int = 0, word_count: int = 0) -> bool:\n    \"\"\"Check if a sentence has a specific number of characters and words.\"\"\"\n    return len(sentence) == char_count and len(sentence.split()) == word_count\ndef g(char_count: int = 10, word_count: int = 3):\n    return \"Hello world, how are you?\"\nassert f(g())\n", "emb": null, "idx_generation": 324, "target_skills": null, "problem_func": "from typing import*\ndef f(sentence: str, char_count: int = 0, word_count: int = 0) -> bool:\n    \"\"\"Check if a sentence has a specific number of characters and words.\"\"\"\n    return len(sentence) == char_count and len(sentence.split()) == word_count", "solution_func": "def g(char_count: int = 10, word_count: int = 3):\n    return \"Hello world, how are you?\"", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], row_sum: int = 10, col_sum: int = 15) -> bool:\n    \"\"\"Check if the sum of each row and column in a matrix is equal to the specified values.\"\"\"\n    return all((sum(row) == row_sum for row in matrix)) and all((sum(col) == col_sum for col in zip(*matrix)))\ndef g(row_sum: int = 10, col_sum: int = 15):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n", "emb": null, "idx_generation": 324, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], row_sum: int = 10, col_sum: int = 15) -> bool:\n    \"\"\"Check if the sum of each row and column in a matrix is equal to the specified values.\"\"\"\n    return all((sum(row) == row_sum for row in matrix)) and all((sum(col) == col_sum for col in zip(*matrix)))", "solution_func": "def g(row_sum: int = 10, col_sum: int = 15):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int = 10, num_count: int = 3) -> bool:\n    \"\"\"Check if a list of numbers contains a specific target number a certain number of times.\"\"\"\n    return nums.count(target) == num_count\ndef g(target: int = 10, num_count: int = 3):\n    return [10, 20, 10, 30, 40, 10, 50]\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 324, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int = 10, num_count: int = 3) -> bool:\n    \"\"\"Check if a list of numbers contains a specific target number a certain number of times.\"\"\"\n    return nums.count(target) == num_count", "solution_func": "def g(target: int = 10, num_count: int = 3):\n    return [10, 20, 10, 30, 40, 10, 50]", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, a=3, b=4, c=5) -> bool:\n    \"\"\"Check if three points form a right-angled triangle\"\"\"\n    side1 = math.sqrt((x-a)**2 + (y-b)**2 + (z-c)**2)\n    side2 = math.sqrt((x-a)**2 + (y-b)**2)\n    side3 = math.sqrt((x-a)**2 + (z-c)**2)\n    return math.isclose(side1, math.sqrt(side2**2 + side3**2))\n\ndef g(x: float, y: float, z: float):\n    return x, y, z\n\nassert f(*g())\n", "emb": null, "idx_generation": 324, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, a=3, b=4, c=5) -> bool:\n    \"\"\"Check if three points form a right-angled triangle\"\"\"\n    side1 = math.sqrt((x-a)**2 + (y-b)**2 + (z-c)**2)\n    side2 = math.sqrt((x-a)**2 + (y-b)**2)\n    side3 = math.sqrt((x-a)**2 + (z-c)**2)\n    return math.isclose(side1, math.sqrt(side2**2 + side3**2))", "solution_func": "def g(x: float, y: float, z: float):\n    return x, y, z", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a string has n consecutive vowels\"\"\"\n    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n            if count == n:\n                return True\n        else:\n            count = 0\n    return False\n\ndef g(n = 3):\n    return \"aeiou\" * n\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 324, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a string has n consecutive vowels\"\"\"\n    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n            if count == n:\n                return True\n        else:\n            count = 0\n    return False", "solution_func": "def g(n = 3):\n    return \"aeiou\" * n", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\n\ndef f(lst: list, n=3) -> bool:\n    \"\"\"Check if a list contains n consecutive numbers\"\"\"\n    lst.sort()\n    count = 1\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1] + 1:\n            count += 1\n            if count == n:\n                return True\n        else:\n            count = 1\n    return False\n\ndef g(n = 3):\n    lst = random.sample(range(10), 10)\n    return lst\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 324, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(lst: list, n=3) -> bool:\n    \"\"\"Check if a list contains n consecutive numbers\"\"\"\n    lst.sort()\n    count = 1\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1] + 1:\n            count += 1\n            if count == n:\n                return True\n        else:\n            count = 1\n    return False", "solution_func": "def g(n = 3):\n    lst = random.sample(range(10), 10)\n    return lst", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport re\ndef f(s: str, pattern='[A-Za-z]+') -> bool:\n    \"\"\"Check if a string matches a given regular expression pattern\"\"\"\n    return re.fullmatch(pattern, s) is not None\ndef g(pattern='[A-Za-z]+'):\n    return \"Hello, World!\" if pattern == '[A-Za-z]+' else \"12345\"\nassert f(g())\n", "emb": null, "idx_generation": 324, "target_skills": null, "problem_func": "from typing import*\nimport re\ndef f(s: str, pattern='[A-Za-z]+') -> bool:\n    \"\"\"Check if a string matches a given regular expression pattern\"\"\"\n    return re.fullmatch(pattern, s) is not None", "solution_func": "def g(pattern='[A-Za-z]+'):\n    return \"Hello, World!\" if pattern == '[A-Za-z]+' else \"12345\"", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target = 0) -> bool:\n    \"\"\"Check if there exists a pair of integers in the list arr that sum up to the target value.\"\"\"\n    return any(target - x in arr for x in arr)\ndef g(arr: List[int], target = 0):\n    return arr\nassert f(g())\n", "emb": null, "idx_generation": 325, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target = 0) -> bool:\n    \"\"\"Check if there exists a pair of integers in the list arr that sum up to the target value.\"\"\"\n    return any(target - x in arr for x in arr)", "solution_func": "def g(arr: List[int], target = 0):\n    return arr", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], row_sum=15, col_sum=10) -> bool:\n    \"\"\"Check if the given matrix is a valid solution based on the row and column sums.\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum([matrix[i][j] for i in range(n)]) for j in range(m)]\n    return row_sums == [row_sum] * n and col_sums == [col_sum] * m\ndef g(matrix: List[List[int]], row_sum=15, col_sum=10):\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 325, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], row_sum=15, col_sum=10) -> bool:\n    \"\"\"Check if the given matrix is a valid solution based on the row and column sums.\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum([matrix[i][j] for i in range(n)]) for j in range(m)]\n    return row_sums == [row_sum] * n and col_sums == [col_sum] * m", "solution_func": "def g(matrix: List[List[int]], row_sum=15, col_sum=10):\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, target = 'python') -> bool:\n    \"\"\"Check if the given string s contains all the characters in the target string.\"\"\"\n    return all(c in s for c in target)\ndef g(s: str, target = 'python'):\n    return s\nassert f(g())\n", "emb": null, "idx_generation": 325, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target = 'python') -> bool:\n    \"\"\"Check if the given string s contains all the characters in the target string.\"\"\"\n    return all(c in s for c in target)", "solution_func": "def g(s: str, target = 'python'):\n    return s", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers and a target integer, return True if any two numbers in the list sum up to the target,\n    otherwise return False.\"\"\"\n    return any(target - num in arr for num in arr)\ndef g(arr: List[int], target: int):\n    return arr, target\nassert f(g([1, 2, 3, 4, 5], 9))\n", "emb": null, "idx_generation": 325, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers and a target integer, return True if any two numbers in the list sum up to the target,\n    otherwise return False.\"\"\"\n    return any(target - num in arr for num in arr)", "solution_func": "def g(arr: List[int], target: int):\n    return arr, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, substr: str) -> bool:\n    \"\"\"Check if a given substring is present in a given string.\"\"\"\n    return substr in s\ndef g(s: str, substr: str):\n    return s, substr\nassert f(g(\"Hello, World!\", \"World\"))\n", "emb": null, "idx_generation": 325, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substr: str) -> bool:\n    \"\"\"Check if a given substring is present in a given string.\"\"\"\n    return substr in s", "solution_func": "def g(s: str, substr: str):\n    return s, substr", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Given a matrix (list of lists) of integers and a target integer, return True if the target is present in the matrix,\n    otherwise return False.\"\"\"\n    return any(target in row for row in matrix)\ndef g(matrix: List[List[int]], target: int):\n    return matrix, target\nassert f(g([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 5))\n", "emb": null, "idx_generation": 325, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Given a matrix (list of lists) of integers and a target integer, return True if the target is present in the matrix,\n    otherwise return False.\"\"\"\n    return any(target in row for row in matrix)", "solution_func": "def g(matrix: List[List[int]], target: int):\n    return matrix, target", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=1, y=1) -> bool:\n    \"\"\"\n    Given two positive integers x and y, determine if n is a perfect square.\n\n    Sample Input:\n    `16`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    return x * y == n and math.sqrt(n) % 1 == 0\n\ndef g(x=1, y=1):\n    return x * y\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 325, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, x=1, y=1) -> bool:\n    \"\"\"\n    Given two positive integers x and y, determine if n is a perfect square.\n\n    Sample Input:\n    `16`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    return x * y == n and math.sqrt(n) % 1 == 0", "solution_func": "def g(x=1, y=1):\n    return x * y", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target=3) -> bool:\n    \"\"\"\n    Given a string and a target length, determine if there is a substring of length target that consists\n    of only unique characters.\n\n    Sample Input:\n    `\"abccde\"`\n\n    Sample Output:\n    `False`\n    \"\"\"\n    for i in range(len(s) - target + 1):\n        substring = s[i:i+target]\n        if len(substring) == len(set(substring)):\n            return True\n    return False\n\ndef g(target=3):\n    return \"abcde\"\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 325, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target=3) -> bool:\n    \"\"\"\n    Given a string and a target length, determine if there is a substring of length target that consists\n    of only unique characters.\n\n    Sample Input:\n    `\"abccde\"`\n\n    Sample Output:\n    `False`\n    \"\"\"\n    for i in range(len(s) - target + 1):\n        substring = s[i:i+target]\n        if len(substring) == len(set(substring)):\n            return True\n    return False", "solution_func": "def g(target=3):\n    return \"abcde\"", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport datetime\n\ndef f(d: datetime.date, days=7) -> bool:\n    \"\"\"\n    Given a date and a number of days, determine if the resulting date is a weekend (Saturday or Sunday).\n\n    Sample Input:\n    `datetime.date(2021, 10, 1)`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    new_date = d + datetime.timedelta(days=days)\n    return new_date.weekday() >= 5\n\ndef g(days=7):\n    return datetime.date(2021, 9, 24)\n\nassert f(g())\n", "emb": null, "idx_generation": 325, "target_skills": null, "problem_func": "from typing import*\nimport datetime\n\ndef f(d: datetime.date, days=7) -> bool:\n    \"\"\"\n    Given a date and a number of days, determine if the resulting date is a weekend (Saturday or Sunday).\n\n    Sample Input:\n    `datetime.date(2021, 10, 1)`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    new_date = d + datetime.timedelta(days=days)\n    return new_date.weekday() >= 5", "solution_func": "def g(days=7):\n    return datetime.date(2021, 9, 24)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"\n    Determine if n is divisible by all the prime numbers in the given list\n    \"\"\"\n    return all(n % p == 0 for p in primes)\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return reduce(lambda x, y: x*y, primes)\nassert f(g())\n", "emb": null, "idx_generation": 325, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"\n    Determine if n is divisible by all the prime numbers in the given list\n    \"\"\"\n    return all(n % p == 0 for p in primes)", "solution_func": "def g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return reduce(lambda x, y: x*y, primes)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers, find if there exists a pair of numbers such that their sum is equal to the target.\"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums: List[int], target: int):\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\nassert f(g([2, 7, 11, 15], 9))\n", "emb": null, "idx_generation": 326, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers, find if there exists a pair of numbers such that their sum is equal to the target.\"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(nums: List[int], target: int):\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Given a matrix, check if it is a symmetric matrix.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix: List[List[int]]):\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\nassert f(g([[1, 2, 3], [2, 4, 5], [3, 5, 6]]))\n", "emb": null, "idx_generation": 326, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Given a matrix, check if it is a symmetric matrix.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "solution_func": "def g(matrix: List[List[int]]):\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Given a string, check if it is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g(s: str):\n    return s\n\nassert f(g(\"radar\"))\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 326, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Given a string, check if it is a palindrome.\"\"\"\n    return s == s[::-1]", "solution_func": "def g(s: str):\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int, k=3) -> bool:\n    \"\"\"\n    Given a list of integers nums and a target integer, return True if there exists a subset of nums with\n    exactly k elements that sum up to the target, and False otherwise.\n    \"\"\"\n    from itertools import combinations\n    return any((sum(comb) == target for comb in combinations(nums, k)))\ndef g(nums: List[int], target: int, k=3):\n    return nums, target, k\nassert f(g())\n", "emb": null, "idx_generation": 326, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int, k=3) -> bool:\n    \"\"\"\n    Given a list of integers nums and a target integer, return True if there exists a subset of nums with\n    exactly k elements that sum up to the target, and False otherwise.\n    \"\"\"\n    from itertools import combinations\n    return any((sum(comb) == target for comb in combinations(nums, k)))", "solution_func": "def g(nums: List[int], target: int, k=3):\n    return nums, target, k", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int, n=4, m=4) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target integer, return True if there exists a submatrix of size n x m\n    that sums up to the target, and False otherwise.\n    \"\"\"\n    for i in range(len(matrix) - (n-1)):\n        for j in range(len(matrix[0]) - (m-1)):\n            submatrix = [row[j:j+m] for row in matrix[i:i+n]]\n            if sum(sum(sub) for sub in submatrix) == target:\n                return True\n    return False\ndef g(matrix: List[List[int]], target: int, n=4, m=4):\n    return matrix, target, n, m\nassert f(g())\n", "emb": null, "idx_generation": 326, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int, n=4, m=4) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target integer, return True if there exists a submatrix of size n x m\n    that sums up to the target, and False otherwise.\n    \"\"\"\n    for i in range(len(matrix) - (n-1)):\n        for j in range(len(matrix[0]) - (m-1)):\n            submatrix = [row[j:j+m] for row in matrix[i:i+n]]\n            if sum(sum(sub) for sub in submatrix) == target:\n                return True\n    return False", "solution_func": "def g(matrix: List[List[int]], target: int, n=4, m=4):\n    return matrix, target, n, m", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int, k=3) -> bool:\n    \"\"\"\n    Given a list of integers nums and a target integer, return True if there exists a subset of nums with\n    exactly k elements that sum up to the target, and False otherwise.\n    \"\"\"\n    from itertools import combinations\n    return any((sum(comb) == target for comb in combinations(nums, k)))\ndef g(nums: List[int], target: int, k=3):\n    return nums, target, k\nassert f(g())\n", "emb": null, "idx_generation": 326, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int, k=3) -> bool:\n    \"\"\"\n    Given a list of integers nums and a target integer, return True if there exists a subset of nums with\n    exactly k elements that sum up to the target, and False otherwise.\n    \"\"\"\n    from itertools import combinations\n    return any((sum(comb) == target for comb in combinations(nums, k)))", "solution_func": "def g(nums: List[int], target: int, k=3):\n    return nums, target, k", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], row_sum = 10, col_sum = 10) -> bool:\n    \"\"\"Check if the given matrix has the specified row and column sums.\n\n    Sample Input:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    row_sum = 6\n    col_sum = 15\n\n    Sample Output:\n    True\n    \"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    row_sums = [sum(matrix[i]) for i in range(m)]\n    col_sums = [sum(matrix[i][j] for i in range(m)) for j in range(n)]\n    return all(row_sums[i] == row_sum for i in range(m)) and all(col_sums[j] == col_sum for j in range(n))\n\ndef g(row_sum = 10, col_sum = 10):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\n\nassert f(g())\n", "emb": null, "idx_generation": 326, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], row_sum = 10, col_sum = 10) -> bool:\n    \"\"\"Check if the given matrix has the specified row and column sums.\n\n    Sample Input:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    row_sum = 6\n    col_sum = 15\n\n    Sample Output:\n    True\n    \"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    row_sums = [sum(matrix[i]) for i in range(m)]\n    col_sums = [sum(matrix[i][j] for i in range(m)) for j in range(n)]\n    return all(row_sums[i] == row_sum for i in range(m)) and all(col_sums[j] == col_sum for j in range(n))", "solution_func": "def g(row_sum = 10, col_sum = 10):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(string: str, target_length = 10) -> bool:\n    \"\"\"Check if the given string can be modified to have the specified length by removing characters.\n\n    Sample Input:\n    string = \"Hello, World!\"\n    target_length = 5\n\n    Sample Output:\n    True\n    \"\"\"\n    return len(string) - target_length <= 0\n\ndef g(target_length = 10):\n    string = \"Hello, World!\"\n    return string\n\nassert f(g())\n", "emb": null, "idx_generation": 326, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, target_length = 10) -> bool:\n    \"\"\"Check if the given string can be modified to have the specified length by removing characters.\n\n    Sample Input:\n    string = \"Hello, World!\"\n    target_length = 5\n\n    Sample Output:\n    True\n    \"\"\"\n    return len(string) - target_length <= 0", "solution_func": "def g(target_length = 10):\n    string = \"Hello, World!\"\n    return string", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(numbers: List[int], target_sum = 10) -> bool:\n    \"\"\"Check if there is a pair of numbers in the given list that adds up to the target sum.\n\n    Sample Input:\n    numbers = [1, 2, 3, 4, 5]\n    target_sum = 7\n\n    Sample Output:\n    True\n    \"\"\"\n    return any(numbers[i] + numbers[j] == target_sum for i in range(len(numbers)) for j in range(i+1, len(numbers)))\n\ndef g(target_sum = 10):\n    numbers = [1, 2, 3, 4, 5]\n    return numbers\n\nassert f(g())\n", "emb": null, "idx_generation": 326, "target_skills": null, "problem_func": "from typing import*\ndef f(numbers: List[int], target_sum = 10) -> bool:\n    \"\"\"Check if there is a pair of numbers in the given list that adds up to the target sum.\n\n    Sample Input:\n    numbers = [1, 2, 3, 4, 5]\n    target_sum = 7\n\n    Sample Output:\n    True\n    \"\"\"\n    return any(numbers[i] + numbers[j] == target_sum for i in range(len(numbers)) for j in range(i+1, len(numbers)))", "solution_func": "def g(target_sum = 10):\n    numbers = [1, 2, 3, 4, 5]\n    return numbers", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(n: int, target_sum=100) -> bool:\n    \"\"\"Find a set of n positive integers such that their sum is equal to the target_sum\"\"\"\n    import itertools\n    for combination in itertools.combinations(range(1, target_sum), n):\n        if sum(combination) == target_sum:\n            return True\n    return False\ndef g(target_sum=100):\n    return target_sum // 2\nassert f(g())\n", "emb": null, "idx_generation": 326, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(n: int, target_sum=100) -> bool:\n    \"\"\"Find a set of n positive integers such that their sum is equal to the target_sum\"\"\"\n    import itertools\n    for combination in itertools.combinations(range(1, target_sum), n):\n        if sum(combination) == target_sum:\n            return True\n    return False", "solution_func": "def g(target_sum=100):\n    return target_sum // 2", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=7, b=3, c=5) -> bool:\n    \"\"\"Check if n is divisible by a, b, and c\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0\ndef g(a = 7, b = 3, c = 5):\n    return a * b * c\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 327, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=7, b=3, c=5) -> bool:\n    \"\"\"Check if n is divisible by a, b, and c\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0", "solution_func": "def g(a = 7, b = 3, c = 5):\n    return a * b * c", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, word='python', max_len=6) -> bool:\n    \"\"\"Check if s is a substring of word\"\"\"\n    return s in word\ndef g(word = 'python', max_len = 6):\n    return word[1:4]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 327, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, word='python', max_len=6) -> bool:\n    \"\"\"Check if s is a substring of word\"\"\"\n    return s in word", "solution_func": "def g(word = 'python', max_len = 6):\n    return word[1:4]", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=3, b=5, c=7) -> bool:\n    \"\"\"Check if n is a multiple of a, b, or c\"\"\"\n    return n % a == 0 or n % b == 0 or n % c == 0\ndef g(a = 3, b = 5, c = 7):\n    return a * b * c\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 327, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=3, b=5, c=7) -> bool:\n    \"\"\"Check if n is a multiple of a, b, or c\"\"\"\n    return n % a == 0 or n % b == 0 or n % c == 0", "solution_func": "def g(a = 3, b = 5, c = 7):\n    return a * b * c", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Check if the target value exists in the matrix\"\"\"\n    rows = len(matrix)\n    if rows == 0:\n        return False\n    cols = len(matrix[0])\n    if cols == 0:\n        return False\n\n    left = 0\n    right = rows * cols - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        mid_value = matrix[mid // cols][mid % cols]\n\n        if mid_value == target:\n            return True\n        elif mid_value < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return False\n\ndef g(matrix: List[List[int]], target: int):\n    return f(matrix, target)\n\nassert f(g([[1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 60]], 3))\n", "emb": null, "idx_generation": 327, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Check if the target value exists in the matrix\"\"\"\n    rows = len(matrix)\n    if rows == 0:\n        return False\n    cols = len(matrix[0])\n    if cols == 0:\n        return False\n\n    left = 0\n    right = rows * cols - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        mid_value = matrix[mid // cols][mid % cols]\n\n        if mid_value == target:\n            return True\n        elif mid_value < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return False", "solution_func": "def g(matrix: List[List[int]], target: int):\n    return f(matrix, target)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the array is a valid mountain array\"\"\"\n    n = len(nums)\n    if n < 3:\n        return False\n\n    i = 0\n    while i < n - 1 and nums[i] < nums[i + 1]:\n        i += 1\n\n    if i == 0 or i == n - 1:\n        return False\n\n    while i < n - 1 and nums[i] > nums[i + 1]:\n        i += 1\n\n    return i == n - 1\n\ndef g(nums: List[int]):\n    return f(nums)\n\nassert f(g([0, 3, 2, 1]))\n", "emb": null, "idx_generation": 327, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the array is a valid mountain array\"\"\"\n    n = len(nums)\n    if n < 3:\n        return False\n\n    i = 0\n    while i < n - 1 and nums[i] < nums[i + 1]:\n        i += 1\n\n    if i == 0 or i == n - 1:\n        return False\n\n    while i < n - 1 and nums[i] > nums[i + 1]:\n        i += 1\n\n    return i == n - 1", "solution_func": "def g(nums: List[int]):\n    return f(nums)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there is a pair of numbers in the array that sums up to the target\"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums: List[int], target: int):\n    return f(nums, target)\n\nassert f(g([1, 2, 3, 4, 5], 9))\n", "emb": null, "idx_generation": 327, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there is a pair of numbers in the array that sums up to the target\"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(nums: List[int], target: int):\n    return f(nums, target)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: list, x=4729, y=5840) -> bool:\n    \"\"\"Find two numbers in the array that add up to a given sum\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == x+y:\n                return True\n    return False\n\ndef g(x=4729, y=5840):\n    arr = [13, 27, 35, 48, 52, 67, 73, 82, 96]\n    return arr\n\nassert f(g())\n", "emb": null, "idx_generation": 327, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: list, x=4729, y=5840) -> bool:\n    \"\"\"Find two numbers in the array that add up to a given sum\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == x+y:\n                return True\n    return False", "solution_func": "def g(x=4729, y=5840):\n    arr = [13, 27, 35, 48, 52, 67, 73, 82, 96]\n    return arr", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, a=17, b=26) -> bool:\n    \"\"\"Find the nth number in the Fibonacci sequence\"\"\"\n    fib_sequence = [0, 1]\n    for i in range(2, n+1):\n        fib_sequence.append(fib_sequence[i-1] + fib_sequence[i-2])\n    return fib_sequence[n] == a*b\n\ndef g(a=17, b=26):\n    n = 9\n    return n\n\nassert f(g())\n", "emb": null, "idx_generation": 327, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=17, b=26) -> bool:\n    \"\"\"Find the nth number in the Fibonacci sequence\"\"\"\n    fib_sequence = [0, 1]\n    for i in range(2, n+1):\n        fib_sequence.append(fib_sequence[i-1] + fib_sequence[i-2])\n    return fib_sequence[n] == a*b", "solution_func": "def g(a=17, b=26):\n    n = 9\n    return n", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(x: float, y=8, z=3) -> bool:\n    \"\"\"Check if x raised to the power of y is divisible by z\"\"\"\n    return math.pow(x, y) % z == 0\n\ndef g(y=8, z=3):\n    x = 2\n    return x\n\nassert f(g())\n", "emb": null, "idx_generation": 327, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, y=8, z=3) -> bool:\n    \"\"\"Check if x raised to the power of y is divisible by z\"\"\"\n    return math.pow(x, y) % z == 0", "solution_func": "def g(y=8, z=3):\n    x = 2\n    return x", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target_sum=50) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target_sum\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                return True\n    return False\n\ndef g(arr=[10, 20, 30, 40, 50]):\n    return arr\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 327, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target_sum=50) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target_sum\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                return True\n    return False", "solution_func": "def g(arr=[10, 20, 30, 40, 50]):\n    return arr", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, nums=[3, 6, 9, 12, 15]) -> bool:\n    \"\"\"Check if n is a multiple of any of the numbers in the list.\"\"\"\n    return any(n % num == 0 for num in nums)\ndef g(nums=[3, 6, 9, 12, 15]):\n    n = 1\n    while True:\n        if f(n, nums):\n            return n\n        n += 1\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 328, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[3, 6, 9, 12, 15]) -> bool:\n    \"\"\"Check if n is a multiple of any of the numbers in the list.\"\"\"\n    return any(n % num == 0 for num in nums)", "solution_func": "def g(nums=[3, 6, 9, 12, 15]):\n    n = 1\n    while True:\n        if f(n, nums):\n            return n\n        n += 1", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10], target=50) -> bool:\n    \"\"\"Check if the product of n and any number in the list nums is equal to the target value.\"\"\"\n    return any(n * num == target for num in nums)\ndef g(nums=[2, 4, 6, 8, 10], target=50):\n    n = 1\n    while True:\n        if f(n, nums, target):\n            return n\n        n += 1\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 328, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10], target=50) -> bool:\n    \"\"\"Check if the product of n and any number in the list nums is equal to the target value.\"\"\"\n    return any(n * num == target for num in nums)", "solution_func": "def g(nums=[2, 4, 6, 8, 10], target=50):\n    n = 1\n    while True:\n        if f(n, nums, target):\n            return n\n        n += 1", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, nums=[5, 10, 15, 20, 25], target=200) -> bool:\n    \"\"\"Check if the sum of n and any number in the list nums is equal to the target value.\"\"\"\n    return any(n + num == target for num in nums)\ndef g(nums=[5, 10, 15, 20, 25], target=200):\n    n = 1\n    while True:\n        if f(n, nums, target):\n            return n\n        n += 1\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 328, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[5, 10, 15, 20, 25], target=200) -> bool:\n    \"\"\"Check if the sum of n and any number in the list nums is equal to the target value.\"\"\"\n    return any(n + num == target for num in nums)", "solution_func": "def g(nums=[5, 10, 15, 20, 25], target=200):\n    n = 1\n    while True:\n        if f(n, nums, target):\n            return n\n        n += 1", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target_sum=100) -> bool:\n    \"\"\"Check if there exists a subset of the array whose sum is equal to the target_sum.\"\"\"\n    return np.any(np.sum(arr, axis=1) == target_sum)\n\ndef g(target_sum=100):\n    arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    return arr\n\nassert f(g())\n", "emb": null, "idx_generation": 328, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target_sum=100) -> bool:\n    \"\"\"Check if there exists a subset of the array whose sum is equal to the target_sum.\"\"\"\n    return np.any(np.sum(arr, axis=1) == target_sum)", "solution_func": "def g(target_sum=100):\n    arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    return arr", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, target_char='e') -> bool:\n    \"\"\"Check if the target_char exists in the string.\"\"\"\n    return target_char in string\n\ndef g(target_char='e'):\n    string = \"Hello, world!\"\n    return string\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 328, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, target_char='e') -> bool:\n    \"\"\"Check if the target_char exists in the string.\"\"\"\n    return target_char in string", "solution_func": "def g(target_char='e'):\n    string = \"Hello, world!\"\n    return string", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(num_list: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target_sum.\"\"\"\n    return any(num_list[i] + num_list[j] == target_sum for i in range(len(num_list)) for j in range(i+1, len(num_list)))\n\ndef g(target_sum=10):\n    num_list = [1, 2, 3, 4, 5]\n    return num_list\n\nassert f(g())\n", "emb": null, "idx_generation": 328, "target_skills": null, "problem_func": "from typing import*\ndef f(num_list: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target_sum.\"\"\"\n    return any(num_list[i] + num_list[j] == target_sum for i in range(len(num_list)) for j in range(i+1, len(num_list)))", "solution_func": "def g(target_sum=10):\n    num_list = [1, 2, 3, 4, 5]\n    return num_list", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if a number is prime.\"\"\"\n    if n < 2:\n        return False\n    for prime in primes:\n        if n % prime == 0:\n            return False\n    return True\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    n = max(primes) + 2\n    while not f(n, primes):\n        n += 1\n    return n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 328, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if a number is prime.\"\"\"\n    if n < 2:\n        return False\n    for prime in primes:\n        if n % prime == 0:\n            return False\n    return True", "solution_func": "def g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    n = max(primes) + 2\n    while not f(n, primes):\n        n += 1\n    return n", "map_ix": [1, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, target=100, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Find a combination of numbers that adds up to the target.\"\"\"\n    dp = [False] * (target + 1)\n    dp[0] = True\n    for num in nums:\n        for i in range(target, num - 1, -1):\n            dp[i] = dp[i] or dp[i - num]\n    return dp[target]\ndef g(target=100, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 328, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, target=100, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Find a combination of numbers that adds up to the target.\"\"\"\n    dp = [False] * (target + 1)\n    dp[0] = True\n    for num in nums:\n        for i in range(target, num - 1, -1):\n            dp[i] = dp[i] or dp[i - num]\n    return dp[target]", "solution_func": "def g(target=100, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(secret: str, guess: str) -> bool:\n    \"\"\"Check if the guess matches the secret code.\"\"\"\n    return secret == guess\ndef g():\n    chars = \"0123456789\"\n    return \"\".join(random.choices(chars, k=4))\nassert f(g(), g())\n", "emb": null, "idx_generation": 328, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(secret: str, guess: str) -> bool:\n    \"\"\"Check if the guess matches the secret code.\"\"\"\n    return secret == guess", "solution_func": "def g():\n    chars = \"0123456789\"\n    return \"\".join(random.choices(chars, k=4))", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"\n    Determine if a given number n is a perfect square and it is divisible by the sum of all the numbers in the list.\n    \"\"\"\n    return n in [x*x for x in range(1, int(n**0.5)+1)] and n % sum(nums) == 0\ndef g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return sum(nums) ** 2\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 328, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"\n    Determine if a given number n is a perfect square and it is divisible by the sum of all the numbers in the list.\n    \"\"\"\n    return n in [x*x for x in range(1, int(n**0.5)+1)] and n % sum(nums) == 0", "solution_func": "def g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return sum(nums) ** 2", "map_ix": [0, 0, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: str, s=43851) -> bool:\n    \"\"\"Check if the sum of the ASCII values of the characters in x is equal to s.\"\"\"\n    return s == sum(ord(c) for c in x)\ndef g(s=43851):\n    return ''.join(chr(int(d)) for d in str(s))\nassert f(g())\n", "emb": null, "idx_generation": 329, "target_skills": null, "problem_func": "from typing import*\ndef f(x: str, s=43851) -> bool:\n    \"\"\"Check if the sum of the ASCII values of the characters in x is equal to s.\"\"\"\n    return s == sum(ord(c) for c in x)", "solution_func": "def g(s=43851):\n    return ''.join(chr(int(d)) for d in str(s))", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], a=15, b=30, count=5) -> bool:\n    \"\"\"Find a list of count or more numbers each between a and b that are divisible by 3.\"\"\"\n    return len([n for n in nums if a <= n <= b and n % 3 == 0]) >= count\ndef g(a=15, b=30, count=5):\n    return [n for n in range(a, b + 1) if n % 3 == 0]\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 329, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], a=15, b=30, count=5) -> bool:\n    \"\"\"Find a list of count or more numbers each between a and b that are divisible by 3.\"\"\"\n    return len([n for n in nums if a <= n <= b and n % 3 == 0]) >= count", "solution_func": "def g(a=15, b=30, count=5):\n    return [n for n in range(a, b + 1) if n % 3 == 0]", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: int, a=10, b=500) -> bool:\n    \"\"\"Check if x is a prime number or if a is greater than b.\"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return is_prime(x) or a > b\ndef g(a=10, b=500):\n    return b + a\nassert f(g())\n", "emb": null, "idx_generation": 329, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, a=10, b=500) -> bool:\n    \"\"\"Check if x is a prime number or if a is greater than b.\"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return is_prime(x) or a > b", "solution_func": "def g(a=10, b=500):\n    return b + a", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(target: int):\n    nums = [1, 2, 3, 4, 5]\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 329, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))", "solution_func": "def g(target: int):\n    nums = [1, 2, 3, 4, 5]\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the matrix is symmetric\"\"\"\n    return all((matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(i+1, len(matrix))))\ndef g():\n    matrix = [[1, 2, 3],\n              [2, 4, 5],\n              [3, 5, 6]]\n    return matrix\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 329, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the matrix is symmetric\"\"\"\n    return all((matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(i+1, len(matrix))))", "solution_func": "def g():\n    matrix = [[1, 2, 3],\n              [2, 4, 5],\n              [3, 5, 6]]\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(words: List[str], prefix: str) -> bool:\n    \"\"\"Check if any word in the list starts with the given prefix\"\"\"\n    return any((word.startswith(prefix) for word in words))\ndef g(prefix: str):\n    words = ['apple', 'banana', 'cherry', 'date']\n    return words\nassert f(g())\n", "emb": null, "idx_generation": 329, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], prefix: str) -> bool:\n    \"\"\"Check if any word in the list starts with the given prefix\"\"\"\n    return any((word.startswith(prefix) for word in words))", "solution_func": "def g(prefix: str):\n    words = ['apple', 'banana', 'cherry', 'date']\n    return words", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, x=10, y=5) -> bool:\n    \"\"\"Find the remainder when x is divided by y, n times.\"\"\"\n    return x % y == n\ndef g(x=10, y=5):\n    remainder = x % y\n    for _ in range(1, n+1):\n        remainder = remainder % y\n    return remainder\nassert f(g())\n", "emb": null, "idx_generation": 329, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, x=10, y=5) -> bool:\n    \"\"\"Find the remainder when x is divided by y, n times.\"\"\"\n    return x % y == n", "solution_func": "def g(x=10, y=5):\n    remainder = x % y\n    for _ in range(1, n+1):\n        remainder = remainder % y\n    return remainder", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, a=2, b=3) -> bool:\n    \"\"\"Find the nth term of the Fibonacci sequence.\"\"\"\n    if n <= 0:\n        return False\n    elif n == 1:\n        return a\n    elif n == 2:\n        return b\n    else:\n        fib_seq = [a, b]\n        for i in range(2, n):\n            fib_seq.append(fib_seq[i-1] + fib_seq[i-2])\n        return fib_seq[-1]\ndef g(a=2, b=3):\n    if a < b:\n        return (b-a) + 1\n    else:\n        return (a-b) + 1\nassert f(g())\n", "emb": null, "idx_generation": 329, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=2, b=3) -> bool:\n    \"\"\"Find the nth term of the Fibonacci sequence.\"\"\"\n    if n <= 0:\n        return False\n    elif n == 1:\n        return a\n    elif n == 2:\n        return b\n    else:\n        fib_seq = [a, b]\n        for i in range(2, n):\n            fib_seq.append(fib_seq[i-1] + fib_seq[i-2])\n        return fib_seq[-1]", "solution_func": "def g(a=2, b=3):\n    if a < b:\n        return (b-a) + 1\n    else:\n        return (a-b) + 1", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, x=5, y=7) -> bool:\n    \"\"\"Find the sum of the first n terms of the arithmetic sequence with first term x and common difference y.\"\"\"\n    return n * (2 * x + (n - 1) * y) // 2\ndef g(x=5, y=7):\n    return [x + y * i for i in range(n)]\nassert f(g())\n", "emb": null, "idx_generation": 329, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, x=5, y=7) -> bool:\n    \"\"\"Find the sum of the first n terms of the arithmetic sequence with first term x and common difference y.\"\"\"\n    return n * (2 * x + (n - 1) * y) // 2", "solution_func": "def g(x=5, y=7):\n    return [x + y * i for i in range(n)]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(circle_area: float, radius=5) -> bool:\n    \"\"\"Check if the area of a circle is equal to the given circle_area\"\"\"\n    return math.isclose(math.pi * radius**2, circle_area)\n\ndef g(radius = 5):\n    return math.pi * radius**2\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 329, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(circle_area: float, radius=5) -> bool:\n    \"\"\"Check if the area of a circle is equal to the given circle_area\"\"\"\n    return math.isclose(math.pi * radius**2, circle_area)", "solution_func": "def g(radius = 5):\n    return math.pi * radius**2", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, substring='abc') -> bool:\n    \"\"\"Check if a substring is present in a given string\"\"\"\n    return substring in string\ndef g(substring='abc'):\n    return substring + 'def'\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 330, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, substring='abc') -> bool:\n    \"\"\"Check if a substring is present in a given string\"\"\"\n    return substring in string", "solution_func": "def g(substring='abc'):\n    return substring + 'def'", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, a=10, b=5) -> bool:\n    \"\"\"Check if n is divisible by a and not divisible by b\"\"\"\n    return n % a == 0 and n % b != 0\ndef g(a=10, b=5):\n    return a * b\nassert f(g())\n", "emb": null, "idx_generation": 330, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=10, b=5) -> bool:\n    \"\"\"Check if n is divisible by a and not divisible by b\"\"\"\n    return n % a == 0 and n % b != 0", "solution_func": "def g(a=10, b=5):\n    return a * b", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if any two numbers in a list add up to a target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n", "emb": null, "idx_generation": 330, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if any two numbers in a list add up to a target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Determine if there exist two distinct indices i and j in the list such that nums[i] + nums[j] == target\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n", "emb": null, "idx_generation": 330, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Determine if there exist two distinct indices i and j in the list such that nums[i] + nums[j] == target\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find three elements from the list such that their sum equals the target value\"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, 3):\n        if sum(combo) == target:\n            return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 330, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find three elements from the list such that their sum equals the target value\"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, 3):\n        if sum(combo) == target:\n            return True\n    return False", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Determine if there exist four elements in the list such that their sum equals to the target value\"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, 4):\n        if sum(combo) == target:\n            return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 330, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Determine if there exist four elements in the list such that their sum equals to the target value\"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, 4):\n        if sum(combo) == target:\n            return True\n    return False", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], t=100, n=5) -> bool:\n    \"\"\"Find how many values have cumulative sum less than target\"\"\"\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\n\ndef g(t = 100, n = 5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n", "emb": null, "idx_generation": 330, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], t=100, n=5) -> bool:\n    \"\"\"Find how many values have cumulative sum less than target\"\"\"\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n", "solution_func": "def g(t = 100, n = 5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], t=200, n=10) -> bool:\n    \"\"\"Find how many values have cumulative sum less than target\"\"\"\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\n\ndef g(t = 200, n = 10):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n\nassert f(g())\n", "emb": null, "idx_generation": 330, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], t=200, n=10) -> bool:\n    \"\"\"Find how many values have cumulative sum less than target\"\"\"\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n", "solution_func": "def g(t = 200, n = 10):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], t=500, n=15) -> bool:\n    \"\"\"Find how many values have cumulative sum less than target\"\"\"\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\n\ndef g(t = 500, n = 15):\n    return [50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800]\n\nassert f(g())\n", "emb": null, "idx_generation": 330, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], t=500, n=15) -> bool:\n    \"\"\"Find how many values have cumulative sum less than target\"\"\"\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n", "solution_func": "def g(t = 500, n = 15):\n    return [50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if a given string contains all the vowels in a specific order\"\"\"\n    vowel_index = 0\n    for char in s:\n        if char == vowels[vowel_index]:\n            vowel_index += 1\n            if vowel_index == len(vowels):\n                return True\n    return False\n\ndef g(vowels=['a', 'e', 'i', 'o', 'u']):\n    return ''.join(vowels)\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 330, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if a given string contains all the vowels in a specific order\"\"\"\n    vowel_index = 0\n    for char in s:\n        if char == vowels[vowel_index]:\n            vowel_index += 1\n            if vowel_index == len(vowels):\n                return True\n    return False", "solution_func": "def g(vowels=['a', 'e', 'i', 'o', 'u']):\n    return ''.join(vowels)", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(sentence: str, char_count: int = 0, word_count: int = 0) -> bool:\n    \"\"\"Check if the sentence has the specified number of characters and words.\"\"\"\n    return len(sentence) == char_count and len(sentence.split()) == word_count\ndef g(char_count: int = 0, word_count: int = 0):\n    sentence = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"\n    return sentence, char_count, word_count\nassert f(*g())\n", "emb": null, "idx_generation": 331, "target_skills": null, "problem_func": "from typing import*\ndef f(sentence: str, char_count: int = 0, word_count: int = 0) -> bool:\n    \"\"\"Check if the sentence has the specified number of characters and words.\"\"\"\n    return len(sentence) == char_count and len(sentence.split()) == word_count", "solution_func": "def g(char_count: int = 0, word_count: int = 0):\n    sentence = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"\n    return sentence, char_count, word_count", "map_ix": null}, {"fitness": -Infinity, "program_str": "import math\nfrom typing import*\ndef f(numbers: List[int], target: int = 0, product: int = 1) -> bool:\n    \"\"\"Check if the product of the numbers equals the target.\"\"\"\n    return product == target and product == math.prod(numbers)\ndef g(target: int = 0, product: int = 1):\n    numbers = [2, 4, 6, 8, 10]\n    return numbers, target, product\nassert f(*g())\n", "emb": null, "idx_generation": 331, "target_skills": null, "problem_func": "import math\nfrom typing import*\ndef f(numbers: List[int], target: int = 0, product: int = 1) -> bool:\n    \"\"\"Check if the product of the numbers equals the target.\"\"\"\n    return product == target and product == math.prod(numbers)", "solution_func": "def g(target: int = 0, product: int = 1):\n    numbers = [2, 4, 6, 8, 10]\n    return numbers, target, product", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], row_sum: int = 0, col_sum: int = 0) -> bool:\n    \"\"\"Check if the sum of each row and column in the matrix equals the specified values.\"\"\"\n    sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    return sums == [row_sum] * len(matrix) and col_sums == [col_sum] * len(matrix[0])\ndef g(row_sum: int = 0, col_sum: int = 0):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix, row_sum, col_sum\nassert f(*g())\n", "emb": null, "idx_generation": 331, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], row_sum: int = 0, col_sum: int = 0) -> bool:\n    \"\"\"Check if the sum of each row and column in the matrix equals the specified values.\"\"\"\n    sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    return sums == [row_sum] * len(matrix) and col_sums == [col_sum] * len(matrix[0])", "solution_func": "def g(row_sum: int = 0, col_sum: int = 0):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix, row_sum, col_sum", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(a: int, b: int, c: int, d: int, e: int, f: int, g: int, h: int) -> bool:\n    \"\"\"Check if the given quadratic equation has real solutions\"\"\"\n    delta = b ** 2 - 4 * a * c\n    return delta >= 0\ndef g(a = 1, b = 2, c = 1):\n    return (a, b, c)\nassert f(*g())\n", "emb": null, "idx_generation": 331, "target_skills": null, "problem_func": "from typing import*\ndef f(a: int, b: int, c: int, d: int, e: int, f: int, g: int, h: int) -> bool:\n    \"\"\"Check if the given quadratic equation has real solutions\"\"\"\n    delta = b ** 2 - 4 * a * c\n    return delta >= 0", "solution_func": "def g(a = 1, b = 2, c = 1):\n    return (a, b, c)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, m: int, k: int) -> bool:\n    \"\"\"Check if the sum of the first n terms of a geometric sequence is equal to m\"\"\"\n    return (k ** n - 1) // (k - 1) == m\ndef g(m = 1092, k = 3):\n    return (m, k)\nassert f(*g())\n", "emb": null, "idx_generation": 331, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m: int, k: int) -> bool:\n    \"\"\"Check if the sum of the first n terms of a geometric sequence is equal to m\"\"\"\n    return (k ** n - 1) // (k - 1) == m", "solution_func": "def g(m = 1092, k = 3):\n    return (m, k)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(a: int, b: int, c: int, d: int) -> bool:\n    \"\"\"Check if the given system of equations has a unique solution\"\"\"\n    det = a * d - b * c\n    return det != 0\ndef g(a = 3, b = 2, c = 4, d = 6):\n    return (a, b, c, d)\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 331, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(a: int, b: int, c: int, d: int) -> bool:\n    \"\"\"Check if the given system of equations has a unique solution\"\"\"\n    det = a * d - b * c\n    return det != 0", "solution_func": "def g(a = 3, b = 2, c = 4, d = 6):\n    return (a, b, c, d)", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport datetime\n\ndef f(d: datetime.datetime, s: str = 'Saturday') -> bool:\n    \"\"\"Check if the given date is on a specific day of the week\"\"\"\n    return d.strftime('%A') == s\n\ndef g(s: str = 'Saturday'):\n    return datetime.datetime.strptime(s, '%A')\n\nassert f(g())\n", "emb": null, "idx_generation": 331, "target_skills": null, "problem_func": "from typing import*\nimport datetime\n\ndef f(d: datetime.datetime, s: str = 'Saturday') -> bool:\n    \"\"\"Check if the given date is on a specific day of the week\"\"\"\n    return d.strftime('%A') == s", "solution_func": "def g(s: str = 'Saturday'):\n    return datetime.datetime.strptime(s, '%A')", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(n: int, x: int = 0) -> bool:\n    \"\"\"Check if the given number is a perfect square\"\"\"\n    return math.isqrt(n+x)**2 == n+x\n\ndef g(x: int = 0):\n    return x**2\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 331, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, x: int = 0) -> bool:\n    \"\"\"Check if the given number is a perfect square\"\"\"\n    return math.isqrt(n+x)**2 == n+x", "solution_func": "def g(x: int = 0):\n    return x**2", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, x: int = 3) -> bool:\n    \"\"\"Check if the given string is a palindrome\"\"\"\n    return s == s[::-1]\n\ndef g(x: int = 3):\n    return str(x)\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 331, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, x: int = 3) -> bool:\n    \"\"\"Check if the given string is a palindrome\"\"\"\n    return s == s[::-1]", "solution_func": "def g(x: int = 3):\n    return str(x)", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of integers in the list that sums up to the target.\"\"\"\n    return any((x + y == target for i, x in enumerate(nums) for j, y in enumerate(nums) if i != j))\ndef g(nums: List[int], target: int):\n    return nums, target\nassert f(g())\n", "emb": null, "idx_generation": 331, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of integers in the list that sums up to the target.\"\"\"\n    return any((x + y == target for i, x in enumerate(nums) for j, y in enumerate(nums) if i != j))", "solution_func": "def g(nums: List[int], target: int):\n    return nums, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, x=100, y=200) -> bool:\n    \"\"\"Check if the sum of n consecutive integers starting from x is equal to y\"\"\"\n    return n * (2 * x + n - 1) // 2 == y\ndef g(x=100, y=200):\n    n = 1\n    while True:\n        if f(n, x, y):\n            return n\n        n += 1\nassert f(g())\n", "emb": null, "idx_generation": 332, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, x=100, y=200) -> bool:\n    \"\"\"Check if the sum of n consecutive integers starting from x is equal to y\"\"\"\n    return n * (2 * x + n - 1) // 2 == y", "solution_func": "def g(x=100, y=200):\n    n = 1\n    while True:\n        if f(n, x, y):\n            return n\n        n += 1", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, x=5, y=80) -> bool:\n    \"\"\"Check if the product of n consecutive integers starting from x is equal to y\"\"\"\n    prod = 1\n    for i in range(n):\n        prod *= x + i\n    return prod == y\ndef g(x=5, y=80):\n    n = 1\n    while True:\n        if f(n, x, y):\n            return n\n        n += 1\nassert f(g())\n", "emb": null, "idx_generation": 332, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, x=5, y=80) -> bool:\n    \"\"\"Check if the product of n consecutive integers starting from x is equal to y\"\"\"\n    prod = 1\n    for i in range(n):\n        prod *= x + i\n    return prod == y", "solution_func": "def g(x=5, y=80):\n    n = 1\n    while True:\n        if f(n, x, y):\n            return n\n        n += 1", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=10, b=25) -> bool:\n    \"\"\"Check if the square root of n is between a and b\"\"\"\n    return a <= math.sqrt(n) <= b\ndef g(a=10, b=25):\n    n = a ** 2\n    while True:\n        if f(n, a, b):\n            return n\n        n += 1\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 332, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, a=10, b=25) -> bool:\n    \"\"\"Check if the square root of n is between a and b\"\"\"\n    return a <= math.sqrt(n) <= b", "solution_func": "def g(a=10, b=25):\n    n = a ** 2\n    while True:\n        if f(n, a, b):\n            return n\n        n += 1", "map_ix": [0, 0, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers lst, find if there exist two indices i and j such that lst[i] + lst[j] == n.\n    \"\"\"\n    return any(lst[i] + lst[j] == n for i in range(len(lst)) for j in range(i+1, len(lst)))\ndef g(lst: List[int]):\n    return next((i, j) for i in range(len(lst)) for j in range(i+1, len(lst)) if lst[i] + lst[j] == sum(lst))\nassert f(g())\n", "emb": null, "idx_generation": 332, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers lst, find if there exist two indices i and j such that lst[i] + lst[j] == n.\n    \"\"\"\n    return any(lst[i] + lst[j] == n for i in range(len(lst)) for j in range(i+1, len(lst)))", "solution_func": "def g(lst: List[int]):\n    return next((i, j) for i in range(len(lst)) for j in range(i+1, len(lst)) if lst[i] + lst[j] == sum(lst))", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers lst and a target integer, find if there exist three elements in lst such that their sum is equal to the target.\n    \"\"\"\n    return any(lst[i] + lst[j] + lst[k] == target for i in range(len(lst)) for j in range(i+1, len(lst)) for k in range(j+1, len(lst)))\ndef g(lst: List[int], target: int):\n    return next((lst[i], lst[j], lst[k]) for i in range(len(lst)) for j in range(i+1, len(lst)) for k in range(j+1, len(lst)) if lst[i] + lst[j] + lst[k] == target)\nassert f(g())\n", "emb": null, "idx_generation": 332, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers lst and a target integer, find if there exist three elements in lst such that their sum is equal to the target.\n    \"\"\"\n    return any(lst[i] + lst[j] + lst[k] == target for i in range(len(lst)) for j in range(i+1, len(lst)) for k in range(j+1, len(lst)))", "solution_func": "def g(lst: List[int], target: int):\n    return next((lst[i], lst[j], lst[k]) for i in range(len(lst)) for j in range(i+1, len(lst)) for k in range(j+1, len(lst)) if lst[i] + lst[j] + lst[k] == target)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exist two elements in lst such that their sum is equal to 10.\n    \"\"\"\n    return any(lst[i] + lst[j] == 10 for i in range(len(lst)) for j in range(i+1, len(lst)))\ndef g(lst: List[int]):\n    return next((lst[i], lst[j]) for i in range(len(lst)) for j in range(i+1, len(lst)) if lst[i] + lst[j] == 10)\nassert f(g())\n", "emb": null, "idx_generation": 332, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exist two elements in lst such that their sum is equal to 10.\n    \"\"\"\n    return any(lst[i] + lst[j] == 10 for i in range(len(lst)) for j in range(i+1, len(lst)))", "solution_func": "def g(lst: List[int]):\n    return next((lst[i], lst[j]) for i in range(len(lst)) for j in range(i+1, len(lst)) if lst[i] + lst[j] == 10)", "map_ix": null}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13]) -> bool:\n    \"\"\"Check if n is divisible by all the primes in the list.\"\"\"\n    return all(n % p == 0 for p in primes)\ndef g(primes=[2, 3, 5, 7, 11, 13]):\n    from random import randint\n    n = primes[0]\n    while any(n % p != 0 for p in primes):\n        n += randint(1, 100)\n    return n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 332, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13]) -> bool:\n    \"\"\"Check if n is divisible by all the primes in the list.\"\"\"\n    return all(n % p == 0 for p in primes)", "solution_func": "def g(primes=[2, 3, 5, 7, 11, 13]):\n    from random import randint\n    n = primes[0]\n    while any(n % p != 0 for p in primes):\n        n += randint(1, 100)\n    return n", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, m: int, nums=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the product of any two distinct numbers in the list is divisible by n and m.\"\"\"\n    return any((x * y) % n == 0 and (x * y) % m == 0 for i, x in enumerate(nums) for y in nums[i + 1:])\ndef g(n: int, m: int, nums=[1, 2, 3, 4, 5]):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 332, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m: int, nums=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the product of any two distinct numbers in the list is divisible by n and m.\"\"\"\n    return any((x * y) % n == 0 and (x * y) % m == 0 for i, x in enumerate(nums) for y in nums[i + 1:])", "solution_func": "def g(n: int, m: int, nums=[1, 2, 3, 4, 5]):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are four numbers in the list that sum up to the target.\"\"\"\n    from itertools import combinations\n    return any(sum(c) == target for c in combinations(nums, 4))\ndef g(nums):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 332, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are four numbers in the list that sum up to the target.\"\"\"\n    from itertools import combinations\n    return any(sum(c) == target for c in combinations(nums, 4))", "solution_func": "def g(nums):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n = 3, target = 'abc') -> bool:\n    \"\"\"\n    Find if the string 'abc' appears exactly n times in the given string s.\n    \"\"\"\n    count = s.count(target)\n    return count == n\ndef g(n = 3, target = 'abc'):\n    return target * n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 332, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n = 3, target = 'abc') -> bool:\n    \"\"\"\n    Find if the string 'abc' appears exactly n times in the given string s.\n    \"\"\"\n    count = s.count(target)\n    return count == n", "solution_func": "def g(n = 3, target = 'abc'):\n    return target * n", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(num: int, x=5, y=7) -> bool:\n    \"\"\"\n    Determine if the given number is a multiple of x and y, and if it is divisible by the sum of x and y.\n\n    Sample Input:\n    num = 35\n\n    Sample Output:\n    True\n    \"\"\"\n    return num % x == 0 and num % y == 0 and num % (x + y) == 0\n\ndef g(x=5, y=7):\n    num = x * y * (x + y)\n    return num\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 333, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(num: int, x=5, y=7) -> bool:\n    \"\"\"\n    Determine if the given number is a multiple of x and y, and if it is divisible by the sum of x and y.\n\n    Sample Input:\n    num = 35\n\n    Sample Output:\n    True\n    \"\"\"\n    return num % x == 0 and num % y == 0 and num % (x + y) == 0", "solution_func": "def g(x=5, y=7):\n    num = x * y * (x + y)\n    return num", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(arr: List[int], n=5) -> bool:\n    \"\"\"\n    Given a list of integers, find the number of pairs that sum up to n.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    2\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == n:\n                count += 1\n    return count\n\ndef g(arr=[1, 2, 3, 4, 5], n=5):\n    return random.sample(arr, len(arr))\n\nassert f(g())\n", "emb": null, "idx_generation": 333, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(arr: List[int], n=5) -> bool:\n    \"\"\"\n    Given a list of integers, find the number of pairs that sum up to n.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    2\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == n:\n                count += 1\n    return count", "solution_func": "def g(arr=[1, 2, 3, 4, 5], n=5):\n    return random.sample(arr, len(arr))", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(words: List[str], letter_counts={'a': 2, 'b': 1, 'c': 3}) -> bool:\n    \"\"\"\n    Given a list of words, check if each word contains the specified letter counts.\n\n    Sample Input:\n    words = [\"cat\", \"aab\", \"cab\"]\n\n    Sample Output:\n    True\n    \"\"\"\n    for word in words:\n        counts = {letter: word.count(letter) for letter in letter_counts}\n        if counts != letter_counts:\n            return False\n    return True\n\ndef g(letter_counts={'a': 2, 'b': 1, 'c': 3}):\n    words = []\n    for letter in letter_counts:\n        word = letter * letter_counts[letter]\n        words.append(word)\n    return words\n\nassert f(g())\n", "emb": null, "idx_generation": 333, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], letter_counts={'a': 2, 'b': 1, 'c': 3}) -> bool:\n    \"\"\"\n    Given a list of words, check if each word contains the specified letter counts.\n\n    Sample Input:\n    words = [\"cat\", \"aab\", \"cab\"]\n\n    Sample Output:\n    True\n    \"\"\"\n    for word in words:\n        counts = {letter: word.count(letter) for letter in letter_counts}\n        if counts != letter_counts:\n            return False\n    return True", "solution_func": "def g(letter_counts={'a': 2, 'b': 1, 'c': 3}):\n    words = []\n    for letter in letter_counts:\n        word = letter * letter_counts[letter]\n        words.append(word)\n    return words", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=5, b=3, c=7, d=2) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers) - d\"\"\"\n    return n + a == (b * sum([i for i in range(1, c+1)])) - d\ndef g(a = 5, b = 3, c = 7, d = 2):\n    return -a + (b * sum([i for i in range(1, c+1)])) - d\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 333, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=5, b=3, c=7, d=2) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers) - d\"\"\"\n    return n + a == (b * sum([i for i in range(1, c+1)])) - d", "solution_func": "def g(a = 5, b = 3, c = 7, d = 2):\n    return -a + (b * sum([i for i in range(1, c+1)])) - d", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6]) -> bool:\n    \"\"\"Find n such that n is the maximum value in a random permutation of the given list\"\"\"\n    return n == max(random.sample(lst, len(lst)))\ndef g(lst=[1, 2, 3, 4, 5, 6]):\n    return max(random.sample(lst, len(lst)))\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 333, "target_skills": null, "problem_func": "from typing import*\nimport random\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6]) -> bool:\n    \"\"\"Find n such that n is the maximum value in a random permutation of the given list\"\"\"\n    return n == max(random.sample(lst, len(lst)))", "solution_func": "def g(lst=[1, 2, 3, 4, 5, 6]):\n    return max(random.sample(lst, len(lst)))", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6]) -> bool:\n    \"\"\"Find n such that n is the sum of the first half of the elements in the list\"\"\"\n    return n == sum(lst[:len(lst)//2])\ndef g(lst=[1, 2, 3, 4, 5, 6]):\n    return sum(lst[:len(lst)//2])\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 333, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6]) -> bool:\n    \"\"\"Find n such that n is the sum of the first half of the elements in the list\"\"\"\n    return n == sum(lst[:len(lst)//2])", "solution_func": "def g(lst=[1, 2, 3, 4, 5, 6]):\n    return sum(lst[:len(lst)//2])", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, m=15) -> bool:\n    \"\"\"Check if n is a multiple of m\"\"\"\n    return n % m == 0\ndef g(m = 15):\n    return m * 5\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 333, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m=15) -> bool:\n    \"\"\"Check if n is a multiple of m\"\"\"\n    return n % m == 0", "solution_func": "def g(m = 15):\n    return m * 5", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, c='a') -> bool:\n    \"\"\"Check if character c is present in string s\"\"\"\n    return c in s\ndef g(c = 'a'):\n    return 'abc'\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 333, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, c='a') -> bool:\n    \"\"\"Check if character c is present in string s\"\"\"\n    return c in s", "solution_func": "def g(c = 'a'):\n    return 'abc'", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(n: int, k=3) -> bool:\n    \"\"\"Check if n is a perfect square and divisible by k\"\"\"\n    return math.isqrt(n) ** 2 == n and n % k == 0\ndef g(k = 3):\n    return k ** 2 * 9\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 333, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, k=3) -> bool:\n    \"\"\"Check if n is a perfect square and divisible by k\"\"\"\n    return math.isqrt(n) ** 2 == n and n % k == 0", "solution_func": "def g(k = 3):\n    return k ** 2 * 9", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, substr='abc', count=3) -> bool:\n    \"\"\"\n    Check if a string contains a substring 'substr' that appears 'count' number of times.\n    \"\"\"\n    return s.count(substr) == count\ndef g(substr='abc', count=3):\n    return substr * count + \"xyz\" + substr * count\nassert f(g())\n", "emb": null, "idx_generation": 333, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substr='abc', count=3) -> bool:\n    \"\"\"\n    Check if a string contains a substring 'substr' that appears 'count' number of times.\n    \"\"\"\n    return s.count(substr) == count", "solution_func": "def g(substr='abc', count=3):\n    return substr * count + \"xyz\" + substr * count", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport re\n\ndef f(string: str, pattern=r'\\d{3}-\\d{3}-\\d{4}') -> bool:\n    \"\"\"Check if a string matches a given pattern\"\"\"\n    return bool(re.match(pattern, string))\n\ndef g(pattern=r'\\d{3}-\\d{3}-\\d{4}'):\n    return '123-456-7890'\n  \nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 334, "target_skills": null, "problem_func": "from typing import*\nimport re\n\ndef f(string: str, pattern=r'\\d{3}-\\d{3}-\\d{4}') -> bool:\n    \"\"\"Check if a string matches a given pattern\"\"\"\n    return bool(re.match(pattern, string))", "solution_func": "def g(pattern=r'\\d{3}-\\d{3}-\\d{4}'):\n    return '123-456-7890'", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(nums: list, target=50) -> bool:\n    \"\"\"Check if the sum of any two numbers in the list equals to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=50):\n    nums = [random.randint(1, 100) for _ in range(10)]\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 334, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(nums: list, target=50) -> bool:\n    \"\"\"Check if the sum of any two numbers in the list equals to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target=50):\n    nums = [random.randint(1, 100) for _ in range(10)]\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\ndef f(string: str, n=3) -> bool:\n    \"\"\"Check if the string contains at least 'n' number of vowels\"\"\"\n    vowels = 'aeiou'\n    count = 0\n    for char in string.lower():\n        if char in vowels:\n            count += 1\n    return count >= n\n\ndef g(n=3):\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    string = ''\n    for _ in range(n):\n        string += random.choice(vowels)\n        string += random.choice(consonants)\n    return string\n\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 334, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(string: str, n=3) -> bool:\n    \"\"\"Check if the string contains at least 'n' number of vowels\"\"\"\n    vowels = 'aeiou'\n    count = 0\n    for char in string.lower():\n        if char in vowels:\n            count += 1\n    return count >= n", "solution_func": "def g(n=3):\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    string = ''\n    for _ in range(n):\n        string += random.choice(vowels)\n        string += random.choice(consonants)\n    return string", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(nums = []):\n    from random import randint\n    target = randint(1, 10)\n    nums = [randint(1, 10) for _ in range(10)]\n    return nums, target\nassert f(*g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 334, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(nums = []):\n    from random import randint\n    target = randint(1, 10)\n    nums = [randint(1, 10) for _ in range(10)]\n    return nums, target", "map_ix": [1, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target number is present in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(matrix = []):\n    from random import randint\n    matrix = [[randint(1, 10) for _ in range(5)] for _ in range(5)]\n    target = randint(1, 10)\n    return matrix, target\nassert f(*g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 334, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target number is present in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(matrix = []):\n    from random import randint\n    matrix = [[randint(1, 10) for _ in range(5)] for _ in range(5)]\n    target = randint(1, 10)\n    return matrix, target", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a subset of the numbers that sum up to the target.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n    for i in range(1, n + 1):\n        for j in range(target + 1):\n            if j >= nums[i-1]:\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-nums[i-1]]\n            else:\n                dp[i][j] = dp[i-1][j]\n    return dp[n][target]\ndef g(nums = []):\n    from random import randint\n    nums = [randint(1, 10) for _ in range(5)]\n    target = randint(1, 20)\n    return nums, target\nassert f(*g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 334, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a subset of the numbers that sum up to the target.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n    for i in range(1, n + 1):\n        for j in range(target + 1):\n            if j >= nums[i-1]:\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-nums[i-1]]\n            else:\n                dp[i][j] = dp[i-1][j]\n    return dp[n][target]", "solution_func": "def g(nums = []):\n    from random import randint\n    nums = [randint(1, 10) for _ in range(5)]\n    target = randint(1, 20)\n    return nums, target", "map_ix": [1, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"\n    Find a pair of numbers in the list that add up to n.\n    \"\"\"\n    return any(nums[i] + nums[j] == n for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return next((nums[i], nums[j]) for i in range(len(nums)) for j in range(i+1, len(nums)) if nums[i] + nums[j] == n)\nassert f(g())\n", "emb": null, "idx_generation": 334, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"\n    Find a pair of numbers in the list that add up to n.\n    \"\"\"\n    return any(nums[i] + nums[j] == n for i in range(len(nums)) for j in range(i+1, len(nums)))", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return next((nums[i], nums[j]) for i in range(len(nums)) for j in range(i+1, len(nums)) if nums[i] + nums[j] == n)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, substr='abc') -> bool:\n    \"\"\"\n    Check if a given string contains a specific substring.\n    \"\"\"\n    return substr in string\ndef g(substr='abc'):\n    return 'abcdefg'\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 334, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, substr='abc') -> bool:\n    \"\"\"\n    Check if a given string contains a specific substring.\n    \"\"\"\n    return substr in string", "solution_func": "def g(substr='abc'):\n    return 'abcdefg'", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Check if there are three distinct numbers in a list that add up to a target number.\n    \"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 334, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Check if there are three distinct numbers in a list that add up to a target number.\n    \"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]", "map_ix": [1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Find if there are three numbers in the list that sum up to the target value.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(lst, 3))\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    from itertools import combinations\n    return next(comb for comb in combinations(lst, 3) if sum(comb) == 10)\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 334, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Find if there are three numbers in the list that sum up to the target value.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(lst, 3))", "solution_func": "def g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    from itertools import combinations\n    return next(comb for comb in combinations(lst, 3) if sum(comb) == 10)", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"\n    Check if a number n is a product of any two distinct prime numbers in the given list.\n    \"\"\"\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            if primes[i] * primes[j] == n:\n                return True\n    return False\n\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    \"\"\"\n    Generate a number that is a product of any two distinct prime numbers in the given list.\n    \"\"\"\n    return primes[0] * primes[1]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 335, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"\n    Check if a number n is a product of any two distinct prime numbers in the given list.\n    \"\"\"\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            if primes[i] * primes[j] == n:\n                return True\n    return False", "solution_func": "def g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    \"\"\"\n    Generate a number that is a product of any two distinct prime numbers in the given list.\n    \"\"\"\n    return primes[0] * primes[1]", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray) -> bool:\n    \"\"\"\n    Check if the given 2D numpy array has a row that contains all zeros.\n    \"\"\"\n    return any(np.all(row == 0) for row in arr)\n\ndef g():\n    \"\"\"\n    Generate a 2D numpy array with a row that contains all zeros.\n    \"\"\"\n    return np.array([[1, 2, 3], [0, 0, 0], [4, 5, 6]])\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 335, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray) -> bool:\n    \"\"\"\n    Check if the given 2D numpy array has a row that contains all zeros.\n    \"\"\"\n    return any(np.all(row == 0) for row in arr)", "solution_func": "def g():\n    \"\"\"\n    Generate a 2D numpy array with a row that contains all zeros.\n    \"\"\"\n    return np.array([[1, 2, 3], [0, 0, 0], [4, 5, 6]])", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"\n    Check if a number n is a prime number.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    \"\"\"\n    Generate a prime number from the given list.\n    \"\"\"\n    return primes[-1]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 335, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"\n    Check if a number n is a prime number.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "solution_func": "def g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    \"\"\"\n    Generate a prime number from the given list.\n    \"\"\"\n    return primes[-1]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(li: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, find the sum of the squares of all even numbers in the list.\n    \"\"\"\n    even_numbers = [x for x in li if x % 2 == 0]\n    sum_of_squares = sum([x**2 for x in even_numbers])\n    return sum_of_squares % 2 == 0\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 335, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(li: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, find the sum of the squares of all even numbers in the list.\n    \"\"\"\n    even_numbers = [x for x in li if x % 2 == 0]\n    sum_of_squares = sum([x**2 for x in even_numbers])\n    return sum_of_squares % 2 == 0", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, li: List[int]) -> bool:\n    \"\"\"\n    Given an integer and a list of integers, find if the integer is a factor of the sum of all the numbers in the list.\n    \"\"\"\n    sum_of_numbers = sum(li)\n    return sum_of_numbers % n == 0\n\ndef g():\n    return 5, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 335, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(n: int, li: List[int]) -> bool:\n    \"\"\"\n    Given an integer and a list of integers, find if the integer is a factor of the sum of all the numbers in the list.\n    \"\"\"\n    sum_of_numbers = sum(li)\n    return sum_of_numbers % n == 0", "solution_func": "def g():\n    return 5, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(li: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a pair of numbers in the list whose sum is equal to 10.\n    \"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i] + li[j] == 10:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 335, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(li: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a pair of numbers in the list whose sum is equal to 10.\n    \"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i] + li[j] == 10:\n                return True\n    return False", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int, num_pairs=2) -> bool:\n    \"\"\"Find if there are num_pairs of numbers that sum up to target\"\"\"\n    from itertools import combinations\n    for pair in combinations(nums, num_pairs):\n        if sum(pair) == target:\n            return True\n    return False\ndef g(target = 10, num_pairs = 2):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n", "emb": null, "idx_generation": 335, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int, num_pairs=2) -> bool:\n    \"\"\"Find if there are num_pairs of numbers that sum up to target\"\"\"\n    from itertools import combinations\n    for pair in combinations(nums, num_pairs):\n        if sum(pair) == target:\n            return True\n    return False", "solution_func": "def g(target = 10, num_pairs = 2):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int, row=2, col=2) -> bool:\n    \"\"\"Find if the sum of elements in the submatrix of size (row, col) is equal to target\"\"\"\n    for i in range(len(matrix) - row + 1):\n        for j in range(len(matrix[0]) - col + 1):\n            submatrix_sum = sum(sum(row[j:j+col]) for row in matrix[i:i+row])\n            if submatrix_sum == target:\n                return True\n    return False\ndef g(target = 15, row = 2, col = 2):\n    return [[1, 2, 3, 4],\n            [5, 6, 7, 8],\n            [9, 10, 11, 12],\n            [13, 14, 15, 16]]\nassert f(g())\n", "emb": null, "idx_generation": 335, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int, row=2, col=2) -> bool:\n    \"\"\"Find if the sum of elements in the submatrix of size (row, col) is equal to target\"\"\"\n    for i in range(len(matrix) - row + 1):\n        for j in range(len(matrix[0]) - col + 1):\n            submatrix_sum = sum(sum(row[j:j+col]) for row in matrix[i:i+row])\n            if submatrix_sum == target:\n                return True\n    return False", "solution_func": "def g(target = 15, row = 2, col = 2):\n    return [[1, 2, 3, 4],\n            [5, 6, 7, 8],\n            [9, 10, 11, 12],\n            [13, 14, 15, 16]]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(words: List[str], prefix='s', suffix='ed', length=5) -> bool:\n    \"\"\"Find if there exists a word in the list that starts with prefix, ends with suffix, and has length characters\"\"\"\n    for word in words:\n        if word.startswith(prefix) and word.endswith(suffix) and len(word) == length:\n            return True\n    return False\ndef g(prefix = 's', suffix = 'ed', length = 5):\n    return ['started', 'stopped', 'skipped', 'jumped', 'walked']\nassert f(g())\n", "emb": null, "idx_generation": 335, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], prefix='s', suffix='ed', length=5) -> bool:\n    \"\"\"Find if there exists a word in the list that starts with prefix, ends with suffix, and has length characters\"\"\"\n    for word in words:\n        if word.startswith(prefix) and word.endswith(suffix) and len(word) == length:\n            return True\n    return False", "solution_func": "def g(prefix = 's', suffix = 'ed', length = 5):\n    return ['started', 'stopped', 'skipped', 'jumped', 'walked']", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, a=[1, 2, 3, 4, 5], b=[6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the sum of elements in list a is equal to the sum of elements in list b\"\"\"\n    return sum(a) == sum(b)\ndef g(a=[1, 2, 3, 4, 5], b=[6, 7, 8, 9, 10]):\n    return sum(a)\nassert f(g())\n", "emb": null, "idx_generation": 335, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, a=[1, 2, 3, 4, 5], b=[6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the sum of elements in list a is equal to the sum of elements in list b\"\"\"\n    return sum(a) == sum(b)", "solution_func": "def g(a=[1, 2, 3, 4, 5], b=[6, 7, 8, 9, 10]):\n    return sum(a)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(lst: list, num=6, word='apple') -> bool:\n    \"\"\"Check if the number of occurrences of a word in a list is equal to a given number.\"\"\"\n    return lst.count(word) == num\ndef g(num=6, word='apple'):\n    return ['banana', 'apple', 'orange', 'apple', 'grape', 'apple', 'kiwi', 'apple', 'pineapple'].count(word)\nassert f(g())\n", "emb": null, "idx_generation": 336, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: list, num=6, word='apple') -> bool:\n    \"\"\"Check if the number of occurrences of a word in a list is equal to a given number.\"\"\"\n    return lst.count(word) == num", "solution_func": "def g(num=6, word='apple'):\n    return ['banana', 'apple', 'orange', 'apple', 'grape', 'apple', 'kiwi', 'apple', 'pineapple'].count(word)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(nums: list, target=100) -> bool:\n    \"\"\"Check if there is a pair of numbers in a list that sum up to a given target number.\"\"\"\n    return any((x + y == target for x in nums for y in nums if x != y))\ndef g(target=100):\n    nums = [random.randint(1, 50) for _ in range(10)]\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 336, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(nums: list, target=100) -> bool:\n    \"\"\"Check if there is a pair of numbers in a list that sum up to a given target number.\"\"\"\n    return any((x + y == target for x in nums for y in nums if x != y))", "solution_func": "def g(target=100):\n    nums = [random.randint(1, 50) for _ in range(10)]\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, count=3) -> bool:\n    \"\"\"Check if a string contains at least a given number of vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return sum((ch in vowels for ch in s.lower())) >= count\ndef g(count=3):\n    return 'hello world'\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 336, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, count=3) -> bool:\n    \"\"\"Check if a string contains at least a given number of vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return sum((ch in vowels for ch in s.lower())) >= count", "solution_func": "def g(count=3):\n    return 'hello world'", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, a=42, b=314159, c=271828) -> bool:\n    \"\"\"Check if the sum of three integers is equal to a given number.\"\"\"\n    return (a + b + c) == n\ndef g(a=42, b=314159, c=271828):\n    return a + b + c\nassert f(g(), n=627029)\n", "emb": null, "idx_generation": 336, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=42, b=314159, c=271828) -> bool:\n    \"\"\"Check if the sum of three integers is equal to a given number.\"\"\"\n    return (a + b + c) == n", "solution_func": "def g(a=42, b=314159, c=271828):\n    return a + b + c", "map_ix": null}, {"fitness": 1.0, "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is prime.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef g():\n    i = 2\n    while True:\n        if f(i):\n            return i\n        i += 1\nassert f(g())\n", "emb": [1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0], "idx_generation": 336, "target_skills": null, "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is prime.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True", "solution_func": "def g():\n    i = 2\n    while True:\n        if f(i):\n            return i\n        i += 1", "map_ix": [1, 1, 1, 1, 0, 1, 0, 1, 1, 1]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, a=2, b=3, c=4) -> bool:\n    \"\"\"Check if the sum of three integers is divisible by a given number.\"\"\"\n    return (a + b + c) % n == 0\ndef g(a=2, b=3, c=4):\n    return a + b + c\nassert f(g(), n=9)\n", "emb": null, "idx_generation": 336, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=2, b=3, c=4) -> bool:\n    \"\"\"Check if the sum of three integers is divisible by a given number.\"\"\"\n    return (a + b + c) % n == 0", "solution_func": "def g(a=2, b=3, c=4):\n    return a + b + c", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(matrix: List[List[int]], target=10, rows=3, cols=3) -> bool:\n    \"\"\"Find if there exists a submatrix of size rows x cols whose sum is equal to the target.\"\"\"\n    for row in matrix:\n        assert len(row) == cols\n    assert len(matrix) == rows\n    for i in range(rows):\n        for j in range(cols):\n            submatrix_sum = sum([matrix[x][y] for x in range(i, i+rows) for y in range(j, j+cols)])\n            if submatrix_sum == target:\n                return True\n    return False\n\ndef g(target=10, rows=3, cols=3):\n    import random\n    matrix = [[random.randint(1, 9) for _ in range(cols)] for _ in range(rows)]\n    return matrix\n\nassert f(g())\n", "emb": null, "idx_generation": 336, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(matrix: List[List[int]], target=10, rows=3, cols=3) -> bool:\n    \"\"\"Find if there exists a submatrix of size rows x cols whose sum is equal to the target.\"\"\"\n    for row in matrix:\n        assert len(row) == cols\n    assert len(matrix) == rows\n    for i in range(rows):\n        for j in range(cols):\n            submatrix_sum = sum([matrix[x][y] for x in range(i, i+rows) for y in range(j, j+cols)])\n            if submatrix_sum == target:\n                return True\n    return False", "solution_func": "def g(target=10, rows=3, cols=3):\n    import random\n    matrix = [[random.randint(1, 9) for _ in range(cols)] for _ in range(rows)]\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, substring='puzzle', case_sensitive=False) -> bool:\n    \"\"\"Check if the substring is present in the string.\"\"\"\n    if not case_sensitive:\n        string = string.lower()\n        substring = substring.lower()\n    return substring in string\n\ndef g(substring='puzzle', case_sensitive=False):\n    string = \"This is a puzzle that needs to be solved.\"\n    return string\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 336, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, substring='puzzle', case_sensitive=False) -> bool:\n    \"\"\"Check if the substring is present in the string.\"\"\"\n    if not case_sensitive:\n        string = string.lower()\n        substring = substring.lower()\n    return substring in string", "solution_func": "def g(substring='puzzle', case_sensitive=False):\n    string = \"This is a puzzle that needs to be solved.\"\n    return string", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list whose sum is equal to the target.\"\"\"\n    return any([target - num in numbers for num in numbers])\n\ndef g(target=10):\n    import random\n    numbers = [random.randint(1, 9) for _ in range(10)]\n    return numbers\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 336, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list whose sum is equal to the target.\"\"\"\n    return any([target - num in numbers for num in numbers])", "solution_func": "def g(target=10):\n    import random\n    numbers = [random.randint(1, 9) for _ in range(10)]\n    return numbers", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(arr: List[int], target=20) -> bool:\n    \"\"\"Check if the sum of any three numbers in the list is equal to the target\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(arr, 3))\ndef g(target=20):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n", "emb": null, "idx_generation": 336, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(arr: List[int], target=20) -> bool:\n    \"\"\"Check if the sum of any three numbers in the list is equal to the target\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(arr, 3))", "solution_func": "def g(target=20):\n    return [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(phrase: str, target = 'python') -> bool:\n    \"\"\"Check if the target word is a substring of the given phrase\"\"\"\n    return target in phrase.lower()\ndef g(target = 'python'):\n    return target\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 337, "target_skills": null, "problem_func": "from typing import*\ndef f(phrase: str, target = 'python') -> bool:\n    \"\"\"Check if the target word is a substring of the given phrase\"\"\"\n    return target in phrase.lower()", "solution_func": "def g(target = 'python'):\n    return target", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, m: int, k: int) -> bool:\n    \"\"\"Check if the sum of n, m, and k is divisible by 3\"\"\"\n    return (n + m + k) % 3 == 0\ndef g(n: int, m: int, k: int):\n    return n, m, k\nassert f(*g(3, 6, 9))\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 337, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m: int, k: int) -> bool:\n    \"\"\"Check if the sum of n, m, and k is divisible by 3\"\"\"\n    return (n + m + k) % 3 == 0", "solution_func": "def g(n: int, m: int, k: int):\n    return n, m, k", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        if target - num in num_set:\n            return True\n    return False\ndef g(nums: List[int], target: int):\n    return nums, target\nassert f(*g([1, 2, 3, 4, 5], 8))\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 337, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        if target - num in num_set:\n            return True\n    return False", "solution_func": "def g(nums: List[int], target: int):\n    return nums, target", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: List[int], n=10, s=100) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 10, s = 100):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 337, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], n=10, s=100) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])", "solution_func": "def g(n = 10, s = 100):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x", "map_ix": [0, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(inds: List[int], s='abcdefg', target='c') -> bool:\n    \"\"\"Find the three slice indices that give the specific target in string s\"\"\"\n    (i, j, k) = inds\n    return s[i:j:k] == target\ndef g(s = 'abcdefg', target = 'c'):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 337, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(inds: List[int], s='abcdefg', target='c') -> bool:\n    \"\"\"Find the three slice indices that give the specific target in string s\"\"\"\n    (i, j, k) = inds\n    return s[i:j:k] == target", "solution_func": "def g(s = 'abcdefg', target = 'c'):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(t: str, s='aabbcc') -> bool:\n    \"\"\"Add parentheses to the beginning and end of s to make all parentheses balanced\"\"\"\n    for i in range(len(t) + 1):\n        depth = t[:i].count('a') - t[:i].count('b')\n        assert depth >= 0\n    return depth == 0 and s in t\ndef g(s = 'aabbcc'):\n    return \"a\" * s.count(\"b\") + s + \"b\" * s.count(\"a\")\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 337, "target_skills": null, "problem_func": "from typing import*\ndef f(t: str, s='aabbcc') -> bool:\n    \"\"\"Add parentheses to the beginning and end of s to make all parentheses balanced\"\"\"\n    for i in range(len(t) + 1):\n        depth = t[:i].count('a') - t[:i].count('b')\n        assert depth >= 0\n    return depth == 0 and s in t", "solution_func": "def g(s = 'aabbcc'):\n    return \"a\" * s.count(\"b\") + s + \"b\" * s.count(\"a\")", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, a=10, b=-5, c=3) -> bool:\n    \"\"\"Check if a point is inside a sphere.\"\"\"\n    return math.sqrt((x-a)**2 + (y-b)**2 + (z-c)**2) <= 5\n\ndef g(a=10, b=-5, c=3):\n    return (a, b, c)\n\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 337, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, a=10, b=-5, c=3) -> bool:\n    \"\"\"Check if a point is inside a sphere.\"\"\"\n    return math.sqrt((x-a)**2 + (y-b)**2 + (z-c)**2) <= 5", "solution_func": "def g(a=10, b=-5, c=3):\n    return (a, b, c)", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport datetime\n\ndef f(d: datetime.date, d1=datetime.date(2022, 1, 1), d2=datetime.date(2022, 12, 31)) -> bool:\n    \"\"\"Check if a date is within a specified range.\"\"\"\n    return d1 <= d <= d2\n\ndef g(d1=datetime.date(2022, 1, 1), d2=datetime.date(2022, 12, 31)):\n    return datetime.date.today()\n\nassert f(g())\n", "emb": null, "idx_generation": 337, "target_skills": null, "problem_func": "from typing import*\nimport datetime\n\ndef f(d: datetime.date, d1=datetime.date(2022, 1, 1), d2=datetime.date(2022, 12, 31)) -> bool:\n    \"\"\"Check if a date is within a specified range.\"\"\"\n    return d1 <= d <= d2", "solution_func": "def g(d1=datetime.date(2022, 1, 1), d2=datetime.date(2022, 12, 31)):\n    return datetime.date.today()", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(string: str, n: int, m: int, k: int, x='a', y='b', z='c') -> bool:\n    \"\"\"Check if a string contains a specific pattern.\"\"\"\n    return string.count(x) == n and string.count(y) == m and string.count(z) == k\n\ndef g(n: int, m: int, k: int, x='a', y='b', z='c'):\n    return x * n + y * m + z * k\n\nassert f(g(), n=3, m=2, k=1)\n", "emb": null, "idx_generation": 337, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, n: int, m: int, k: int, x='a', y='b', z='c') -> bool:\n    \"\"\"Check if a string contains a specific pattern.\"\"\"\n    return string.count(x) == n and string.count(y) == m and string.count(z) == k", "solution_func": "def g(n: int, m: int, k: int, x='a', y='b', z='c'):\n    return x * n + y * m + z * k", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(words: List[str], target_length=5) -> bool:\n    \"\"\"\n    Check if all words in the list have a length less than or equal to the target length.\n    \"\"\"\n    return all(len(word) <= target_length for word in words)\n\ndef g(target_length = 5):\n    return [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]\n\nassert f(g())\n", "emb": null, "idx_generation": 337, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], target_length=5) -> bool:\n    \"\"\"\n    Check if all words in the list have a length less than or equal to the target length.\n    \"\"\"\n    return all(len(word) <= target_length for word in words)", "solution_func": "def g(target_length = 5):\n    return [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=10, b=3, c=5) -> bool:\n    \"\"\"Find n that when divided by a is b and leaves a remainder of c\"\"\"\n    return n % a == c and n // a == b\ndef g(a=10, b=3, c=5):\n    return (a * b) + c\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 338, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=10, b=3, c=5) -> bool:\n    \"\"\"Find n that when divided by a is b and leaves a remainder of c\"\"\"\n    return n % a == c and n // a == b", "solution_func": "def g(a=10, b=3, c=5):\n    return (a * b) + c", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\ndef g(lst=[10, 20, 30, 40, 50, 60, 70, 80, 90]):\n    return lst\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 338, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False", "solution_func": "def g(lst=[10, 20, 30, 40, 50, 60, 70, 80, 90]):\n    return lst", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, search='python') -> bool:\n    \"\"\"Check if the search string is present in the given string\"\"\"\n    return search in s\ndef g(search='python'):\n    return \"I love programming in \" + search\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 338, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, search='python') -> bool:\n    \"\"\"Check if the search string is present in the given string\"\"\"\n    return search in s", "solution_func": "def g(search='python'):\n    return \"I love programming in \" + search", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers that sums up to a target value.\"\"\"\n    return sum(nums) == target\ndef g(target=100):\n    nums = [10, 20, 30, 40]\n    return nums\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 338, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers that sums up to a target value.\"\"\"\n    return sum(nums) == target", "solution_func": "def g(target=100):\n    nums = [10, 20, 30, 40]\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Find the indices of a target value in a given matrix.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == target:\n                return True\n    return False\ndef g(target=5):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 338, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Find the indices of a target value in a given matrix.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == target:\n                return True\n    return False", "solution_func": "def g(target=5):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a given list that sums up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=0):\n    nums = [1, -2, 3, 4, -5]\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 338, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a given list that sums up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target=0):\n    nums = [1, -2, 3, 4, -5]\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(num: int, n=10) -> bool:\n    \"\"\"\n    Given a number, return True if it is divisible by n, False otherwise.\n    \"\"\"\n    return num % n == 0\ndef g(n=10):\n    return n * 5\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 338, "target_skills": null, "problem_func": "from typing import*\ndef f(num: int, n=10) -> bool:\n    \"\"\"\n    Given a number, return True if it is divisible by n, False otherwise.\n    \"\"\"\n    return num % n == 0", "solution_func": "def g(n=10):\n    return n * 5", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"\n    Given a list of numbers, check if there are two numbers in the list that sum up to the target number.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=50):\n    nums = random.sample(range(1, 100), 10)\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 338, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"\n    Given a list of numbers, check if there are two numbers in the list that sum up to the target number.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target=50):\n    nums = random.sample(range(1, 100), 10)\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(words: List[str], n=5) -> bool:\n    \"\"\"\n    Given a list of words, check if there are n or more words that start with the letter 'a'.\n    \"\"\"\n    count = 0\n    for word in words:\n        if word[0] == 'a':\n            count += 1\n    return count >= n\ndef g(n=5):\n    words = ['apple', 'banana', 'avocado', 'orange', 'grape', 'apricot']\n    return words\nassert f(g())\n", "emb": null, "idx_generation": 338, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], n=5) -> bool:\n    \"\"\"\n    Given a list of words, check if there are n or more words that start with the letter 'a'.\n    \"\"\"\n    count = 0\n    for word in words:\n        if word[0] == 'a':\n            count += 1\n    return count >= n", "solution_func": "def g(n=5):\n    words = ['apple', 'banana', 'avocado', 'orange', 'grape', 'apricot']\n    return words", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=5, m=2) -> bool:\n    \"\"\"Check if a string contains a specific substring\"\"\"\n    return s.count('a'*n) >= m\ndef g(n = 5, m = 2):\n    return 'a'*n*m\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 338, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=5, m=2) -> bool:\n    \"\"\"Check if a string contains a specific substring\"\"\"\n    return s.count('a'*n) >= m", "solution_func": "def g(n = 5, m = 2):\n    return 'a'*n*m", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, numbers=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) -> bool:\n    \"\"\"Check if a number is a perfect square and divisible by all numbers in a list.\"\"\"\n    return (n ** 0.5).is_integer() and all(n % x == 0 for x in numbers)\ndef g(numbers = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]):\n    return numbers[-1] ** 2\nassert f(g())\n", "emb": null, "idx_generation": 339, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, numbers=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) -> bool:\n    \"\"\"Check if a number is a perfect square and divisible by all numbers in a list.\"\"\"\n    return (n ** 0.5).is_integer() and all(n % x == 0 for x in numbers)", "solution_func": "def g(numbers = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]):\n    return numbers[-1] ** 2", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, char='e', n=3) -> bool:\n    \"\"\"Check if a string has a specific character at least n times.\"\"\"\n    return s.count(char) >= n\ndef g(char = 'e', n = 3):\n    return char * n\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 339, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, char='e', n=3) -> bool:\n    \"\"\"Check if a string has a specific character at least n times.\"\"\"\n    return s.count(char) >= n", "solution_func": "def g(char = 'e', n = 3):\n    return char * n", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, numbers=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) -> bool:\n    \"\"\"Check if a number is a multiple of any number in a list.\"\"\"\n    return any(n % x == 0 for x in numbers)\ndef g(numbers = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]):\n    return numbers[-1] * 2\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 339, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, numbers=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) -> bool:\n    \"\"\"Check if a number is a multiple of any number in a list.\"\"\"\n    return any(n % x == 0 for x in numbers)", "solution_func": "def g(numbers = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]):\n    return numbers[-1] * 2", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target: int) -> bool:\n    \"\"\"\n    Find if there exists a pair of elements in the array such that their sum is equal to the target.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target: int):\n    return np.array([1, 2, 3, 4, 5])\n\nassert f(g(), 7)\n", "emb": null, "idx_generation": 339, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target: int) -> bool:\n    \"\"\"\n    Find if there exists a pair of elements in the array such that their sum is equal to the target.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g(target: int):\n    return np.array([1, 2, 3, 4, 5])", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, a=1, b=2, c=3) -> bool:\n    \"\"\"\n    Find if the given variables satisfy the equation sqrt(a*x + b*y + c*z) = (x + y + z)^2.\n    \"\"\"\n    return math.isclose(math.sqrt(a * x + b * y + c * z), (x + y + z) ** 2)\n\ndef g(a=1, b=2, c=3):\n    return [1.5, 2.5, 3.5]\n\nassert f(*g())\n", "emb": null, "idx_generation": 339, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, a=1, b=2, c=3) -> bool:\n    \"\"\"\n    Find if the given variables satisfy the equation sqrt(a*x + b*y + c*z) = (x + y + z)^2.\n    \"\"\"\n    return math.isclose(math.sqrt(a * x + b * y + c * z), (x + y + z) ** 2)", "solution_func": "def g(a=1, b=2, c=3):\n    return [1.5, 2.5, 3.5]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target: str) -> bool:\n    \"\"\"\n    Find if the target string can be formed by rearranging the characters of the given string.\n    \"\"\"\n    return sorted(s) == sorted(target)\n\ndef g():\n    return [\"python\", \"typhon\"]\n\nassert f(*g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 339, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target: str) -> bool:\n    \"\"\"\n    Find if the target string can be formed by rearranging the characters of the given string.\n    \"\"\"\n    return sorted(s) == sorted(target)", "solution_func": "def g():\n    return [\"python\", \"typhon\"]", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target: int):\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), target=7)\n", "emb": null, "idx_generation": 339, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target: int):\n    return [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n", "emb": [1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 339, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "solution_func": "def g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]", "map_ix": [1, 0, 1, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subarray in the list that sums up to the target\"\"\"\n    n = len(nums)\n    for i in range(n):\n        curr_sum = nums[i]\n        j = i + 1\n        while j <= n:\n            if curr_sum == target:\n                return True\n            if curr_sum > target or j == n:\n                break\n            curr_sum += nums[j]\n            j += 1\n    return False\n\ndef g(target: int):\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), target=9)\n", "emb": null, "idx_generation": 339, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subarray in the list that sums up to the target\"\"\"\n    n = len(nums)\n    for i in range(n):\n        curr_sum = nums[i]\n        j = i + 1\n        while j <= n:\n            if curr_sum == target:\n                return True\n            if curr_sum > target or j == n:\n                break\n            curr_sum += nums[j]\n            j += 1\n    return False", "solution_func": "def g(target: int):\n    return [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Find three numbers in the list whose sum is equal to the target\"\"\"\n    return any(sum(comb) == target for comb in combinations(nums, 3))\ndef g(target=5):\n    import random\n    nums = random.choices(range(10), k=6)\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 339, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Find three numbers in the list whose sum is equal to the target\"\"\"\n    return any(sum(comb) == target for comb in combinations(nums, 3))", "solution_func": "def g(target=5):\n    import random\n    nums = random.choices(range(10), k=6)\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if n is a prime number\"\"\"\n    if n < 2:\n        return False\n    for p in primes:\n        if n % p == 0:\n            return False\n    return True\ndef g(n=31, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 340, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if n is a prime number\"\"\"\n    if n < 2:\n        return False\n    for p in primes:\n        if n % p == 0:\n            return False\n    return True", "solution_func": "def g(n=31, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return n", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if s is a palindrome\"\"\"\n    return s == s[::-1]\ndef g(n=5):\n    return 'racecar'\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 340, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if s is a palindrome\"\"\"\n    return s == s[::-1]", "solution_func": "def g(n=5):\n    return 'racecar'", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, m=5) -> bool:\n    \"\"\"Check if n is divisible by m\"\"\"\n    return n % m == 0\ndef g(m=5):\n    return 25\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 340, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m=5) -> bool:\n    \"\"\"Check if n is divisible by m\"\"\"\n    return n % m == 0", "solution_func": "def g(m=5):\n    return 25", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, target=7, max_length=5, options=['a', 'b', 'c', 'd', 'e']) -> bool:\n    \"\"\"Find a substring of s with at most max_length characters whose sum of ASCII values is equal to the target value.\"\"\"\n    for c in s:\n        assert c in options\n    for i in range(len(s)):\n        for j in range(i+1, min(i+max_length+1, len(s)+1)):\n            if sum(ord(c) for c in s[i:j]) == target:\n                return True\n    return False\ndef g(target = 7, max_length = 5, options = ['a', 'b', 'c', 'd', 'e']):\n    return 'abcde'\nassert f(g())\n", "emb": null, "idx_generation": 340, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target=7, max_length=5, options=['a', 'b', 'c', 'd', 'e']) -> bool:\n    \"\"\"Find a substring of s with at most max_length characters whose sum of ASCII values is equal to the target value.\"\"\"\n    for c in s:\n        assert c in options\n    for i in range(len(s)):\n        for j in range(i+1, min(i+max_length+1, len(s)+1)):\n            if sum(ord(c) for c in s[i:j]) == target:\n                return True\n    return False", "solution_func": "def g(target = 7, max_length = 5, options = ['a', 'b', 'c', 'd', 'e']):\n    return 'abcde'", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, target=20, max_numbers=3) -> bool:\n    \"\"\"Find a combination of at most max_numbers numbers whose sum is the target value.\"\"\"\n    assert target > 0\n    assert max_numbers > 0\n    return any(sum(c) == target for c in combinations(range(n+1), max_numbers))\ndef g(target = 20, max_numbers = 3):\n    return target\nassert f(g())\n", "emb": null, "idx_generation": 340, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, target=20, max_numbers=3) -> bool:\n    \"\"\"Find a combination of at most max_numbers numbers whose sum is the target value.\"\"\"\n    assert target > 0\n    assert max_numbers > 0\n    return any(sum(c) == target for c in combinations(range(n+1), max_numbers))", "solution_func": "def g(target = 20, max_numbers = 3):\n    return target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, target=100, max_numbers=3) -> bool:\n    \"\"\"Find a combination of at most max_numbers numbers whose sum is the target value.\"\"\"\n    assert target > 0\n    assert max_numbers > 0\n    return any(sum(c) == target for c in combinations(range(n+1), max_numbers))\ndef g(target = 100, max_numbers = 3):\n    return target\nassert f(g())\n", "emb": null, "idx_generation": 340, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, target=100, max_numbers=3) -> bool:\n    \"\"\"Find a combination of at most max_numbers numbers whose sum is the target value.\"\"\"\n    assert target > 0\n    assert max_numbers > 0\n    return any(sum(c) == target for c in combinations(range(n+1), max_numbers))", "solution_func": "def g(target = 100, max_numbers = 3):\n    return target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, lst: List[int], target=20) -> bool:\n    \"\"\"Find the two numbers in the list that add up to the target number\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\ndef g(lst=[1, 5, 10, 12, 15]):\n    target = 20\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return lst[i], lst[j]\nassert f(g())\n", "emb": null, "idx_generation": 340, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst: List[int], target=20) -> bool:\n    \"\"\"Find the two numbers in the list that add up to the target number\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False", "solution_func": "def g(lst=[1, 5, 10, 12, 15]):\n    target = 20\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return lst[i], lst[j]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=100) -> bool:\n    \"\"\"Find if there is a row in the matrix where the sum of its elements is equal to the target\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    return False\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    target = 100\n    for row in matrix:\n        if sum(row) == target:\n            return row\nassert f(g())\n", "emb": null, "idx_generation": 340, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=100) -> bool:\n    \"\"\"Find if there is a row in the matrix where the sum of its elements is equal to the target\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    return False", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    target = 100\n    for row in matrix:\n        if sum(row) == target:\n            return row", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(string: str, n: int, k=3) -> bool:\n    \"\"\"Find if the string contains the character 'a' at least n times and the length of the string is divisible by k\"\"\"\n    count = string.count('a')\n    if count >= n and len(string) % k == 0:\n        return True\n    return False\ndef g(string='banana', n=2):\n    k = 3\n    count = string.count('a')\n    if count >= n and len(string) % k == 0:\n        return True\n    return False\nassert f(g())\n", "emb": null, "idx_generation": 340, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, n: int, k=3) -> bool:\n    \"\"\"Find if the string contains the character 'a' at least n times and the length of the string is divisible by k\"\"\"\n    count = string.count('a')\n    if count >= n and len(string) % k == 0:\n        return True\n    return False", "solution_func": "def g(string='banana', n=2):\n    k = 3\n    count = string.count('a')\n    if count >= n and len(string) % k == 0:\n        return True\n    return False", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, m: int, a=10, b=5) -> bool:\n    \"\"\"Check if the sum of two numbers is equal to their product\"\"\"\n    return (n + m) == (n * m) and (n == a) and (m == b)\ndef g(a = 10, b = 5):\n    return a\nassert f(g(), b = 5)\n", "emb": null, "idx_generation": 340, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m: int, a=10, b=5) -> bool:\n    \"\"\"Check if the sum of two numbers is equal to their product\"\"\"\n    return (n + m) == (n * m) and (n == a) and (m == b)", "solution_func": "def g(a = 10, b = 5):\n    return a", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Find two numbers from a list that add up to a target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=15):\n    return [3, 6, 9, 12, 15, 18]\nassert f(g())", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 341, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Find two numbers from a list that add up to a target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target=15):\n    return [3, 6, 9, 12, 15, 18]", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=5, b=2, c=3) -> bool:\n    \"\"\"\n    Find n such that n + a is divisible by b raised to the power of c.\n    \"\"\"\n    return (n + a) % math.pow(b, c) == 0\n\ndef g(a=5, b=2, c=3):\n    return math.pow(b, c) - a\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 341, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, a=5, b=2, c=3) -> bool:\n    \"\"\"\n    Find n such that n + a is divisible by b raised to the power of c.\n    \"\"\"\n    return (n + a) % math.pow(b, c) == 0", "solution_func": "def g(a=5, b=2, c=3):\n    return math.pow(b, c) - a", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\n\ndef f(arr: list, target=5) -> bool:\n    \"\"\"\n    Find a pair of numbers from the given list that add up to the target value.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5]):\n    random.shuffle(arr)\n    return arr\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 341, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(arr: list, target=5) -> bool:\n    \"\"\"\n    Find a pair of numbers from the given list that add up to the target value.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g(arr=[1, 2, 3, 4, 5]):\n    random.shuffle(arr)\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"\n    Check if the given string is a palindrome when only considering the first n characters.\n    \"\"\"\n    return s[:n] == s[:n][::-1]\n\ndef g(n=3):\n    return \"racecar\"[:n]\n\nassert f(g())\n", "emb": null, "idx_generation": 341, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"\n    Check if the given string is a palindrome when only considering the first n characters.\n    \"\"\"\n    return s[:n] == s[:n][::-1]", "solution_func": "def g(n=3):\n    return \"racecar\"[:n]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, s='abc', t='def') -> bool:\n    \"\"\"Compare s, t lexicographically. Output 0 if they are =, -1 if s < t, 1 if s > t.\"\"\"\n    if n == 0:\n        return s == t\n    if n == 1:\n        return s > t\n    if n == -1:\n        return s < t\n    return False\ndef g(s='abc', t='def'):\n    if s == t:\n        return 0\n    if s > t:\n        return 1\n    return -1\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 341, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, s='abc', t='def') -> bool:\n    \"\"\"Compare s, t lexicographically. Output 0 if they are =, -1 if s < t, 1 if s > t.\"\"\"\n    if n == 0:\n        return s == t\n    if n == 1:\n        return s > t\n    if n == -1:\n        return s < t\n    return False", "solution_func": "def g(s='abc', t='def'):\n    if s == t:\n        return 0\n    if s > t:\n        return 1\n    return -1", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, s='hello', t='world') -> bool:\n    \"\"\"Check if the given string s is a substring of t.\"\"\"\n    if n == 0:\n        return s in t\n    return False\ndef g(s='hello', t='world'):\n    if s in t:\n        return 0\n    return -1\nassert f(g())\n", "emb": null, "idx_generation": 341, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, s='hello', t='world') -> bool:\n    \"\"\"Check if the given string s is a substring of t.\"\"\"\n    if n == 0:\n        return s in t\n    return False", "solution_func": "def g(s='hello', t='world'):\n    if s in t:\n        return 0\n    return -1", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=2, b=3) -> bool:\n    \"\"\"Check if the square root of the sum of a and b is equal to n.\"\"\"\n    if n == 0:\n        return math.sqrt(a + b) == n\n    return False\ndef g(a=2, b=3):\n    if math.sqrt(a + b) == 0:\n        return 0\n    return -1\nassert f(g())\n", "emb": null, "idx_generation": 341, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, a=2, b=3) -> bool:\n    \"\"\"Check if the square root of the sum of a and b is equal to n.\"\"\"\n    if n == 0:\n        return math.sqrt(a + b) == n\n    return False", "solution_func": "def g(a=2, b=3):\n    if math.sqrt(a + b) == 0:\n        return 0\n    return -1", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target_sum=0) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target_sum.\"\"\"\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target_sum = 0):\n    nums = [1, 2, 3, 4, 5]\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 341, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=0) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target_sum.\"\"\"\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))", "solution_func": "def g(target_sum = 0):\n    nums = [1, 2, 3, 4, 5]\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_value=0) -> bool:\n    \"\"\"Check if the target_value is present in the matrix.\"\"\"\n    return any(target_value in row for row in matrix)\ndef g(target_value = 0):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 341, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_value=0) -> bool:\n    \"\"\"Check if the target_value is present in the matrix.\"\"\"\n    return any(target_value in row for row in matrix)", "solution_func": "def g(target_value = 0):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(words: List[str], target_length=0) -> bool:\n    \"\"\"Check if any word in the list has the target_length.\"\"\"\n    return any(len(word) == target_length for word in words)\ndef g(target_length = 0):\n    words = [\"apple\", \"banana\", \"cherry\"]\n    return words\nassert f(g())\n", "emb": null, "idx_generation": 341, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], target_length=0) -> bool:\n    \"\"\"Check if any word in the list has the target_length.\"\"\"\n    return any(len(word) == target_length for word in words)", "solution_func": "def g(target_length = 0):\n    words = [\"apple\", \"banana\", \"cherry\"]\n    return words", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n=4) -> bool:\n    \"\"\"Check if the string s contains exactly n vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = sum(1 for char in s if char.lower() in vowels)\n    return count == n\ndef g(s=\"puzzle\", n=4):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = sum(1 for char in s if char.lower() in vowels)\n    return count\nassert f(g())\n", "emb": null, "idx_generation": 342, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=4) -> bool:\n    \"\"\"Check if the string s contains exactly n vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = sum(1 for char in s if char.lower() in vowels)\n    return count == n", "solution_func": "def g(s=\"puzzle\", n=4):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = sum(1 for char in s if char.lower() in vowels)\n    return count", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Check if there are any two numbers in the list that sum up to the target\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\ndef g(lst=[1, 2, 3, 4, 5], target=10):\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\nassert f(g())\n", "emb": null, "idx_generation": 342, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Check if there are any two numbers in the list that sum up to the target\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False", "solution_func": "def g(lst=[1, 2, 3, 4, 5], target=10):\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, pattern=\"ABC\") -> bool:\n    \"\"\"Check if the string s contains the given pattern\"\"\"\n    return pattern in s\ndef g(s=\"defABCghi\", pattern=\"ABC\"):\n    return pattern in s\nassert f(g())\n", "emb": null, "idx_generation": 342, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, pattern=\"ABC\") -> bool:\n    \"\"\"Check if the string s contains the given pattern\"\"\"\n    return pattern in s", "solution_func": "def g(s=\"defABCghi\", pattern=\"ABC\"):\n    return pattern in s", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=3, target='abcabcabc') -> bool:\n    \"\"\"Determine if a string is a repetition of a smaller string n times\"\"\"\n    return s * n == target\ndef g(n=3, target='abcabcabc'):\n    return target[:len(target)//n]\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 342, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=3, target='abcabcabc') -> bool:\n    \"\"\"Determine if a string is a repetition of a smaller string n times\"\"\"\n    return s * n == target", "solution_func": "def g(n=3, target='abcabcabc'):\n    return target[:len(target)//n]", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if any two numbers in a list sum up to a target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 342, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if any two numbers in a list sum up to a target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, target='aeiou', count=3) -> bool:\n    \"\"\"Determine if a string contains a specific character count number of times\"\"\"\n    return sum((s.count(c) for c in target)) == count\ndef g(target='aeiou', count=3):\n    return target * count\nassert f(g())\n", "emb": null, "idx_generation": 342, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='aeiou', count=3) -> bool:\n    \"\"\"Determine if a string contains a specific character count number of times\"\"\"\n    return sum((s.count(c) for c in target)) == count", "solution_func": "def g(target='aeiou', count=3):\n    return target * count", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list that sum up to the target.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=10):\n    return target\nassert f(g())\n", "emb": null, "idx_generation": 342, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list that sum up to the target.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(target=10):\n    return target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target number exists in the matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    left = 0\n    right = rows * cols - 1\n    while left <= right:\n        mid = (left + right) // 2\n        num = matrix[mid // cols][mid % cols]\n        if num == target:\n            return True\n        elif num < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False\n\ndef g(target=0):\n    return target\nassert f(g())\n", "emb": null, "idx_generation": 342, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target number exists in the matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    left = 0\n    right = rows * cols - 1\n    while left <= right:\n        mid = (left + right) // 2\n        num = matrix[mid // cols][mid % cols]\n        if num == target:\n            return True\n        elif num < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False", "solution_func": "def g(target=0):\n    return target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Find if there exists a triplet in the list that sums up to the target.\"\"\"\n    nums.sort()\n    n = len(nums)\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            total = nums[i] + nums[left] + nums[right]\n            if total == target:\n                return True\n            elif total < target:\n                left += 1\n            else:\n                right -= 1\n    return False\n\ndef g(target=5):\n    return target\nassert f(g())\n", "emb": null, "idx_generation": 342, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Find if there exists a triplet in the list that sums up to the target.\"\"\"\n    nums.sort()\n    n = len(nums)\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            total = nums[i] + nums[left] + nums[right]\n            if total == target:\n                return True\n            elif total < target:\n                left += 1\n            else:\n                right -= 1\n    return False", "solution_func": "def g(target=5):\n    return target", "map_ix": null}, {"fitness": -Infinity, "program_str": "import math\nfrom typing import*\nfrom math import gcd\n\ndef f(x: int, y: int) -> bool:\n    \"\"\"Check if the GCD of two numbers is greater than 1\"\"\"\n    return gcd(x, y) > 1\n\ndef g(x: int, y: int):\n    return x + y\n\nassert f(g(10, 15))\n", "emb": null, "idx_generation": 342, "target_skills": null, "problem_func": "import math\nfrom typing import*\nfrom math import gcd\n\ndef f(x: int, y: int) -> bool:\n    \"\"\"Check if the GCD of two numbers is greater than 1\"\"\"\n    return gcd(x, y) > 1", "solution_func": "def g(x: int, y: int):\n    return x + y", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(target=10):\n    return [2, 8, 3, 5, 6]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 343, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))", "solution_func": "def g(target=10):\n    return [2, 8, 3, 5, 6]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, substring=\"world\") -> bool:\n    \"\"\"Check if the given substring is present in the string\"\"\"\n    return substring in string\ndef g(substring=\"world\"):\n    return \"Hello, world!\"\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 343, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, substring=\"world\") -> bool:\n    \"\"\"Check if the given substring is present in the string\"\"\"\n    return substring in string", "solution_func": "def g(substring=\"world\"):\n    return \"Hello, world!\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], row_sum=10) -> bool:\n    \"\"\"Check if any row in the matrix has a sum equal to row_sum\"\"\"\n    return any((sum(row) == row_sum for row in matrix))\ndef g(row_sum=10):\n    return [[1, 2, 3], [4, 5, 1], [2, 3, 4]]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 343, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], row_sum=10) -> bool:\n    \"\"\"Check if any row in the matrix has a sum equal to row_sum\"\"\"\n    return any((sum(row) == row_sum for row in matrix))", "solution_func": "def g(row_sum=10):\n    return [[1, 2, 3], [4, 5, 1], [2, 3, 4]]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, t: str, k: int) -> bool:\n    \"\"\"Check if it is possible to convert string s to string t in exactly k steps, \n    where in each step, you can either add a character at any position or delete a character from any position.\"\"\"\n    if len(t) > len(s) + k:\n        return False\n    if len(t) < len(s) - k:\n        return False\n    diff = len(t) - len(s)\n    if diff == 0:\n        return s == t\n    if diff > k:\n        return False\n    if k % 2 == diff % 2:\n        return True\n    return False\ndef g(s = \"abc\", t = \"abcdef\", k = 3):\n    return (s, t, k)\nassert f(*g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 343, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, t: str, k: int) -> bool:\n    \"\"\"Check if it is possible to convert string s to string t in exactly k steps, \n    where in each step, you can either add a character at any position or delete a character from any position.\"\"\"\n    if len(t) > len(s) + k:\n        return False\n    if len(t) < len(s) - k:\n        return False\n    diff = len(t) - len(s)\n    if diff == 0:\n        return s == t\n    if diff > k:\n        return False\n    if k % 2 == diff % 2:\n        return True\n    return False", "solution_func": "def g(s = \"abc\", t = \"abcdef\", k = 3):\n    return (s, t, k)", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, arr: List[int]) -> bool:\n    \"\"\"Check if it is possible to divide the array arr into exactly n groups, \n    where each group has the same sum and the sum of each group is odd.\"\"\"\n    if sum(arr) % n != 0:\n        return False\n    target_sum = sum(arr) // n\n    group_sums = [0] * n\n    return group_sum_helper(arr, group_sums, target_sum, 0)\n    \ndef group_sum_helper(arr: List[int], group_sums: List[int], target_sum: int, i: int) -> bool:\n    if i == len(arr):\n        return len(set(group_sums)) == 1\n    for j in range(len(group_sums)):\n        if group_sums[j] + arr[i] <= target_sum:\n            group_sums[j] += arr[i]\n            if group_sum_helper(arr, group_sums, target_sum, i+1):\n                return True\n            group_sums[j] -= arr[i]\n    return False\n\ndef g(n=3, arr=[1, 2, 3, 4, 5, 6]):\n    return (n, arr)\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 343, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, arr: List[int]) -> bool:\n    \"\"\"Check if it is possible to divide the array arr into exactly n groups, \n    where each group has the same sum and the sum of each group is odd.\"\"\"\n    if sum(arr) % n != 0:\n        return False\n    target_sum = sum(arr) // n\n    group_sums = [0] * n\n    return group_sum_helper(arr, group_sums, target_sum, 0)\n    \ndef group_sum_helper(arr: List[int], group_sums: List[int], target_sum: int, i: int) -> bool:\n    if i == len(arr):\n        return len(set(group_sums)) == 1\n    for j in range(len(group_sums)):\n        if group_sums[j] + arr[i] <= target_sum:\n            group_sums[j] += arr[i]\n            if group_sum_helper(arr, group_sums, target_sum, i+1):\n                return True\n            group_sums[j] -= arr[i]\n    return False", "solution_func": "def g(n=3, arr=[1, 2, 3, 4, 5, 6]):\n    return (n, arr)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, arr: List[int]) -> bool:\n    \"\"\"Check if there exists a subset of the array arr that sums up to n.\"\"\"\n    return subset_sum_helper(arr, n, len(arr))\n    \ndef subset_sum_helper(arr: List[int], n: int, i: int) -> bool:\n    if n == 0:\n        return True\n    if i == 0:\n        return False\n    if arr[i-1] > n:\n        return subset_sum_helper(arr, n, i-1)\n    return subset_sum_helper(arr, n, i-1) or subset_sum_helper(arr, n-arr[i-1], i-1)\n\ndef g(n=10, arr=[1, 2, 3, 4, 5, 6]):\n    return (n, arr)\nassert f(*g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 343, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, arr: List[int]) -> bool:\n    \"\"\"Check if there exists a subset of the array arr that sums up to n.\"\"\"\n    return subset_sum_helper(arr, n, len(arr))\n    \ndef subset_sum_helper(arr: List[int], n: int, i: int) -> bool:\n    if n == 0:\n        return True\n    if i == 0:\n        return False\n    if arr[i-1] > n:\n        return subset_sum_helper(arr, n, i-1)\n    return subset_sum_helper(arr, n, i-1) or subset_sum_helper(arr, n-arr[i-1], i-1)", "solution_func": "def g(n=10, arr=[1, 2, 3, 4, 5, 6]):\n    return (n, arr)", "map_ix": [0, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Check if it is possible to select a subset of nums that sums up to the target_sum.\"\"\"\n    return any((sum(combo) == target_sum for r in range(len(nums)+1) for combo in combinations(nums, r)))\ndef g(nums=[1, 2, 3, 4, 5], target_sum=100):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 343, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Check if it is possible to select a subset of nums that sums up to the target_sum.\"\"\"\n    return any((sum(combo) == target_sum for r in range(len(nums)+1) for combo in combinations(nums, r)))", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target_sum=100):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_sum=100) -> bool:\n    \"\"\"Check if it is possible to select a subset of numbers from each row such that the sum of each selected number is equal to the target_sum.\"\"\"\n    return all((any((sum(combo) == target_sum for combo in combinations(row, r))) for row in matrix for r in range(len(row)+1)))\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target_sum=100):\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 343, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_sum=100) -> bool:\n    \"\"\"Check if it is possible to select a subset of numbers from each row such that the sum of each selected number is equal to the target_sum.\"\"\"\n    return all((any((sum(combo) == target_sum for combo in combinations(row, r))) for row in matrix for r in range(len(row)+1)))", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target_sum=100):\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(string: str, target_length=10) -> bool:\n    \"\"\"Check if it is possible to obtain the target_length by repeating a substring of string.\"\"\"\n    return any((string == substring * (target_length // len(substring)) + substring[:target_length % len(substring)] for substring in set(string)))\ndef g(string='hello', target_length=10):\n    return string\nassert f(g())\n", "emb": null, "idx_generation": 343, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, target_length=10) -> bool:\n    \"\"\"Check if it is possible to obtain the target_length by repeating a substring of string.\"\"\"\n    return any((string == substring * (target_length // len(substring)) + substring[:target_length % len(substring)] for substring in set(string)))", "solution_func": "def g(string='hello', target_length=10):\n    return string", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Determine if it is possible to obtain the target number by combining the given numbers using addition and subtraction.\"\"\"\n    def helper(nums, target):\n        if len(nums) == 1:\n            return nums[0] == target\n        return helper(nums[1:], target - nums[0]) or helper(nums[1:], target + nums[0])\n    return helper(nums, target)\n\ndef g(target = 100):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 343, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Determine if it is possible to obtain the target number by combining the given numbers using addition and subtraction.\"\"\"\n    def helper(nums, target):\n        if len(nums) == 1:\n            return nums[0] == target\n        return helper(nums[1:], target - nums[0]) or helper(nums[1:], target + nums[0])\n    return helper(nums, target)", "solution_func": "def g(target = 100):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(x: int, y: int, a=3, b=2) -> bool:\n    \"\"\"Determine if the sum of the squares of two numbers is equal to the square of another number.\n\n    Sample Input:\n    x = 3\n    y = 4\n    a = 5\n    b = 2\n\n    Sample Output:\n    True\n    \"\"\"\n    return x**2 + y**2 == a**b\n\ndef g(x = 3, y = 4, a = 5, b = 2):\n    return sqrt(a**b)\nassert f(g())\n", "emb": null, "idx_generation": 344, "target_skills": null, "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(x: int, y: int, a=3, b=2) -> bool:\n    \"\"\"Determine if the sum of the squares of two numbers is equal to the square of another number.\n\n    Sample Input:\n    x = 3\n    y = 4\n    a = 5\n    b = 2\n\n    Sample Output:\n    True\n    \"\"\"\n    return x**2 + y**2 == a**b", "solution_func": "def g(x = 3, y = 4, a = 5, b = 2):\n    return sqrt(a**b)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: str, y: int, a=\"Hello\", b=5) -> bool:\n    \"\"\"Determine if a string is repeated a certain number of times.\n\n    Sample Input:\n    x = \"HelloHelloHello\"\n    y = 3\n    a = \"Hello\"\n    b = 5\n\n    Sample Output:\n    True\n    \"\"\"\n    return x * y == a * b\n\ndef g(x = \"HelloHelloHello\", y = 3, a = \"Hello\", b = 5):\n    return x * y\nassert f(g())\n", "emb": null, "idx_generation": 344, "target_skills": null, "problem_func": "from typing import*\ndef f(x: str, y: int, a=\"Hello\", b=5) -> bool:\n    \"\"\"Determine if a string is repeated a certain number of times.\n\n    Sample Input:\n    x = \"HelloHelloHello\"\n    y = 3\n    a = \"Hello\"\n    b = 5\n\n    Sample Output:\n    True\n    \"\"\"\n    return x * y == a * b", "solution_func": "def g(x = \"HelloHelloHello\", y = 3, a = \"Hello\", b = 5):\n    return x * y", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: int, y: int, a=10, b=2, c=20) -> bool:\n    \"\"\"Determine if two numbers multiplied together is equal to the square of another number plus a third number.\n\n    Sample Input:\n    x = 5\n    y = 6\n    a = 10\n    b = 2\n    c = 20\n\n    Sample Output:\n    True\n    \"\"\"\n    return x * y == a**b + c\n\ndef g(x = 5, y = 6, a = 10, b = 2, c = 20):\n    return a**b + c\nassert f(g())\n", "emb": null, "idx_generation": 344, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, y: int, a=10, b=2, c=20) -> bool:\n    \"\"\"Determine if two numbers multiplied together is equal to the square of another number plus a third number.\n\n    Sample Input:\n    x = 5\n    y = 6\n    a = 10\n    b = 2\n    c = 20\n\n    Sample Output:\n    True\n    \"\"\"\n    return x * y == a**b + c", "solution_func": "def g(x = 5, y = 6, a = 10, b = 2, c = 20):\n    return a**b + c", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], k: int) -> bool:\n    \"\"\"\n    Given an array of integers and an integer k, return True if there are two distinct indices i and j in the array\n    such that arr[i] - arr[j] == k, and False otherwise.\n    \"\"\"\n    return any(abs(arr[i] - arr[j]) == k for i in range(len(arr)) for j in range(len(arr)) if i != j)\ndef g(arr = [1, 5, 3, 2, 4], k = 2):\n    return arr, k\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 344, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], k: int) -> bool:\n    \"\"\"\n    Given an array of integers and an integer k, return True if there are two distinct indices i and j in the array\n    such that arr[i] - arr[j] == k, and False otherwise.\n    \"\"\"\n    return any(abs(arr[i] - arr[j]) == k for i in range(len(arr)) for j in range(len(arr)) if i != j)", "solution_func": "def g(arr = [1, 5, 3, 2, 4], k = 2):\n    return arr, k", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given an integer n and a square matrix of size n x n, return True if the sum of the elements in any\n    diagonal (from top left to bottom right or from top right to bottom left) is a prime number, and False otherwise.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    diagonal1 = [matrix[i][i] for i in range(n)]\n    diagonal2 = [matrix[i][n-i-1] for i in range(n)]\n\n    return any(is_prime(sum(diagonal1)), is_prime(sum(diagonal2)))\ndef g(n = 3, matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return n, matrix\nassert f(*g())\n", "emb": null, "idx_generation": 344, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given an integer n and a square matrix of size n x n, return True if the sum of the elements in any\n    diagonal (from top left to bottom right or from top right to bottom left) is a prime number, and False otherwise.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    diagonal1 = [matrix[i][i] for i in range(n)]\n    diagonal2 = [matrix[i][n-i-1] for i in range(n)]\n\n    return any(is_prime(sum(diagonal1)), is_prime(sum(diagonal2)))", "solution_func": "def g(n = 3, matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return n, matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers nums, return True if the sum of the even numbers in the list is equal to the sum of\n    the odd numbers in the list, and False otherwise.\n    \"\"\"\n    even_sum = 0\n    odd_sum = 0\n    for num in nums:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    return even_sum == odd_sum\ndef g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\nassert f(*g())\n", "emb": null, "idx_generation": 344, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers nums, return True if the sum of the even numbers in the list is equal to the sum of\n    the odd numbers in the list, and False otherwise.\n    \"\"\"\n    even_sum = 0\n    odd_sum = 0\n    for num in nums:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    return even_sum == odd_sum", "solution_func": "def g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a subset of arr that sums up to the target\"\"\"\n    n = len(arr)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if arr[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target]\ndef g(arr=[4, 2, 7, 1, 3], target=10):\n    return arr\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 344, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a subset of arr that sums up to the target\"\"\"\n    n = len(arr)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if arr[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target]", "solution_func": "def g(arr=[4, 2, 7, 1, 3], target=10):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, matrix: List[List[int]]) -> bool:\n    \"\"\"Check if there exists a path from the top-left corner to the bottom-right corner in the matrix\"\"\"\n    m = len(matrix)\n    if m == 0:\n        return False\n    n = len(matrix[0])\n    if n == 0:\n        return False\n    dp = [[False] * n for _ in range(m)]\n    dp[0][0] = True\n    for i in range(1, m):\n        if matrix[i][0] == 1 and dp[i - 1][0]:\n            dp[i][0] = True\n    for j in range(1, n):\n        if matrix[0][j] == 1 and dp[0][j - 1]:\n            dp[0][j] = True\n    for i in range(1, m):\n        for j in range(1, n):\n            if matrix[i][j] == 1:\n                dp[i][j] = dp[i - 1][j] or dp[i][j - 1]\n    return dp[m - 1][n - 1]\ndef g(n=3, matrix=[[1, 1, 0], [1, 0, 1], [1, 1, 1]]):\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 344, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, matrix: List[List[int]]) -> bool:\n    \"\"\"Check if there exists a path from the top-left corner to the bottom-right corner in the matrix\"\"\"\n    m = len(matrix)\n    if m == 0:\n        return False\n    n = len(matrix[0])\n    if n == 0:\n        return False\n    dp = [[False] * n for _ in range(m)]\n    dp[0][0] = True\n    for i in range(1, m):\n        if matrix[i][0] == 1 and dp[i - 1][0]:\n            dp[i][0] = True\n    for j in range(1, n):\n        if matrix[0][j] == 1 and dp[0][j - 1]:\n            dp[0][j] = True\n    for i in range(1, m):\n        for j in range(1, n):\n            if matrix[i][j] == 1:\n                dp[i][j] = dp[i - 1][j] or dp[i][j - 1]\n    return dp[m - 1][n - 1]", "solution_func": "def g(n=3, matrix=[[1, 1, 0], [1, 0, 1], [1, 1, 1]]):\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, words: List[str]) -> bool:\n    \"\"\"Check if it is possible to split string s into words\"\"\"\n    n = len(s)\n    dp = [False] * (n + 1)\n    dp[0] = True\n    for i in range(1, n + 1):\n        for word in words:\n            if i >= len(word) and s[i - len(word):i] == word and dp[i - len(word)]:\n                dp[i] = True\n                break\n    return dp[n]\ndef g(s=\"leetcode\", words=[\"leet\", \"code\"]):\n    return s\nassert f(g())\n", "emb": null, "idx_generation": 344, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, words: List[str]) -> bool:\n    \"\"\"Check if it is possible to split string s into words\"\"\"\n    n = len(s)\n    dp = [False] * (n + 1)\n    dp[0] = True\n    for i in range(1, n + 1):\n        for word in words:\n            if i >= len(word) and s[i - len(word):i] == word and dp[i - len(word)]:\n                dp[i] = True\n                break\n    return dp[n]", "solution_func": "def g(s=\"leetcode\", words=[\"leet\", \"code\"]):\n    return s", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n    Given an array of integers and two integers n and x, determine if there exists a pair of integers in the array\n    such that their sum is equal to x.\n    \"\"\"\n    seen = set()\n    for num in arr:\n        complement = x - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(arr: List[int], n: int, x: int):\n    return arr\n\nassert f(g(), n=5, x=10)\n", "emb": null, "idx_generation": 344, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n    Given an array of integers and two integers n and x, determine if there exists a pair of integers in the array\n    such that their sum is equal to x.\n    \"\"\"\n    seen = set()\n    for num in arr:\n        complement = x - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(arr: List[int], n: int, x: int):\n    return arr", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"\n    Find a pair of numbers from the given list whose sum is equal to the target value\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 345, "target_skills": null, "problem_func": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"\n    Find a pair of numbers from the given list whose sum is equal to the target value\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False", "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix\n    \"\"\"\n    for i in range(len(matrix)):\n        for j in range(i+1, len(matrix)):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 345, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix\n    \"\"\"\n    for i in range(len(matrix)):\n        for j in range(i+1, len(matrix)):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "solution_func": "def g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(words: List[str], target_length=5) -> bool:\n    \"\"\"\n    Find a pair of words from the given list whose combined length is equal to the target length\n    \"\"\"\n    for i in range(len(words)):\n        for j in range(i+1, len(words)):\n            if len(words[i]) + len(words[j]) == target_length:\n                return True\n    return False\n\ndef g(target_length=5):\n    return [\"hello\", \"world\", \"python\", \"code\", \"puzzle\"]\n\nassert f(g())\n", "emb": null, "idx_generation": 345, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], target_length=5) -> bool:\n    \"\"\"\n    Find a pair of words from the given list whose combined length is equal to the target length\n    \"\"\"\n    for i in range(len(words)):\n        for j in range(i+1, len(words)):\n            if len(words[i]) + len(words[j]) == target_length:\n                return True\n    return False", "solution_func": "def g(target_length=5):\n    return [\"hello\", \"world\", \"python\", \"code\", \"puzzle\"]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], target=30) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, determine if there exists a subset of the list that adds up to the target\n    \"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    return subset_sum(nums, target)\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], target=30):\n    return target\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 345, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], target=30) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, determine if there exists a subset of the list that adds up to the target\n    \"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    return subset_sum(nums, target)", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], target=30):\n    return target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"\n    Given a list of 4 integers, determine if it is possible to use the four basic arithmetic operations (+, -, *, /)\n    to combine the numbers and obtain the target number (24 by default).\n    \"\"\"\n    def calculate(a, b, op):\n        if op == '+':\n            return a + b\n        elif op == '-':\n            return a - b\n        elif op == '*':\n            return a * b\n        elif op == '/':\n            if b != 0:\n                return a / b\n            else:\n                return None\n\n    def solve(nums, target):\n        if len(nums) == 1:\n            return nums[0] == target\n        for a, b, op in permutations(nums, 3):\n            for new_num in [calculate(a, b, op), calculate(b, a, op)]:\n                if new_num is not None and solve([new_num] + [num for num in nums if num not in (a, b)], target):\n                    return True\n        return False\n\n    return solve(nums, target)\n\ndef g(nums):\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 345, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"\n    Given a list of 4 integers, determine if it is possible to use the four basic arithmetic operations (+, -, *, /)\n    to combine the numbers and obtain the target number (24 by default).\n    \"\"\"\n    def calculate(a, b, op):\n        if op == '+':\n            return a + b\n        elif op == '-':\n            return a - b\n        elif op == '*':\n            return a * b\n        elif op == '/':\n            if b != 0:\n                return a / b\n            else:\n                return None\n\n    def solve(nums, target):\n        if len(nums) == 1:\n            return nums[0] == target\n        for a, b, op in permutations(nums, 3):\n            for new_num in [calculate(a, b, op), calculate(b, a, op)]:\n                if new_num is not None and solve([new_num] + [num for num in nums if num not in (a, b)], target):\n                    return True\n        return False\n\n    return solve(nums, target)", "solution_func": "def g(nums):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, determine if there exists a subarray that adds up to the target\n    \"\"\"\n    prefix_sums = set()\n    prefix_sum = 0\n    for num in arr:\n        prefix_sum += num\n        if prefix_sum == target or prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False\n\ndef g(arr):\n    return arr\n\nassert f(g())\n", "emb": null, "idx_generation": 345, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, determine if there exists a subarray that adds up to the target\n    \"\"\"\n    prefix_sums = set()\n    prefix_sum = 0\n    for num in arr:\n        prefix_sum += num\n        if prefix_sum == target or prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False", "solution_func": "def g(arr):\n    return arr", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int, result=27) -> bool:\n    \"\"\"Check if the result is equal to the target when the sum of the first two elements in nums is added to it.\"\"\"\n    return nums[0] + nums[1] + result == target\ndef g(nums=[5, 10], target=42):\n    return target - (nums[0] + nums[1])\nassert f(g())\n", "emb": null, "idx_generation": 345, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int, result=27) -> bool:\n    \"\"\"Check if the result is equal to the target when the sum of the first two elements in nums is added to it.\"\"\"\n    return nums[0] + nums[1] + result == target", "solution_func": "def g(nums=[5, 10], target=42):\n    return target - (nums[0] + nums[1])", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n=7012) -> bool:\n    \"\"\"Check if the reversed string is equal to the original string multiplied by n.\"\"\"\n    return s[::-1] == s * n\ndef g(s=\"hello\", n=2):\n    return s\nassert f(g())\n", "emb": null, "idx_generation": 345, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=7012) -> bool:\n    \"\"\"Check if the reversed string is equal to the original string multiplied by n.\"\"\"\n    return s[::-1] == s * n", "solution_func": "def g(s=\"hello\", n=2):\n    return s", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(a: float, b: float, c: float, result=3) -> bool:\n    \"\"\"Check if the result is equal to the square root of the sum of a, b, and c.\"\"\"\n    return math.sqrt(a + b + c) == result\ndef g(a=1, b=4, c=9):\n    return 3\nassert f(g())\n", "emb": null, "idx_generation": 345, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(a: float, b: float, c: float, result=3) -> bool:\n    \"\"\"Check if the result is equal to the square root of the sum of a, b, and c.\"\"\"\n    return math.sqrt(a + b + c) == result", "solution_func": "def g(a=1, b=4, c=9):\n    return 3", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the array that sum up to the target value\n    \"\"\"\n    return any((arr[i] + arr[j] == target for i in range(len(arr)) for j in range(i+1, len(arr))))\n    \ndef g(n: int, target: int):\n    return np.random.randint(low=1, high=100, size=n)\n\narr = g(n=10, target=150)\nassert f(arr, target=150)\n", "emb": null, "idx_generation": 345, "target_skills": null, "problem_func": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the array that sum up to the target value\n    \"\"\"\n    return any((arr[i] + arr[j] == target for i in range(len(arr)) for j in range(i+1, len(arr))))", "solution_func": "def g(n: int, target: int):\n    return np.random.randint(low=1, high=100, size=n)\n\narr = g(n=10, target=150)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers, find if there exists a pair of numbers that sums up to the target.\n\n    Sample input:\n    [1, 2, 3, 4, 5], 7\n\n    Sample output:\n    True\n    \"\"\"\n    nums = set()\n    for num in numbers:\n        complement = target - num\n        if complement in nums:\n            return True\n        nums.add(num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5], 7\n\nassert f(*g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 346, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers, find if there exists a pair of numbers that sums up to the target.\n\n    Sample input:\n    [1, 2, 3, 4, 5], 7\n\n    Sample output:\n    True\n    \"\"\"\n    nums = set()\n    for num in numbers:\n        complement = target - num\n        if complement in nums:\n            return True\n        nums.add(num)\n    return False", "solution_func": "def g():\n    return [1, 2, 3, 4, 5], 7", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string, determine if it is a palindrome.\n    A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward.\n\n    Sample input:\n    \"racecar\"\n\n    Sample output:\n    True\n    \"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 346, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string, determine if it is a palindrome.\n    A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward.\n\n    Sample input:\n    \"racecar\"\n\n    Sample output:\n    True\n    \"\"\"\n    return s == s[::-1]", "solution_func": "def g():\n    return \"racecar\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix, determine if it is symmetric.\n    A matrix is symmetric if it is equal to its transpose.\n\n    Sample input:\n    [[1, 2, 3],\n     [2, 4, 5],\n     [3, 5, 6]]\n\n    Sample output:\n    False\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3],\n            [2, 4, 5],\n            [3, 5, 6]]\n\nassert f(g())\n", "emb": [1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 346, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix, determine if it is symmetric.\n    A matrix is symmetric if it is equal to its transpose.\n\n    Sample input:\n    [[1, 2, 3],\n     [2, 4, 5],\n     [3, 5, 6]]\n\n    Sample output:\n    False\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "solution_func": "def g():\n    return [[1, 2, 3],\n            [2, 4, 5],\n            [3, 5, 6]]", "map_ix": [1, 0, 1, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(lst: List[int], x=10, y=20, z=30) -> bool:\n    \"\"\"Check if the sum of the list elements is equal to x + y + z\"\"\"\n    return sum(lst) == x + y + z\n\ndef g(x=10, y=20, z=30):\n    return [x, y, z]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 346, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int], x=10, y=20, z=30) -> bool:\n    \"\"\"Check if the sum of the list elements is equal to x + y + z\"\"\"\n    return sum(lst) == x + y + z", "solution_func": "def g(x=10, y=20, z=30):\n    return [x, y, z]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, sub: str=\"abc\") -> bool:\n    \"\"\"Check if the given string contains the substring\"\"\"\n    return sub in s\n\ndef g(sub=\"abc\"):\n    return \"def\" + sub + \"ghi\"\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 346, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, sub: str=\"abc\") -> bool:\n    \"\"\"Check if the given string contains the substring\"\"\"\n    return sub in s", "solution_func": "def g(sub=\"abc\"):\n    return \"def\" + sub + \"ghi\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Check if there are two elements in the list that sum up to the target\"\"\"\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\n\ndef g():\n    return [50, 60, 70, 80, 90]\n\nassert f(g())\n", "emb": null, "idx_generation": 346, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Check if there are two elements in the list that sum up to the target\"\"\"\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False", "solution_func": "def g():\n    return [50, 60, 70, 80, 90]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, m=10, p=2) -> bool:\n    \"\"\"Check if the remainder of n divided by p is equal to m\"\"\"\n    return n % p == m\ndef g(m=10, p=2):\n    return m + p\nassert f(g())\n", "emb": null, "idx_generation": 346, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m=10, p=2) -> bool:\n    \"\"\"Check if the remainder of n divided by p is equal to m\"\"\"\n    return n % p == m", "solution_func": "def g(m=10, p=2):\n    return m + p", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(lst: List[int], n=3) -> bool:\n    \"\"\"Check if the sum of the first n elements in the list is equal to the last element\"\"\"\n    return sum(lst[:n]) == lst[-1]\ndef g(n=3):\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return lst\nassert f(g())\n", "emb": null, "idx_generation": 346, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int], n=3) -> bool:\n    \"\"\"Check if the sum of the first n elements in the list is equal to the last element\"\"\"\n    return sum(lst[:n]) == lst[-1]", "solution_func": "def g(n=3):\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return lst", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s1: str, s2: str, char='a', index=0) -> bool:\n    \"\"\"Check if the character 'char' at index 'index' is present in both s1 and s2\"\"\"\n    return s1[index] == s2[index] == char\ndef g(char='a', index=0):\n    s1 = 'apple'\n    s2 = 'banana'\n    return s1, s2\nassert f(*g())\n", "emb": null, "idx_generation": 346, "target_skills": null, "problem_func": "from typing import*\ndef f(s1: str, s2: str, char='a', index=0) -> bool:\n    \"\"\"Check if the character 'char' at index 'index' is present in both s1 and s2\"\"\"\n    return s1[index] == s2[index] == char", "solution_func": "def g(char='a', index=0):\n    s1 = 'apple'\n    s2 = 'banana'\n    return s1, s2", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], n=5, target=10) -> bool:\n    \"\"\"Check if there is a pair of elements in the list whose sum is equal to the target\"\"\"\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(n=5, target=10):\n    arr = [1, 2, 3, 4, 5]\n    return arr\nassert f(g())\n", "emb": null, "idx_generation": 346, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], n=5, target=10) -> bool:\n    \"\"\"Check if there is a pair of elements in the list whose sum is equal to the target\"\"\"\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g(n=5, target=10):\n    arr = [1, 2, 3, 4, 5]\n    return arr", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers from the list that adds up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums=[2, 4, 6, 8]):\n    return nums\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 347, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers from the list that adds up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums=[2, 4, 6, 8]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if there exists a submatrix in the given matrix that adds up to the target\"\"\"\n    m, n = len(matrix), len(matrix[0])\n    for i in range(m):\n        for j in range(n):\n            for k in range(i, m):\n                for l in range(j, n):\n                    if sum(matrix[x][y] for x in range(i, k+1) for y in range(j, l+1)) == target:\n                        return True\n    return False\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 347, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if there exists a submatrix in the given matrix that adds up to the target\"\"\"\n    m, n = len(matrix), len(matrix[0])\n    for i in range(m):\n        for j in range(n):\n            for k in range(i, m):\n                for l in range(j, n):\n                    if sum(matrix[x][y] for x in range(i, k+1) for y in range(j, l+1)) == target:\n                        return True\n    return False", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], n=5) -> bool:\n    \"\"\"Check if there exists a subset of n numbers from the list that adds up to zero\"\"\"\n    from itertools import combinations\n    for subset in combinations(nums, n):\n        if sum(subset) == 0:\n            return True\n    return False\ndef g(nums=[-2, -1, 0, 1, 2]):\n    return nums\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 347, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], n=5) -> bool:\n    \"\"\"Check if there exists a subset of n numbers from the list that adds up to zero\"\"\"\n    from itertools import combinations\n    for subset in combinations(nums, n):\n        if sum(subset) == 0:\n            return True\n    return False", "solution_func": "def g(nums=[-2, -1, 0, 1, 2]):\n    return nums", "map_ix": [0, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(n: int, p=2) -> bool:\n    \"\"\"Check if a number is a perfect power.\"\"\"\n    return math.isqrt(n) ** p == n\n\ndef g(p=2):\n    return [i ** p for i in range(1, int(10 ** (p / 2)))]\n\nassert f(g())\n", "emb": null, "idx_generation": 347, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, p=2) -> bool:\n    \"\"\"Check if a number is a perfect power.\"\"\"\n    return math.isqrt(n) ** p == n", "solution_func": "def g(p=2):\n    return [i ** p for i in range(1, int(10 ** (p / 2)))]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target_length=10) -> bool:\n    \"\"\"Check if a string can be repeated to obtain the target length.\"\"\"\n    return len(s * (target_length // len(s))) == target_length\n\ndef g(target_length=10):\n    return \"abcde\"[:target_length]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 347, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target_length=10) -> bool:\n    \"\"\"Check if a string can be repeated to obtain the target length.\"\"\"\n    return len(s * (target_length // len(s))) == target_length", "solution_func": "def g(target_length=10):\n    return \"abcde\"[:target_length]", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(li: List[int], n=3, target_sum=10) -> bool:\n    \"\"\"Find a sublist that sums up to the target sum.\"\"\"\n    for i in range(len(li) - n + 1):\n        if sum(li[i:i+n]) == target_sum:\n            return True\n    return False\n\ndef g(n=3, target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n", "emb": null, "idx_generation": 347, "target_skills": null, "problem_func": "from typing import*\ndef f(li: List[int], n=3, target_sum=10) -> bool:\n    \"\"\"Find a sublist that sums up to the target sum.\"\"\"\n    for i in range(len(li) - n + 1):\n        if sum(li[i:i+n]) == target_sum:\n            return True\n    return False", "solution_func": "def g(n=3, target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists two numbers in the list that sum up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target\n\nassert f(*g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 347, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists two numbers in the list that sum up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(i+1, len(matrix)):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 347, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(i+1, len(matrix)):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "solution_func": "def g(matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport datetime\n\ndef f(date: datetime.date) -> bool:\n    \"\"\"Check if the given date is a weekend.\"\"\"\n    return date.weekday() >= 5\n\ndef g():\n    return datetime.date.today()\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 347, "target_skills": null, "problem_func": "from typing import*\nimport datetime\n\ndef f(date: datetime.date) -> bool:\n    \"\"\"Check if the given date is a weekend.\"\"\"\n    return date.weekday() >= 5", "solution_func": "def g():\n    return datetime.date.today()", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\n\ndef f(li: List[int], k=5, target_sum=10) -> bool:\n    \"\"\"\n    Find k numbers in the list that sum up to a target sum.\n    \"\"\"\n    nums = random.sample(li, k)\n    return sum(nums) == target_sum\n\ndef g(k=5, target_sum=10):\n    return [target_sum // k] * k\n\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 347, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(li: List[int], k=5, target_sum=10) -> bool:\n    \"\"\"\n    Find k numbers in the list that sum up to a target sum.\n    \"\"\"\n    nums = random.sample(li, k)\n    return sum(nums) == target_sum", "solution_func": "def g(k=5, target_sum=10):\n    return [target_sum // k] * k", "map_ix": [0, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int, start=0, end=-1) -> bool:\n    \"\"\"\n    Given a sorted list of integers, find if there exists two numbers in the list whose sum is equal to the target\n    within the specified range.\n    \"\"\"\n    if end == -1:\n        end = len(nums) - 1\n    while start < end:\n        curr_sum = nums[start] + nums[end]\n        if curr_sum == target:\n            return True\n        elif curr_sum < target:\n            start += 1\n        else:\n            end -= 1\n    return False\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=11):\n    return nums, target\nassert f(*g())\n", "emb": [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 348, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int, start=0, end=-1) -> bool:\n    \"\"\"\n    Given a sorted list of integers, find if there exists two numbers in the list whose sum is equal to the target\n    within the specified range.\n    \"\"\"\n    if end == -1:\n        end = len(nums) - 1\n    while start < end:\n        curr_sum = nums[start] + nums[end]\n        if curr_sum == target:\n            return True\n        elif curr_sum < target:\n            start += 1\n        else:\n            end -= 1\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=11):\n    return nums, target", "map_ix": [1, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\nfrom itertools import combinations\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a subset of the list whose sum is equal to the target.\n    \"\"\"\n    for r in range(1, len(nums) + 1):\n        for subset in combinations(nums, r):\n            if sum(subset) == target:\n                return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=20):\n    return nums, target\nassert f(*g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 348, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\nfrom itertools import combinations\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a subset of the list whose sum is equal to the target.\n    \"\"\"\n    for r in range(1, len(nums) + 1):\n        for subset in combinations(nums, r):\n            if sum(subset) == target:\n                return True\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=20):\n    return nums, target", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target value, determine if the target exists in the matrix.\n    The matrix is sorted in non-decreasing order from left to right and top to bottom.\n    \"\"\"\n    if not matrix:\n        return False\n    rows, cols = len(matrix), len(matrix[0])\n    row, col = 0, cols - 1\n    while row < rows and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            row += 1\n        else:\n            col -= 1\n    return False\ndef g(matrix=[[1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30]], target=9):\n    return matrix, target\nassert f(*g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 348, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target value, determine if the target exists in the matrix.\n    The matrix is sorted in non-decreasing order from left to right and top to bottom.\n    \"\"\"\n    if not matrix:\n        return False\n    rows, cols = len(matrix), len(matrix[0])\n    row, col = 0, cols - 1\n    while row < rows and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            row += 1\n        else:\n            col -= 1\n    return False", "solution_func": "def g(matrix=[[1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30]], target=9):\n    return matrix, target", "map_ix": [1, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target value, determine if the target value is present in the matrix.\n    The matrix is sorted in ascending order from left to right and from top to bottom.\n    \"\"\"\n    m = len(matrix)\n    if m == 0:\n        return False\n    n = len(matrix[0])\n    if n == 0:\n        return False\n    i, j = 0, n - 1\n    while i < m and j >= 0:\n        if matrix[i][j] == target:\n            return True\n        elif matrix[i][j] < target:\n            i += 1\n        else:\n            j -= 1\n    return False\ndef g(matrix: List[List[int]], target=0):\n    return matrix[0][0]\nassert f(g())\n", "emb": null, "idx_generation": 348, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target value, determine if the target value is present in the matrix.\n    The matrix is sorted in ascending order from left to right and from top to bottom.\n    \"\"\"\n    m = len(matrix)\n    if m == 0:\n        return False\n    n = len(matrix[0])\n    if n == 0:\n        return False\n    i, j = 0, n - 1\n    while i < m and j >= 0:\n        if matrix[i][j] == target:\n            return True\n        elif matrix[i][j] < target:\n            i += 1\n        else:\n            j -= 1\n    return False", "solution_func": "def g(matrix: List[List[int]], target=0):\n    return matrix[0][0]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, k=1) -> bool:\n    \"\"\"\n    Given a string and an integer k, determine if the string can be divided into k equal parts such that each part is a palindrome.\n    \"\"\"\n    if len(s) % k != 0:\n        return False\n    n = len(s)\n    part_length = n // k\n    for i in range(0, n, part_length):\n        part = s[i:i+part_length]\n        if part != part[::-1]:\n            return False\n    return True\ndef g(s: str, k=1):\n    return s * k\nassert f(g())\n", "emb": null, "idx_generation": 348, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, k=1) -> bool:\n    \"\"\"\n    Given a string and an integer k, determine if the string can be divided into k equal parts such that each part is a palindrome.\n    \"\"\"\n    if len(s) % k != 0:\n        return False\n    n = len(s)\n    part_length = n // k\n    for i in range(0, n, part_length):\n        part = s[i:i+part_length]\n        if part != part[::-1]:\n            return False\n    return True", "solution_func": "def g(s: str, k=1):\n    return s * k", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target value, determine if the target value is present in the matrix.\n    The matrix is sorted in ascending order from left to right and from top to bottom.\n    \"\"\"\n    m = len(matrix)\n    if m == 0:\n        return False\n    n = len(matrix[0])\n    if n == 0:\n        return False\n    i, j = 0, n - 1\n    while i < m and j >= 0:\n        if matrix[i][j] == target:\n            return True\n        elif matrix[i][j] < target:\n            i += 1\n        else:\n            j -= 1\n    return False\ndef g(matrix: List[List[int]], target=0):\n    return matrix[-1][-1]\nassert f(g())\n", "emb": null, "idx_generation": 348, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target value, determine if the target value is present in the matrix.\n    The matrix is sorted in ascending order from left to right and from top to bottom.\n    \"\"\"\n    m = len(matrix)\n    if m == 0:\n        return False\n    n = len(matrix[0])\n    if n == 0:\n        return False\n    i, j = 0, n - 1\n    while i < m and j >= 0:\n        if matrix[i][j] == target:\n            return True\n        elif matrix[i][j] < target:\n            i += 1\n        else:\n            j -= 1\n    return False", "solution_func": "def g(matrix: List[List[int]], target=0):\n    return matrix[-1][-1]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: List[int], target=25) -> bool:\n    \"\"\"Find a pair of numbers in the list that sum up to the target value\"\"\"\n    for i in range(len(x)):\n        for j in range(i+1, len(x)):\n            if x[i] + x[j] == target:\n                return True\n    return False\n\ndef g(target=25):\n    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return x\n\nassert f(g())\n", "emb": null, "idx_generation": 348, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], target=25) -> bool:\n    \"\"\"Find a pair of numbers in the list that sum up to the target value\"\"\"\n    for i in range(len(x)):\n        for j in range(i+1, len(x)):\n            if x[i] + x[j] == target:\n                return True\n    return False", "solution_func": "def g(target=25):\n    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return x", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: List[int], n=5) -> bool:\n    \"\"\"Check if the list contains at least n consecutive numbers\"\"\"\n    x.sort()\n    count = 0\n    for i in range(1, len(x)):\n        if x[i] - x[i-1] == 1:\n            count += 1\n            if count == n:\n                return True\n        else:\n            count = 0\n    return False\n\ndef g(n=5):\n    x = [1, 3, 5, 7, 9, 11, 13]\n    return x\n\nassert f(g())\n", "emb": null, "idx_generation": 348, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], n=5) -> bool:\n    \"\"\"Check if the list contains at least n consecutive numbers\"\"\"\n    x.sort()\n    count = 0\n    for i in range(1, len(x)):\n        if x[i] - x[i-1] == 1:\n            count += 1\n            if count == n:\n                return True\n        else:\n            count = 0\n    return False", "solution_func": "def g(n=5):\n    x = [1, 3, 5, 7, 9, 11, 13]\n    return x", "map_ix": null}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(x: List[int], target=100) -> bool:\n    \"\"\"Check if the list contains a combination of numbers that sum up to the target\"\"\"\n    for i in range(1, len(x) + 1):\n        for combination in itertools.combinations(x, i):\n            if sum(combination) == target:\n                return True\n    return False\n\ndef g(target=100):\n    x = [10, 20, 30, 40, 50]\n    return x\n\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 348, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(x: List[int], target=100) -> bool:\n    \"\"\"Check if the list contains a combination of numbers that sum up to the target\"\"\"\n    for i in range(1, len(x) + 1):\n        for combination in itertools.combinations(x, i):\n            if sum(combination) == target:\n                return True\n    return False", "solution_func": "def g(target=100):\n    x = [10, 20, 30, 40, 50]\n    return x", "map_ix": [0, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"\n    Given a list of integers and an integer k, determine if there exists two distinct indices i and j\n    such that abs(arr[i] - arr[j]) <= k.\n    \"\"\"\n    return any(abs(arr[i] - arr[j]) <= k for i in range(len(arr)) for j in range(len(arr)) if i != j)\ndef g(arr = [1, 2, 3, 4, 5], k = 3):\n    return arr\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 348, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"\n    Given a list of integers and an integer k, determine if there exists two distinct indices i and j\n    such that abs(arr[i] - arr[j]) <= k.\n    \"\"\"\n    return any(abs(arr[i] - arr[j]) <= k for i in range(len(arr)) for j in range(len(arr)) if i != j)", "solution_func": "def g(arr = [1, 2, 3, 4, 5], k = 3):\n    return arr", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"\n    Find a string that contains each string in substrings alternating, e.g., 'abcpdadeatet' for 'apple', 'banana', 'cherry', and 'date'\n    \"\"\"\n    return all((sub in s[i::len(substrings)] for (i, sub) in enumerate(substrings)))\ndef g(substrings=['apple', 'banana', 'cherry', 'date']):\n    m = max(len(s) for s in substrings)\n    return \"\".join([(s[i] if i < len(s) else \" \") for i in range(m) for s in substrings])\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 349, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"\n    Find a string that contains each string in substrings alternating, e.g., 'abcpdadeatet' for 'apple', 'banana', 'cherry', and 'date'\n    \"\"\"\n    return all((sub in s[i::len(substrings)] for (i, sub) in enumerate(substrings)))", "solution_func": "def g(substrings=['apple', 'banana', 'cherry', 'date']):\n    m = max(len(s) for s in substrings)\n    return \"\".join([(s[i] if i < len(s) else \" \") for i in range(m) for s in substrings])", "map_ix": [1, 0, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, nums=[15, 30, 45, 60, 75], upper_bound=100) -> bool:\n    \"\"\"Check if every number in the list is a multiple of a given integer n, and n is less than or equal to the upper bound.\"\"\"\n    return all((i % n == 0 for i in nums)) and n <= upper_bound\ndef g(nums=[15, 30, 45, 60, 75], upper_bound=100):\n    n = 1\n    for i in nums:\n        if n % i != 0:\n            n *= i\n    return n\nassert f(g())\n", "emb": null, "idx_generation": 349, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[15, 30, 45, 60, 75], upper_bound=100) -> bool:\n    \"\"\"Check if every number in the list is a multiple of a given integer n, and n is less than or equal to the upper bound.\"\"\"\n    return all((i % n == 0 for i in nums)) and n <= upper_bound", "solution_func": "def g(nums=[15, 30, 45, 60, 75], upper_bound=100):\n    n = 1\n    for i in nums:\n        if n % i != 0:\n            n *= i\n    return n", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(n: int, nums=[3, 5, 7, 9, 11], upper_bound=100) -> bool:\n    \"\"\"Check if every number in the list is a perfect square, and n is greater than or equal to the square root of the upper bound.\"\"\"\n    return all((math.isqrt(i)**2 == i for i in nums)) and n >= math.isqrt(upper_bound)\ndef g(nums=[3, 5, 7, 9, 11], upper_bound=100):\n    n = 0\n    for i in nums:\n        if i > n:\n            n = i\n    return n\nassert f(g())\n", "emb": null, "idx_generation": 349, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, nums=[3, 5, 7, 9, 11], upper_bound=100) -> bool:\n    \"\"\"Check if every number in the list is a perfect square, and n is greater than or equal to the square root of the upper bound.\"\"\"\n    return all((math.isqrt(i)**2 == i for i in nums)) and n >= math.isqrt(upper_bound)", "solution_func": "def g(nums=[3, 5, 7, 9, 11], upper_bound=100):\n    n = 0\n    for i in nums:\n        if i > n:\n            n = i\n    return n", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, n=3) -> bool:\n    \"\"\"Check if the array has all elements greater than n.\"\"\"\n    return np.all(arr > n)\n\ndef g(n = 3):\n    arr = np.arange(n+1, 2*n+1)\n    return arr\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 349, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, n=3) -> bool:\n    \"\"\"Check if the array has all elements greater than n.\"\"\"\n    return np.all(arr > n)", "solution_func": "def g(n = 3):\n    arr = np.arange(n+1, 2*n+1)\n    return arr", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, n=5) -> bool:\n    \"\"\"Check if x raised to the power of y is equal to n.\"\"\"\n    return math.isclose(x ** y, n)\n\ndef g(x = 2, y = 2, n = 5):\n    return x ** y\n\nassert f(g())\n", "emb": null, "idx_generation": 349, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, y: float, n=5) -> bool:\n    \"\"\"Check if x raised to the power of y is equal to n.\"\"\"\n    return math.isclose(x ** y, n)", "solution_func": "def g(x = 2, y = 2, n = 5):\n    return x ** y", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, t: str, n=3) -> bool:\n    \"\"\"Check if s is a substring of t and appears n times.\"\"\"\n    return t.count(s) == n\n\ndef g(s = \"cat\", t = \"cattycatcat\"):\n    return t\n\nassert f(g())\n", "emb": null, "idx_generation": 349, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, t: str, n=3) -> bool:\n    \"\"\"Check if s is a substring of t and appears n times.\"\"\"\n    return t.count(s) == n", "solution_func": "def g(s = \"cat\", t = \"cattycatcat\"):\n    return t", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], n=100) -> bool:\n    \"\"\"Find two integers whose sum is equal to n\"\"\"\n    return len(nums) <= 2 and sum(nums) == n\n\ndef g(n = 100):\n    if n % 2 == 0:\n        return [n // 2, n // 2]\n    else:\n        return [n // 2, n // 2 + 1]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 349, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], n=100) -> bool:\n    \"\"\"Find two integers whose sum is equal to n\"\"\"\n    return len(nums) <= 2 and sum(nums) == n", "solution_func": "def g(n = 100):\n    if n % 2 == 0:\n        return [n // 2, n // 2]\n    else:\n        return [n // 2, n // 2 + 1]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n=10) -> bool:\n    \"\"\"Check if the given string is a palindrome\"\"\"\n    return s == s[::-1] and len(s) == n\n\ndef g(n = 10):\n    return \"a\" * (n // 2) + \"b\" + \"a\" * (n // 2)\n\nassert f(g())\n", "emb": null, "idx_generation": 349, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=10) -> bool:\n    \"\"\"Check if the given string is a palindrome\"\"\"\n    return s == s[::-1] and len(s) == n", "solution_func": "def g(n = 10):\n    return \"a\" * (n // 2) + \"b\" + \"a\" * (n // 2)", "map_ix": null}, {"fitness": 1.0, "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(nums: List[int], n=100) -> bool:\n    \"\"\"Find two integers whose product is equal to n\"\"\"\n    return len(nums) <= 2 and nums[0] * nums[1] == n\n\ndef g(n = 100):\n    for i in range(1, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return [i, n // i]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 349, "target_skills": null, "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(nums: List[int], n=100) -> bool:\n    \"\"\"Find two integers whose product is equal to n\"\"\"\n    return len(nums) <= 2 and nums[0] * nums[1] == n", "solution_func": "def g(n = 100):\n    for i in range(1, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return [i, n // i]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=1) -> bool:\n    \"\"\"\n    Check if the sum of the elements in the array is equal to the target value.\n    \"\"\"\n    return sum(arr) == target\n\ndef g(target=1):\n    return [1] * target\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 349, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=1) -> bool:\n    \"\"\"\n    Check if the sum of the elements in the array is equal to the target value.\n    \"\"\"\n    return sum(arr) == target", "solution_func": "def g(target=1):\n    return [1] * target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(text: str, word_count=100) -> bool:\n    \"\"\"Check if the given text has exactly word_count number of words.\"\"\"\n    return len(text.split()) == word_count\ndef g(word_count=100):\n    return \" \".join([\"word\"] * word_count)\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 350, "target_skills": null, "problem_func": "from typing import*\ndef f(text: str, word_count=100) -> bool:\n    \"\"\"Check if the given text has exactly word_count number of words.\"\"\"\n    return len(text.split()) == word_count", "solution_func": "def g(word_count=100):\n    return \" \".join([\"word\"] * word_count)", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Check if it is possible to find two numbers in the list that add up to the target_sum.\"\"\"\n    return any([(x + y) == target_sum for x in numbers for y in numbers if x != y])\ndef g(target_sum=100):\n    return list(range(1, target_sum))\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 350, "target_skills": null, "problem_func": "from typing import*\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Check if it is possible to find two numbers in the list that add up to the target_sum.\"\"\"\n    return any([(x + y) == target_sum for x in numbers for y in numbers if x != y])", "solution_func": "def g(target_sum=100):\n    return list(range(1, target_sum))", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_value=1) -> bool:\n    \"\"\"Check if the target_value is present in the matrix.\"\"\"\n    return any([target_value in row for row in matrix])\ndef g(target_value=1):\n    return [[0, 0, 0], [0, 1, 0], [0, 0, 0]]\nassert f(g())\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 350, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_value=1) -> bool:\n    \"\"\"Check if the target_value is present in the matrix.\"\"\"\n    return any([target_value in row for row in matrix])", "solution_func": "def g(target_value=1):\n    return [[0, 0, 0], [0, 1, 0], [0, 0, 0]]", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s1: str, s2: str, common_length=3) -> bool:\n    \"\"\"Check if the common substring of length common_length exists between s1 and s2\"\"\"\n    return any(s1[i:i+common_length] in s2 for i in range(len(s1)-common_length+1))\ndef g(common_length=3):\n    return 'abc' + 'd' * (common_length-1)\nassert f(g(), 'xyzabcd')\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 350, "target_skills": null, "problem_func": "from typing import*\ndef f(s1: str, s2: str, common_length=3) -> bool:\n    \"\"\"Check if the common substring of length common_length exists between s1 and s2\"\"\"\n    return any(s1[i:i+common_length] in s2 for i in range(len(s1)-common_length+1))", "solution_func": "def g(common_length=3):\n    return 'abc' + 'd' * (common_length-1)", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in nums that sums up to target\"\"\"\n    return any(target-num in nums for num in nums)\ndef g(nums: List[int], target=10):\n    return nums + [target-sum(nums)]\nassert f(g([1, 2, 3, 4, 5]))\n", "emb": null, "idx_generation": 350, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in nums that sums up to target\"\"\"\n    return any(target-num in nums for num in nums)", "solution_func": "def g(nums: List[int], target=10):\n    return nums + [target-sum(nums)]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in nums that sums up to target\"\"\"\n    return any(target-num in nums for num in nums)\ndef g(nums: List[int], target=10):\n    return nums + [target-sum(nums)] if sum(nums) < target else nums\nassert f(g([1, 2, 3, 4, 5]))\n", "emb": null, "idx_generation": 350, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in nums that sums up to target\"\"\"\n    return any(target-num in nums for num in nums)", "solution_func": "def g(nums: List[int], target=10):\n    return nums + [target-sum(nums)] if sum(nums) < target else nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Check if a substring is present in a string, ignoring case.\"\"\"\n    return substring.lower() in s.lower()\ndef g(substring='abc'):\n    return \"Abcdef\"\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 350, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Check if a substring is present in a string, ignoring case.\"\"\"\n    return substring.lower() in s.lower()", "solution_func": "def g(substring='abc'):\n    return \"Abcdef\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are 2 numbers in a list that sum up to a target number.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(target = 10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 350, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are 2 numbers in a list that sum up to a target number.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))", "solution_func": "def g(target = 10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(names: List[str], length=5) -> bool:\n    \"\"\"Check if all names in a list have a length greater than a specified length.\"\"\"\n    return all((len(name) > length for name in names))\ndef g(length=5):\n    return ['John', 'Jane', 'Jim', 'Jessica', 'Jack']\nassert f(g())\n", "emb": null, "idx_generation": 350, "target_skills": null, "problem_func": "from typing import*\ndef f(names: List[str], length=5) -> bool:\n    \"\"\"Check if all names in a list have a length greater than a specified length.\"\"\"\n    return all((len(name) > length for name in names))", "solution_func": "def g(length=5):\n    return ['John', 'Jane', 'Jim', 'Jessica', 'Jack']", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(lst: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target sum.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target_sum:\n                return True\n    return False\ndef g(lst=[10, 20, 30, 40, 50]):\n    return lst\nassert f(g())\n", "emb": null, "idx_generation": 350, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target sum.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target_sum:\n                return True\n    return False", "solution_func": "def g(lst=[10, 20, 30, 40, 50]):\n    return lst", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom functools import reduce\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if it is possible to obtain the target number by applying the four basic arithmetic operations (+, -, *, /) to the given numbers.\"\"\"\n    return target in reduce(lambda a, b: set(x+y for x in a for y in b) | set(x-y for x in a for y in b) | set(x*y for x in a for y in b) | set(x/y for x in a for y in b) if b else set(a), nums)\ndef g(nums = [5, 2, 10, 3, 25]):\n    return [[n] for n in nums]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 351, "target_skills": null, "problem_func": "from typing import*\nfrom functools import reduce\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if it is possible to obtain the target number by applying the four basic arithmetic operations (+, -, *, /) to the given numbers.\"\"\"\n    return target in reduce(lambda a, b: set(x+y for x in a for y in b) | set(x-y for x in a for y in b) | set(x*y for x in a for y in b) | set(x/y for x in a for y in b) if b else set(a), nums)", "solution_func": "def g(nums = [5, 2, 10, 3, 25]):\n    return [[n] for n in nums]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom collections import Counter\ndef f(text: str, k=2, n=10) -> bool:\n    \"\"\"Find the most common k-grams of length n in the given text.\"\"\"\n    return [kgram for kgram, _ in Counter(zip(*[text[i:] for i in range(n)])) if len(set(kgram)) == k]\ndef g(text = 'abracadabra', k = 2, n = 10):\n    return [text[i:i+n] for i in range(len(text)-n+1)]\nassert f(g())\n", "emb": null, "idx_generation": 351, "target_skills": null, "problem_func": "from typing import*\nfrom collections import Counter\ndef f(text: str, k=2, n=10) -> bool:\n    \"\"\"Find the most common k-grams of length n in the given text.\"\"\"\n    return [kgram for kgram, _ in Counter(zip(*[text[i:] for i in range(n)])) if len(set(kgram)) == k]", "solution_func": "def g(text = 'abracadabra', k = 2, n = 10):\n    return [text[i:i+n] for i in range(len(text)-n+1)]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if it is possible to obtain the target number by applying the four basic arithmetic operations (+, -, *, /) to the given numbers.\"\"\"\n    return any((eval(f\"{a} {op} {b} {op2} {c} {op3} {d}\") == target for a in nums for b in nums for c in nums for d in nums for op in ['+', '-', '*', '/'] for op2 in ['+', '-', '*', '/'] for op3 in ['+', '-', '*', '/']))\ndef g(nums = [5, 2, 10, 3, 25]):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 351, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if it is possible to obtain the target number by applying the four basic arithmetic operations (+, -, *, /) to the given numbers.\"\"\"\n    return any((eval(f\"{a} {op} {b} {op2} {c} {op3} {d}\") == target for a in nums for b in nums for c in nums for d in nums for op in ['+', '-', '*', '/'] for op2 in ['+', '-', '*', '/'] for op3 in ['+', '-', '*', '/']))", "solution_func": "def g(nums = [5, 2, 10, 3, 25]):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=6) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list that sum up to the target\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target = 6):\n    return [1, 2, 3, 4]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 351, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=6) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list that sum up to the target\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))", "solution_func": "def g(target = 6):\n    return [1, 2, 3, 4]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Find if the target number exists in the matrix\"\"\"\n    return any(target in row for row in matrix)\ndef g(target = 5):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 351, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Find if the target number exists in the matrix\"\"\"\n    return any(target in row for row in matrix)", "solution_func": "def g(target = 5):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target='Hello', count=3) -> bool:\n    \"\"\"Check if the target string appears count times within s\"\"\"\n    return s.count(target) == count\ndef g(target = 'Hello', count = 3):\n    return 'HelloHelloHello'\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 351, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='Hello', count=3) -> bool:\n    \"\"\"Check if the target string appears count times within s\"\"\"\n    return s.count(target) == count", "solution_func": "def g(target = 'Hello', count = 3):\n    return 'HelloHelloHello'", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: str, word='python', sentence='I love coding in python') -> bool:\n    \"\"\"Check if a given word is present in a sentence.\"\"\"\n    return word in sentence\ndef g(word='python', sentence='I love coding in python'):\n    return word\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 351, "target_skills": null, "problem_func": "from typing import*\ndef f(x: str, word='python', sentence='I love coding in python') -> bool:\n    \"\"\"Check if a given word is present in a sentence.\"\"\"\n    return word in sentence", "solution_func": "def g(word='python', sentence='I love coding in python'):\n    return word", "map_ix": [0, 0, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\n\ndef f(x: int, numbers=[1,2,3,4,5,6,7,8,9,10]) -> bool:\n    \"\"\"Check if a given number is present in a list of numbers.\"\"\"\n    return x in numbers\ndef g(numbers=[1,2,3,4,5,6,7,8,9,10]):\n    return random.choice(numbers)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 351, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(x: int, numbers=[1,2,3,4,5,6,7,8,9,10]) -> bool:\n    \"\"\"Check if a given number is present in a list of numbers.\"\"\"\n    return x in numbers", "solution_func": "def g(numbers=[1,2,3,4,5,6,7,8,9,10]):\n    return random.choice(numbers)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: bool, a=True, b=False, c=True) -> bool:\n    \"\"\"Perform logical operations on given boolean values.\"\"\"\n    return a and b or c\ndef g(a=True, b=False, c=True):\n    return a\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 351, "target_skills": null, "problem_func": "from typing import*\ndef f(x: bool, a=True, b=False, c=True) -> bool:\n    \"\"\"Perform logical operations on given boolean values.\"\"\"\n    return a and b or c", "solution_func": "def g(a=True, b=False, c=True):\n    return a", "map_ix": [1, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=66) -> bool:\n    \"\"\"\n    Given a list of numbers, find a pair of numbers that sum up to the target value.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums=[12, 45, 34, 23, 9, 3, 5, 19, 7, 13, 55, 27, 18, 14]):\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 351, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=66) -> bool:\n    \"\"\"\n    Given a list of numbers, find a pair of numbers that sum up to the target value.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(nums=[12, 45, 34, 23, 9, 3, 5, 19, 7, 13, 55, 27, 18, 14]):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, substr: str, n=1) -> bool:\n    \"\"\"Check if a substring appears in a string exactly n times\"\"\"\n    return s.count(substr) == n\ndef g(substr: str, n=1):\n    return substr * n\nassert f(g())\n", "emb": null, "idx_generation": 352, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substr: str, n=1) -> bool:\n    \"\"\"Check if a substring appears in a string exactly n times\"\"\"\n    return s.count(substr) == n", "solution_func": "def g(substr: str, n=1):\n    return substr * n", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int, k=3) -> bool:\n    \"\"\"Check if there are exactly k elements in the list that sum up to the target\"\"\"\n    from itertools import combinations\n    for subset in combinations(nums, k):\n        if sum(subset) == target:\n            return True\n    return False\ndef g(target: int, k=3):\n    return list(range(1, target + 1)) * k\nassert f(g())\n", "emb": null, "idx_generation": 352, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int, k=3) -> bool:\n    \"\"\"Check if there are exactly k elements in the list that sum up to the target\"\"\"\n    from itertools import combinations\n    for subset in combinations(nums, k):\n        if sum(subset) == target:\n            return True\n    return False", "solution_func": "def g(target: int, k=3):\n    return list(range(1, target + 1)) * k", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int, row=1, col=1) -> bool:\n    \"\"\"Check if the target number appears in a specific row and column of the matrix\"\"\"\n    return matrix[row][col] == target\ndef g(target: int, row=1, col=1):\n    matrix = [[0] * 3 for _ in range(3)]\n    matrix[row][col] = target\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 352, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int, row=1, col=1) -> bool:\n    \"\"\"Check if the target number appears in a specific row and column of the matrix\"\"\"\n    return matrix[row][col] == target", "solution_func": "def g(target: int, row=1, col=1):\n    matrix = [[0] * 3 for _ in range(3)]\n    matrix[row][col] = target\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], t=10, a=0, e=5, s=1) -> bool:\n    \"\"\"Check if the sum of sublist equals t.\"\"\"\n    return sum(x[a:e:s]) == t\n\ndef g(t=10, a=0, e=5, s=1):\n    x = [i for i in range(10)]\n    return x\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 352, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], t=10, a=0, e=5, s=1) -> bool:\n    \"\"\"Check if the sum of sublist equals t.\"\"\"\n    return sum(x[a:e:s]) == t", "solution_func": "def g(t=10, a=0, e=5, s=1):\n    x = [i for i in range(10)]\n    return x", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], n=6) -> bool:\n    \"\"\"Check if the given list contains n consecutive numbers.\"\"\"\n    return any(x[i:i+n] == list(range(x[i], x[i]+n)) for i in range(len(x)-n+1))\n\ndef g(n=6):\n    x = [i for i in range(10)]\n    return x\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 352, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], n=6) -> bool:\n    \"\"\"Check if the given list contains n consecutive numbers.\"\"\"\n    return any(x[i:i+n] == list(range(x[i], x[i]+n)) for i in range(len(x)-n+1))", "solution_func": "def g(n=6):\n    x = [i for i in range(10)]\n    return x", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], a=2, b=3) -> bool:\n    \"\"\"Check if the given list contains a sublist that sums up to a*b.\"\"\"\n    return any(sum(x[i:j]) == a*b for i in range(len(x)) for j in range(i+1, len(x)+1))\n\ndef g(a=2, b=3):\n    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return x\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 352, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], a=2, b=3) -> bool:\n    \"\"\"Check if the given list contains a sublist that sums up to a*b.\"\"\"\n    return any(sum(x[i:j]) == a*b for i in range(len(x)) for j in range(i+1, len(x)+1))", "solution_func": "def g(a=2, b=3):\n    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return x", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target_sum.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False\ndef g(target_sum=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return [nums[i], nums[j]]\n    return []\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 352, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target_sum.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False", "solution_func": "def g(target_sum=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return [nums[i], nums[j]]\n    return []", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target number is present in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(target=0):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    for row in matrix:\n        if target in row:\n            return True\n    return False\nassert f(g())\n", "emb": null, "idx_generation": 352, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target number is present in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(target=0):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(emails: List[str], domain='gmail.com') -> bool:\n    \"\"\"Check if any of the emails in the list belong to the given domain.\"\"\"\n    for email in emails:\n        if domain in email:\n            return True\n    return False\ndef g(domain='gmail.com'):\n    emails = ['user1@gmail.com', 'user2@yahoo.com', 'user3@gmail.com']\n    for email in emails:\n        if domain in email:\n            return True\n    return False\nassert f(g())\n", "emb": null, "idx_generation": 352, "target_skills": null, "problem_func": "from typing import*\ndef f(emails: List[str], domain='gmail.com') -> bool:\n    \"\"\"Check if any of the emails in the list belong to the given domain.\"\"\"\n    for email in emails:\n        if domain in email:\n            return True\n    return False", "solution_func": "def g(domain='gmail.com'):\n    emails = ['user1@gmail.com', 'user2@yahoo.com', 'user3@gmail.com']\n    for email in emails:\n        if domain in email:\n            return True\n    return False", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], target: str) -> bool:\n    \"\"\"\n    Given a list of words and a target word, check if the target word can be formed by concatenating\n    two or more words from the list.\n    \"\"\"\n    def dfs(word, path):\n        if word == \"\":\n            return True\n        for i in range(1, len(word) + 1):\n            if word[:i] in words and dfs(word[i:], path + [word[:i]]):\n                return True\n        return False\n    \n    return dfs(target, [])\n    \ndef g(words: List[str], target: str):\n    return words, target\n\nassert f(*g())\n", "emb": null, "idx_generation": 352, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], target: str) -> bool:\n    \"\"\"\n    Given a list of words and a target word, check if the target word can be formed by concatenating\n    two or more words from the list.\n    \"\"\"\n    def dfs(word, path):\n        if word == \"\":\n            return True\n        for i in range(1, len(word) + 1):\n            if word[:i] in words and dfs(word[i:], path + [word[:i]]):\n                return True\n        return False\n    \n    return dfs(target, [])", "solution_func": "def g(words: List[str], target: str):\n    return words, target", "map_ix": null}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if a given number is present in a list.\"\"\"\n    return n in lst\ndef g(lst: List[int]):\n    import random\n    random.seed(0)\n    return random.choice(lst)\nassert f(g([1, 2, 3, 4, 5]), [1, 2, 3, 4, 5])\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 353, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if a given number is present in a list.\"\"\"\n    return n in lst", "solution_func": "def g(lst: List[int]):\n    import random\n    random.seed(0)\n    return random.choice(lst)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is symmetric.\"\"\"\n    n = len(matrix)\n    return all(matrix[i][j] == matrix[j][i] for i in range(n) for j in range(i+1, n))\ndef g(n: int):\n    import random\n    random.seed(0)\n    return [[random.randint(1, 10) for _ in range(n)] for _ in range(n)]\nassert f(g(3))\n", "emb": null, "idx_generation": 353, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is symmetric.\"\"\"\n    n = len(matrix)\n    return all(matrix[i][j] == matrix[j][i] for i in range(n) for j in range(i+1, n))", "solution_func": "def g(n: int):\n    import random\n    random.seed(0)\n    return [[random.randint(1, 10) for _ in range(n)] for _ in range(n)]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(m: int, n: int, target: int) -> bool:\n    \"\"\"Find if the target is present in the multiplication table of m and n.\"\"\"\n    return any(target in [i*j for i in range(1, m+1)] for j in range(1, n+1))\ndef g(m: int, n: int):\n    return m * n\nassert f(g(5, 10), 5, 10)\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 353, "target_skills": null, "problem_func": "from typing import*\ndef f(m: int, n: int, target: int) -> bool:\n    \"\"\"Find if the target is present in the multiplication table of m and n.\"\"\"\n    return any(target in [i*j for i in range(1, m+1)] for j in range(1, n+1))", "solution_func": "def g(m: int, n: int):\n    return m * n", "map_ix": [1, 0, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(li: List[int], even_sum=0) -> bool:\n    \"\"\"Check if the sum of even numbers in the list is equal to a given value\"\"\"\n    return sum(num for num in li if num % 2 == 0) == even_sum\ndef g(even_sum = 0):\n    return [i for i in range(1, even_sum*2 + 1) if i % 2 == 0]\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0], "idx_generation": 353, "target_skills": null, "problem_func": "from typing import*\ndef f(li: List[int], even_sum=0) -> bool:\n    \"\"\"Check if the sum of even numbers in the list is equal to a given value\"\"\"\n    return sum(num for num in li if num % 2 == 0) == even_sum", "solution_func": "def g(even_sum = 0):\n    return [i for i in range(1, even_sum*2 + 1) if i % 2 == 0]", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(li: List[str], substring='abc') -> bool:\n    \"\"\"Check if any string in the list contains a specific substring\"\"\"\n    return any(substring in string for string in li)\ndef g(substring='abc'):\n    return [substring + str(i) for i in range(10)]\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 353, "target_skills": null, "problem_func": "from typing import*\ndef f(li: List[str], substring='abc') -> bool:\n    \"\"\"Check if any string in the list contains a specific substring\"\"\"\n    return any(substring in string for string in li)", "solution_func": "def g(substring='abc'):\n    return [substring + str(i) for i in range(10)]", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, vowels='aeiou') -> bool:\n    \"\"\"Check if all vowels in the string are in a given set\"\"\"\n    return all(char in vowels for char in s.lower() if char.isalpha())\ndef g(vowels='aeiou'):\n    return ''.join(vowel.upper() for vowel in vowels)\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 353, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, vowels='aeiou') -> bool:\n    \"\"\"Check if all vowels in the string are in a given set\"\"\"\n    return all(char in vowels for char in s.lower() if char.isalpha())", "solution_func": "def g(vowels='aeiou'):\n    return ''.join(vowel.upper() for vowel in vowels)", "map_ix": [0, 1, 0, 1, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29], upper_bound=1000000) -> bool:\n    \"\"\"Check if a number is a product of two prime numbers.\"\"\"\n    return any((n % p == 0 and n // p in primes for p in primes)) and 0 < n <= upper_bound\n\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29], upper_bound=1000000):\n    for i in range(2, upper_bound):\n        if all(i % p != 0 for p in range(2, int(sqrt(i)) + 1)):\n            primes.append(i)\n    for p1 in primes:\n        for p2 in primes:\n            if p1 * p2 <= upper_bound:\n                return p1 * p2\n    return -1\n\nassert f(g())\n", "emb": null, "idx_generation": 353, "target_skills": null, "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29], upper_bound=1000000) -> bool:\n    \"\"\"Check if a number is a product of two prime numbers.\"\"\"\n    return any((n % p == 0 and n // p in primes for p in primes)) and 0 < n <= upper_bound", "solution_func": "def g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29], upper_bound=1000000):\n    for i in range(2, upper_bound):\n        if all(i % p != 0 for p in range(2, int(sqrt(i)) + 1)):\n            primes.append(i)\n    for p1 in primes:\n        for p2 in primes:\n            if p1 * p2 <= upper_bound:\n                return p1 * p2\n    return -1", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(dt: datetime, weekdays=[\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"], start_time=datetime.strptime(\"08:00\", \"%H:%M\"), end_time=datetime.strptime(\"16:00\", \"%H:%M\")) -> bool:\n    \"\"\"Check if a given datetime falls within working hours on a weekday.\"\"\"\n    return dt.weekday() < 5 and start_time <= dt.time() <= end_time and dt.strftime(\"%A\") in weekdays\n\ndef g(weekdays=[\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"], start_time=datetime.strptime(\"08:00\", \"%H:%M\"), end_time=datetime.strptime(\"16:00\", \"%H:%M\")):\n    return datetime.now()\n\nassert f(g())\n", "emb": null, "idx_generation": 353, "target_skills": null, "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(dt: datetime, weekdays=[\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"], start_time=datetime.strptime(\"08:00\", \"%H:%M\"), end_time=datetime.strptime(\"16:00\", \"%H:%M\")) -> bool:\n    \"\"\"Check if a given datetime falls within working hours on a weekday.\"\"\"\n    return dt.weekday() < 5 and start_time <= dt.time() <= end_time and dt.strftime(\"%A\") in weekdays", "solution_func": "def g(weekdays=[\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"], start_time=datetime.strptime(\"08:00\", \"%H:%M\"), end_time=datetime.strptime(\"16:00\", \"%H:%M\")):\n    return datetime.now()", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\nfrom random import randint\n\ndef f(num: int, nums=[randint(1, 100) for _ in range(10)]) -> bool:\n    \"\"\"Check if a number is in a list of random numbers.\"\"\"\n    return num in nums\n\ndef g(nums=[randint(1, 100) for _ in range(10)]):\n    return nums[0]\n\nassert f(g())\n", "emb": null, "idx_generation": 353, "target_skills": null, "problem_func": "import random\nfrom typing import*\nfrom random import randint\n\ndef f(num: int, nums=[randint(1, 100) for _ in range(10)]) -> bool:\n    \"\"\"Check if a number is in a list of random numbers.\"\"\"\n    return num in nums", "solution_func": "def g(nums=[randint(1, 100) for _ in range(10)]):\n    return nums[0]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(li: List[int], target: List[int]) -> bool:\n    \"\"\"Check if the target list is a subset of the given list\"\"\"\n    return set(target).issubset(set(li))\n\ndef g(li: List[int], target: List[int]):\n    \"\"\"Return the intersection of the given list and the target list\"\"\"\n    return list(set(li) & set(target))\n\nassert f(g([1, 2, 3, 4, 5], [3, 4]))\n", "emb": null, "idx_generation": 353, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(li: List[int], target: List[int]) -> bool:\n    \"\"\"Check if the target list is a subset of the given list\"\"\"\n    return set(target).issubset(set(li))", "solution_func": "def g(li: List[int], target: List[int]):\n    \"\"\"Return the intersection of the given list and the target list\"\"\"\n    return list(set(li) & set(target))", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a pair of integers that add up to the given target.\n    Return True if such a pair exists, False otherwise.\n    \"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False\n\ndef g(target: int):\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g(), target=8)\n", "emb": null, "idx_generation": 354, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a pair of integers that add up to the given target.\n    Return True if such a pair exists, False otherwise.\n    \"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False", "solution_func": "def g(target: int):\n    return [1, 2, 3, 4, 5, 6]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target value, check if the target value exists in the matrix.\n    Return True if the target value is found, False otherwise.\n    \"\"\"\n    for row in matrix:\n        for num in row:\n            if num == target:\n                return True\n    return False\n\ndef g(target: int):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g(), target=5)\n", "emb": null, "idx_generation": 354, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target value, check if the target value exists in the matrix.\n    Return True if the target value is found, False otherwise.\n    \"\"\"\n    for row in matrix:\n        for num in row:\n            if num == target:\n                return True\n    return False", "solution_func": "def g(target: int):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, find the length of the longest increasing subarray.\n    Return the length of the longest increasing subarray.\n    \"\"\"\n    max_length = 1\n    curr_length = 1\n    for i in range(1, len(nums)):\n        if nums[i] > nums[i-1]:\n            curr_length += 1\n            max_length = max(max_length, curr_length)\n        else:\n            curr_length = 1\n    return max_length\n\ndef g():\n    return [1, 2, 3, 4, 5, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g()) == 6\n", "emb": null, "idx_generation": 354, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, find the length of the longest increasing subarray.\n    Return the length of the longest increasing subarray.\n    \"\"\"\n    max_length = 1\n    curr_length = 1\n    for i in range(1, len(nums)):\n        if nums[i] > nums[i-1]:\n            curr_length += 1\n            max_length = max(max_length, curr_length)\n        else:\n            curr_length = 1\n    return max_length", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 2, 3, 4, 5, 6, 7, 8, 9]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Determine if a target value exists in a matrix.\n    The matrix is sorted row-wise and column-wise in ascending order.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    i = 0\n    j = cols - 1\n    while i < rows and j >= 0:\n        if matrix[i][j] == target:\n            return True\n        elif matrix[i][j] < target:\n            i += 1\n        else:\n            j -= 1\n    return False\n\ndef g(matrix: List[List[int]], target: int):\n    rows = len(matrix)\n    cols = len(matrix[0])\n    return matrix[rows // 2][cols // 2]\n\nassert f(g(), target=5)\n", "emb": null, "idx_generation": 354, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Determine if a target value exists in a matrix.\n    The matrix is sorted row-wise and column-wise in ascending order.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    i = 0\n    j = cols - 1\n    while i < rows and j >= 0:\n        if matrix[i][j] == target:\n            return True\n        elif matrix[i][j] < target:\n            i += 1\n        else:\n            j -= 1\n    return False", "solution_func": "def g(matrix: List[List[int]], target: int):\n    rows = len(matrix)\n    cols = len(matrix[0])\n    return matrix[rows // 2][cols // 2]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a sorted array of distinct integers and a target value,\n    determine if the target is in the array.\n    \"\"\"\n    low = 0\n    high = len(nums) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if nums[mid] == target:\n            return True\n        elif nums[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False\n\ndef g(nums: List[int], target: int):\n    return nums[len(nums) // 2]\n\nassert f(g(), target=3)\n", "emb": null, "idx_generation": 354, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a sorted array of distinct integers and a target value,\n    determine if the target is in the array.\n    \"\"\"\n    low = 0\n    high = len(nums) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if nums[mid] == target:\n            return True\n        elif nums[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False", "solution_func": "def g(nums: List[int], target: int):\n    return nums[len(nums) // 2]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a sorted array of distinct integers and a target value,\n    determine if the target is in the array.\n    \"\"\"\n    low = 0\n    high = len(nums) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if nums[mid] == target:\n            return True\n        elif nums[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False\n\ndef g(nums: List[int], target: int):\n    return nums[0]\n\nassert f(g(), target=5)\n", "emb": null, "idx_generation": 354, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a sorted array of distinct integers and a target value,\n    determine if the target is in the array.\n    \"\"\"\n    low = 0\n    high = len(nums) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if nums[mid] == target:\n            return True\n        elif nums[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False", "solution_func": "def g(nums: List[int], target: int):\n    return nums[0]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=5, b=2) -> bool:\n    \"\"\"Check if the square root of x divided by a is equal to b\"\"\"\n    return math.sqrt(x) / a == b\n\ndef g(a=5, b=2):\n    return (a * b) ** 2\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 354, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, a=5, b=2) -> bool:\n    \"\"\"Check if the square root of x divided by a is equal to b\"\"\"\n    return math.sqrt(x) / a == b", "solution_func": "def g(a=5, b=2):\n    return (a * b) ** 2", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(x: int, a=10, b=3) -> bool:\n    \"\"\"Check if x modulo a is equal to b\"\"\"\n    return x % a == b\n\ndef g(a=10, b=3):\n    return random.randint(0, a-1) + b\n\nassert f(g())\n", "emb": null, "idx_generation": 354, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(x: int, a=10, b=3) -> bool:\n    \"\"\"Check if x modulo a is equal to b\"\"\"\n    return x % a == b", "solution_func": "def g(a=10, b=3):\n    return random.randint(0, a-1) + b", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: str, a=\"hello\", b=\"world\") -> bool:\n    \"\"\"Check if x is equal to the concatenation of a and b\"\"\"\n    return x == a + b\n\ndef g(a=\"hello\", b=\"world\"):\n    return a + b\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 354, "target_skills": null, "problem_func": "from typing import*\ndef f(x: str, a=\"hello\", b=\"world\") -> bool:\n    \"\"\"Check if x is equal to the concatenation of a and b\"\"\"\n    return x == a + b", "solution_func": "def g(a=\"hello\", b=\"world\"):\n    return a + b", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(num: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"\n    Given a number and a list of integers, return True if the number is in the list and False otherwise.\n    \"\"\"\n    return num in lst\ndef g(lst=[1, 2, 3, 4, 5]):\n    num = lst[2]\n    return num\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 354, "target_skills": null, "problem_func": "from typing import*\ndef f(num: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"\n    Given a number and a list of integers, return True if the number is in the list and False otherwise.\n    \"\"\"\n    return num in lst", "solution_func": "def g(lst=[1, 2, 3, 4, 5]):\n    num = lst[2]\n    return num", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0, max_diff=10) -> bool:\n    \"\"\"Find a pair of numbers in nums whose difference is within max_diff of target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if abs(nums[i] - nums[j]) <= max_diff:\n                return True\n    return False\ndef g(target = 0, max_diff = 10):\n    return [target - max_diff, target + max_diff]\nassert f(g())\n", "emb": null, "idx_generation": 355, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0, max_diff=10) -> bool:\n    \"\"\"Find a pair of numbers in nums whose difference is within max_diff of target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if abs(nums[i] - nums[j]) <= max_diff:\n                return True\n    return False", "solution_func": "def g(target = 0, max_diff = 10):\n    return [target - max_diff, target + max_diff]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substr='python') -> bool:\n    \"\"\"Check if the given string contains the given substring\"\"\"\n    return substr in s\ndef g(substr = 'python'):\n    return 'I love ' + substr\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 355, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substr='python') -> bool:\n    \"\"\"Check if the given string contains the given substring\"\"\"\n    return substr in s", "solution_func": "def g(substr = 'python'):\n    return 'I love ' + substr", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(mat: List[List[int]], target=16) -> bool:\n    \"\"\"Check if there is a pair of numbers in mat that sum up to target\"\"\"\n    for i in range(len(mat)):\n        for j in range(len(mat[i])):\n            for k in range(i, len(mat)):\n                for l in range(len(mat[k])):\n                    if mat[i][j] + mat[k][l] == target:\n                        return True\n    return False\ndef g(target = 16):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 355, "target_skills": null, "problem_func": "from typing import*\ndef f(mat: List[List[int]], target=16) -> bool:\n    \"\"\"Check if there is a pair of numbers in mat that sum up to target\"\"\"\n    for i in range(len(mat)):\n        for j in range(len(mat[i])):\n            for k in range(i, len(mat)):\n                for l in range(len(mat[k])):\n                    if mat[i][j] + mat[k][l] == target:\n                        return True\n    return False", "solution_func": "def g(target = 16):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(a: int, b: int, c: int, d: int, e: int) -> bool:\n    \"\"\"Check if the given quadratic equation has real roots\"\"\"\n    discriminant = b**2 - 4*a*c\n    return discriminant >= 0 and (d > 0 or e > 0 or a != 0)\n\ndef g(a: int, b: int, c: int, d: int = 0, e: int = 0):\n    if a == 0:\n        if b == 0:\n            return -1\n        else:\n            return 0\n    else:\n        return max(0, math.ceil(c / a) - 1)\n        \nassert f(g())\n", "emb": null, "idx_generation": 355, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(a: int, b: int, c: int, d: int, e: int) -> bool:\n    \"\"\"Check if the given quadratic equation has real roots\"\"\"\n    discriminant = b**2 - 4*a*c\n    return discriminant >= 0 and (d > 0 or e > 0 or a != 0)", "solution_func": "def g(a: int, b: int, c: int, d: int = 0, e: int = 0):\n    if a == 0:\n        if b == 0:\n            return -1\n        else:\n            return 0\n    else:\n        return max(0, math.ceil(c / a) - 1)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: list, target: int) -> bool:\n    \"\"\"Check if there are three numbers in the given array that sum up to the target\"\"\"\n    for i in range(len(arr)-2):\n        for j in range(i+1, len(arr)-1):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g(arr: list, target: int):\n    return sorted(arr)[0] + sorted(arr)[1] + sorted(arr)[2]\n    \nassert f(g())\n", "emb": null, "idx_generation": 355, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: list, target: int) -> bool:\n    \"\"\"Check if there are three numbers in the given array that sum up to the target\"\"\"\n    for i in range(len(arr)-2):\n        for j in range(i+1, len(arr)-1):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False", "solution_func": "def g(arr: list, target: int):\n    return sorted(arr)[0] + sorted(arr)[1] + sorted(arr)[2]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, target: str) -> bool:\n    \"\"\"Check if the given string can be rearranged to form the target string\"\"\"\n    for char in target:\n        if char not in s:\n            return False\n    return True\n\ndef g(s: str, target: str):\n    return sorted(s) + sorted(target)\n    \nassert f(g())\n", "emb": null, "idx_generation": 355, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target: str) -> bool:\n    \"\"\"Check if the given string can be rearranged to form the target string\"\"\"\n    for char in target:\n        if char not in s:\n            return False\n    return True", "solution_func": "def g(s: str, target: str):\n    return sorted(s) + sorted(target)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(missing: int, nums=[[2, 4, 6], [8, 10, 12], [14, 16, 18], [20, 22, 24], [26, 28, 30]]) -> bool:\n    \"\"\"Find the missing integer to make all the numbers divisible by 3\"\"\"\n    return all((sum((num[i] for num in nums)) + missing) % 3 == 0 for i in range(3))\ndef g(nums=[[2, 4, 6], [8, 10, 12], [14, 16, 18], [20, 22, 24], [26, 28, 30]]):\n    total_sum = [sum(num[i] for num in nums) for i in range(3)]\n    missing = (3 - max(total_sum) % 3) % 3\n    return missing\nassert f(g())\n", "emb": null, "idx_generation": 355, "target_skills": null, "problem_func": "from typing import*\ndef f(missing: int, nums=[[2, 4, 6], [8, 10, 12], [14, 16, 18], [20, 22, 24], [26, 28, 30]]) -> bool:\n    \"\"\"Find the missing integer to make all the numbers divisible by 3\"\"\"\n    return all((sum((num[i] for num in nums)) + missing) % 3 == 0 for i in range(3))", "solution_func": "def g(nums=[[2, 4, 6], [8, 10, 12], [14, 16, 18], [20, 22, 24], [26, 28, 30]]):\n    total_sum = [sum(num[i] for num in nums) for i in range(3)]\n    missing = (3 - max(total_sum) % 3) % 3\n    return missing", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(x: float, nums=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Find the number that when raised to the power of each number in the list gives x\"\"\"\n    return all((num ** x == x for num in nums))\ndef g(nums=[1, 2, 3, 4, 5]):\n    return math.pow(nums[0], sum(nums[1:]))\nassert f(g())\n", "emb": null, "idx_generation": 355, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, nums=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Find the number that when raised to the power of each number in the list gives x\"\"\"\n    return all((num ** x == x for num in nums))", "solution_func": "def g(nums=[1, 2, 3, 4, 5]):\n    return math.pow(nums[0], sum(nums[1:]))", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: float, nums=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]) -> bool:\n    \"\"\"Find the missing number to make all the rows have the same sum\"\"\"\n    row_sums = [sum(row) for row in nums]\n    return all((sum(row) + x == row_sums[0] for row in nums))\ndef g(nums=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    row_sums = [sum(row) for row in nums]\n    missing = row_sums[0] - sum(nums[0])\n    return missing\nassert f(g())\n", "emb": null, "idx_generation": 355, "target_skills": null, "problem_func": "from typing import*\ndef f(x: float, nums=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]) -> bool:\n    \"\"\"Find the missing number to make all the rows have the same sum\"\"\"\n    row_sums = [sum(row) for row in nums]\n    return all((sum(row) + x == row_sums[0] for row in nums))", "solution_func": "def g(nums=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    row_sums = [sum(row) for row in nums]\n    missing = row_sums[0] - sum(nums[0])\n    return missing", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(result: int, x=5, y=3) -> bool:\n    \"\"\"\n    Find the result of taking the power of x raised to the y-th power and then taking the square root of the result.\n    \"\"\"\n    return result == math.sqrt(math.pow(x, y))\n    \ndef g(x=5, y=3):\n    return math.sqrt(math.pow(x, y))\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 355, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(result: int, x=5, y=3) -> bool:\n    \"\"\"\n    Find the result of taking the power of x raised to the y-th power and then taking the square root of the result.\n    \"\"\"\n    return result == math.sqrt(math.pow(x, y))", "solution_func": "def g(x=5, y=3):\n    return math.sqrt(math.pow(x, y))", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Determine if there are two numbers in the given list that add up to the target number.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=7):\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\nassert f(g())\n", "emb": null, "idx_generation": 356, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Determine if there are two numbers in the given list that add up to the target number.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=7):\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"\n    Determine if the given string has a length greater than n.\n    \"\"\"\n    return len(s) > n\n\ndef g(s='hello', n=3):\n    return len(s)\n\nassert f(g())\n", "emb": null, "idx_generation": 356, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"\n    Determine if the given string has a length greater than n.\n    \"\"\"\n    return len(s) > n", "solution_func": "def g(s='hello', n=3):\n    return len(s)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(names: List[str], letter: str) -> bool:\n    \"\"\"\n    Determine if any name in the given list starts with the given letter.\n    \"\"\"\n    return any(name[0].lower() == letter.lower() for name in names)\n\ndef g(names=['Alice', 'Bob', 'Charlie'], letter='b'):\n    return names\n\nassert f(g())\n", "emb": null, "idx_generation": 356, "target_skills": null, "problem_func": "from typing import*\ndef f(names: List[str], letter: str) -> bool:\n    \"\"\"\n    Determine if any name in the given list starts with the given letter.\n    \"\"\"\n    return any(name[0].lower() == letter.lower() for name in names)", "solution_func": "def g(names=['Alice', 'Bob', 'Charlie'], letter='b'):\n    return names", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(lst: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\ndef g(lst = [1, 2, 3, 4, 5], target = 7):\n    return lst\nassert f(g())\n", "emb": null, "idx_generation": 356, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False", "solution_func": "def g(lst = [1, 2, 3, 4, 5], target = 7):\n    return lst", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport datetime\n\ndef f(year: int, month=1, day=1) -> bool:\n    \"\"\"Check if the given date is a weekday\"\"\"\n    date = datetime.date(year, month, day)\n    return date.weekday() < 5\ndef g(year = 2022, month = 1, day = 1):\n    return year\nassert f(g())\n", "emb": null, "idx_generation": 356, "target_skills": null, "problem_func": "from typing import*\nimport datetime\n\ndef f(year: int, month=1, day=1) -> bool:\n    \"\"\"Check if the given date is a weekday\"\"\"\n    date = datetime.date(year, month, day)\n    return date.weekday() < 5", "solution_func": "def g(year = 2022, month = 1, day = 1):\n    return year", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the list contains the given number n\"\"\"\n    return n in lst\ndef g(lst = [1, 2, 3, 4, 5], n = 3):\n    return lst\nassert f(g())\n", "emb": null, "idx_generation": 356, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the list contains the given number n\"\"\"\n    return n in lst", "solution_func": "def g(lst = [1, 2, 3, 4, 5], n = 3):\n    return lst", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, words=['ex', 'in', 'on', 'at', 'it', 'is', 'as', 'if', 'an', 'am', 'up', 'us', 'we', 'do', 'or', 'no', 'to', 'by', 'my', 'me', 'be', 'go', 'so', 'he', 'is', 'of', 'to', 'and', 'the', 'for', 'that', 'have', 'i', 'a', 'you', 'it']) -> bool:\n    \"\"\"\n    Given a string s and a list of words, check if the string can be formed by concatenating the words from the list\n    without any spaces.\n\n    Sample Input:\n    s = \"itisanexcellentday\"\n\n    Sample Output:\n    True\n\n    Explanation:\n    The string can be formed by concatenating the words \"it\", \"is\", \"an\", \"ex\", \"cell\", \"ent\", \"day\".\n    \"\"\"\n    start = 0\n    for i in range(len(s)):\n        if s[start:i+1] in words:\n            start = i + 1\n    return start == len(s)\ndef g(s = \"itisanexcellentday\"):\n    words = ['ex', 'in', 'on', 'at', 'it', 'is', 'as', 'if', 'an', 'am', 'up', 'us', 'we', 'do', 'or', 'no', 'to', 'by', 'my', 'me', 'be', 'go', 'so', 'he', 'is', 'of', 'to', 'and', 'the', 'for', 'that', 'have', 'i', 'a', 'you', 'it']\n    result = []\n    i = 0\n    while i < len(s):\n        found = False\n        for word in words:\n            if s[i:].startswith(word):\n                result.append(word)\n                i += len(word)\n                found = True\n                break\n        if not found:\n            return []\n    return result\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 356, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, words=['ex', 'in', 'on', 'at', 'it', 'is', 'as', 'if', 'an', 'am', 'up', 'us', 'we', 'do', 'or', 'no', 'to', 'by', 'my', 'me', 'be', 'go', 'so', 'he', 'is', 'of', 'to', 'and', 'the', 'for', 'that', 'have', 'i', 'a', 'you', 'it']) -> bool:\n    \"\"\"\n    Given a string s and a list of words, check if the string can be formed by concatenating the words from the list\n    without any spaces.\n\n    Sample Input:\n    s = \"itisanexcellentday\"\n\n    Sample Output:\n    True\n\n    Explanation:\n    The string can be formed by concatenating the words \"it\", \"is\", \"an\", \"ex\", \"cell\", \"ent\", \"day\".\n    \"\"\"\n    start = 0\n    for i in range(len(s)):\n        if s[start:i+1] in words:\n            start = i + 1\n    return start == len(s)", "solution_func": "def g(s = \"itisanexcellentday\"):\n    words = ['ex', 'in', 'on', 'at', 'it', 'is', 'as', 'if', 'an', 'am', 'up', 'us', 'we', 'do', 'or', 'no', 'to', 'by', 'my', 'me', 'be', 'go', 'so', 'he', 'is', 'of', 'to', 'and', 'the', 'for', 'that', 'have', 'i', 'a', 'you', 'it']\n    result = []\n    i = 0\n    while i < len(s):\n        found = False\n        for word in words:\n            if s[i:].startswith(word):\n                result.append(word)\n                i += len(word)\n                found = True\n                break\n        if not found:\n            return []\n    return result", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, k=5) -> bool:\n    \"\"\"\n    Given a string s and an integer k, check if the string can be partitioned into k or fewer substrings such that each\n    substring is a palindrome.\n\n    Sample Input:\n    s = \"abcba\"\n\n    Sample Output:\n    True\n\n    Explanation:\n    The string can be partitioned into \"a\", \"b\", \"c\", \"b\", \"a\", each of which is a palindrome.\n    \"\"\"\n    def is_palindrome(s):\n        return s == s[::-1]\n    n = len(s)\n    dp = [[False] * (n+1) for _ in range(k+1)]\n    dp[0][0] = True\n    for i in range(1, k+1):\n        for j in range(1, n+1):\n            for l in range(0, j+1):\n                if is_palindrome(s[l:j]):\n                    dp[i][j] = dp[i][j] or dp[i-1][l]\n    return dp[k][n]\ndef g(s = \"abcba\", k = 5):\n    return s, k\nassert f(*g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 356, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, k=5) -> bool:\n    \"\"\"\n    Given a string s and an integer k, check if the string can be partitioned into k or fewer substrings such that each\n    substring is a palindrome.\n\n    Sample Input:\n    s = \"abcba\"\n\n    Sample Output:\n    True\n\n    Explanation:\n    The string can be partitioned into \"a\", \"b\", \"c\", \"b\", \"a\", each of which is a palindrome.\n    \"\"\"\n    def is_palindrome(s):\n        return s == s[::-1]\n    n = len(s)\n    dp = [[False] * (n+1) for _ in range(k+1)]\n    dp[0][0] = True\n    for i in range(1, k+1):\n        for j in range(1, n+1):\n            for l in range(0, j+1):\n                if is_palindrome(s[l:j]):\n                    dp[i][j] = dp[i][j] or dp[i-1][l]\n    return dp[k][n]", "solution_func": "def g(s = \"abcba\", k = 5):\n    return s, k", "map_ix": [0, 1, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, pattern=\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\") -> bool:\n    \"\"\"\n    Given a string s and a pattern, check if the string matches the pattern.\n\n    Sample Input:\n    s = \"test@example.com\"\n    pattern = \"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\"\n\n    Sample Output:\n    True\n\n    Explanation:\n    The string matches the pattern for a valid email address.\n    \"\"\"\n    import re\n    return bool(re.match(pattern, s))\ndef g(s = \"test@example.com\", pattern = \"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\"):\n    return s, pattern\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 356, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, pattern=\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\") -> bool:\n    \"\"\"\n    Given a string s and a pattern, check if the string matches the pattern.\n\n    Sample Input:\n    s = \"test@example.com\"\n    pattern = \"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\"\n\n    Sample Output:\n    True\n\n    Explanation:\n    The string matches the pattern for a valid email address.\n    \"\"\"\n    import re\n    return bool(re.match(pattern, s))", "solution_func": "def g(s = \"test@example.com\", pattern = \"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\"):\n    return s, pattern", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, m: int, result=7) -> bool:\n    \"\"\"Determine if the sum of two numbers is equal to a specific result.\"\"\"\n    return n + m == result\ndef g(result=7):\n    return (result - 3, 3)\nassert f(g())\n", "emb": null, "idx_generation": 356, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m: int, result=7) -> bool:\n    \"\"\"Determine if the sum of two numbers is equal to a specific result.\"\"\"\n    return n + m == result", "solution_func": "def g(result=7):\n    return (result - 3, 3)", "map_ix": null}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int, k: int = 3) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find if there exists a combination of k numbers in the list\n    that sum up to the target number.\n    \"\"\"\n    from itertools import combinations\n    return any(sum(c) == target for c in combinations(nums, k))\ndef g(nums=[1, 2, 3, 4, 5], target=9, k=3):\n    return nums, target, k\nassert f(*g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 357, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int, k: int = 3) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find if there exists a combination of k numbers in the list\n    that sum up to the target number.\n    \"\"\"\n    from itertools import combinations\n    return any(sum(c) == target for c in combinations(nums, k))", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=9, k=3):\n    return nums, target, k", "map_ix": [1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, char: str) -> bool:\n    \"\"\"\n    Given a string and a character, return True if the character appears at least twice in the string,\n    otherwise return False.\n    \"\"\"\n    return string.count(char) >= 2\ndef g(string=\"programming\", char=\"m\"):\n    return string, char\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 357, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, char: str) -> bool:\n    \"\"\"\n    Given a string and a character, return True if the character appears at least twice in the string,\n    otherwise return False.\n    \"\"\"\n    return string.count(char) >= 2", "solution_func": "def g(string=\"programming\", char=\"m\"):\n    return string, char", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, return True if there exists a pair of numbers in the list\n    that sum up to the target number, otherwise return False.\n    \"\"\"\n    return any(target - n in nums for n in nums)\ndef g(nums=[2, 4, 6, 8, 10], target=12):\n    return nums, target\nassert f(*g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 357, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, return True if there exists a pair of numbers in the list\n    that sum up to the target number, otherwise return False.\n    \"\"\"\n    return any(target - n in nums for n in nums)", "solution_func": "def g(nums=[2, 4, 6, 8, 10], target=12):\n    return nums, target", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, a=98765432, b=123456) -> bool:\n    \"\"\"Check if n is a multiple of b and if the sum of its digits is equal to a\"\"\"\n    return n % b == 0 and sum(int(digit) for digit in str(n)) == a\ndef g(a = 98765432, b = 123456):\n    # Find the smallest number with the desired properties\n    for n in range(b, 10**9):\n        if n % b == 0 and sum(int(digit) for digit in str(n)) == a:\n            return n\nassert f(g())\n", "emb": null, "idx_generation": 357, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=98765432, b=123456) -> bool:\n    \"\"\"Check if n is a multiple of b and if the sum of its digits is equal to a\"\"\"\n    return n % b == 0 and sum(int(digit) for digit in str(n)) == a", "solution_func": "def g(a = 98765432, b = 123456):\n    # Find the smallest number with the desired properties\n    for n in range(b, 10**9):\n        if n % b == 0 and sum(int(digit) for digit in str(n)) == a:\n            return n", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=3, b=5) -> bool:\n    \"\"\"Check if n is divisible by both a and b\"\"\"\n    return n % a == 0 and n % b == 0\ndef g(a = 3, b = 5):\n    # Find the smallest number divisible by both a and b\n    n = max(a, b)\n    while True:\n        if n % a == 0 and n % b == 0:\n            return n\n        n += 1\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 357, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=3, b=5) -> bool:\n    \"\"\"Check if n is divisible by both a and b\"\"\"\n    return n % a == 0 and n % b == 0", "solution_func": "def g(a = 3, b = 5):\n    # Find the smallest number divisible by both a and b\n    n = max(a, b)\n    while True:\n        if n % a == 0 and n % b == 0:\n            return n\n        n += 1", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=100, b=10) -> bool:\n    \"\"\"Check if the square root of n is between a and b\"\"\"\n    return a <= math.sqrt(n) <= b\ndef g(a = 100, b = 10):\n    # Find the smallest perfect square between a^2 and b^2\n    start = math.ceil(math.sqrt(a))\n    end = math.floor(math.sqrt(b))\n    for n in range(start, end + 1):\n        if n * n >= a and n * n <= b:\n            return n * n\nassert f(g())\n", "emb": null, "idx_generation": 357, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, a=100, b=10) -> bool:\n    \"\"\"Check if the square root of n is between a and b\"\"\"\n    return a <= math.sqrt(n) <= b", "solution_func": "def g(a = 100, b = 10):\n    # Find the smallest perfect square between a^2 and b^2\n    start = math.ceil(math.sqrt(a))\n    end = math.floor(math.sqrt(b))\n    for n in range(start, end + 1):\n        if n * n >= a and n * n <= b:\n            return n * n", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, letters = ['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if a string contains all the given letters.\"\"\"\n    return all(letter in s for letter in letters)\ndef g(s: str, letters = ['a', 'e', 'i', 'o', 'u']):\n    return s\nassert f(g())\n", "emb": null, "idx_generation": 357, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, letters = ['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if a string contains all the given letters.\"\"\"\n    return all(letter in s for letter in letters)", "solution_func": "def g(s: str, letters = ['a', 'e', 'i', 'o', 'u']):\n    return s", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(li: List[int], target = 0) -> bool:\n    \"\"\"Check if there are two elements in the list that sum up to the target value.\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i] + li[j] == target:\n                return True\n    return False\ndef g(li: List[int], target = 0):\n    return li\nassert f(g())\n", "emb": null, "idx_generation": 357, "target_skills": null, "problem_func": "from typing import*\ndef f(li: List[int], target = 0) -> bool:\n    \"\"\"Check if there are two elements in the list that sum up to the target value.\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i] + li[j] == target:\n                return True\n    return False", "solution_func": "def g(li: List[int], target = 0):\n    return li", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, li = [4, 16, 25, 36, 49, 64, 81, 100]) -> bool:\n    \"\"\"Check if the given number is a perfect square.\"\"\"\n    return n in li\ndef g(n: int, li = [4, 16, 25, 36, 49, 64, 81, 100]):\n    return n\nassert f(g())\n", "emb": null, "idx_generation": 357, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, li = [4, 16, 25, 36, 49, 64, 81, 100]) -> bool:\n    \"\"\"Check if the given number is a perfect square.\"\"\"\n    return n in li", "solution_func": "def g(n: int, li = [4, 16, 25, 36, 49, 64, 81, 100]):\n    return n", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list that adds up to the target\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums: List[int], target: int):\n    return nums, target\n\nassert f(g())\n", "emb": null, "idx_generation": 357, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list that adds up to the target\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(nums: List[int], target: int):\n    return nums, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, nums=[2, 5, 8, 10, 15], upper_bound=100) -> bool:\n    \"\"\"Find a number that is divisible by all elements in a list.\"\"\"\n    return all((n % i == 0 for i in nums)) and 0 < n <= upper_bound\ndef g(nums = [2, 5, 8, 10, 15], upper_bound = 100):\n    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans\nassert f(g())\n", "emb": null, "idx_generation": 358, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[2, 5, 8, 10, 15], upper_bound=100) -> bool:\n    \"\"\"Find a number that is divisible by all elements in a list.\"\"\"\n    return all((n % i == 0 for i in nums)) and 0 < n <= upper_bound", "solution_func": "def g(nums = [2, 5, 8, 10, 15], upper_bound = 100):\n    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=7, b=123456) -> bool:\n    \"\"\"Check if a number is a multiple of another number\"\"\"\n    return n % a == 0 and n % b == 0\ndef g(a = 7, b = 123456):\n    ans = a * b\n    return ans\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 358, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=7, b=123456) -> bool:\n    \"\"\"Check if a number is a multiple of another number\"\"\"\n    return n % a == 0 and n % b == 0", "solution_func": "def g(a = 7, b = 123456):\n    ans = a * b\n    return ans", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=4, b=10) -> bool:\n    \"\"\"Check if a number is a power of another number\"\"\"\n    return a ** b == n\ndef g(a = 4, b = 10):\n    ans = a ** b\n    return ans\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 358, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=4, b=10) -> bool:\n    \"\"\"Check if a number is a power of another number\"\"\"\n    return a ** b == n", "solution_func": "def g(a = 4, b = 10):\n    ans = a ** b\n    return ans", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], k=3, target=10) -> bool:\n    \"\"\"Find a subarray of length k whose sum is equal to target.\"\"\"\n    for i in range(len(nums) - k + 1):\n        if sum(nums[i:i+k]) == target:\n            return True\n    return False\ndef g(k=3, target=10):\n    return [1, 2, 3, 4, 5, 6, 7]\nassert f(g())\n", "emb": null, "idx_generation": 358, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], k=3, target=10) -> bool:\n    \"\"\"Find a subarray of length k whose sum is equal to target.\"\"\"\n    for i in range(len(nums) - k + 1):\n        if sum(nums[i:i+k]) == target:\n            return True\n    return False", "solution_func": "def g(k=3, target=10):\n    return [1, 2, 3, 4, 5, 6, 7]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(words: List[str], prefix='pre', suffix='ix') -> bool:\n    \"\"\"Find words that have the specified prefix and suffix.\"\"\"\n    result = []\n    for word in words:\n        if word.startswith(prefix) and word.endswith(suffix):\n            result.append(word)\n    return result\ndef g(prefix='pre', suffix='ix'):\n    return ['prefix', 'suffix', 'premix', 'prestix', 'preix', 'suffix']\nassert f(g())\n", "emb": null, "idx_generation": 358, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], prefix='pre', suffix='ix') -> bool:\n    \"\"\"Find words that have the specified prefix and suffix.\"\"\"\n    result = []\n    for word in words:\n        if word.startswith(prefix) and word.endswith(suffix):\n            result.append(word)\n    return result", "solution_func": "def g(prefix='pre', suffix='ix'):\n    return ['prefix', 'suffix', 'premix', 'prestix', 'preix', 'suffix']", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=7) -> bool:\n    \"\"\"Find if the target number exists in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(target=7):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 358, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=7) -> bool:\n    \"\"\"Find if the target number exists in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(target=7):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: int, y: int, z: int, k=3) -> bool:\n    \"\"\"Check if the sum of three integers is divisible by k\"\"\"\n    return (x + y + z) % k == 0\ndef g(x: int, y: int, z: int, k=3):\n    return x + y + z\nassert f(g())\n", "emb": null, "idx_generation": 358, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, y: int, z: int, k=3) -> bool:\n    \"\"\"Check if the sum of three integers is divisible by k\"\"\"\n    return (x + y + z) % k == 0", "solution_func": "def g(x: int, y: int, z: int, k=3):\n    return x + y + z", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(n: int, k=4) -> bool:\n    \"\"\"Check if n is a perfect square and the square root is divisible by k\"\"\"\n    return math.isqrt(n) ** 2 == n and math.isqrt(n) % k == 0\ndef g(n: int, k=4):\n    return n\nassert f(g())\n", "emb": null, "idx_generation": 358, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, k=4) -> bool:\n    \"\"\"Check if n is a perfect square and the square root is divisible by k\"\"\"\n    return math.isqrt(n) ** 2 == n and math.isqrt(n) % k == 0", "solution_func": "def g(n: int, k=4):\n    return n", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"Check if the length of the string is divisible by k\"\"\"\n    return len(s) % k == 0\ndef g(s: str, k=3):\n    return s\nassert f(g())\n", "emb": null, "idx_generation": 358, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"Check if the length of the string is divisible by k\"\"\"\n    return len(s) % k == 0", "solution_func": "def g(s: str, k=3):\n    return s", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Determine if there are two numbers in the list that add up to the target value.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums))))\ndef g(nums: List[int], target: int):\n    return nums, target\nassert f(g())\n", "emb": null, "idx_generation": 358, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Determine if there are two numbers in the list that add up to the target value.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums))))", "solution_func": "def g(nums: List[int], target: int):\n    return nums, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int, count: int = 2) -> bool:\n    \"\"\"\n    Given a list of integers nums and a target integer, determine if there exists a combination of count numbers in nums that sum up to the target.\n\n    Example:\n    nums = [2, 4, 6, 8, 10]\n    target = 16\n    count = 3\n\n    The function should return True because there exists a combination of 3 numbers (6, 8, 2) that sum up to 16.\n    \"\"\"\n    return any(sum(comb) == target for comb in combinations(nums, count))\ndef g(nums = [2, 4, 6, 8, 10], target = 16, count = 3):\n    return nums, target, count\nassert f(*g())\n", "emb": null, "idx_generation": 359, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int, count: int = 2) -> bool:\n    \"\"\"\n    Given a list of integers nums and a target integer, determine if there exists a combination of count numbers in nums that sum up to the target.\n\n    Example:\n    nums = [2, 4, 6, 8, 10]\n    target = 16\n    count = 3\n\n    The function should return True because there exists a combination of 3 numbers (6, 8, 2) that sum up to 16.\n    \"\"\"\n    return any(sum(comb) == target for comb in combinations(nums, count))", "solution_func": "def g(nums = [2, 4, 6, 8, 10], target = 16, count = 3):\n    return nums, target, count", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, determine if each row and column contains at least one even number.\n\n    Example:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n\n    The function should return True because each row and column contains at least one even number.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] % 2 == 0:\n                break\n        else:\n            return False\n    for j in range(cols):\n        for i in range(rows):\n            if matrix[i][j] % 2 == 0:\n                break\n        else:\n            return False\n    return True\ndef g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 359, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, determine if each row and column contains at least one even number.\n\n    Example:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n\n    The function should return True because each row and column contains at least one even number.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] % 2 == 0:\n                break\n        else:\n            return False\n    for j in range(cols):\n        for i in range(rows):\n            if matrix[i][j] % 2 == 0:\n                break\n        else:\n            return False\n    return True", "solution_func": "def g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"\n    Given two strings s and t, determine if t is an anagram of s.\n\n    Example:\n    s = \"listen\"\n    t = \"silent\"\n\n    The function should return True because t is an anagram of s.\n    \"\"\"\n    return sorted(s) == sorted(t)\ndef g(s = \"listen\", t = \"silent\"):\n    return s, t\nassert f(*g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 359, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"\n    Given two strings s and t, determine if t is an anagram of s.\n\n    Example:\n    s = \"listen\"\n    t = \"silent\"\n\n    The function should return True because t is an anagram of s.\n    \"\"\"\n    return sorted(s) == sorted(t)", "solution_func": "def g(s = \"listen\", t = \"silent\"):\n    return s, t", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, m: int, total=20) -> bool:\n    \"\"\"\n    Determine whether it is possible to split total into n integers such that the sum of any m integers is equal.\n\n    Sample Input:\n    n = 3, m = 2\n\n    Sample Output:\n    True\n\n    Explanation:\n    total = 20\n    Possible split: [10, 10, 0]\n    The sum of any 2 integers is equal: 10 + 10 = 20\n    \"\"\"\n    if total % n != 0:\n        return False\n    target_sum = total // n\n    return all((sum(combo) == target_sum for combo in combinations([target_sum] * n, m)))\n\ndef g(n=3, m=2):\n    return n, m\n\nassert f(*g())\n", "emb": null, "idx_generation": 359, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m: int, total=20) -> bool:\n    \"\"\"\n    Determine whether it is possible to split total into n integers such that the sum of any m integers is equal.\n\n    Sample Input:\n    n = 3, m = 2\n\n    Sample Output:\n    True\n\n    Explanation:\n    total = 20\n    Possible split: [10, 10, 0]\n    The sum of any 2 integers is equal: 10 + 10 = 20\n    \"\"\"\n    if total % n != 0:\n        return False\n    target_sum = total // n\n    return all((sum(combo) == target_sum for combo in combinations([target_sum] * n, m)))", "solution_func": "def g(n=3, m=2):\n    return n, m", "map_ix": null}, {"fitness": 1.0, "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, m: int, total=100) -> bool:\n    \"\"\"\n    Determine whether there exists a Pythagorean triple (a, b, c) where a, b, and c are positive integers,\n    a < b < c, and a^m + b^m = c^n.\n\n    Sample Input:\n    n = 2, m = 3\n\n    Sample Output:\n    True\n\n    Explanation:\n    (a, b, c) = (3, 4, 5)\n    3^3 + 4^3 = 5^2\n    \"\"\"\n    for a in range(1, total + 1):\n        for b in range(a + 1, total + 1):\n            c = int(sqrt(a ** m + b ** m))\n            if c ** n == a ** m + b ** m:\n                return True\n    return False\n\ndef g(n=2, m=3):\n    return n, m\n\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 359, "target_skills": null, "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, m: int, total=100) -> bool:\n    \"\"\"\n    Determine whether there exists a Pythagorean triple (a, b, c) where a, b, and c are positive integers,\n    a < b < c, and a^m + b^m = c^n.\n\n    Sample Input:\n    n = 2, m = 3\n\n    Sample Output:\n    True\n\n    Explanation:\n    (a, b, c) = (3, 4, 5)\n    3^3 + 4^3 = 5^2\n    \"\"\"\n    for a in range(1, total + 1):\n        for b in range(a + 1, total + 1):\n            c = int(sqrt(a ** m + b ** m))\n            if c ** n == a ** m + b ** m:\n                return True\n    return False", "solution_func": "def g(n=2, m=3):\n    return n, m", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, m: int, target=100) -> bool:\n    \"\"\"\n    Determine whether there exists a Fibonacci sequence of length n such that the sum of the mth powers of its elements is equal to target.\n\n    Sample Input:\n    n = 5, m = 2\n\n    Sample Output:\n    True\n\n    Explanation:\n    Fibonacci sequence: [0, 1, 1, 2, 3]\n    Sum of squares: 0^2 + 1^2 + 1^2 + 2^2 + 3^2 = 5^2 = 25\n    \"\"\"\n    fib_seq = [0, 1]\n    while len(fib_seq) < n:\n        fib_seq.append(fib_seq[-1] + fib_seq[-2])\n    return sum((x ** m for x in fib_seq)) == target\n\ndef g(n=5, m=2):\n    return n, m\n\nassert f(*g())\n", "emb": null, "idx_generation": 359, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m: int, target=100) -> bool:\n    \"\"\"\n    Determine whether there exists a Fibonacci sequence of length n such that the sum of the mth powers of its elements is equal to target.\n\n    Sample Input:\n    n = 5, m = 2\n\n    Sample Output:\n    True\n\n    Explanation:\n    Fibonacci sequence: [0, 1, 1, 2, 3]\n    Sum of squares: 0^2 + 1^2 + 1^2 + 2^2 + 3^2 = 5^2 = 25\n    \"\"\"\n    fib_seq = [0, 1]\n    while len(fib_seq) < n:\n        fib_seq.append(fib_seq[-1] + fib_seq[-2])\n    return sum((x ** m for x in fib_seq)) == target", "solution_func": "def g(n=5, m=2):\n    return n, m", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, nums=[15, 20, 35, 40, 55, 60]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to n\"\"\"\n    return any((n - num in nums for num in nums))\ndef g(nums=[15, 20, 35, 40, 55, 60]):\n    return max(nums) + min(nums)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 359, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[15, 20, 35, 40, 55, 60]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to n\"\"\"\n    return any((n - num in nums for num in nums))", "solution_func": "def g(nums=[15, 20, 35, 40, 55, 60]):\n    return max(nums) + min(nums)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, nums=[5, 10, 15, 20, 25]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is equal to n\"\"\"\n    return any((n % num == 0 and n // num in nums for num in nums))\ndef g(nums=[5, 10, 15, 20, 25]):\n    return max(nums) * min(nums)\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 359, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[5, 10, 15, 20, 25]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is equal to n\"\"\"\n    return any((n % num == 0 and n // num in nums for num in nums))", "solution_func": "def g(nums=[5, 10, 15, 20, 25]):\n    return max(nums) * min(nums)", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if there are at least n occurrences of the same character in a row in the string\"\"\"\n    return any((s[i] == s[i+1] == s[i+2] for i in range(len(s) - 2)))\ndef g(n=3):\n    return \"aaa\" * n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 359, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if there are at least n occurrences of the same character in a row in the string\"\"\"\n    return any((s[i] == s[i+1] == s[i+2] for i in range(len(s) - 2)))", "solution_func": "def g(n=3):\n    return \"aaa\" * n", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport numpy as np\n\ndef f(x: np.ndarray, n=3) -> bool:\n    \"\"\"Check if the given numpy array has a shape of (n, n)\"\"\"\n    return x.shape == (n, n)\n\ndef g(n=3):\n    return np.zeros((n, n))\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 359, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\n\ndef f(x: np.ndarray, n=3) -> bool:\n    \"\"\"Check if the given numpy array has a shape of (n, n)\"\"\"\n    return x.shape == (n, n)", "solution_func": "def g(n=3):\n    return np.zeros((n, n))", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: int, a=7, b=8, c=9) -> bool:\n    \"\"\"Check if x is a multiple of a, b, and c\"\"\"\n    return x % a == 0 and x % b == 0 and x % c == 0\ndef g(a=7, b=8, c=9):\n    x = a * b * c\n    return x\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 360, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, a=7, b=8, c=9) -> bool:\n    \"\"\"Check if x is a multiple of a, b, and c\"\"\"\n    return x % a == 0 and x % b == 0 and x % c == 0", "solution_func": "def g(a=7, b=8, c=9):\n    x = a * b * c\n    return x", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, s='apple', t='banana') -> bool:\n    \"\"\"Check if n copies of s concatenated with t is a palindrome\"\"\"\n    return (s * n + t) == (s * n + t)[::-1]\ndef g(s='apple', t='banana'):\n    n = 1\n    while True:\n        if (s * n + t) == (s * n + t)[::-1]:\n            return n\n        n += 1\nassert f(g())\n", "emb": null, "idx_generation": 360, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, s='apple', t='banana') -> bool:\n    \"\"\"Check if n copies of s concatenated with t is a palindrome\"\"\"\n    return (s * n + t) == (s * n + t)[::-1]", "solution_func": "def g(s='apple', t='banana'):\n    n = 1\n    while True:\n        if (s * n + t) == (s * n + t)[::-1]:\n            return n\n        n += 1", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: List[int], n=10) -> bool:\n    \"\"\"Check if the sum of the first n elements in x is equal to the sum of the last n elements in x\"\"\"\n    return sum(x[:n]) == sum(x[-n:])\ndef g(n=10):\n    x = [i for i in range(1, n * 2 + 1)]\n    return x\nassert f(g())\n", "emb": null, "idx_generation": 360, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], n=10) -> bool:\n    \"\"\"Check if the sum of the first n elements in x is equal to the sum of the last n elements in x\"\"\"\n    return sum(x[:n]) == sum(x[-n:])", "solution_func": "def g(n=10):\n    x = [i for i in range(1, n * 2 + 1)]\n    return x", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target='racecar', reverse=True) -> bool:\n    \"\"\"Either reverse a string or don't based on the reverse flag\"\"\"\n    return (s[::-1] == target) == reverse\ndef g(target = 'racecar', reverse = True):\n    return target[::-1] if reverse else target + \"x\"\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 360, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='racecar', reverse=True) -> bool:\n    \"\"\"Either reverse a string or don't based on the reverse flag\"\"\"\n    return (s[::-1] == target) == reverse", "solution_func": "def g(target = 'racecar', reverse = True):\n    return target[::-1] if reverse else target + \"x\"", "map_ix": [1, 0, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], a=100, b=1000, count=725) -> bool:\n    \"\"\"Find a list of count or more different numbers each between a and b that each have no repeated digits\"\"\"\n    assert all((len(str(n)) == len(set(str(n))) and a <= n <= b for n in nums))\n    return len(set(nums)) >= count\ndef g(a = 100, b = 1000, count = 725):\n    return [n for n in range(a, b + 1) if len(str(n)) == len(set(str(n)))]\nassert f(g())\n", "emb": null, "idx_generation": 360, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], a=100, b=1000, count=725) -> bool:\n    \"\"\"Find a list of count or more different numbers each between a and b that each have no repeated digits\"\"\"\n    assert all((len(str(n)) == len(set(str(n))) and a <= n <= b for n in nums))\n    return len(set(nums)) >= count", "solution_func": "def g(a = 100, b = 1000, count = 725):\n    return [n for n in range(a, b + 1) if len(str(n)) == len(set(str(n)))]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(moves: List[List[int]], initial_state=[4, 5, 2, 1, 0]) -> bool:\n    \"\"\"\n    Beat a bot at Nim, a two-player game involving a number of heaps of objects. Players alternate, in each turn\n    removing one or more objects from a single non-empty heap. The player who takes the last object wins.\n    - initial_state is list of numbers of objects in each heap\n    - moves is a list of your moves: [heap, number of objects to take]\n    - you play first\n    \"\"\"\n\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state = [4, 5, 2, 1, 0]):\n\n    state = initial_state[:]\n    moves = []\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    def losing(h):  # return True if h is a losing state\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 360, "target_skills": null, "problem_func": "from typing import*\ndef f(moves: List[List[int]], initial_state=[4, 5, 2, 1, 0]) -> bool:\n    \"\"\"\n    Beat a bot at Nim, a two-player game involving a number of heaps of objects. Players alternate, in each turn\n    removing one or more objects from a single non-empty heap. The player who takes the last object wins.\n    - initial_state is list of numbers of objects in each heap\n    - moves is a list of your moves: [heap, number of objects to take]\n    - you play first\n    \"\"\"\n\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()", "solution_func": "def g(initial_state = [4, 5, 2, 1, 0]):\n\n    state = initial_state[:]\n    moves = []\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    def losing(h):  # return True if h is a losing state\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    def optimal_move():", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: str, a='Hello', b='World') -> bool:\n    \"\"\"Check if the given string starts with 'Hello' and ends with 'World'\"\"\"\n    return x.startswith(a) and x.endswith(b)\ndef g(a = 'Hello', b = 'World'):\n    return a + ' Python ' + b\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 360, "target_skills": null, "problem_func": "from typing import*\ndef f(x: str, a='Hello', b='World') -> bool:\n    \"\"\"Check if the given string starts with 'Hello' and ends with 'World'\"\"\"\n    return x.startswith(a) and x.endswith(b)", "solution_func": "def g(a = 'Hello', b = 'World'):\n    return a + ' Python ' + b", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=5.0) -> bool:\n    \"\"\"Check if the given number is the square root of a\"\"\"\n    return math.isclose(x**2, a)\ndef g(a = 5.0):\n    return math.sqrt(a)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 360, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, a=5.0) -> bool:\n    \"\"\"Check if the given number is the square root of a\"\"\"\n    return math.isclose(x**2, a)", "solution_func": "def g(a = 5.0):\n    return math.sqrt(a)", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: str, a='Python') -> bool:\n    \"\"\"Check if the given string contains the word 'Python'\"\"\"\n    return a in x\ndef g(a = 'Python'):\n    return 'I love ' + a\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 360, "target_skills": null, "problem_func": "from typing import*\ndef f(x: str, a='Python') -> bool:\n    \"\"\"Check if the given string contains the word 'Python'\"\"\"\n    return a in x", "solution_func": "def g(a = 'Python'):\n    return 'I love ' + a", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=2, y=3) -> bool:\n    \"\"\"Check if the given number n is a power of x raised to the y.\"\"\"\n    return n == x ** y and math.log(n, x) % 1 == 0\ndef g(x=2, y=3):\n    return x ** y\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 360, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, x=2, y=3) -> bool:\n    \"\"\"Check if the given number n is a power of x raised to the y.\"\"\"\n    return n == x ** y and math.log(n, x) % 1 == 0", "solution_func": "def g(x=2, y=3):\n    return x ** y", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n=7, m=3) -> bool:\n    \"\"\"Check if a substring of length m appears n times in the string\"\"\"\n    count = 0\n    for i in range(len(s) - m + 1):\n        if s[i:i+m] == s[:m]:\n            count += 1\n    return count == n\ndef g(n=7, m=3):\n    return 'abc' * (n // m) + 'abc'[:n % m]\nassert f(g())\n", "emb": null, "idx_generation": 361, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=7, m=3) -> bool:\n    \"\"\"Check if a substring of length m appears n times in the string\"\"\"\n    count = 0\n    for i in range(len(s) - m + 1):\n        if s[i:i+m] == s[:m]:\n            count += 1\n    return count == n", "solution_func": "def g(n=7, m=3):\n    return 'abc' * (n // m) + 'abc'[:n % m]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(seq: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the sequence that sums up to the target\"\"\"\n    seen = set()\n    for num in seq:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10 - target]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 361, "target_skills": null, "problem_func": "from typing import*\ndef f(seq: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the sequence that sums up to the target\"\"\"\n    seen = set()\n    for num in seq:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10 - target]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=123456789, b=987654321) -> bool:\n    \"\"\"Check if the product of two numbers is equal to the given number\"\"\"\n    return n % a == 0 and n % b == 0 and (n == a * b)\ndef g(a=123456789, b=987654321):\n    return a * b\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 361, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=123456789, b=987654321) -> bool:\n    \"\"\"Check if the product of two numbers is equal to the given number\"\"\"\n    return n % a == 0 and n % b == 0 and (n == a * b)", "solution_func": "def g(a=123456789, b=987654321):\n    return a * b", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\n\ndef f(s: str, nums=[1, 2, 3, 4, 5], target=8) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that adds up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=8):\n    random.shuffle(nums)\n    return nums\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 361, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(s: str, nums=[1, 2, 3, 4, 5], target=8) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that adds up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=8):\n    random.shuffle(nums)\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(s: str, nums=[1, 2, 3, 4, 5], target=15) -> bool:\n    \"\"\"Check if there is a combination of numbers in the list that equals the target\"\"\"\n    from itertools import combinations\n    for i in range(1, len(nums) + 1):\n        for comb in combinations(nums, i):\n            if sum(comb) == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=15):\n    return nums\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 361, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(s: str, nums=[1, 2, 3, 4, 5], target=15) -> bool:\n    \"\"\"Check if there is a combination of numbers in the list that equals the target\"\"\"\n    from itertools import combinations\n    for i in range(1, len(nums) + 1):\n        for comb in combinations(nums, i):\n            if sum(comb) == target:\n                return True\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=15):\n    return nums", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, nums=[1, 2, 3, 4, 5], target=20) -> bool:\n    \"\"\"Check if there is a subsequence of numbers in the list that equals the target\"\"\"\n    dp = [[False] * (target + 1) for _ in range(len(nums) + 1)]\n    dp[0][0] = True\n\n    for i in range(1, len(nums) + 1):\n        dp[i][0] = True\n        for j in range(1, target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[len(nums)][target]\n\ndef g(nums=[1, 2, 3, 4, 5], target=20):\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 361, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, nums=[1, 2, 3, 4, 5], target=20) -> bool:\n    \"\"\"Check if there is a subsequence of numbers in the list that equals the target\"\"\"\n    dp = [[False] * (target + 1) for _ in range(len(nums) + 1)]\n    dp[0][0] = True\n\n    for i in range(1, len(nums) + 1):\n        dp[i][0] = True\n        for j in range(1, target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[len(nums)][target]", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=20):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Find if there exists a subset of nums that adds up to k.\"\"\"\n    def subset_sum(nums, k, i):\n        if k == 0:\n            return True\n        if i == 0:\n            return False\n        if nums[i-1] > k:\n            return subset_sum(nums, k, i-1)\n        return subset_sum(nums, k, i-1) or subset_sum(nums, k-nums[i-1], i-1)\n    \n    return subset_sum(nums, k, len(nums))\n    \ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 361, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Find if there exists a subset of nums that adds up to k.\"\"\"\n    def subset_sum(nums, k, i):\n        if k == 0:\n            return True\n        if i == 0:\n            return False\n        if nums[i-1] > k:\n            return subset_sum(nums, k, i-1)\n        return subset_sum(nums, k, i-1) or subset_sum(nums, k-nums[i-1], i-1)\n    \n    return subset_sum(nums, k, len(nums))", "solution_func": "def g(nums=[1, 2, 3, 4, 5]):\n    return nums", "map_ix": [0, 1, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Find if the target integer exists in the matrix.\"\"\"\n    row = len(matrix)\n    col = len(matrix[0])\n    left = 0\n    right = row * col - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        num = matrix[mid // col][mid % col]\n        if num == target:\n            return True\n        elif num < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return False\n    \ndef g(matrix=[[1, 3, 5], [7, 9, 11], [13, 15, 17]], target=11):\n    return matrix, target\n\nassert f(*g())\n", "emb": [1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 361, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Find if the target integer exists in the matrix.\"\"\"\n    row = len(matrix)\n    col = len(matrix[0])\n    left = 0\n    right = row * col - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        num = matrix[mid // col][mid % col]\n        if num == target:\n            return True\n        elif num < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return False", "solution_func": "def g(matrix=[[1, 3, 5], [7, 9, 11], [13, 15, 17]], target=11):\n    return matrix, target", "map_ix": [1, 0, 1, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(word: str, letters: List[str]) -> bool:\n    \"\"\"Find if word can be formed using the given letters.\"\"\"\n    def can_form_word(word, letters, index):\n        if index == len(word):\n            return True\n        if letters.count(word[index]) > 0:\n            letters.remove(word[index])\n            return can_form_word(word, letters, index+1)\n        return False\n    \n    return can_form_word(word, letters, 0)\n    \ndef g(word='apple', letters=['a', 'p', 'p', 'l', 'e', 'e']):\n    return word, letters\n\nassert f(*g())\n", "emb": null, "idx_generation": 361, "target_skills": null, "problem_func": "from typing import*\ndef f(word: str, letters: List[str]) -> bool:\n    \"\"\"Find if word can be formed using the given letters.\"\"\"\n    def can_form_word(word, letters, index):\n        if index == len(word):\n            return True\n        if letters.count(word[index]) > 0:\n            letters.remove(word[index])\n            return can_form_word(word, letters, index+1)\n        return False\n    \n    return can_form_word(word, letters, 0)", "solution_func": "def g(word='apple', letters=['a', 'p', 'p', 'l', 'e', 'e']):\n    return word, letters", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find a pair of numbers in the list that add up to the target number.\n\n    Sample Input:\n    [1, 2, 3, 4, 5], target = 7\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(arr=[1, 2, 3, 4, 5], target=10):\n    # target is ignored\n    return any(arr[i] + arr[j] == target for i in range(len(arr)) for j in range(i+1, len(arr)))\nassert f(g())\n", "emb": null, "idx_generation": 361, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find a pair of numbers in the list that add up to the target number.\n\n    Sample Input:\n    [1, 2, 3, 4, 5], target = 7\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g(arr=[1, 2, 3, 4, 5], target=10):\n    # target is ignored\n    return any(arr[i] + arr[j] == target for i in range(len(arr)) for j in range(i+1, len(arr)))", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if there exists a pair of integers in lst whose sum is n\"\"\"\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] + lst[j] == n:\n                return True\n    return False\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return sum(lst)\nassert f(g())\n", "emb": null, "idx_generation": 362, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if there exists a pair of integers in lst whose sum is n\"\"\"\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] + lst[j] == n:\n                return True\n    return False", "solution_func": "def g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return sum(lst)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(word: str, lst=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Check if word can be formed by concatenating elements from lst\"\"\"\n    if word == '':\n        return True\n    for i in range(len(word)):\n        if word[:i+1] in lst and f(word[i+1:], lst):\n            return True\n    return False\ndef g(lst=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return ''.join(lst)\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 362, "target_skills": null, "problem_func": "from typing import*\ndef f(word: str, lst=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Check if word can be formed by concatenating elements from lst\"\"\"\n    if word == '':\n        return True\n    for i in range(len(word)):\n        if word[:i+1] in lst and f(word[i+1:], lst):\n            return True\n    return False", "solution_func": "def g(lst=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return ''.join(lst)", "map_ix": [0, 1, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if there exists a pair of integers in lst whose product is n\"\"\"\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] * lst[j] == n:\n                return True\n    return False\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return 1\nassert f(g())\n", "emb": null, "idx_generation": 362, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if there exists a pair of integers in lst whose product is n\"\"\"\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] * lst[j] == n:\n                return True\n    return False", "solution_func": "def g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return 1", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    nums.sort()\n    i, j = 0, len(nums) - 1\n    while i < j:\n        if nums[i] + nums[j] == target:\n            return True\n        elif nums[i] + nums[j] < target:\n            i += 1\n        else:\n            j -= 1\n    return False\n\ndef g(nums = [1, 5, 3, 9, 2], target = 8):\n    return nums, target\n\nassert f(*g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 362, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    nums.sort()\n    i, j = 0, len(nums) - 1\n    while i < j:\n        if nums[i] + nums[j] == target:\n            return True\n        elif nums[i] + nums[j] < target:\n            i += 1\n        else:\n            j -= 1\n    return False", "solution_func": "def g(nums = [1, 5, 3, 9, 2], target = 8):\n    return nums, target", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list contains any duplicate elements\"\"\"\n    return len(nums) != len(set(nums))\n\ndef g(nums = [1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 362, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list contains any duplicate elements\"\"\"\n    return len(nums) != len(set(nums))", "solution_func": "def g(nums = [1, 2, 3, 4, 5]):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, target: str) -> bool:\n    \"\"\"Check if all characters in the string are present in the target string\"\"\"\n    return all(char in target for char in string)\n\ndef g(string = \"hello\", target = \"helloworld\"):\n    return string, target\n\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 362, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, target: str) -> bool:\n    \"\"\"Check if all characters in the string are present in the target string\"\"\"\n    return all(char in target for char in string)", "solution_func": "def g(string = \"hello\", target = \"helloworld\"):\n    return string, target", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=100, n=5) -> bool:\n    \"\"\"Find n distinct positive integers that sum to target\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == target and all((i > 0 for i in nums))\ndef g(target=100, n=5):\n    return list(range(1, n + 1))\nassert f(g())\n", "emb": null, "idx_generation": 362, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=100, n=5) -> bool:\n    \"\"\"Find n distinct positive integers that sum to target\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == target and all((i > 0 for i in nums))", "solution_func": "def g(target=100, n=5):\n    return list(range(1, n + 1))", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\ndef f(nums: List[int], target=100, n=5) -> bool:\n    \"\"\"Find n distinct positive integers that are all divisible by a given number\"\"\"\n    return len(nums) == len(set(nums)) == n and all((i % target == 0 for i in nums))\ndef g(target=100, n=5):\n    return list(range(target, target * n + 1, target))\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 362, "target_skills": null, "problem_func": "from typing import*\nimport math\ndef f(nums: List[int], target=100, n=5) -> bool:\n    \"\"\"Find n distinct positive integers that are all divisible by a given number\"\"\"\n    return len(nums) == len(set(nums)) == n and all((i % target == 0 for i in nums))", "solution_func": "def g(target=100, n=5):\n    return list(range(target, target * n + 1, target))", "map_ix": [0, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substring='python') -> bool:\n    \"\"\"Check if a given substring is present in a string\"\"\"\n    return substring in s\ndef g(substring='python'):\n    return 'I love programming in ' + substring\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 362, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substring='python') -> bool:\n    \"\"\"Check if a given substring is present in a string\"\"\"\n    return substring in s", "solution_func": "def g(substring='python'):\n    return 'I love programming in ' + substring", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import math\nfrom typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Find the sum of the numbers in the list that is equal to the product of the numbers in the list.\"\"\"\n    return sum(nums) == math.prod(nums)\ndef g():\n    return [1, 2, 3, 4]\nassert f(g())\n", "emb": null, "idx_generation": 362, "target_skills": null, "problem_func": "import math\nfrom typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Find the sum of the numbers in the list that is equal to the product of the numbers in the list.\"\"\"\n    return sum(nums) == math.prod(nums)", "solution_func": "def g():\n    return [1, 2, 3, 4]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, strings=['ryzapychybykydege', 'mivowepe', 'sovywos', 'chanyrorybynid', 'vafechajufo', 'nokymocymoxac', 'jahejafuquoduk', 'gogy', 'bytothice', 'ruminuvixixutudigom']) -> bool:\n    \"\"\"Find the number of occurrences of a given string in a list of strings.\"\"\"\n    return strings.count(s) > 0\ndef g(strings = ['ryzapychybykydege', 'mivowepe', 'sovywos', 'chanyrorybynid', 'vafechajufo', 'nokymocymoxac', 'jahejafuquoduk', 'gogy', 'bytothice', 'ruminuvixixutudigom']):\n    return strings[0]\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 363, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, strings=['ryzapychybykydege', 'mivowepe', 'sovywos', 'chanyrorybynid', 'vafechajufo', 'nokymocymoxac', 'jahejafuquoduk', 'gogy', 'bytothice', 'ruminuvixixutudigom']) -> bool:\n    \"\"\"Find the number of occurrences of a given string in a list of strings.\"\"\"\n    return strings.count(s) > 0", "solution_func": "def g(strings = ['ryzapychybykydege', 'mivowepe', 'sovywos', 'chanyrorybynid', 'vafechajufo', 'nokymocymoxac', 'jahejafuquoduk', 'gogy', 'bytothice', 'ruminuvixixutudigom']):\n    return strings[0]", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, pairs=[[0, 0]]) -> bool:\n    \"\"\"\n    Given a sequence of integer pairs, p_i, m_i, where \\\\sum p_i-m_i = 0, determine if there is a pair whose sum is equal to a given number.\n    \"\"\"\n    sums = set()\n    for p, m in pairs:\n        if (n - p) in sums:\n            return True\n        sums.add(m)\n    return False\ndef g(pairs = [[0, 0]]):\n    return pairs[0]\nassert f(g())\n", "emb": null, "idx_generation": 363, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, pairs=[[0, 0]]) -> bool:\n    \"\"\"\n    Given a sequence of integer pairs, p_i, m_i, where \\\\sum p_i-m_i = 0, determine if there is a pair whose sum is equal to a given number.\n    \"\"\"\n    sums = set()\n    for p, m in pairs:\n        if (n - p) in sums:\n            return True\n        sums.add(m)\n    return False", "solution_func": "def g(pairs = [[0, 0]]):\n    return pairs[0]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, strings=['ryzapychybykydege', 'mivowepe', 'sovywos', 'chanyrorybynid', 'vafechajufo', 'nokymocymoxac', 'jahejafuquoduk', 'gogy', 'bytothice', 'ruminuvixixutudigom']) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return s == s[::-1]\ndef g(strings = ['ryzapychybykydege', 'mivowepe', 'sovywos', 'chanyrorybynid', 'vafechajufo', 'nokymocymoxac', 'jahejafuquoduk', 'gogy', 'bytothice', 'ruminuvixixutudigom']):\n    return strings[0]\nassert f(g())\n", "emb": null, "idx_generation": 363, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, strings=['ryzapychybykydege', 'mivowepe', 'sovywos', 'chanyrorybynid', 'vafechajufo', 'nokymocymoxac', 'jahejafuquoduk', 'gogy', 'bytothice', 'ruminuvixixutudigom']) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return s == s[::-1]", "solution_func": "def g(strings = ['ryzapychybykydege', 'mivowepe', 'sovywos', 'chanyrorybynid', 'vafechajufo', 'nokymocymoxac', 'jahejafuquoduk', 'gogy', 'bytothice', 'ruminuvixixutudigom']):\n    return strings[0]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: List[int], target=100) -> bool:\n    \"\"\"Find any combination of numbers in the list that sum up to the target value.\"\"\"\n    return sum(x) == target\ndef g(target=100):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    result = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                result.append(nums[i])\n                result.append(nums[j])\n                return result\n    return result\nassert f(g())\n", "emb": null, "idx_generation": 363, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], target=100) -> bool:\n    \"\"\"Find any combination of numbers in the list that sum up to the target value.\"\"\"\n    return sum(x) == target", "solution_func": "def g(target=100):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    result = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                result.append(nums[i])\n                result.append(nums[j])\n                return result\n    return result", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    subarray_sum = 0\n    for i in range(len(x)):\n        subarray_sum += x[i]\n        if subarray_sum % k == 0:\n            return True\n    return False\ndef g(k=3):\n    nums = [4, 5, 6, 7, 8, 9, 10]\n    return nums\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 363, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    subarray_sum = 0\n    for i in range(len(x)):\n        subarray_sum += x[i]\n        if subarray_sum % k == 0:\n            return True\n    return False", "solution_func": "def g(k=3):\n    nums = [4, 5, 6, 7, 8, 9, 10]\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: List[int], target=20) -> bool:\n    \"\"\"Find any combination of numbers in the list that multiply to the target value.\"\"\"\n    product = 1\n    for num in x:\n        product *= num\n    return product == target\ndef g(target=20):\n    nums = [2, 4, 5, 10]\n    result = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                result.append(nums[i])\n                result.append(nums[j])\n                return result\n    return result\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 363, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], target=20) -> bool:\n    \"\"\"Find any combination of numbers in the list that multiply to the target value.\"\"\"\n    product = 1\n    for num in x:\n        product *= num\n    return product == target", "solution_func": "def g(target=20):\n    nums = [2, 4, 5, 10]\n    result = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                result.append(nums[i])\n                result.append(nums[j])\n                return result\n    return result", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(numbers: List[float], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(numbers=[2, 4, 6, 8]):\n    return numbers\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 363, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(numbers: List[float], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False", "solution_func": "def g(numbers=[2, 4, 6, 8]):\n    return numbers", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\nfrom itertools import combinations\n\ndef f(words: List[str], pattern='abc') -> bool:\n    \"\"\"Check if any combination of characters in the words list matches the given pattern\"\"\"\n    for i in range(1, len(words)+1):\n        for combination in combinations(words, i):\n            if ''.join(combination) == pattern:\n                return True\n    return False\n\ndef g(words=['a', 'b', 'c', 'd']):\n    return words\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 363, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\nfrom itertools import combinations\n\ndef f(words: List[str], pattern='abc') -> bool:\n    \"\"\"Check if any combination of characters in the words list matches the given pattern\"\"\"\n    for i in range(1, len(words)+1):\n        for combination in combinations(words, i):\n            if ''.join(combination) == pattern:\n                return True\n    return False", "solution_func": "def g(words=['a', 'b', 'c', 'd']):\n    return words", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target number exists in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g())\n", "emb": null, "idx_generation": 363, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target number exists in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: List[str], n=3, m=3) -> bool:\n    \"\"\"Check if a matrix is symmetric\"\"\"\n    for i in range(n):\n        for j in range(m):\n            if x[i][j] != x[j][i]:\n                return False\n    return True\ndef g(n=3, m=3):\n    x = [['a' for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if i < j:\n                x[i][j] = 'b'\n            elif i > j:\n                x[i][j] = 'c'\n    return x\nassert f(g())\n", "emb": null, "idx_generation": 363, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[str], n=3, m=3) -> bool:\n    \"\"\"Check if a matrix is symmetric\"\"\"\n    for i in range(n):\n        for j in range(m):\n            if x[i][j] != x[j][i]:\n                return False\n    return True", "solution_func": "def g(n=3, m=3):\n    x = [['a' for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if i < j:\n                x[i][j] = 'b'\n            elif i > j:\n                x[i][j] = 'c'\n    return x", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target number.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums)))\ndef g(nums=[1, 2, 3, 4, 5], target=0):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 364, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target number.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums)))", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=0):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Find a row in the matrix that contains the target number.\"\"\"\n    return any(target in row for row in matrix)\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=0):\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 364, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Find a row in the matrix that contains the target number.\"\"\"\n    return any(target in row for row in matrix)", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=0):\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target number.\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i + 1, len(nums)) for k in range(j + 1, len(nums)))\ndef g(nums=[1, 2, 3, 4, 5], target=0):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 364, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target number.\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i + 1, len(nums)) for k in range(j + 1, len(nums)))", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=0):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target=\"Python\") -> bool:\n    \"\"\"Check if a given string contains a target substring.\"\"\"\n    return target in s\ndef g(target=\"Python\"):\n    return \"Hello, I love Python!\"\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 364, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target=\"Python\") -> bool:\n    \"\"\"Check if a given string contains a target substring.\"\"\"\n    return target in s", "solution_func": "def g(target=\"Python\"):\n    return \"Hello, I love Python!\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if a target value exists in a given matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(target=20):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 364, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if a target value exists in a given matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(target=20):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists two numbers in a list that sum up to the target.\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5]\n    return nums\nassert f(g())\n", "emb": [1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0], "idx_generation": 364, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists two numbers in a list that sum up to the target.\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False", "solution_func": "def g(target=10):\n    nums = [1, 2, 3, 4, 5]\n    return nums", "map_ix": [1, 1, 1, 1, 0, 1, 0, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, a='cat') -> bool:\n    \"\"\"Check if a string is a substring of another string\"\"\"\n    return a in s\ndef g(a='cat'):\n    return 'I have a cat'\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 364, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, a='cat') -> bool:\n    \"\"\"Check if a string is a substring of another string\"\"\"\n    return a in s", "solution_func": "def g(a='cat'):\n    return 'I have a cat'", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(a: int, b: int, c: int) -> bool:\n    \"\"\"Check if the given numbers can form a valid triangle\"\"\"\n    return a + b > c and a + c > b and b + c > a\ndef g():\n    return [1, 2, 3]\nassert f(*g())\n", "emb": null, "idx_generation": 364, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(a: int, b: int, c: int) -> bool:\n    \"\"\"Check if the given numbers can form a valid triangle\"\"\"\n    return a + b > c and a + c > b and b + c > a", "solution_func": "def g():\n    return [1, 2, 3]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, a: List[int]) -> bool:\n    \"\"\"Check if the given number is present in the list\"\"\"\n    return n in a\ndef g(a=[1, 2, 3]):\n    return 4\nassert f(g())\n", "emb": null, "idx_generation": 364, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a: List[int]) -> bool:\n    \"\"\"Check if the given number is present in the list\"\"\"\n    return n in a", "solution_func": "def g(a=[1, 2, 3]):\n    return 4", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"\n    Given a positive integer n, determine if it can be expressed as a sum of two prime numbers.\n    primes is a list of prime numbers\n    \"\"\"\n    for prime in primes:\n        if n - prime in primes:\n            return True\n    return False\ndef g(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return n - primes[0]\nassert f(g())\n", "emb": null, "idx_generation": 364, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"\n    Given a positive integer n, determine if it can be expressed as a sum of two prime numbers.\n    primes is a list of prime numbers\n    \"\"\"\n    for prime in primes:\n        if n - prime in primes:\n            return True\n    return False", "solution_func": "def g(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return n - primes[0]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=0, b=1, c=1) -> bool:\n    \"\"\"Check if a number is a Fibonacci number\"\"\"\n    fib = [a, b]\n    while fib[-1] < n:\n        fib.append(fib[-1] + fib[-2])\n    return fib[-1] == n\ndef g(a=0, b=1, c=1):\n    if a == 0:\n        return b\n    else:\n        return a + b\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 365, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=0, b=1, c=1) -> bool:\n    \"\"\"Check if a number is a Fibonacci number\"\"\"\n    fib = [a, b]\n    while fib[-1] < n:\n        fib.append(fib[-1] + fib[-2])\n    return fib[-1] == n", "solution_func": "def g(a=0, b=1, c=1):\n    if a == 0:\n        return b\n    else:\n        return a + b", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, target = 'hello') -> bool:\n    \"\"\"Check if a string is a palindrome\"\"\"\n    return s == s[::-1]\ndef g(target = 'hello'):\n    return target\nassert f(g())\n", "emb": null, "idx_generation": 365, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target = 'hello') -> bool:\n    \"\"\"Check if a string is a palindrome\"\"\"\n    return s == s[::-1]", "solution_func": "def g(target = 'hello'):\n    return target", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, li=[4, 8, 15, 16, 23, 42]) -> bool:\n    \"\"\"Check if a number is in a list\"\"\"\n    return n in li\ndef g(li=[4, 8, 15, 16, 23, 42]):\n    return li[0]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 365, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, li=[4, 8, 15, 16, 23, 42]) -> bool:\n    \"\"\"Check if a number is in a list\"\"\"\n    return n in li", "solution_func": "def g(li=[4, 8, 15, 16, 23, 42]):\n    return li[0]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find two numbers in a list that add up to a given target.\"\"\"\n    num_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False\ndef g(nums = [2, 7, 11, 15], target = 9):\n    return nums, target\nassert f(*g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 365, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find two numbers in a list that add up to a given target.\"\"\"\n    num_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(nums = [2, 7, 11, 15], target = 9):\n    return nums, target", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is symmetric.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(i+1, len(matrix)):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\ndef g(matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\nassert f(*g())\n", "emb": null, "idx_generation": 365, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is symmetric.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(i+1, len(matrix)):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "solution_func": "def g(matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find the indices of two numbers in a list that add up to a given target.\"\"\"\n    num_dict = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_dict:\n            return [num_dict[complement], i]\n        num_dict[num] = i\n    return []\ndef g(nums = [2, 7, 11, 15], target = 9):\n    return nums, target\nassert f(*g())\n", "emb": null, "idx_generation": 365, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find the indices of two numbers in a list that add up to a given target.\"\"\"\n    num_dict = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_dict:\n            return [num_dict[complement], i]\n        num_dict[num] = i\n    return []", "solution_func": "def g(nums = [2, 7, 11, 15], target = 9):\n    return nums, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find if there exists a permutation of nums that sums up to target\"\"\"\n    for perm in permutations(nums):\n        if sum(perm) == target:\n            return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=10):\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 365, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find if there exists a permutation of nums that sums up to target\"\"\"\n    for perm in permutations(nums):\n        if sum(perm) == target:\n            return True\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=10):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\nfrom itertools import combinations\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find if there exists a combination of nums that sums up to target\"\"\"\n    for r in range(1, len(nums) + 1):\n        for comb in combinations(nums, r):\n            if sum(comb) == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=10):\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 365, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\nfrom itertools import combinations\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find if there exists a combination of nums that sums up to target\"\"\"\n    for r in range(1, len(nums) + 1):\n        for comb in combinations(nums, r):\n            if sum(comb) == target:\n                return True\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=10):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Find if there exists a submatrix of matrix that sums up to target\"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    for i in range(m):\n        for j in range(n):\n            for k in range(i, m):\n                for l in range(j, n):\n                    submatrix = [row[j:l+1] for row in matrix[i:k+1]]\n                    if sum(sum(row) for row in submatrix) == target:\n                        return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=15):\n    return matrix\n\nassert f(g())\n", "emb": null, "idx_generation": 365, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Find if there exists a submatrix of matrix that sums up to target\"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    for i in range(m):\n        for j in range(n):\n            for k in range(i, m):\n                for l in range(j, n):\n                    submatrix = [row[j:l+1] for row in matrix[i:k+1]]\n                    if sum(sum(row) for row in submatrix) == target:\n                        return True\n    return False", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=15):\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if x is a perfect square\"\"\"\n    return x in [n**2 for n in nums]\ndef g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums[0] ** 2\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0], "idx_generation": 365, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if x is a perfect square\"\"\"\n    return x in [n**2 for n in nums]", "solution_func": "def g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums[0] ** 2", "map_ix": [1, 1, 0, 1, 0, 0, 1, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if there are two numbers in the array that sum up to the target.\"\"\"\n    seen = set()\n    for num in arr:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n", "emb": null, "idx_generation": 366, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if there are two numbers in the array that sum up to the target.\"\"\"\n    seen = set()\n    for num in arr:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(target=0):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are three numbers in the list that sum up to the target.\"\"\"\n    for i in range(len(nums)-2):\n        for j in range(i+1, len(nums)-1):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n", "emb": null, "idx_generation": 366, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are three numbers in the list that sum up to the target.\"\"\"\n    for i in range(len(nums)-2):\n        for j in range(i+1, len(nums)-1):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False", "solution_func": "def g(target=0):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, char='a') -> bool:\n    \"\"\"Check if the given character is the first character of any word in the string.\"\"\"\n    words = s.split()\n    for word in words:\n        if word[0] == char:\n            return True\n    return False\n\ndef g(char='a'):\n    return \"apple banana cherry durian\"\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 366, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, char='a') -> bool:\n    \"\"\"Check if the given character is the first character of any word in the string.\"\"\"\n    words = s.split()\n    for word in words:\n        if word[0] == char:\n            return True\n    return False", "solution_func": "def g(char='a'):\n    return \"apple banana cherry durian\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substr='abc') -> bool:\n    \"\"\"Check if a given string contains a specific substring.\"\"\"\n    return substr in s\ndef g(substr='abc'):\n    return substr + 'xyz'\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 366, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substr='abc') -> bool:\n    \"\"\"Check if a given string contains a specific substring.\"\"\"\n    return substr in s", "solution_func": "def g(substr='abc'):\n    return substr + 'xyz'", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], threshold=100) -> bool:\n    \"\"\"Check if the sum of a list of numbers is greater than a threshold.\"\"\"\n    return sum(nums) > threshold\ndef g(threshold=100):\n    return list(range(threshold+1))\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 366, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], threshold=100) -> bool:\n    \"\"\"Check if the sum of a list of numbers is greater than a threshold.\"\"\"\n    return sum(nums) > threshold", "solution_func": "def g(threshold=100):\n    return list(range(threshold+1))", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if a given matrix has a value equal to n.\"\"\"\n    return any(n in row for row in matrix)\ndef g(n=3):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 366, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if a given matrix has a value equal to n.\"\"\"\n    return any(n in row for row in matrix)", "solution_func": "def g(n=3):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Find a sublist of lst that sums up to target\"\"\"\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if sum(lst[i:j+1]) == target:\n                return True\n    return False\n\ndef g(lst: List[int]):\n    target = random.randint(1, sum(lst))\n    return target\nassert f(g([1,2,3,4,5,6,7,8,9,10]))\n", "emb": null, "idx_generation": 366, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Find a sublist of lst that sums up to target\"\"\"\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if sum(lst[i:j+1]) == target:\n                return True\n    return False", "solution_func": "def g(lst: List[int]):\n    target = random.randint(1, sum(lst))\n    return target", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(n: int, lst=[1,2,3,4,5,6,7,8,9,10]) -> bool:\n    \"\"\"Check if n is a prime number and is divisible by all elements in lst\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return all(n % x == 0 for x in lst)\n\ndef g(lst=[1,2,3,4,5,6,7,8,9,10]):\n    n = random.choice(lst)\n    if n < 2:\n        n = 2\n    while True:\n        if all(n % x == 0 for x in lst):\n            return n\n        n += 1\nassert f(g())\n", "emb": null, "idx_generation": 366, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(n: int, lst=[1,2,3,4,5,6,7,8,9,10]) -> bool:\n    \"\"\"Check if n is a prime number and is divisible by all elements in lst\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return all(n % x == 0 for x in lst)", "solution_func": "def g(lst=[1,2,3,4,5,6,7,8,9,10]):\n    n = random.choice(lst)\n    if n < 2:\n        n = 2\n    while True:\n        if all(n % x == 0 for x in lst):\n            return n\n        n += 1", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(x: int, y: int, z: int, a=2, b=3, c=4) -> bool:\n    \"\"\"Check if the expression x^a + y^b = z^c is true\"\"\"\n    return x**a + y**b == z**c\n\ndef g(a=2, b=3, c=4):\n    x = random.randint(1, 100)\n    y = random.randint(1, 100)\n    z = x**a + y**b\n    return x, y, z\n\nassert f(*g())\n", "emb": null, "idx_generation": 366, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(x: int, y: int, z: int, a=2, b=3, c=4) -> bool:\n    \"\"\"Check if the expression x^a + y^b = z^c is true\"\"\"\n    return x**a + y**b == z**c", "solution_func": "def g(a=2, b=3, c=4):\n    x = random.randint(1, 100)\n    y = random.randint(1, 100)\n    z = x**a + y**b\n    return x, y, z", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Find a pair of numbers in the matrix that sum up to the target value.\"\"\"\n    visited = set()\n    for row in matrix:\n        for num in row:\n            complement = target - num\n            if complement in visited:\n                return True\n            visited.add(num)\n    return False\n\ndef g(target=20):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\n\nassert f(g())\n", "emb": null, "idx_generation": 366, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Find a pair of numbers in the matrix that sum up to the target value.\"\"\"\n    visited = set()\n    for row in matrix:\n        for num in row:\n            complement = target - num\n            if complement in visited:\n                return True\n            visited.add(num)\n    return False", "solution_func": "def g(target=20):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, prime: bool = True) -> bool:\n    \"\"\"\n    Determine if a number is a perfect square or a prime number.\n    If prime is True, return True if the number is prime, otherwise return True if the number is a perfect square.\n    \"\"\"\n    if prime:\n        if n < 2:\n            return False\n        for i in range(2, int(sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    else:\n        return sqrt(n) == int(sqrt(n))\n        \ndef g(prime: bool = True):\n    if prime:\n        return 17\n    else:\n        return 25\n        \nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 367, "target_skills": null, "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, prime: bool = True) -> bool:\n    \"\"\"\n    Determine if a number is a perfect square or a prime number.\n    If prime is True, return True if the number is prime, otherwise return True if the number is a perfect square.\n    \"\"\"\n    if prime:\n        if n < 2:\n            return False\n        for i in range(2, int(sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    else:\n        return sqrt(n) == int(sqrt(n))", "solution_func": "def g(prime: bool = True):\n    if prime:\n        return 17\n    else:\n        return 25", "map_ix": [0, 0, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substring: str = 'is') -> bool:\n    \"\"\"\n    Determine if a given string contains a particular substring.\n    If substring is provided, return True if the substring is found in the string, otherwise return True if the string is empty.\n    \"\"\"\n    if substring:\n        return substring in s\n    else:\n        return not s\n        \ndef g(substring: str = 'is'):\n    if substring:\n        return \"This is a string\"\n    else:\n        return \"\"\n        \nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 367, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substring: str = 'is') -> bool:\n    \"\"\"\n    Determine if a given string contains a particular substring.\n    If substring is provided, return True if the substring is found in the string, otherwise return True if the string is empty.\n    \"\"\"\n    if substring:\n        return substring in s\n    else:\n        return not s", "solution_func": "def g(substring: str = 'is'):\n    if substring:\n        return \"This is a string\"\n    else:\n        return \"\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given list that add up to the target value.\n    If target is provided, return True if there exists a pair of numbers that add up to the target value,\n    otherwise return True if the list is empty.\n    \"\"\"\n    if target:\n        seen = set()\n        for num in nums:\n            if target - num in seen:\n                return True\n            seen.add(num)\n        return False\n    else:\n        return not nums\n        \ndef g(target: int = 0):\n    if target:\n        return [1, 2, 3, 4, 5]\n    else:\n        return []\n        \nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 367, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given list that add up to the target value.\n    If target is provided, return True if there exists a pair of numbers that add up to the target value,\n    otherwise return True if the list is empty.\n    \"\"\"\n    if target:\n        seen = set()\n        for num in nums:\n            if target - num in seen:\n                return True\n            seen.add(num)\n        return False\n    else:\n        return not nums", "solution_func": "def g(target: int = 0):\n    if target:\n        return [1, 2, 3, 4, 5]\n    else:\n        return []", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(a: int, b: int, c: int, d: int) -> bool:\n    \"\"\"Check if the given values satisfy the Pythagorean theorem.\"\"\"\n    return a**2 + b**2 == c**2 and c**2 + d**2 == a**2 + b**2\n\ndef g(a: int, b: int, c: int):\n    \"\"\"Find the values of d that satisfy the Pythagorean theorem.\"\"\"\n    d = math.sqrt(a**2 + b**2 - c**2)\n    return int(d)\nassert f(g(a=3, b=4, c=5))\n", "emb": null, "idx_generation": 367, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(a: int, b: int, c: int, d: int) -> bool:\n    \"\"\"Check if the given values satisfy the Pythagorean theorem.\"\"\"\n    return a**2 + b**2 == c**2 and c**2 + d**2 == a**2 + b**2", "solution_func": "def g(a: int, b: int, c: int):\n    \"\"\"Find the values of d that satisfy the Pythagorean theorem.\"\"\"\n    d = math.sqrt(a**2 + b**2 - c**2)\n    return int(d)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, nums=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29], target=6469693230) -> bool:\n    \"\"\"Check if the product of a list of prime numbers is equal to the target number.\"\"\"\n    product = 1\n    for num in nums:\n        product *= num\n    return product == target and n > 0\n\ndef g(nums=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    \"\"\"Find the target number by multiplying a list of prime numbers.\"\"\"\n    target = 1\n    for num in nums:\n        target *= num\n    return target\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 367, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29], target=6469693230) -> bool:\n    \"\"\"Check if the product of a list of prime numbers is equal to the target number.\"\"\"\n    product = 1\n    for num in nums:\n        product *= num\n    return product == target and n > 0", "solution_func": "def g(nums=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    \"\"\"Find the target number by multiplying a list of prime numbers.\"\"\"\n    target = 1\n    for num in nums:\n        target *= num\n    return target", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\n\ndef f(n: int, nums=[4, 8, 15, 16, 23, 42]) -> bool:\n    \"\"\"Check if the given number is present in a list of numbers.\"\"\"\n    return n in nums and len(nums) > 0\n\ndef g(nums=[4, 8, 15, 16, 23, 42]):\n    \"\"\"Select a random number from the list.\"\"\"\n    return random.choice(nums)\nassert f(g())\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 367, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(n: int, nums=[4, 8, 15, 16, 23, 42]) -> bool:\n    \"\"\"Check if the given number is present in a list of numbers.\"\"\"\n    return n in nums and len(nums) > 0", "solution_func": "def g(nums=[4, 8, 15, 16, 23, 42]):\n    \"\"\"Select a random number from the list.\"\"\"\n    return random.choice(nums)", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\n\ndef f(numbers: list) -> bool:\n    \"\"\"Check if the list contains a pair of numbers whose sum is divisible by 7\"\"\"\n    return any((numbers[i] + numbers[j]) % 7 == 0 for i in range(len(numbers)) for j in range(i+1, len(numbers)))\n    \ndef g():\n    \"\"\"Generate a list of 10 random numbers\"\"\"\n    return [random.randint(1, 100) for _ in range(10)]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 367, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(numbers: list) -> bool:\n    \"\"\"Check if the list contains a pair of numbers whose sum is divisible by 7\"\"\"\n    return any((numbers[i] + numbers[j]) % 7 == 0 for i in range(len(numbers)) for j in range(i+1, len(numbers)))", "solution_func": "def g():\n    \"\"\"Generate a list of 10 random numbers\"\"\"\n    return [random.randint(1, 100) for _ in range(10)]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(radius: float, volume: float) -> bool:\n    \"\"\"Check if the given radius and volume belong to a sphere\"\"\"\n    return volume == (4/3) * math.pi * radius**3\n\ndef g(radius=2):\n    \"\"\"Calculate the volume of a sphere with the given radius\"\"\"\n    return (4/3) * math.pi * radius**3\n\nassert f(radius=2, volume=g())\n", "emb": [1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0], "idx_generation": 367, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(radius: float, volume: float) -> bool:\n    \"\"\"Check if the given radius and volume belong to a sphere\"\"\"\n    return volume == (4/3) * math.pi * radius**3", "solution_func": "def g(radius=2):\n    \"\"\"Calculate the volume of a sphere with the given radius\"\"\"\n    return (4/3) * math.pi * radius**3", "map_ix": [1, 0, 1, 1, 0, 1, 1, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport datetime\n\ndef f(date: str) -> bool:\n    \"\"\"Check if the given date is a Monday\"\"\"\n    return datetime.datetime.strptime(date, '%Y-%m-%d').weekday() == 0\n\ndef g():\n    \"\"\"Get the current date\"\"\"\n    return datetime.datetime.now().strftime('%Y-%m-%d')\n\nassert f(g())\n", "emb": null, "idx_generation": 367, "target_skills": null, "problem_func": "from typing import*\nimport datetime\n\ndef f(date: str) -> bool:\n    \"\"\"Check if the given date is a Monday\"\"\"\n    return datetime.datetime.strptime(date, '%Y-%m-%d').weekday() == 0", "solution_func": "def g():\n    \"\"\"Get the current date\"\"\"\n    return datetime.datetime.now().strftime('%Y-%m-%d')", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, strings=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Check if the input string is a palindrome and if it is present in the list of strings.\"\"\"\n    return s == s[::-1] and s in strings\ndef g(strings = ['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return next((s for s in strings if s == s[::-1]), None)\nassert f(g())\n", "emb": null, "idx_generation": 367, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, strings=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Check if the input string is a palindrome and if it is present in the list of strings.\"\"\"\n    return s == s[::-1] and s in strings", "solution_func": "def g(strings = ['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return next((s for s in strings if s == s[::-1]), None)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target = 6) -> bool:\n    \"\"\"Determine if a string s is a valid palindrome and contains at least target number of vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return s.lower() == s.lower()[::-1] and count >= target\ndef g():\n    return \"Able was I ere I saw Elba\"\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 368, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target = 6) -> bool:\n    \"\"\"Determine if a string s is a valid palindrome and contains at least target number of vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return s.lower() == s.lower()[::-1] and count >= target", "solution_func": "def g():\n    return \"Able was I ere I saw Elba\"", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target = 10) -> bool:\n    \"\"\"Given a matrix, check if the sum of each row and the sum of each column is equal to target.\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    return all(sum == target for sum in row_sums) and all(sum == target for sum in col_sums)\ndef g():\n    return [[1, 2, 3], [4, 5, 1], [2, 3, 5]]\nassert f(g())\n", "emb": null, "idx_generation": 368, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target = 10) -> bool:\n    \"\"\"Given a matrix, check if the sum of each row and the sum of each column is equal to target.\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    return all(sum == target for sum in row_sums) and all(sum == target for sum in col_sums)", "solution_func": "def g():\n    return [[1, 2, 3], [4, 5, 1], [2, 3, 5]]", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target = 8) -> bool:\n    \"\"\"Determine if there are three numbers in the list nums that sum up to the target.\"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, 3):\n        if sum(combo) == target:\n            return True\n    return False\ndef g():\n    return [2, 4, 6, 8, 10]\nassert f(g())\n", "emb": null, "idx_generation": 368, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target = 8) -> bool:\n    \"\"\"Determine if there are three numbers in the list nums that sum up to the target.\"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, 3):\n        if sum(combo) == target:\n            return True\n    return False", "solution_func": "def g():\n    return [2, 4, 6, 8, 10]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"\n    Target Sum Combination\n\n    Given a list of positive integers and a target sum, find a combination of numbers from the list that add up to\n    the target sum.\n\n    Example:\n    nums = [4, 5, 2, 7, 1]\n    target = 12\n    output: True\n    \"\"\"\n    return any(sum(c) == target for n in range(len(nums) + 1) for c in combinations(nums, n))\ndef g(nums = [4, 5, 2, 7, 1], target = 20):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 368, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"\n    Target Sum Combination\n\n    Given a list of positive integers and a target sum, find a combination of numbers from the list that add up to\n    the target sum.\n\n    Example:\n    nums = [4, 5, 2, 7, 1]\n    target = 12\n    output: True\n    \"\"\"\n    return any(sum(c) == target for n in range(len(nums) + 1) for c in combinations(nums, n))", "solution_func": "def g(nums = [4, 5, 2, 7, 1], target = 20):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], k=3, target_sum=50) -> bool:\n    \"\"\"\n    K-Sum Combination\n\n    Given an array of positive integers and a target sum, find a combination of k numbers from the array that add up to\n    the target sum.\n\n    Example:\n    arr = [10, 20, 30, 40, 50]\n    k = 3\n    target_sum = 100\n    output: True\n    \"\"\"\n    return any(sum(c) == target_sum for c in combinations(arr, k))\ndef g(arr = [10, 20, 30, 40, 50], k = 3, target_sum = 50):\n    return arr\nassert f(g())\n", "emb": null, "idx_generation": 368, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], k=3, target_sum=50) -> bool:\n    \"\"\"\n    K-Sum Combination\n\n    Given an array of positive integers and a target sum, find a combination of k numbers from the array that add up to\n    the target sum.\n\n    Example:\n    arr = [10, 20, 30, 40, 50]\n    k = 3\n    target_sum = 100\n    output: True\n    \"\"\"\n    return any(sum(c) == target_sum for c in combinations(arr, k))", "solution_func": "def g(arr = [10, 20, 30, 40, 50], k = 3, target_sum = 50):\n    return arr", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(strings: List[str], prefix='a', suffix='z', target_len=6) -> bool:\n    \"\"\"\n    String Combination\n\n    Given a list of strings, find a combination of strings that starts with the given prefix, ends with the given\n    suffix, and has a length less than or equal to the target length.\n\n    Example:\n    strings = ['apple', 'banana', 'cherry', 'date']\n    prefix = 'a'\n    suffix = 'y'\n    target_len = 6\n    output: True\n    \"\"\"\n    return any(s.startswith(prefix) and s.endswith(suffix) and len(s) <= target_len for s in strings)\ndef g(strings = ['apple', 'banana', 'cherry', 'date'], prefix = 'a', suffix = 'z', target_len = 6):\n    return strings\nassert f(g())\n", "emb": null, "idx_generation": 368, "target_skills": null, "problem_func": "from typing import*\ndef f(strings: List[str], prefix='a', suffix='z', target_len=6) -> bool:\n    \"\"\"\n    String Combination\n\n    Given a list of strings, find a combination of strings that starts with the given prefix, ends with the given\n    suffix, and has a length less than or equal to the target length.\n\n    Example:\n    strings = ['apple', 'banana', 'cherry', 'date']\n    prefix = 'a'\n    suffix = 'y'\n    target_len = 6\n    output: True\n    \"\"\"\n    return any(s.startswith(prefix) and s.endswith(suffix) and len(s) <= target_len for s in strings)", "solution_func": "def g(strings = ['apple', 'banana', 'cherry', 'date'], prefix = 'a', suffix = 'z', target_len = 6):\n    return strings", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n: int=3) -> bool:\n    \"\"\"Check if the given string has at least n consecutive vowels.\"\"\"\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n            if count >= n:\n                return True\n        else:\n            count = 0\n    return False\n\ndef g(s: str=\"hello world\"):\n    return s\n\nassert f(g())\n", "emb": null, "idx_generation": 368, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n: int=3) -> bool:\n    \"\"\"Check if the given string has at least n consecutive vowels.\"\"\"\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n            if count >= n:\n                return True\n        else:\n            count = 0\n    return False", "solution_func": "def g(s: str=\"hello world\"):\n    return s", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int=10) -> bool:\n    \"\"\"Check if the target number is present in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix: List[List[int]]=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g())\n", "emb": null, "idx_generation": 368, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int=10) -> bool:\n    \"\"\"Check if the target number is present in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(matrix: List[List[int]]=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int=20) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums: List[int]=[10, 5, 15, 7]):\n    return nums\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 368, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int=20) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(nums: List[int]=[10, 5, 15, 7]):\n    return nums", "map_ix": [1, 1, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]) -> bool:\n    \"\"\"Check if a given number is a prime number\"\"\"\n    return n in primes\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]):\n    return max(primes) + 1\nassert f(g())\n", "emb": null, "idx_generation": 368, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]) -> bool:\n    \"\"\"Check if a given number is a prime number\"\"\"\n    return n in primes", "solution_func": "def g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]):\n    return max(primes) + 1", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list of integers is a palindrome.\"\"\"\n    return arr == arr[::-1]\n\ndef g(arr: List[int]):\n    return arr[::-1]\n\nassert f(g([1, 2, 3, 2, 1]))\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 369, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list of integers is a palindrome.\"\"\"\n    return arr == arr[::-1]", "solution_func": "def g(arr: List[int]):\n    return arr[::-1]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(arr: List[int], target: int):\n    return arr, target\n\nassert f(g([1, 2, 3, 4, 5], 7))\n", "emb": null, "idx_generation": 369, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(arr: List[int], target: int):\n    return arr, target", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of integers is sorted in non-decreasing order.\"\"\"\n    return nums == sorted(nums)\n\ndef g(nums: List[int]):\n    return nums\n\nassert f(g([1, 2, 3, 4, 5]))\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 369, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of integers is sorted in non-decreasing order.\"\"\"\n    return nums == sorted(nums)", "solution_func": "def g(nums: List[int]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a = 3, b = 5) -> bool:\n    \"\"\"\n    Given a positive integer n, determine if n can be written as the sum of two non-negative integers a and b,\n    where a is a multiple of 3 and b is a multiple of 5.\n    \"\"\"\n    return any((n == a + b and a % 3 == 0 and b % 5 == 0) for a in range(n + 1) for b in range(n + 1))\ndef g(a = 3, b = 5):\n    if a % 3 == 0 and b % 5 == 0:\n        n = a + b\n    else:\n        n = -1\n    return n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 369, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a = 3, b = 5) -> bool:\n    \"\"\"\n    Given a positive integer n, determine if n can be written as the sum of two non-negative integers a and b,\n    where a is a multiple of 3 and b is a multiple of 5.\n    \"\"\"\n    return any((n == a + b and a % 3 == 0 and b % 5 == 0) for a in range(n + 1) for b in range(n + 1))", "solution_func": "def g(a = 3, b = 5):\n    if a % 3 == 0 and b % 5 == 0:\n        n = a + b\n    else:\n        n = -1\n    return n", "map_ix": [1, 1, 0, 1, 0, 0, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"\n    Given a positive integer n and a list of integers, determine if n is the sum of any two integers in the list.\n    \"\"\"\n    return any((n == x + y) for x in lst for y in lst)\ndef g(lst):\n    return sum(lst)\nassert f(g())\n", "emb": null, "idx_generation": 369, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"\n    Given a positive integer n and a list of integers, determine if n is the sum of any two integers in the list.\n    \"\"\"\n    return any((n == x + y) for x in lst for y in lst)", "solution_func": "def g(lst):\n    return sum(lst)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"\n    Given a positive integer n and a list of integers, determine if n is equal to the sum of the first k integers in the list,\n    for some positive integer k.\n    \"\"\"\n    s = 0\n    for i in range(len(lst)):\n        s += lst[i]\n        if s == n:\n            return True\n    return False\ndef g(lst):\n    return lst\nassert f(g())\n", "emb": null, "idx_generation": 369, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"\n    Given a positive integer n and a list of integers, determine if n is equal to the sum of the first k integers in the list,\n    for some positive integer k.\n    \"\"\"\n    s = 0\n    for i in range(len(lst)):\n        s += lst[i]\n        if s == n:\n            return True\n    return False", "solution_func": "def g(lst):\n    return lst", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(words: List[str], target: str = \"python\") -> bool:\n    \"\"\"Check if a target word can be formed by concatenating words from a list.\"\"\"\n    def helper(s: str, word_set: Set[str]) -> bool:\n        if not s:\n            return True\n        for i in range(1, len(s) + 1):\n            if s[:i] in word_set and helper(s[i:], word_set):\n                return True\n        return False\n\n    word_set = set(words)\n    return helper(target, word_set)\n\ndef g(words: List[str]):\n    return words\n\nassert f(g())\n", "emb": null, "idx_generation": 369, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], target: str = \"python\") -> bool:\n    \"\"\"Check if a target word can be formed by concatenating words from a list.\"\"\"\n    def helper(s: str, word_set: Set[str]) -> bool:\n        if not s:\n            return True\n        for i in range(1, len(s) + 1):\n            if s[:i] in word_set and helper(s[i:], word_set):\n                return True\n        return False\n\n    word_set = set(words)\n    return helper(target, word_set)", "solution_func": "def g(words: List[str]):\n    return words", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target: int = 10) -> bool:\n    \"\"\"Check if there are two numbers in the array that sum up to the target.\"\"\"\n    num_set = set(arr)\n    for num in arr:\n        if target - num in num_set:\n            return True\n    return False\n\ndef g(arr: List[int]):\n    return arr\n\nassert f(g())\n", "emb": null, "idx_generation": 369, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int = 10) -> bool:\n    \"\"\"Check if there are two numbers in the array that sum up to the target.\"\"\"\n    num_set = set(arr)\n    for num in arr:\n        if target - num in num_set:\n            return True\n    return False", "solution_func": "def g(arr: List[int]):\n    return arr", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int = 0) -> bool:\n    \"\"\"Check if there is a target value in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix: List[List[int]]):\n    return matrix\n\nassert f(g())\n", "emb": null, "idx_generation": 369, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int = 0) -> bool:\n    \"\"\"Check if there is a target value in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(matrix: List[List[int]]):\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(a: int, b: int, c: int, d: int) -> bool:\n    \"\"\"Check if a^b + c^d is a perfect square.\"\"\"\n    return math.isqrt(a**b + c**d)**2 == a**b + c**d\n\ndef g(a: int, b: int, c: int, d: int):\n    return a, b, c, d\n\nassert f(g(2, 3, 4, 2))\n", "emb": null, "idx_generation": 369, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(a: int, b: int, c: int, d: int) -> bool:\n    \"\"\"Check if a^b + c^d is a perfect square.\"\"\"\n    return math.isqrt(a**b + c**d)**2 == a**b + c**d", "solution_func": "def g(a: int, b: int, c: int, d: int):\n    return a, b, c, d", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=11, b=13, c=15) -> bool:\n    \"\"\"Check if n is divisible by any of the numbers a, b, or c\"\"\"\n    return n % a == 0 or n % b == 0 or n % c == 0\ndef g(a=11, b=13, c=15):\n    n = a * b * c\n    return n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 370, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=11, b=13, c=15) -> bool:\n    \"\"\"Check if n is divisible by any of the numbers a, b, or c\"\"\"\n    return n % a == 0 or n % b == 0 or n % c == 0", "solution_func": "def g(a=11, b=13, c=15):\n    n = a * b * c\n    return n", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, a='racecar', b='madam', c='level') -> bool:\n    \"\"\"Check if s is a palindrome and is present in any of the strings a, b, or c\"\"\"\n    return s == s[::-1] and (s in a or s in b or s in c)\ndef g(a='racecar', b='madam', c='level'):\n    if a == a[::-1]:\n        return a\n    elif b == b[::-1]:\n        return b\n    else:\n        return c\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 370, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, a='racecar', b='madam', c='level') -> bool:\n    \"\"\"Check if s is a palindrome and is present in any of the strings a, b, or c\"\"\"\n    return s == s[::-1] and (s in a or s in b or s in c)", "solution_func": "def g(a='racecar', b='madam', c='level'):\n    if a == a[::-1]:\n        return a\n    elif b == b[::-1]:\n        return b\n    else:\n        return c", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, x=2, y=3, z=5) -> bool:\n    \"\"\"Check if n is evenly divisible by x, y, and z\"\"\"\n    return n % x == 0 and n % y == 0 and n % z == 0\ndef g(x=2, y=3, z=5):\n    n = x * y * z\n    return n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 370, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, x=2, y=3, z=5) -> bool:\n    \"\"\"Check if n is evenly divisible by x, y, and z\"\"\"\n    return n % x == 0 and n % y == 0 and n % z == 0", "solution_func": "def g(x=2, y=3, z=5):\n    n = x * y * z\n    return n", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(pair: Tuple[int, int], li=[(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)], target=4) -> bool:\n    \"\"\"Find a pair of integers that satisfies a given condition\"\"\"\n    return sum(pair) > target\ndef g(li=[(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)], target=4):\n    for pair in li:\n        if sum(pair) > target:\n            return pair\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 370, "target_skills": null, "problem_func": "from typing import*\ndef f(pair: Tuple[int, int], li=[(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)], target=4) -> bool:\n    \"\"\"Find a pair of integers that satisfies a given condition\"\"\"\n    return sum(pair) > target", "solution_func": "def g(li=[(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)], target=4):\n    for pair in li:\n        if sum(pair) > target:\n            return pair", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=3) -> bool:\n    \"\"\"Check if a list contains a target number\"\"\"\n    return target in nums\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 370, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=3) -> bool:\n    \"\"\"Check if a list contains a target number\"\"\"\n    return target in nums", "solution_func": "def g(nums=[1, 2, 3, 4, 5]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, target='abc') -> bool:\n    \"\"\"Check if a string starts with a target sequence\"\"\"\n    return string.startswith(target)\ndef g(string='abcdefg'):\n    return string\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 370, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, target='abc') -> bool:\n    \"\"\"Check if a string starts with a target sequence\"\"\"\n    return string.startswith(target)", "solution_func": "def g(string='abcdefg'):\n    return string", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(li: List[int], target: int, num_attempts=10) -> bool:\n    \"\"\"Check if a target number is present in the list within a certain number of attempts\"\"\"\n    for _ in range(num_attempts):\n        if target in li:\n            return True\n    return False\n\ndef g(target: int, num_elements=20):\n    \"\"\"Generate a list of random integers\"\"\"\n    return [random.randint(0, 100) for _ in range(num_elements)]\n\nassert f(g())\n", "emb": null, "idx_generation": 370, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(li: List[int], target: int, num_attempts=10) -> bool:\n    \"\"\"Check if a target number is present in the list within a certain number of attempts\"\"\"\n    for _ in range(num_attempts):\n        if target in li:\n            return True\n    return False", "solution_func": "def g(target: int, num_elements=20):\n    \"\"\"Generate a list of random integers\"\"\"\n    return [random.randint(0, 100) for _ in range(num_elements)]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=10) -> bool:\n    \"\"\"Check if a string has a certain number of uppercase letters\"\"\"\n    count = 0\n    for char in s:\n        if char.isupper():\n            count += 1\n    return count == n\n\ndef g(n=10):\n    \"\"\"Generate a string with a certain number of uppercase letters\"\"\"\n    return 'A' * n\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 370, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=10) -> bool:\n    \"\"\"Check if a string has a certain number of uppercase letters\"\"\"\n    count = 0\n    for char in s:\n        if char.isupper():\n            count += 1\n    return count == n", "solution_func": "def g(n=10):\n    \"\"\"Generate a string with a certain number of uppercase letters\"\"\"\n    return 'A' * n", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(li: List[int], target: int, num_attempts=5) -> bool:\n    \"\"\"Check if a target number is present in the list within a certain number of attempts\"\"\"\n    for _ in range(num_attempts):\n        if target in li:\n            return True\n    return False\n\ndef g(target: int, num_elements=10):\n    \"\"\"Generate a list of consecutive integers\"\"\"\n    return list(range(num_elements))\n\nassert f(g())\n", "emb": null, "idx_generation": 370, "target_skills": null, "problem_func": "from typing import*\ndef f(li: List[int], target: int, num_attempts=5) -> bool:\n    \"\"\"Check if a target number is present in the list within a certain number of attempts\"\"\"\n    for _ in range(num_attempts):\n        if target in li:\n            return True\n    return False", "solution_func": "def g(target: int, num_elements=10):\n    \"\"\"Generate a list of consecutive integers\"\"\"\n    return list(range(num_elements))", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, s = 'abcdefghijklmnopqrstuvwxyz', t = 'zyxwvutsrqponmlkjihgfedcba') -> bool:\n    \"\"\"\n    Given a string s and a string t, determine if t is an anagram of s. An anagram is a word that can be formed by\n    rearranging the letters of another word.\n\n    Sample input:\n    'listen', 'silent'\n\n    Sample output:\n    True\n\n    The string 'silent' is an anagram of 'listen' because it contains the same letters, just rearranged.\n    \"\"\"\n    return sorted(s.lower()) == sorted(t.lower())\ndef g(s = 'abcdefghijklmnopqrstuvwxyz', t = 'zyxwvutsrqponmlkjihgfedcba'):\n    return (s, t[::-1])\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 370, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, s = 'abcdefghijklmnopqrstuvwxyz', t = 'zyxwvutsrqponmlkjihgfedcba') -> bool:\n    \"\"\"\n    Given a string s and a string t, determine if t is an anagram of s. An anagram is a word that can be formed by\n    rearranging the letters of another word.\n\n    Sample input:\n    'listen', 'silent'\n\n    Sample output:\n    True\n\n    The string 'silent' is an anagram of 'listen' because it contains the same letters, just rearranged.\n    \"\"\"\n    return sorted(s.lower()) == sorted(t.lower())", "solution_func": "def g(s = 'abcdefghijklmnopqrstuvwxyz', t = 'zyxwvutsrqponmlkjihgfedcba'):\n    return (s, t[::-1])", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(s: str, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the sum of the numbers in the list is equal to s\"\"\"\n    return sum(nums) == s\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return sum(nums) + random.randint(1, 10)\nassert f(g())\n", "emb": null, "idx_generation": 371, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(s: str, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the sum of the numbers in the list is equal to s\"\"\"\n    return sum(nums) == s", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return sum(nums) + random.randint(1, 10)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if the sum of the squares of the numbers from 1 to n is equal to s\"\"\"\n    return sum([i**2 for i in range(1, n+1)]) == s\ndef g(n=5):\n    return sum([i**2 for i in range(1, n+1)]) + 10\nassert f(g())\n", "emb": null, "idx_generation": 371, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if the sum of the squares of the numbers from 1 to n is equal to s\"\"\"\n    return sum([i**2 for i in range(1, n+1)]) == s", "solution_func": "def g(n=5):\n    return sum([i**2 for i in range(1, n+1)]) + 10", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, nums=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) -> bool:\n    \"\"\"Check if all the numbers in the list are factors of s\"\"\"\n    return all(s % num == 0 for num in nums)\ndef g(nums=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]):\n    return sum(nums) + 1\nassert f(g())\n", "emb": null, "idx_generation": 371, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, nums=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) -> bool:\n    \"\"\"Check if all the numbers in the list are factors of s\"\"\"\n    return all(s % num == 0 for num in nums)", "solution_func": "def g(nums=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]):\n    return sum(nums) + 1", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(lst: List[int], n=10) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a pair of numbers in the list that sum up to n.\n    \"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == n:\n                return True\n    return False\ndef g(lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n = 10):\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == n:\n                return True\n    return False\nassert f(g())\n", "emb": null, "idx_generation": 371, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int], n=10) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a pair of numbers in the list that sum up to n.\n    \"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == n:\n                return True\n    return False", "solution_func": "def g(lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n = 10):\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == n:\n                return True\n    return False", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(sentence: str, words=['quick', 'brown', 'fox', 'jumps', 'over', 'lazy', 'dog']) -> bool:\n    \"\"\"\n    Given a sentence and a list of words, check if all the words in the list are present in the sentence.\n    \"\"\"\n    sentence_words = sentence.split()\n    for word in words:\n        if word not in sentence_words:\n            return False\n    return True\ndef g(sentence = 'The quick brown fox jumps over the lazy dog', words=['quick', 'brown', 'fox', 'jumps', 'over', 'lazy', 'dog']):\n    sentence_words = sentence.split()\n    for word in words:\n        if word not in sentence_words:\n            return False\n    return True\nassert f(g())\n", "emb": null, "idx_generation": 371, "target_skills": null, "problem_func": "from typing import*\ndef f(sentence: str, words=['quick', 'brown', 'fox', 'jumps', 'over', 'lazy', 'dog']) -> bool:\n    \"\"\"\n    Given a sentence and a list of words, check if all the words in the list are present in the sentence.\n    \"\"\"\n    sentence_words = sentence.split()\n    for word in words:\n        if word not in sentence_words:\n            return False\n    return True", "solution_func": "def g(sentence = 'The quick brown fox jumps over the lazy dog', words=['quick', 'brown', 'fox', 'jumps', 'over', 'lazy', 'dog']):\n    sentence_words = sentence.split()\n    for word in words:\n        if word not in sentence_words:\n            return False\n    return True", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target number, check if the target number is present in the matrix.\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target = 10):\n    for row in matrix:\n        if target in row:\n            return True\n    return False\nassert f(g())\n", "emb": null, "idx_generation": 371, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target number, check if the target number is present in the matrix.\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target = 10):\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target1=10, target2=20) -> bool:\n    \"\"\"Find a pair of numbers in the array that sum up to target1 and another pair that sum up to target2\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target1:\n                for k in range(len(arr)):\n                    for l in range(k + 1, len(arr)):\n                        if arr[k] + arr[l] == target2:\n                            return True\n    return False\n\ndef g(target1=10, target2=20):\n    \"\"\"\n    This solution generates all possible pairs of numbers in the array\n    and checks if their sum matches the target values.\n    \"\"\"\n    arr = []\n    for i in range(1, 10):\n        arr.append(i)\n    return arr\n\nassert f(g())\n", "emb": null, "idx_generation": 371, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target1=10, target2=20) -> bool:\n    \"\"\"Find a pair of numbers in the array that sum up to target1 and another pair that sum up to target2\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target1:\n                for k in range(len(arr)):\n                    for l in range(k + 1, len(arr)):\n                        if arr[k] + arr[l] == target2:\n                            return True\n    return False", "solution_func": "def g(target1=10, target2=20):\n    \"\"\"\n    This solution generates all possible pairs of numbers in the array\n    and checks if their sum matches the target values.\n    \"\"\"\n    arr = []\n    for i in range(1, 10):\n        arr.append(i)\n    return arr", "map_ix": null}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find the indices of two elements in the matrix that sum up to the target value\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            for k in range(i, len(matrix)):\n                for l in range(len(matrix[k])):\n                    if i != k or j != l:\n                        if matrix[i][j] + matrix[k][l] == target:\n                            return True\n    return False\n\ndef g(target=10):\n    \"\"\"\n    This solution generates a 2D matrix with random values.\n    \"\"\"\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 371, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find the indices of two elements in the matrix that sum up to the target value\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            for k in range(i, len(matrix)):\n                for l in range(len(matrix[k])):\n                    if i != k or j != l:\n                        if matrix[i][j] + matrix[k][l] == target:\n                            return True\n    return False", "solution_func": "def g(target=10):\n    \"\"\"\n    This solution generates a 2D matrix with random values.\n    \"\"\"\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\ndef f(strings: List[str], target='abc') -> bool:\n    \"\"\"Check if any of the strings in the list contains the target substring\"\"\"\n    for s in strings:\n        if target in s:\n            return True\n    return False\n\ndef g(target='abc'):\n    \"\"\"\n    This solution generates a list of random strings.\n    \"\"\"\n    strings = ['def', 'ghi', 'abc', 'jkl', 'mno']\n    return strings\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 371, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(strings: List[str], target='abc') -> bool:\n    \"\"\"Check if any of the strings in the list contains the target substring\"\"\"\n    for s in strings:\n        if target in s:\n            return True\n    return False", "solution_func": "def g(target='abc'):\n    \"\"\"\n    This solution generates a list of random strings.\n    \"\"\"\n    strings = ['def', 'ghi', 'abc', 'jkl', 'mno']\n    return strings", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, m: int=3, n: int=2) -> bool:\n    \"\"\"Check if there exists a subarray of size m with sum equal to n in the given list s\"\"\"\n    assert isinstance(s, list) and all(isinstance(x, int) for x in s) and len(s) >= m\n    return any(sum(s[i:i+m])==n for i in range(len(s)-m+1))\ndef g(m: int=3, n: int=2):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n", "emb": null, "idx_generation": 371, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, m: int=3, n: int=2) -> bool:\n    \"\"\"Check if there exists a subarray of size m with sum equal to n in the given list s\"\"\"\n    assert isinstance(s, list) and all(isinstance(x, int) for x in s) and len(s) >= m\n    return any(sum(s[i:i+m])==n for i in range(len(s)-m+1))", "solution_func": "def g(m: int=3, n: int=2):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(n: int, target=10) -> bool:\n    \"\"\"Check if a given number is divisible by the target number.\"\"\"\n    return n % target == 0\n\ndef g(target=10):\n    return math.factorial(target)\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 372, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, target=10) -> bool:\n    \"\"\"Check if a given number is divisible by the target number.\"\"\"\n    return n % target == 0", "solution_func": "def g(target=10):\n    return math.factorial(target)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(lst: List[int], target=5) -> bool:\n    \"\"\"Check if a given list contains the target number.\"\"\"\n    return target in lst\n\ndef g(target=5):\n    lst = [random.randint(1, 10) for _ in range(10)]\n    return lst\n\nassert f(g())\n", "emb": null, "idx_generation": 372, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(lst: List[int], target=5) -> bool:\n    \"\"\"Check if a given list contains the target number.\"\"\"\n    return target in lst", "solution_func": "def g(target=5):\n    lst = [random.randint(1, 10) for _ in range(10)]\n    return lst", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport re\n\ndef f(s: str, pattern=r'\\b\\w{4}\\b', target='word') -> bool:\n    \"\"\"Check if a given string contains a word that matches a given pattern.\"\"\"\n    return re.search(pattern, s) and re.search(pattern, s).group() == target\n\ndef g(pattern=r'\\b\\w{4}\\b', target='word'):\n    s = 'This is a sample sentence containing the word \"word\".'\n    return s\n\nassert f(g())\n", "emb": null, "idx_generation": 372, "target_skills": null, "problem_func": "from typing import*\nimport re\n\ndef f(s: str, pattern=r'\\b\\w{4}\\b', target='word') -> bool:\n    \"\"\"Check if a given string contains a word that matches a given pattern.\"\"\"\n    return re.search(pattern, s) and re.search(pattern, s).group() == target", "solution_func": "def g(pattern=r'\\b\\w{4}\\b', target='word'):\n    s = 'This is a sample sentence containing the word \"word\".'\n    return s", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(nums: List[float], threshold=10) -> bool:\n    \"\"\"\n    Check if the sum of the square roots of a list of numbers is less than a threshold.\n    \"\"\"\n    return sum([math.sqrt(num) for num in nums]) < threshold\n\ndef g(threshold=10):\n    return [i**2 for i in range(1, threshold+1)]\n\nassert f(g())\n", "emb": null, "idx_generation": 372, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(nums: List[float], threshold=10) -> bool:\n    \"\"\"\n    Check if the sum of the square roots of a list of numbers is less than a threshold.\n    \"\"\"\n    return sum([math.sqrt(num) for num in nums]) < threshold", "solution_func": "def g(threshold=10):\n    return [i**2 for i in range(1, threshold+1)]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Check if it is possible to find a pair of numbers in a list whose sum is equal to a target value.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [i for i in range(target-1)]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 372, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Check if it is possible to find a pair of numbers in a list whose sum is equal to a target value.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target=10):\n    return [i for i in range(target-1)]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], n=5) -> bool:\n    \"\"\"\n    Check if a given list contains at least n distinct numbers.\n    \"\"\"\n    return len(set(nums)) >= n\n\ndef g(n=5):\n    return random.sample(range(1, 10), 10)\n\nassert f(g())\n", "emb": null, "idx_generation": 372, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(nums: List[int], n=5) -> bool:\n    \"\"\"\n    Check if a given list contains at least n distinct numbers.\n    \"\"\"\n    return len(set(nums)) >= n", "solution_func": "def g(n=5):\n    return random.sample(range(1, 10), 10)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], a=-10, b=10, count=5) -> bool:\n    \"\"\"Find a list of count or more different numbers each between a and b that are divisible by 3\"\"\"\n    return len([n for n in nums if n % 3 == 0]) >= count\ndef g(a = -10, b = 10, count = 5):\n    return [n for n in range(a, b + 1) if n % 3 == 0]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 372, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], a=-10, b=10, count=5) -> bool:\n    \"\"\"Find a list of count or more different numbers each between a and b that are divisible by 3\"\"\"\n    return len([n for n in nums if n % 3 == 0]) >= count", "solution_func": "def g(a = -10, b = 10, count = 5):\n    return [n for n in range(a, b + 1) if n % 3 == 0]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, sub='abc', count=3) -> bool:\n    \"\"\"Find a string that has count or more occurrences of sub\"\"\"\n    return s.count(sub) >= count\ndef g(sub='abc', count=3):\n    ans = sub * count\n    return ans\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 372, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, sub='abc', count=3) -> bool:\n    \"\"\"Find a string that has count or more occurrences of sub\"\"\"\n    return s.count(sub) >= count", "solution_func": "def g(sub='abc', count=3):\n    ans = sub * count\n    return ans", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find a matrix where the sum of each row and each column is equal to target\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    return all(row_sum == target for row_sum in row_sums) and all(col_sum == target for col_sum in col_sums)\ndef g(target=10):\n    matrix = [[target - i if i == j else 0 for j in range(target)] for i in range(target)]\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 372, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find a matrix where the sum of each row and each column is equal to target\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    return all(row_sum == target for row_sum in row_sums) and all(col_sum == target for col_sum in col_sums)", "solution_func": "def g(target=10):\n    matrix = [[target - i if i == j else 0 for j in range(target)] for i in range(target)]\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=50.0, b=2.0) -> bool:\n    \"\"\"Check if the square root of a number is equal to a multiplied by b\"\"\"\n    return math.sqrt(x) == a * b\n\ndef g(a=50.0, b=2.0):\n    x = (a * b) ** 2\n    return x\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 372, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, a=50.0, b=2.0) -> bool:\n    \"\"\"Check if the square root of a number is equal to a multiplied by b\"\"\"\n    return math.sqrt(x) == a * b", "solution_func": "def g(a=50.0, b=2.0):\n    x = (a * b) ** 2\n    return x", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=2) -> bool:\n    \"\"\"Find the square root of a number and check if it is close to the given value\"\"\"\n    return abs(math.sqrt(x) - a) < 10 ** (-3)\ndef g(a = 2):\n    return a ** 2\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 373, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, a=2) -> bool:\n    \"\"\"Find the square root of a number and check if it is close to the given value\"\"\"\n    return abs(math.sqrt(x) - a) < 10 ** (-3)", "solution_func": "def g(a = 2):\n    return a ** 2", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, m=100) -> bool:\n    \"\"\"Check if the given number is a power of another number within a certain range\"\"\"\n    return any(n == i ** j for i in range(2, m) for j in range(2, m))\ndef g(m = 100):\n    return m ** 2\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 373, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m=100) -> bool:\n    \"\"\"Check if the given number is a power of another number within a certain range\"\"\"\n    return any(n == i ** j for i in range(2, m) for j in range(2, m))", "solution_func": "def g(m = 100):\n    return m ** 2", "map_ix": [1, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, substring='abc') -> bool:\n    \"\"\"Check if the given substring is present in the given string\"\"\"\n    return substring in string\ndef g(substring = 'abc'):\n    return \"def\" + substring + \"ghi\"\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 373, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, substring='abc') -> bool:\n    \"\"\"Check if the given substring is present in the given string\"\"\"\n    return substring in string", "solution_func": "def g(substring = 'abc'):\n    return \"def\" + substring + \"ghi\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: int, y: int, z: int, a: int, b: int, c: int) -> bool:\n    \"\"\"Check if the arithmetic mean of three numbers is equal to the geometric mean of the other three numbers.\"\"\"\n    return (x + y + z) / 3 == (a * b * c) ** (1/3)\ndef g(a: int, b: int, c: int, d: int, e: int, f: int):\n    return (d + e + f, a * b * c)\nassert f(*g())\n", "emb": null, "idx_generation": 373, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, y: int, z: int, a: int, b: int, c: int) -> bool:\n    \"\"\"Check if the arithmetic mean of three numbers is equal to the geometric mean of the other three numbers.\"\"\"\n    return (x + y + z) / 3 == (a * b * c) ** (1/3)", "solution_func": "def g(a: int, b: int, c: int, d: int, e: int, f: int):\n    return (d + e + f, a * b * c)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(n: int, x: float, y: float, z: float) -> bool:\n    \"\"\"Check if the sum of the squares of two numbers is equal to the square of the third number.\"\"\"\n    return math.isclose(x ** 2 + y ** 2, z ** 2, rel_tol=1e-9, abs_tol=1e-9) or math.isclose(x ** 2 + z ** 2, y ** 2, rel_tol=1e-9, abs_tol=1e-9) or math.isclose(y ** 2 + z ** 2, x ** 2, rel_tol=1e-9, abs_tol=1e-9)\ndef g(x: float, y: float, z: float):\n    return (3, x, y, z)\nassert f(*g())\n", "emb": null, "idx_generation": 373, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, x: float, y: float, z: float) -> bool:\n    \"\"\"Check if the sum of the squares of two numbers is equal to the square of the third number.\"\"\"\n    return math.isclose(x ** 2 + y ** 2, z ** 2, rel_tol=1e-9, abs_tol=1e-9) or math.isclose(x ** 2 + z ** 2, y ** 2, rel_tol=1e-9, abs_tol=1e-9) or math.isclose(y ** 2 + z ** 2, x ** 2, rel_tol=1e-9, abs_tol=1e-9)", "solution_func": "def g(x: float, y: float, z: float):\n    return (3, x, y, z)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n: int, c: str) -> bool:\n    \"\"\"Check if the count of a character in a string is equal to a given number.\"\"\"\n    return s.count(c) == n\ndef g(s: str, n: int, c: str):\n    return (s, n, c)\nassert f(*g())\n", "emb": null, "idx_generation": 373, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n: int, c: str) -> bool:\n    \"\"\"Check if the count of a character in a string is equal to a given number.\"\"\"\n    return s.count(c) == n", "solution_func": "def g(s: str, n: int, c: str):\n    return (s, n, c)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 373, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5]):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], row_sum=[8, 10, 12], col_sum=[5, 7, 9]) -> bool:\n    \"\"\"Check if the given matrix has the specified row and column sums\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n\n    for i in range(n):\n        if sum(matrix[i]) != row_sum[i]:\n            return False\n    \n    for j in range(m):\n        if sum(matrix[i][j] for i in range(n)) != col_sum[j]:\n            return False\n            \n    return True\n\ndef g(row_sum=[8, 10, 12], col_sum=[5, 7, 9]):\n    matrix = []\n    for i in range(len(row_sum)):\n        row = [1] * col_sum[i]\n        row += [0] * (sum(col_sum) - col_sum[i])\n        matrix.append(row)\n    return matrix\n\nassert f(g())\n", "emb": null, "idx_generation": 373, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], row_sum=[8, 10, 12], col_sum=[5, 7, 9]) -> bool:\n    \"\"\"Check if the given matrix has the specified row and column sums\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n\n    for i in range(n):\n        if sum(matrix[i]) != row_sum[i]:\n            return False\n    \n    for j in range(m):\n        if sum(matrix[i][j] for i in range(n)) != col_sum[j]:\n            return False\n            \n    return True", "solution_func": "def g(row_sum=[8, 10, 12], col_sum=[5, 7, 9]):\n    matrix = []\n    for i in range(len(row_sum)):\n        row = [1] * col_sum[i]\n        row += [0] * (sum(col_sum) - col_sum[i])\n        matrix.append(row)\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are three numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 373, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are three numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5]):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(num: int, n=10) -> bool:\n    \"\"\"\n    Given a number, check if it is divisible by n.\n\n    Sample Input:\n    num = 20\n    n = 10\n\n    Sample Output:\n    True\n    \"\"\"\n    return num % n == 0\ndef g(n = 10):\n    return n * n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 373, "target_skills": null, "problem_func": "from typing import*\ndef f(num: int, n=10) -> bool:\n    \"\"\"\n    Given a number, check if it is divisible by n.\n\n    Sample Input:\n    num = 20\n    n = 10\n\n    Sample Output:\n    True\n    \"\"\"\n    return num % n == 0", "solution_func": "def g(n = 10):\n    return n * n", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, threshold=0.5) -> bool:\n    \"\"\"\n    Check if all elements in the given numpy array are greater than the threshold.\n    \"\"\"\n    return np.all(arr > threshold)\n\ndef g(arr: np.ndarray, threshold=0.5):\n    \"\"\"\n    Generate a random numpy array with values between 0 and 1.\n    \"\"\"\n    return np.random.random(arr.shape)\nassert f(g())\n", "emb": null, "idx_generation": 374, "target_skills": null, "problem_func": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, threshold=0.5) -> bool:\n    \"\"\"\n    Check if all elements in the given numpy array are greater than the threshold.\n    \"\"\"\n    return np.all(arr > threshold)", "solution_func": "def g(arr: np.ndarray, threshold=0.5):\n    \"\"\"\n    Generate a random numpy array with values between 0 and 1.\n    \"\"\"\n    return np.random.random(arr.shape)", "map_ix": null}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"\n    Check if the given string contains at least n uppercase letters.\n    \"\"\"\n    return sum(1 for c in s if c.isupper()) >= n\n\ndef g(n=3):\n    \"\"\"\n    Generate a random string with a mix of lowercase and uppercase letters.\n    \"\"\"\n    import random\n    import string\n    return ''.join(random.choices(string.ascii_letters, k=10))\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 374, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"\n    Check if the given string contains at least n uppercase letters.\n    \"\"\"\n    return sum(1 for c in s if c.isupper()) >= n", "solution_func": "def g(n=3):\n    \"\"\"\n    Generate a random string with a mix of lowercase and uppercase letters.\n    \"\"\"\n    import random\n    import string\n    return ''.join(random.choices(string.ascii_letters, k=10))", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"\n    Check if the sum of any two numbers in the list is equal to the target.\n    \"\"\"\n    return any(arr[i] + arr[j] == target for i in range(len(arr)) for j in range(len(arr)) if i != j)\n\ndef g(target=0):\n    \"\"\"\n    Generate a list of random integers.\n    \"\"\"\n    import random\n    return random.sample(range(-100, 100), 10)\nassert f(g())\n", "emb": null, "idx_generation": 374, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"\n    Check if the sum of any two numbers in the list is equal to the target.\n    \"\"\"\n    return any(arr[i] + arr[j] == target for i in range(len(arr)) for j in range(len(arr)) if i != j)", "solution_func": "def g(target=0):\n    \"\"\"\n    Generate a list of random integers.\n    \"\"\"\n    import random\n    return random.sample(range(-100, 100), 10)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"\n    Given a list of integers, find any two numbers that add up to the target value.\n\n    Sample Input:\n    [2, 7, 11, 15], 9\n\n    Sample Output:\n    [2, 7]\n    \"\"\"\n    return any((arr[i] + arr[j] == target for i in range(len(arr)) for j in range(i + 1, len(arr))))\ndef g(target=0):\n    return [1, target - 1]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 374, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"\n    Given a list of integers, find any two numbers that add up to the target value.\n\n    Sample Input:\n    [2, 7, 11, 15], 9\n\n    Sample Output:\n    [2, 7]\n    \"\"\"\n    return any((arr[i] + arr[j] == target for i in range(len(arr)) for j in range(i + 1, len(arr))))", "solution_func": "def g(target=0):\n    return [1, target - 1]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target=0) -> bool:\n    \"\"\"\n    Given a string, determine if it is a palindrome when ignoring non-alphanumeric characters.\n\n    Sample Input:\n    \"A man, a plan, a canal: Panama\"\n\n    Sample Output:\n    True\n    \"\"\"\n    s = ''.join((c.lower() for c in s if c.isalnum()))\n    return s == s[::-1]\ndef g():\n    return \"A man, a plan, a canal: Panama\"\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 374, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target=0) -> bool:\n    \"\"\"\n    Given a string, determine if it is a palindrome when ignoring non-alphanumeric characters.\n\n    Sample Input:\n    \"A man, a plan, a canal: Panama\"\n\n    Sample Output:\n    True\n    \"\"\"\n    s = ''.join((c.lower() for c in s if c.isalnum()))\n    return s == s[::-1]", "solution_func": "def g():\n    return \"A man, a plan, a canal: Panama\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"\n    Given a list of integers, find all pairs of numbers that add up to the target value.\n\n    Sample Input:\n    [1, 2, 3, 4, 5], 6\n\n    Sample Output:\n    [[1, 5], [2, 4]]\n    \"\"\"\n    return [[arr[i], arr[j]] for i in range(len(arr)) for j in range(i + 1, len(arr)) if arr[i] + arr[j] == target]\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g())\n", "emb": null, "idx_generation": 374, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"\n    Given a list of integers, find all pairs of numbers that add up to the target value.\n\n    Sample Input:\n    [1, 2, 3, 4, 5], 6\n\n    Sample Output:\n    [[1, 5], [2, 4]]\n    \"\"\"\n    return [[arr[i], arr[j]] for i in range(len(arr)) for j in range(i + 1, len(arr)) if arr[i] + arr[j] == target]", "solution_func": "def g():\n    return [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Find if a given target value exists in a matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target = 5):\n    for row in matrix:\n        if target in row:\n            return matrix\n    return []\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 374, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Find if a given target value exists in a matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target = 5):\n    for row in matrix:\n        if target in row:\n            return matrix\n    return []", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, substring='abc') -> bool:\n    \"\"\"Check if a given substring exists in a string.\"\"\"\n    return substring in string\n\ndef g(string = 'abcdefg', substring = 'abc'):\n    return string\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 374, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, substring='abc') -> bool:\n    \"\"\"Check if a given substring exists in a string.\"\"\"\n    return substring in string", "solution_func": "def g(string = 'abcdefg', substring = 'abc'):\n    return string", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if two numbers in a list add up to a target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums = random.sample(range(10), 5), target = 0):\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 374, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if two numbers in a list add up to a target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums = random.sample(range(10), 5), target = 0):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=4, m=2) -> bool:\n    \"\"\"Check if there are n or more occurrences of a substring of length m in s\"\"\"\n    count = 0\n    for i in range(len(s) - m + 1):\n        substring = s[i:i + m]\n        if s.count(substring) >= n:\n            count += 1\n    return count >= n\ndef g(n = 4, m = 2):\n    s = \"abababab\"\n    return s\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 374, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=4, m=2) -> bool:\n    \"\"\"Check if there are n or more occurrences of a substring of length m in s\"\"\"\n    count = 0\n    for i in range(len(s) - m + 1):\n        substring = s[i:i + m]\n        if s.count(substring) >= n:\n            count += 1\n    return count >= n", "solution_func": "def g(n = 4, m = 2):\n    s = \"abababab\"\n    return s", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 375, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g())\n", "emb": null, "idx_generation": 375, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 375, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], n=5, target=100) -> bool:\n    \"\"\"Find n distinct positive integers that sum to target\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == target\ndef g(n=5, target=100):\n    return list(range(1, n+1)) + [target - sum(range(1, n+1))]\nassert f(g())\n", "emb": null, "idx_generation": 375, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], n=5, target=100) -> bool:\n    \"\"\"Find n distinct positive integers that sum to target\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == target", "solution_func": "def g(n=5, target=100):\n    return list(range(1, n+1)) + [target - sum(range(1, n+1))]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(i: int, li=[78, 91, -67, -5, 30, -42, 68, 32, 96, -55, -39, -46, 90], target=78) -> bool:\n    \"\"\"Find the index of an item in a list using positive indexing.\"\"\"\n    return li[i] == target and i >= 0\ndef g(li=[78, 91, -67, -5, 30, -42, 68, 32, 96, -55, -39, -46, 90], target=78):\n    return li.index(target)\nassert f(g())\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 375, "target_skills": null, "problem_func": "from typing import*\ndef f(i: int, li=[78, 91, -67, -5, 30, -42, 68, 32, 96, -55, -39, -46, 90], target=78) -> bool:\n    \"\"\"Find the index of an item in a list using positive indexing.\"\"\"\n    return li[i] == target and i >= 0", "solution_func": "def g(li=[78, 91, -67, -5, 30, -42, 68, 32, 96, -55, -39, -46, 90], target=78):\n    return li.index(target)", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=12345) -> bool:\n    \"\"\"Find three integers whose cubes sum to target\"\"\"\n    return len(nums) <= 3 and sum((i ** 3 for i in nums)) == target\ndef g(target=12345):\n    m = target\n    cubes = {i ** 3: i for i in range(int(m ** (1/3)) + 2) if i ** 3 <= m}\n    sums_of_cubes = {i + j: [a, b] for i, a in cubes.items() for j, b in cubes.items()}\n    for s in sums_of_cubes:\n        if m - s in sums_of_cubes:\n            return sums_of_cubes[m - s] + sums_of_cubes[s]\n    assert False, \"Should never reach here\"\nassert f(g())\n", "emb": null, "idx_generation": 375, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=12345) -> bool:\n    \"\"\"Find three integers whose cubes sum to target\"\"\"\n    return len(nums) <= 3 and sum((i ** 3 for i in nums)) == target", "solution_func": "def g(target=12345):\n    m = target\n    cubes = {i ** 3: i for i in range(int(m ** (1/3)) + 2) if i ** 3 <= m}\n    sums_of_cubes = {i + j: [a, b] for i, a in cubes.items() for j, b in cubes.items()}\n    for s in sums_of_cubes:\n        if m - s in sums_of_cubes:\n            return sums_of_cubes[m - s] + sums_of_cubes[s]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Find if the target value is present in the given matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix: List[List[int]], target: int):\n    return target\nassert f(g())\n", "emb": null, "idx_generation": 375, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Find if the target value is present in the given matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(matrix: List[List[int]], target: int):\n    return target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find if there exists two elements in the list that add up to the target value.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums: List[int], target: int):\n    return nums, target\nassert f(g())\n", "emb": null, "idx_generation": 375, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find if there exists two elements in the list that add up to the target value.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(nums: List[int], target: int):\n    return nums, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"Find if there exists a pair of integers in the list whose difference is k.\"\"\"\n    nums = set(nums)\n    for num in nums:\n        if num + k in nums:\n            return True\n    return False\n\ndef g(nums: List[int], k: int):\n    return nums, k\nassert f(g())\n", "emb": null, "idx_generation": 375, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"Find if there exists a pair of integers in the list whose difference is k.\"\"\"\n    nums = set(nums)\n    for num in nums:\n        if num + k in nums:\n            return True\n    return False", "solution_func": "def g(nums: List[int], k: int):\n    return nums, k", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(d: datetime, days=7) -> bool:\n    \"\"\"Check if the given date is a weekend day\"\"\"\n    weekday = d.weekday()\n    return weekday == 5 or weekday == 6\n\ndef g(days=7):\n    return datetime.now() + timedelta(days=days)\nassert f(g())\n", "emb": null, "idx_generation": 375, "target_skills": null, "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(d: datetime, days=7) -> bool:\n    \"\"\"Check if the given date is a weekend day\"\"\"\n    weekday = d.weekday()\n    return weekday == 5 or weekday == 6", "solution_func": "def g(days=7):\n    return datetime.now() + timedelta(days=days)", "map_ix": null}, {"fitness": 1.0, "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(num: float, tolerance=0.0001) -> bool:\n    \"\"\"Check if the given number is a perfect square\"\"\"\n    return abs(sqrt(num) - int(sqrt(num))) < tolerance\ndef g(num = 16, tolerance = 0.0001):\n    return num\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 376, "target_skills": null, "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(num: float, tolerance=0.0001) -> bool:\n    \"\"\"Check if the given number is a perfect square\"\"\"\n    return abs(sqrt(num) - int(sqrt(num))) < tolerance", "solution_func": "def g(num = 16, tolerance = 0.0001):\n    return num", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(num_list: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target sum\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] + num_list[j] == target_sum:\n                return True\n    return False\ndef g(num_list = [10, 20, 30, 40, 50], target_sum = 100):\n    return num_list\nassert f(g())\n", "emb": null, "idx_generation": 376, "target_skills": null, "problem_func": "from typing import*\ndef f(num_list: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target sum\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] + num_list[j] == target_sum:\n                return True\n    return False", "solution_func": "def g(num_list = [10, 20, 30, 40, 50], target_sum = 100):\n    return num_list", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the sum of any row or column in the matrix is equal to the target value\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    row_sums = [sum(matrix[i]) for i in range(rows)]\n    col_sums = [sum(matrix[i][j] for i in range(rows)) for j in range(cols)]\n    \n    return target in row_sums or target in col_sums\ndef g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target = 0):\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 376, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the sum of any row or column in the matrix is equal to the target value\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    row_sums = [sum(matrix[i]) for i in range(rows)]\n    col_sums = [sum(matrix[i][j] for i in range(rows)) for j in range(cols)]\n    \n    return target in row_sums or target in col_sums", "solution_func": "def g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target = 0):\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, substring=\"abc\") -> bool:\n    \"\"\"Find if the given string contains a given substring.\"\"\"\n    return substring in s\ndef g(substring=\"abc\"):\n    s = \"abacabadabacaba\"\n    return s\nassert f(g())\n", "emb": null, "idx_generation": 376, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substring=\"abc\") -> bool:\n    \"\"\"Find if the given string contains a given substring.\"\"\"\n    return substring in s", "solution_func": "def g(substring=\"abc\"):\n    s = \"abacabadabacaba\"\n    return s", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"\n    Find if there exists a pair of numbers in the given array that adds up to the given target.\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target=10):\n    arr = [1, 2, 3, 4, 5]\n    return arr\nassert f(g())\n", "emb": null, "idx_generation": 376, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"\n    Find if there exists a pair of numbers in the given array that adds up to the given target.\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(target=10):\n    arr = [1, 2, 3, 4, 5]\n    return arr", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"\n    Find if the given target exists in the given matrix.\n    \"\"\"\n    row = len(matrix)\n    col = len(matrix[0])\n    left = 0\n    right = row * col - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        num = matrix[mid // col][mid % col]\n        if num == target:\n            return True\n        elif num < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return False\ndef g(target=5):\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    return matrix\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 376, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"\n    Find if the given target exists in the given matrix.\n    \"\"\"\n    row = len(matrix)\n    col = len(matrix[0])\n    left = 0\n    right = row * col - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        num = matrix[mid // col][mid % col]\n        if num == target:\n            return True\n        elif num < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return False", "solution_func": "def g(target=5):\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    return matrix", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substr='Python') -> bool:\n    \"\"\"Check if a substring is present in a string.\"\"\"\n    return substr in s\ndef g(substr='Python'):\n    return f\"The programming language is {substr}\"\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 376, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substr='Python') -> bool:\n    \"\"\"Check if a substring is present in a string.\"\"\"\n    return substr in s", "solution_func": "def g(substr='Python'):\n    return f\"The programming language is {substr}\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if any two numbers in a list sum up to a given target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 376, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if any two numbers in a list sum up to a given target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(lst: List[int], target=1000) -> bool:\n    \"\"\"Find the sum of all elements in a list that are less than a target value.\"\"\"\n    return sum(filter(lambda x: x < target, lst))\ndef g(target=1000):\n    return [500, 200, 300, 100, 150, 250, 400, 50]\nassert f(g())\n", "emb": null, "idx_generation": 376, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int], target=1000) -> bool:\n    \"\"\"Find the sum of all elements in a list that are less than a target value.\"\"\"\n    return sum(filter(lambda x: x < target, lst))", "solution_func": "def g(target=1000):\n    return [500, 200, 300, 100, 150, 250, 400, 50]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], n=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the array whose sum is equal to n\"\"\"\n    seen = set()\n    for num in arr:\n        complement = n - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(n=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 376, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], n=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the array whose sum is equal to n\"\"\"\n    seen = set()\n    for num in arr:\n        complement = n - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(n=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, seq: List[int]) -> bool:\n    \"\"\"Check if n is the maximum element in seq\"\"\"\n    return n == max(seq)\ndef g(seq: List[int] = [1, 2, 3, 4, 5]):\n    return max(seq)\nassert f(g(), seq=g())\n", "emb": null, "idx_generation": 377, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, seq: List[int]) -> bool:\n    \"\"\"Check if n is the maximum element in seq\"\"\"\n    return n == max(seq)", "solution_func": "def g(seq: List[int] = [1, 2, 3, 4, 5]):\n    return max(seq)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(year: int, month: int, day: int) -> bool:\n    \"\"\"Check if the provided date is a Monday\"\"\"\n    return datetime(year, month, day).weekday() == 0\ndef g(year: int = 2022, month: int = 1, day: int = 3):\n    return year, month, day\nassert f(*g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 377, "target_skills": null, "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(year: int, month: int, day: int) -> bool:\n    \"\"\"Check if the provided date is a Monday\"\"\"\n    return datetime(year, month, day).weekday() == 0", "solution_func": "def g(year: int = 2022, month: int = 1, day: int = 3):\n    return year, month, day", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the string is a palindrome\"\"\"\n    return s == s[::-1]\ndef g(s: str = \"madam\"):\n    return s\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 377, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the string is a palindrome\"\"\"\n    return s == s[::-1]", "solution_func": "def g(s: str = \"madam\"):\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find a target number in a matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(target=10):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 377, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find a target number in a matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(target=10):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(words: List[str], n=5) -> bool:\n    \"\"\"Check if there are exactly n words that have the same number of characters.\"\"\"\n    word_lengths = [len(word) for word in words]\n    return word_lengths.count(word_lengths[0]) == n\ndef g(n=5):\n    words = [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]\n    return words\nassert f(g())\n", "emb": null, "idx_generation": 377, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], n=5) -> bool:\n    \"\"\"Check if there are exactly n words that have the same number of characters.\"\"\"\n    word_lengths = [len(word) for word in words]\n    return word_lengths.count(word_lengths[0]) == n", "solution_func": "def g(n=5):\n    words = [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]\n    return words", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find two numbers that sum to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=20):\n    nums = [10, 5, 15, 7, 2]\n    return nums\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 377, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find two numbers that sum to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target=20):\n    nums = [10, 5, 15, 7, 2]\n    return nums", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target_sum.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target_sum:\n                    return True\n    return False\ndef g(target_sum=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 377, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target_sum.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target_sum:\n                    return True\n    return False", "solution_func": "def g(target_sum=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_value=8) -> bool:\n    \"\"\"Find the index of the target_value in the matrix.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == target_value:\n                return [i, j]\n    return None\ndef g(target_value=8):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 377, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_value=8) -> bool:\n    \"\"\"Find the index of the target_value in the matrix.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == target_value:\n                return [i, j]\n    return None", "solution_func": "def g(target_value=8):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, num_repetitions=3) -> bool:\n    \"\"\"Repeat the given string num_repetitions times.\"\"\"\n    repeated_string = string * num_repetitions\n    return repeated_string\ndef g(num_repetitions=3):\n    string = \"Hello, world! \"\n    return string\nassert f(g()) == \"Hello, world! Hello, world! Hello, world! \"\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 377, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, num_repetitions=3) -> bool:\n    \"\"\"Repeat the given string num_repetitions times.\"\"\"\n    repeated_string = string * num_repetitions\n    return repeated_string", "solution_func": "def g(num_repetitions=3):\n    string = \"Hello, world! \"\n    return string", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Check if a target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target = 5):\n    return matrix\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 377, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Check if a target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target = 5):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(x: float, d=3.5) -> bool:\n    \"\"\"Check if the square root of x is greater than d\"\"\"\n    return math.sqrt(x) > d\n\ndef g(d=3.5):\n    return d**2 + 1\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 378, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, d=3.5) -> bool:\n    \"\"\"Check if the square root of x is greater than d\"\"\"\n    return math.sqrt(x) > d", "solution_func": "def g(d=3.5):\n    return d**2 + 1", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(lst: List[int], target_sum: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target sum\"\"\"\n    return any((x + y == target_sum) for x in lst for y in lst if x != y)\n\ndef g(lst_length=10, min_value=1, max_value=10, target_sum=15):\n    random.seed(0)\n    return random.sample(range(min_value, max_value+1), lst_length)\n\nassert f(g())\n", "emb": null, "idx_generation": 378, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(lst: List[int], target_sum: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target sum\"\"\"\n    return any((x + y == target_sum) for x in lst for y in lst if x != y)", "solution_func": "def g(lst_length=10, min_value=1, max_value=10, target_sum=15):\n    random.seed(0)\n    return random.sample(range(min_value, max_value+1), lst_length)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport re\n\ndef f(s: str, pattern=r'\\d{3}-\\d{3}-\\d{4}') -> bool:\n    \"\"\"Check if the string matches a specific pattern\"\"\"\n    return bool(re.match(pattern, s))\n\ndef g(pattern=r'\\d{3}-\\d{3}-\\d{4}'):\n    return '123-456-7890'\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 378, "target_skills": null, "problem_func": "from typing import*\nimport re\n\ndef f(s: str, pattern=r'\\d{3}-\\d{3}-\\d{4}') -> bool:\n    \"\"\"Check if the string matches a specific pattern\"\"\"\n    return bool(re.match(pattern, s))", "solution_func": "def g(pattern=r'\\d{3}-\\d{3}-\\d{4}'):\n    return '123-456-7890'", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], n=3) -> bool:\n    \"\"\"Find the sum of all possible combinations of n numbers from the given list\"\"\"\n    from itertools import combinations\n    return sum(sum(comb) for comb in combinations(nums, n)) == 42\ndef g(nums = [1, 2, 3, 4, 5]):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 378, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], n=3) -> bool:\n    \"\"\"Find the sum of all possible combinations of n numbers from the given list\"\"\"\n    from itertools import combinations\n    return sum(sum(comb) for comb in combinations(nums, n)) == 42", "solution_func": "def g(nums = [1, 2, 3, 4, 5]):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find if there exists a submatrix whose sum is equal to the target value\"\"\"\n    m, n = len(matrix), len(matrix[0])\n    for i in range(m):\n        for j in range(n):\n            for k in range(i, m):\n                for l in range(j, n):\n                    if sum(matrix[a][b] for a in range(i, k+1) for b in range(j, l+1)) == target:\n                        return True\n    return False\ndef g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 378, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find if there exists a submatrix whose sum is equal to the target value\"\"\"\n    m, n = len(matrix), len(matrix[0])\n    for i in range(m):\n        for j in range(n):\n            for k in range(i, m):\n                for l in range(j, n):\n                    if sum(matrix[a][b] for a in range(i, k+1) for b in range(j, l+1)) == target:\n                        return True\n    return False", "solution_func": "def g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "import math\nfrom typing import*\ndef f(points: List[Tuple[int, int]], r=5) -> bool:\n    \"\"\"Find if there exists a circle with radius r that passes through all the given points\"\"\"\n    from math import sqrt\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            dist = sqrt((points[i][0] - points[j][0]) ** 2 + (points[i][1] - points[j][1]) ** 2)\n            if dist > 2 * r:\n                return False\n    return True\ndef g(points = [(0, 0), (0, 3), (4, 0), (4, 3)]):\n    return points\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 378, "target_skills": null, "problem_func": "import math\nfrom typing import*\ndef f(points: List[Tuple[int, int]], r=5) -> bool:\n    \"\"\"Find if there exists a circle with radius r that passes through all the given points\"\"\"\n    from math import sqrt\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            dist = sqrt((points[i][0] - points[j][0]) ** 2 + (points[i][1] - points[j][1]) ** 2)\n            if dist > 2 * r:\n                return False\n    return True", "solution_func": "def g(points = [(0, 0), (0, 3), (4, 0), (4, 3)]):\n    return points", "map_ix": [0, 0, 0, 0, 0, 0, 1, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target='puzzle', num=3) -> bool:\n    \"\"\"\n    Check if the given string contains the target string 'num' times.\n\n    Sample Input:\n    `\"puzzlepuzzlepuzzle\"`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    return s.count(target) == num\ndef g(target = 'puzzle', num = 3):\n    return target * num\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 378, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='puzzle', num=3) -> bool:\n    \"\"\"\n    Check if the given string contains the target string 'num' times.\n\n    Sample Input:\n    `\"puzzlepuzzlepuzzle\"`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    return s.count(target) == num", "solution_func": "def g(target = 'puzzle', num = 3):\n    return target * num", "map_ix": [0, 0, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer, find if there exist two numbers in the list such that their sum is equal to the target.\n\n    Sample Input:\n    `[2, 4, 6, 8]`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums = [2, 4, 6, 8], target = 0):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 378, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer, find if there exist two numbers in the list such that their sum is equal to the target.\n\n    Sample Input:\n    `[2, 4, 6, 8]`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums = [2, 4, 6, 8], target = 0):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s1: str, s2='puzzle') -> bool:\n    \"\"\"\n    Check if all characters in s1 are also present in s2.\n\n    Sample Input:\n    `\"puzzle\"`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    return set(s1).issubset(set(s2))\ndef g(s2 = 'puzzle'):\n    return s2\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 378, "target_skills": null, "problem_func": "from typing import*\ndef f(s1: str, s2='puzzle') -> bool:\n    \"\"\"\n    Check if all characters in s1 are also present in s2.\n\n    Sample Input:\n    `\"puzzle\"`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    return set(s1).issubset(set(s2))", "solution_func": "def g(s2 = 'puzzle'):\n    return s2", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(num: int, start=10) -> bool:\n    \"\"\"Check if the given number is a prime number\"\"\"\n    return all((num % i != 0 for i in range(2, int(num ** 0.5) + 1))) and num > 1\ndef g(start = 10):\n    num = start\n    while True:\n        num += 1\n        if all((num % i != 0 for i in range(2, int(num ** 0.5) + 1))):\n            return num\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 378, "target_skills": null, "problem_func": "from typing import*\ndef f(num: int, start=10) -> bool:\n    \"\"\"Check if the given number is a prime number\"\"\"\n    return all((num % i != 0 for i in range(2, int(num ** 0.5) + 1))) and num > 1", "solution_func": "def g(start = 10):\n    num = start\n    while True:\n        num += 1\n        if all((num % i != 0 for i in range(2, int(num ** 0.5) + 1))):\n            return num", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n: int, target='cde') -> bool:\n    \"\"\"\n    Check if a specific substring occurs exactly n times in a given string.\n    \"\"\"\n    return s.count(target) == n\ndef g(n=2, target='cde'):\n    return target * n + 'fgh'\nassert f(g())\n", "emb": null, "idx_generation": 379, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n: int, target='cde') -> bool:\n    \"\"\"\n    Check if a specific substring occurs exactly n times in a given string.\n    \"\"\"\n    return s.count(target) == n", "solution_func": "def g(n=2, target='cde'):\n    return target * n + 'fgh'", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s1: str, s2: str, s3: str) -> bool:\n    \"\"\"\n    Check if the concatenation of two given strings is equal to a third string.\n    \"\"\"\n    return s1 + s2 == s3\ndef g(s1='Hello', s2='World', s3='HelloWorld'):\n    return s3\nassert f(g())\n", "emb": null, "idx_generation": 379, "target_skills": null, "problem_func": "from typing import*\ndef f(s1: str, s2: str, s3: str) -> bool:\n    \"\"\"\n    Check if the concatenation of two given strings is equal to a third string.\n    \"\"\"\n    return s1 + s2 == s3", "solution_func": "def g(s1='Hello', s2='World', s3='HelloWorld'):\n    return s3", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"\n    Check if there is a pair of numbers in a given list that add up to a given number.\n    \"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == n:\n                return True\n    return False\ndef g(lst=[1, 2, 3, 4, 5], n=9):\n    return lst\nassert f(g())\n", "emb": null, "idx_generation": 379, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"\n    Check if there is a pair of numbers in a given list that add up to a given number.\n    \"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == n:\n                return True\n    return False", "solution_func": "def g(lst=[1, 2, 3, 4, 5], n=9):\n    return lst", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\n\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"\n    Given a list of integers, find any combination of three numbers that sum up to the target.\n\n    Sample Input:\n    `[10, 20, 30, 40, 50]`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g(target=100):\n    arr = [random.randint(1, 100) for _ in range(10)]\n    return arr\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 379, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"\n    Given a list of integers, find any combination of three numbers that sum up to the target.\n\n    Sample Input:\n    `[10, 20, 30, 40, 50]`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False", "solution_func": "def g(target=100):\n    arr = [random.randint(1, 100) for _ in range(10)]\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, t='python') -> bool:\n    \"\"\"\n    Given two strings, check if the first string is a subsequence of the second string.\n\n    Sample Input:\n    `(\"ton\", \"python\")`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    i = 0\n    for c in t:\n        if i < len(s) and c == s[i]:\n            i += 1\n    return i == len(s)\n\ndef g(s='python', t='python'):\n    return s\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 379, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, t='python') -> bool:\n    \"\"\"\n    Given two strings, check if the first string is a subsequence of the second string.\n\n    Sample Input:\n    `(\"ton\", \"python\")`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    i = 0\n    for c in t:\n        if i < len(s) and c == s[i]:\n            i += 1\n    return i == len(s)", "solution_func": "def g(s='python', t='python'):\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=5, y=12) -> bool:\n    \"\"\"\n    Given an integer n, check if it is a power of x and the square root of y.\n\n    Sample Input:\n    `144`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    return math.log(n, x).is_integer() and n == y ** 0.5\n\ndef g(x=5, y=12):\n    return x ** y\n\nassert f(g())\n", "emb": null, "idx_generation": 379, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, x=5, y=12) -> bool:\n    \"\"\"\n    Given an integer n, check if it is a power of x and the square root of y.\n\n    Sample Input:\n    `144`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    return math.log(n, x).is_integer() and n == y ** 0.5", "solution_func": "def g(x=5, y=12):\n    return x ** y", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find a pair of numbers in the list that add up to the target number.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums))))\ndef g(nums: List[int], target: int):\n    return nums\nassert f(g([1, 2, 3, 4, 5], 9))\n", "emb": null, "idx_generation": 379, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find a pair of numbers in the list that add up to the target number.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums))))", "solution_func": "def g(nums: List[int], target: int):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], n: int) -> bool:\n    \"\"\"Find a sublist of length n in the list which contains only even numbers.\"\"\"\n    return any((all(x % 2 == 0 for x in nums[i:i + n]) for i in range(len(nums) - n + 1)))\ndef g(nums: List[int], n: int):\n    return nums\nassert f(g([2, 4, 6, 8, 10], 3))\n", "emb": null, "idx_generation": 379, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], n: int) -> bool:\n    \"\"\"Find a sublist of length n in the list which contains only even numbers.\"\"\"\n    return any((all(x % 2 == 0 for x in nums[i:i + n]) for i in range(len(nums) - n + 1)))", "solution_func": "def g(nums: List[int], n: int):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the matrix is a diagonal matrix.\"\"\"\n    return all((matrix[i][j] == 0 for i in range(len(matrix)) for j in range(len(matrix[i])) if i != j))\ndef g(matrix: List[List[int]]):\n    return matrix\nassert f(g([[1, 0, 0], [0, 2, 0], [0, 0, 3]]))\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 379, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the matrix is a diagonal matrix.\"\"\"\n    return all((matrix[i][j] == 0 for i in range(len(matrix)) for j in range(len(matrix[i])) if i != j))", "solution_func": "def g(matrix: List[List[int]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists two numbers such that their sum is equal to target.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums: List[int], target: int = 0):\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\nassert f(g())\n", "emb": null, "idx_generation": 379, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists two numbers such that their sum is equal to target.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(nums: List[int], target: int = 0):\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], n=3) -> bool:\n    \"\"\"\n    Check if there exists a subarray of length n in the given array such that the sum of its elements is equal to 0.\n    \"\"\"\n    for i in range(len(arr) - n + 1):\n        if sum(arr[i:i+n]) == 0:\n            return True\n    return False\n\ndef g(n=3):\n    return [0] * n\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 380, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], n=3) -> bool:\n    \"\"\"\n    Check if there exists a subarray of length n in the given array such that the sum of its elements is equal to 0.\n    \"\"\"\n    for i in range(len(arr) - n + 1):\n        if sum(arr[i:i+n]) == 0:\n            return True\n    return False", "solution_func": "def g(n=3):\n    return [0] * n", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(s: str, k=2) -> bool:\n    \"\"\"\n    Check if the given string s is a palindrome and the sum of its characters' ASCII values is divisible by k.\n    \"\"\"\n    s = s.lower()\n    if s == s[::-1] and sum(ord(c) for c in s) % k == 0:\n        return True\n    return False\n\ndef g(k=2):\n    return \"Kayak\"\n\nassert f(g())\n", "emb": null, "idx_generation": 380, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(s: str, k=2) -> bool:\n    \"\"\"\n    Check if the given string s is a palindrome and the sum of its characters' ASCII values is divisible by k.\n    \"\"\"\n    s = s.lower()\n    if s == s[::-1] and sum(ord(c) for c in s) % k == 0:\n        return True\n    return False", "solution_func": "def g(k=2):\n    return \"Kayak\"", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=4) -> bool:\n    \"\"\"\n    Check if all the elements in the given matrix are divisible by n.\n    \"\"\"\n    for row in matrix:\n        for num in row:\n            if num % n != 0:\n                return False\n    return True\n\ndef g(n=4):\n    return [[4, 8, 12], [16, 20, 24], [28, 32, 36]]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 380, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n=4) -> bool:\n    \"\"\"\n    Check if all the elements in the given matrix are divisible by n.\n    \"\"\"\n    for row in matrix:\n        for num in row:\n            if num % n != 0:\n                return False\n    return True", "solution_func": "def g(n=4):\n    return [[4, 8, 12], [16, 20, 24], [28, 32, 36]]", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list that sum up to the target value.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums: List[int], target: int = 0):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 380, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list that sum up to the target value.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums: List[int], target: int = 0):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square, i.e., the sum of each row, column, and diagonal is the same.\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    # Check rows\n    for i in range(n):\n        if sum(matrix[i]) != target_sum:\n            return False\n    # Check columns\n    for j in range(n):\n        col_sum = sum(matrix[i][j] for i in range(n))\n        if col_sum != target_sum:\n            return False\n    # Check diagonals\n    diagonal_sum1 = sum(matrix[i][i] for i in range(n))\n    if diagonal_sum1 != target_sum:\n        return False\n    diagonal_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    if diagonal_sum2 != target_sum:\n        return False\n    return True\ndef g(matrix: List[List[int]]):\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 380, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square, i.e., the sum of each row, column, and diagonal is the same.\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    # Check rows\n    for i in range(n):\n        if sum(matrix[i]) != target_sum:\n            return False\n    # Check columns\n    for j in range(n):\n        col_sum = sum(matrix[i][j] for i in range(n))\n        if col_sum != target_sum:\n            return False\n    # Check diagonals\n    diagonal_sum1 = sum(matrix[i][i] for i in range(n))\n    if diagonal_sum1 != target_sum:\n        return False\n    diagonal_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    if diagonal_sum2 != target_sum:\n        return False\n    return True", "solution_func": "def g(matrix: List[List[int]]):\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], k: int = 0) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list with a sum equal to k.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum - k in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False\ndef g(nums: List[int], k: int = 0):\n    return nums\nassert f(g()) == True", "emb": null, "idx_generation": 380, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], k: int = 0) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list with a sum equal to k.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum - k in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False", "solution_func": "def g(nums: List[int], k: int = 0):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target_length=10) -> bool:\n    \"\"\"Check if the string s can be compressed to the target_length\"\"\"\n    compressed = \"\"\n    count = 1\n    for i in range(1, len(s)):\n        if s[i] == s[i - 1]:\n            count += 1\n        else:\n            compressed += s[i - 1] + str(count)\n            count = 1\n            if len(compressed) > target_length:\n                return False\n    compressed += s[-1] + str(count)\n    return len(compressed) <= target_length\n\ndef g(target_length=10):\n    return \"a\" * (target_length // 2)\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 380, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target_length=10) -> bool:\n    \"\"\"Check if the string s can be compressed to the target_length\"\"\"\n    compressed = \"\"\n    count = 1\n    for i in range(1, len(s)):\n        if s[i] == s[i - 1]:\n            count += 1\n        else:\n            compressed += s[i - 1] + str(count)\n            count = 1\n            if len(compressed) > target_length:\n                return False\n    compressed += s[-1] + str(count)\n    return len(compressed) <= target_length", "solution_func": "def g(target_length=10):\n    return \"a\" * (target_length // 2)", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_sum=10) -> bool:\n    \"\"\"Check if there exists a submatrix in matrix whose elements sum up to target_sum\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for r1 in range(rows):\n        for r2 in range(r1, rows):\n            for c1 in range(cols):\n                for c2 in range(c1, cols):\n                    submatrix_sum = 0\n                    for i in range(r1, r2 + 1):\n                        for j in range(c1, c2 + 1):\n                            submatrix_sum += matrix[i][j]\n                    if submatrix_sum == target_sum:\n                        return True\n    return False\n\ndef g(target_sum=10):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\n\nassert f(g())\n", "emb": null, "idx_generation": 380, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_sum=10) -> bool:\n    \"\"\"Check if there exists a submatrix in matrix whose elements sum up to target_sum\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for r1 in range(rows):\n        for r2 in range(r1, rows):\n            for c1 in range(cols):\n                for c2 in range(c1, cols):\n                    submatrix_sum = 0\n                    for i in range(r1, r2 + 1):\n                        for j in range(c1, c2 + 1):\n                            submatrix_sum += matrix[i][j]\n                    if submatrix_sum == target_sum:\n                        return True\n    return False", "solution_func": "def g(target_sum=10):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target_word=\"hello\") -> bool:\n    \"\"\"Check if the target word exists in the string s\"\"\"\n    i = 0\n    for char in s:\n        if char == target_word[i]:\n            i += 1\n            if i == len(target_word):\n                return True\n    return False\n\ndef g(target_word=\"hello\"):\n    return \"h\" + \"e\" * 100 + \"l\" * 100 + \"o\"\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 380, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target_word=\"hello\") -> bool:\n    \"\"\"Check if the target word exists in the string s\"\"\"\n    i = 0\n    for char in s:\n        if char == target_word[i]:\n            i += 1\n            if i == len(target_word):\n                return True\n    return False", "solution_func": "def g(target_word=\"hello\"):\n    return \"h\" + \"e\" * 100 + \"l\" * 100 + \"o\"", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Find two numbers in the given list that sum up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(arr = [1, 2, 3, 4, 5], target = 9):\n    return arr, target\nassert f(*g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 380, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Find two numbers in the given list that sum up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g(arr = [1, 2, 3, 4, 5], target = 9):\n    return arr, target", "map_ix": [1, 1, 0, 0, 0, 0, 0, 0, 1, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10, k=3) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a combination of k numbers that add up to the target.\n    Return True if such combination exists, False otherwise.\n    \"\"\"\n    def find_combination(start, current_sum, count):\n        if current_sum == target and count == k:\n            return True\n        if current_sum > target or count > k:\n            return False\n        for i in range(start, len(nums)):\n            if find_combination(i + 1, current_sum + nums[i], count + 1):\n                return True\n        return False\n\n    return find_combination(0, 0, 0)\n\n\ndef g(nums=[2, 4, 6, 8, 10]):\n    from itertools import combinations\n\n    for k in range(1, len(nums) + 1):\n        for combination in combinations(nums, k):\n            if sum(combination) == 10:\n                return list(combination)\n    return []\nassert f(g())\n", "emb": null, "idx_generation": 381, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10, k=3) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a combination of k numbers that add up to the target.\n    Return True if such combination exists, False otherwise.\n    \"\"\"\n    def find_combination(start, current_sum, count):\n        if current_sum == target and count == k:\n            return True\n        if current_sum > target or count > k:\n            return False\n        for i in range(start, len(nums)):\n            if find_combination(i + 1, current_sum + nums[i], count + 1):\n                return True\n        return False\n\n    return find_combination(0, 0, 0)", "solution_func": "def g(nums=[2, 4, 6, 8, 10]):\n    from itertools import combinations\n\n    for k in range(1, len(nums) + 1):\n        for combination in combinations(nums, k):\n            if sum(combination) == 10:\n                return list(combination)\n    return []", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Given a matrix of integers, find if there exists a path from top-left to bottom-right\n    such that the sum of the numbers along the path equals the target.\n    Return True if such path exists, False otherwise.\n    \"\"\"\n    def find_path(row, col, current_sum):\n        if row == len(matrix) - 1 and col == len(matrix[0]) - 1:\n            return current_sum + matrix[row][col] == target\n        if row >= len(matrix) or col >= len(matrix[0]):\n            return False\n        return find_path(row + 1, col, current_sum + matrix[row][col]) or find_path(row, col + 1, current_sum + matrix[row][col])\n\n    return find_path(0, 0, 0)\n\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 381, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Given a matrix of integers, find if there exists a path from top-left to bottom-right\n    such that the sum of the numbers along the path equals the target.\n    Return True if such path exists, False otherwise.\n    \"\"\"\n    def find_path(row, col, current_sum):\n        if row == len(matrix) - 1 and col == len(matrix[0]) - 1:\n            return current_sum + matrix[row][col] == target\n        if row >= len(matrix) or col >= len(matrix[0]):\n            return False\n        return find_path(row + 1, col, current_sum + matrix[row][col]) or find_path(row, col + 1, current_sum + matrix[row][col])\n\n    return find_path(0, 0, 0)", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, target=100) -> bool:\n    \"\"\"\n    Given a positive integer n, find if there exists a combination of n consecutive numbers\n    such that the sum of the numbers equals the target.\n    Return True if such combination exists, False otherwise.\n    \"\"\"\n    def find_combination(start, current_sum, count):\n        if current_sum == target and count == n:\n            return True\n        if current_sum > target or count > n:\n            return False\n        return find_combination(start + 1, current_sum + start, count + 1)\n\n    return find_combination(1, 0, 0)\n\n\ndef g(n=5):\n    return n\nassert f(g())\n", "emb": null, "idx_generation": 381, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, target=100) -> bool:\n    \"\"\"\n    Given a positive integer n, find if there exists a combination of n consecutive numbers\n    such that the sum of the numbers equals the target.\n    Return True if such combination exists, False otherwise.\n    \"\"\"\n    def find_combination(start, current_sum, count):\n        if current_sum == target and count == n:\n            return True\n        if current_sum > target or count > n:\n            return False\n        return find_combination(start + 1, current_sum + start, count + 1)\n\n    return find_combination(1, 0, 0)", "solution_func": "def g(n=5):\n    return n", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=2, y=5) -> bool:\n    \"\"\"Check if the given number is a perfect square and within a certain range.\"\"\"\n    return math.isqrt(n) ** 2 == n and x <= n <= y\n\ndef g(x=2, y=5):\n    return [i**2 for i in range(int(math.ceil(math.sqrt(x))), int(math.floor(math.sqrt(y)))+1)]\n\nassert f(g())\n", "emb": null, "idx_generation": 381, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, x=2, y=5) -> bool:\n    \"\"\"Check if the given number is a perfect square and within a certain range.\"\"\"\n    return math.isqrt(n) ** 2 == n and x <= n <= y", "solution_func": "def g(x=2, y=5):\n    return [i**2 for i in range(int(math.ceil(math.sqrt(x))), int(math.floor(math.sqrt(y)))+1)]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport datetime\n\ndef f(d: datetime.date, y=2022, m=10, day=31) -> bool:\n    \"\"\"Check if the given date is a specific day of the week.\"\"\"\n    return d.year == y and d.month == m and d.day == day and d.weekday() == 0\n\ndef g(y=2022, m=10, day=31):\n    return datetime.date(y, m, day)\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 381, "target_skills": null, "problem_func": "from typing import*\nimport datetime\n\ndef f(d: datetime.date, y=2022, m=10, day=31) -> bool:\n    \"\"\"Check if the given date is a specific day of the week.\"\"\"\n    return d.year == y and d.month == m and d.day == day and d.weekday() == 0", "solution_func": "def g(y=2022, m=10, day=31):\n    return datetime.date(y, m, day)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(lst: List[int], target=10, k=3) -> bool:\n    \"\"\"Check if there are k distinct elements in the given list that add up to the target value.\"\"\"\n    return len(set(random.sample(lst, k))) == k and sum(random.sample(lst, k)) == target\n\ndef g(target=10, k=3):\n    lst = random.sample(range(1, 10*k+1), 10*k)\n    return random.sample(lst, 10*k)\n\nassert f(g())\n", "emb": null, "idx_generation": 381, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(lst: List[int], target=10, k=3) -> bool:\n    \"\"\"Check if there are k distinct elements in the given list that add up to the target value.\"\"\"\n    return len(set(random.sample(lst, k))) == k and sum(random.sample(lst, k)) == target", "solution_func": "def g(target=10, k=3):\n    lst = random.sample(range(1, 10*k+1), 10*k)\n    return random.sample(lst, 10*k)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], n=3) -> bool:\n    \"\"\"Check if there exists a subarray of length n where the sum of the elements is divisible by n.\"\"\"\n\n    def subsets_with_sum(arr, n, target):\n        if n == 0:\n            return target == 0\n        if not arr or sum(arr) < target or len(arr) < n:\n            return False\n        if sum(arr[:n]) == target:\n            return True\n        return subsets_with_sum(arr[1:], n, target - arr[0]) or subsets_with_sum(arr[1:], n, target)\n\n    return subsets_with_sum(arr, n, sum(arr) % n) or subsets_with_sum(arr, n, sum(arr) % n + n) \n\ndef g(n=3):\n    arr = [1, 2, 3, 4, 5, 6]\n    return arr\n\nassert f(g())\n", "emb": null, "idx_generation": 381, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], n=3) -> bool:\n    \"\"\"Check if there exists a subarray of length n where the sum of the elements is divisible by n.\"\"\"\n\n    def subsets_with_sum(arr, n, target):\n        if n == 0:\n            return target == 0\n        if not arr or sum(arr) < target or len(arr) < n:\n            return False\n        if sum(arr[:n]) == target:\n            return True\n        return subsets_with_sum(arr[1:], n, target - arr[0]) or subsets_with_sum(arr[1:], n, target)\n\n    return subsets_with_sum(arr, n, sum(arr) % n) or subsets_with_sum(arr, n, sum(arr) % n + n)", "solution_func": "def g(n=3):\n    arr = [1, 2, 3, 4, 5, 6]\n    return arr", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if there exists a submatrix where the sum of the elements is equal to the target value.\"\"\"\n    \n    def submatrix_sum(matrix, target):\n        rows = len(matrix)\n        cols = len(matrix[0])\n        \n        for i in range(rows):\n            for j in range(cols):\n                for k in range(i, rows):\n                    for l in range(j, cols):\n                        sub_sum = 0\n                        for x in range(i, k+1):\n                            for y in range(j, l+1):\n                                sub_sum += matrix[x][y]\n                        \n                        if sub_sum == target:\n                            return True\n        return False\n\n    return submatrix_sum(matrix, target)\n\ndef g(target=0):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\n\nassert f(g())\n", "emb": null, "idx_generation": 381, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if there exists a submatrix where the sum of the elements is equal to the target value.\"\"\"\n    \n    def submatrix_sum(matrix, target):\n        rows = len(matrix)\n        cols = len(matrix[0])\n        \n        for i in range(rows):\n            for j in range(cols):\n                for k in range(i, rows):\n                    for l in range(j, cols):\n                        sub_sum = 0\n                        for x in range(i, k+1):\n                            for y in range(j, l+1):\n                                sub_sum += matrix[x][y]\n                        \n                        if sub_sum == target:\n                            return True\n        return False\n\n    return submatrix_sum(matrix, target)", "solution_func": "def g(target=0):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a subsequence where the sum of the elements is equal to the target value.\"\"\"\n    \n    def subsequence_sum(nums, target):\n        n = len(nums)\n        dp = [[False for _ in range(target+1)] for _ in range(n+1)]\n        \n        for i in range(n+1):\n            dp[i][0] = True\n        \n        for i in range(1, n+1):\n            for j in range(1, target+1):\n                if j >= nums[i-1]:\n                    dp[i][j] = dp[i-1][j] or dp[i-1][j-nums[i-1]]\n                else:\n                    dp[i][j] = dp[i-1][j]\n        \n        return dp[n][target]\n\n    return subsequence_sum(nums, target)\n\ndef g(target=0):\n    nums = [1, 2, 3, 4, 5]\n    return nums\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 381, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a subsequence where the sum of the elements is equal to the target value.\"\"\"\n    \n    def subsequence_sum(nums, target):\n        n = len(nums)\n        dp = [[False for _ in range(target+1)] for _ in range(n+1)]\n        \n        for i in range(n+1):\n            dp[i][0] = True\n        \n        for i in range(1, n+1):\n            for j in range(1, target+1):\n                if j >= nums[i-1]:\n                    dp[i][j] = dp[i-1][j] or dp[i-1][j-nums[i-1]]\n                else:\n                    dp[i][j] = dp[i-1][j]\n        \n        return dp[n][target]\n\n    return subsequence_sum(nums, target)", "solution_func": "def g(target=0):\n    nums = [1, 2, 3, 4, 5]\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, nums: List[int]) -> bool:\n    \"\"\"Given a list of integers and an integer n, determine if there exists a pair of integers in the list that sum up to n.\"\"\"\n    return any(nums[i] + nums[j] == n for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(nums: List[int]):\n    return sum(nums)\nassert f(g())\n", "emb": null, "idx_generation": 381, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums: List[int]) -> bool:\n    \"\"\"Given a list of integers and an integer n, determine if there exists a pair of integers in the list that sum up to n.\"\"\"\n    return any(nums[i] + nums[j] == n for i in range(len(nums)) for j in range(i+1, len(nums)))", "solution_func": "def g(nums: List[int]):\n    return sum(nums)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, return True if there exist two integers in the list whose sum is equal to the target value.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target = 10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), target=10)\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 382, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, return True if there exist two integers in the list whose sum is equal to the target value.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(target = 10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string, return True if all the characters in the string are unique, False otherwise.\n    \"\"\"\n    return len(set(s)) == len(s)\n\ndef g():\n    return \"abcdefghijklmnopqrstuvwxyz\"\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 382, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string, return True if all the characters in the string are unique, False otherwise.\n    \"\"\"\n    return len(set(s)) == len(s)", "solution_func": "def g():\n    return \"abcdefghijklmnopqrstuvwxyz\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(points: List[Tuple[int, int]]) -> bool:\n    \"\"\"\n    Given a list of points in a 2D plane, return True if there exist three points that form a right-angled triangle.\n    \"\"\"\n    def get_distance(p1, p2):\n        x1, y1 = p1\n        x2, y2 = p2\n        return (x2 - x1) ** 2 + (y2 - y1) ** 2\n\n    distances = set()\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            distance = get_distance(points[i], points[j])\n            if distance in distances:\n                return True\n            distances.add(distance)\n    return False\n\ndef g():\n    return [(0, 0), (1, 1), (2, 2), (3, 3), (4, 4)]\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 382, "target_skills": null, "problem_func": "from typing import*\ndef f(points: List[Tuple[int, int]]) -> bool:\n    \"\"\"\n    Given a list of points in a 2D plane, return True if there exist three points that form a right-angled triangle.\n    \"\"\"\n    def get_distance(p1, p2):\n        x1, y1 = p1\n        x2, y2 = p2\n        return (x2 - x1) ** 2 + (y2 - y1) ** 2\n\n    distances = set()\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            distance = get_distance(points[i], points[j])\n            if distance in distances:\n                return True\n            distances.add(distance)\n    return False", "solution_func": "def g():\n    return [(0, 0), (1, 1), (2, 2), (3, 3), (4, 4)]", "map_ix": [1, 0, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, lst1=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], lst2=[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) -> bool:\n    \"\"\"Check if the sum of the first n elements in lst1 is equal to the sum of the last n elements in lst2\"\"\"\n    return sum(lst1[:n]) == sum(lst2[-n:])\ndef g(lst1 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], lst2 = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]):\n    return len(lst1) // 2\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 382, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst1=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], lst2=[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) -> bool:\n    \"\"\"Check if the sum of the first n elements in lst1 is equal to the sum of the last n elements in lst2\"\"\"\n    return sum(lst1[:n]) == sum(lst2[-n:])", "solution_func": "def g(lst1 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], lst2 = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]):\n    return len(lst1) // 2", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, lst: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if n is a prime number and also present in the given list\"\"\"\n    return n in lst and all(n % i != 0 for i in range(2, int(n**0.5)+1))\ndef g(lst: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return next(x for x in lst if all(x % i != 0 for i in range(2, int(x**0.5)+1)))\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 382, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(n: int, lst: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if n is a prime number and also present in the given list\"\"\"\n    return n in lst and all(n % i != 0 for i in range(2, int(n**0.5)+1))", "solution_func": "def g(lst: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return next(x for x in lst if all(x % i != 0 for i in range(2, int(x**0.5)+1)))", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n: int = 5, m: int = 3) -> bool:\n    \"\"\"Check if the length of s is equal to n and the count of 'a' in s is equal to m\"\"\"\n    return len(s) == n and s.count('a') == m\ndef g(n: int = 5, m: int = 3):\n    return 'a' * m + 'b' * (n - m)\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 382, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n: int = 5, m: int = 3) -> bool:\n    \"\"\"Check if the length of s is equal to n and the count of 'a' in s is equal to m\"\"\"\n    return len(s) == n and s.count('a') == m", "solution_func": "def g(n: int = 5, m: int = 3):\n    return 'a' * m + 'b' * (n - m)", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, strings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grapefruit', 'honeydew', 'indigo', 'jackfruit']) -> bool:\n    \"\"\"Check if the given string is a palindrome and present in the list.\"\"\"\n    return s == s[::-1] and s in strings\ndef g(strings = ['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grapefruit', 'honeydew', 'indigo', 'jackfruit']):\n    for string in strings:\n        if string == string[::-1]:\n            return string\nassert f(g())\n", "emb": null, "idx_generation": 382, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, strings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grapefruit', 'honeydew', 'indigo', 'jackfruit']) -> bool:\n    \"\"\"Check if the given string is a palindrome and present in the list.\"\"\"\n    return s == s[::-1] and s in strings", "solution_func": "def g(strings = ['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grapefruit', 'honeydew', 'indigo', 'jackfruit']):\n    for string in strings:\n        if string == string[::-1]:\n            return string", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) -> bool:\n    \"\"\"Check if the given number is a multiple of any number in the list.\"\"\"\n    return any(n % num == 0 for num in nums)\ndef g(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]):\n    return nums[0]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 382, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) -> bool:\n    \"\"\"Check if the given number is a multiple of any number in the list.\"\"\"\n    return any(n % num == 0 for num in nums)", "solution_func": "def g(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]):\n    return nums[0]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: int, y: int, z: int, values={'a': 5, 'b': 10, 'c': 15, 'd': 20, 'e': 25}) -> bool:\n    \"\"\"Check if the sum of the values corresponding to the given keys is equal to the given number x.\"\"\"\n    return sum(values[key] for key in [chr(ord('a')+i) for i in range(5)]) == x\ndef g(values = {'a': 5, 'b': 10, 'c': 15, 'd': 20, 'e': 25}):\n    return sum(values.values())\nassert f(g())\n", "emb": null, "idx_generation": 382, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, y: int, z: int, values={'a': 5, 'b': 10, 'c': 15, 'd': 20, 'e': 25}) -> bool:\n    \"\"\"Check if the sum of the values corresponding to the given keys is equal to the given number x.\"\"\"\n    return sum(values[key] for key in [chr(ord('a')+i) for i in range(5)]) == x", "solution_func": "def g(values = {'a': 5, 'b': 10, 'c': 15, 'd': 20, 'e': 25}):\n    return sum(values.values())", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, lst: list) -> bool:\n    \"\"\"Check if n is present in lst.\"\"\"\n    return n in lst\ndef g(lst = [1, 2, 3, 4, 5], n = 3):\n    return lst[n]\nassert f(g())\n", "emb": null, "idx_generation": 382, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst: list) -> bool:\n    \"\"\"Check if n is present in lst.\"\"\"\n    return n in lst", "solution_func": "def g(lst = [1, 2, 3, 4, 5], n = 3):\n    return lst[n]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, strings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'indigo', 'jackfruit']) -> bool:\n    \"\"\"Find the index of the first occurrence of a string in a list.\"\"\"\n    return strings.index(s) == 0\ndef g(strings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'indigo', 'jackfruit']):\n    return strings[0]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 383, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, strings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'indigo', 'jackfruit']) -> bool:\n    \"\"\"Find the index of the first occurrence of a string in a list.\"\"\"\n    return strings.index(s) == 0", "solution_func": "def g(strings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'indigo', 'jackfruit']):\n    return strings[0]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=50, k=3) -> bool:\n    \"\"\"\n    Find if there exist k numbers in a list that sum up to a target number.\n    \"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, k))\ndef g(nums=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 383, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=50, k=3) -> bool:\n    \"\"\"\n    Find if there exist k numbers in a list that sum up to a target number.\n    \"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, k))", "solution_func": "def g(nums=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substring='python') -> bool:\n    \"\"\"Check if a string contains a specified substring.\"\"\"\n    return substring in s\ndef g(substring='python'):\n    return 'I love ' + substring\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 383, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substring='python') -> bool:\n    \"\"\"Check if a string contains a specified substring.\"\"\"\n    return substring in s", "solution_func": "def g(substring='python'):\n    return 'I love ' + substring", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, strings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'indigo', 'jackfruit']) -> bool:\n    \"\"\"Check if the given string is the longest string in the list.\"\"\"\n    return s in strings and max(len(t) for t in strings) == len(s)\ndef g(strings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'indigo', 'jackfruit']):\n    return max(strings, key=len)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 383, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, strings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'indigo', 'jackfruit']) -> bool:\n    \"\"\"Check if the given string is the longest string in the list.\"\"\"\n    return s in strings and max(len(t) for t in strings) == len(s)", "solution_func": "def g(strings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'indigo', 'jackfruit']):\n    return max(strings, key=len)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, nums=[7, 12, 19, 26, 33, 40, 47, 54, 61, 68, 75], lower_bound=10) -> bool:\n    \"\"\"Check if all the numbers in the list are divisible by the given number.\"\"\"\n    return all((i % n == 0 for i in nums)) and n >= lower_bound\ndef g(nums=[7, 12, 19, 26, 33, 40, 47, 54, 61, 68, 75], lower_bound=10):\n    return max(nums) // 10 * 10\nassert f(g())\n", "emb": null, "idx_generation": 383, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[7, 12, 19, 26, 33, 40, 47, 54, 61, 68, 75], lower_bound=10) -> bool:\n    \"\"\"Check if all the numbers in the list are divisible by the given number.\"\"\"\n    return all((i % n == 0 for i in nums)) and n >= lower_bound", "solution_func": "def g(nums=[7, 12, 19, 26, 33, 40, 47, 54, 61, 68, 75], lower_bound=10):\n    return max(nums) // 10 * 10", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, strings=['cat', 'dog', 'elephant', 'fox', 'giraffe', 'hamster', 'iguana', 'jaguar', 'koala', 'lion']) -> bool:\n    \"\"\"Check if the given string is the lexicographically smallest string in the list\"\"\"\n    return s in strings and min(strings) == s\ndef g(strings=['cat', 'dog', 'elephant', 'fox', 'giraffe', 'hamster', 'iguana', 'jaguar', 'koala', 'lion']):\n    return min(strings, key=len)\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 383, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, strings=['cat', 'dog', 'elephant', 'fox', 'giraffe', 'hamster', 'iguana', 'jaguar', 'koala', 'lion']) -> bool:\n    \"\"\"Check if the given string is the lexicographically smallest string in the list\"\"\"\n    return s in strings and min(strings) == s", "solution_func": "def g(strings=['cat', 'dog', 'elephant', 'fox', 'giraffe', 'hamster', 'iguana', 'jaguar', 'koala', 'lion']):\n    return min(strings, key=len)", "map_ix": [1, 0, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, x: int, y: int) -> bool:\n    \"\"\"Check if the string contains a substring that has exactly x consonants and y vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    consonants = [chr(i) for i in range(97, 123) if chr(i) not in vowels]\n    \n    count_consonants = 0\n    count_vowels = 0\n    \n    for i in range(len(s)):\n        if s[i] in consonants:\n            count_consonants += 1\n        elif s[i] in vowels:\n            count_vowels += 1\n        \n        if count_consonants == x and count_vowels == y:\n            return True\n    \n    return False\n\ndef g(s: str, x: int, y: int):\n    return s\n\nassert f(g(\"hello world\", 3, 2))\n", "emb": null, "idx_generation": 383, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, x: int, y: int) -> bool:\n    \"\"\"Check if the string contains a substring that has exactly x consonants and y vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    consonants = [chr(i) for i in range(97, 123) if chr(i) not in vowels]\n    \n    count_consonants = 0\n    count_vowels = 0\n    \n    for i in range(len(s)):\n        if s[i] in consonants:\n            count_consonants += 1\n        elif s[i] in vowels:\n            count_vowels += 1\n        \n        if count_consonants == x and count_vowels == y:\n            return True\n    \n    return False", "solution_func": "def g(s: str, x: int, y: int):\n    return s", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(m: List[List[int]]) -> bool:\n    \"\"\"Check if the matrix is an upper triangular matrix.\"\"\"\n    n = len(m)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if m[i][j] != 0:\n                return False\n    \n    return True\n\ndef g(m: List[List[int]]):\n    return m\n\nassert f(g([[1, 2, 3], [0, 4, 5], [0, 0, 6]]))\n", "emb": null, "idx_generation": 383, "target_skills": null, "problem_func": "from typing import*\ndef f(m: List[List[int]]) -> bool:\n    \"\"\"Check if the matrix is an upper triangular matrix.\"\"\"\n    n = len(m)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if m[i][j] != 0:\n                return False\n    \n    return True", "solution_func": "def g(m: List[List[int]]):\n    return m", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, m: int) -> bool:\n    \"\"\"Check if a knight can reach the destination (m, n) in a chessboard.\"\"\"\n    if n < 0 or m < 0:\n        return False\n    \n    if n == 0 and m == 0:\n        return True\n    \n    if n == 1 and m == 2:\n        return True\n    \n    if n == 2 and m == 1:\n        return True\n    \n    return f(n-2, m-1) or f(n-1, m-2)\n\ndef g(n: int, m: int):\n    return (n, m)\n\nassert f(g(4, 7))\n", "emb": null, "idx_generation": 383, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m: int) -> bool:\n    \"\"\"Check if a knight can reach the destination (m, n) in a chessboard.\"\"\"\n    if n < 0 or m < 0:\n        return False\n    \n    if n == 0 and m == 0:\n        return True\n    \n    if n == 1 and m == 2:\n        return True\n    \n    if n == 2 and m == 1:\n        return True\n    \n    return f(n-2, m-1) or f(n-1, m-2)", "solution_func": "def g(n: int, m: int):\n    return (n, m)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target=1000) -> bool:\n    \"\"\"\n    Given a list of integers, find a pair of numbers whose sum is equal to the target value.\n\n    Sample Input:\n    `[200, 400, 500, 300, 250, 350]`\n\n    Sample Output:\n    `(500, 500)`\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(arr=[200, 400, 500, 300, 250, 350]):\n    return arr[2], arr[2]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 383, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=1000) -> bool:\n    \"\"\"\n    Given a list of integers, find a pair of numbers whose sum is equal to the target value.\n\n    Sample Input:\n    `[200, 400, 500, 300, 250, 350]`\n\n    Sample Output:\n    `(500, 500)`\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g(arr=[200, 400, 500, 300, 250, 350]):\n    return arr[2], arr[2]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(num_list: List[int], target=20) -> bool:\n    \"\"\"\n    Given a list of numbers, find a subset of the numbers that add up to the target number.\n\n    Example:\n    num_list = [1, 2, 3, 4, 5]\n    target = 8\n    The subset [3, 5] adds up to the target number 8.\n    \"\"\"\n    def subset_sum(numbers, target, partial=[]):\n        s = sum(partial)\n\n        # check if the partial sum is equal to target\n        if s == target:\n            return True\n\n        # check if the partial sum is greater than the target\n        if s > target:\n            return False\n\n        # recursive call to find the subset that adds up to the target number\n        for i in range(len(numbers)):\n            n = numbers[i]\n            remaining = numbers[i + 1:]\n            if subset_sum(remaining, target, partial + [n]):\n                return True\n\n        return False\n\n    return subset_sum(num_list, target)\n\ndef g(num_list=[1, 2, 3, 4, 5], target=20):\n    # Generate all possible subsets of the numbers\n    def generate_subsets(numbers):\n        subsets = [[]]\n        for num in numbers:\n            subsets += [subset + [num] for subset in subsets]\n        return subsets\n\n    # Find the subset that adds up to the target number\n    subsets = generate_subsets(num_list)\n    for subset in subsets:\n        if sum(subset) == target:\n            return subset\n    return []\n\nassert f(g())\n", "emb": null, "idx_generation": 384, "target_skills": null, "problem_func": "from typing import*\ndef f(num_list: List[int], target=20) -> bool:\n    \"\"\"\n    Given a list of numbers, find a subset of the numbers that add up to the target number.\n\n    Example:\n    num_list = [1, 2, 3, 4, 5]\n    target = 8\n    The subset [3, 5] adds up to the target number 8.\n    \"\"\"\n    def subset_sum(numbers, target, partial=[]):\n        s = sum(partial)\n\n        # check if the partial sum is equal to target\n        if s == target:\n            return True\n\n        # check if the partial sum is greater than the target\n        if s > target:\n            return False\n\n        # recursive call to find the subset that adds up to the target number\n        for i in range(len(numbers)):\n            n = numbers[i]\n            remaining = numbers[i + 1:]\n            if subset_sum(remaining, target, partial + [n]):\n                return True\n\n        return False\n\n    return subset_sum(num_list, target)", "solution_func": "def g(num_list=[1, 2, 3, 4, 5], target=20):\n    # Generate all possible subsets of the numbers\n    def generate_subsets(numbers):\n        subsets = [[]]\n        for num in numbers:\n            subsets += [subset + [num] for subset in subsets]\n        return subsets\n\n    # Find the subset that adds up to the target number\n    subsets = generate_subsets(num_list)\n    for subset in subsets:\n        if sum(subset) == target:\n            return subset\n    return []", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(word_list: List[str], character='a') -> bool:\n    \"\"\"\n    Given a list of words, find all words that contain a specific character.\n\n    Example:\n    word_list = ['apple', 'banana', 'cherry', 'date']\n    character = 'a'\n    The words ['apple', 'banana'] contain the character 'a'.\n    \"\"\"\n    return [word for word in word_list if character in word]\n\ndef g(word_list=['apple', 'banana', 'cherry', 'date'], character='a'):\n    return [word for word in word_list if character in word]\n\nassert f(g())\n", "emb": null, "idx_generation": 384, "target_skills": null, "problem_func": "from typing import*\ndef f(word_list: List[str], character='a') -> bool:\n    \"\"\"\n    Given a list of words, find all words that contain a specific character.\n\n    Example:\n    word_list = ['apple', 'banana', 'cherry', 'date']\n    character = 'a'\n    The words ['apple', 'banana'] contain the character 'a'.\n    \"\"\"\n    return [word for word in word_list if character in word]", "solution_func": "def g(word_list=['apple', 'banana', 'cherry', 'date'], character='a'):\n    return [word for word in word_list if character in word]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(num: int, divisor=5) -> bool:\n    \"\"\"\n    Given a number, check if it is divisible by a specific divisor.\n\n    Example:\n    num = 15\n    divisor = 3\n    The number 15 is divisible by 3.\n    \"\"\"\n    return num % divisor == 0\n\ndef g(num=15, divisor=3):\n    return num\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 384, "target_skills": null, "problem_func": "from typing import*\ndef f(num: int, divisor=5) -> bool:\n    \"\"\"\n    Given a number, check if it is divisible by a specific divisor.\n\n    Example:\n    num = 15\n    divisor = 3\n    The number 15 is divisible by 3.\n    \"\"\"\n    return num % divisor == 0", "solution_func": "def g(num=15, divisor=3):\n    return num", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], n=4) -> bool:\n    \"\"\"Check if the n-th smallest element in the array is equal to the sum of the first n elements\"\"\"\n    return arr[n-1] == sum(sorted(arr)[:n])\ndef g(arr = [5, 3, 9, 2, 7, 1]):\n    return sorted(arr)\nassert f(g())\n", "emb": null, "idx_generation": 384, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], n=4) -> bool:\n    \"\"\"Check if the n-th smallest element in the array is equal to the sum of the first n elements\"\"\"\n    return arr[n-1] == sum(sorted(arr)[:n])", "solution_func": "def g(arr = [5, 3, 9, 2, 7, 1]):\n    return sorted(arr)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(num: int, target=7) -> bool:\n    \"\"\"Check if the given number can be formed by adding or subtracting the digits of the target number\"\"\"\n    digits = [int(d) for d in str(target)]\n    for i in range(len(digits)):\n        for j in range(i+1, len(digits)):\n            if digits[i] + digits[j] == num or digits[i] - digits[j] == num:\n                return True\n    return False\ndef g(target = 7):\n    return target\nassert f(g())\n", "emb": null, "idx_generation": 384, "target_skills": null, "problem_func": "from typing import*\ndef f(num: int, target=7) -> bool:\n    \"\"\"Check if the given number can be formed by adding or subtracting the digits of the target number\"\"\"\n    digits = [int(d) for d in str(target)]\n    for i in range(len(digits)):\n        for j in range(i+1, len(digits)):\n            if digits[i] + digits[j] == num or digits[i] - digits[j] == num:\n                return True\n    return False", "solution_func": "def g(target = 7):\n    return target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, arr=[3, 8, 5, 2, 9, 1]) -> bool:\n    \"\"\"Check if the sum of the first n elements in the array is divisible by n\"\"\"\n    return sum(arr[:n]) % n == 0\ndef g(arr = [3, 8, 5, 2, 9, 1]):\n    return len(arr)\nassert f(g())\n", "emb": null, "idx_generation": 384, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, arr=[3, 8, 5, 2, 9, 1]) -> bool:\n    \"\"\"Check if the sum of the first n elements in the array is divisible by n\"\"\"\n    return sum(arr[:n]) % n == 0", "solution_func": "def g(arr = [3, 8, 5, 2, 9, 1]):\n    return len(arr)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], k=5, target=20) -> bool:\n    \"\"\"Find if there exists a subarray of length k with sum equal to target\"\"\"\n    assert len(nums) >= k and k > 0\n    for i in range(len(nums) - k + 1):\n        if sum(nums[i:i+k]) == target:\n            return True\n    return False\ndef g(k=5, target=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 384, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], k=5, target=20) -> bool:\n    \"\"\"Find if there exists a subarray of length k with sum equal to target\"\"\"\n    assert len(nums) >= k and k > 0\n    for i in range(len(nums) - k + 1):\n        if sum(nums[i:i+k]) == target:\n            return True\n    return False", "solution_func": "def g(k=5, target=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(string: str, n=5) -> bool:\n    \"\"\"Check if string contains exactly n alphabetic characters\"\"\"\n    assert len(string) > 0 and n > 0\n    count = 0\n    for char in string:\n        if char.isalpha():\n            count += 1\n    return count == n\ndef g(n=5):\n    return \"Hello, World!\"\nassert f(g())\n", "emb": null, "idx_generation": 384, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, n=5) -> bool:\n    \"\"\"Check if string contains exactly n alphabetic characters\"\"\"\n    assert len(string) > 0 and n > 0\n    count = 0\n    for char in string:\n        if char.isalpha():\n            count += 1\n    return count == n", "solution_func": "def g(n=5):\n    return \"Hello, World!\"", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=3, target=10) -> bool:\n    \"\"\"Find if there exists a submatrix of size n x n with sum equal to target\"\"\"\n    assert len(matrix) >= n and all(len(row) >= n for row in matrix) and n > 0\n    for i in range(len(matrix) - n + 1):\n        for j in range(len(matrix[0]) - n + 1):\n            submatrix = [row[j:j+n] for row in matrix[i:i+n]]\n            if sum(sum(row) for row in submatrix) == target:\n                return True\n    return False\ndef g(n=3, target=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n", "emb": null, "idx_generation": 384, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n=3, target=10) -> bool:\n    \"\"\"Find if there exists a submatrix of size n x n with sum equal to target\"\"\"\n    assert len(matrix) >= n and all(len(row) >= n for row in matrix) and n > 0\n    for i in range(len(matrix) - n + 1):\n        for j in range(len(matrix[0]) - n + 1):\n            submatrix = [row[j:j+n] for row in matrix[i:i+n]]\n            if sum(sum(row) for row in submatrix) == target:\n                return True\n    return False", "solution_func": "def g(n=3, target=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(x: int, y: int, z: int, a=3, b=5, c=10) -> bool:\n    \"\"\"\n    Check if x^a + y^b = z^c.\n    \"\"\"\n    return x**a + y**b == z**c\n\ndef g(x: int, y: int, a=3, b=5, c=10) -> int:\n    \"\"\"\n    Find a value of z that satisfies the equation x^a + y^b = z^c.\n    \"\"\"\n    return int(math.pow(x**a + y**b, 1/c))\n\nassert f(g())\n", "emb": null, "idx_generation": 384, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: int, y: int, z: int, a=3, b=5, c=10) -> bool:\n    \"\"\"\n    Check if x^a + y^b = z^c.\n    \"\"\"\n    return x**a + y**b == z**c", "solution_func": "def g(x: int, y: int, a=3, b=5, c=10) -> int:\n    \"\"\"\n    Find a value of z that satisfies the equation x^a + y^b = z^c.\n    \"\"\"\n    return int(math.pow(x**a + y**b, 1/c))", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find two distinct indices such that the sum of the numbers\n    at those indices equals the target number.\n    \"\"\"\n    seen = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in seen:\n            return True\n        seen[num] = i\n    return False\n\ndef g(nums=[3, 5, 2, 8, 11, 9], target=20):\n    return nums, target\n\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 385, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find two distinct indices such that the sum of the numbers\n    at those indices equals the target number.\n    \"\"\"\n    seen = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in seen:\n            return True\n        seen[num] = i\n    return False", "solution_func": "def g(nums=[3, 5, 2, 8, 11, 9], target=20):\n    return nums, target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"\n    Given two strings s and t, determine if t is an anagram of s.\n    \"\"\"\n    return sorted(s) == sorted(t)\n\ndef g(s='listen', t='silent'):\n    return s, t\n\nassert f(*g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 385, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"\n    Given two strings s and t, determine if t is an anagram of s.\n    \"\"\"\n    return sorted(s) == sorted(t)", "solution_func": "def g(s='listen', t='silent'):\n    return s, t", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find three distinct numbers in the list that sum up to the target number.\n    \"\"\"\n    nums.sort()\n    for i in range(len(nums)-2):\n        left = i + 1\n        right = len(nums) - 1\n        while left < right:\n            current_sum = nums[i] + nums[left] + nums[right]\n            if current_sum == target:\n                return True\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False\n\ndef g(nums=[1, 4, 2, 6, 9, 15], target=21):\n    return nums, target\n\nassert f(*g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 385, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find three distinct numbers in the list that sum up to the target number.\n    \"\"\"\n    nums.sort()\n    for i in range(len(nums)-2):\n        left = i + 1\n        right = len(nums) - 1\n        while left < right:\n            current_sum = nums[i] + nums[left] + nums[right]\n            if current_sum == target:\n                return True\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False", "solution_func": "def g(nums=[1, 4, 2, 6, 9, 15], target=21):\n    return nums, target", "map_ix": [1, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(lst: List[int], target=0) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target.\"\"\"\n    from itertools import combinations\n    for combo in combinations(lst, 3):\n        if sum(combo) == target:\n            return True\n    return False\n\ndef g(lst: List[int], target=0):\n    return lst\n\nassert f(g([1, 2, 3, 4, 5], 6))\n", "emb": null, "idx_generation": 385, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(lst: List[int], target=0) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target.\"\"\"\n    from itertools import combinations\n    for combo in combinations(lst, 3):\n        if sum(combo) == target:\n            return True\n    return False", "solution_func": "def g(lst: List[int], target=0):\n    return lst", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(string: str, substring='abc') -> bool:\n    \"\"\"Check if a given substring appears exactly twice in a string.\"\"\"\n    return string.count(substring) == 2\n\ndef g(string='abcabcabc'):\n    return string\n\nassert f(g())\n", "emb": null, "idx_generation": 385, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, substring='abc') -> bool:\n    \"\"\"Check if a given substring appears exactly twice in a string.\"\"\"\n    return string.count(substring) == 2", "solution_func": "def g(string='abcabcabc'):\n    return string", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if there exists a row in the matrix where the sum of its elements is equal to the target.\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    return False\n\ndef g(matrix: List[List[int]], target=0):\n    return matrix\n\nassert f(g([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 15))\n", "emb": null, "idx_generation": 385, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if there exists a row in the matrix where the sum of its elements is equal to the target.\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    return False", "solution_func": "def g(matrix: List[List[int]], target=0):\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, target_sum=10.0) -> bool:\n    \"\"\"\n    Determine if the sum of the logarithms of three numbers is equal to a target sum.\n    \"\"\"\n    return math.log(x) + math.log(y) + math.log(z) == target_sum\n\ndef g(target_sum=10.0):\n    x = math.e ** ((target_sum - 2) / 3)\n    y = math.e ** ((target_sum - math.log(x) - 1) / 2)\n    z = math.e ** (target_sum - math.log(x) - math.log(y))\n    return (x, y, z)\n\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 385, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, target_sum=10.0) -> bool:\n    \"\"\"\n    Determine if the sum of the logarithms of three numbers is equal to a target sum.\n    \"\"\"\n    return math.log(x) + math.log(y) + math.log(z) == target_sum", "solution_func": "def g(target_sum=10.0):\n    x = math.e ** ((target_sum - 2) / 3)\n    y = math.e ** ((target_sum - math.log(x) - 1) / 2)\n    z = math.e ** (target_sum - math.log(x) - math.log(y))\n    return (x, y, z)", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target_sum=0) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in a list that sums up to a target sum.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if target_sum - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(target_sum=0):\n    nums = [-1, 2, 3, 5, -4, 7]\n    return (nums, target_sum)\n\nassert f(*g())\n", "emb": null, "idx_generation": 385, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=0) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in a list that sums up to a target sum.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if target_sum - num in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(target_sum=0):\n    nums = [-1, 2, 3, 5, -4, 7]\n    return (nums, target_sum)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_sum=0) -> bool:\n    \"\"\"\n    Determine if there exists a row or column in a matrix whose sum is equal to a target sum.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    return target_sum in row_sums or target_sum in col_sums\n\ndef g(target_sum=0):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return (matrix, target_sum)\n\nassert f(*g())\n", "emb": null, "idx_generation": 385, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_sum=0) -> bool:\n    \"\"\"\n    Determine if there exists a row or column in a matrix whose sum is equal to a target sum.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    return target_sum in row_sums or target_sum in col_sums", "solution_func": "def g(target_sum=0):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return (matrix, target_sum)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=0, m=0) -> bool:\n    \"\"\"Check if the sum of the last m digits of 2^n is equal to s\"\"\"\n    return sum(map(int, str(2 ** n)[-m:])) == int(s)\ndef g(n=0, m=0):\n    return str(2 ** n)\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 385, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=0, m=0) -> bool:\n    \"\"\"Check if the sum of the last m digits of 2^n is equal to s\"\"\"\n    return sum(map(int, str(2 ** n)[-m:])) == int(s)", "solution_func": "def g(n=0, m=0):\n    return str(2 ** n)", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(num: int, target=42, threshold=5, square=True) -> bool:\n    \"\"\"Find if the given number, or its square if `square` is True, is greater than the target number by at least the threshold.\"\"\"\n    if square:\n        return num**2 - target >= threshold\n    else:\n        return num - target >= threshold\n\ndef g(target=42, threshold=5, square=True):\n    num = 7\n    if square:\n        return num ** 2\n    else:\n        return num\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 386, "target_skills": null, "problem_func": "from typing import*\ndef f(num: int, target=42, threshold=5, square=True) -> bool:\n    \"\"\"Find if the given number, or its square if `square` is True, is greater than the target number by at least the threshold.\"\"\"\n    if square:\n        return num**2 - target >= threshold\n    else:\n        return num - target >= threshold", "solution_func": "def g(target=42, threshold=5, square=True):\n    num = 7\n    if square:\n        return num ** 2\n    else:\n        return num", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import math\nfrom typing import*\ndef f(nums: List[int], target=10, operation='+') -> bool:\n    \"\"\"Check if the sum or product of the given list of numbers equals the target number.\"\"\"\n    if operation == '+':\n        return sum(nums) == target\n    elif operation == '*':\n        return math.prod(nums) == target\n    else:\n        return False\n\ndef g(target=10, operation='+'):\n    nums = [2, 3, 5]\n    return nums\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 386, "target_skills": null, "problem_func": "import math\nfrom typing import*\ndef f(nums: List[int], target=10, operation='+') -> bool:\n    \"\"\"Check if the sum or product of the given list of numbers equals the target number.\"\"\"\n    if operation == '+':\n        return sum(nums) == target\n    elif operation == '*':\n        return math.prod(nums) == target\n    else:\n        return False", "solution_func": "def g(target=10, operation='+'):\n    nums = [2, 3, 5]\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(words: List[str], prefix='pre', suffix='fix') -> bool:\n    \"\"\"Check if any of the words in the list has the given prefix and suffix.\"\"\"\n    return any(word.startswith(prefix) and word.endswith(suffix) for word in words)\n\ndef g(prefix='pre', suffix='fix'):\n    words = ['prefix', 'suffix', 'infix']\n    return words\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 386, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], prefix='pre', suffix='fix') -> bool:\n    \"\"\"Check if any of the words in the list has the given prefix and suffix.\"\"\"\n    return any(word.startswith(prefix) and word.endswith(suffix) for word in words)", "solution_func": "def g(prefix='pre', suffix='fix'):\n    words = ['prefix', 'suffix', 'infix']\n    return words", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if the sum of any 3 numbers in the list is equal to n.\"\"\"\n    return any(sum(combo) == n for combo in combinations(lst, 3))\ndef g(lst = [1, 2, 3, 4, 5, 6]):\n    return lst\nassert f(10, g())\n", "emb": null, "idx_generation": 386, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if the sum of any 3 numbers in the list is equal to n.\"\"\"\n    return any(sum(combo) == n for combo in combinations(lst, 3))", "solution_func": "def g(lst = [1, 2, 3, 4, 5, 6]):\n    return lst", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to n.\"\"\"\n    return any((n - num) in lst for num in lst)\ndef g(lst = [1, 2, 3, 4, 5, 6]):\n    return lst\nassert f(10, g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 386, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to n.\"\"\"\n    return any((n - num) in lst for num in lst)", "solution_func": "def g(lst = [1, 2, 3, 4, 5, 6]):\n    return lst", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subarray in arr whose sum is equal to the target.\"\"\"\n    prefix_sum = set([0])\n    curr_sum = 0\n    for num in arr:\n        curr_sum += num\n        if curr_sum - target in prefix_sum:\n            return True\n        prefix_sum.add(curr_sum)\n    return False\ndef g(arr = [1, 2, 3, 4, 5, 6]):\n    return arr\nassert f(g(), 10)\n", "emb": [1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 386, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subarray in arr whose sum is equal to the target.\"\"\"\n    prefix_sum = set([0])\n    curr_sum = 0\n    for num in arr:\n        curr_sum += num\n        if curr_sum - target in prefix_sum:\n            return True\n        prefix_sum.add(curr_sum)\n    return False", "solution_func": "def g(arr = [1, 2, 3, 4, 5, 6]):\n    return arr", "map_ix": [1, 1, 1, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, num_repeats=3, target='abc') -> bool:\n    \"\"\"Check if a string is equal to a target string repeated a certain number of times.\"\"\"\n    return s == target * num_repeats\ndef g(num_repeats=3, target='abc'):\n    return target * num_repeats\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 386, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, num_repeats=3, target='abc') -> bool:\n    \"\"\"Check if a string is equal to a target string repeated a certain number of times.\"\"\"\n    return s == target * num_repeats", "solution_func": "def g(num_repeats=3, target='abc'):\n    return target * num_repeats", "map_ix": [0, 0, 0, 1, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a list that sum up to a target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                return True\n    return False\ndef g(arr=[2, 5, 3, 8, 6]):\n    return arr\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 386, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a list that sum up to a target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                return True\n    return False", "solution_func": "def g(arr=[2, 5, 3, 8, 6]):\n    return arr", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if a target value exists in a matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 386, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if a target value exists in a matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, substring='abc', count=3, length=9, case_sensitive=False) -> bool:\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length, with an option for case sensitivity\"\"\"\n    if case_sensitive:\n        return string.count(substring) == count and len(string) == length\n    else:\n        return string.lower().count(substring.lower()) == count and len(string) == length\ndef g(substring = 'abc', count = 3, length = 9, case_sensitive=False):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * c\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 386, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, substring='abc', count=3, length=9, case_sensitive=False) -> bool:\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length, with an option for case sensitivity\"\"\"\n    if case_sensitive:\n        return string.count(substring) == count and len(string) == length\n    else:\n        return string.lower().count(substring.lower()) == count and len(string) == length", "solution_func": "def g(substring = 'abc', count = 3, length = 9, case_sensitive=False):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * c", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, days: int) -> bool:\n    \"\"\"\n    Check if the given date plus the number of days is equal to today's date.\n    \"\"\"\n    return date + datetime.timedelta(days=days) == datetime.date.today()\n\ndef g(days: int = 0):\n    return datetime.date.today() - datetime.timedelta(days=days)\n\nassert f(g())\n", "emb": null, "idx_generation": 387, "target_skills": null, "problem_func": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, days: int) -> bool:\n    \"\"\"\n    Check if the given date plus the number of days is equal to today's date.\n    \"\"\"\n    return date + datetime.timedelta(days=days) == datetime.date.today()", "solution_func": "def g(days: int = 0):\n    return datetime.date.today() - datetime.timedelta(days=days)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Check if the given values of x, y, and z satisfy the equation x^2 + y^2 = z^2.\n    \"\"\"\n    return math.isclose(x**2 + y**2, z**2)\n\ndef g(x: float = 3, y: float = 4):\n    return math.sqrt(x**2 + y**2)\n\nassert f(g(), 5)\n", "emb": null, "idx_generation": 387, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Check if the given values of x, y, and z satisfy the equation x^2 + y^2 = z^2.\n    \"\"\"\n    return math.isclose(x**2 + y**2, z**2)", "solution_func": "def g(x: float = 3, y: float = 4):\n    return math.sqrt(x**2 + y**2)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\n\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"\n    Check if the given number n is in the list lst.\n    \"\"\"\n    return n in lst\n\ndef g(lst: List[int] = [1, 2, 3, 4, 5]):\n    return random.choice(lst)\n\nassert f(g(), [1, 2, 3, 4, 5])\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 387, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"\n    Check if the given number n is in the list lst.\n    \"\"\"\n    return n in lst", "solution_func": "def g(lst: List[int] = [1, 2, 3, 4, 5]):\n    return random.choice(lst)", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome.\"\"\"\n    return arr == arr[::-1]\ndef g():\n    import random\n    arr = random.sample(range(1, 10), 5)\n    return arr + arr[::-1]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 387, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome.\"\"\"\n    return arr == arr[::-1]", "solution_func": "def g():\n    import random\n    arr = random.sample(range(1, 10), 5)\n    return arr + arr[::-1]", "map_ix": [0, 0, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square.\"\"\"\n    n = len(matrix)\n    target_sum = n * (n * n + 1) // 2\n\n    # Check rows\n    if any(sum(row) != target_sum for row in matrix):\n        return False\n\n    # Check columns\n    if any(sum(column) != target_sum for column in zip(*matrix)):\n        return False\n\n    # Check diagonals\n    if sum(matrix[i][i] for i in range(n)) != target_sum or sum(matrix[i][n-i-1] for i in range(n)) != target_sum:\n        return False\n\n    return True\ndef g():\n    import random\n    n = 3\n    arr = random.sample(range(1, n*n+1), n*n)\n    matrix = [arr[i:i+n] for i in range(0, n*n, n)]\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 387, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square.\"\"\"\n    n = len(matrix)\n    target_sum = n * (n * n + 1) // 2\n\n    # Check rows\n    if any(sum(row) != target_sum for row in matrix):\n        return False\n\n    # Check columns\n    if any(sum(column) != target_sum for column in zip(*matrix)):\n        return False\n\n    # Check diagonals\n    if sum(matrix[i][i] for i in range(n)) != target_sum or sum(matrix[i][n-i-1] for i in range(n)) != target_sum:\n        return False\n\n    return True", "solution_func": "def g():\n    import random\n    n = 3\n    arr = random.sample(range(1, n*n+1), n*n)\n    matrix = [arr[i:i+n] for i in range(0, n*n, n)]\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is a Fibonacci sequence.\"\"\"\n    if len(nums) < 3:\n        return False\n    for i in range(2, len(nums)):\n        if nums[i] != nums[i-1] + nums[i-2]:\n            return False\n    return True\ndef g():\n    import random\n    a, b = random.randint(1, 10), random.randint(1, 10)\n    nums = [a, b]\n    while len(nums) < 10:\n        next_num = nums[-1] + nums[-2]\n        nums.append(next_num)\n    return nums\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 387, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is a Fibonacci sequence.\"\"\"\n    if len(nums) < 3:\n        return False\n    for i in range(2, len(nums)):\n        if nums[i] != nums[i-1] + nums[i-2]:\n            return False\n    return True", "solution_func": "def g():\n    import random\n    a, b = random.randint(1, 10), random.randint(1, 10)\n    nums = [a, b]\n    while len(nums) < 10:\n        next_num = nums[-1] + nums[-2]\n        nums.append(next_num)\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(num_list: List[int], target=100, operation='+') -> bool:\n    \"\"\"Find a combination of numbers in num_list that evaluates to the target value using the given operation.\"\"\"\n    assert operation in ['+', '-', '*', '/']\n    if operation == '+':\n        return sum(num_list) == target\n    elif operation == '-':\n        return abs(sum(num_list) - target) < 1e-06\n    elif operation == '*':\n        result = 1\n        for num in num_list:\n            result *= num\n        return result == target\n    elif operation == '/':\n        result = num_list[0]\n        for num in num_list[1:]:\n            result /= num\n        return abs(result - target) < 1e-06\ndef g(target=100, operation='+'):\n    num_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return num_list\nassert f(g())\n", "emb": null, "idx_generation": 387, "target_skills": null, "problem_func": "from typing import*\ndef f(num_list: List[int], target=100, operation='+') -> bool:\n    \"\"\"Find a combination of numbers in num_list that evaluates to the target value using the given operation.\"\"\"\n    assert operation in ['+', '-', '*', '/']\n    if operation == '+':\n        return sum(num_list) == target\n    elif operation == '-':\n        return abs(sum(num_list) - target) < 1e-06\n    elif operation == '*':\n        result = 1\n        for num in num_list:\n            result *= num\n        return result == target\n    elif operation == '/':\n        result = num_list[0]\n        for num in num_list[1:]:\n            result /= num\n        return abs(result - target) < 1e-06", "solution_func": "def g(target=100, operation='+'):\n    num_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return num_list", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(sentence: str, word='puzzle', case_sensitive=False) -> bool:\n    \"\"\"Check if the given word is present in the sentence.\"\"\"\n    if not case_sensitive:\n        sentence = sentence.lower()\n        word = word.lower()\n    return word in sentence\ndef g(word='puzzle', case_sensitive=False):\n    sentence = \"This is a puzzle to solve\"\n    return sentence\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 387, "target_skills": null, "problem_func": "from typing import*\ndef f(sentence: str, word='puzzle', case_sensitive=False) -> bool:\n    \"\"\"Check if the given word is present in the sentence.\"\"\"\n    if not case_sensitive:\n        sentence = sentence.lower()\n        word = word.lower()\n    return word in sentence", "solution_func": "def g(word='puzzle', case_sensitive=False):\n    sentence = \"This is a puzzle to solve\"\n    return sentence", "map_ix": [0, 0, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target value is present in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(target=0):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 387, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target value is present in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(target=0):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find if there exists a pair of numbers that adds up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target = 100):\n    return [i for i in range(1, target)]\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 387, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find if there exists a pair of numbers that adds up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target = 100):\n    return [i for i in range(1, target)]", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if a subset of nums can add up to the target\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    \n    return subset_sum(nums, target)\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=100):\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 388, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if a subset of nums can add up to the target\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    \n    return subset_sum(nums, target)", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=100):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if any two numbers in nums can add up to the target\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=0):\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 388, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if any two numbers in nums can add up to the target\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=0):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if any three numbers in nums can add up to the target\"\"\"\n    nums.sort()\n    n = len(nums)\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            curr_sum = nums[i] + nums[left] + nums[right]\n            if curr_sum == target:\n                return True\n            elif curr_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=0):\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 388, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if any three numbers in nums can add up to the target\"\"\"\n    nums.sort()\n    n = len(nums)\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            curr_sum = nums[i] + nums[left] + nums[right]\n            if curr_sum == target:\n                return True\n            elif curr_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=0):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are three numbers in the given list that add up to the target\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums))))\ndef g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 18):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 388, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are three numbers in the given list that add up to the target\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums))))", "solution_func": "def g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 18):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], divisor: int) -> bool:\n    \"\"\"Check if there are two numbers in the given list that are divisible by the divisor\"\"\"\n    return any((nums[i] % divisor == 0 and nums[j] % divisor == 0 for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], divisor = 2):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 388, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], divisor: int) -> bool:\n    \"\"\"Check if there are two numbers in the given list that are divisible by the divisor\"\"\"\n    return any((nums[i] % divisor == 0 and nums[j] % divisor == 0 for i in range(len(nums)) for j in range(i+1, len(nums))))", "solution_func": "def g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], divisor = 2):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list contains any duplicate numbers\"\"\"\n    return len(nums) != len(set(nums))\ndef g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 388, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list contains any duplicate numbers\"\"\"\n    return len(nums) != len(set(nums))", "solution_func": "def g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, seq: List[int], target_sum=0) -> bool:\n    \"\"\"Check if there exists a subsequence of 'seq' of length 'n' that adds up to 'target_sum'\"\"\"\n    def find_subsequence(seq, n, target_sum):\n        if n == 0 and target_sum == 0:\n            return True\n        if n == 0 or len(seq) == 0:\n            return False\n        if seq[0] > target_sum:\n            return find_subsequence(seq[1:], n, target_sum)\n        return find_subsequence(seq[1:], n - 1, target_sum - seq[0]) or find_subsequence(seq[1:], n, target_sum)\n\n    return find_subsequence(seq, n, target_sum)\n\ndef g(n=4, seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target_sum=10):\n    return [x for x in seq if x <= target_sum] * n\n\nassert f(g())\n", "emb": null, "idx_generation": 388, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, seq: List[int], target_sum=0) -> bool:\n    \"\"\"Check if there exists a subsequence of 'seq' of length 'n' that adds up to 'target_sum'\"\"\"\n    def find_subsequence(seq, n, target_sum):\n        if n == 0 and target_sum == 0:\n            return True\n        if n == 0 or len(seq) == 0:\n            return False\n        if seq[0] > target_sum:\n            return find_subsequence(seq[1:], n, target_sum)\n        return find_subsequence(seq[1:], n - 1, target_sum - seq[0]) or find_subsequence(seq[1:], n, target_sum)\n\n    return find_subsequence(seq, n, target_sum)", "solution_func": "def g(n=4, seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target_sum=10):\n    return [x for x in seq if x <= target_sum] * n", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(seq: List[int], target_length=4, target_sum=10) -> bool:\n    \"\"\"Find a subsequence of 'seq' with length 'target_length' that adds up to 'target_sum'\"\"\"\n    def find_subsequence(seq, target_length, target_sum):\n        if target_length == 0 and target_sum == 0:\n            return True\n        if target_length == 0 or len(seq) == 0:\n            return False\n        if seq[0] > target_sum:\n            return find_subsequence(seq[1:], target_length, target_sum)\n        return find_subsequence(seq[1:], target_length - 1, target_sum - seq[0]) or find_subsequence(seq[1:], target_length, target_sum)\n\n    return find_subsequence(seq, target_length, target_sum)\n\ndef g(target_length=4, target_sum=10):\n    seq = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return [x for x in seq if x <= target_sum][:target_length]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 388, "target_skills": null, "problem_func": "from typing import*\ndef f(seq: List[int], target_length=4, target_sum=10) -> bool:\n    \"\"\"Find a subsequence of 'seq' with length 'target_length' that adds up to 'target_sum'\"\"\"\n    def find_subsequence(seq, target_length, target_sum):\n        if target_length == 0 and target_sum == 0:\n            return True\n        if target_length == 0 or len(seq) == 0:\n            return False\n        if seq[0] > target_sum:\n            return find_subsequence(seq[1:], target_length, target_sum)\n        return find_subsequence(seq[1:], target_length - 1, target_sum - seq[0]) or find_subsequence(seq[1:], target_length, target_sum)\n\n    return find_subsequence(seq, target_length, target_sum)", "solution_func": "def g(target_length=4, target_sum=10):\n    seq = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return [x for x in seq if x <= target_sum][:target_length]", "map_ix": [0, 0, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(seq: List[int], target_length=4) -> bool:\n    \"\"\"Check if there exists a subsequence of 'seq' with length 'target_length' that is strictly increasing\"\"\"\n    for i in range(len(seq) - target_length + 1):\n        if seq[i:i+target_length] == sorted(seq[i:i+target_length]):\n            return True\n    return False\n\ndef g(target_length=4):\n    seq = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return seq[:target_length]\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 388, "target_skills": null, "problem_func": "from typing import*\ndef f(seq: List[int], target_length=4) -> bool:\n    \"\"\"Check if there exists a subsequence of 'seq' with length 'target_length' that is strictly increasing\"\"\"\n    for i in range(len(seq) - target_length + 1):\n        if seq[i:i+target_length] == sorted(seq[i:i+target_length]):\n            return True\n    return False", "solution_func": "def g(target_length=4):\n    seq = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return seq[:target_length]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, sub='world') -> bool:\n    \"\"\"Check if a substring is present in a string\"\"\"\n    return sub in s\ndef g(sub='world'):\n    return \"hello \" + sub\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 388, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, sub='world') -> bool:\n    \"\"\"Check if a substring is present in a string\"\"\"\n    return sub in s", "solution_func": "def g(sub='world'):\n    return \"hello \" + sub", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, chars='aeiou', target='a e i o u') -> bool:\n    \"\"\"\n    Find a string that, when a given set of characters is replaced, has a given result.\n    \"\"\"\n    return ''.join((c if c not in chars else ' ' for c in s)) == target\ndef g(chars = 'aeiou', target = 'a e i o u'):\n    return ''.join((' ' if c in chars else c for c in target))\nassert f(g())\n", "emb": null, "idx_generation": 389, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, chars='aeiou', target='a e i o u') -> bool:\n    \"\"\"\n    Find a string that, when a given set of characters is replaced, has a given result.\n    \"\"\"\n    return ''.join((c if c not in chars else ' ' for c in s)) == target", "solution_func": "def g(chars = 'aeiou', target = 'a e i o u'):\n    return ''.join((' ' if c in chars else c for c in target))", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(grid: List[List[str]], word='python') -> bool:\n    \"\"\"\n    Given a grid of letters, find if a given word can be formed by connecting adjacent letters horizontally, vertically, or diagonally.\n    \"\"\"\n    rows = len(grid)\n    cols = len(grid[0])\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0), (1, 1), (-1, -1), (1, -1), (-1, 1)]\n    def dfs(i, j, idx):\n        if idx == len(word):\n            return True\n        if i < 0 or i >= rows or j < 0 or j >= cols or grid[i][j] != word[idx]:\n            return False\n        temp = grid[i][j]\n        grid[i][j] = ''\n        for dx, dy in directions:\n            if dfs(i + dx, j + dy, idx + 1):\n                return True\n        grid[i][j] = temp\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if dfs(i, j, 0):\n                return True\n    return False\ndef g(grid = [['p', 'y', 't', 'h', 'o', 'n'], ['o', 'a', 's', 'd', 'f', 'g'], ['h', 'j', 'k', 'l', 'z', 'x'], ['c', 'v', 'b', 'n', 'm', 'q']]):\n    word = \"python\"\n    rows = len(grid)\n    cols = len(grid[0])\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == word[0]:\n                if f(grid, word):\n                    return True\n    return False\nassert f(g())\n", "emb": null, "idx_generation": 389, "target_skills": null, "problem_func": "from typing import*\ndef f(grid: List[List[str]], word='python') -> bool:\n    \"\"\"\n    Given a grid of letters, find if a given word can be formed by connecting adjacent letters horizontally, vertically, or diagonally.\n    \"\"\"\n    rows = len(grid)\n    cols = len(grid[0])\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0), (1, 1), (-1, -1), (1, -1), (-1, 1)]\n    def dfs(i, j, idx):\n        if idx == len(word):\n            return True\n        if i < 0 or i >= rows or j < 0 or j >= cols or grid[i][j] != word[idx]:\n            return False\n        temp = grid[i][j]\n        grid[i][j] = ''\n        for dx, dy in directions:\n            if dfs(i + dx, j + dy, idx + 1):\n                return True\n        grid[i][j] = temp\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if dfs(i, j, 0):\n                return True\n    return False", "solution_func": "def g(grid = [['p', 'y', 't', 'h', 'o', 'n'], ['o', 'a', 's', 'd', 'f', 'g'], ['h', 'j', 'k', 'l', 'z', 'x'], ['c', 'v', 'b', 'n', 'm', 'q']]):\n    word = \"python\"\n    rows = len(grid)\n    cols = len(grid[0])\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == word[0]:\n                if f(grid, word):\n                    return True\n    return False", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, k=3, m=5) -> bool:\n    \"\"\"\n    Given a number n, determine if it can be expressed as a sum of k non-negative integers less than or equal to m.\n    \"\"\"\n    def helper(n, k, m):\n        if k == 1:\n            return n <= m\n        for i in range(min(n, m)+1):\n            if helper(n-i, k-1, m):\n                return True\n        return False\n    return helper(n, k, m)\ndef g(k = 3, m = 5):\n    n = 8\n    return n\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 389, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, k=3, m=5) -> bool:\n    \"\"\"\n    Given a number n, determine if it can be expressed as a sum of k non-negative integers less than or equal to m.\n    \"\"\"\n    def helper(n, k, m):\n        if k == 1:\n            return n <= m\n        for i in range(min(n, m)+1):\n            if helper(n-i, k-1, m):\n                return True\n        return False\n    return helper(n, k, m)", "solution_func": "def g(k = 3, m = 5):\n    n = 8\n    return n", "map_ix": [0, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if the string s contains at least n vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n        if count >= n:\n            return True\n    return False\n\ndef g(n=5):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return ''.join(vowels[:n])\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 389, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if the string s contains at least n vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n        if count >= n:\n            return True\n    return False", "solution_func": "def g(n=5):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return ''.join(vowels[:n])", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the number n is divisible by all elements in the list a\"\"\"\n    for num in a:\n        if n % num != 0:\n            return False\n    return True\n\ndef g(a=[1, 2, 3, 4, 5]):\n    n = 1\n    for num in a:\n        n *= num\n    return n\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 389, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the number n is divisible by all elements in the list a\"\"\"\n    for num in a:\n        if n % num != 0:\n            return False\n    return True", "solution_func": "def g(a=[1, 2, 3, 4, 5]):\n    n = 1\n    for num in a:\n        n *= num\n    return n", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\n\ndef f(a: list, b: list, n=10) -> bool:\n    \"\"\"Check if the sum of the first n elements in list a is greater than the sum of the first n elements in list b\"\"\"\n    return sum(a[:n]) > sum(b[:n])\n\ndef g(n=10):\n    a = random.sample(range(100), n)\n    b = random.sample(range(100), n)\n    return a, b\n\nassert f(*g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 389, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(a: list, b: list, n=10) -> bool:\n    \"\"\"Check if the sum of the first n elements in list a is greater than the sum of the first n elements in list b\"\"\"\n    return sum(a[:n]) > sum(b[:n])", "solution_func": "def g(n=10):\n    a = random.sample(range(100), n)\n    b = random.sample(range(100), n)\n    return a, b", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float) -> bool:\n    \"\"\"Check if the sum of the squares of x, y, and z is equal to the square of the largest number\"\"\"\n    max_value = max(x, y, z)\n    return math.isclose(x**2 + y**2 + z**2, max_value**2)\n\ndef g(x: float = 3, y: float = 4, z: float = 5):\n    return x, y, z\n\nassert f(*g())\n", "emb": null, "idx_generation": 389, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float) -> bool:\n    \"\"\"Check if the sum of the squares of x, y, and z is equal to the square of the largest number\"\"\"\n    max_value = max(x, y, z)\n    return math.isclose(x**2 + y**2 + z**2, max_value**2)", "solution_func": "def g(x: float = 3, y: float = 4, z: float = 5):\n    return x, y, z", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s1: str, s2: str, n: int) -> bool:\n    \"\"\"Check if the concatenation of s1 and s2 is equal to s2 repeated n times\"\"\"\n    return s1 + s2 == s2 * n\n\ndef g(s1: str = \"hello\", s2: str = \"world\", n: int = 3):\n    return s1, s2, n\n\nassert f(*g())\n", "emb": null, "idx_generation": 389, "target_skills": null, "problem_func": "from typing import*\ndef f(s1: str, s2: str, n: int) -> bool:\n    \"\"\"Check if the concatenation of s1 and s2 is equal to s2 repeated n times\"\"\"\n    return s1 + s2 == s2 * n", "solution_func": "def g(s1: str = \"hello\", s2: str = \"world\", n: int = 3):\n    return s1, s2, n", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if all elements in the list are divisible by n\"\"\"\n    return all(x % n == 0 for x in lst)\n\ndef g(n: int = 2, lst: List[int] = [4, 8, 12, 16]):\n    return n, lst\n\nassert f(*g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 389, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if all elements in the list are divisible by n\"\"\"\n    return all(x % n == 0 for x in lst)", "solution_func": "def g(n: int = 2, lst: List[int] = [4, 8, 12, 16]):\n    return n, lst", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(string: str, num: int, char: str, case_sensitive=True) -> bool:\n    \"\"\"Count the number of occurrences of a character in a string, optionally case-sensitive\"\"\"\n    if case_sensitive:\n        return string.count(char) == num\n    else:\n        return string.lower().count(char.lower()) == num\ndef g(string=\"Hello, World!\", num=3, char=\"o\", case_sensitive=True):\n    return string, num, char, case_sensitive\nassert f(*g())\n", "emb": null, "idx_generation": 389, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, num: int, char: str, case_sensitive=True) -> bool:\n    \"\"\"Count the number of occurrences of a character in a string, optionally case-sensitive\"\"\"\n    if case_sensitive:\n        return string.count(char) == num\n    else:\n        return string.lower().count(char.lower()) == num", "solution_func": "def g(string=\"Hello, World!\", num=3, char=\"o\", case_sensitive=True):\n    return string, num, char, case_sensitive", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: List[int], target=100) -> bool:\n    \"\"\"Find a list of integers that sum up to the target number.\"\"\"\n    return sum(x) == target\ndef g(target=100):\n    return [i for i in range(1, target+1)]\nassert f(g())\n", "emb": null, "idx_generation": 390, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], target=100) -> bool:\n    \"\"\"Find a list of integers that sum up to the target number.\"\"\"\n    return sum(x) == target", "solution_func": "def g(target=100):\n    return [i for i in range(1, target+1)]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=25) -> bool:\n    \"\"\"Find a number that when squared is equal to a.\"\"\"\n    return math.isclose(x ** 2, a)\ndef g(a=25):\n    return math.sqrt(a)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 390, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, a=25) -> bool:\n    \"\"\"Find a number that when squared is equal to a.\"\"\"\n    return math.isclose(x ** 2, a)", "solution_func": "def g(a=25):\n    return math.sqrt(a)", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: int, y: int, z: int, a=100, b=200, c=300) -> bool:\n    \"\"\"Check if the sum of x, y, and z is equal to the sum of a, b, and c.\"\"\"\n    return x + y + z == a + b + c\ndef g(a=100, b=200, c=300):\n    x = (a + b + c) // 3\n    y = a - x\n    z = b - x\n    return x, y, z\nassert f(*g())\n", "emb": null, "idx_generation": 390, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, y: int, z: int, a=100, b=200, c=300) -> bool:\n    \"\"\"Check if the sum of x, y, and z is equal to the sum of a, b, and c.\"\"\"\n    return x + y + z == a + b + c", "solution_func": "def g(a=100, b=200, c=300):\n    x = (a + b + c) // 3\n    y = a - x\n    z = b - x\n    return x, y, z", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, a=2022, b=10) -> bool:\n    \"\"\"Check if n is a multiple of b and a is divisible by n\"\"\"\n    return n % b == 0 and a % n == 0\ndef g(a=2022, b=10):\n    if a % b == 0:\n        return b\n    else:\n        return a % b\nassert f(g())\n", "emb": null, "idx_generation": 390, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=2022, b=10) -> bool:\n    \"\"\"Check if n is a multiple of b and a is divisible by n\"\"\"\n    return n % b == 0 and a % n == 0", "solution_func": "def g(a=2022, b=10):\n    if a % b == 0:\n        return b\n    else:\n        return a % b", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Check if there is a subset of arr that sums up to the target\"\"\"\n    dp = [False] * (target + 1)\n    dp[0] = True\n    for num in arr:\n        for i in range(target, num - 1, -1):\n            dp[i] |= dp[i - num]\n    return dp[target]\ndef g(target=100):\n    arr = []\n    while sum(arr) < target:\n        num = random.randint(1, target)\n        arr.append(num)\n    return arr\nassert f(g())\n", "emb": null, "idx_generation": 390, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Check if there is a subset of arr that sums up to the target\"\"\"\n    dp = [False] * (target + 1)\n    dp[0] = True\n    for num in arr:\n        for i in range(target, num - 1, -1):\n            dp[i] |= dp[i - num]\n    return dp[target]", "solution_func": "def g(target=100):\n    arr = []\n    while sum(arr) < target:\n        num = random.randint(1, target)\n        arr.append(num)\n    return arr", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, a=5, b=3) -> bool:\n    \"\"\"Check if the string s contains more a's than b's\"\"\"\n    count_a = s.count('a')\n    count_b = s.count('b')\n    return count_a > count_b\ndef g(a=5, b=3):\n    s = 'a' * a + 'b' * b\n    return s\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 390, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, a=5, b=3) -> bool:\n    \"\"\"Check if the string s contains more a's than b's\"\"\"\n    count_a = s.count('a')\n    count_b = s.count('b')\n    return count_a > count_b", "solution_func": "def g(a=5, b=3):\n    s = 'a' * a + 'b' * b\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists two numbers in a list that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums: List[int], target=0):\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 390, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists two numbers in a list that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums: List[int], target=0):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, substring=\"\") -> bool:\n    \"\"\"Check if a string contains a specific substring.\"\"\"\n    return substring in s\n\ndef g(s: str, substring=\"\"):\n    return s\n\nassert f(g())\n", "emb": null, "idx_generation": 390, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substring=\"\") -> bool:\n    \"\"\"Check if a string contains a specific substring.\"\"\"\n    return substring in s", "solution_func": "def g(s: str, substring=\"\"):\n    return s", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if a target value is present in a 2D matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix: List[List[int]], target=0):\n    return matrix\n\nassert f(g())\n", "emb": null, "idx_generation": 390, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if a target value is present in a 2D matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(matrix: List[List[int]], target=0):\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Check if the target value is present in the given matrix.\"\"\"\n\n    def binary_search(arr: List[int], target: int) -> bool:\n        left, right = 0, len(arr) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if arr[mid] == target:\n                return True\n            elif arr[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False\n\n    m, n = len(matrix), len(matrix[0])\n    row = 0\n    col = n - 1\n    while row < m and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            row += 1\n        else:\n            col -= 1\n    return False\n\ndef g(matrix: List[List[int]], target: int):\n    return f(matrix, target)\n\nassert f(g()) == True", "emb": null, "idx_generation": 390, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Check if the target value is present in the given matrix.\"\"\"\n\n    def binary_search(arr: List[int], target: int) -> bool:\n        left, right = 0, len(arr) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if arr[mid] == target:\n                return True\n            elif arr[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False\n\n    m, n = len(matrix), len(matrix[0])\n    row = 0\n    col = n - 1\n    while row < m and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            row += 1\n        else:\n            col -= 1\n    return False", "solution_func": "def g(matrix: List[List[int]], target: int):\n    return f(matrix, target)", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target_sum=100, num_elements=3) -> bool:\n    \"\"\"Find a subset of num_elements numbers from the list that adds up to the target_sum\"\"\"\n    from itertools import combinations\n    for c in combinations(nums, num_elements):\n        if sum(c) == target_sum:\n            return True\n    return False\ndef g(target_sum = 100, num_elements = 3):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 391, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target_sum=100, num_elements=3) -> bool:\n    \"\"\"Find a subset of num_elements numbers from the list that adds up to the target_sum\"\"\"\n    from itertools import combinations\n    for c in combinations(nums, num_elements):\n        if sum(c) == target_sum:\n            return True\n    return False", "solution_func": "def g(target_sum = 100, num_elements = 3):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(words: List[str], target_length=10) -> bool:\n    \"\"\"Check if there is a word in the list whose length is equal to the target_length\"\"\"\n    return any(len(word) == target_length for word in words)\ndef g(target_length = 10):\n    words = ['apple', 'banana', 'cherry', 'dragonfruit', 'elderberry']\n    return words\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 391, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], target_length=10) -> bool:\n    \"\"\"Check if there is a word in the list whose length is equal to the target_length\"\"\"\n    return any(len(word) == target_length for word in words)", "solution_func": "def g(target_length = 10):\n    words = ['apple', 'banana', 'cherry', 'dragonfruit', 'elderberry']\n    return words", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_row=2, target_sum=10) -> bool:\n    \"\"\"Check if the sum of the numbers in the target_row of the matrix is equal to the target_sum\"\"\"\n    row = matrix[target_row]\n    return sum(row) == target_sum\ndef g(target_row = 2, target_sum = 10):\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 391, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_row=2, target_sum=10) -> bool:\n    \"\"\"Check if the sum of the numbers in the target_row of the matrix is equal to the target_sum\"\"\"\n    row = matrix[target_row]\n    return sum(row) == target_sum", "solution_func": "def g(target_row = 2, target_sum = 10):\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n: int = 3) -> bool:\n    \"\"\"Check if a string s contains a palindrome of length n.\"\"\"\n    for i in range(len(s)-n+1):\n        if s[i:i+n] == s[i:i+n][::-1]:\n            return True\n    return False\n\ndef g(s: str = 'racecar'):\n    return s\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 391, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n: int = 3) -> bool:\n    \"\"\"Check if a string s contains a palindrome of length n.\"\"\"\n    for i in range(len(s)-n+1):\n        if s[i:i+n] == s[i:i+n][::-1]:\n            return True\n    return False", "solution_func": "def g(s: str = 'racecar'):\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if a list of numbers nums contains a pair of numbers whose sum is even.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if (nums[i] + nums[j]) % 2 == 0:\n                return True\n    return False\n\ndef g():\n    return [1, 3, 5, 7, 2]\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 391, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if a list of numbers nums contains a pair of numbers whose sum is even.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if (nums[i] + nums[j]) % 2 == 0:\n                return True\n    return False", "solution_func": "def g():\n    return [1, 3, 5, 7, 2]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], k: int = 0) -> bool:\n    \"\"\"Check if the sum of each row in a square matrix is equal to k.\"\"\"\n    for row in matrix:\n        if sum(row) != k:\n            return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g(), 15)\n", "emb": null, "idx_generation": 391, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], k: int = 0) -> bool:\n    \"\"\"Check if the sum of each row in a square matrix is equal to k.\"\"\"\n    for row in matrix:\n        if sum(row) != k:\n            return False\n    return True", "solution_func": "def g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: List[int], t=200, a=0, e=4, s=2) -> bool:\n    \"\"\"Check if the sum of a sublist equals a target value.\"\"\"\n    return sum(x[a:e:s]) == t\ndef g(t = 200, a = 0, e = 4, s = 2):\n    x = [10, 20, 30, 40, 50, 60]\n    return x\nassert f(g())\n", "emb": null, "idx_generation": 391, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], t=200, a=0, e=4, s=2) -> bool:\n    \"\"\"Check if the sum of a sublist equals a target value.\"\"\"\n    return sum(x[a:e:s]) == t", "solution_func": "def g(t = 200, a = 0, e = 4, s = 2):\n    x = [10, 20, 30, 40, 50, 60]\n    return x", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: List[int]) -> bool:\n    \"\"\"Check if the list is a palindrome.\"\"\"\n    return x == x[::-1]\ndef g():\n    return [1, 2, 3, 2, 1]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 391, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int]) -> bool:\n    \"\"\"Check if the list is a palindrome.\"\"\"\n    return x == x[::-1]", "solution_func": "def g():\n    return [1, 2, 3, 2, 1]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: List[int]) -> bool:\n    \"\"\"Check if the list contains duplicate elements.\"\"\"\n    return len(x) != len(set(x))\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n", "emb": null, "idx_generation": 391, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int]) -> bool:\n    \"\"\"Check if the list contains duplicate elements.\"\"\"\n    return len(x) != len(set(x))", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(lst: List[int], target=15) -> bool:\n    \"\"\"\n    Check if there exists a sublist in lst that sums up to the target value.\n    Return True if such sublist exists, otherwise return False.\n    \"\"\"\n    n = len(lst)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if sum(lst[i:j]) == target:\n                return True\n    return False\ndef g(target=15):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 391, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int], target=15) -> bool:\n    \"\"\"\n    Check if there exists a sublist in lst that sums up to the target value.\n    Return True if such sublist exists, otherwise return False.\n    \"\"\"\n    n = len(lst)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if sum(lst[i:j]) == target:\n                return True\n    return False", "solution_func": "def g(target=15):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, nums=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"\n    Find the minimum number of prime numbers from the list 'nums' that sum up to 'n'.\n    \"\"\"\n    def prime_sum(n, nums):\n        if n == 0:\n            return []\n        if n < 0 or not nums:\n            return None\n        with_num = prime_sum(n - nums[0], nums)\n        without_num = prime_sum(n, nums[1:])\n        if with_num is not None and (without_num is None or len(with_num) < len(without_num)):\n            return [nums[0]] + with_num\n        return without_num\n    return prime_sum(n, nums) is not None\n\ndef g(nums=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    def prime_sum(n, nums):\n        if n == 0:\n            return []\n        if n < 0 or not nums:\n            return None\n        with_num = prime_sum(n - nums[0], nums)\n        without_num = prime_sum(n, nums[1:])\n        if with_num is not None and (without_num is None or len(with_num) < len(without_num)):\n            return [nums[0]] + with_num\n        return without_num\n    return prime_sum(n, nums)\n\nassert f(g())\n", "emb": null, "idx_generation": 392, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"\n    Find the minimum number of prime numbers from the list 'nums' that sum up to 'n'.\n    \"\"\"\n    def prime_sum(n, nums):\n        if n == 0:\n            return []\n        if n < 0 or not nums:\n            return None\n        with_num = prime_sum(n - nums[0], nums)\n        without_num = prime_sum(n, nums[1:])\n        if with_num is not None and (without_num is None or len(with_num) < len(without_num)):\n            return [nums[0]] + with_num\n        return without_num\n    return prime_sum(n, nums) is not None", "solution_func": "def g(nums=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    def prime_sum(n, nums):\n        if n == 0:\n            return []\n        if n < 0 or not nums:\n            return None\n        with_num = prime_sum(n - nums[0], nums)\n        without_num = prime_sum(n, nums[1:])\n        if with_num is not None and (without_num is None or len(with_num) < len(without_num)):\n            return [nums[0]] + with_num\n        return without_num\n    return prime_sum(n, nums)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, nums=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"\n    Find the number of unique combinations of prime numbers from the list 'nums' that sum up to 'n'.\n    \"\"\"\n    def prime_sum(n, nums):\n        if n == 0:\n            return 1\n        if n < 0 or not nums:\n            return 0\n        return prime_sum(n - nums[0], nums) + prime_sum(n, nums[1:])\n    return prime_sum(n, nums)\n\ndef g(nums=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    def prime_sum(n, nums):\n        if n == 0:\n            return 1\n        if n < 0 or not nums:\n            return 0\n        return prime_sum(n - nums[0], nums) + prime_sum(n, nums[1:])\n    return prime_sum(n, nums)\n\nassert f(g())\n", "emb": null, "idx_generation": 392, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"\n    Find the number of unique combinations of prime numbers from the list 'nums' that sum up to 'n'.\n    \"\"\"\n    def prime_sum(n, nums):\n        if n == 0:\n            return 1\n        if n < 0 or not nums:\n            return 0\n        return prime_sum(n - nums[0], nums) + prime_sum(n, nums[1:])\n    return prime_sum(n, nums)", "solution_func": "def g(nums=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    def prime_sum(n, nums):\n        if n == 0:\n            return 1\n        if n < 0 or not nums:\n            return 0\n        return prime_sum(n - nums[0], nums) + prime_sum(n, nums[1:])\n    return prime_sum(n, nums)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers and a target number, find a pair of numbers in the list that sums up to the target.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=7):\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\nassert f(g())\n", "emb": null, "idx_generation": 392, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers and a target number, find a pair of numbers in the list that sums up to the target.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=7):\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target=1000) -> bool:\n    \"\"\"\n    Given a list of integers, find a subset of the list such that the sum of the subset is equal to the target value.\n    Return True if such a subset exists, and False otherwise.\n    \"\"\"\n    n = len(arr)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(target + 1):\n            if j >= arr[i - 1]:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n\n    return dp[n][target]\n\ndef g(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return arr\n\nassert f(g())\n", "emb": null, "idx_generation": 392, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=1000) -> bool:\n    \"\"\"\n    Given a list of integers, find a subset of the list such that the sum of the subset is equal to the target value.\n    Return True if such a subset exists, and False otherwise.\n    \"\"\"\n    n = len(arr)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(target + 1):\n            if j >= arr[i - 1]:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n\n    return dp[n][target]", "solution_func": "def g(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return arr", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, k=100) -> bool:\n    \"\"\"\n    Given a string s, determine if it can be divided into k equal parts.\n    Return True if it is possible, and False otherwise.\n    \"\"\"\n    n = len(s)\n    if n % k != 0:\n        return False\n\n    part_len = n // k\n    for i in range(0, n, part_len):\n        if s[i:i+part_len] != s[:part_len]:\n            return False\n\n    return True\n\ndef g(s = 'abcdefghabcdefghabcdefghabcdefghabcdefghabcdefghabcdefghabcdefghabcdefghabcdefgh'):\n    return s\n\nassert f(g())\n", "emb": null, "idx_generation": 392, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, k=100) -> bool:\n    \"\"\"\n    Given a string s, determine if it can be divided into k equal parts.\n    Return True if it is possible, and False otherwise.\n    \"\"\"\n    n = len(s)\n    if n % k != 0:\n        return False\n\n    part_len = n // k\n    for i in range(0, n, part_len):\n        if s[i:i+part_len] != s[:part_len]:\n            return False\n\n    return True", "solution_func": "def g(s = 'abcdefghabcdefghabcdefghabcdefghabcdefghabcdefghabcdefghabcdefghabcdefghabcdefgh'):\n    return s", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"\n    Given a list of integers, find all pairs of numbers that sum up to the target value.\n    Return True if at least one pair exists, and False otherwise.\n    \"\"\"\n    num_set = set()\n    for num in arr:\n        diff = target - num\n        if diff in num_set:\n            return True\n        num_set.add(num)\n\n    return False\n\ndef g(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return arr\n\nassert f(g())\n", "emb": null, "idx_generation": 392, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"\n    Given a list of integers, find all pairs of numbers that sum up to the target value.\n    Return True if at least one pair exists, and False otherwise.\n    \"\"\"\n    num_set = set()\n    for num in arr:\n        diff = target - num\n        if diff in num_set:\n            return True\n        num_set.add(num)\n\n    return False", "solution_func": "def g(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return arr", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=17) -> bool:\n    \"\"\"\n    Given a list of non-negative integers and a target integer, determine if there are three integers in the list\n    that sum up to the target.\n\n    Sample Input:\n    `[1, 5, 9, 12, 15]`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    nums.sort()\n    n = len(nums)\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = nums[i] + nums[left] + nums[right]\n            if current_sum == target:\n                return True\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False\n\ndef g(nums=[1, 5, 9, 12, 15], target=17):\n    return f(nums, target)\nassert f(g())\n", "emb": null, "idx_generation": 392, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=17) -> bool:\n    \"\"\"\n    Given a list of non-negative integers and a target integer, determine if there are three integers in the list\n    that sum up to the target.\n\n    Sample Input:\n    `[1, 5, 9, 12, 15]`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    nums.sort()\n    n = len(nums)\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = nums[i] + nums[left] + nums[right]\n            if current_sum == target:\n                return True\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False", "solution_func": "def g(nums=[1, 5, 9, 12, 15], target=17):\n    return f(nums, target)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, s='abccba', target=3) -> bool:\n    \"\"\"\n    Given a string consisting of lowercase letters, determine if there is a substring of length at least n that is a\n    palindrome.\n\n    Sample Input:\n    `4, 'abccba'`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    def is_palindrome(string):\n        return string == string[::-1]\n\n    for i in range(len(s) - n + 1):\n        if is_palindrome(s[i:i+n]):\n            return True\n    return False\n\ndef g(s='abccba', target=3):\n    return f(target, s, target)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 392, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, s='abccba', target=3) -> bool:\n    \"\"\"\n    Given a string consisting of lowercase letters, determine if there is a substring of length at least n that is a\n    palindrome.\n\n    Sample Input:\n    `4, 'abccba'`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    def is_palindrome(string):\n        return string == string[::-1]\n\n    for i in range(len(s) - n + 1):\n        if is_palindrome(s[i:i+n]):\n            return True\n    return False", "solution_func": "def g(s='abccba', target=3):\n    return f(target, s, target)", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=8) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer, determine if there are two distinct indices i and j in the list such\n    that nums[i] + nums[j] = target.\n\n    Sample Input:\n    `[2, 4, 6, 8, 10]`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums=[2, 4, 6, 8, 10], target=8):\n    return f(nums, target)\nassert f(g())\n", "emb": null, "idx_generation": 392, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=8) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer, determine if there are two distinct indices i and j in the list such\n    that nums[i] + nums[j] = target.\n\n    Sample Input:\n    `[2, 4, 6, 8, 10]`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(nums=[2, 4, 6, 8, 10], target=8):\n    return f(nums, target)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=25) -> bool:\n    \"\"\"Check if a number is a perfect square and its square root is less than or equal to n.\"\"\"\n    return math.isqrt(a) ** 2 == a and math.isqrt(a) <= n\n\ndef g(a=25):\n    return a ** 0.5\n\nassert f(g(), n=5)\n", "emb": null, "idx_generation": 392, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, a=25) -> bool:\n    \"\"\"Check if a number is a perfect square and its square root is less than or equal to n.\"\"\"\n    return math.isqrt(a) ** 2 == a and math.isqrt(a) <= n", "solution_func": "def g(a=25):\n    return a ** 0.5", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums = [1, 2, 3, 4, 5], target = 9):\n    return nums, target\n\nassert f(*g())\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 393, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums = [1, 2, 3, 4, 5], target = 9):\n    return nums, target", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target: str) -> bool:\n    \"\"\"Check if the target string is a substring of the given string.\"\"\"\n    return target in s\n\ndef g(s = \"Hello, world!\", target = \"world\"):\n    return s, target\n\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 393, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target: str) -> bool:\n    \"\"\"Check if the target string is a substring of the given string.\"\"\"\n    return target in s", "solution_func": "def g(s = \"Hello, world!\", target = \"world\"):\n    return s, target", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there are three numbers in the list that add up to the target.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            for k in range(j + 1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g(arr = [1, 2, 3, 4, 5], target = 10):\n    return arr, target\n\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 393, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there are three numbers in the list that add up to the target.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            for k in range(j + 1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False", "solution_func": "def g(arr = [1, 2, 3, 4, 5], target = 10):\n    return arr, target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int = 0, n: int = 2) -> bool:\n    \"\"\"Find a pair of numbers whose sum is equal to the target value\"\"\"\n    return any((x + y == target for x in nums for y in nums if x != y)) and len(nums) >= 2\ndef g(target: int = 0, n: int = 2):\n    from itertools import combinations\n    return list(combinations(range(-n, n+1), 2))[target]\nassert f(g())\n", "emb": null, "idx_generation": 393, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int = 0, n: int = 2) -> bool:\n    \"\"\"Find a pair of numbers whose sum is equal to the target value\"\"\"\n    return any((x + y == target for x in nums for y in nums if x != y)) and len(nums) >= 2", "solution_func": "def g(target: int = 0, n: int = 2):\n    from itertools import combinations\n    return list(combinations(range(-n, n+1), 2))[target]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(chars: List[str], target: str = 'hello', n: int = 1) -> bool:\n    \"\"\"Check if the target string can be constructed from a combination of the characters\"\"\"\n    return ''.join(chars).count(target) >= n\ndef g(target: str = 'hello', n: int = 1):\n    return list(target * n)\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 393, "target_skills": null, "problem_func": "from typing import*\ndef f(chars: List[str], target: str = 'hello', n: int = 1) -> bool:\n    \"\"\"Check if the target string can be constructed from a combination of the characters\"\"\"\n    return ''.join(chars).count(target) >= n", "solution_func": "def g(target: str = 'hello', n: int = 1):\n    return list(target * n)", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int = 0, n: int = 3) -> bool:\n    \"\"\"Find a combination of n numbers whose sum is equal to the target value\"\"\"\n    return any((sum(c) == target for c in combinations(nums, n)))\ndef g(target: int = 0, n: int = 3):\n    from itertools import combinations\n    return list(range(-n, n+1))\nassert f(g())\n", "emb": null, "idx_generation": 393, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int = 0, n: int = 3) -> bool:\n    \"\"\"Find a combination of n numbers whose sum is equal to the target value\"\"\"\n    return any((sum(c) == target for c in combinations(nums, n)))", "solution_func": "def g(target: int = 0, n: int = 3):\n    from itertools import combinations\n    return list(range(-n, n+1))", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there are three numbers in the list that sum up to the target value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\ndef g(arr = [1, 2, 3, 4, 5], target = 9):\n    return arr\nassert f(g())\n", "emb": null, "idx_generation": 393, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there are three numbers in the list that sum up to the target value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False", "solution_func": "def g(arr = [1, 2, 3, 4, 5], target = 9):\n    return arr", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(sentence: str, letter: str) -> bool:\n    \"\"\"Check if the letter appears the same number of times in the sentence as it does in its uppercase form\"\"\"\n    count_upper = sentence.count(letter.upper())\n    count_lower = sentence.count(letter.lower())\n    return count_upper == count_lower\ndef g(sentence = \"The quick brown fox jumps over the lazy dog.\", letter = \"o\"):\n    return sentence\nassert f(g())\n", "emb": null, "idx_generation": 393, "target_skills": null, "problem_func": "from typing import*\ndef f(sentence: str, letter: str) -> bool:\n    \"\"\"Check if the letter appears the same number of times in the sentence as it does in its uppercase form\"\"\"\n    count_upper = sentence.count(letter.upper())\n    count_lower = sentence.count(letter.lower())\n    return count_upper == count_lower", "solution_func": "def g(sentence = \"The quick brown fox jumps over the lazy dog.\", letter = \"o\"):\n    return sentence", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target value\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(nums = [1, 2, 3, 4, 5], target = 9):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 393, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target value\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(nums = [1, 2, 3, 4, 5], target = 9):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the given string is a palindrome\"\"\"\n    return s[:n] == s[:n][::-1]\ndef g(n=3):\n    return str(n) + str(n) + str(n)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 393, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the given string is a palindrome\"\"\"\n    return s[:n] == s[:n][::-1]", "solution_func": "def g(n=3):\n    return str(n) + str(n) + str(n)", "map_ix": [0, 0, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: str, s=['0', '@', 'R', 'k', '$', '$', 't', '0', '3', '#', '!', 'a', 'w', 'k', 'q', 'H', '-', 'm'], n=16) -> bool:\n    \"\"\"Check if the string x is a palindrome\"\"\"\n    return len(x) == n and x == x[::-1]\ndef g(s = ['0', '@', 'R', 'k', '$', '$', 't', '0', '3', '#', '!', 'a', 'w', 'k', 'q', 'H', '-', 'm'], n = 16):\n    return ''.join([s[i] for i in range(n)])\nassert f(g())\n", "emb": null, "idx_generation": 394, "target_skills": null, "problem_func": "from typing import*\ndef f(x: str, s=['0', '@', 'R', 'k', '$', '$', 't', '0', '3', '#', '!', 'a', 'w', 'k', 'q', 'H', '-', 'm'], n=16) -> bool:\n    \"\"\"Check if the string x is a palindrome\"\"\"\n    return len(x) == n and x == x[::-1]", "solution_func": "def g(s = ['0', '@', 'R', 'k', '$', '$', 't', '0', '3', '#', '!', 'a', 'w', 'k', 'q', 'H', '-', 'm'], n = 16):\n    return ''.join([s[i] for i in range(n)])", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(lb: List[bool], trips=[[1, 1, 0], [1, 0, 0], [0, 0, 0], [0, 1, 1], [0, 1, 1], [1, 1, 1], [1, 0, 1]]) -> bool:\n    \"\"\"\n    Given a list of lists of triples of integers, return True for each list with a total of 1 or 3 and\n    False for each other list.\n    \"\"\"\n    return len(lb) == len(trips) and all((b is True if sum(s) == 1 or sum(s) == 3 else b is False for (b, s) in zip(lb, trips)))\ndef g(trips = [[1, 1, 0], [1, 0, 0], [0, 0, 0], [0, 1, 1], [0, 1, 1], [1, 1, 1], [1, 0, 1]]):\n    return [sum(s) == 1 or sum(s) == 3 for s in trips]\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 394, "target_skills": null, "problem_func": "from typing import*\ndef f(lb: List[bool], trips=[[1, 1, 0], [1, 0, 0], [0, 0, 0], [0, 1, 1], [0, 1, 1], [1, 1, 1], [1, 0, 1]]) -> bool:\n    \"\"\"\n    Given a list of lists of triples of integers, return True for each list with a total of 1 or 3 and\n    False for each other list.\n    \"\"\"\n    return len(lb) == len(trips) and all((b is True if sum(s) == 1 or sum(s) == 3 else b is False for (b, s) in zip(lb, trips)))", "solution_func": "def g(trips = [[1, 1, 0], [1, 0, 0], [0, 0, 0], [0, 1, 1], [0, 1, 1], [1, 1, 1], [1, 0, 1]]):\n    return [sum(s) == 1 or sum(s) == 3 for s in trips]", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], k=3, target=0) -> bool:\n    \"\"\"Find if there exists a k-sized subset of nums that sums up to target\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, k))\ndef g(k = 3, target = 0, nums = [1, 2, 3, 4, 5, 6]):\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 394, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], k=3, target=0) -> bool:\n    \"\"\"Find if there exists a k-sized subset of nums that sums up to target\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, k))", "solution_func": "def g(k = 3, target = 0, nums = [1, 2, 3, 4, 5, 6]):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, strings=['abc', 'def', 'ghi', 'jkl', 'mno']) -> bool:\n    \"\"\"Check if the given string is a palindrome and if it exists in the list of strings.\"\"\"\n    return s == s[::-1] and s in strings\ndef g(strings = ['abc', 'def', 'ghi', 'jkl', 'mno']):\n    return strings[0]\nassert f(g())\n", "emb": null, "idx_generation": 394, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, strings=['abc', 'def', 'ghi', 'jkl', 'mno']) -> bool:\n    \"\"\"Check if the given string is a palindrome and if it exists in the list of strings.\"\"\"\n    return s == s[::-1] and s in strings", "solution_func": "def g(strings = ['abc', 'def', 'ghi', 'jkl', 'mno']):\n    return strings[0]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the given number is prime and if it exists in the list of numbers.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return n in nums\ndef g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums[1]\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 394, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the given number is prime and if it exists in the list of numbers.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return n in nums", "solution_func": "def g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums[1]", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if the sum of all elements in the matrix is equal to the target value.\"\"\"\n    return sum(sum(row) for row in matrix) == target\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n", "emb": null, "idx_generation": 394, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if the sum of all elements in the matrix is equal to the target value.\"\"\"\n    return sum(sum(row) for row in matrix) == target", "solution_func": "def g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: List[int], a=0, b=10, c=20) -> bool:\n    \"\"\"Check if all elements in the list are within a certain range.\"\"\"\n    return all([a <= num <= c for num in x])\ndef g(a=0, b=10, c=20):\n    return list(range(a, b + 1)) + list(range(b, c + 1))\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 394, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], a=0, b=10, c=20) -> bool:\n    \"\"\"Check if all elements in the list are within a certain range.\"\"\"\n    return all([a <= num <= c for num in x])", "solution_func": "def g(a=0, b=10, c=20):\n    return list(range(a, b + 1)) + list(range(b, c + 1))", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a string has at least n consecutive vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s.lower():\n        if char in vowels:\n            count += 1\n            if count >= n:\n                return True\n        else:\n            count = 0\n    return False\ndef g(n=3):\n    return 'ae' * n + 'a'\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 394, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a string has at least n consecutive vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s.lower():\n        if char in vowels:\n            count += 1\n            if count >= n:\n                return True\n        else:\n            count = 0\n    return False", "solution_func": "def g(n=3):\n    return 'ae' * n + 'a'", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: List[int], y: List[int], z: List[int]) -> bool:\n    \"\"\"Check if the sum of the elements in x is equal to the sum of the elements in y minus the sum of the elements in z.\"\"\"\n    return sum(x) == sum(y) - sum(z)\ndef g():\n    return [1, 2, 3], [4, 5, 6], [7, 8, 9]\nassert f(*g())\n", "emb": null, "idx_generation": 394, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], y: List[int], z: List[int]) -> bool:\n    \"\"\"Check if the sum of the elements in x is equal to the sum of the elements in y minus the sum of the elements in z.\"\"\"\n    return sum(x) == sum(y) - sum(z)", "solution_func": "def g():\n    return [1, 2, 3], [4, 5, 6], [7, 8, 9]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: List[int], target=100) -> bool:\n    \"\"\"Determine if there is a subset of x that adds up to the target\"\"\"\n    dp = [False] * (target + 1)\n    dp[0] = True\n\n    for num in x:\n        for i in range(target, num - 1, -1):\n            dp[i] |= dp[i - num]\n\n    return dp[target]\ndef g(target = 100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n", "emb": null, "idx_generation": 394, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], target=100) -> bool:\n    \"\"\"Determine if there is a subset of x that adds up to the target\"\"\"\n    dp = [False] * (target + 1)\n    dp[0] = True\n\n    for num in x:\n        for i in range(target, num - 1, -1):\n            dp[i] |= dp[i - num]\n\n    return dp[target]", "solution_func": "def g(target = 100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr:List[int], k=2) -> bool:\n    \"\"\"Check if there exists two distinct indices i and j such that arr[i] == arr[j] + k\"\"\"\n    return any((arr[i] == arr[j] + k for i in range(len(arr)) for j in range(len(arr)) if i != j))\ndef g(k=2):\n    arr = [1, 3, 5, 6, 8]\n    return arr\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 395, "target_skills": null, "problem_func": "from typing import*\ndef f(arr:List[int], k=2) -> bool:\n    \"\"\"Check if there exists two distinct indices i and j such that arr[i] == arr[j] + k\"\"\"\n    return any((arr[i] == arr[j] + k for i in range(len(arr)) for j in range(len(arr)) if i != j))", "solution_func": "def g(k=2):\n    arr = [1, 3, 5, 6, 8]\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the given target value exists in the matrix\"\"\"\n    return any((target in row for row in matrix))\ndef g(target=0):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 395, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the given target value exists in the matrix\"\"\"\n    return any((target in row for row in matrix))", "solution_func": "def g(target=0):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of elements in the list such that their sum is equal to the target\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(len(nums)) if i != j))\ndef g(target=0):\n    nums = [1, 2, 3, 4, 5]\n    return nums\nassert f(g())\n", "emb": null, "idx_generation": 395, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of elements in the list such that their sum is equal to the target\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(len(nums)) if i != j))", "solution_func": "def g(target=0):\n    nums = [1, 2, 3, 4, 5]\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer, return True if there are two numbers in the list that add up to the target, and False otherwise.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[2, 7, 11, 15], target=9):\n    return nums, target\n\nassert f(*g())\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 395, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer, return True if there are two numbers in the list that add up to the target, and False otherwise.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums=[2, 7, 11, 15], target=9):\n    return nums, target", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(word: str) -> bool:\n    \"\"\"\n    Given a word, return True if it is a palindrome and False otherwise.\n    \"\"\"\n    return word == word[::-1]\n\ndef g(word=\"racecar\"):\n    return word\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 395, "target_skills": null, "problem_func": "from typing import*\ndef f(word: str) -> bool:\n    \"\"\"\n    Given a word, return True if it is a palindrome and False otherwise.\n    \"\"\"\n    return word == word[::-1]", "solution_func": "def g(word=\"racecar\"):\n    return word", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Find n such that n is a prime number.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    n = 7\n    return n\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 395, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Find n such that n is a prime number.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "solution_func": "def g():\n    n = 7\n    return n", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, nums=[8154539588421190, 128861795], upper_bound=100000) -> bool:\n    \"\"\"Find if the given number is a prime factor of any number in the list.\"\"\"\n    return any((i % n == 0 for i in nums)) and n <= upper_bound\n\ndef g(nums=[8154539588421190, 128861795], upper_bound=100000):\n    n = 2\n    while True:\n        if all((i % n != 0 for i in nums)):\n            return n\n        n += 1\nassert f(g())\n", "emb": null, "idx_generation": 395, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[8154539588421190, 128861795], upper_bound=100000) -> bool:\n    \"\"\"Find if the given number is a prime factor of any number in the list.\"\"\"\n    return any((i % n == 0 for i in nums)) and n <= upper_bound", "solution_func": "def g(nums=[8154539588421190, 128861795], upper_bound=100000):\n    n = 2\n    while True:\n        if all((i % n != 0 for i in nums)):\n            return n\n        n += 1", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: List[int], a=55980, s=7402, e=155818) -> bool:\n    \"\"\"Check if the given list is a subrange of a geometric sequence.\"\"\"\n    return x[0] == a and x[-1] <= e and (x[-1] * s > e) and all([x[i] * s == x[i + 1] for i in range(len(x) - 1)])\n\ndef g(a=55980, s=7402, e=155818):\n    x = [a]\n    while x[-1] <= e:\n        x.append(x[-1] * s)\n    return x[:-1]\nassert f(g())\n", "emb": [1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 395, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], a=55980, s=7402, e=155818) -> bool:\n    \"\"\"Check if the given list is a subrange of a geometric sequence.\"\"\"\n    return x[0] == a and x[-1] <= e and (x[-1] * s > e) and all([x[i] * s == x[i + 1] for i in range(len(x) - 1)])", "solution_func": "def g(a=55980, s=7402, e=155818):\n    x = [a]\n    while x[-1] <= e:\n        x.append(x[-1] * s)\n    return x[:-1]", "map_ix": [1, 0, 1, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(path: List[int], edges=[[3, 5], [2, 1], [4, 5], [3, 6], [6, 7], [5, 3], [4, 3], [6, 2], [5, 2], [7, 0], [3, 4], [0, 5], [0, 0], [1, 0], [0, 2], [3, 1]]) -> bool:\n    \"\"\"Check if the given path is a Hamiltonian path in the given digraph.\"\"\"\n    for i in range(len(path) - 1):\n        assert [path[i], path[i + 1]] in edges\n    assert path[0] == 0\n    assert path[-1] == max((max(edge) for edge in edges))\n    return len(set(path)) == len(path)\n\ndef g(edges=[[3, 5], [2, 1], [4, 5], [3, 6], [6, 7], [5, 3], [4, 3], [6, 2], [5, 2], [7, 0], [3, 4], [0, 5], [0, 0], [1, 0], [0, 2], [3, 1]]):\n    n = max(max(edge) for edge in edges)\n    paths = {0: [0]}\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in paths and j not in paths:\n                paths[j] = paths[i] + [j]\n    return paths.get(n)[::-1]\nassert f(g())\n", "emb": null, "idx_generation": 395, "target_skills": null, "problem_func": "from typing import*\ndef f(path: List[int], edges=[[3, 5], [2, 1], [4, 5], [3, 6], [6, 7], [5, 3], [4, 3], [6, 2], [5, 2], [7, 0], [3, 4], [0, 5], [0, 0], [1, 0], [0, 2], [3, 1]]) -> bool:\n    \"\"\"Check if the given path is a Hamiltonian path in the given digraph.\"\"\"\n    for i in range(len(path) - 1):\n        assert [path[i], path[i + 1]] in edges\n    assert path[0] == 0\n    assert path[-1] == max((max(edge) for edge in edges))\n    return len(set(path)) == len(path)", "solution_func": "def g(edges=[[3, 5], [2, 1], [4, 5], [3, 6], [6, 7], [5, 3], [4, 3], [6, 2], [5, 2], [7, 0], [3, 4], [0, 5], [0, 0], [1, 0], [0, 2], [3, 1]]):\n    n = max(max(edge) for edge in edges)\n    paths = {0: [0]}\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in paths and j not in paths:\n                paths[j] = paths[i] + [j]\n    return paths.get(n)[::-1]", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(nums: list, target=24) -> bool:\n    \"\"\"\n    Given a list of 4 integers, determine if it is possible to use all four numbers exactly once and\n    the four numbers can be combined using the basic arithmetic operations (+, -, *, /) to equal the target value.\n\n    Sample Input:\n    nums = [4, 5, 6, 7]\n    target = 24\n\n    Sample Output:\n    True\n    \"\"\"\n    ops = ['+', '-', '*', '/']\n    for perm in permutations(nums):\n        for op1 in ops:\n            for op2 in ops:\n                for op3 in ops:\n                    expression = f\"(({perm[0]} {op1} {perm[1]}) {op2} {perm[2]}) {op3} {perm[3]}\"\n                    try:\n                        if eval(expression) == target:\n                            return True\n                    except ZeroDivisionError:\n                        pass\n    return False\n\ndef g(nums = [4, 5, 6, 7]):\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 395, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(nums: list, target=24) -> bool:\n    \"\"\"\n    Given a list of 4 integers, determine if it is possible to use all four numbers exactly once and\n    the four numbers can be combined using the basic arithmetic operations (+, -, *, /) to equal the target value.\n\n    Sample Input:\n    nums = [4, 5, 6, 7]\n    target = 24\n\n    Sample Output:\n    True\n    \"\"\"\n    ops = ['+', '-', '*', '/']\n    for perm in permutations(nums):\n        for op1 in ops:\n            for op2 in ops:\n                for op3 in ops:\n                    expression = f\"(({perm[0]} {op1} {perm[1]}) {op2} {perm[2]}) {op3} {perm[3]}\"\n                    try:\n                        if eval(expression) == target:\n                            return True\n                    except ZeroDivisionError:\n                        pass\n    return False", "solution_func": "def g(nums = [4, 5, 6, 7]):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "import math\nfrom typing import*\ndef f(expression: str, x=1) -> bool:\n    \"\"\"Evaluate a given mathematical expression at x\"\"\"\n    return eval(expression) == x\ndef g(x = 1):\n    return str(x)\nassert f(g())\n", "emb": null, "idx_generation": 396, "target_skills": null, "problem_func": "import math\nfrom typing import*\ndef f(expression: str, x=1) -> bool:\n    \"\"\"Evaluate a given mathematical expression at x\"\"\"\n    return eval(expression) == x", "solution_func": "def g(x = 1):\n    return str(x)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(words: List[str], n=5, prefix='p', suffix='s') -> bool:\n    \"\"\"Check if any word in a given list starts with a given prefix and ends with a given suffix\"\"\"\n    return any(word.startswith(prefix) and word.endswith(suffix) for word in words) and len(words) == n\ndef g(n = 5, prefix = 'p', suffix = 's'):\n    return [prefix + str(i) + suffix for i in range(n)]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 396, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], n=5, prefix='p', suffix='s') -> bool:\n    \"\"\"Check if any word in a given list starts with a given prefix and ends with a given suffix\"\"\"\n    return any(word.startswith(prefix) and word.endswith(suffix) for word in words) and len(words) == n", "solution_func": "def g(n = 5, prefix = 'p', suffix = 's'):\n    return [prefix + str(i) + suffix for i in range(n)]", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, k=2) -> bool:\n    \"\"\"Check if a given string can be formed by concatenating exactly k copies of a subsequence of s\"\"\"\n    return s in (s * k)\ndef g(k = 2):\n    return 'abc' * k\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 396, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, k=2) -> bool:\n    \"\"\"Check if a given string can be formed by concatenating exactly k copies of a subsequence of s\"\"\"\n    return s in (s * k)", "solution_func": "def g(k = 2):\n    return 'abc' * k", "map_ix": [0, 0, 0, 1, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=16, n=0) -> bool:\n    \"\"\"\n    Find the sum of two numbers in the given list that equals the target.\n    \"\"\"\n    return any(nums[i] + nums[j] == target for i in range(n) for j in range(i + 1, n))\ndef g(target=16, n=0):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n", "emb": null, "idx_generation": 396, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=16, n=0) -> bool:\n    \"\"\"\n    Find the sum of two numbers in the given list that equals the target.\n    \"\"\"\n    return any(nums[i] + nums[j] == target for i in range(n) for j in range(i + 1, n))", "solution_func": "def g(target=16, n=0):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target=10, n=0) -> bool:\n    \"\"\"\n    Find the subarray in the given list that sums up to the target.\n    \"\"\"\n    for i in range(n):\n        curr_sum = arr[i]\n        j = i + 1\n        while j <= n:\n            if curr_sum == target:\n                return True\n            if curr_sum > target or j == n:\n                break\n            curr_sum = curr_sum + arr[j]\n            j += 1\n    return False\ndef g(target=10, n=0):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n", "emb": null, "idx_generation": 396, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=10, n=0) -> bool:\n    \"\"\"\n    Find the subarray in the given list that sums up to the target.\n    \"\"\"\n    for i in range(n):\n        curr_sum = arr[i]\n        j = i + 1\n        while j <= n:\n            if curr_sum == target:\n                return True\n            if curr_sum > target or j == n:\n                break\n            curr_sum = curr_sum + arr[j]\n            j += 1\n    return False", "solution_func": "def g(target=10, n=0):\n    return [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"\n    Check if the given string contains the specified substring.\n    \"\"\"\n    return substring in s\ndef g(substring='abc'):\n    return \"xyzabc123\"\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 396, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"\n    Check if the given string contains the specified substring.\n    \"\"\"\n    return substring in s", "solution_func": "def g(substring='abc'):\n    return \"xyzabc123\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=1000) -> bool:\n    \"\"\"Find three numbers in the list that sum up to the target.\"\"\"\n    from itertools import combinations\n    return any(sum(combo) == target for combo in combinations(nums, 3))\ndef g(target = 1000):\n    nums = [i for i in range(1, target)]\n    return nums\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 396, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=1000) -> bool:\n    \"\"\"Find three numbers in the list that sum up to the target.\"\"\"\n    from itertools import combinations\n    return any(sum(combo) == target for combo in combinations(nums, 3))", "solution_func": "def g(target = 1000):\n    nums = [i for i in range(1, target)]\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target number exists in the matrix.\"\"\"\n    return any(target in row for row in matrix)\ndef g(target = 0):\n    matrix = [[i+j for i in range(10)] for j in range(10)]\n    return matrix\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 396, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target number exists in the matrix.\"\"\"\n    return any(target in row for row in matrix)", "solution_func": "def g(target = 0):\n    matrix = [[i+j for i in range(10)] for j in range(10)]\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target.\"\"\"\n    from itertools import combinations\n    return any(sum(combo) == target for combo in combinations(nums, 2))\ndef g(target = 100):\n    nums = [i for i in range(1, target)]\n    return nums\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 396, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target.\"\"\"\n    from itertools import combinations\n    return any(sum(combo) == target for combo in combinations(nums, 2))", "solution_func": "def g(target = 100):\n    nums = [i for i in range(1, target)]\n    return nums", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, target=0.0) -> bool:\n    \"\"\"Check if the given x and y coordinates are within a circle centered at the origin.\"\"\"\n    return math.sqrt(x**2 + y**2) <= target\n\ndef g(x: float, y: float, target=0.0):\n    return x, y, target\n\nassert f(*g())\n", "emb": null, "idx_generation": 396, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(x: float, y: float, target=0.0) -> bool:\n    \"\"\"Check if the given x and y coordinates are within a circle centered at the origin.\"\"\"\n    return math.sqrt(x**2 + y**2) <= target", "solution_func": "def g(x: float, y: float, target=0.0):\n    return x, y, target", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(num: int, digits=3) -> bool:\n    \"\"\"Check if the given number is a palindrome with a certain number of digits\"\"\"\n    return str(num) == str(num)[::-1] and len(str(num)) == digits\ndef g(digits=3):\n    start = 10 ** (digits - 1)\n    end = 10 ** digits - 1\n    for num in range(end, start - 1, -1):\n        if str(num) == str(num)[::-1]:\n            return num\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 397, "target_skills": null, "problem_func": "from typing import*\ndef f(num: int, digits=3) -> bool:\n    \"\"\"Check if the given number is a palindrome with a certain number of digits\"\"\"\n    return str(num) == str(num)[::-1] and len(str(num)) == digits", "solution_func": "def g(digits=3):\n    start = 10 ** (digits - 1)\n    end = 10 ** digits - 1\n    for num in range(end, start - 1, -1):\n        if str(num) == str(num)[::-1]:\n            return num", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(matrix: List[List[int]], target=100, rows=3, cols=3) -> bool:\n    \"\"\"Check if there is a submatrix with a given target sum\"\"\"\n    for row in matrix:\n        assert len(row) == cols\n    for col in range(cols):\n        assert len(matrix) == rows\n    for i in range(rows):\n        for j in range(cols):\n            submatrix_sum = sum([matrix[x][y] for x in range(i, rows) for y in range(j, cols)])\n            if submatrix_sum == target:\n                return True\n    return False\ndef g(target=100, rows=3, cols=3):\n    import random\n    matrix = [[random.randint(1, 10) for _ in range(cols)] for _ in range(rows)]\n    return matrix\nassert f(g())\n", "emb": null, "idx_generation": 397, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(matrix: List[List[int]], target=100, rows=3, cols=3) -> bool:\n    \"\"\"Check if there is a submatrix with a given target sum\"\"\"\n    for row in matrix:\n        assert len(row) == cols\n    for col in range(cols):\n        assert len(matrix) == rows\n    for i in range(rows):\n        for j in range(cols):\n            submatrix_sum = sum([matrix[x][y] for x in range(i, rows) for y in range(j, cols)])\n            if submatrix_sum == target:\n                return True\n    return False", "solution_func": "def g(target=100, rows=3, cols=3):\n    import random\n    matrix = [[random.randint(1, 10) for _ in range(cols)] for _ in range(rows)]\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s1: str, s2: str, s3: str) -> bool:\n    \"\"\"Check if a string s3 can be formed by interleaving strings s1 and s2\"\"\"\n    def is_interleave(s1, s2, s3):\n        if len(s1) + len(s2) != len(s3):\n            return False\n        if not s1:\n            return s2 == s3\n        if not s2:\n            return s1 == s3\n        if s1[0] == s3[0] and is_interleave(s1[1:], s2, s3[1:]):\n            return True\n        if s2[0] == s3[0] and is_interleave(s1, s2[1:], s3[1:]):\n            return True\n        return False\n    return is_interleave(s1, s2, s3)\ndef g():\n    return \"abcd\", \"efgh\", \"aebcfghd\"\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 397, "target_skills": null, "problem_func": "from typing import*\ndef f(s1: str, s2: str, s3: str) -> bool:\n    \"\"\"Check if a string s3 can be formed by interleaving strings s1 and s2\"\"\"\n    def is_interleave(s1, s2, s3):\n        if len(s1) + len(s2) != len(s3):\n            return False\n        if not s1:\n            return s2 == s3\n        if not s2:\n            return s1 == s3\n        if s1[0] == s3[0] and is_interleave(s1[1:], s2, s3[1:]):\n            return True\n        if s2[0] == s3[0] and is_interleave(s1, s2[1:], s3[1:]):\n            return True\n        return False\n    return is_interleave(s1, s2, s3)", "solution_func": "def g():\n    return \"abcd\", \"efgh\", \"aebcfghd\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, substr='python') -> bool:\n    \"\"\"\n    Given a string and a substring, check if the substring is present in the string.\n    \"\"\"\n    return substr in string\n\ndef g(string='I love python', substr='python'):\n    return string\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 397, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, substr='python') -> bool:\n    \"\"\"\n    Given a string and a substring, check if the substring is present in the string.\n    \"\"\"\n    return substr in string", "solution_func": "def g(string='I love python', substr='python'):\n    return string", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find two numbers in the list that add up to the target.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[2, 5, 7, 9, 4, 1, 8]):\n    return nums\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 397, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find two numbers in the list that add up to the target.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums=[2, 5, 7, 9, 4, 1, 8]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Given a matrix (list of lists) and a target number, check if the target number is present in the matrix.\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g())\n", "emb": null, "idx_generation": 397, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Given a matrix (list of lists) and a target number, check if the target number is present in the matrix.\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6]) -> bool:\n    \"\"\"\n    Given a list of integers nums, determine if there exists two distinct indices i and j such that\n    nums[i] + nums[j] == n.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5, 6]\n    n = 8\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == n:\n                return True\n    return False\ndef g(nums = [1, 2, 3, 4, 5, 6]):\n    return sum(nums)\nassert f(g())\n", "emb": null, "idx_generation": 397, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6]) -> bool:\n    \"\"\"\n    Given a list of integers nums, determine if there exists two distinct indices i and j such that\n    nums[i] + nums[j] == n.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5, 6]\n    n = 8\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == n:\n                return True\n    return False", "solution_func": "def g(nums = [1, 2, 3, 4, 5, 6]):\n    return sum(nums)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, k=3, n=5) -> bool:\n    \"\"\"\n    Given a string s, reverse the order of the first k characters and return the resulting string.\n    If k is greater than the length of s, reverse the entire string.\n\n    Sample Input:\n    s = \"Hello World!\"\n    k = 5\n\n    Sample Output:\n    \"olleH World!\"\n    \"\"\"\n    if k > len(s):\n        return s[::-1]\n    else:\n        return s[:k][::-1] + s[k:]\ndef g(s = \"Hello World!\", k = 3, n = 5):\n    return s\nassert f(g())\n", "emb": null, "idx_generation": 397, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, k=3, n=5) -> bool:\n    \"\"\"\n    Given a string s, reverse the order of the first k characters and return the resulting string.\n    If k is greater than the length of s, reverse the entire string.\n\n    Sample Input:\n    s = \"Hello World!\"\n    k = 5\n\n    Sample Output:\n    \"olleH World!\"\n    \"\"\"\n    if k > len(s):\n        return s[::-1]\n    else:\n        return s[:k][::-1] + s[k:]", "solution_func": "def g(s = \"Hello World!\", k = 3, n = 5):\n    return s", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(lst: list, n=3) -> bool:\n    \"\"\"\n    Given a list of integers lst, return a new list that contains n randomly selected elements from lst.\n\n    Sample Input:\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    n = 4\n\n    Sample Output:\n    [3, 7, 2, 5]\n    \"\"\"\n    random.shuffle(lst)\n    return lst[:n]\ndef g(lst = [1, 2, 3, 4, 5, 6, 7, 8, 9], n = 3):\n    return lst\nassert f(g())\n", "emb": null, "idx_generation": 397, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(lst: list, n=3) -> bool:\n    \"\"\"\n    Given a list of integers lst, return a new list that contains n randomly selected elements from lst.\n\n    Sample Input:\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    n = 4\n\n    Sample Output:\n    [3, 7, 2, 5]\n    \"\"\"\n    random.shuffle(lst)\n    return lst[:n]", "solution_func": "def g(lst = [1, 2, 3, 4, 5, 6, 7, 8, 9], n = 3):\n    return lst", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(x: str, format=\"%Y-%m-%d %H:%M:%S\") -> bool:\n    \"\"\"Check if x is a valid date and time string with the given format\"\"\"\n    try:\n        datetime.strptime(x, format)\n        return True\n    except ValueError:\n        return False\n\ndef g(format=\"%Y-%m-%d %H:%M:%S\"):\n    return datetime.now().strftime(format)\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 397, "target_skills": null, "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(x: str, format=\"%Y-%m-%d %H:%M:%S\") -> bool:\n    \"\"\"Check if x is a valid date and time string with the given format\"\"\"\n    try:\n        datetime.strptime(x, format)\n        return True\n    except ValueError:\n        return False", "solution_func": "def g(format=\"%Y-%m-%d %H:%M:%S\"):\n    return datetime.now().strftime(format)", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(st: str, a='world', b='Hello, world!') -> bool:\n    \"\"\"Check if st is a substring of b\"\"\"\n    return st in b\ndef g(a='world', b='Hello, world!'):\n    return b[len(a):]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 398, "target_skills": null, "problem_func": "from typing import*\ndef f(st: str, a='world', b='Hello, world!') -> bool:\n    \"\"\"Check if st is a substring of b\"\"\"\n    return st in b", "solution_func": "def g(a='world', b='Hello, world!'):\n    return b[len(a):]", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, lst=[2, 4, 6, 8, 10]) -> bool:\n    \"\"\"Check if n is in the list\"\"\"\n    return n in lst\ndef g(lst=[2, 4, 6, 8, 10]):\n    return lst[0]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 398, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst=[2, 4, 6, 8, 10]) -> bool:\n    \"\"\"Check if n is in the list\"\"\"\n    return n in lst", "solution_func": "def g(lst=[2, 4, 6, 8, 10]):\n    return lst[0]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, a=5, b=10) -> bool:\n    \"\"\"Check if n is between a and b\"\"\"\n    return a < n < b\ndef g(a=5, b=10):\n    return a + b // 2\nassert f(g())\n", "emb": null, "idx_generation": 398, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=5, b=10) -> bool:\n    \"\"\"Check if n is between a and b\"\"\"\n    return a < n < b", "solution_func": "def g(a=5, b=10):\n    return a + b // 2", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"\n    Find the sum of the smallest and largest elements in a list.\n\n    Given a list of integers, find the sum of the smallest and largest elements in the list.\n    Return True if the sum is equal to n, False otherwise.\n\n    Example:\n    n = 10\n    lst = [1, 2, 3, 4, 5]\n    output: True\n    \"\"\"\n    assert len(lst) > 0\n    assert isinstance(n, int) and isinstance(lst, list) and all(isinstance(x, int) for x in lst)\n    return sum([min(lst), max(lst)]) == n\n\ndef g(lst: List[int]):\n    return sum([min(lst), max(lst)])\n\nassert f(g([1, 2, 3, 4, 5]), [1, 2, 3, 4, 5])\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 398, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"\n    Find the sum of the smallest and largest elements in a list.\n\n    Given a list of integers, find the sum of the smallest and largest elements in the list.\n    Return True if the sum is equal to n, False otherwise.\n\n    Example:\n    n = 10\n    lst = [1, 2, 3, 4, 5]\n    output: True\n    \"\"\"\n    assert len(lst) > 0\n    assert isinstance(n, int) and isinstance(lst, list) and all(isinstance(x, int) for x in lst)\n    return sum([min(lst), max(lst)]) == n", "solution_func": "def g(lst: List[int]):\n    return sum([min(lst), max(lst)])", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(lst: List[str], n: int = 3) -> bool:\n    \"\"\"\n    Check if all strings in a list have the same length.\n\n    Given a list of strings, check if all strings have the same length.\n    Return True if they have the same length, False otherwise.\n\n    Example:\n    lst = ['abc', 'def', 'ghi']\n    output: True\n    \"\"\"\n    assert isinstance(lst, list) and all(isinstance(x, str) for x in lst)\n    return all(len(x) == len(lst[0]) for x in lst)\n\ndef g(lst: List[str]):\n    return len(lst[0])\n\nassert f(g(['abc', 'def', 'ghi']))\n", "emb": null, "idx_generation": 398, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[str], n: int = 3) -> bool:\n    \"\"\"\n    Check if all strings in a list have the same length.\n\n    Given a list of strings, check if all strings have the same length.\n    Return True if they have the same length, False otherwise.\n\n    Example:\n    lst = ['abc', 'def', 'ghi']\n    output: True\n    \"\"\"\n    assert isinstance(lst, list) and all(isinstance(x, str) for x in lst)\n    return all(len(x) == len(lst[0]) for x in lst)", "solution_func": "def g(lst: List[str]):\n    return len(lst[0])", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"\n    Check if n is divisible by all elements in a list.\n\n    Given a list of integers, check if n is divisible by all elements in the list.\n    Return True if n is divisible by all elements, False otherwise.\n\n    Example:\n    n = 24\n    lst = [2, 3, 4, 6]\n    output: True\n    \"\"\"\n    assert len(lst) > 0\n    assert isinstance(n, int) and isinstance(lst, list) and all(isinstance(x, int) for x in lst)\n    return all(n % x == 0 for x in lst)\n\ndef g(lst: List[int]):\n    return reduce(lambda x, y: x * y, lst)\n\nassert f(g([2, 3, 4, 6]), 24)\n", "emb": null, "idx_generation": 398, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"\n    Check if n is divisible by all elements in a list.\n\n    Given a list of integers, check if n is divisible by all elements in the list.\n    Return True if n is divisible by all elements, False otherwise.\n\n    Example:\n    n = 24\n    lst = [2, 3, 4, 6]\n    output: True\n    \"\"\"\n    assert len(lst) > 0\n    assert isinstance(n, int) and isinstance(lst, list) and all(isinstance(x, int) for x in lst)\n    return all(n % x == 0 for x in lst)", "solution_func": "def g(lst: List[int]):\n    return reduce(lambda x, y: x * y, lst)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=3, b=100, c=10) -> bool:\n    \"\"\"Check if n multiplied by a is greater than the sum of the first c multiples of b\"\"\"\n    return n * a > sum([b * i for i in range(1, c+1)])\ndef g(a = 3, b = 100, c = 10):\n    return sum([b * i for i in range(1, c+1)]) // a + 1\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 398, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=3, b=100, c=10) -> bool:\n    \"\"\"Check if n multiplied by a is greater than the sum of the first c multiples of b\"\"\"\n    return n * a > sum([b * i for i in range(1, c+1)])", "solution_func": "def g(a = 3, b = 100, c = 10):\n    return sum([b * i for i in range(1, c+1)]) // a + 1", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists two numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target = 10):\n    return [5, 3, 2]\nassert f(g())\n", "emb": null, "idx_generation": 398, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists two numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target = 10):\n    return [5, 3, 2]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=2, b=3, c=4) -> bool:\n    \"\"\"Check if n raised to the power of a is greater than the product of b and the square root of c\"\"\"\n    return n ** a > b * math.sqrt(c)\ndef g(a = 2, b = 3, c = 4):\n    return math.ceil((b * math.sqrt(c)) ** (1 / a))\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 398, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, a=2, b=3, c=4) -> bool:\n    \"\"\"Check if n raised to the power of a is greater than the product of b and the square root of c\"\"\"\n    return n ** a > b * math.sqrt(c)", "solution_func": "def g(a = 2, b = 3, c = 4):\n    return math.ceil((b * math.sqrt(c)) ** (1 / a))", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer, determine if there are two numbers in the list that add up to the target.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums: List[int], target: int):\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\nassert f(g())\n", "emb": null, "idx_generation": 398, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer, determine if there are two numbers in the list that add up to the target.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(nums: List[int], target: int):\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, target=10) -> bool:\n    \"\"\"Find the number of occurrences of a target string within a given string\"\"\"\n    return s.count(target) == 3\ndef g(target='apple'):\n    return target * 3\nassert f(g())\n", "emb": null, "idx_generation": 399, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target=10) -> bool:\n    \"\"\"Find the number of occurrences of a target string within a given string\"\"\"\n    return s.count(target) == 3", "solution_func": "def g(target='apple'):\n    return target * 3", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a list that sum up to a target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n", "emb": null, "idx_generation": 399, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a list that sum up to a target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=100) -> bool:\n    \"\"\"Check if there exists a row in a matrix that sums up to a target number\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    return False\ndef g(target=100):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n", "emb": null, "idx_generation": 399, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=100) -> bool:\n    \"\"\"Check if there exists a row in a matrix that sums up to a target number\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    return False", "solution_func": "def g(target=100):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray) -> bool:\n    \"\"\"\n    Find a 2D numpy array where the sum of each row is equal to the sum of the corresponding column.\n    \"\"\"\n    return np.all(np.sum(arr, axis=1) == np.sum(arr, axis=0))\n\ndef g():\n    return np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    \nassert f(g())\n", "emb": null, "idx_generation": 399, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray) -> bool:\n    \"\"\"\n    Find a 2D numpy array where the sum of each row is equal to the sum of the corresponding column.\n    \"\"\"\n    return np.all(np.sum(arr, axis=1) == np.sum(arr, axis=0))", "solution_func": "def g():\n    return np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"\n    Find a number in the given list that is divisible by n.\n    \"\"\"\n    return any(num % n == 0 for num in lst)\n\ndef g(lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return lst\n\nassert f(3, g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 399, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"\n    Find a number in the given list that is divisible by n.\n    \"\"\"\n    return any(num % n == 0 for num in lst)", "solution_func": "def g(lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return lst", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(num: int) -> bool:\n    \"\"\"\n    Find a number that is a perfect square and divisible by 3.\n    \"\"\"\n    return math.sqrt(num) % 1 == 0 and num % 3 == 0\n\ndef g():\n    return 9\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 399, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(num: int) -> bool:\n    \"\"\"\n    Find a number that is a perfect square and divisible by 3.\n    \"\"\"\n    return math.sqrt(num) % 1 == 0 and num % 3 == 0", "solution_func": "def g():\n    return 9", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(lst: List[int], target_sum=25, target_product=100) -> bool:\n    \"\"\"Find a pair of numbers from a given list that their sum equals a given target_sum and their product equals a given target_product\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target_sum and lst[i] * lst[j] == target_product:\n                return True\n    return False\ndef g(target_sum = 25, target_product = 100):\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return lst\nassert f(g())\n", "emb": null, "idx_generation": 399, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int], target_sum=25, target_product=100) -> bool:\n    \"\"\"Find a pair of numbers from a given list that their sum equals a given target_sum and their product equals a given target_product\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target_sum and lst[i] * lst[j] == target_product:\n                return True\n    return False", "solution_func": "def g(target_sum = 25, target_product = 100):\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return lst", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(lst: List[int], target_sum=50, target_product=1000) -> bool:\n    \"\"\"Find a pair of numbers from a given list that their sum equals a given target_sum and their product equals a given target_product\"\"\"\n    random.shuffle(lst)\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target_sum and lst[i] * lst[j] == target_product:\n                return True\n    return False\ndef g(target_sum = 50, target_product = 1000):\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return lst\nassert f(g())\n", "emb": null, "idx_generation": 399, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(lst: List[int], target_sum=50, target_product=1000) -> bool:\n    \"\"\"Find a pair of numbers from a given list that their sum equals a given target_sum and their product equals a given target_product\"\"\"\n    random.shuffle(lst)\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target_sum and lst[i] * lst[j] == target_product:\n                return True\n    return False", "solution_func": "def g(target_sum = 50, target_product = 1000):\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return lst", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target_sum=100) -> bool:\n    \"\"\"Find a combination of numbers from a given list that their sum equals a given target_sum\"\"\"\n    n = len(arr)\n    dp = [[False] * (target_sum+1) for _ in range(n+1)]\n    dp[0][0] = True\n\n    for i in range(1, n+1):\n        dp[i][0] = True\n        for j in range(1, target_sum+1):\n            if j >= arr[i-1]:\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-arr[i-1]]\n            else:\n                dp[i][j] = dp[i-1][j]\n\n    return dp[n][target_sum]\ndef g(target_sum = 100):\n    arr = [10, 20, 30, 40, 50]\n    return arr\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 399, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target_sum=100) -> bool:\n    \"\"\"Find a combination of numbers from a given list that their sum equals a given target_sum\"\"\"\n    n = len(arr)\n    dp = [[False] * (target_sum+1) for _ in range(n+1)]\n    dp[0][0] = True\n\n    for i in range(1, n+1):\n        dp[i][0] = True\n        for j in range(1, target_sum+1):\n            if j >= arr[i-1]:\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-arr[i-1]]\n            else:\n                dp[i][j] = dp[i-1][j]\n\n    return dp[n][target_sum]", "solution_func": "def g(target_sum = 100):\n    arr = [10, 20, 30, 40, 50]\n    return arr", "map_ix": [1, 1, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substr: str) -> bool:\n    \"\"\"Check if a substring is present in a string in a case-insensitive manner.\"\"\"\n    return substr.lower() in s.lower()\ndef g(s: str, substr: str):\n    return s\nassert f(g(\"Hello World\", \"WORLD\"), \"world\")\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 399, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substr: str) -> bool:\n    \"\"\"Check if a substring is present in a string in a case-insensitive manner.\"\"\"\n    return substr.lower() in s.lower()", "solution_func": "def g(s: str, substr: str):\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}]