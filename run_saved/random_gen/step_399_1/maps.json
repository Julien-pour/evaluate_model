[
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there are three numbers in the list that add up to the target.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            for k in range(j + 1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g(arr = [1, 2, 3, 4, 5], target = 10):\n    return arr, target\n\nassert f(*g())\n",
        "idx_generation": 393,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if the string s contains at least n vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n        if count >= n:\n            return True\n    return False\n\ndef g(n=5):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return ''.join(vowels[:n])\n\nassert f(g())\n",
        "idx_generation": 389,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='python') -> bool:\n    \"\"\"Check if a given string contains a specific substring.\"\"\"\n    return substr in s\n\ndef g(substr='python'):\n    return 'I love programming in ' + substr\n\nassert f(g())\n",
        "idx_generation": 132,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, strings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'kiwi', 'lemon']) -> bool:\n    \"\"\"Check if the given string is the concatenation of two strings from the list.\"\"\"\n    return any(s == a + b for a in strings for b in strings)\ndef g(strings = ['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'kiwi', 'lemon']):\n    return strings[0] + strings[1]\nassert f(g())\n",
        "idx_generation": 166,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"Check if a given string s contains a palindrome of length n.\"\"\"\n    for i in range(len(s)-n+1):\n        substring = s[i:i+n]\n        if substring == substring[::-1]:\n            return True\n    return False\ndef g(s = \"racecar\", n = 3):\n    return s\nassert f(g(), 3)\n",
        "idx_generation": 104,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(r: float, vol=1000) -> bool:\n    \"\"\"Check if a given radius of a sphere produces the desired volume\"\"\"\n    return math.isclose((4/3) * math.pi * r**3, vol)\ndef g(vol = 1000):\n    return (3 * vol / (4 * math.pi)) ** (1/3)\nassert f(g())\n",
        "idx_generation": 116,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, x=2) -> bool:\n    \"\"\"Check if the number is a power of x\"\"\"\n    while n % x == 0:\n        n = n / x\n    return n == 1\ndef g(x = 2):\n    return x ** 5\nassert f(g())\n",
        "idx_generation": 245,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Is the average of the list lst greater than or equal to n?\"\"\"\n    return sum(lst) / len(lst) >= int(s)\ndef g(lst=[1, 2, 3, 4, 5]):\n    return str(sum(lst) // len(lst))\nassert f(g())\n",
        "idx_generation": 55,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(indices: List[int], a0=987654321) -> bool:\n    \"\"\"\n    Find a repeating integer in an infinite sequence of integers, specifically the indices for which the same value\n    occurs 1000 times. The sequence is defined by a starting value a_0 and each subsequent term is:\n    a_{n+1} = the square root of a_n if the a_n is a perfect square, and a_n + 3 otherwise.\n\n    For a given a_0 (that is a multiple of 3), the goal is to find 1000 indices where the a_i's are all equal.\n\n    Sample input:\n    9\n\n    Sample output:\n    [0, 3, 6, ..., 2997]\n\n    The sequence starting with a0=9 is [9, 3, 6, 9, 3, 6, 9, ...] thus a_n at where n is a multiple of 3 are\n    all equal in this case.\n    \"\"\"\n    assert a0 >= 0 and a0 % 3 == 0, 'Hint: a_0 is a multiple of 3.'\n    s = [a0]\n    for i in range(max(indices)):\n        s.append(int(s[-1] ** 0.5) if int(s[-1] ** 0.5) ** 2 == s[-1] else s[-1] + 3)\n    return len(indices) == len(set(indices)) == 1000 and min(indices) >= 0 and (len({s[i] for i in indices}) == 1)\ndef g(a0 = 987654321):\n    n = a0\n    ans = []\n    i = 0\n    while len(ans) < 1000:\n        if n == 3:  # use the fact that 3 will repeat infinitely often\n            ans.append(i)\n        n = int(n ** 0.5) if int(n ** 0.5) ** 2 == n else n + 3\n        i += 1\n    return ans\nassert f(g())\n",
        "idx_generation": 111,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int, k=3, total=0) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a combination of k numbers that sums up to the target value.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n    k = 2\n\n    Sample Output:\n    True\n    \"\"\"\n    if k == 0:\n        return total == target\n    for i, num in enumerate(nums):\n        if f(nums[i+1:], target, k-1, total+num):\n            return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=9, k=3):\n    return nums, target, k\n\nassert f(*g())\n",
        "idx_generation": 8,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"\n    Find a combination of numbers in the given list that sums up to the target number.\n    \"\"\"\n    def helper(arr, target, curr_sum, curr_index):\n        if curr_sum == target:\n            return True\n        if curr_index >= len(arr):\n            return False\n        if helper(arr, target, curr_sum + arr[curr_index], curr_index + 1):\n            return True\n        if helper(arr, target, curr_sum, curr_index + 1):\n            return True\n        return False\n    \n    return helper(arr, target, 0, 0)\n\ndef g(arr=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], target=100):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 265,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target=8) -> bool:\n    \"\"\"Check if the binary representation of n has exactly 'target' number of 1's.\"\"\"\n    binary_str = bin(n)[2:]\n    return binary_str.count('1') == target\ndef g(target = 8):\n    n = 2**target - 1\n    return n\nassert f(g())\n",
        "idx_generation": 206,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"Check if it is possible to obtain the target number (default 24) using all four numbers from the given list\"\"\"\n    operators = ['+', '-', '*', '/']\n    \n    def calculate(a, b, operator):\n        if operator == '+':\n            return a + b\n        elif operator == '-':\n            return a - b\n        elif operator == '*':\n            return a * b\n        elif operator == '/':\n            if b != 0:\n                return a / b\n            else:\n                return None\n    \n    def solve(nums):\n        if len(nums) == 1:\n            return nums[0] == target\n        \n        for i, j in permutations(range(len(nums)), 2):\n            a, b = nums[i], nums[j]\n            remaining_nums = [nums[k] for k in range(len(nums)) if k != i and k != j]\n            \n            for operator in operators:\n                result = calculate(a, b, operator)\n                if result is not None:\n                    if solve([result] + remaining_nums):\n                        return True\n        \n        return False\n    \n    return solve(nums)\n\ndef g(nums=[4, 7, 8, 2]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 273,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int) -> bool:\n    \"\"\"\n    Check if the given number is a prime number.\n\n    A prime number is a natural number greater than 1 that is not a product of two smaller natural numbers.\n\n    The function should return True if the input number is a prime number, and False otherwise.\n    \"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\ndef g():\n    return 17\nassert f(g())\n",
        "idx_generation": 271,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(li: List[int], seed=1234, result=[4, 3, 2, 1]) -> bool:\n    \"\"\"Sort a list of integers in descending order and check if it matches the result\"\"\"\n    random.seed(seed)\n    return sorted(li, reverse=True) == result\n\ndef g(seed=1234):\n    random.seed(seed)\n    li = random.sample(range(1, 5), 4)\n    return li\nassert f(g())\n",
        "idx_generation": 47,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    return any(target - num in nums for num in nums)\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5]\n    return nums\nassert f(g())\n",
        "idx_generation": 100,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"Find the maximum subarray sum.\"\"\"\n    max_sum = float('-inf')\n    curr_sum = 0\n    \n    for num in nums:\n        curr_sum = max(num, curr_sum + num)\n        max_sum = max(max_sum, curr_sum)\n    \n    return max_sum\n\ndef g(nums: List[int]):\n    return nums\n\nnums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n\nassert f(g(nums)) == 6\n",
        "idx_generation": 22,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=3, max_ops=100) -> bool:\n    \"\"\"\n    Given a list of integers, arr, and integers k and max_ops, find a sequence of at most max_ops operations to\n    transform arr into a list where the difference between the maximum and minimum element is at most k. An\n    operation can either increment or decrement any element in the list by 1.\n    \"\"\"\n    for a in arr:\n        assert isinstance(a, int)\n    ops = 0\n    while max(arr) - min(arr) > k and ops < max_ops:\n        idx_max = arr.index(max(arr))\n        idx_min = arr.index(min(arr))\n        if arr[idx_max] - arr[idx_min] <= k:\n            break\n        if arr[idx_max] > arr[idx_min]:\n            arr[idx_max] -= 1\n        else:\n            arr[idx_min] -= 1\n        ops += 1\n    return max(arr) - min(arr) <= k\ndef g(k = 3, max_ops = 100):\n    arr = [1, 2, 3, 4, 5]\n    return arr\nassert f(g())\n",
        "idx_generation": 42,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(dates: List[str]) -> bool:\n    \"\"\"\n    Given a list of dates in the format 'YYYY-MM-DD', find if the dates are in ascending order.\n    \"\"\"\n    parsed_dates = [datetime.strptime(date, '%Y-%m-%d') for date in dates]\n    return parsed_dates == sorted(parsed_dates)\n\ndef g():\n    \"\"\"\n    Return a list of dates in ascending order.\n    \"\"\"\n    return ['2022-01-01', '2022-01-31', '2022-02-01']\n\nassert f(g())\n",
        "idx_generation": 131,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Check if the target number exists in the matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    \n    row = 0\n    col = cols - 1\n    \n    while row < rows and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            row += 1\n        else:\n            col -= 1\n            \n    return False\n\ndef g(matrix: List[List[int]], target: int):\n    return matrix, target\n\nmatrix = [\n    [1, 4, 7, 11, 15],\n    [2, 5, 8, 12, 19],\n    [3, 6, 9, 16, 22],\n    [10, 13, 14, 17, 24],\n    [18, 21, 23, 26, 30]\n]\ntarget = 9\n\nassert f(*g(matrix, target))\n",
        "idx_generation": 22,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that subtract to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] - nums[j] == target:\n                return True\n    return False\n\ndef g(target: int = 0) -> List[int]:\n    \"\"\"Generate a list of numbers that has a pair subtracting to the target number\"\"\"\n    return [target, 0]\n\nassert f(g())\n",
        "idx_generation": 270,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Find if there exists a duplicate number in the given list.\n    \"\"\"\n    numSet = set()\n    for num in nums:\n        if num in numSet:\n            return True\n        numSet.add(num)\n    return False\n\ndef g(nums: List[int]):\n    return nums\n\nassert f(g([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]))\n",
        "idx_generation": 224,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(moves: List[List[int]], initial_state=[1, 2, 4, 8, 16, 32]) -> bool:\n    \"\"\"\n    Beat a bot at Nim, a two-player game involving a number of heaps of objects. Players alternate, in each turn\n    removing one or more objects from a single non-empty heap. The player who takes the last object wins.\n    - initial_state is list of numbers of objects in each heap\n    - moves is a list of your moves: [heap, number of objects to take]\n    - you play first\n    \"\"\"\n\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state=[1, 2, 4, 8, 16, 32]):\n\n    state = initial_state[:]\n    moves = []\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    def losing(h):  # return True if h is a losing state\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g())",
        "idx_generation": 235,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lb: List[bool], trips=[[1, 1, 1], [1, 0, 0], [1, 1, 1], [0, 0, 0]]) -> bool:\n    \"\"\"\n    Given a list of lists of triples of integers, return True for each list with a total of less than 2 and\n    False for each other list.\n    \"\"\"\n    return len(lb) == len(trips) and all((b is True if sum(s) < 2 else b is False for (b, s) in zip(lb, trips)))\ndef g(trips = [[1, 1, 1], [1, 0, 0], [1, 1, 1], [0, 0, 0]]):\n    return [sum(s) < 2 for s in trips]\nassert f(g())\n",
        "idx_generation": 193,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray) -> bool:\n    \"\"\"Check if the given matrix is symmetric\"\"\"\n    return np.array_equal(matrix, matrix.T)\ndef g(matrix: np.ndarray):\n    return matrix\nassert f(g(np.array([[1, 2, 3], [2, 4, 5], [3, 5, 6]])))\n",
        "idx_generation": 116,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers 'matrix', return True if it is a symmetric matrix.\n    Otherwise, return False.\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    matrix = [[1, 2, 3],\n              [2, 4, 5],\n              [3, 5, 6]]\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 272,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the string contains a repeating pattern of length n.\"\"\"\n    length = len(s)\n    for i in range(n, length//2+1):\n        if length % i == 0:\n            pattern = s[:i]\n            if pattern * (length // i) == s:\n                return True\n    return False\ndef g(n=3):\n    return \"abcabcabc\"\nassert f(g())\n",
        "idx_generation": 158,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray) -> bool:\n    \"\"\"\n    Check if the given array is a Toeplitz matrix.\n\n    A Toeplitz matrix is a matrix in which each descending diagonal from left to right is constant. \n    For example, the following matrix is a Toeplitz matrix:\n    [1, 2, 3, 4]\n    [5, 1, 2, 3]\n    [6, 5, 1, 2]\n    [7, 6, 5, 1]\n\n    The function should return True if the input array is a Toeplitz matrix, and False otherwise.\n    \"\"\"\n    return np.all(arr[:-1, :-1] == arr[1:, 1:])\ndef g():\n    return np.array([[1, 2, 3, 4], [5, 1, 2, 3], [6, 5, 1, 2], [7, 6, 5, 1]])\nassert f(g())\n",
        "idx_generation": 271,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(radius: float, volume: float) -> bool:\n    \"\"\"Check if the given radius and volume belong to a sphere\"\"\"\n    return volume == (4/3) * math.pi * radius**3\n\ndef g(radius=2):\n    \"\"\"Calculate the volume of a sphere with the given radius\"\"\"\n    return (4/3) * math.pi * radius**3\n\nassert f(radius=2, volume=g())\n",
        "idx_generation": 367,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Find two numbers in the given list that sum up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(arr = [1, 2, 3, 4, 5], target = 9):\n    return arr, target\nassert f(*g())\n",
        "idx_generation": 380,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], even_sum=0) -> bool:\n    \"\"\"Check if the sum of even numbers in the list is equal to a given value\"\"\"\n    return sum(num for num in li if num % 2 == 0) == even_sum\ndef g(even_sum = 0):\n    return [i for i in range(1, even_sum*2 + 1) if i % 2 == 0]\nassert f(g())\n",
        "idx_generation": 353,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=14) -> bool:\n    \"\"\"Find a pair of numbers in the list that sum up to the target value.\"\"\"\n    for n in numbers:\n        assert isinstance(n, int)\n    return any(a + b == target for a in numbers for b in numbers)\ndef g(target=14):\n    numbers = [2, 4, 6, 8, 10]\n    return numbers\nassert f(g())\n",
        "idx_generation": 19,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10, count=2) -> bool:\n    \"\"\"Find a subarray of length count that adds up to target\"\"\"\n    return any(sum(arr[i:i+count]) == target for i in range(len(arr) - count + 1))\ndef g(target=10, count=2):\n    return [target // count] * count\nassert f(g())\n",
        "idx_generation": 16,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=11) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[2, 4, 7, 5, 9]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 143,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k=3) -> bool:\n    \"\"\"\n    Check if the binary representation of the number n contains exactly k consecutive 1s.\n    \"\"\"\n    binary = bin(n)[2:]\n    return str(k * '1') in binary\n\ndef g(k=3):\n    return int(k * '1', 2)\n\nassert f(g())\n",
        "idx_generation": 60,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) -> bool:\n    \"\"\"\n    Check if n is a multiple of any number in the list.\n    \"\"\"\n    return any(n % num == 0 for num in lst)\ndef g(lst = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]):\n    return lst[0]\nassert f(g())\n",
        "idx_generation": 29,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=100) -> bool:\n    \"\"\"Check if n is a multiple of a\"\"\"\n    return n % a == 0\ndef g(a=100):\n    return a * 5\nassert f(g())\n",
        "idx_generation": 2,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if it is a magic square.\n\n    A magic square is a square matrix where the sums of each row, each column, and both diagonals are the same.\n    Return True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    \n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for j in range(n):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum != target_sum:\n            return False\n    \n    # Check main diagonal\n    diagonal_sum = 0\n    for i in range(n):\n        diagonal_sum += matrix[i][i]\n    if diagonal_sum != target_sum:\n        return False\n    \n    # Check anti-diagonal\n    anti_diagonal_sum = 0\n    for i in range(n):\n        anti_diagonal_sum += matrix[i][n-i-1]\n    if anti_diagonal_sum != target_sum:\n        return False\n    \n    return True\n\ndef g(matrix=[[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    \"\"\"\n    Check if the given matrix is a magic square.\n    \"\"\"\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 215,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=98765432, b=12345678) -> bool:\n    \"\"\"Check if n is a multiple of a\"\"\"\n    return n % a == 0\ndef g(a=98765432, b=12345678):\n    return a * b\nassert f(g())\n",
        "idx_generation": 118,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=3, b=25) -> bool:\n    \"\"\"Check if the value of x lies within the range defined by a and b\"\"\"\n    return a <= x <= b\n\ndef g(a=3, b=25):\n    x = math.sqrt(a * b)\n    return x\n\nassert f(g())\n",
        "idx_generation": 134,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=8) -> bool:\n    \"\"\"Check if the target is in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(target=8):\n    return [[1, 2, 3], [4, 5, 6], [7, target, 9]]\n\nassert f(g())\n",
        "idx_generation": 42,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8]) -> bool:\n    \"\"\"\n    Given a list of integers, determine if there exists a pair of distinct integers in the list whose product is even.\n    \"\"\"\n    return any(((nums[i] * nums[j]) % 2 == 0) for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8]):\n    return any(((nums[i] * nums[j]) % 2 == 0) for i in range(len(nums)) for j in range(i+1, len(nums)))\nassert f(g())\n",
        "idx_generation": 299,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], n=5) -> bool:\n    \"\"\"Check if there exists n consecutive numbers in nums that add up to a multiple of n.\"\"\"\n    for i in range(len(nums) - n + 1):\n        if sum(nums[i:i+n]) % n == 0:\n            return True\n    return False\ndef g(n=5):\n    return list(range(n))\nassert f(g())\n",
        "idx_generation": 205,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=16) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target number, determine if there exists a path from the top left corner to the bottom right corner\n    such that the sum of the numbers along the path is equal to the target number. You can only move down or right.\n    \"\"\"\n    def dfs(i, j, curr_sum):\n        if i >= len(matrix) or j >= len(matrix[0]):\n            return False\n        curr_sum += matrix[i][j]\n        if curr_sum == target:\n            return True\n        return dfs(i+1, j, curr_sum) or dfs(i, j+1, curr_sum)\n    return dfs(0, 0, 0)\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=16):\n    return matrix\nassert f(g())\n",
        "idx_generation": 235,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is prime.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef g():\n    i = 2\n    while True:\n        if f(i):\n            return i\n        i += 1\nassert f(g())\n",
        "idx_generation": 336,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Find if there exists a subarray in the given list whose sum is equal to the target number.\n    \"\"\"\n    prefixSum = 0\n    sumSet = set()\n    for num in nums:\n        prefixSum += num\n        if prefixSum == target or prefixSum - target in sumSet:\n            return True\n        sumSet.add(prefixSum)\n    return False\n\ndef g(nums: List[int], target: int):\n    return nums, target\n\nassert f(*g([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 15))\n",
        "idx_generation": 224,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr:List[int], k=2) -> bool:\n    \"\"\"Check if there exists two distinct indices i and j such that arr[i] == arr[j] + k\"\"\"\n    return any((arr[i] == arr[j] + k for i in range(len(arr)) for j in range(len(arr)) if i != j))\ndef g(k=2):\n    arr = [1, 3, 5, 6, 8]\n    return arr\nassert f(g())\n",
        "idx_generation": 395,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a=5, b=3) -> bool:\n    \"\"\"Check if the string s contains more a's than b's\"\"\"\n    count_a = s.count('a')\n    count_b = s.count('b')\n    return count_a > count_b\ndef g(a=5, b=3):\n    s = 'a' * a + 'b' * b\n    return s\nassert f(g())\n",
        "idx_generation": 390,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='abcdefg', replacement='123') -> bool:\n    \"\"\"Replace characters in a string with a given replacement string.\"\"\"\n    return s.replace(target, replacement) == replacement\ndef g(target = 'abcdefg', replacement = '123'):\n    return target\nassert f(g())\n",
        "idx_generation": 66,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='Python') -> bool:\n    \"\"\"Check if the word is present in the string\"\"\"\n    return word in s\ndef g(word = 'Python'):\n    return 'Hello, ' + word + '!'\nassert f(g())\n",
        "idx_generation": 245,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome.\"\"\"\n    return arr == arr[::-1]\ndef g():\n    import random\n    arr = random.sample(range(1, 10), 5)\n    return arr + arr[::-1]\nassert f(g())\n",
        "idx_generation": 387,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=3.14, b=6.28) -> bool:\n    \"\"\"Check if the square root of x is equal to a\"\"\"\n    return math.sqrt(x) == a\ndef g(a=3.14, b=6.28):\n    return a * a\nassert f(g())\n",
        "idx_generation": 118,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=2, y=3) -> bool:\n    \"\"\"Check if the given number is a perfect power of x raised to the power of y.\"\"\"\n    root = n ** (1 / y)\n    return math.isclose(root, round(root)) and root ** y == n\n\ndef g(x=2, y=3):\n    return x ** y\n\nassert f(g())\n",
        "idx_generation": 81,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(hands: List[int], target_angle=90) -> bool:\n    \"\"\"Find clock hands = [hour, min] such that the angle is target_angle degrees.\"\"\"\n    (h, m) = hands\n    assert 0 < h <= 12 and 0 <= m < 60\n    hour_angle = 30 * h + m / 2\n    minute_angle = 6 * m\n    return abs(hour_angle - minute_angle) in [target_angle, 360 - target_angle]\ndef g(target_angle = 90):\n    for h in range(1, 13):\n        for m in range(60):\n            hour_angle = 30 * h + m / 2\n            minute_angle = 6 * m\n            if abs(hour_angle - minute_angle) % 360 in [target_angle, 360 - target_angle]:\n                return [h, m]\nassert f(g())\n",
        "idx_generation": 97,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: str, year: int, month: int, day: int) -> bool:\n    \"\"\"Check if a given date is equal to a specific year, month, and day\"\"\"\n    return datetime.datetime.strptime(date, \"%Y-%m-%d\").year == year and datetime.datetime.strptime(date, \"%Y-%m-%d\").month == month and datetime.datetime.strptime(date, \"%Y-%m-%d\").day == day\n\ndef g(year=2021, month=12, day=25):\n    return datetime.datetime(year, month, day).strftime(\"%Y-%m-%d\")\n\nassert f(g(), year=2021, month=12, day=25)\n",
        "idx_generation": 57,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='tivunyxe') -> bool:\n    \"\"\"Capitalize the first letter of word\"\"\"\n    for i in range(len(word)):\n        if i == 0:\n            if s[i] != word[i].upper():\n                return False\n        elif s[i] != word[i]:\n            return False\n    return True\ndef g(word = 'tivunyxe'):\n    return word[0].upper() + word[1:]\nassert f(g())\n",
        "idx_generation": 147,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"\n    Find a subset of integers from the given list where the sum of the subset is equal to the target number\n    \"\"\"\n    n = len(nums)\n    for i in range(1 << n):\n        subset_sum = sum(nums[j] for j in range(n) if (i & (1 << j)) != 0)\n        if subset_sum == target:\n            return True\n    return False\ndef g(target = 20):\n    return [2, 4, 6, 8, 10]\nassert f(g())\n",
        "idx_generation": 34,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers that add up to the target value\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for r in range(1, len(nums)+1) for comb in combinations(nums, r))\ndef g(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]):\n    return nums\nassert f(g())\n",
        "idx_generation": 53,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=5, s=100) -> bool:\n    \"\"\"Construct a list of n distinct integers that sum up to s and the maximum value is greater than 50\"\"\"\n    return len(x) == n and sum(x) == s and (len(set(x)) == n) and max(x) > 50\ndef g(n = 5, s = 100):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x\nassert f(g())\n",
        "idx_generation": 321,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m: int, s: str, x=3, y=5) -> bool:\n    \"\"\"\n    Given two integers n and m and a string s, determine if the number of occurrences of the character 'a' in the first\n    n characters of s is divisible by x and the number of occurrences of the character 'b' in the last m characters of s\n    is divisible by y.\n\n    Sample Input:\n    n = 6\n    m = 7\n    s = 'abcaabbbbb'\n\n    Sample Output:\n    True\n    \"\"\"\n    first_half = s[:n]\n    second_half = s[-m:]\n    count_a = first_half.count('a')\n    count_b = second_half.count('b')\n    return count_a % x == 0 and count_b % y == 0\ndef g(n = 6, m = 7, s = 'abcaabbbbb', x = 3, y = 5):\n    return n, m, s, x, y\nassert f(*g())\n",
        "idx_generation": 53,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, k=3) -> bool:\n    \"\"\"Find if there exists k numbers in nums that sum up to target\"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, k):\n        if sum(combo) == target:\n            return True\n    return False\ndef g(target = 100, k = 3):\n    nums = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    return nums\nassert f(g())\n",
        "idx_generation": 182,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: list, x=10, y=20) -> bool:\n    \"\"\"Check if all elements of the list are between x and y (inclusive)\"\"\"\n    return all(x <= element <= y for element in arr)\ndef g(x=10, y=20):\n    return list(range(x, y+1))\nassert f(g())\n",
        "idx_generation": 274,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of integers in the list that sum up to a target value.\"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 113,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Return True if n is in the list, False otherwise\"\"\"\n    return n in lst\ndef g(lst=[1, 2, 3, 4, 5]):\n    return lst[0]\nassert f(g())\n",
        "idx_generation": 31,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"\n    Given an array of integers and a target value k, find if there exists a subarray with a sum equal to k.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    k = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum - k in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False\n    \ndef g(nums = [1, 2, 3, 4, 5], k = 9):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 25,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Find if the target integer exists in the matrix.\"\"\"\n    row = len(matrix)\n    col = len(matrix[0])\n    left = 0\n    right = row * col - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        num = matrix[mid // col][mid % col]\n        if num == target:\n            return True\n        elif num < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return False\n    \ndef g(matrix=[[1, 3, 5], [7, 9, 11], [13, 15, 17]], target=11):\n    return matrix, target\n\nassert f(*g())\n",
        "idx_generation": 361,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], a=55980, s=7402, e=155818) -> bool:\n    \"\"\"Check if the given list is a subrange of a geometric sequence.\"\"\"\n    return x[0] == a and x[-1] <= e and (x[-1] * s > e) and all([x[i] * s == x[i + 1] for i in range(len(x) - 1)])\n\ndef g(a=55980, s=7402, e=155818):\n    x = [a]\n    while x[-1] <= e:\n        x.append(x[-1] * s)\n    return x[:-1]\nassert f(g())\n",
        "idx_generation": 395,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Check if a target value exists in the given matrix.\"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    row = 0\n    col = n - 1\n    while row < m and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            row += 1\n        else:\n            col -= 1\n    return False\n\ndef g(matrix=[\n    [1, 3, 5, 7],\n    [2, 4, 6, 8],\n    [3, 6, 9, 12],\n]):\n    return matrix\nassert f(g())\n",
        "idx_generation": 50,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], a=0, s=3, e=100) -> bool:\n    \"\"\"Create a list that is a subrange of an arithmetic sequence.\"\"\"\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] for i in range(len(x) - 1)])\n\ndef g(a=0, s=3, e=100):\n    return list(range(a, e + 1, s))\n\nassert f(g())\n",
        "idx_generation": 46,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(seq: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the sequence that add up to the target\"\"\"\n    return any((seq[i] + seq[j] == target) for i in range(len(seq)) for j in range(i+1, len(seq)))\n    \ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 34,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, n=5) -> bool:\n    \"\"\"Check if the minimum value in the array is less than or equal to n\"\"\"\n    return np.min(arr) <= n\n\ndef g(n=5):\n    return np.full((3, 3), n)\n\narr = g()\nassert f(arr)\n",
        "idx_generation": 296,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, num_list=[2, 4, 6, 8, 10]) -> bool:\n    \"\"\"Check if a number is divisible by all the numbers in a list\"\"\"\n    return all(n % num == 0 for num in num_list)\ndef g(num_list=[2, 4, 6, 8, 10]):\n    n = 1\n    for num in num_list:\n        n *= num\n    return n\nassert f(g())\n",
        "idx_generation": 62,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"Check if it is possible to obtain the target number using the given list of numbers and basic arithmetic operations (+, -, *, /)\"\"\"\n    def dfs(nums, current_sum):\n        if len(nums) == 1:\n            return abs(current_sum - target) < 1e-6\n        for i in range(len(nums)):\n            new_nums = nums[:i] + nums[i+1:]\n            if dfs(new_nums, current_sum + nums[i]) or dfs(new_nums, current_sum - nums[i]) or dfs(new_nums, current_sum * nums[i]) or (nums[i] != 0 and current_sum % nums[i] == 0 and dfs(new_nums, current_sum / nums[i])):\n                return True\n        return False\n    \n    return dfs(nums, 0)\n\ndef g(target=24):\n    return [1, 2, 3, 4, target-10]\n\nassert f(g())\n",
        "idx_generation": 4,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Determine if a 9x9 Sudoku board is valid\"\"\"\n    rows = [set() for _ in range(9)]\n    cols = [set() for _ in range(9)]\n    boxes = [[set() for _ in range(3)] for _ in range(3)]\n    \n    for i in range(9):\n        for j in range(9):\n            num = matrix[i][j]\n            if num != 0:\n                if num in rows[i] or num in cols[j] or num in boxes[i//3][j//3]:\n                    return False\n                rows[i].add(num)\n                cols[j].add(num)\n                boxes[i//3][j//3].add(num)\n    return True\ndef g():\n    matrix = [\n        [5, 3, 0, 0, 7, 0, 0, 0, 0],\n        [6, 0, 0, 1, 9, 5, 0, 0, 0],\n        [0, 9, 8, 0, 0, 0, 0, 6, 0],\n        [8, 0, 0, 0, 6, 0, 0, 0, 3],\n        [4, 0, 0, 8, 0, 3, 0, 0, 1],\n        [7, 0, 0, 0, 2, 0, 0, 0, 6],\n        [0, 6, 0, 0, 0, 0, 2, 8, 0],\n        [0, 0, 0, 4, 1, 9, 0, 0, 5],\n        [0, 0, 0, 0, 8, 0, 0, 7, 9]\n    ]\n    return matrix\nassert f(g())\n",
        "idx_generation": 156,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if x is a perfect square\"\"\"\n    return x in [n**2 for n in nums]\ndef g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums[0] ** 2\nassert f(g())\n",
        "idx_generation": 365,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=987654, b=123456) -> bool:\n    \"\"\"\n    Determine if a number is divisible by the sum of its digits.\n    \"\"\"\n    return n % sum(int(d) for d in str(n)) == 0 and n % a == 0 and n % b == 0\ndef g(a=987654, b=123456):\n    return a * b\nassert f(g())\n",
        "idx_generation": 77,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Find a pair of numbers in a list such that their sum is equal to a given target\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target=10):\n    return [2, 8, 4, 6]\nassert f(g())\n",
        "idx_generation": 317,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"\n    Given a list of integers, find two numbers that sum up to the target value.\n\n    Sample input:\n    [2, 4, 7, 11, 15], 9\n\n    Sample output:\n    True\n\n    Explanation:\n    The pair of numbers [2, 7] sum up to 9.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums: List[int] = [2, 4, 7, 11, 15], target: int = 9) -> List[int]:\n    \"\"\"\n    Generate a list of integers and a target value.\n    \"\"\"\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 70,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is symmetric.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\nassert f(g())\n",
        "idx_generation": 143,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists two numbers in a list that sum up to the target.\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5]\n    return nums\nassert f(g())\n",
        "idx_generation": 364,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is symmetric (i.e., equal to its transpose).\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\ndef g(matrix: List[List[int]]):\n    return matrix\nassert f(g([[1, 2, 3], [2, 4, 5], [3, 5, 6]]))\n",
        "idx_generation": 227,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str) -> bool:\n    \"\"\"\n    Given a word, return True if it is a palindrome and False otherwise.\n    \"\"\"\n    return word == word[::-1]\n\ndef g(word=\"racecar\"):\n    return word\n\nassert f(g())\n",
        "idx_generation": 395,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, s='abccba', target=3) -> bool:\n    \"\"\"\n    Given a string consisting of lowercase letters, determine if there is a substring of length at least n that is a\n    palindrome.\n\n    Sample Input:\n    `4, 'abccba'`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    def is_palindrome(string):\n        return string == string[::-1]\n\n    for i in range(len(s) - n + 1):\n        if is_palindrome(s[i:i+n]):\n            return True\n    return False\n\ndef g(s='abccba', target=3):\n    return f(target, s, target)\nassert f(g())\n",
        "idx_generation": 392,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\ndef f(n: int, x=10) -> bool:\n    \"\"\"Check if the square root of n is greater than x.\"\"\"\n    return math.sqrt(n) > x\ndef g(x=10):\n    return x ** 2 + 1\nassert f(g())\n",
        "idx_generation": 120,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, a=0, b=0) -> bool:\n    \"\"\"Find if the given coordinates (x, y, z) form a point on the plane with equation ax + by + z = 0.\"\"\"\n    return a*x + b*y + z == 0\n\ndef g(a=0, b=0):\n    x = 1\n    y = 1\n    z = -a*x - b*y\n    return (x, y, z)\n\nassert f(*g())\n",
        "idx_generation": 33,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target: int = 100, count: int = 4) -> bool:\n    \"\"\"\n    Given an integer n, check if it can be expressed as a sum of count or more consecutive positive integers.\n\n    Sample Input:\n    n = 100\n    target = 100\n    count = 4\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(1, n):\n        s = 0\n        for j in range(i, n):\n            s += j\n            if s == target and j - i + 1 >= count:\n                return True\n            elif s > target:\n                break\n    return False\n\ndef g(n: int = 100, target: int = 100, count: int = 4) -> int:\n    return n\n\nassert f(g())\n",
        "idx_generation": 163,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(year: int, month: int, day: int, hour: int, minute: int, second: int) -> bool:\n    \"\"\"Check if the given datetime is in the future.\"\"\"\n    given_datetime = datetime(year, month, day, hour, minute, second)\n    current_datetime = datetime.now()\n    return given_datetime > current_datetime\n\ndef g():\n    current_datetime = datetime.now()\n    future_datetime = current_datetime.replace(year=current_datetime.year + 1)\n    return future_datetime.year, future_datetime.month, future_datetime.day, future_datetime.hour, future_datetime.minute, future_datetime.second\n\nassert f(*g())\n",
        "idx_generation": 183,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3, target=7) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a combination of k numbers that sum to the target.\n    \"\"\"\n    def backtrack(start, k, target, curr_sum):\n        if k == 0 and curr_sum == target:\n            return True\n        if k == 0 or curr_sum > target:\n            return False\n        for i in range(start, len(nums)):\n            if backtrack(i + 1, k - 1, target, curr_sum + nums[i]):\n                return True\n        return False\n    \n    return backtrack(0, k, target, 0)\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7]):\n    \"\"\"\n    This solution uses backtracking to find all combinations of k numbers from the list that sum to the target.\n    \"\"\"\n    return nums\n\nassert f(g())\n",
        "idx_generation": 160,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int, n=2) -> bool:\n    \"\"\"\n    Find if there exists a combination of n numbers in the given list that add up to the target.\n    \"\"\"\n    import itertools\n    return any(sum(comb) == target for comb in itertools.combinations(nums, n))\ndef g(nums=[1, 2, 3, 4, 5], target=9, n=2):\n    return nums, target, n\nassert f(*g())\n",
        "idx_generation": 33,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import gcd\n\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"Check if it's possible to combine the numbers using basic arithmetic operations (+, -, *, /) to get the target\"\"\"\n    if len(nums) == 1:\n        return nums[0] == target\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            if i != j:\n                new_nums = [nums[k] for k in range(len(nums)) if k != i and k != j]\n                new_nums.append(nums[i] + nums[j])\n                if f(new_nums, target):\n                    return True\n                new_nums.pop()\n                new_nums.append(nums[i] - nums[j])\n                if f(new_nums, target):\n                    return True\n                new_nums.pop()\n                new_nums.append(nums[i] * nums[j])\n                if f(new_nums, target):\n                    return True\n                new_nums.pop()\n                if nums[j] != 0 and nums[i] % nums[j] == 0:\n                    new_nums.append(nums[i] // nums[j])\n                    if f(new_nums, target):\n                        return True\n                    new_nums.pop()\n    return False\n\ndef g(nums=[4, 3, 2, 1]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 62,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(inds: List[int], vecs=[22, 30, 1, 28, 28, 12, 20, 28, 6, 14, 14, 6, 1, 12, 30, 45, 17]) -> bool:\n    \"\"\"\n    Parity learning: Given binary vectors in a subspace, find the secret set S of indices such that:\n    $\\\\sum_{i \\\\in S} x_i = 1 (mod 2)$\n    \"\"\"\n    return all((sum((v >> i & 1 for i in inds)) % 2 == 1 for v in vecs))\ndef g(vecs = [22, 30, 1, 28, 28, 12, 20, 28, 6, 14, 14, 6, 1, 12, 30, 45, 17]):\n    # Gaussian elimination\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n    ans = []\n    pool = [[0] * (d + 1) for _ in range(d)] + [v + [1] for v in vecs]\n    for i in range(d):\n        pool[i][i] = 1\n\n    for i in range(d):  # zero out bit i\n        for v in pool[d:]:\n            if v[i] == 1:\n                break\n        if v[i] == 0:\n            v = pool[i]\n        assert v[i] == 1  # found a vector with v[i] = 1, subtract it off from those with a 1 in the ith coordinate\n        w = v[:]\n        for v in pool:\n            if v[i] == 1:\n                for j in range(d + 1):\n                    v[j] ^= w[j]\n\n    return [i for i in range(d) if pool[i][-1]]\nassert f(g())\n",
        "idx_generation": 294,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a string has exactly n vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for c in s:\n        if c.lower() in vowels:\n            count += 1\n    return count == n\ndef g(n = 3):\n    s = ''\n    for i in range(n):\n        s += 'a'\n    return s\nassert f(g())\n",
        "idx_generation": 167,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(lst: List[int], g1=[(0, 1), (1, 2), (2, 3), (3, 4), (2, 5)], g2=[(0, 4), (1, 5), (4, 1), (1, 2), (2, 3)]) -> bool:\n    \"\"\"\n    You are given two graphs which are permutations of one another and the goal is to find the permutation.\n    Each graph is specified by a list of edges where each edge is a pair of integer vertex numbers.\n    \"\"\"\n    return len(lst) == len(set(lst)) and set(g1) == set((lst[i], lst[j]) for (i, j) in g2)\ndef g(g1=[(0, 1), (1, 2), (2, 3), (3, 4), (2, 5)], g2=[(0, 4), (1, 5), (4, 1), (1, 2), (2, 3)]):\n    # exponentially slow\n    from itertools import permutations\n    n = max(v for g in [g1, g2] for e in g for v in e) + 1\n    g1_set = set(g1)\n    for p in permutations(range(n)):\n        if set((p[i], p[j]) for (i, j) in g2) == g1_set:\n            return list(p)\n    assert False, f\"Graphs are not isomorphic {g1}, {g2}\"\nassert f(g())\n",
        "idx_generation": 231,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the given list that add up to the target value.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target = 10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return (nums, target)\nassert f(*g())\n",
        "idx_generation": 275,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if a pair of numbers in the list sums up to the target value\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    nums = [1, 2, 3, 4, 5]\n    target = 7\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 246,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom collections import Counter\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Check if there are any two distinct elements in the list that sum up to k.\n    \"\"\"\n    counter = Counter(nums)\n\n    for num in nums:\n        complement = k - num\n        if complement in counter and (complement != num or counter[num] > 1):\n            return True\n    \n    return False\n\ndef g(nums: List[int], k: int):\n    return nums, k\n\n# Example usage:\nnums = [1, 2, 3, 4, 5]\nk = 7\n\nassert f(*g(nums, k))\n",
        "idx_generation": 49,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list is a palindrome when read from left to right or right to left\"\"\"\n    return nums == nums[::-1]\ndef g(nums=[1, 2, 3, 2, 1]):\n    return nums\nassert f(g())\n",
        "idx_generation": 20,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"\n    Check if a string is a palindrome and if it repeats n times consecutively.\n    \"\"\"\n    return s == s[::-1] and s * n in s * n\ndef g(n=5):\n    s = \"racecar\"\n    return s * n\nassert f(g())\n",
        "idx_generation": 164,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=10) -> bool:\n    \"\"\"Check if a number is a multiple of another number\"\"\"\n    return n % a == 0 and n % b == 0\ndef g(a=5, b=10):\n    return a * b\nassert f(g())\n",
        "idx_generation": 178,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is symmetric\"\"\"\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix[0])))\ndef g(matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\nassert f(g())\n",
        "idx_generation": 20,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is symmetric along its main diagonal\"\"\"\n    n = len(matrix)\n    return all(matrix[i][j] == matrix[j][i] for i in range(n) for j in range(n))\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\nassert f(g())\n",
        "idx_generation": 64,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=2021) -> bool:\n    \"\"\"Find two elements in the array whose sum is equal to the target.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target=2021):\n    return [target - i for i in range(target)]\n\nassert f(g())\n",
        "idx_generation": 36,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that sums up to the target number.\"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\ndef g(target=10):\n    nums = [1, 4, 6, 8, 9, 3, 2]\n    return nums\nassert f(g())\n",
        "idx_generation": 115,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, num_list=[1, 2, 3, 4, 5, 6]) -> bool:\n    \"\"\"Check if a number is present in a list\"\"\"\n    return n in num_list\ndef g(num_list=[1, 2, 3, 4, 5, 6]):\n    return num_list[0]\nassert f(g())\n",
        "idx_generation": 62,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=10, total=60) -> bool:\n    \"\"\"Find two numbers whose sum is equal to total\"\"\"\n    return n + m == total\ndef g(m = 10, total = 60):\n    return total - m\nassert f(g())\n",
        "idx_generation": 38,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], n=5) -> bool:\n    \"\"\"\n    Find if there are at least n words in the list that contain the letter 'a'\n    \"\"\"\n    count = sum(1 for word in words if 'a' in word)\n    return count >= n\n\ndef g(n=5):\n    words = ['apple', 'banana', 'cherry', 'date', 'elderberry']\n    return words * n\n\nassert f(g())\n",
        "idx_generation": 179,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a=\"race\", b=\"car\") -> bool:\n    \"\"\"\n    Check if a string is a palindrome after removing some characters.\n    \"\"\"\n    s = s.replace(a, \"\").replace(b, \"\")\n    return s == s[::-1]\ndef g(a=\"race\", b=\"car\"):\n    return a + b\nassert f(g())\n",
        "idx_generation": 77,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Check if the target value is present in the matrix\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix: List[List[int]], target: int):\n    \"\"\"\n    Return the matrix with the target value appended to the last row\n    \"\"\"\n    matrix[-1].append(target)\n    return matrix\n\n# Test Case\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\ntarget = 5\nassert f(g(matrix, target), target)\n",
        "idx_generation": 184,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square.\"\"\"\n    n = len(matrix)\n    magic_sum = n * (n**2 + 1) // 2\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diagonal_sum1 = sum(matrix[i][i] for i in range(n))\n    diagonal_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(sum == magic_sum for sum in row_sums + col_sums + [diagonal_sum1, diagonal_sum2])\n\ndef g():\n    \"\"\"Generate a magic square with odd dimension.\"\"\"\n    n = 3\n    magic_square = [[0] * n for _ in range(n)]\n    i, j = n // 2, n - 1\n    num = 1\n    while num <= n**2:\n        if i == -1 and j == n:\n            j = n - 2\n            i = 0\n        else:\n            if j == n:\n                j = 0\n            if i < 0:\n                i = n - 1\n        if magic_square[int(i)][int(j)]:\n            j = j - 2\n            i = i + 1\n            continue\n        else:\n            magic_square[int(i)][int(j)] = num\n            num = num + 1\n        j = j + 1\n        i = i - 1\n    return magic_square\n\nassert f(g())\n",
        "idx_generation": 251,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Find n such that n is a prime number.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    n = 7\n    return n\n\nassert f(g())\n",
        "idx_generation": 395,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target: str) -> bool:\n    \"\"\"Check if the target string is a substring of the given string.\"\"\"\n    return target in s\n\ndef g(s = \"Hello, world!\", target = \"world\"):\n    return s, target\n\nassert f(*g())\n",
        "idx_generation": 393,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, r=5) -> bool:\n    \"\"\"Check if a point is inside a circle.\"\"\"\n    return math.sqrt(x**2 + y**2) <= r\ndef g(x=3, y=4, r=5):\n    return x, y\nassert f(*g())\n",
        "idx_generation": 123,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=3.14) -> bool:\n    \"\"\"Check if x is the square root of a rounded to the nearest integer\"\"\"\n    return x == math.isqrt(round(a))\n    \ndef g(a = 3.14):\n    return math.isqrt(round(a))\n    \nassert f(g())\n",
        "idx_generation": 233,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=2, b=1125899906842624) -> bool:\n    \"\"\"Solve a power problem\"\"\"\n    return math.pow(a, n) == b\ndef g(a=2, b=1125899906842624):\n    if a == 1:\n        return b\n    for n in [int(math.log(b, a)), int(math.log(b, a)) + 1, int(math.log(b, a)) - 1]:\n        if math.pow(a, n) == b:\n            return n\nassert f(g())\n",
        "idx_generation": 176,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(s: str, n: int, chars=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if the given string contains at least n vowels.\"\"\"\n    count = 0\n    for char in s:\n        if char in chars:\n            count += 1\n    return count >= n\n\ndef g(n=3, chars=['a', 'e', 'i', 'o', 'u']):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    s = ''.join(random.choices(vowels + ['b', 'c', 'd', 'f', 'g'], k=10))\n    return s, n, chars\n\nassert f(*g())\n",
        "idx_generation": 124,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['ab', 'cd', 'ef', 'gh']) -> bool:\n    \"\"\"\n    Find a string that contains each string in substrings in reverse order, e.g., 'hgfedcba' for 'ab' and 'cd'\n    \"\"\"\n    return all((sub[::-1] in s[i::len(substrings)] for (i, sub) in enumerate(substrings)))\ndef g(substrings = ['ab', 'cd', 'ef', 'gh']):\n    m = max(len(s) for s in substrings)\n    return \"\".join([(s[::-1][i] if i < len(s) else \" \") for i in range(m) for s in substrings])\nassert f(g())\n",
        "idx_generation": 96,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(matrix: List[List[int]], target=20, max_elements=4) -> bool:\n    \"\"\"Find a selection of at most max_elements elements from the matrix whose sum is the target value.\"\"\"\n    for row in matrix:\n        for element in row:\n            assert isinstance(element, int)\n    return sum([element for row in matrix for element in row]) == target and len([element for row in matrix for element in row]) <= max_elements\ndef g(target = 20, max_elements = 4):\n    from itertools import combinations\n    for n in range(1, max_elements + 1):\n        for c in combinations(range(1, 10), n):\n            if sum(c) == target:\n                return [[element for element in c]]\nassert f(g())\n",
        "idx_generation": 123,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=7) -> bool:\n    \"\"\"Check if the string has at least n number of vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count >= n\ndef g(n=7):\n    return 'aeiou' + 'a' * (n-5)\nassert f(g())\n",
        "idx_generation": 174,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"Check if string t is an anagram of string s\"\"\"\n    return sorted(s) == sorted(t)\n\ndef g():\n    s = \"listen\"\n    t = \"silent\"\n    return s, t\n\nassert f(*g())\n",
        "idx_generation": 277,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(seq: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the sequence that sums up to the target\"\"\"\n    seen = set()\n    for num in seq:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10 - target]\nassert f(g())\n",
        "idx_generation": 361,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists k consecutive elements in the array that are all even numbers.\"\"\"\n    n = len(arr)\n    for i in range(n - k + 1):\n        if all(num % 2 == 0 for num in arr[i:i+k]):\n            return True\n    return False\n\ndef g():\n    return [1, 2, 4, 6, 8, 10, 12, 14, 16, 18]\n\nassert f(g())\n",
        "idx_generation": 207,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if n is a palindrome\"\"\"\n    return str(n) == str(n)[::-1]\ndef g(n: int = 12321):\n    return n\nassert f(g())\n",
        "idx_generation": 28,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(m: int, n: int, target: int) -> bool:\n    \"\"\"Find if the target is present in the multiplication table of m and n.\"\"\"\n    return any(target in [i*j for i in range(1, m+1)] for j in range(1, n+1))\ndef g(m: int, n: int):\n    return m * n\nassert f(g(5, 10), 5, 10)\n",
        "idx_generation": 353,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], a=2, r=3, n=5) -> bool:\n    \"\"\"Check if the list contains a geometric sequence with common ratio r and length n.\"\"\"\n    return all([x[i] * r == x[i + 1] for i in range(len(x) - 1)]) and len(x) >= n\ndef g(a = 2, r = 3, n = 5):\n    return [a * r ** i for i in range(n)]\nassert f(g())\n",
        "idx_generation": 5,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\ndef f(nums: List[int], n=10) -> bool:\n    \"\"\"Check if there exists a number in nums that is divisible by n and has at least n divisors.\"\"\"\n    import math\n    for num in nums:\n        if num % n == 0:\n            count = 2\n            for i in range(2, int(math.sqrt(num)) + 1):\n                if num % i == 0:\n                    count += 2\n                if count >= n:\n                    return True\n            if math.sqrt(num).is_integer() and count + 1 >= n:\n                return True\n    return False\ndef g(n=10):\n    return [n * i for i in range(1, 11)]\nassert f(g())\n",
        "idx_generation": 205,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"\n    Check if it is possible to form the target number using a combination of numbers from the matrix.\n    Each number can only be used once and numbers can be selected from adjacent cells (horizontally or vertically).\n    \"\"\"\n    def helper(matrix, target, visited, row, col):\n        if target == 0:\n            return True\n        if row < 0 or row >= len(matrix) or col < 0 or col >= len(matrix[0]) or visited[row][col]:\n            return False\n        if matrix[row][col] == target:\n            return True\n        visited[row][col] = True\n        if helper(matrix, target - matrix[row][col], visited, row+1, col) or \\\n           helper(matrix, target - matrix[row][col], visited, row-1, col) or \\\n           helper(matrix, target - matrix[row][col], visited, row, col+1) or \\\n           helper(matrix, target - matrix[row][col], visited, row, col-1):\n            return True\n        visited[row][col] = False\n        return False\n    rows = len(matrix)\n    cols = len(matrix[0])\n    visited = [[False for _ in range(cols)] for _ in range(rows)]\n    for i in range(rows):\n        for j in range(cols):\n            if helper(matrix, target, visited, i, j):\n                return True\n    return False\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\nassert f(g())\n",
        "idx_generation": 315,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix, check if it is symmetric.\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix, return the transpose of the matrix.\n    \"\"\"\n    n = len(matrix)\n    transpose = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            transpose[j][i] = matrix[i][j]\n    return transpose\nassert f(g([[1, 2, 3], [2, 4, 5], [3, 5, 6]]))\n",
        "idx_generation": 127,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there is a subset of nums that adds up to target\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n    return dp[n][target]\n\ndef g(n=10, target=10):\n    return random.choices(range(1, 10), k=n)\n\nassert f(g())\n",
        "idx_generation": 85,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists two numbers in the list that sum up to the target.\"\"\"\n    return any((target - i in arr for i in arr))\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 146,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k=5, m=3) -> bool:\n    \"\"\"Check if a number is a multiple of k and is greater than m.\"\"\"\n    return n % k == 0 and n > m\ndef g(k = 5, m = 3):\n    return k * (m + 1)\nassert f(g())\n",
        "idx_generation": 64,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(x: int, a=10, b=20) -> bool:\n    \"\"\"Check if x is a random number between a and b\"\"\"\n    return a <= x <= b\n\ndef g(a=10, b=20):\n    return random.randint(a, b)\n\nassert f(g())\n",
        "idx_generation": 61,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the length of s is divisible by n\"\"\"\n    return len(s) % n == 0\n\ndef g(s=\"Hello\", n=3):\n    return s * n\n\nassert f(g())\n",
        "idx_generation": 199,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"\n    24 Game Solver\n\n    Given a list of four integers, determine if it is possible to combine the four numbers using the basic\n    arithmetic operations (+, -, *, /) to obtain the target value of 24.\n\n    Example:\n    nums = [4, 1, 8, 7]\n    output: True (4 * 7 - 8 * 1 = 24)\n    \"\"\"\n    assert len(nums) == 4 and all((isinstance(n, int) for n in nums))\n    def helper(nums):\n        if len(nums) == 1:\n            return abs(nums[0] - target) < 1e-6\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                a, b = nums[i], nums[j]\n                new_nums = [x for k, x in enumerate(nums) if k != i and k != j]\n                if helper(new_nums + [a + b]) or helper(new_nums + [a - b]) or helper(new_nums + [b - a]) or helper(new_nums + [a * b]) or (b != 0 and helper(new_nums + [a / b])) or (a != 0 and helper(new_nums + [b / a])):\n                    return True\n        return False\n    return helper(nums)\ndef g(target=24):\n    return [4, 1, 8, 7]\nassert f(g())\n",
        "idx_generation": 78,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k: int = 10) -> bool:\n    \"\"\"Check if n is divisible by k\"\"\"\n    return n % k == 0\ndef g(k: int = 10):\n    return k * 10\nassert f(g())\n",
        "idx_generation": 28,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, determine if there exist two elements in the list whose sum is equal to the target.\n    Return True if such elements exist, False otherwise.\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5], target=9):\n    return arr, target\n\nassert f(*g())\n",
        "idx_generation": 180,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is symmetric.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\nassert f(g())\n",
        "idx_generation": 188,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exists two distinct indices i and j in the list nums such that nums[i] + nums[j] = k.\"\"\"\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            if i != j and nums[i] + nums[j] == k:\n                return True\n    return False\n\ndef g(k=3):\n    return [1, k-1, 2*k]\n\nassert f(g())\n",
        "idx_generation": 42,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=1, b=2, c=3, d=4) -> bool:\n    \"\"\"Check if n is divisible by the sum of a, b, c, and d\"\"\"\n    return n % (a + b + c + d) == 0\n\ndef g(a=1, b=2, c=3, d=4):\n    return (a + b + c + d) * 10\n    \nassert f(g())\n",
        "idx_generation": 284,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3, m=4) -> bool:\n    \"\"\"Check if a substring exists in a given string\"\"\"\n    return s[n:m] in s\ndef g(s = \"Hello World\", n = 3, m = 4):\n    return s\nassert f(g())\n",
        "idx_generation": 38,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=1000) -> bool:\n    \"\"\"Find three numbers in the list that sum up to the target.\"\"\"\n    from itertools import combinations\n    return any(sum(combo) == target for combo in combinations(nums, 3))\ndef g(target = 1000):\n    nums = [i for i in range(1, target)]\n    return nums\nassert f(g())\n",
        "idx_generation": 396,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], n=5, prefix='p', suffix='s') -> bool:\n    \"\"\"Check if any word in a given list starts with a given prefix and ends with a given suffix\"\"\"\n    return any(word.startswith(prefix) and word.endswith(suffix) for word in words) and len(words) == n\ndef g(n = 5, prefix = 'p', suffix = 's'):\n    return [prefix + str(i) + suffix for i in range(n)]\nassert f(g())\n",
        "idx_generation": 396,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(e: List[int], a=-8675309, b=-1234567, c=9876543, d=-2468135) -> bool:\n    \"\"\"\n    Check if the given point lies on the line.\n    Solution should be a boolean value.\n    \"\"\"\n    x, y = e\n    return a * x + b * y + c == d\ndef g(a=-8675309, b=-1234567, c=9876543, d=-2468135):\n    if b != 0:\n        x = 0\n        y = (d - a * x - c) / b\n    elif a != 0:\n        y = 0\n        x = (d - b * y - c) / a\n    else:\n        x = 0\n        y = 0\n    return [x, y]\nassert f(g())\n",
        "idx_generation": 130,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(radius: float, volume=523.6) -> bool:\n    \"\"\"Check if the volume of a sphere is within a given range\"\"\"\n    return math.isclose((4/3) * math.pi * radius**3, volume, rel_tol=1e-5)\ndef g(volume = 523.6):\n    return (3 * volume / (4 * math.pi))**(1/3)\nassert f(g())\n",
        "idx_generation": 296,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(path: List[int], weights=[{0: 2, 1: 1, 2: 3}, {0: 5, 3: 2}, {4: 1}, {1: 1, 2: 2}, {3: 1, 5: 3}, {1: 2, 5: 1}], bound=8) -> bool:\n    \"\"\"\n    Check if there exists a path from node 0 to node 5 in the given directed graph,\n    such that the sum of the weights of the edges in the path does not exceed the bound.\n    \"\"\"\n    return path[0] == 0 and path[-1] == 5 and (sum([weights[path[i]][path[i+1]] for i in range(len(path)-1)]) <= bound)\ndef g(weights=[{0: 2, 1: 1, 2: 3}, {0: 5, 3: 2}, {4: 1}, {1: 1, 2: 2}, {3: 1, 5: 3}, {1: 2, 5: 1}], bound=8):\n    # Depth-first search\n    stack = [(0, [0])]\n    while stack:\n        node, path = stack.pop()\n        if node == 5:\n            return path\n        for neighbor in weights[node]:\n            if neighbor not in path:\n                stack.append((neighbor, path + [neighbor]))\n    return []\nassert f(g())\n",
        "idx_generation": 79,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int = 100, count: int = 3) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, find a combination of count or more numbers from the list that\n    add up to the target value.\n\n    Sample Input:\n    nums = [10, 20, 30, 40, 50]\n    target = 100\n    count = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    from itertools import combinations\n    for i in range(count, len(nums) + 1):\n        for combo in combinations(nums, i):\n            if sum(combo) == target:\n                return True\n    return False\n\ndef g(nums: List[int] = [10, 20, 30, 40, 50], target: int = 100, count: int = 3) -> List[int]:\n    return nums\n\nassert f(g())\n",
        "idx_generation": 163,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if any combination of n numbers in a list sums to 10\"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, n):\n        if sum(combo) == 10:\n            return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5]):\n    for n in range(1, len(nums) + 1):\n        if f(n):\n            return n\n    return 0\nassert f(g())\n",
        "idx_generation": 203,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(n: int, nums=[10, 20, 30, 40, 50], target=100) -> bool:\n    \"\"\"Find a combination of numbers from the list that sum up to the target\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for r in range(len(nums) + 1) for comb in combinations(nums, r))\ndef g(nums=[10, 20, 30, 40, 50], target=100):\n    from itertools import combinations\n    for r in range(len(nums) + 1):\n        for comb in combinations(nums, r):\n            if sum(comb) == target:\n                return comb\n    return []\nassert f(g())\n",
        "idx_generation": 145,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='python', count=3) -> bool:\n    \"\"\"Check if the substring 'python' appears count number of times in the string s\"\"\"\n    return s.count(substr) == count\ndef g(substr='python', count=3):\n    return substr * count\nassert f(g())\n",
        "idx_generation": 280,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Find if a target value exists in a sorted matrix.\"\"\"\n    if not matrix or not matrix[0]:\n        return False\n    rows, cols = len(matrix), len(matrix[0])\n    row, col = 0, cols - 1\n    while row < rows and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            row += 1\n        else:\n            col -= 1\n    return False\ndef g(matrix = [[1, 4, 7, 11], [2, 5, 8, 12], [3, 6, 9, 16], [10, 13, 14, 17]], target = 7):\n    return matrix, target\nassert f(*g())\n",
        "idx_generation": 278,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray) -> bool:\n    \"\"\"\n    Check if the given 2D numpy array has a row that contains all zeros.\n    \"\"\"\n    return any(np.all(row == 0) for row in arr)\n\ndef g():\n    \"\"\"\n    Generate a 2D numpy array with a row that contains all zeros.\n    \"\"\"\n    return np.array([[1, 2, 3], [0, 0, 0], [4, 5, 6]])\n\nassert f(g())\n",
        "idx_generation": 335,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"\n    Find a string that contains each string in substrings alternating, e.g., 'abcpdadeatet' for 'apple', 'banana', 'cherry', and 'date'\n    \"\"\"\n    return all((sub in s[i::len(substrings)] for (i, sub) in enumerate(substrings)))\ndef g(substrings=['apple', 'banana', 'cherry', 'date']):\n    m = max(len(s) for s in substrings)\n    return \"\".join([(s[i] if i < len(s) else \" \") for i in range(m) for s in substrings])\nassert f(g())\n",
        "idx_generation": 349,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(points: List[Tuple[int, int]]) -> bool:\n    \"\"\"\n    Given a list of points in a 2D plane, return True if there exist three points that form a right-angled triangle.\n    \"\"\"\n    def get_distance(p1, p2):\n        x1, y1 = p1\n        x2, y2 = p2\n        return (x2 - x1) ** 2 + (y2 - y1) ** 2\n\n    distances = set()\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            distance = get_distance(points[i], points[j])\n            if distance in distances:\n                return True\n            distances.add(distance)\n    return False\n\ndef g():\n    return [(0, 0), (1, 1), (2, 2), (3, 3), (4, 4)]\n\nassert f(g())\n",
        "idx_generation": 382,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, divisors=[2, 3, 5]) -> bool:\n    \"\"\"\n    Check if a number is divisible by all the given divisors.\n\n    Example:\n    num = 30\n    divisors = [2, 3, 5]\n    output: True\n    \"\"\"\n    return all((num % d == 0 for d in divisors))\ndef g(divisors=[2, 3, 5]):\n    num = 1\n    for d in divisors:\n        num *= d\n    return num\nassert f(g())\n",
        "idx_generation": 10,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the matrix is symmetric.\"\"\"\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix[0])))\ndef g():\n    matrix = [[1, 2, 3],\n              [2, 4, 5],\n              [3, 5, 6]]\n    return matrix\nassert f(g())\n",
        "idx_generation": 145,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subarray whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    mod_count = [0] * k\n    mod_count[0] = 1\n    \n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        mod_count[prefix_sum] += 1\n    \n    return any(count >= 2 for count in mod_count)\n\ndef g(k=3):\n    nums = [7, 4, 9, 2, 8, 1]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 298,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=3) -> bool:\n    \"\"\"\n    Given a string and a target length, determine if there is a substring of length target that consists\n    of only unique characters.\n\n    Sample Input:\n    `\"abccde\"`\n\n    Sample Output:\n    `False`\n    \"\"\"\n    for i in range(len(s) - target + 1):\n        substring = s[i:i+target]\n        if len(substring) == len(set(substring)):\n            return True\n    return False\n\ndef g(target=3):\n    return \"abcde\"\n\nassert f(g())\n",
        "idx_generation": 325,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a list that adds up to a target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target = 50):\n    return [10, 20, 30, 40, 50]\nassert f(g())\n",
        "idx_generation": 1,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\ndef f(n: int, a=3) -> bool:\n    \"\"\"Check if n is a power of a\"\"\"\n    return n > 0 and a > 1 and a ** int(round(math.log(n, a))) == n\ndef g(a=3):\n    return a ** 5\nassert f(g())\n",
        "idx_generation": 204,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=5) -> bool:\n    \"\"\"Check if the sum of any n consecutive numbers in the list x is divisible by n.\"\"\"\n    return any(sum(x[i:i+n]) % n == 0 for i in range(len(x) - n + 1))\n\ndef g(n=5):\n    return list(range(1, 10 * n + 1))\n\nassert f(g())\n",
        "idx_generation": 3,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], n=5, s=20) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\n\ndef g(n=5, s=20):\n    x = []\n    for i in range(n):\n        x.append(s // n)\n    return x\n\nassert f(g())\n",
        "idx_generation": 93,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"Check if the string contains each substring in the given order.\"\"\"\n    return all([sub in s for sub in substrings])\ndef g(substrings=['apple', 'banana', 'cherry', 'date']):\n    return \"\".join(substrings)\nassert f(g())\n",
        "idx_generation": 79,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=3) -> bool:\n    \"\"\"Check if n is divisible by either a or b\"\"\"\n    return n % a == 0 or n % b == 0\n    \ndef g(a = 2, b = 3):\n    return a * b\n\nassert f(g())\n",
        "idx_generation": 45,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], target: int = 10) -> bool:\n    \"\"\"Check if there exists a pair of distinct numbers in the list x that sum up to the target\"\"\"\n    n = len(x)\n    num_set = set()\n\n    for i in range(n):\n        if target - x[i] in num_set:\n            return True\n        num_set.add(x[i])\n    \n    return False\n\ndef g(target: int = 10):\n    x = [1, 3, 5, 7, 9]\n    return x\n\nassert f(g())\n",
        "idx_generation": 224,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Return True if there exists a subarray of length k in nums that contains only even numbers\"\"\"\n    return any(all(num % 2 == 0 for num in nums[i:i+k]) for i in range(len(nums) - k + 1))\ndef g(k = 3):\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\nassert f(g())\n",
        "idx_generation": 63,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Find a submatrix in matrix that adds up to target.\"\"\"\n    def submatrix_sum(start_row, start_col, end_row, end_col):\n        return sum(matrix[i][j] for i in range(start_row, end_row+1) for j in range(start_col, end_col+1))\n    rows, cols = len(matrix), len(matrix[0])\n    for start_row in range(rows):\n        for start_col in range(cols):\n            for end_row in range(start_row, rows):\n                for end_col in range(start_col, cols):\n                    if submatrix_sum(start_row, start_col, end_row, end_col) == target:\n                        return True\n    return False\ndef g(target = 20):\n    return [[i+j for j in range(10)] for i in range(10)]\nassert f(g())\n",
        "idx_generation": 41,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target number exists in the matrix.\"\"\"\n    return any(target in row for row in matrix)\ndef g(target = 0):\n    matrix = [[i+j for i in range(10)] for j in range(10)]\n    return matrix\nassert f(g())\n",
        "idx_generation": 396,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=3) -> bool:\n    \"\"\"Check if the list contains three consecutive elements that form a geometric progression.\"\"\"\n    return any(x[i] * x[i+2] == x[i+1] * x[i+1] for i in range(len(x)-2))\ndef g(n=3):\n    return [1] * n\nassert f(g())\n",
        "idx_generation": 50,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"\n    Check if the given string contains the specified substring.\n    \"\"\"\n    return substring in s\ndef g(substring='abc'):\n    return \"xyzabc123\"\nassert f(g())\n",
        "idx_generation": 396,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, n=5) -> bool:\n    \"\"\"Check if the sum of the squares of three numbers is equal to n\"\"\"\n    return math.isclose(x**2 + y**2 + z**2, n)\n\ndef g(n = 5):\n    x = 0\n    y = 0\n    z = math.sqrt(n)\n    return x, y, z\n\nassert f(*g())\n",
        "idx_generation": 130,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(path: List[int], edges=[[0, 11], [0, 7], [7, 5], [0, 22], [11, 22], [11, 33], [22, 33]], u=0, v=33, bound=5) -> bool:\n    \"\"\"Find a path from node u to node v, of a bounded length, in the given digraph on vertices 0, 1,..., n.\"\"\"\n    assert path[0] == u and path[-1] == v and all(([i, j] in edges for (i, j) in zip(path, path[1:])))\n    return len(path) <= bound\ndef g(edges = [[0, 11], [0, 7], [7, 5], [0, 22], [11, 22], [11, 33], [22, 33]], u = 0, v = 33, bound = 5):\n    # Dijkstra's algorithm\n    import heapq\n    from collections import defaultdict\n    queue = [(0, u, u)]  # distance, node, trail\n\n    trails = {}\n    neighbors = defaultdict(set)\n    for (i, j) in edges:\n        neighbors[i].add(j)\n\n    while queue:\n        dist, i, j = heapq.heappop(queue)\n        if i in trails:\n            continue\n        trails[i] = j\n        if i == v:\n            break\n        for j in neighbors[i]:\n            if j not in trails:\n                heapq.heappush(queue, (dist + 1, j, i))\n    if v in trails:\n        rev_path = [v]\n        while rev_path[-1] != u:\n            rev_path.append(trails[rev_path[-1]])\n        return rev_path[::-1]\nassert f(g())\n",
        "idx_generation": 85,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"\n    Given a string s, find a substring of length n such that all characters in the substring are unique.\n    \"\"\"\n    return len(set(s[:n])) == n\ndef g(n = 5):\n    return \"abcde\" * (n // 5) + \"a\" * (n % 5)\nassert f(g())\n",
        "idx_generation": 225,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there are three numbers in the list that form a Pythagorean triplet\"\"\"\n    from itertools import combinations\n    return any(a**2 + b**2 == c**2 for a, b, c in combinations(nums, 3))\ndef g(nums=[3, 4, 5, 6, 7]):\n    return nums\nassert f(g())\n",
        "idx_generation": 20,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, n=5) -> bool:\n    \"\"\"Check if there are n distinct numbers in nums that sum up to the target\"\"\"\n    return len(set(nums)) >= n and any(sum(i) == target for i in itertools.combinations(nums, n))\ndef g(target=100, n=5):\n    nums = list(range(1, target))\n    return nums[:n-1] + [target - sum(nums[:n-1])]\nassert f(g())\n",
        "idx_generation": 195,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, vowels='aeiou') -> bool:\n    \"\"\"Check if all vowels in the string are in a given set\"\"\"\n    return all(char in vowels for char in s.lower() if char.isalpha())\ndef g(vowels='aeiou'):\n    return ''.join(vowel.upper() for vowel in vowels)\nassert f(g())\n",
        "idx_generation": 353,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 280,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, n=3) -> bool:\n    \"\"\"Check if the array has all elements greater than n.\"\"\"\n    return np.all(arr > n)\n\ndef g(n = 3):\n    arr = np.arange(n+1, 2*n+1)\n    return arr\n\nassert f(g())\n",
        "idx_generation": 349,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='racecar', reverse=True) -> bool:\n    \"\"\"Either reverse a string or don't based on the reverse flag\"\"\"\n    return (s[::-1] == target) == reverse\ndef g(target = 'racecar', reverse = True):\n    return target[::-1] if reverse else target + \"x\"\nassert f(g())\n",
        "idx_generation": 360,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target value.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums)))\ndef g(target=100):\n    return list(range(target // 2)) + [target]\nassert f(g())\n",
        "idx_generation": 13,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix, determine if it is symmetric along its main diagonal.\n    \"\"\"\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix)))\ndef g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\nassert f(g())\n",
        "idx_generation": 183,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find if there exists a pair of numbers that adds up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target = 100):\n    return [i for i in range(1, target)]\nassert f(g())\n",
        "idx_generation": 387,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=10, b=20, c=30, d=40) -> bool:\n    \"\"\"Check if the sum of x and a is equal to the sum of b and c\"\"\"\n    return x + a == b + c\ndef g(a=10, b=20, c=30, d=40):\n    return d\nassert f(g())\n",
        "idx_generation": 19,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10]) -> bool:\n    \"\"\"Check if n is a multiple of all the numbers in the list\"\"\"\n    for num in nums:\n        if n % num != 0:\n            return False\n    return True\ndef g(nums=[2, 4, 6, 8, 10]):\n    product = 1\n    for num in nums:\n        product *= num\n    return product\nassert f(g())\n",
        "idx_generation": 243,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[7, 14, 21, 28, 35], upper_bound=1000) -> bool:\n    \"\"\"Check if n is divisible by all numbers in nums and is less than or equal to the upper_bound.\"\"\"\n    return all((n % i == 0 for i in nums)) and 0 < n <= upper_bound\ndef g(nums = [7, 14, 21, 28, 35], upper_bound = 1000):\n    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans\nassert f(g())\n",
        "idx_generation": 69,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 3, 5, 7, 11, 13], upper_bound=1000) -> bool:\n    \"\"\"Check if a number is prime.\"\"\"\n    return n > 1 and all(n % i != 0 for i in range(2, int(n ** 0.5) + 1)) and n <= upper_bound\ndef g(nums = [2, 3, 5, 7, 11, 13], upper_bound = 1000):\n    if nums == []:\n        return 0\n    return next(n for n in range(2, upper_bound + 1) if all(n % i != 0 for i in range(2, int(n ** 0.5) + 1)))\nassert f(g())\n",
        "idx_generation": 202,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(delta: List[int], nums=[[1, 2, 3], [-4, 5, -6], [7, -8, 9]]) -> bool:\n    \"\"\"Find the missing triple of integers to make them all add up to 0 coordinatewise\"\"\"\n    return all((sum((vec[i] for vec in nums)) + delta[i] == 0 for i in range(3)))\ndef g(nums = [[1, 2, 3], [-4, 5, -6], [7, -8, 9]]):\n    return [-sum(vec[i] for vec in nums) for i in range(3)]\nassert f(g())\n",
        "idx_generation": 264,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], a=1, s=1, e=1000) -> bool:\n    \"\"\"Create a list that is a subrange of an arithmetic sequence.\"\"\"\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] for i in range(len(x) - 1)])\n\ndef g(a=1, s=1, e=1000):\n    return list(range(a, e + 1, s))\n\nassert f(g())\n",
        "idx_generation": 46,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the given list that sums up to the target value.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(n=10, target=15):\n    \"\"\"\n    Generate a list of random integers.\n    \"\"\"\n    import random\n    return random.sample(range(1, n+1), n), target\n\nassert f(*g())\n",
        "idx_generation": 281,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of distinct indices i and j such that arr[i] + arr[j] = target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target=0):\n    return [target, -target]\n\nassert f(g())\n",
        "idx_generation": 86,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[float], threshold=0.5) -> bool:\n    \"\"\"\n    Given a list of floating-point numbers, return True if all numbers in the list are greater than or equal to the threshold,\n    otherwise return False.\n    \"\"\"\n    return all(x >= threshold for x in lst)\n\ndef g(threshold=0.5):\n    return [0.6, 0.7, 0.8, 0.9]\n\nassert f(g())\n",
        "idx_generation": 56,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find two numbers in the list that add up to the target.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[2, 5, 7, 9, 4, 1, 8]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 397,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(grid: List[List[int]]) -> bool:\n    \"\"\"Check if the given grid forms a magic square\"\"\"\n    n = len(grid)\n    target_sum = sum(grid[0])\n    for row in grid:\n        if sum(row) != target_sum:\n            return False\n    for col in range(n):\n        col_sum = sum(grid[row][col] for row in range(n))\n        if col_sum != target_sum:\n            return False\n    diag_sum1 = sum(grid[i][i] for i in range(n))\n    diag_sum2 = sum(grid[i][n - i - 1] for i in range(n))\n    if diag_sum1 != target_sum or diag_sum2 != target_sum:\n        return False\n    return True\n\ndef g(grid=[[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return grid\n\nassert f(g())\n",
        "idx_generation": 85,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substr='python') -> bool:\n    \"\"\"\n    Given a string and a substring, check if the substring is present in the string.\n    \"\"\"\n    return substr in string\n\ndef g(string='I love python', substr='python'):\n    return string\n\nassert f(g())\n",
        "idx_generation": 397,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the sum of the first n elements in the list is equal to n * (n + 1) / 2.\"\"\"\n    return sum(lst[:n]) == n * (n + 1) // 2\ndef g(lst=[1, 2, 3, 4, 5]):\n    return len(lst)\nassert f(g())\n",
        "idx_generation": 131,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a combination of numbers in the list that sums up to the target\"\"\"\n    def dfs(idx, current_sum):\n        if current_sum == target:\n            return True\n        if current_sum > target or idx == len(nums):\n            return False\n        return dfs(idx+1, current_sum + nums[idx]) or dfs(idx+1, current_sum)\n    \n    return dfs(0, 0)\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90, target-450]\n\nassert f(g())\n",
        "idx_generation": 4,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=5) -> bool:\n    \"\"\"\n    Given a string s and an integer k, check if the string can be partitioned into k or fewer substrings such that each\n    substring is a palindrome.\n\n    Sample Input:\n    s = \"abcba\"\n\n    Sample Output:\n    True\n\n    Explanation:\n    The string can be partitioned into \"a\", \"b\", \"c\", \"b\", \"a\", each of which is a palindrome.\n    \"\"\"\n    def is_palindrome(s):\n        return s == s[::-1]\n    n = len(s)\n    dp = [[False] * (n+1) for _ in range(k+1)]\n    dp[0][0] = True\n    for i in range(1, k+1):\n        for j in range(1, n+1):\n            for l in range(0, j+1):\n                if is_palindrome(s[l:j]):\n                    dp[i][j] = dp[i][j] or dp[i-1][l]\n    return dp[k][n]\ndef g(s = \"abcba\", k = 5):\n    return s, k\nassert f(*g())\n",
        "idx_generation": 356,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(nums: list, k=3, target=10) -> bool:\n    \"\"\"\n    Find k numbers from the list whose sum is equal to the target.\n    \"\"\"\n    combinations = set()\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for m in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[m] == target:\n                    combinations.add((nums[i], nums[j], nums[m]))\n    return len(combinations) >= k\n\ndef g(nums=[1,2,3,4,5,6,7,8,9,10]):\n    random.shuffle(nums)\n    return nums\n\nassert f(g())\n",
        "idx_generation": 38,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(x: List[int], n=100, s=10000) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n=100, s=10000):\n    x = [random.randint(1, s/n) for _ in range(n)]\n    x[-1] = s - sum(x[:-1])\n    return x\nassert f(g())\n",
        "idx_generation": 288,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target value\"\"\"\n    for i in range(len(nums)-2):\n        for j in range(i+1, len(nums)-1):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(target=0):\n    nums = [-1, 2, 4, 5, -2, 7, 3]\n    return nums\nassert f(g())\n",
        "idx_generation": 282,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(pair: Tuple[int, int], li=[(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)], target=4) -> bool:\n    \"\"\"Find a pair of integers that satisfies a given condition\"\"\"\n    return sum(pair) > target\ndef g(li=[(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)], target=4):\n    for pair in li:\n        if sum(pair) > target:\n            return pair\nassert f(g())\n",
        "idx_generation": 370,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, strings=['cat', 'dog', 'elephant', 'fox', 'giraffe', 'hamster', 'iguana', 'jaguar', 'koala', 'lion']) -> bool:\n    \"\"\"Check if the given string is the lexicographically smallest string in the list\"\"\"\n    return s in strings and min(strings) == s\ndef g(strings=['cat', 'dog', 'elephant', 'fox', 'giraffe', 'hamster', 'iguana', 'jaguar', 'koala', 'lion']):\n    return min(strings, key=len)\nassert f(g())\n",
        "idx_generation": 383,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date: datetime, year=2022, month=12, day=25) -> bool:\n    \"\"\"Check if a given date is Christmas.\"\"\"\n    return date.year == year and date.month == month and date.day == day\n\ndef g(year=2022, month=12, day=25):\n    return datetime(year, month, day)\n\nassert f(g())\n",
        "idx_generation": 25,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is symmetric\"\"\"\n    row_len = len(matrix)\n    col_len = len(matrix[0])\n    if row_len != col_len:\n        return False\n    for i in range(row_len):\n        for j in range(i+1, col_len):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    matrix = [[1, 2, 3],\n              [2, 4, 5],\n              [3, 5, 6]]\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 246,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if n is in the list lst\"\"\"\n    return n in lst\ndef g(lst=[1, 2, 3, 4, 5]):\n    return random.choice(lst)\nassert f(g())\n",
        "idx_generation": 25,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int, k: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, determine if there are k numbers in the list that add up to the target.\n    \"\"\"\n    from itertools import combinations\n    for comb in combinations(nums, k):\n        if sum(comb) == target:\n            return True\n    return False\n\ndef g(nums=[2, 4, 6, 8, 10], target=16, k=3):\n    \"\"\"\n    Generate a list of k numbers from nums that add up to the target.\n    \"\"\"\n    from itertools import combinations\n    for comb in combinations(nums, k):\n        if sum(comb) == target:\n            return list(comb)\n    return []\n\nassert f(g(), target=16, k=3)\n",
        "idx_generation": 12,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers, find if there exists a pair of numbers that sums up to the target.\n\n    Sample input:\n    [1, 2, 3, 4, 5], 7\n\n    Sample output:\n    True\n    \"\"\"\n    nums = set()\n    for num in numbers:\n        complement = target - num\n        if complement in nums:\n            return True\n        nums.add(num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5], 7\n\nassert f(*g())\n",
        "idx_generation": 346,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Find if there exists a subarray of length k in nums such that the sum of its elements is divisible by k\"\"\"\n    return any(sum(nums[i:i+k]) % k == 0 for i in range(len(nums) - k + 1))\ndef g(k = 3):\n    return list(range(1, k+1))\nassert f(g())\n",
        "idx_generation": 178,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=5, b=10) -> bool:\n    \"\"\"Check if a number n is a prime number between a and b (inclusive).\"\"\"\n    return (a <= n <= b) and all(n % i != 0 for i in range(2, int(math.sqrt(n)) + 1))\ndef g(a=5, b=10):\n    for n in range(a, b + 1):\n        if all(n % i != 0 for i in range(2, int(math.sqrt(n)) + 1)):\n            return n\nassert f(g())\n",
        "idx_generation": 253,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=8) -> bool:\n    \"\"\"Check if the number n is divisible by both a and b.\"\"\"\n    return n % a == 0 and n % b == 0\ndef g(a=5, b=8):\n    n = a * b\n    return n\nassert f(g())\n",
        "idx_generation": 61,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], n: int, target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the array that sum up to the target value.\"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(arr = [1, 2, 3, 4, 5, 6], n = 6, target = 10):\n    return arr, n, target\nassert f(*g())\n",
        "idx_generation": 113,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums = [2, 7, 11, 15], target = 9):\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 58,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=100, c=10) -> bool:\n    \"\"\"Check if n multiplied by a is greater than the sum of the first c multiples of b\"\"\"\n    return n * a > sum([b * i for i in range(1, c+1)])\ndef g(a = 3, b = 100, c = 10):\n    return sum([b * i for i in range(1, c+1)]) // a + 1\nassert f(g())\n",
        "idx_generation": 398,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\ndef f(points: List[Tuple[int, int]], r=5) -> bool:\n    \"\"\"Find if there exists a circle with radius r that passes through all the given points\"\"\"\n    from math import sqrt\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            dist = sqrt((points[i][0] - points[j][0]) ** 2 + (points[i][1] - points[j][1]) ** 2)\n            if dist > 2 * r:\n                return False\n    return True\ndef g(points = [(0, 0), (0, 3), (4, 0), (4, 3)]):\n    return points\nassert f(g())\n",
        "idx_generation": 378,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(x: str, format=\"%Y-%m-%d %H:%M:%S\") -> bool:\n    \"\"\"Check if x is a valid date and time string with the given format\"\"\"\n    try:\n        datetime.strptime(x, format)\n        return True\n    except ValueError:\n        return False\n\ndef g(format=\"%Y-%m-%d %H:%M:%S\"):\n    return datetime.now().strftime(format)\n\nassert f(g())\n",
        "idx_generation": 397,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the sum of the last n elements in the list is equal to n * (n + 1) / 2.\"\"\"\n    return sum(lst[-n:]) == n * (n + 1) // 2\ndef g(lst=[1, 2, 3, 4, 5]):\n    return len(lst)\nassert f(g())\n",
        "idx_generation": 131,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int, i=0, total=0) -> bool:\n    \"\"\"\n    Given a list of positive integers and a target value, find if there exists a combination of numbers in the list that\n    sums up to the target value.\n\n    Sample Input:\n    arr = [2, 4, 6, 8]\n    target = 14\n\n    Sample Output:\n    True\n    \"\"\"\n    if total == target:\n        return True\n    if i >= len(arr):\n        return False\n    if f(arr, target, i+1, total+arr[i]):\n        return True\n    if f(arr, target, i+1, total):\n        return True\n    return False\n\ndef g(arr=[2, 4, 6, 8], target=14):\n    return arr, target\n\nassert f(*g())\n",
        "idx_generation": 8,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, lst=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Check if word can be formed by concatenating elements from lst\"\"\"\n    if word == '':\n        return True\n    for i in range(len(word)):\n        if word[:i+1] in lst and f(word[i+1:], lst):\n            return True\n    return False\ndef g(lst=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return ''.join(lst)\nassert f(g())\n",
        "idx_generation": 362,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=45, k=3) -> bool:\n    \"\"\"Find k numbers in nums that add up to target.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, k))\ndef g(target = 45, k = 3):\n    return list(range(1, target+1))\nassert f(g())\n",
        "idx_generation": 41,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Find if there exists a subset of nums that adds up to k.\"\"\"\n    def subset_sum(nums, k, i):\n        if k == 0:\n            return True\n        if i == 0:\n            return False\n        if nums[i-1] > k:\n            return subset_sum(nums, k, i-1)\n        return subset_sum(nums, k, i-1) or subset_sum(nums, k-nums[i-1], i-1)\n    \n    return subset_sum(nums, k, len(nums))\n    \ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 361,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(s: str, target='hello') -> bool:\n    \"\"\"Check if a string is a permutation of a target string.\"\"\"\n    return sorted(s) == sorted(target)\ndef g(target = 'hello'):\n    import random\n    return ''.join(random.sample(target, len(target)))\nassert f(g())\n",
        "idx_generation": 283,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"\n    Given two strings s and t, determine if t is an anagram of s.\n    \"\"\"\n    return sorted(s) == sorted(t)\n\ndef g(s='listen', t='silent'):\n    return s, t\n\nassert f(*g())\n",
        "idx_generation": 385,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[12, 6, 9], multiple=3) -> bool:\n    \"\"\"Check if all numbers in the list are multiples of a given number.\"\"\"\n    return all((i % n == 0 for i in nums)) and n == multiple\ndef g(nums=[12, 6, 9], multiple=3):\n    return multiple\nassert f(g())\n",
        "idx_generation": 46,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric along its main diagonal (top-left to bottom-right).\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\ndef g():\n    matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n    return matrix\nassert f(g())\n",
        "idx_generation": 275,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a contiguous subarray that sums up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if sum(nums[i:j]) == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 16,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=5):\n    nums = [1, 2, 3, 4, 5]\n    return nums\nassert f(g())\n",
        "idx_generation": 32,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], a=-1000, b=1000) -> bool:\n    \"\"\"Check if the sum of the list is equal to the sum of the arithmetic sequence from a to b (inclusive).\"\"\"\n    return sum(x) == (b - a + 1) * (a + b) / 2\ndef g(a=-1000, b=1000):\n    return list(range(a, b+1))\nassert f(g())\n",
        "idx_generation": 50,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=5) -> bool:\n    \"\"\"Check if n is divisible by both a and b\"\"\"\n    return n % a == 0 and n % b == 0\ndef g(a = 3, b = 5):\n    # Find the smallest number divisible by both a and b\n    n = max(a, b)\n    while True:\n        if n % a == 0 and n % b == 0:\n            return n\n        n += 1\nassert f(g())\n",
        "idx_generation": 357,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int = 100) -> bool:\n    \"\"\"\n    Find a list of integers where the sum of all numbers is equal to the target\n    \"\"\"\n    return sum(nums) == target\n\ndef g(target: int = 100):\n    if target <= 0:\n        return []\n    return [1] * target\n\nassert f(g())\n",
        "idx_generation": 222,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, limit=1000000) -> bool:\n    \"\"\"Check if a number is a prime number.\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g(limit=1000000):\n    for num in range(2, limit):\n        if f(num):\n            return num\n\nassert f(g())\n",
        "idx_generation": 278,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(x: float, a=42.5, b=36.8) -> bool:\n    \"\"\"Check if the absolute difference between x and a is less than b\"\"\"\n    return abs(x - a) < b\n\ndef g(a=42.5, b=36.8):\n    return random.uniform(a-b, a+b)\n\nassert f(g())\n",
        "idx_generation": 82,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int]) -> bool:\n    \"\"\"Check if the list contains any duplicate elements\"\"\"\n    return len(set(li)) == len(li)\ndef g():\n    return [i for i in range(1000)]\nassert f(g())\n",
        "idx_generation": 183,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target.\"\"\"\n    return any(target - num in nums for num in nums)\ndef g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target\nassert f(*g())\n",
        "idx_generation": 61,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"\n    Find a number in the given list that is divisible by n.\n    \"\"\"\n    return any(num % n == 0 for num in lst)\n\ndef g(lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return lst\n\nassert f(3, g())\n",
        "idx_generation": 399,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"\n    Find a subset of the given array whose sum is equal to the target value.\n    \"\"\"\n    def subset_sum(arr, target, i, curr_sum):\n        if curr_sum == target:\n            return True\n        if i >= len(arr):\n            return False\n        include = subset_sum(arr, target, i + 1, curr_sum + arr[i])\n        exclude = subset_sum(arr, target, i + 1, curr_sum)\n        return include or exclude\n    \n    return subset_sum(arr, target, 0, 0)\n\ndef g(arr=[10, 20, 30, 40, 50]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 13,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(st: str, a='world', b='Hello, world!') -> bool:\n    \"\"\"Check if st is a substring of b\"\"\"\n    return st in b\ndef g(a='world', b='Hello, world!'):\n    return b[len(a):]\nassert f(g())\n",
        "idx_generation": 398,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target=10, threshold=5) -> bool:\n    \"\"\"Check if the given number is within the threshold of the target number.\"\"\"\n    return abs(target - n) <= threshold\ndef g(target=10, threshold=5):\n    return target\nassert f(g())\n",
        "idx_generation": 134,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import date\n\ndef f(d: date, year: int) -> bool:\n    \"\"\"Check if the year of the date equals the given year\"\"\"\n    return d.year == year\n\ndef g(year: int):\n    return date(year, 1, 1)\n\nassert f(g(2022), 2022)\n",
        "idx_generation": 102,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers from the list that adds up to the target value.\n    \n    Sample Input:\n    nums = [10, 20, 30, 40, 50]\n    target = 100\n    \n    Sample Output:\n    True\n    \"\"\"\n    def helper(nums, target, index, curr_sum):\n        if curr_sum == target:\n            return True\n        if index == len(nums):\n            return False\n        if curr_sum + nums[index] > target:\n            return False\n        return helper(nums, target, index + 1, curr_sum + nums[index]) or helper(nums, target, index + 1, curr_sum)\n    \n    return helper(nums, target, 0, 0)\n\ndef g(nums=[10, 20, 30, 40, 50], target=100):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 30,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exist k elements in the list that sum up to zero.\"\"\"\n    from itertools import combinations\n    for comb in combinations(nums, k):\n        if sum(comb) == 0:\n            return True\n    return False\n\ndef g(nums=[-1, 2, 3, -4, 5, -6]):\n    return nums\nassert f(g())\n",
        "idx_generation": 50,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(nums: List[int], k=2) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target.\"\"\"\n    seen = set()\n    for num in nums:\n        if k - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(k = 2):\n    import random\n    nums = random.sample(range(-10, 10), 10)\n    return nums\nassert f(g())\n",
        "idx_generation": 283,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find a sublist within arr whose sum is equal to target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            if sum(arr[i:j]) == target:\n                return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 2,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=5) -> bool:\n    \"\"\"Find the sum of the n smallest positive integers in a list.\"\"\"\n    return sum(sorted([v for v in x if v > 0])[:n]) == n * (n + 1) // 2\ndef g(n = 5):\n    return [1, 0, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 66,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 339,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are three numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(nums = [1, 2, 3, 4, 5]):\n    return nums\nassert f(g())\n",
        "idx_generation": 37,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(sides: List[int], options=[5, 25, 125], n=625, max_dim=3) -> bool:\n    \"\"\"\n    Find the side lengths of a box in fewest dimensions (dimension <= max_dim) whose volume is n,\n     where each side length is in options\n    \"\"\"\n    prod = 1\n    for b in sides:\n        prod *= b\n    return prod == n and set(sides) <= set(options) and (len(sides) <= max_dim)\ndef g(options=[5, 25, 125], n=625, max_dim=3):\n    options = sorted(set(options))\n    base = options[0]\n    logs = []\n    for i in options + [n]:\n        j = 1\n        log = 0\n        while j < i:\n            log += 1\n            j *= base\n        assert j == i, \"All numbers must be a power of the smallest number\"\n        logs.append(log)\n    denominations, n = logs[:-1], logs[-1]\n\n    seqs = [[0 for _ in denominations] + [0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [base ** k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g())\n",
        "idx_generation": 39,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target value\"\"\"\n    return any(target - num in nums for num in nums)\ndef g(target = 10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 32,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=3, b=5, c=7) -> bool:\n    \"\"\"Check if a number is a perfect square\"\"\"\n    return n == a**2 or n == b**2 or n == c**2\ndef g(a=3, b=5, c=7):\n    return int(math.sqrt(a**2 + b**2 + c**2))\nassert f(g())\n",
        "idx_generation": 69,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"Check if it is possible to combine the numbers using the operators +, -, *, / to get the target number\"\"\"\n    def helper(nums):\n        if len(nums) == 1:\n            return nums[0] == target\n        for a, b, *rest in permutations(nums):\n            if helper([a + b] + rest) or helper([a - b] + rest) or helper([a * b] + rest) or (b != 0 and a % b == 0 and helper([a // b] + rest)):\n                return True\n        return False\n    return helper(nums)\ndef g(nums=[4, 5, 7, 8]):\n    return nums\nassert f(g())\n",
        "idx_generation": 320,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=4) -> bool:\n    \"\"\"Check if a number is divisible by m\"\"\"\n    return n % m == 0\ndef g(m = 4):\n    return m * 5\nassert f(g())\n",
        "idx_generation": 307,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=2, b=3) -> bool:\n    \"\"\"Check if the sum of two numbers is equal to a given number\"\"\"\n    return x == a + b\n\ndef g(a=2, b=3):\n    return a + b\n\nassert f(g())\n",
        "idx_generation": 91,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subarray in arr whose sum is equal to the target.\"\"\"\n    prefix_sum = set([0])\n    curr_sum = 0\n    for num in arr:\n        curr_sum += num\n        if curr_sum - target in prefix_sum:\n            return True\n        prefix_sum.add(curr_sum)\n    return False\ndef g(arr = [1, 2, 3, 4, 5, 6]):\n    return arr\nassert f(g(), 10)\n",
        "idx_generation": 386,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the given list whose sum is equal to target.\"\"\"\n    num_set = set()\n    for num in li:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\ndef g(li = [2, 4, 6, 8, 10]):\n    return li\nassert f(g())\n",
        "idx_generation": 72,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Find the sum of the first n numbers in the sequence\"\"\"\n    return sum(seq[:n]) == 55\ndef g(seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return len(seq)\nassert f(g())\n",
        "idx_generation": 289,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find if there exists a subset of nums that sums up to the target value.\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target-nums[0]) or subset_sum(nums[1:], target)\n    \n    return subset_sum(nums, target)\n\ndef g(nums = [10, 20, 30, 40, 50]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 18,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr: str) -> bool:\n    \"\"\"Check if a substring is present in a string in a case-insensitive manner.\"\"\"\n    return substr.lower() in s.lower()\ndef g(s: str, substr: str):\n    return s\nassert f(g(\"Hello World\", \"WORLD\"), \"world\")\n",
        "idx_generation": 399,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='python') -> bool:\n    \"\"\"Check if the word 'python' is present in the string s.\"\"\"\n    return word in s\ndef g(word='python'):\n    return \"I love programming in python.\"\nassert f(g())\n",
        "idx_generation": 35,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\ndef f(num: float, a=12) -> bool:\n    \"\"\"Check if a number is an integer\"\"\"\n    return math.isclose(num, a) and num % a == 0\ndef g(a = 12):\n    return int(a)\nassert f(g())\n",
        "idx_generation": 135,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(a: int, b: int, c: int, d: int, e: int) -> bool:\n    \"\"\"Check if a number is divisible by the sum of its digits\"\"\"\n    num = a * b * c * d * e\n    digit_sum = sum(int(digit) for digit in str(num))\n    return num % digit_sum == 0\n\ndef g(a: int = random.randint(1, 9), b: int = random.randint(1, 9), c: int = random.randint(1, 9),\n      d: int = random.randint(1, 9), e: int = random.randint(1, 9)):\n    return a, b, c, d, e\n\nassert f(*g())\n",
        "idx_generation": 110,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers that multiply to the target\"\"\"\n    def find_combination(nums, target, combination=[]):\n        product = 1\n        for num in combination:\n            product *= num\n\n        if product == target:\n            return True\n\n        if product > target:\n            return False\n\n        for i in range(len(nums)):\n            remaining = nums[i+1:]\n            if find_combination(remaining, target, combination + [nums[i]]):\n                return True\n\n        return False\n\n    return find_combination(nums, target)\ndef g(target=100):\n    nums = [2, 3, 5, 10]\n    return nums\nassert f(g())\n",
        "idx_generation": 105,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, year_len=365) -> bool:\n    \"\"\"Find n such that the probability of two people having the same birthday in a group of n is near 1/2.\"\"\"\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 0.5) ** 2 <= year_len\ndef g(year_len=365):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]\nassert f(g())\n",
        "idx_generation": 63,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(res: List[int], lst: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, return True if the list is sorted in non-decreasing order and False otherwise.\n    \"\"\"\n    return res == sorted(lst)\n\ndef g(lst: List[int]):\n    return sorted(lst)\n\nlst = [random.randint(0, 100) for _ in range(10)]\nassert f(g(lst), lst)\n",
        "idx_generation": 288,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"Sort the array in wave form.\"\"\"\n    nums.sort()\n    for i in range(0, len(nums) - 1, 2):\n        nums[i], nums[i + 1] = nums[i + 1], nums[i]\n    return nums\n\ndef g(nums: List[int]):\n    return nums\n\nnums = [4, 2, 1, 3, 5]\n\nassert f(g(nums)) == [2, 1, 4, 3, 5]\n",
        "idx_generation": 22,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: list) -> bool:\n    \"\"\"\n    Given a matrix, check if it is a symmetric matrix.\n\n    Sample Input:\n    matrix = [[1, 2, 3],\n              [2, 4, 5],\n              [3, 5, 6]]\n\n    Sample Output:\n    False\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix: list = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 70,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix, determine if it is symmetric.\n    A matrix is symmetric if it is equal to its transpose.\n\n    Sample input:\n    [[1, 2, 3],\n     [2, 4, 5],\n     [3, 5, 6]]\n\n    Sample output:\n    False\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3],\n            [2, 4, 5],\n            [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 346,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find three numbers in the list that sum up to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(target = 20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 38,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers, arr, and a target integer, target, find a subsequence of arr whose sum is equal to\n    target. Return True if such a subsequence exists, otherwise return False.\n    \"\"\"\n    for a in arr:\n        assert isinstance(a, int)\n    n = len(arr)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n    for i in range(1, n + 1):\n        for j in range(target + 1):\n            if j >= arr[i - 1]:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target]\ndef g(target = 10):\n    arr = [1, 2, 3, 4, 5]\n    return arr\nassert f(g())\n",
        "idx_generation": 42,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers in nums that add up to target.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for r in range(1, len(nums)+1) for comb in combinations(nums, r))\ndef g(target = 100):\n    return list(range(1, target+1))\nassert f(g())\n",
        "idx_generation": 41,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k: int, nums: list) -> bool:\n    \"\"\"\n    Given a list of integers and two integers n and k, determine if there exists two distinct indices i and j in the list\n    such that nums[i] + nums[j] = k.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    n = 5\n    k = 7\n\n    Sample Output:\n    True\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if k - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums: list = [1, 2, 3, 4, 5], n: int = 5, k: int = 7):\n    return n, k, nums\n\nassert f(*g())\n",
        "idx_generation": 70,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int=20) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums: List[int]=[10, 5, 15, 7]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 368,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a = 3, b = 5) -> bool:\n    \"\"\"\n    Given a positive integer n, determine if n can be written as the sum of two non-negative integers a and b,\n    where a is a multiple of 3 and b is a multiple of 5.\n    \"\"\"\n    return any((n == a + b and a % 3 == 0 and b % 5 == 0) for a in range(n + 1) for b in range(n + 1))\ndef g(a = 3, b = 5):\n    if a % 3 == 0 and b % 5 == 0:\n        n = a + b\n    else:\n        n = -1\n    return n\nassert f(g())\n",
        "idx_generation": 369,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Check if a number is divisible by another number\"\"\"\n    return n % m == 0\ndef g(m=10):\n    return m\nassert f(g())\n",
        "idx_generation": 95,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, d=5) -> bool:\n    \"\"\"\n    Check if a given number is divisible by another number.\n    \"\"\"\n    return n % d == 0\ndef g(d = 5):\n    return 100\nassert f(g())\n",
        "idx_generation": 89,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(password: str, username='admin', password_list=['admin', '123456', 'qwerty']) -> bool:\n    \"\"\"\n    Given a password and a list of common passwords, check if the password is secure. A password is considered secure if it\n    is not included in the list of common passwords and does not match the username.\n    \"\"\"\n    if password in password_list:\n        return False\n    if password == username:\n        return False\n    return True\n\ndef g(password='password'):\n    return password\n\nassert f(g())\n",
        "idx_generation": 290,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: list, target=100) -> bool:\n    \"\"\"\n    Find a combination of numbers from the list whose sum is equal to the target.\n    \"\"\"\n    def helper(nums, target, path):\n        if target == 0:\n            return True\n        if target < 0 or not nums:\n            return False\n        return helper(nums[1:], target-nums[0], path + [nums[0]]) or helper(nums[1:], target, path)\n    \n    return helper(nums, target, [])\n\ndef g():\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n\nassert f(g())\n",
        "idx_generation": 38,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, char='a') -> bool:\n    \"\"\"Check if the given character is the first character of every word in the given string.\"\"\"\n    words = string.split()\n    return all(word.startswith(char) for word in words)\ndef g(char='a'):\n    string = \"apple ant airplane\"\n    return string\nassert f(g())\n",
        "idx_generation": 231,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='') -> bool:\n    \"\"\"\n    Find a substring of the given string that matches the target value\n    \"\"\"\n    return s.find(target) != -1\ndef g(target=''):\n    return target\nassert f(g())\n",
        "idx_generation": 73,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(e: List[int], a=2, b=4, c=6, d=8) -> bool:\n    \"\"\"\n    Find the intersection of two lines.\n    Solution should be a list of the (x,y) coordinates.\n    Accuracy of sixth decimal digit is required.\n    \"\"\"\n    x = e[0] / e[1]\n    return abs(a * x + b - c * x - d) < 10 ** (-6)\ndef g(a=2, b=4, c=6, d=8):\n    return [d - b, a - c]\nassert f(g())\n",
        "idx_generation": 137,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, s='hello') -> bool:\n    \"\"\"Check if the given string can be formed by repeating a substring n times.\"\"\"\n    return s in (s * n)\ndef g(s='hello'):\n    return len(s)\nassert f(g())\n",
        "idx_generation": 113,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], target=100, n=3) -> bool:\n    \"\"\"Find if there is a subset of n elements whose sum is equal to the target.\"\"\"\n    assert all([v > 0 for v in x])\n    def subset_sum(nums, target, n, curr_sum):\n        if curr_sum == target and n == 0:\n            return True\n        if curr_sum > target or n < 0:\n            return False\n        return subset_sum(nums, target, n-1, curr_sum + nums[n-1]) or subset_sum(nums, target, n-1, curr_sum)\n    return subset_sum(x, target, len(x), 0)\n\ndef g(target=100, n=3):\n    return [25, 10, 5, 50, 30, 20] + [target, n]\n\nassert f(g())\n",
        "idx_generation": 121,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(arr: List[int], target=250, max_nums=5) -> bool:\n    \"\"\"Find a selection of at most max_nums numbers whose total is the target value.\"\"\"\n    return len(arr) <= max_nums and sum(arr) == target\ndef g(target=250, max_nums=5):\n    from itertools import combinations_with_replacement\n    for n in range(max_nums + 1):\n        for c in combinations_with_replacement(range(1, 101), n):\n            if sum(c) == target:\n                return list(c)\nassert f(g())\n",
        "idx_generation": 88,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(res: List[int], lst: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, return True if there exists a pair of numbers in the list whose sum is equal to 10,\n    and False otherwise.\n    \"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == 10:\n                return res == True\n    return res == False\n\ndef g(lst: List[int]):\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == 10:\n                return True\n    return False\n\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g(lst), lst)\n",
        "idx_generation": 288,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(sides: List[int], options=[4, 16, 64], n=256, max_dim=4) -> bool:\n    \"\"\"\n    Find the side lengths of a box in fewest dimensions (dimension <= max_dim) whose volume is n,\n     where each side length is in options\n    \"\"\"\n    prod = 1\n    for b in sides:\n        prod *= b\n    return prod == n and set(sides) <= set(options) and (len(sides) <= max_dim)\ndef g(options=[4, 16, 64], n=256, max_dim=4):\n    options = sorted(set(options))\n    base = options[0]\n    logs = []\n    for i in options + [n]:\n        j = 1\n        log = 0\n        while j < i:\n            log += 1\n            j *= base\n        assert j == i, \"All numbers must be a power of the smallest number\"\n        logs.append(log)\n    denominations, n = logs[:-1], logs[-1]\n\n    seqs = [[0 for _ in denominations] + [0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [base ** k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g())\n",
        "idx_generation": 39,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if the sum of each row and each column in a square matrix is equal to n.\"\"\"\n    return all((sum(row) == n for row in matrix)) and all((sum(col) == n for col in zip(*matrix)))\ndef g(n=3):\n    matrix = [[1]*n for _ in range(n)]\n    return matrix\nassert f(g())\n",
        "idx_generation": 71,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]):\n    return nums\nassert f(g())\n",
        "idx_generation": 47,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Find if there exists a subset of numbers whose sum equals the target.\"\"\"\n    n = len(numbers)\n    possible_sums = set()\n    possible_sums.add(0)\n    for num in numbers:\n        new_sums = set()\n        for sum in possible_sums:\n            new_sums.add(sum + num)\n        possible_sums.update(new_sums)\n    return target in possible_sums\n\ndef g(numbers = [10, 20, 30, 40, 50]):\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 79,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='abc', k=2) -> bool:\n    \"\"\"\n    Given a string s, determine if there are at least k occurrences of the substring substr in s.\n\n    Sample input:\n    'abccbabccbabcc'\n    'abc'\n    3\n\n    Sample output:\n    True\n\n    (Sample output hidden because showing sample output would give away too much information.)\n    \"\"\"\n    return len([i for i in range(len(s) - len(substr) + 1) if s[i:i+len(substr)] == substr]) >= k\ndef g(substr='abc', k=2):\n    return substr * k\nassert f(g())\n",
        "idx_generation": 27,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there is a pair of numbers in nums that sums up to target\"\"\"\n    return any(target - num in nums for num in nums)\ndef g(target = 10):\n    return list(range(1, target))\nassert f(g())\n",
        "idx_generation": 48,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29], upper_bound=100) -> bool:\n    \"\"\"Check if a number is prime.\"\"\"\n    return n in nums and n <= upper_bound\ndef g(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29], upper_bound = 100):\n    return nums[-1]\nassert f(g())\n",
        "idx_generation": 70,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target_sum=100) -> bool:\n    \"\"\"Find a combination of numbers from a given list that their sum equals a given target_sum\"\"\"\n    n = len(arr)\n    dp = [[False] * (target_sum+1) for _ in range(n+1)]\n    dp[0][0] = True\n\n    for i in range(1, n+1):\n        dp[i][0] = True\n        for j in range(1, target_sum+1):\n            if j >= arr[i-1]:\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-arr[i-1]]\n            else:\n                dp[i][j] = dp[i-1][j]\n\n    return dp[n][target_sum]\ndef g(target_sum = 100):\n    arr = [10, 20, 30, 40, 50]\n    return arr\nassert f(g())\n",
        "idx_generation": 399,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=5, b=10, c=15) -> bool:\n    \"\"\"Check if the sum of three numbers equals a given value\"\"\"\n    return x[0] + x[1] + x[2] == a + b + c\n\ndef g(a=5, b=10, c=15):\n    return [a, b, c]\n\nassert f(g())\n",
        "idx_generation": 111,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, length=10) -> bool:\n    \"\"\"Check if a string has a length greater than or equal to a specific value.\"\"\"\n    return len(s) >= length\ndef g(length=10):\n    return 'x' * length\nassert f(g())\n",
        "idx_generation": 95,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=45, b=56, c=67) -> bool:\n    \"\"\"Check if a number is divisible by the sum of three other numbers\"\"\"\n    return x % (a + b + c) == 0\ndef g(a=45, b=56, c=67):\n    return a + b + c\nassert f(g())\n",
        "idx_generation": 290,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a subsequence of the list that sums up to target.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i-1] > j:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-nums[i-1]]\n    return dp[n][target]\ndef g(target = 20):\n    return [2, 5, 8, 10, 12, 14]\nassert f(g())\n",
        "idx_generation": 57,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(names: List[str], pattern: str) -> bool:\n    \"\"\"Check if any of the names in the list match the given pattern\"\"\"\n    for name in names:\n        if pattern in name:\n            return True\n    return False\n\ndef g(names = [\"Alice\", \"Bob\", \"Charlie\"], pattern = \"li\"):\n    return names, pattern\n\nassert f(*g())\n",
        "idx_generation": 232,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='python') -> bool:\n    \"\"\"Check if a string contains a substring\"\"\"\n    return substr in s.lower()\ndef g(substr='python'):\n    return substr.upper()\nassert f(g())\n",
        "idx_generation": 84,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(numbers: List[int], n=2) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is a perfect square.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            product = numbers[i] * numbers[j]\n            if math.isqrt(product) ** 2 == product:\n                return True\n    return False\n\ndef g(n=2):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 138,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(sentence: str, word_count=5) -> bool:\n    \"\"\"Check if the number of words in the sentence is equal to the target word count\"\"\"\n    words = sentence.split()\n    return len(words) == word_count\ndef g(sentence=\"This is a sample sentence\"):\n    return sentence\nassert f(g())\n",
        "idx_generation": 127,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int, k=3) -> bool:\n    \"\"\"\n    Find if there exists a combination of k numbers in the list nums that add up to the target.\n    \"\"\"\n    def backtrack(start, target, k):\n        if k == 0 and target == 0:\n            return True\n        if k == 0 or target < 0:\n            return False\n        for i in range(start, len(nums)):\n            if i > start and nums[i] == nums[i-1]:\n                continue\n            if backtrack(i+1, target-nums[i], k-1):\n                return True\n        return False\n    \n    nums.sort()\n    return backtrack(0, target, k)\n    \ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8], target=15, k=3):\n    return nums, target, k\n\nassert f(*g())\n",
        "idx_generation": 164,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(x: List[int], n=3, target=10) -> bool:\n    \"\"\"Find if there is a subset of n numbers in the list that sums up to the target\"\"\"\n    combinations = itertools.combinations(x, n)\n    return any(sum(comb) == target for comb in combinations)\ndef g(n=3, target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 112,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"\n    Check if the given number is divisible by any of the primes.\n    \"\"\"\n    return any((n % p == 0 for p in primes))\n\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return primes[0] * primes[1]\n\nassert f(g())\n",
        "idx_generation": 292,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [i for i in range(target)]\nassert f(g())\n",
        "idx_generation": 107,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is symmetric.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    matrix = [[1, 2, 3],\n              [2, 4, 5],\n              [3, 5, 6]]\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 92,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists two numbers in the list that add up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target = 10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 101,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers that sums up to the target value\"\"\"\n    def check_combination(comb):\n        return sum(comb) == target\n    \n    def generate_combinations(nums, target, combination):\n        if target == 0:\n            return check_combination(combination)\n        if target < 0 or not nums:\n            return False\n        \n        for i in range(len(nums)):\n            if generate_combinations(nums[i+1:], target-nums[i], combination + [nums[i]]):\n                return True\n        \n        return False\n    \n    return generate_combinations(nums, target, [])\n\ndef g(nums = [10, 20, 30, 40, 50]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 96,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(li: List[int], n=10) -> bool:\n    \"\"\"\n    Given a list of integers, determine if there exists a subsequence of length n that is strictly increasing.\n\n    Example:\n    li = [2, 4, 1, 5, 3, 7, 9]\n    n = 4\n    output: True\n    \"\"\"\n    for i in range(len(li) - n + 1):\n        if sorted(li[i:i+n]) == li[i:i+n]:\n            return True\n    return False\n\ndef g(n=10):\n    return list(range(n))\n\nassert f(g())\n",
        "idx_generation": 41,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=2) -> bool:\n    \"\"\"Check if there are k consecutive numbers in the array\"\"\"\n    for i in range(len(arr)-k+1):\n        if arr[i:i+k] == list(range(arr[i], arr[i]+k)):\n            return True\n    return False\ndef g(k = 2):\n    return [1, 2, 4, 5, 6, 8, 9]\nassert f(g())\n",
        "idx_generation": 52,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], k=4) -> bool:\n    \"\"\"Check if there exists a subarray in the given list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    prefix_sums = {0}\n    for num in li:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False\ndef g(li = [12, 23, 45, 67, 89]):\n    return li\nassert f(g())\n",
        "idx_generation": 72,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: int, y: float, z: int = 5) -> bool:\n    \"\"\"Check if the sum of x, y, and z is greater than or equal to the square root of x plus the absolute value of y\"\"\"\n    return x + y + z >= math.sqrt(x) + abs(y)\n\ndef g(x: int = 3, y: float = 2.5, z: int = 5):\n    return x, y, z\n\nassert f(*g())\n",
        "idx_generation": 112,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target value\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False\n\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 119,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(x: List[int], n=7, s=100) -> bool:\n    \"\"\"Find a list of n integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a >= 0 for a in x])\ndef g(n=7, s=100):\n    import random\n    x = []\n    for _ in range(n-1):\n        num = random.randint(0, s)\n        x.append(num)\n        s -= num\n    x.append(s)\n    return x\nassert f(g())\n",
        "idx_generation": 290,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], n=100) -> bool:\n    \"\"\"Find four integers whose sum is equal to n\"\"\"\n    return len(nums) >= 4 and any((nums[i] + nums[j] + nums[k] + nums[l] == n for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)) for l in range(k+1, len(nums))))\ndef g(n = 100):\n    m = n\n    nums = [i for i in range(1, m) if i < m-i]\n    return nums\nassert f(g())\n",
        "idx_generation": 99,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, char='a') -> bool:\n    \"\"\"Check if a given character is the first letter of the word\"\"\"\n    return word[0].lower() == char.lower()\n\ndef g(word: str = \"Apple\", char: str = 'a'):\n    return word\n\nassert f(g())\n",
        "idx_generation": 233,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_char='e') -> bool:\n    \"\"\"Check if a given character appears in the string.\"\"\"\n    return target_char in s\ndef g(target_char = 'e'):\n    return 'Hello World!'\nassert f(g())\n",
        "idx_generation": 84,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a: int = 2, b: int = 3) -> bool:\n    \"\"\"Check if the sum of the squares of a and b is equal to n.\"\"\"\n    return a**2 + b**2 == n\ndef g(a: int = 2, b: int = 3):\n    return a**2 + b**2\nassert f(g())\n",
        "idx_generation": 152,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(num: int, factor=5) -> bool:\n    \"\"\"Check if the given number is a perfect square and a multiple of a given factor\"\"\"\n    return math.isqrt(num)**2 == num and num % factor == 0\n\ndef g(factor=5):\n    num = factor**2\n    return num\n\nassert f(g())\n",
        "idx_generation": 11,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a=3, b=2, c=1) -> bool:\n    \"\"\"Find a string with a occurrences of 'a', b occurrences of 'b', and c occurrences of 'c'\"\"\"\n    return s.count('a') == a and s.count('b') == b and s.count('c') == c\ndef g(a = 3, b = 2, c = 1):\n    return 'a' * a + 'b' * b + 'c' * c\nassert f(g())\n",
        "idx_generation": 159,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=20, max_len=5) -> bool:\n    \"\"\"\n    Find a subset of numbers (length <= max_len) that sums up to target\n    \"\"\"\n    return sum(numbers) == target and (len(numbers) <= max_len)\ndef g(target=20, max_len=5):\n    \"\"\"\n    This solution uses a recursive function to find all possible subsets of numbers that sum up to target\n    \"\"\"\n    def find_subset(numbers, target, subset):\n        if target == 0:\n            return subset\n        if len(numbers) == 0 or target < 0:\n            return None\n        include = find_subset(numbers[1:], target - numbers[0], subset + [numbers[0]])\n        exclude = find_subset(numbers[1:], target, subset)\n        return include or exclude\n\n    numbers = [3, 5, 8, 10, 2, 7, 4]\n    return find_subset(numbers, target, [])\nassert f(g())\n",
        "idx_generation": 200,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10, max_nums=3) -> bool:\n    \"\"\"Find a selection of at most max_nums numbers whose sum is the target value.\"\"\"\n    for n in nums:\n        assert isinstance(n, int)\n    return len(nums) <= max_nums and sum(nums) == target\ndef g(target = 10, max_nums = 3):\n    from itertools import combinations\n    for n in range(max_nums + 1):\n        for c in combinations(range(1, 11), n):\n            if sum(c) == target:\n                return list(c)\nassert f(g())\n",
        "idx_generation": 123,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], target_sum=50) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to a certain value\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i] + li[j] == target_sum:\n                return True\n    return False\ndef g(target_sum=50):\n    return [i for i in range(1, target_sum//2 + 1)] + [target_sum//2 + 1]\nassert f(g())\n",
        "idx_generation": 296,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a sorted 2D matrix of integers and a target value, determine whether the target is present in the matrix.\n    The matrix is sorted in non-decreasing order from left to right and from top to bottom.\n    \"\"\"\n    m, n = len(matrix), len(matrix[0])\n    row, col = m - 1, 0\n    while row >= 0 and col < n:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            col += 1\n        else:\n            row -= 1\n    return False\n\ndef g(matrix=[[1,3,5,7],[10,11,16,20],[23,30,34,60]], target=3):\n    return matrix, target\n\nassert f(*g())\n",
        "idx_generation": 127,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num1: int, num2: int) -> bool:\n    \"\"\"\n    Given two integers num1 and num2, return True if their sum is divisible by 3, False otherwise.\n    \"\"\"\n    return (num1 + num2) % 3 == 0\n\ndef g():\n    return 2, 4\n\nassert f(*g())\n",
        "idx_generation": 104,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(li: List[int], a=5) -> bool:\n    \"\"\"Check if the list contains any duplicate elements\"\"\"\n    return len(li) == len(set(li))\n\ndef g(a=5):\n    li = random.sample(range(1, a+1), a)\n    return li\n\nassert f(g())\n",
        "idx_generation": 134,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], n=100) -> bool:\n    \"\"\"Find three integers whose sum is equal to n\"\"\"\n    return len(nums) >= 3 and any((nums[i] + nums[j] + nums[k] == n for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums))))\ndef g(n = 100):\n    m = n\n    nums = [i for i in range(1, m) if i < m-i]\n    return nums\nassert f(g())\n",
        "idx_generation": 99,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if s contains a substring of length n that is a palindrome\"\"\"\n    return any(s[i:i+n] == s[i:i+n][::-1] for i in range(len(s)-n+1))\ndef g(n = 5):\n    return 'madam' + 'a'*(n-5)\nassert f(g())\n",
        "idx_generation": 48,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target_sum.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False\ndef g(nums=[2, 5, 8, 3, 6, 4]):\n    return nums\nassert f(g())\n",
        "idx_generation": 72,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=7, c=21) -> bool:\n    \"\"\"\n    Given three numbers, check if the sum of n, a, and b is equal to c.\n    \"\"\"\n    return n + a + b == c\n\ndef g(a=3, b=7, c=21):\n    return c - (a + b)\n\nassert f(g())\n",
        "idx_generation": 78,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], max_val=100) -> bool:\n    \"\"\"Find a list where all elements are less than or equal to a specific value\"\"\"\n    return all(x <= max_val for x in li)\ndef g(max_val = 100):\n    return list(range(max_val + 1))\nassert f(g())\n",
        "idx_generation": 184,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, target_length=5) -> bool:\n    \"\"\"Check if a string has a length equal to a specific value.\"\"\"\n    return len(x) == target_length\ndef g(target_length=5):\n    return 'a' * target_length\nassert f(g())\n",
        "idx_generation": 122,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if the sum of any two numbers in the list equals the target\"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, 2):\n        if sum(combo) == target:\n            return True\n    return False\ndef g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\nassert f(g())\n",
        "idx_generation": 291,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s1: str, s2: str, k: int) -> bool:\n    \"\"\"Check if it is possible to transform s1 into s2 with at most k operations.\"\"\"\n    if abs(len(s1) - len(s2)) > k:\n        return False\n    dp = [[0] * (len(s2) + 1) for _ in range(len(s1) + 1)]\n    for i in range(len(s1) + 1):\n        dp[i][0] = i\n    for j in range(len(s2) + 1):\n        dp[0][j] = j\n    for i in range(1, len(s1) + 1):\n        for j in range(1, len(s2) + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = 1 + min(dp[i - 1][j - 1], dp[i][j - 1], dp[i - 1][j])\n    return dp[len(s1)][len(s2)] <= k\ndef g(s1 = \"kitten\", s2 = \"sitting\", k = 3):\n    return s1, s2, k\nassert f(*g())\n",
        "idx_generation": 101,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substr='apple') -> bool:\n    \"\"\"Check if the given string contains the given substring.\"\"\"\n    return substr in string\ndef g(substr='apple'):\n    return 'I love to eat ' + substr + 's'\nassert f(g())\n",
        "idx_generation": 237,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string s consisting of lowercase English letters, determine if it is a palindrome after removing exactly\n    one character.\n\n    Example:\n    s = \"racecar\"\n    output: True\n    Explanation: Removing the 'e' results in the string \"racar\" which is a palindrome.\n    \"\"\"\n    return s == s[::-1] or any(s[i+1:] == s[i+1:][::-1] for i in range(len(s)))\ndef g(s = \"racecar\"):\n    for i in range(len(s)):\n        if s[:i] + s[i+1:] == (s[:i] + s[i+1:])[::-1]:\n            return s[:i] + s[i+1:]\n    return \"\"\nassert f(g())\n",
        "idx_generation": 87,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, m: int) -> bool:\n    \"\"\"\n    Given two integers n and m, check if n is a perfect square and m is a perfect cube.\n    \"\"\"\n    return sqrt(n).is_integer() and (m**(1/3)).is_integer()\n\ndef g(n: int = 16, m: int = 27):\n    return n, m\n\nassert f(*g())\n",
        "idx_generation": 154,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=4) -> bool:\n    \"\"\"Check if the square of x is equal to a\"\"\"\n    return math.isclose(x ** 2, a)\n\ndef g(a=4):\n    return math.sqrt(a)\n\nassert f(g())\n",
        "idx_generation": 36,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='abcde', length=5) -> bool:\n    \"\"\"Check if the given string s is the reverse of the substring of target with the given length\"\"\"\n    return s == target[length-1::-1]\n\ndef g(target='abcde', length=5):\n    return target[length-1::-1]\n\nassert f(g())\n",
        "idx_generation": 219,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find three numbers in the list that sum up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\nassert f(g())\n",
        "idx_generation": 235,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int]) -> bool:\n    \"\"\"Find a list of three distinct integers whose sum is 10.\"\"\"\n    return len(x) == 3 and len(set(x)) == 3 and sum(x) == 10\ndef g():\n    return [1, 2, 7]\nassert f(g())\n",
        "idx_generation": 151,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if the list is sorted in non-decreasing order\"\"\"\n    return lst == sorted(lst)\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 297,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(num_list: List[int], target: int) -> bool:\n    \"\"\"\n    Find a subset of numbers in the given list that add up to the target number.\n    \"\"\"\n    def subset_sum(numbers, target, partial=[]):\n        s = sum(partial)\n\n        if s == target:\n            return True\n        if s > target:\n            return False\n\n        for i in range(len(numbers)):\n            n = numbers[i]\n            remaining = numbers[i+1:]\n            if subset_sum(remaining, target, partial + [n]):\n                return True\n        return False\n\n    return subset_sum(num_list, target)\n    \ndef g():\n    num_list = random.sample(range(1, 11), random.randint(2, 5))\n    target = random.randint(1, sum(num_list))\n    return num_list, target\n\nassert f(*g())\n",
        "idx_generation": 136,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers that adds up to the target\"\"\"\n    return sum(numbers) == target\ndef g(numbers = [10, 20, 30, 40]):\n    return numbers\nassert f(g())\n",
        "idx_generation": 110,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], n=2) -> bool:\n    \"\"\"Check if there are n consecutive numbers in the list\"\"\"\n    nums.sort()\n    for i in range(len(nums) - n + 1):\n        if nums[i] + n - 1 == nums[i + n - 1]:\n            return True\n    return False\ndef g(nums=[1, 2, 3, 5, 6, 7], n=2):\n    return nums\nassert f(g())\n",
        "idx_generation": 135,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer k, return True if there exists any sublist of the given list\n    that sums up to the target integer, otherwise return False.\n    \"\"\"\n    def subset_sum(arr, n, k):\n        if k == 0:\n            return True\n        if n == 0 and k != 0:\n            return False\n        if arr[n-1] > k:\n            return subset_sum(arr, n-1, k)\n        return subset_sum(arr, n-1, k) or subset_sum(arr, n-1, k-arr[n-1])\n\n    return subset_sum(nums, len(nums), k)\ndef g(k = 3):\n    return [1, 2, 4, 7]\nassert f(g())\n",
        "idx_generation": 133,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, target=1000000) -> bool:\n    \"\"\"Find n random integers whose sum is equal to the target value\"\"\"\n    def generate_random_numbers(n, target):\n        nums = []\n        for _ in range(n - 1):\n            num = random.randint(0, target)\n            nums.append(num)\n            target -= num\n        nums.append(target)\n        return nums\n    \n    nums = generate_random_numbers(n, target)\n    return sum(nums) == target\n\ndef g(target=1000000):\n    return random.randint(1, target)\n\nassert f(g())\n",
        "idx_generation": 55,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], a=-10, b=10, count=5) -> bool:\n    \"\"\"Find a list of count or more different numbers each between a and b that are divisible by 3\"\"\"\n    assert all((n % 3 == 0 for n in nums))\n    return len(set(nums)) >= count\ndef g(a=-10, b=10, count=5):\n    return [n for n in range(a, b + 1) if n % 3 == 0]\nassert f(g())\n",
        "idx_generation": 88,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, k=3) -> bool:\n    \"\"\"Determine if n is a prime number.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g(k=3):\n    n = k\n    primes = []\n    while len(primes) < k:\n        if f(n):\n            primes.append(n)\n        n += 1\n    return primes[-1]\n\nassert f(g())\n",
        "idx_generation": 83,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, n: int) -> bool:\n    \"\"\"Check if the length of the string is equal to n\"\"\"\n    return len(x) == n\ndef g(n = 10):\n    return \"a\" * n\nassert f(g(), 10)\n",
        "idx_generation": 189,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if the list contains at least three consecutive integers.\"\"\"\n    return any(lst[i] == lst[i+1] - 1 == lst[i+2] - 2 for i in range(len(lst)-2))\ndef g():\n    return [1, 2, 3, 4, 5, 7]\nassert f(g())\n",
        "idx_generation": 133,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, num1=15, num2=25) -> bool:\n    \"\"\"Check if a number is in the range of two other numbers\"\"\"\n    return num1 <= n <= num2\ndef g(num1=15, num2=25):\n    return random.randint(num1, num2)\nassert f(g())\n",
        "idx_generation": 291,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a subset of the list that adds up to the target value\"\"\"\n    def check_subset(nums, target, i, current_sum):\n        if current_sum == target:\n            return True\n        if i == len(nums):\n            return False\n        return check_subset(nums, target, i+1, current_sum) or check_subset(nums, target, i+1, current_sum+nums[i])\n    return check_subset(nums, target, 0, 0)\ndef g(target = 50):\n    return [10, 20, 30, 40, 50]\nassert f(g())\n",
        "idx_generation": 101,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(t: str, s='HELLO WORLD') -> bool:\n    \"\"\"\n    Given a string s, reverse the case of all alphabetic characters.\n\n    Sample Input:\n    s = \"Hello World\"\n\n    Sample Output:\n    hELLO wORLD\n    \"\"\"\n    i = 0\n    for c in s:\n        if c.isalpha():\n            assert t[i] == c.swapcase(), f'expecting `{c.swapcase()}` at position {i}'\n            i += 1\n        else:\n            assert t[i] == c, f'expecting `{c}` at position {i}'\n            i += 1\n    return i == len(t)\ndef g(s = 'HELLO WORLD'):\n    return s.swapcase()\nassert f(g())\n",
        "idx_generation": 238,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(ans: str, target=0) -> bool:\n    \"\"\"\n    Check if the given string has the same number of vowels as the target number\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in ans:\n        if char.lower() in vowels:\n            count += 1\n    return count == target\n\ndef g(target=0):\n    return \"hello\" * target\n\nassert f(g())\n",
        "idx_generation": 116,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Find a number that, when multiplied by 7, results in 42.\"\"\"\n    return n * 7 == 42\ndef g():\n    return 42 // 7\nassert f(g())\n",
        "idx_generation": 170,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=1, p=1) -> bool:\n    \"\"\"Check if a given number is divisible by another number raised to a power.\"\"\"\n    return n % (m ** p) == 0\ndef g(n=100, m=10, p=2):\n    return n\nassert f(g())\n",
        "idx_generation": 85,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, t='racecar') -> bool:\n    \"\"\"\n    Given a string s, determine if it is a palindrome. A palindrome is a word, phrase,\n    number, or other sequence of characters that reads the same forward and backward.\n\n    Sample Input:\n    s = \"racecar\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return s == t\n\ndef g(t='racecar'):\n    return t\n\nassert f(g())\n",
        "idx_generation": 244,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\ndef f(x: List[int], n=100, t=50) -> bool:\n    \"\"\"Find a list of n unique integers that sum up to t\"\"\"\n    return len(x) == n and sum(x) == t and len(set(x)) == n\ndef g(n = 100, t = 50):\n    random.seed(42)\n    x = random.sample(range(1, n + 1), n - 1)\n    x.append(t - sum(x))\n    return x\nassert f(g())\n",
        "idx_generation": 295,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target = 0) -> bool:\n    \"\"\"Check if there exist three numbers such that their sum is equal to the target value.\"\"\"\n    return any((arr[i] + arr[j] + arr[k] == target for i in range(len(arr)) for j in range(i+1, len(arr)) for k in range(j+1, len(arr))))\ndef g(arr):\n    return arr\nassert f(g([1, 2, 3, 4, 5]), target=9)\n",
        "idx_generation": 238,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=25) -> bool:\n    \"\"\"\n    Check if there exists a pair of elements in a list that sum up to a given target number.\n\n    Sample input:\n    [10, 15, 20, 25, 30]\n\n    Sample output:\n    True\n\n    There exists a pair of elements (10 and 15) in the list that sum up to the target number 25.\n    \"\"\"\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\n\ndef g(lst: List[int]):\n    return lst\n\nlst = [10, 15, 20, 25, 30]\n\nassert f(g(lst))\n",
        "idx_generation": 298,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10, 12, 14, 16]) -> bool:\n    \"\"\"Check if n is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef g(nums=[2, 4, 6, 8, 10, 12, 14, 16]):\n    for num in nums:\n        if f(num):\n            return num\n    return -1\nassert f(g())\n",
        "idx_generation": 142,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=10, b=20, c=30) -> bool:\n    \"\"\"Check if the sum of a, b, and c is equal to x.\"\"\"\n    return a + b + c == x\ndef g(a=10, b=20, c=30):\n    return a + b + c\nassert f(g())\n",
        "idx_generation": 111,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], n=3) -> bool:\n    \"\"\"Check if there are n consecutive numbers in the list nums\"\"\"\n    nums.sort()\n    return any(nums[i] == nums[i+1] - 1 == nums[i+2] - 2 for i in range(len(nums) - 2))\ndef g(n=3):\n    return list(range(1, n+1))\nassert f(g())\n",
        "idx_generation": 190,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(lst: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a subset of lst that sums up to target_sum.\"\"\"\n    n = len(lst)\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(target_sum + 1):\n            if j < lst[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - lst[i - 1]]\n\n    return dp[n][target_sum]\n\ndef g(lst: List[int], target_sum=100):\n    random.shuffle(lst)\n    return lst\n\nassert f(g(lst=[1, 2, 3, 4, 5]), 9)\n",
        "idx_generation": 141,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"\n    Given a string and a number, determine if there is any substring of length n in the string that contains\n    all unique characters.\n    \"\"\"\n    for i in range(len(s)-n+1):\n        substring = s[i:i+n]\n        if len(substring) == len(set(substring)):\n            return True\n    return False\n\ndef g(n=3):\n    s = \"abacabad\"\n    return s\n\nassert f(g())\n",
        "idx_generation": 0,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(stamps: List[int], target=50, max_stamps=5, options=[10, 20, 30, 40, 50]) -> bool:\n    \"\"\"Find a selection of at most max_stamps stamps whose total worth is the target value.\"\"\"\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target\ndef g(target = 50, max_stamps = 5, options = [10, 20, 30, 40, 50]):\n    from itertools import combinations_with_replacement\n    for n in range(max_stamps + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g())\n",
        "idx_generation": 69,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Check if there exists a subarray in the matrix such that the sum of its elements is equal to the target value.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j] == target:\n                return True\n    return False\n\ndef g(target=15):\n    return [[1, 2, 3],\n            [4, 5, 6],\n            [7, 8, target]]\n\nassert f(g())\n",
        "idx_generation": 138,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(n: int, nums=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29], target=100) -> bool:\n    \"\"\"\n    Find a list of prime numbers whose sum is equal to the target number\n    \"\"\"\n    primes = [num for num in nums if num <= target]\n    for i in range(1, len(primes) + 1):\n        for combination in itertools.combinations(primes, i):\n            if sum(combination) == target:\n                return True\n    return False\ndef g(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29], target = 100):\n    return nums\nassert f(g())\n",
        "idx_generation": 86,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target = 10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 201,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of integers in the list that sum up to the target.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 141,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find if the target number is in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=10):\n    matrix.append(list(range(10, 20)))\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 294,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], target=10) -> bool:\n    \"\"\"Find if there is a subsequence of the list that sums up to the target\"\"\"\n    n = len(x)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(target + 1):\n            if j < x[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - x[i - 1]]\n    \n    return dp[n][target]\n\ndef g(target=10):\n    x = [1, 2, 3, 4, 5]\n    return x\n\nassert f(g())",
        "idx_generation": 150,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, sub='python') -> bool:\n    \"\"\"Check if the given substring exists in the string.\"\"\"\n    return sub in s\ndef g(sub='python'):\n    return sub * 10\nassert f(g())\n",
        "idx_generation": 239,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='python', max_len=10) -> bool:\n    \"\"\"Check if a word is a substring of a string and its length is less than or equal to a given maximum length.\"\"\"\n    return word in s and len(word) <= max_len\ndef g(word='python', max_len=10):\n    return word\nassert f(g())\n",
        "idx_generation": 123,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k=3) -> bool:\n    \"\"\"Check if n is divisible by k\"\"\"\n    return n % k == 0\n\ndef g(k = 3):\n    return k * 5\nassert f(g())\n",
        "idx_generation": 171,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, target=100) -> bool:\n    \"\"\"Check if a given number is a perfect square and its square root is less than a target value\"\"\"\n    return math.isqrt(n) ** 2 == n and math.isqrt(n) < target\ndef g(target=100):\n    return int(math.sqrt(target - 1)) ** 2\nassert f(g())\n",
        "idx_generation": 92,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='abc', count=2) -> bool:\n    \"\"\"\n    Find if the given string contains the given substring, exactly count number of times\n    \"\"\"\n    return s.count(substr) == count\ndef g(substr='abc', count=2):\n    return substr * count\nassert f(g())\n",
        "idx_generation": 260,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=100, n=5) -> bool:\n    \"\"\"Find if there exists a subset of length n with sum equal to target\"\"\"\n    def subsetSum(arr, n, target):\n        if target == 0:\n            return True\n        if n == 0:\n            return False\n        \n        if arr[n-1] > target:\n            return subsetSum(arr, n-1, target)\n        \n        return subsetSum(arr, n-1, target) or subsetSum(arr, n-1, target-arr[n-1])\n    \n    return subsetSum(arr, len(arr), target) and len(arr) >= n\n    \ndef g(target = 100, n = 5):\n    return [20, 30, 40, 50, 60, 70, 80, 90]\n    \nassert f(g())\n",
        "idx_generation": 305,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=10, s=100) -> bool:\n    \"\"\"Construct a list of n distinct integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n = 10, s = 100):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x\nassert f(g())\n",
        "idx_generation": 261,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=23) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum to the target.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=23):\n    nums = [1, 8, 12, 5, 9, 15]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 298,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Find if there are three numbers in the list that sum up to the target.\n    \"\"\"\n    nums.sort()\n    n = len(nums)\n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            curr_sum = nums[i] + nums[left] + nums[right]\n            if curr_sum == target:\n                return True\n            elif curr_sum < target:\n                left += 1\n            else:\n                right -= 1\n    \n    return False\n\ndef g(target=0):\n    \"\"\"\n    This solution uses two-pointer technique to find the triplet that sums up to the target.\n    \"\"\"\n    nums = [-1, 0, 1, 2, -1, -4]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 173,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\ndef f(x: float, a=100) -> bool:\n    \"\"\"Find a number that when squared is less than a.\"\"\"\n    return x ** 2 < a\ndef g(a=100):\n    return math.sqrt(a) - 1\nassert f(g())\n",
        "idx_generation": 120,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if any three numbers in a list add up to a given target number.\"\"\"\n    for i in range(len(nums)-2):\n        for j in range(i+1, len(nums)-1):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=100):\n    return [1, 2, target-3]\n\nassert f(g())\n",
        "idx_generation": 238,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Find if there exists two distinct indices i and j in the list such that nums[i] - nums[j] = k.\"\"\"\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            if i != j and nums[i] - nums[j] == k:\n                return True\n    return False\ndef g(k=3):\n    return [0, k]\nassert f(g())\n",
        "idx_generation": 164,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[str], a='apple', b='banana', c='cherry', d='date') -> bool:\n    \"\"\"Check if a list contains all specified elements in order\"\"\"\n    return a in x and b in x and c in x and d in x and x.index(a) < x.index(b) < x.index(c) < x.index(d)\ndef g(a='apple', b='banana', c='cherry', d='date'):\n    return [a, b, c, d]\nassert f(g())\n",
        "idx_generation": 0,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10, length=3) -> bool:\n    \"\"\"\n    Find a subsequence of length 'length' in the list 'nums' that sums up to 'target'\n    \"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, length))\ndef g(target=10, length=3):\n    \"\"\"\n    This solution uses a brute force approach by generating all combinations of length 'length' from the list 'nums'\n    \"\"\"\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums\nassert f(g())\n",
        "idx_generation": 126,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=2022) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=2022):\n    return [target // 2, target // 2]\nassert f(g())\n",
        "idx_generation": 138,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\ndef f(num: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if the number is prime\"\"\"\n    if num < 2:\n        return False\n    for prime in primes:\n        if num % prime == 0:\n            return False\n    for i in range(30, math.isqrt(num) + 1, 30):\n        for prime in primes:\n            if num % (i + prime) == 0 or num % (i + prime + 2) == 0:\n                return False\n    return True\ndef g(num = 37):\n    return num\nassert f(g())\n",
        "idx_generation": 110,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=2.5, b=5) -> bool:\n    \"\"\"Check if a number multiplied by a is equal to b\"\"\"\n\n    return x * a == b\n\ndef g(a=2.5, b=5):\n    return b / a\n\nassert f(g())\n",
        "idx_generation": 219,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_len=5) -> bool:\n    \"\"\"Check if any word in the list has a length greater than the target length\"\"\"\n    return any(len(word) > target_len for word in words)\ndef g(target_len=5):\n    return [\"apple\", \"banana\", \"pear\", \"orange\"]\nassert f(g())\n",
        "idx_generation": 169,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, day_of_week='Monday') -> bool:\n    \"\"\"Check if the given date falls on the specified day of the week\"\"\"\n    return date.strftime('%A') == day_of_week\n\ndef g(day_of_week='Monday'):\n    return datetime.datetime(2022, 1, 3).date()\n\ndate = g()\nassert f(date)\n",
        "idx_generation": 296,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5], target=10) -> bool:\n    \"\"\"Find if there exists a combination of n numbers from a list that adds up to a target number\"\"\"\n    dp = [False] * (target + 1)\n    dp[0] = True\n    for num in nums:\n        for i in range(target, num - 1, -1):\n            dp[i] = dp[i] or dp[i - num]\n    return dp[target]\ndef g(nums=[1, 2, 3, 4, 5], target=10):\n    dp = [False] * (target + 1)\n    dp[0] = True\n    for num in nums:\n        for i in range(target, num - 1, -1):\n            dp[i] = dp[i] or dp[i - num]\n    return dp[target]\nassert f(g())\n",
        "idx_generation": 156,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='hello world', length=5) -> bool:\n    \"\"\"Check if the target string contains the given substring.\"\"\"\n    return s in target\ndef g(target = 'hello world', length = 5):\n    return target[:length]\nassert f(g())\n",
        "idx_generation": 239,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"Check if the string contains a repeated substring of length n.\"\"\"\n    for i in range(len(s) - 2 * n + 1):\n        if s[i:i+n] == s[i+n:i+2*n]:\n            return True\n    return False\n\ndef g(s: str, n: int):\n    return s\n\n# Test case\ns = \"ababab\"\nn = 2\nassert f(g(s, n), n)\n",
        "idx_generation": 133,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, days=7) -> bool:\n    \"\"\"Check if the date is exactly one week (7 days) after the current date.\"\"\"\n    current_date = datetime.date.today()\n    target_date = current_date + datetime.timedelta(days=days)\n    return date == target_date\n\ndef g(days=7):\n    current_date = datetime.date.today()\n    return current_date + datetime.timedelta(days=days)\n\nassert f(g())\n",
        "idx_generation": 172,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\ndef f(n: int, m: int) -> bool:\n    \"\"\"Find the smallest integer x such that x^2 + (x+n)^2 = m^2\"\"\"\n    return any(x for x in range(1, m+1) if math.isqrt(x**2 + (x+n)**2) == m)\ndef g(n = 2, m = 5):\n    return n, m\nassert f(*g())\n",
        "idx_generation": 108,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, word='python') -> bool:\n    \"\"\"\n    Check if the given number is divisible by the number of characters in the word.\n    Return True if it is divisible, False otherwise.\n    \"\"\"\n    return n % len(word) == 0\n\ndef g(word='python'):\n    return len(word)\n\nassert f(g())\n",
        "idx_generation": 281,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k=3) -> bool:\n    \"\"\"Check if there exists a combination of k numbers from 1 to n that sum up to n.\"\"\"\n    if n < k:\n        return False\n    if k == 1:\n        return True\n    if k == 2:\n        return n % 2 == 0\n\n    dp = [[False] * (n + 1) for _ in range(k + 1)]\n    dp[0][0] = True\n\n    for i in range(1, k + 1):\n        for j in range(1, n + 1):\n            if j >= i:\n                dp[i][j] = dp[i - 1][j - i] or dp[i][j - 1]\n            else:\n                dp[i][j] = dp[i][j - 1]\n\n    return dp[k][n]\n\ndef g(n = 10):\n    return n\n\nassert f(g()) == True\n",
        "idx_generation": 314,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: list, num_elements=3) -> bool:\n    \"\"\"Check if a list contains a certain number of elements\"\"\"\n    return len(x) == num_elements\n\ndef g(num_elements=3):\n    return [1] * num_elements\n\nassert f(g())\n",
        "idx_generation": 305,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums: List[int], g1=5, g2=10) -> bool:\n    \"\"\"Check if the list of numbers contains two elements whose difference is equal to n\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if abs(nums[i] - nums[j]) == n:\n                return True\n    return False\ndef g(nums = [1, 2, 3, 4, 5], n = 3):\n    return (n, nums)\nassert f(*g())\n",
        "idx_generation": 299,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix, determine if it is a symmetric matrix.\n    \"\"\"\n    n = len(matrix)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    \n    return True\n\ndef g():\n    return [[1, 2, 3],\n            [2, 4, 5],\n            [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 218,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if n is a prime number.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef g():\n    n = 97\n    return n\nassert f(g())\n",
        "idx_generation": 126,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(lst: List[int], n=5) -> bool:\n    \"\"\"Check if a list contains a specific number n.\"\"\"\n    return n in lst\ndef g(n=5):\n    lst = random.sample(range(10), 10)\n    return lst\nassert f(g())\n",
        "idx_generation": 253,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if n is a prime number\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums[-1]\nassert f(g())\n",
        "idx_generation": 185,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, ops=['x++', '--x', '--x'], target=19143212, total_ops=5) -> bool:\n    \"\"\"\n    Given a sequence of operations \"++x\", \"x++\", \"--x\", \"x--\", and a target value, find initial value so that the\n    final value is the target value. The number of operations performed is limited by `total_ops`.\n\n    Sample Input:\n    ops = [\"x++\", \"--x\", \"--x\"]\n    target = 12\n    total_ops = 5\n\n    Sample Output:\n    13\n    \"\"\"\n    count = 0\n    for op in ops:\n        if count >= total_ops:\n            break\n        if op in ['++x', 'x++']:\n            n += 1\n        else:\n            assert op in ['--x', 'x--']\n            n -= 1\n        count += 1\n    return n == target\ndef g(ops = ['x++', '--x', '--x'], target = 19143212, total_ops = 5):\n    return target - ops.count(\"++x\") - ops.count(\"x++\") + ops.count(\"--x\") + ops.count(\"x--\")\nassert f(g())\n",
        "idx_generation": 3,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the array that add up to the target value.\"\"\"\n    return any(arr[i] + arr[j] == target for i in range(len(arr) - 1) for j in range(i + 1, len(arr)))\ndef g(target=10):\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return arr\nassert f(g())\n",
        "idx_generation": 153,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target = 10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 143,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(lst: list, num=5) -> bool:\n    \"\"\"\n    Given a list of integers, check if the sum of the list is equal to or greater than num.\n\n    Sample Input:\n    lst = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    return sum(lst) >= num\n\ndef g(num=5):\n    lst = [random.randint(1, 10) for _ in range(num)]\n    return lst\n\nassert f(g())\n",
        "idx_generation": 140,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=1) -> bool:\n    \"\"\"Check if the target value is present in the list of numbers.\"\"\"\n    return target in nums\ndef g(nums=[1, 2, 3, 4, 5], target=1):\n    return nums\nassert f(g())\n",
        "idx_generation": 223,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=2) -> bool:\n    \"\"\"Find if there exists a subarray in nums that sums up to a multiple of k\"\"\"\n    prefix_sums = [0]\n    for num in nums:\n        prefix_sums.append((prefix_sums[-1] + num) % k)\n    seen = set()\n    for i in range(len(prefix_sums)):\n        if prefix_sums[i] in seen:\n            return True\n        seen.add(prefix_sums[i - 1])\n    return False\ndef g(k = 2):\n    nums = [1, 2, 3, 4, 5]\n    return nums\nassert f(g())\n",
        "idx_generation": 182,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Check if a given number is present in the list.\"\"\"\n    return n in lst\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return lst[4]\nassert f(g())\n",
        "idx_generation": 297,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Find if there exists a subset of the given list such that the sum of its elements is equal to target.\"\"\"\n    def dfs(index, curr_sum):\n        if curr_sum == target:\n            return True\n        if index == len(nums):\n            return False\n        if dfs(index + 1, curr_sum + nums[index]):\n            return True\n        if dfs(index + 1, curr_sum):\n            return True\n        return False\n    return dfs(0, 0)\ndef g(target=5):\n    return [1, 2, 3, target - 1]\nassert f(g())\n",
        "idx_generation": 164,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr=\"world\") -> bool:\n    \"\"\"\n    Check if the given substring exists in the given string.\n    - s is the main string\n    - substr is the substring to search for\n    \"\"\"\n\n    return substr in s\n\ndef g(s = \"Hello, world!\", substr = \"world\"):\n    return s\nassert f(g())\n",
        "idx_generation": 240,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr=\"abc\") -> bool:\n    \"\"\"Check if the substring is present in the given string.\"\"\"\n    return substr in s\ndef g(substr=\"abc\"):\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    return s\nassert f(g())\n",
        "idx_generation": 146,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=1234567890) -> bool:\n    \"\"\"Check if the square root of a given number is a perfect square.\"\"\"\n    return math.isqrt(n) ** 2 == n\ndef g(x=1234567890):\n    return x ** 2\nassert f(g())\n",
        "idx_generation": 176,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, arr=[2, 4, 6, 8, 10], target=20) -> bool:\n    \"\"\"Check if the product of n and all the elements in arr is equal to target.\"\"\"\n    return n * arr[0] * arr[1] * arr[2] * arr[3] * arr[4] == target\ndef g(arr=[2, 4, 6, 8, 10], target=20):\n    return target / (arr[0] * arr[1] * arr[2] * arr[3] * arr[4])\nassert f(g())\n",
        "idx_generation": 120,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, num_repeats=3, target='abc') -> bool:\n    \"\"\"Check if a string is equal to a target string repeated a certain number of times.\"\"\"\n    return s == target * num_repeats\ndef g(num_repeats=3, target='abc'):\n    return target * num_repeats\nassert f(g())\n",
        "idx_generation": 386,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=10, s=100) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 10, s = 100):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x\nassert f(g())\n",
        "idx_generation": 337,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target=10, max_numbers=3) -> bool:\n    \"\"\"Find a combination of at most max_numbers numbers whose sum is equal to the target value\"\"\"\n    return sum(numbers) == target and len(numbers) <= max_numbers\ndef g(target=10, max_numbers=3):\n    from itertools import combinations\n    for n in range(1, max_numbers + 1):\n        for c in combinations(range(1, 10), n):\n            if sum(c) == target:\n                return list(c)\nassert f(g())\n",
        "idx_generation": 322,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums)))\ndef g(nums = [50, 25, 75, 10, 90]):\n    return nums\nassert f(g())\n",
        "idx_generation": 299,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=12) -> bool:\n    \"\"\"Find a combination of numbers in the list that adds up to the target number.\"\"\"\n    def backtrack(nums, target, start, path, results):\n        if target == 0:\n            results.append(path)\n            return\n        for i in range(start, len(nums)):\n            if nums[i] > target:\n                continue\n            backtrack(nums, target - nums[i], i + 1, path + [nums[i]], results)\n    results = []\n    nums.sort()\n    backtrack(nums, target, 0, [], results)\n    return len(results) > 0\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\nassert f(g())\n",
        "idx_generation": 239,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(num: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) -> bool:\n    \"\"\"Check if a number is prime by checking if it is divisible by any prime number up to its square root.\"\"\"\n    if num < 2:\n        return False\n    for prime in primes:\n        if prime > sqrt(num):\n            break\n        if num % prime == 0:\n            return False\n    return True\n\ndef g(num: int):\n    return num\n\nassert f(g(53))\n",
        "idx_generation": 156,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"\n    Check if there are two numbers in the given list that add up to the target number.\n    Return True if such numbers exist, False otherwise.\n    \"\"\"\n    num_set = set(numbers)\n    for num in numbers:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False\n\ndef g(target=10):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 274,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a sublist in the given list whose sum is equal to the given target value.\"\"\"\n    return any(sum(lst[i:j]) == target for i in range(len(lst)) for j in range(i+1, len(lst)+1))\ndef g(target=100):\n    lst = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    return lst\nassert f(g())\n",
        "idx_generation": 231,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], start_letter='A', end_letter='Z') -> bool:\n    \"\"\"Check if the first and last letters of each word in the list match the start and end letters respectively.\"\"\"\n    return all(word[0] == start_letter and word[-1] == end_letter for word in words)\ndef g(start_letter='A', end_letter='Z'):\n    return [start_letter + str(i) + end_letter for i in range(10)]\nassert f(g())\n",
        "idx_generation": 13,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=13) -> bool:\n    \"\"\"Check if there exists two elements in the list whose sum is equal to the target\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\nassert f(g())\n",
        "idx_generation": 173,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if all numbers in the list are positive.\"\"\"\n    return all(num > 0 for num in nums)\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 143,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if there exists a row or column in the matrix whose sum is equal to the target.\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    return target in row_sums or target in col_sums\ndef g(matrix):\n    return [[x for x in row if x != 0] for row in matrix]\nassert f(g([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), target=15)\n",
        "idx_generation": 142,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, threshold: int = 10) -> bool:\n    \"\"\"Check if the sum of all elements in the numpy array is above a threshold value.\"\"\"\n    return np.sum(arr) > threshold\n\ndef g(n: int = 5, m: int = 4):\n    return np.ones((n, m))\n\nassert f(g())\n",
        "idx_generation": 226,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, factor=3) -> bool:\n    \"\"\"Check if the given number n is divisible by the factor.\"\"\"\n    return n % factor == 0\ndef g(factor=3):\n    return factor * 10\nassert f(g())\n",
        "idx_generation": 210,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, threshold=50) -> bool:\n    \"\"\"\n    Check if the sum of the elements in a numpy array exceeds a given threshold.\n\n    Sample input:\n    np.array([[10, 20, 30],\n              [40, 50, 60]])\n\n    Sample output:\n    True\n\n    The sum of all elements in the array is 210, which is greater than the threshold of 50.\n    \"\"\"\n    return np.sum(arr) > threshold\n\ndef g(arr: np.ndarray):\n    return arr\n\narr = np.array([[10, 20, 30],\n                [40, 50, 60]])\n\nassert f(g(arr))\n",
        "idx_generation": 298,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"\n    Find if there is a straight line in the matrix that sums up to the target.\n    \"\"\"\n    def dfs(i, j, curr_sum):\n        if curr_sum == target:\n            return True\n        if i < 0 or i >= len(matrix) or j < 0 or j >= len(matrix[0]):\n            return False\n        \n        curr_sum += matrix[i][j]\n        return dfs(i + 1, j, curr_sum) or dfs(i, j + 1, curr_sum)\n\n    m, n = len(matrix), len(matrix[0])\n    for i in range(m):\n        for j in range(n):\n            if dfs(i, j, 0):\n                return True\n    \n    return False\n\ndef g(target=15):\n    \"\"\"\n    This solution uses depth-first search (DFS) to explore all possible paths in the matrix.\n    \"\"\"\n    matrix = [\n        [1, 2, 3, 4],\n        [5, 6, 7, 8],\n        [9, 10, 11, 12],\n        [13, 14, 15, 16]\n    ]\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 173,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, pattern=\"ABC\") -> bool:\n    \"\"\"\n    Given a string and a pattern, determine if the string follows the pattern.\n    The pattern consists of lowercase English letters and the string consists of words separated by a single space.\n    \"\"\"\n    words = s.split()\n    if len(words) != len(pattern):\n        return False\n    mapping = {}\n    for i in range(len(pattern)):\n        if pattern[i] in mapping:\n            if mapping[pattern[i]] != words[i]:\n                return False\n        else:\n            if words[i] in mapping.values():\n                return False\n            mapping[pattern[i]] = words[i]\n    return True\n\ndef g(s=\"apple banana cherry\"):\n    return s\nassert f(g())\n",
        "idx_generation": 241,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport re\n\ndef f(s: str, pattern=r\"\\d{3}-\\d{3}-\\d{4}\") -> bool:\n    \"\"\"\n    Check if a string matches a specific pattern.\n    \"\"\"\n    return re.match(pattern, s) is not None\ndef g(pattern=r\"\\d{3}-\\d{3}-\\d{4}\"):\n    s = \"123-456-7890\"\n    return s\nassert f(g())\n",
        "idx_generation": 164,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: datetime.datetime, days=10) -> bool:\n    \"\"\"Check if the given date is within the next 'days' days\"\"\"\n    now = datetime.datetime.now()\n    return (date - now).days <= days\ndef g(days=10):\n    return datetime.datetime.now() + datetime.timedelta(days=days)\nassert f(g())\n",
        "idx_generation": 182,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], k=3, target=7) -> bool:\n    \"\"\"\n    Find if there are k numbers in the list that sum up to the target.\n    \"\"\"\n    def backtrack(idx, count, curr_sum):\n        if count == k and curr_sum == target:\n            return True\n        if count > k or curr_sum > target or idx >= len(numbers):\n            return False\n        return backtrack(idx + 1, count + 1, curr_sum + numbers[idx]) or backtrack(idx + 1, count, curr_sum)\n\n    return backtrack(0, 0, 0)\n\ndef g(k=3, target=7):\n    \"\"\"\n    This solution uses backtracking to explore all possible combinations of k numbers from the list.\n    \"\"\"\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 173,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=2) -> bool:\n    \"\"\"Check if a given string can be formed by concatenating exactly k copies of a subsequence of s\"\"\"\n    return s in (s * k)\ndef g(k = 2):\n    return 'abc' * k\nassert f(g())\n",
        "idx_generation": 396,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(lst: List[int], target=100, n=3) -> bool:\n    \"\"\"Find if there exists a combination of n numbers in the list whose sum is equal to the target\"\"\"\n    from itertools import combinations\n    for comb in combinations(lst, n):\n        if sum(comb) == target:\n            return True\n    return False\ndef g(lst=[10, 20, 30, 40, 50, 60, 70, 80, 90]):\n    return lst\nassert f(g())\n",
        "idx_generation": 19,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, arr: List[int]) -> bool:\n    \"\"\"Check if there exists a subset of the array arr that sums up to n.\"\"\"\n    return subset_sum_helper(arr, n, len(arr))\n    \ndef subset_sum_helper(arr: List[int], n: int, i: int) -> bool:\n    if n == 0:\n        return True\n    if i == 0:\n        return False\n    if arr[i-1] > n:\n        return subset_sum_helper(arr, n, i-1)\n    return subset_sum_helper(arr, n, i-1) or subset_sum_helper(arr, n-arr[i-1], i-1)\n\ndef g(n=10, arr=[1, 2, 3, 4, 5, 6]):\n    return (n, arr)\nassert f(*g())\n",
        "idx_generation": 343,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], n=5) -> bool:\n    \"\"\"Check if there exists a subset of n numbers from the list that adds up to zero\"\"\"\n    from itertools import combinations\n    for subset in combinations(nums, n):\n        if sum(subset) == 0:\n            return True\n    return False\ndef g(nums=[-2, -1, 0, 1, 2]):\n    return nums\nassert f(g())\n",
        "idx_generation": 347,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], rows=3, cols=3) -> bool:\n    \"\"\"Check if the given matrix is a magic square\"\"\"\n    target = sum(matrix[0])\n    # Check rows\n    for row in matrix:\n        if sum(row) != target:\n            return False\n    # Check columns\n    for i in range(cols):\n        col_sum = 0\n        for j in range(rows):\n            col_sum += matrix[j][i]\n        if col_sum != target:\n            return False\n    # Check diagonals\n    diag_sum1 = 0\n    diag_sum2 = 0\n    for i in range(rows):\n        diag_sum1 += matrix[i][i]\n        diag_sum2 += matrix[i][cols-i-1]\n    if diag_sum1 != target or diag_sum2 != target:\n        return False\n    return True\n\ndef g(rows=3, cols=3):\n    \"\"\"Generate a magic square matrix\"\"\"\n    matrix = [[0 for _ in range(cols)] for _ in range(rows)]\n    i = 0\n    j = cols // 2\n    num = 1\n    while num <= rows * cols:\n        matrix[i][j] = num\n        num += 1\n        new_i = (i - 1) % rows\n        new_j = (j + 1) % cols\n        if matrix[new_i][new_j] != 0:\n            i = (i + 1) % rows\n        else:\n            i = new_i\n            j = new_j\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 301,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(seq: List[int], target_sum=10) -> bool:\n    \"\"\"\n    Given a list of integers and a target sum, determine if there exists a subset of the list that adds up to the target sum.\n    \"\"\"\n    def subset_sum(seq, target_sum, index):\n        if target_sum == 0:\n            return True\n        if index >= len(seq):\n            return False\n        if seq[index] > target_sum:\n            return subset_sum(seq, target_sum, index + 1)\n        return subset_sum(seq, target_sum - seq[index], index + 1) or subset_sum(seq, target_sum, index + 1)\n    \n    return subset_sum(seq, target_sum, 0)\n\ndef g(seq=[1, 2, 3, 4, 5]):\n    return seq\n\nassert f(g())\n",
        "idx_generation": 240,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=4) -> bool:\n    \"\"\"Determine if n is a perfect square and if it is divisible by a and b.\"\"\"\n    return n ** 0.5 % 1 == 0 and n % a == 0 and n % b == 0\ndef g(a = 3, b = 4):\n    n = 1\n    while True:\n        if n ** 0.5 % 1 == 0 and n % a == 0 and n % b == 0:\n            return n\n        n += 1\nassert f(g())\n",
        "idx_generation": 177,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers, return True if there exists a pair of numbers such that their sum is equal to the target.\n\n    Sample Input:\n    [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, target - 1]\n\nassert f(g())\n",
        "idx_generation": 313,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[25, 12, 7, 3, 45, 16, 8, 31, 22], target_sum=50) -> bool:\n    \"\"\"\n    Find if there exists a subset of the given list whose sum is equal to the target sum.\n    - n is the length of the list\n    - nums is the list of integers\n    - target_sum is the desired sum\n    \"\"\"\n\n    def subset_sum_exists(nums, target_sum):\n        dp = [False] * (target_sum + 1)\n        dp[0] = True\n        for num in nums:\n            for i in range(target_sum, num - 1, -1):\n                dp[i] = dp[i] or dp[i - num]\n        return dp[target_sum]\n\n    return subset_sum_exists(nums, target_sum)\n\ndef g(nums = [25, 12, 7, 3, 45, 16, 8, 31, 22], target_sum = 50):\n    return nums\nassert f(g())\n",
        "idx_generation": 240,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport re\n\ndef f(sentence: str, word='world') -> bool:\n    \"\"\"\n    Check if a word is present in a given sentence.\n    \"\"\"\n    return bool(re.search(r'\\b' + word + r'\\b', sentence))\ndef g(word = 'world'):\n    return \"Hello, \" + word + \"!\"\nassert f(g())\n",
        "idx_generation": 14,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a=3, b=2) -> bool:\n    \"\"\"Check if the string can be divided into two substrings, each containing a consecutive sequence of 'a's and 'b's respectively.\"\"\"\n    return s.count('a') == a and s.count('b') == b and s.index('b') - s.index('a') == a\ndef g(a=3, b=2):\n    return 'a' * a + 'b' * b\nassert f(g())\n",
        "idx_generation": 191,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=12) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in a list that sums up to the target value.\n    \"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\nassert f(g())\n",
        "idx_generation": 157,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: int, y: int, z: int, target_sum=100) -> bool:\n    \"\"\"\n    Find three integers x, y, and z such that their sum is equal to the target sum and the product of x, y, and z is a perfect square.\n    \"\"\"\n    return x + y + z == target_sum and math.isqrt(x * y * z) ** 2 == x * y * z\ndef g(target_sum = 100):\n    for x in range(1, target_sum):\n        for y in range(1, target_sum - x):\n            z = target_sum - x - y\n            if math.isqrt(x * y * z) ** 2 == x * y * z:\n                return (x, y, z)\nassert f(*g())\n",
        "idx_generation": 149,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, lower=0, upper=100) -> bool:\n    \"\"\"Check if every element in the array is within the given range\"\"\"\n    return np.all(arr >= lower) and np.all(arr <= upper)\n\ndef g(lower=0, upper=100):\n    return np.random.randint(lower, upper+1, size=(5, 5))\n\narr = g()\nassert f(arr)\n",
        "idx_generation": 241,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"\n    Given an array of integers arr and a target integer, return True if there are two distinct indices i and j such that\n    arr[i] + arr[j] == target.\n    \n    Sample Input:\n    arr = [2, 4, 6, 8]\n    target = 12\n    \n    Sample Output:\n    True\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(arr=[2, 4, 6, 8], target=10):\n    return arr\nassert f(g())",
        "idx_generation": 214,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: str, days: int) -> bool:\n    \"\"\"\n    Check if the given number of days after a given date is a weekend day (Saturday or Sunday).\n    \"\"\"\n    dt = datetime.datetime.strptime(date, \"%Y-%m-%d\")\n    new_date = dt + datetime.timedelta(days=days)\n    return new_date.weekday() in [5, 6]\n\ndef g(date: str, days: int) -> str:\n    \"\"\"\n    Calculate the new date after adding the given number of days to a given date.\n    \"\"\"\n    dt = datetime.datetime.strptime(date, \"%Y-%m-%d\")\n    new_date = dt + datetime.timedelta(days=days)\n    return new_date.strftime(\"%Y-%m-%d\")\n\nassert f(g(date=\"2022-01-01\", days=7), days=7)\n",
        "idx_generation": 298,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"\n    Find if there exists a combination of numbers that equals the target number\n    \"\"\"\n    def dfs(numbers, current_sum, target):\n        if current_sum == target:\n            return True\n        if len(numbers) == 0 or current_sum > target:\n            return False\n        for i in range(len(numbers)):\n            if dfs(numbers[i+1:], current_sum + numbers[i], target):\n                return True\n        return False\n\n    return dfs(numbers, 0, target)\ndef g(target=100):\n    \"\"\"\n    This solution uses a depth-first search algorithm to find if there exists a combination of numbers that equals the target number\n    \"\"\"\n    numbers = [10, 20, 30, 40, 50]\n    return numbers\nassert f(g())\n",
        "idx_generation": 200,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"\n    Check if every word in the list words appears in the string s in order.\n    \"\"\"\n    start_index = 0\n    for word in words:\n        index = s.find(word, start_index)\n        if index == -1:\n            return False\n        start_index = index + len(word)\n    return True\ndef g(words=['apple', 'banana', 'cherry', 'date']):\n    return ''.join(words)\nassert f(g())\n",
        "idx_generation": 243,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substr='abc') -> bool:\n    \"\"\"\n    Given a string and a substring, check if the substring exists in the string in the same order.\n    \"\"\"\n    i = 0\n    for char in string:\n        if char == substr[i]:\n            i += 1\n            if i == len(substr):\n                return True\n    return False\n\ndef g(string='abacabadabacaba', substr='abc'):\n    return string\n\nassert f(g())\n",
        "idx_generation": 202,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a = 10, b = 20, c = 30) -> bool:\n    \"\"\"Check if the sum of three numbers is equal to x\"\"\"\n    return a + b + c == x\ndef g(a = 10, b = 20, c = 30):\n    return a + b + c\nassert f(g())\n",
        "idx_generation": 189,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k: int) -> bool:\n    \"\"\"\n    Determine if n is a power of k.\n    Return True if n is a power of k, False otherwise.\n    \"\"\"\n    if n <= 0 or k <= 0:\n        return False\n    while n % k == 0:\n        n //= k\n    return n == 1\n\ndef g(n=16, k=2):\n    return n, k\n\nassert f(*g())\n",
        "idx_generation": 180,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3, m=4) -> bool:\n    \"\"\"Check if a string has a certain number of occurrences of a specific character\"\"\"\n    return s.count(\"a\") == n and s.count(\"b\") == m\ndef g(n = 3, m = 4):\n    return \"a\" * n + \"b\" * m\nassert f(g())\n",
        "idx_generation": 23,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(li: List[int], k=5, target_sum=10) -> bool:\n    \"\"\"\n    Find k numbers in the list that sum up to a target sum.\n    \"\"\"\n    nums = random.sample(li, k)\n    return sum(nums) == target_sum\n\ndef g(k=5, target_sum=10):\n    return [target_sum // k] * k\n\nassert f(g())\n",
        "idx_generation": 347,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(x: List[int], target=100) -> bool:\n    \"\"\"Check if the list contains a combination of numbers that sum up to the target\"\"\"\n    for i in range(1, len(x) + 1):\n        for combination in itertools.combinations(x, i):\n            if sum(combination) == target:\n                return True\n    return False\n\ndef g(target=100):\n    x = [10, 20, 30, 40, 50]\n    return x\n\nassert f(g())\n",
        "idx_generation": 348,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int, limit=1000) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list nums that sum up to the target, within the limit\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n            if nums[i] + nums[j] > target:\n                break\n    return False\ndef g(target=1000, limit=1000):\n    nums = [n for n in range(1, limit+1)]\n    return nums\nassert f(g(), target=1000)\n",
        "idx_generation": 303,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=12, num_combinations=3) -> bool:\n    \"\"\"\n    Combination Sum\n\n    Given a list of numbers and a target, find if there exists a combination of numbers in the list that add up to the target.\n    Each number in the list can be used multiple times.\n\n    Example:\n    nums = [2, 3, 5]\n    target = 8\n    output: True (since 2+2+2+2 = 8)\n    \"\"\"\n    def backtrack(remain, current_combination, start):\n        if remain == 0:\n            return True\n        elif remain < 0:\n            return False\n        else:\n            for i in range(start, len(nums)):\n                current_combination.append(nums[i])\n                if backtrack(remain - nums[i], current_combination, i):\n                    return True\n                current_combination.pop()\n            return False\n\n    nums.sort()\n    return backtrack(target, [], 0) and len(nums) >= num_combinations\ndef g(target=12, num_combinations=3):\n    nums = [2, 3, 5]\n    return nums\nassert f(g())\n",
        "idx_generation": 255,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, target=0) -> bool:\n    \"\"\"\n    Find if the sum of each row in the matrix equals the given target\n    \"\"\"\n    row_sums = np.sum(matrix, axis=1)\n    return all(row_sums == target)\n\ndef g(target=0):\n    matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    return matrix * target\n\nassert f(g())\n",
        "idx_generation": 179,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    from itertools import combinations\n    for c in combinations(nums, 2):\n        if sum(c) == target:\n            return True\n    return False\ndef g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\nassert f(g())\n",
        "idx_generation": 320,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5], 9\n\nassert f(*g())\n",
        "idx_generation": 245,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring: str = 'abc') -> bool:\n    \"\"\"\n    Given a string and a substring, check if the substring appears at least twice in the string.\n    \"\"\"\n    return s.count(substring) >= 2\ndef g(substring: str = 'abc'):\n    return 'xyz' + substring + substring\nassert f(g())\n",
        "idx_generation": 15,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], n=3) -> bool:\n    \"\"\"\n    Given a list of integers arr, find n consecutive numbers in the list such that the product of the numbers is\n    divisible by n.\n    \"\"\"\n    for i in range(len(arr) - n + 1):\n        sublist = arr[i:i+n]\n        if all(num % n == 0 for num in sublist):\n            return True\n    return False\ndef g(n = 3):\n    return [n * i for i in range(1, n + 1)]\nassert f(g())\n",
        "idx_generation": 225,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int = 0) -> bool:\n    \"\"\"Find a pair of numbers in the array that sums up to the target.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(target: int = 0):\n    return [target, 0]\nassert f(g())\n",
        "idx_generation": 158,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.array, thresh=0.5) -> bool:\n    \"\"\"\n    Check if the sum of all elements in the array is greater than the threshold.\n    \"\"\"\n    return np.sum(arr) > thresh\n\ndef g(arr = np.array([[0.2, 0.3], [0.4, 0.1]])):\n    return arr.flatten()\n\nassert f(g())\n",
        "idx_generation": 152,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=5, k=2) -> bool:\n    \"\"\"Check if n is divisible by m and the result is greater than or equal to k\"\"\"\n    return n % m == 0 and n // m >= k\ndef g(m = 5, k = 2):\n    n = 10\n    return n\nassert f(g())\n",
        "idx_generation": 254,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], a=10, b=20, c=30) -> bool:\n    \"\"\"Check if the sum of the list elements is equal to a + b + c\"\"\"\n    return sum(x) == a + b + c\n\ndef g(a=10, b=20, c=30):\n    return [a, b, c]\n\nassert f(g())\n",
        "idx_generation": 214,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8], k=2) -> bool:\n    \"\"\"\n    Given a list of integers and an integer k, determine if there exists a pair of distinct integers in the list\n    whose sum is divisible by k.\n    \"\"\"\n    return any(((nums[i] + nums[j]) % k == 0) for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8], k=2):\n    return any(((nums[i] + nums[j]) % k == 0) for i in range(len(nums)) for j in range(i+1, len(nums)))\nassert f(g())\n",
        "idx_generation": 299,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, arr=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"\n    Given a list of integers arr and an integer n, find if there exists any subset of arr that sums up to n.\n\n    Sample Input:\n    `10`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    def subset_sum(arr, n, idx, curr_sum):\n        if curr_sum == n:\n            return True\n        if idx < 0 or curr_sum > n:\n            return False\n        include = subset_sum(arr, n, idx-1, curr_sum+arr[idx])\n        exclude = subset_sum(arr, n, idx-1, curr_sum)\n        return include or exclude\n    return subset_sum(arr, n, len(arr)-1, 0)\ndef g(arr=[1, 2, 3, 4, 5]):\n    n = sum(arr) // 2\n    return n\nassert f(g())\n",
        "idx_generation": 211,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport re\n\ndef f(email: str, pattern=r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$') -> bool:\n    \"\"\"\n    Check if a given email matches a specified pattern\n    \"\"\"\n    return bool(re.match(pattern, email))\n\ndef g():\n    return \"example@gmail.com\"\n\nassert f(g())\n",
        "idx_generation": 244,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='lochuv') -> bool:\n    \"\"\"Check if a string is a palindrome and contains target string\"\"\"\n    return s == s[::-1] and target in s\ndef g(target='lochuv'):\n    return target + target[::-1]\nassert f(g())\n",
        "idx_generation": 209,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=17, b=3) -> bool:\n    \"\"\"Check if the square root of n is equal to the sum of a and b\"\"\"\n    return math.sqrt(n) == a + b\ndef g(a=17, b=3):\n    return (a + b) ** 2\nassert f(g())\n",
        "idx_generation": 195,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: int, a=13, b=5) -> bool:\n    \"\"\"Check if x is a perfect square and divisible by a, but not divisible by b\"\"\"\n    return math.sqrt(x) == int(math.sqrt(x)) and x % a == 0 and x % b != 0\n\ndef g(a=13, b=5):\n    i = 1\n    while True:\n        if i*i % a == 0 and i*i % b != 0:\n            return i*i\n        i += 1\n        \nassert f(g())\n",
        "idx_generation": 186,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\n\ndef f(arr: list, n=4) -> bool:\n    \"\"\"\n    Check if there exists a subset of the given list that sums up to n.\n    \"\"\"\n    return any(sum(comb) == n for r in range(len(arr)+1) for comb in itertools.combinations(arr, r))\n\ndef g(n=4):\n    return [1, 2, 3, 5]\n\nassert f(g())\n",
        "idx_generation": 45,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k=3, m=5) -> bool:\n    \"\"\"\n    Given a number n, determine if it can be expressed as a sum of k non-negative integers less than or equal to m.\n    \"\"\"\n    def helper(n, k, m):\n        if k == 1:\n            return n <= m\n        for i in range(min(n, m)+1):\n            if helper(n-i, k-1, m):\n                return True\n        return False\n    return helper(n, k, m)\ndef g(k = 3, m = 5):\n    n = 8\n    return n\nassert f(g())\n",
        "idx_generation": 389,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\ndef f(nums: List[int], target=100, n=5) -> bool:\n    \"\"\"Find n distinct positive integers that are all divisible by a given number\"\"\"\n    return len(nums) == len(set(nums)) == n and all((i % target == 0 for i in nums))\ndef g(target=100, n=5):\n    return list(range(target, target * n + 1, target))\nassert f(g())\n",
        "idx_generation": 362,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(x: list, y: int, z: int, target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target\"\"\"\n    for i in range(y):\n        for j in range(z):\n            if x[i] + x[j] == target:\n                return True\n    return False\n\ndef g(y: int, z: int, target: int):\n    random.seed(42)\n    x = [random.randint(1, 10) for _ in range(y+z)]\n    return x\n\nassert f(g(y=5, z=5, target=10), y=5, z=5, target=10)\n",
        "idx_generation": 313,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"\n    Given a list of integers, return True if there exists three numbers such that their sum is equal to the target.\n\n    Sample Input:\n    [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    nums.sort()\n    n = len(nums)\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = nums[i] + nums[left] + nums[right]\n            if current_sum == target:\n                return True\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False\n\ndef g(target=5):\n    return [1, 1, target - 2, 1, 1]\n\nassert f(g())\n",
        "idx_generation": 313,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, target_sum=1000) -> bool:\n    \"\"\"Find three integers a, b, c such that a^2 + b^2 = c^2 and a + b + c = target_sum.\"\"\"\n    for a in range(1, target_sum):\n        for b in range(a+1, target_sum):\n            c = math.sqrt(a**2 + b**2)\n            if a + b + c == target_sum:\n                return True\n    return False\ndef g(target_sum=1000):\n    for a in range(1, target_sum):\n        for b in range(a+1, target_sum):\n            c = math.sqrt(a**2 + b**2)\n            if a + b + c == target_sum:\n                return (a, b, int(c))\nassert f(g())\n",
        "idx_generation": 197,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Check if there are three distinct numbers in a list that add up to a target number.\n    \"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 334,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=8, s=28) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n=8, s=28):\n    x = [s//n] * n\n    x[-1] = s - (s//n)*(n-1)\n    return x\nassert f(g())\n",
        "idx_generation": 288,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, t='abc') -> bool:\n    \"\"\"\n    Given a string s and a target string t, find if it is possible to delete some characters from s such that it becomes t.\n\n    Sample Input:\n    s = \"abcde\"\n    t = \"ace\"\n\n    Sample Output:\n    True\n    \"\"\"\n    i = 0\n    j = 0\n    while i < len(s) and j < len(t):\n        if s[i] == t[j]:\n            j += 1\n        i += 1\n    return j == len(t)\n    \ndef g(s = \"abcde\", t = \"ace\"):\n    return s\n\nassert f(g())\n",
        "idx_generation": 25,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3, target=5) -> bool:\n    \"\"\"Find if the string contains a substring with length greater than or equal to target and containing n unique characters\"\"\"\n    for i in range(len(s) - target + 1):\n        substring = s[i:i+target]\n        if len(set(substring)) >= n:\n            return True\n    return False\ndef g(n = 3, target = 5):\n    return \"abc\" + \"d\" * (target-3)\nassert f(g())\n",
        "idx_generation": 225,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k: int = 0) -> bool:\n    \"\"\"Find two numbers in the list whose difference is exactly k.\"\"\"\n    nums_set = set(nums)\n    for num in nums:\n        if num - k in nums_set:\n            return True\n    return False\ndef g(k: int = 0):\n    return [k, 0]\nassert f(g())\n",
        "idx_generation": 158,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6]) -> bool:\n    \"\"\"Check if the product of the first n elements in the list nums is greater than 100.\"\"\"\n    product = 1\n    for i in range(n):\n        product *= nums[i]\n    return product > 100\ndef g(nums=[1, 2, 3, 4, 5, 6]):\n    return len(nums)\nassert f(g())\n",
        "idx_generation": 195,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is a palindrome.\"\"\"\n    return nums == nums[::-1]\ndef g():\n    nums = [1, 2, 3, 2, 1]\n    return nums\nassert f(g())\n",
        "idx_generation": 275,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target=10) -> bool:\n    \"\"\"Check if the sum of the elements in the array is equal to the target\"\"\"\n    return np.sum(arr) == target\n\ndef g(target=10):\n    return np.array([2, 3, 5])\n\nassert f(g())\n",
        "idx_generation": 215,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int, g1=1, g2=2) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums = [1, 2, 3, 4, 5], target = 7):\n    return (nums, target)\nassert f(*g())\n",
        "idx_generation": 299,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int, start=0, end=-1) -> bool:\n    \"\"\"Check if the target sum can be achieved by a subset of the array\"\"\"\n    if end == -1:\n        end = len(arr)\n    if start == end:\n        return target == 0\n    return f(arr, target - arr[start], start + 1, end) or f(arr, target, start + 1, end)\ndef g(arr=[1, 2, 3, 4, 5], target=10):\n    return arr, target\nassert f(*g())\n",
        "idx_generation": 237,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string contains only unique characters\"\"\"\n    return len(set(s)) == len(s)\n\ndef g():\n    return \"abcdefgh\"\n\nassert f(g())\n",
        "idx_generation": 245,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport re\n\ndef f(string: str, pattern: str) -> bool:\n    \"\"\"\n    Check if the string matches the given regex pattern.\n    \"\"\"\n    return bool(re.match(pattern, string))\ndef g(string: str, pattern: str):\n    return re.findall(pattern, string)[0]\nstring = \"abc123\"\npattern = r\"\\d+\"\nassert f(g(string, pattern), pattern)\n",
        "idx_generation": 245,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, k=0) -> bool:\n    \"\"\"Check if n is a prime number and its square root is greater than or equal to k\"\"\"\n    return all(n % i != 0 for i in range(2, int(math.sqrt(n)) + 1)) and math.sqrt(n) >= k\ndef g(k = 0):\n    return 2 if k == 0 else 3 if k == 1 else 5 if k == 2 else 7 if k == 3 else 11 if k == 4 else 13\nassert f(g())\n",
        "idx_generation": 196,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, n=3) -> bool:\n    \"\"\"Check if x is a power of n\"\"\"\n    while x > 1:\n        if x % n != 0:\n            return False\n        x = x // n\n    return True\ndef g(n=3):\n    return n ** 6\nassert f(g())\n",
        "idx_generation": 201,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10, k=3) -> bool:\n    \"\"\"Find k numbers in the list that add up to the target value.\"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, k):\n        if sum(combo) == target:\n            return True\n    return False\ndef g(target = 10, k = 3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 49,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(num_list: List[int], target: int) -> bool:\n    \"\"\"Check if the target number is in the list.\"\"\"\n    return target in num_list\n\ndef g(size: int = 10, target: int = 5):\n    \"\"\"Generate a list of random numbers.\"\"\"\n    num_list = []\n    for _ in range(size):\n        num_list.append(random.randint(1, 10))\n    return num_list, target\n\nassert f(*g())\n",
        "idx_generation": 314,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_row_sum=15) -> bool:\n    \"\"\"Find a row in the matrix that has a sum equal to the target_row_sum.\"\"\"\n    return any((sum(row) == target_row_sum for row in matrix))\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\nassert f(g())\n",
        "idx_generation": 315,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, lst: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a number in the list whose square root is equal to the target.\"\"\"\n    for i in range(n):\n        if math.sqrt(lst[i]) == target:\n            return True\n    return False\ndef g(n: int = 5, lst: List[int] = [1, 4, 9, 16, 25], target: int = 5):\n    return n, lst, target\nassert f(*g())\n",
        "idx_generation": 200,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int, k: int = 3) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find if there exists a combination of k numbers in the list\n    that sum up to the target number.\n    \"\"\"\n    from itertools import combinations\n    return any(sum(c) == target for c in combinations(nums, k))\ndef g(nums=[1, 2, 3, 4, 5], target=9, k=3):\n    return nums, target, k\nassert f(*g())\n",
        "idx_generation": 357,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5], target=5) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, determine if there exists a subset of the list that sums up to the target value.\n\n    Sample Input:\n    `nums = [1, 2, 3, 4, 5]`\n    `target = 5`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if len(nums) == 0:\n            return False\n        if nums[0] > target:\n            return subset_sum(nums[1:], target)\n        return subset_sum(nums[1:], target) or subset_sum(nums[1:], target - nums[0])\n    \n    return subset_sum(nums, target)\n\ndef g(nums=[1, 2, 3, 4, 5], target=5):\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if len(nums) == 0:\n            return False\n        if nums[0] > target:\n            return subset_sum(nums[1:], target)\n        return subset_sum(nums[1:], target) or subset_sum(nums[1:], target - nums[0])\n    \n    return subset_sum(nums, target)\n\nassert f(g())\n",
        "idx_generation": 304,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, t='abcde') -> bool:\n    \"\"\"Check if all characters in s are present in t.\"\"\"\n    for c in s:\n        assert c in t\n    return True\ndef g(t='abcde'):\n    return t[::-1]\nassert f(g())\n",
        "idx_generation": 26,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of integers in the array whose sum is equal to the target_sum\"\"\"\n    return any(target_sum - x in arr for x in arr)\ndef g(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target_sum = 10):\n    return arr\nassert f(g())\n",
        "idx_generation": 249,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list whose product is equal to the target\"\"\"\n    return any(nums[i] * nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 169,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list whose product is equal to the target value.\n    \"\"\"\n    return any((lst[i] * lst[j] == target for i in range(len(lst)) for j in range(i+1, len(lst))))\ndef g(lst = [5, 2, 3, 4]):\n    return lst\nassert f(g())\n",
        "idx_generation": 223,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, x=3, y=5) -> bool:\n    \"\"\"Check if n is divisible by both x and y\"\"\"\n    return n % x == 0 and n % y == 0\ndef g(x=3, y=5):\n    return x * y\nassert f(g())\n",
        "idx_generation": 280,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], n: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there is a pair of numbers that add up to n.\n    \"\"\"\n    num_set = set()\n\n    for num in arr:\n        if n - num in num_set:\n            return True\n        num_set.add(num)\n\n    return False\n\ndef g(n=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), n=10)\n",
        "idx_generation": 218,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], n=3) -> bool:\n    \"\"\"Check if the sum of any n consecutive integers in a list is divisible by n.\"\"\"\n    return any(sum(arr[i:i+n]) % n == 0 for i in range(len(arr)-n+1))\ndef g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return arr\nassert f(g())\n",
        "idx_generation": 301,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int, start=0, end=-1) -> bool:\n    \"\"\"Check if the target sum can be achieved by a subset of the array\"\"\"\n    if end == -1:\n        end = len(arr)\n    if start == end:\n        return target == 0\n    return f(arr, target - arr[start], start + 1, end) or f(arr, target, start + 1, end)\ndef g(arr=[1, 2, 3, 4, 5], target=6):\n    return arr, target\nassert f(*g())\n",
        "idx_generation": 237,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, delimiter: str) -> bool:\n    \"\"\"\n    Check if all substrings obtained by splitting the given string at the delimiter are alphanumeric.\n    \"\"\"\n    substrings = string.split(delimiter)\n    return all(substring.isalnum() for substring in substrings)\ndef g(string: str, delimiter: str):\n    return string.split(delimiter)[0]\nstring = \"hello,world\"\ndelimiter = \",\"\nassert f(g(string, delimiter), delimiter)\n",
        "idx_generation": 245,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='python', count=2) -> bool:\n    \"\"\"Find a substring with a certain count in a given string\"\"\"\n    return string.count(substring) == count\ndef g(substring = 'python', count = 2):\n    return substring * count\nassert f(g())\n",
        "idx_generation": 259,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(x: int, a=100) -> bool:\n    \"\"\"Check if the square root of x is equal to a\"\"\"\n    return sqrt(x) == a\n\ndef g(a=100):\n    return a ** 2\n\nassert f(g())\n",
        "idx_generation": 199,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=7, b=11, upper_bound=1000) -> bool:\n    \"\"\"Find a small common multiple of two integers.\"\"\"\n    return n % a == 0 and n % b == 0 and (0 < n <= upper_bound)\ndef g(a = 7, b = 11, upper_bound = 1000):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return a * (b // n)\nassert f(g())\n",
        "idx_generation": 222,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10, k=3) -> bool:\n    \"\"\"Find if there exists k elements in the list nums that sum up to the target.\"\"\"\n    combinations = itertools.combinations(nums, k)\n    for combination in combinations:\n        if sum(combination) == target:\n            return True\n    return False\n\ndef g(nums = [1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 50,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Find a pair of numbers that add up to the target_sum.\"\"\"\n    return any((numbers[i] + numbers[j] == target_sum for i in range(len(numbers)) for j in range(i+1, len(numbers))))\ndef g(numbers=[10, 20, 30, 40, 50, 60, 70, 80, 90]):\n    return numbers\nassert f(g())\n",
        "idx_generation": 315,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if a number is prime.\"\"\"\n    if n < 2:\n        return False\n    for prime in primes:\n        if n % prime == 0:\n            return False\n    return True\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    n = max(primes) + 2\n    while not f(n, primes):\n        n += 1\n    return n\nassert f(g())\n",
        "idx_generation": 328,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport pandas as pd\n\ndef f(df: pd.DataFrame, col_name=\"age\", threshold=18) -> bool:\n    \"\"\"\n    Check if there are any values in a specific column of a pandas DataFrame that are below a given threshold\n    \"\"\"\n    return df[col_name].min() < threshold\n\ndef g(col_name=\"age\", threshold=18):\n    data = {\"name\": [\"Alice\", \"Bob\", \"Charlie\", \"Dave\"],\n            \"age\": [20, 25, 15, 30]}\n    return pd.DataFrame(data)\n\nassert f(g())\n",
        "idx_generation": 5,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"\n    Check if a number is a prime number.\n    \"\"\"\n    if n < 2:\n        return False\n    for prime in primes:\n        if prime > math.sqrt(n):\n            break\n        if n % prime == 0:\n            return False\n    return True\n\ndef g():\n    n = 31\n    return n\n\nassert f(g())\n",
        "idx_generation": 210,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=1000) -> bool:\n    \"\"\"Find two numbers in a list that add up to a target number.\"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\ndef g():\n    return [1000, 500, 200, 300, 700]\nassert f(g())\n",
        "idx_generation": 312,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(letters: List[str], target_length=5) -> bool:\n    \"\"\"Find a string in the list that has the target_length.\"\"\"\n    return any(len(s) == target_length for s in letters)\n\ndef g(letters=[\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]):\n    return letters\n\nassert f(g())\n",
        "idx_generation": 26,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=2) -> bool:\n    \"\"\"Check if the string can be split into n equal parts.\"\"\"\n    if len(s) % n != 0:\n        return False\n    part_len = len(s) // n\n    parts = [s[i:i+part_len] for i in range(0, len(s), part_len)]\n    return all(p == parts[0] for p in parts)\ndef g(n = 2):\n    s = \"abc\" * n\n    return s\nassert f(g())\n",
        "idx_generation": 289,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, ops=['x--', 'x++', '++x', '--x', 'x++', '--x', 'x--'], target=61813) -> bool:\n    \"\"\"\n    Given a sequence of operations \"++x\", \"x++\", \"--x\", \"x--\", and a target value, find initial value so that the\n    final value is the target value.\n\n    Sample Input:\n    ops = [\"x++\", \"--x\", \"--x\"]\n    target = 12\n\n    Sample Output:\n    13\n    \"\"\"\n    for op in ops:\n        if op in ['++x', 'x++']:\n            n += 1\n        else:\n            assert op in ['--x', 'x--']\n            n -= 1\n    return n == target\ndef g(ops = ['x--', 'x++', '++x', '--x', 'x++', '--x', 'x--'], target = 61813):\n    return target - ops.count(\"++x\") - ops.count(\"x++\") + ops.count(\"--x\") + ops.count(\"x--\")\nassert f(g())\n",
        "idx_generation": 179,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given an array of integers, find two numbers such that they add up to a specific target.\n    Return the indices of the two numbers.\n    \"\"\"\n    num_dict = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_dict:\n            return [num_dict[complement], i]\n        num_dict[num] = i\n    return []\n\ndef g(nums: List[int], target: int):\n    return nums, target\n\n# Example usage:\nnums = [2, 7, 11, 15]\ntarget = 9\nassert f(*g(nums, target)) == [0, 1]\n",
        "idx_generation": 226,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if a number is in a list\"\"\"\n    return n in lst\ndef g(lst=[1, 2, 3, 4, 5]):\n    return random.choice(lst)\nassert f(g())\n",
        "idx_generation": 291,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, num_list=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"\n    Given a list of numbers, check if a given number is greater than all the numbers in the list.\n\n    Sample Input:\n    num_list = [1, 2, 3, 4, 5]\n    x = 6\n\n    Sample Output:\n    True\n    \"\"\"\n    return all(x > num for num in num_list)\n\ndef g(num_list=[1, 2, 3, 4, 5]):\n    return max(num_list) + 1\n\nassert f(g())\n",
        "idx_generation": 237,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=50) -> bool:\n    \"\"\"Check if the target number is in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g():\n    return [[10, 20, 30], [40, 50, 60], [70, 80, 90]]\nassert f(g())\n",
        "idx_generation": 301,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int, start=0, end=-1) -> bool:\n    \"\"\"Check if the target sum can be achieved by a subset of the array\"\"\"\n    if end == -1:\n        end = len(arr)\n    if start == end:\n        return target == 0\n    return f(arr, target - arr[start], start + 1, end) or f(arr, target, start + 1, end)\ndef g(arr=[1, 2, 3, 4, 5], target=12):\n    return arr, target\nassert f(*g())\n",
        "idx_generation": 237,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc', count=2, length=10) -> bool:\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length\n\ndef g(substring='abc', count=2, length=10):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'\n\nassert f(g())\n",
        "idx_generation": 246,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(sentence: str, letter='e') -> bool:\n    \"\"\"Check if a given letter appears in a sentence.\"\"\"\n    return letter in sentence\ndef g(letter='e', sentence: str = \"This is a sentence.\"):\n    return sentence\nassert f(g())\n",
        "idx_generation": 279,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\ndef f(n: int, nums=[77410, 23223, 54187], lower_bound=2) -> bool:\n    \"\"\"Find the smallest common multiple of the list of integers.\"\"\"\n    return all((n % i == 0 for i in nums)) and n >= lower_bound\ndef g(nums=[77410, 23223, 54187], lower_bound=2):\n    from math import gcd\n    lcm = 1\n    for i in nums:\n        lcm = lcm * i // gcd(lcm, i)\n    return lcm\nassert f(g())\n",
        "idx_generation": 204,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[3, 5, 7, 11, 13], upper_bound=1000000) -> bool:\n    \"\"\"Find a small common multiple of a list of integers.\"\"\"\n    return all((n % i == 0 for i in nums)) and 0 < n <= upper_bound\ndef g(nums = [3, 5, 7, 11, 13], upper_bound = 1000000):\n    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans\nassert f(g())\n",
        "idx_generation": 222,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\n\ndef f(lst: List[int], target=5) -> bool:\n    \"\"\"Check if there exists a combination of elements in a list that sums up to a given target\"\"\"\n    for r in range(1, len(lst) + 1):\n        for c in itertools.combinations(lst, r):\n            if sum(c) == target:\n                return True\n    return False\n\ndef g(target=5):\n    return [1, 2, 3, 4]\n\nassert f(g())\n",
        "idx_generation": 51,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\ndef f(n: int, a=5, b=10) -> bool:\n    \"\"\"Check if n is prime and within the range of a and b (inclusive)\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return a <= n <= b\ndef g(a=5, b=10):\n    primes = [i for i in range(a, b+1) if all(i % j != 0 for j in range(2, int(i ** 0.5) + 1))]\n    return random.choice(primes)\nassert f(g())\n",
        "idx_generation": 316,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(nums = []):\n    from random import randint\n    target = randint(1, 10)\n    nums = [randint(1, 10) for _ in range(10)]\n    return nums, target\nassert f(*g())\n",
        "idx_generation": 334,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='python') -> bool:\n    \"\"\"Check if s is a palindrome\"\"\"\n    return s == s[::-1]\ndef g(word='python'):\n    return word + word[::-1]\nassert f(g())\n",
        "idx_generation": 6,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the sum of the first n numbers is divisible by n\"\"\"\n    return sum(numbers[:n]) % n == 0\ndef g(numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return next((n for n in range(1, len(numbers)+1) if sum(numbers[:n]) % n == 0), None)\nassert f(g())\n",
        "idx_generation": 221,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if the sum of all numbers in the list is equal to the target\"\"\"\n    return sum(arr) == target\ndef g(target = 10):\n    return [target]\nassert f(g())\n",
        "idx_generation": 318,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(nums: List[int], x=5, y=10) -> bool:\n    \"\"\"Find if there exists a number in the list that is between x and y (exclusive)\"\"\"\n    return any(x < num < y for num in nums)\n\ndef g(x=5, y=10):\n    nums = [math.floor(x), math.ceil(y), math.floor((x + y) / 2)]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 35,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"Check if there are k consecutive digits in s that form an arithmetic sequence.\"\"\"\n    if len(s) < k:\n        return False\n\n    for i in range(len(s) - k + 1):\n        diff = int(s[i + 1]) - int(s[i])\n        for j in range(i + 2, i + k):\n            if int(s[j]) - int(s[j - 1]) != diff:\n                break\n        else:\n            return True\n\n    return False\n\ndef g(s = \"123456789\"):\n    return s\n\nassert f(g()) == True\n",
        "idx_generation": 314,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target: int) -> bool:\n    \"\"\"\n    Check if there is a pair of numbers in the array that sums up to the target value.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(arr: np.ndarray, target: int):\n    \"\"\"\n    Generate a new array by multiplying each element in the original array by 2.\n    \"\"\"\n    return arr * 2\n\n# Test case\narr = np.array([1, 2, 3, 4, 5])\ntarget = 10\nassert f(g(arr, target), target)\n",
        "idx_generation": 181,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(seq: List[int], target=100, length=10) -> bool:\n    \"\"\"Find a sequence of integers that adds up to a given target, with a given length\"\"\"\n    return sum(seq) == target and len(seq) == length\ndef g(target=100, length=10):\n    return [10] * length\nassert f(g())\n",
        "idx_generation": 233,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=10, m=100) -> bool:\n    \"\"\"Find a list of n integers that are all multiples of m\"\"\"\n    return len(x) == n and all([a % m == 0 for a in x])\ndef g(n = 10, m = 100):\n    return [m] * n\nassert f(g())\n",
        "idx_generation": 295,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='python', length=3) -> bool:\n    \"\"\"Check if the target string starts with the given substring.\"\"\"\n    return target.startswith(s)\ndef g(target = 'python', length = 3):\n    return target[:length]\nassert f(g())\n",
        "idx_generation": 239,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=8) -> bool:\n    \"\"\"\n    Given a list of integers, find two numbers such that they add up to a specific target number.\n    Return True if there are two numbers that sum to the target, False otherwise.\n    \"\"\"\n    num_set = set()\n\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 301,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"\n    Check if there exists a path in the matrix from the top left corner to the bottom right corner\n    such that the sum of all elements in the path is equal to the target number.\n    \"\"\"\n    def helper(matrix, target, curr_sum, row, col):\n        if row >= len(matrix) or col >= len(matrix[0]):\n            return False\n        curr_sum += matrix[row][col]\n        if curr_sum == target:\n            return True\n        if helper(matrix, target, curr_sum, row + 1, col) or helper(matrix, target, curr_sum, row, col + 1):\n            return True\n        return False\n    \n    return helper(matrix, target, 0, 0, 0)\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=10):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 265,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(phrase: str, keyword='python') -> bool:\n    \"\"\"Check if a keyword is present in the given phrase\"\"\"\n    return keyword in phrase.lower()\n\ndef g(phrase='I love Python programming'):\n    return phrase\n\nassert f(g())\n",
        "idx_generation": 249,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the string is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g(s: str = \"racecar\"):\n    \"\"\"Reverse the string.\"\"\"\n    return s[::-1]\n\nassert f(g())\n",
        "idx_generation": 314,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(x: float, y: float, z: float) -> bool:\n    \"\"\"Check if the sum of two numbers is equal to the third number\"\"\"\n    return x + y == z or y + z == x or z + x == y\n    \ndef g():\n    import random\n    x = random.uniform(1, 10)\n    y = random.uniform(1, 10)\n    z = x + y\n    return x, y, z\n\nassert f(*g())\n",
        "idx_generation": 208,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import gcd\ndef f(n: int, nums=[20, 30, 40, 50, 60]) -> bool:\n    \"\"\"Check if the greatest common divisor of all the numbers in nums is equal to n\"\"\"\n    return all(gcd(num, n) == n for num in nums)\ndef g(nums=[20, 30, 40, 50, 60]):\n    return gcd(gcd(gcd(nums[0], nums[1]), nums[2]), gcd(nums[3], nums[4]))\nassert f(g())\n",
        "idx_generation": 249,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers that adds up to the target.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for r in range(1, len(numbers) + 1) for comb in combinations(numbers, r))\ndef g(numbers=[10, 20, 30, 40, 50]):\n    return numbers\nassert f(g())\n",
        "idx_generation": 68,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers 'nums' and an integer 'target', find two numbers in 'nums' such that their sum equals 'target'.\"\"\"\n    num_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums=[2, 7, 11, 15], target=9):\n    num_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return [complement, num]\n        num_set.add(num)\n    return []\nassert f(g(), target=9)\n",
        "idx_generation": 319,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target value, determine if the target exists in the matrix.\n    The matrix is sorted in non-decreasing order from left to right and top to bottom.\n    \"\"\"\n    if not matrix:\n        return False\n    rows, cols = len(matrix), len(matrix[0])\n    row, col = 0, cols - 1\n    while row < rows and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            row += 1\n        else:\n            col -= 1\n    return False\ndef g(matrix=[[1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30]], target=9):\n    return matrix, target\nassert f(*g())\n",
        "idx_generation": 348,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\n\ndef f(s: str, n=4, target='code') -> bool:\n    \"\"\"Check if the target string can be formed by rearranging the characters in the given string.\"\"\"\n    perms = itertools.permutations(s, n)\n    for perm in perms:\n        if ''.join(perm) == target:\n            return True\n    return False\n\ndef g(n=4, target='code'):\n    return ''.join(sorted(target))\n\nassert f(g())\n",
        "idx_generation": 6,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, y: int, z: int) -> bool:\n    \"\"\"Check if x, y, and z form a Pythagorean triple.\"\"\"\n    return x**2 + y**2 == z**2\ndef g():\n    \"\"\"Generate a Pythagorean triple.\"\"\"\n    for z in range(1, 100):\n        for y in range(1, z):\n            for x in range(1, y):\n                if x**2 + y**2 == z**2:\n                    return x, y, z\nassert f(*g())\n",
        "idx_generation": 230,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a subset of the numbers that sum up to the target.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n    for i in range(1, n + 1):\n        for j in range(target + 1):\n            if j >= nums[i-1]:\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-nums[i-1]]\n            else:\n                dp[i][j] = dp[i-1][j]\n    return dp[n][target]\ndef g(nums = []):\n    from random import randint\n    nums = [randint(1, 10) for _ in range(5)]\n    target = randint(1, 20)\n    return nums, target\nassert f(*g())\n",
        "idx_generation": 334,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target.\"\"\"\n    return any(target - x in lst for x in lst)\n\ndef g(n=10, target=15):\n    random.seed(0)\n    return random.choices(range(n), k=n)\nassert f(g(), target=15)\n",
        "idx_generation": 51,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: list, target=[1, 2, 3]) -> bool:\n    \"\"\"Check if a target list is a sublist of a given list.\"\"\"\n    return any(target == lst[i:i+len(target)] for i in range(len(lst)-len(target)+1))\ndef g(target=[1, 2, 3]):\n    return [1, 2, 3, 4, 5, 6, 7]\nassert f(g())\n",
        "idx_generation": 319,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"\n    Find two numbers in the list nums that add up to the target.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums = [10, 5, 15, 7]):\n    return nums\nassert f(g())\n",
        "idx_generation": 181,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target=0) -> bool:\n    \"\"\"\n    Find the number of prime numbers less than or equal to a given number.\n    \"\"\"\n    primes = []\n    for i in range(2, n+1):\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                break\n        else:\n            primes.append(i)\n    return len(primes) == target\ndef g(target = 0):\n    return target\nassert f(g())\n",
        "idx_generation": 242,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=987654321, b=123456789) -> bool:\n    \"\"\"Check if the sum of x and a is divisible by b.\"\"\"\n    return (x + a) % b == 0\ndef g(a=987654321, b=123456789):\n    return b - a\nassert f(g())\n",
        "idx_generation": 311,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(seq: List[int], n=0, length=0) -> bool:\n    \"\"\"Check if seq is a palindrome\"\"\"\n    return seq == seq[::-1]\ndef g(n = 0, length = 0):\n    return [1, 2, 3, 4, 5, 4, 3, 2, 1]\nassert f(g())\n",
        "idx_generation": 254,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, x=3, y=5) -> bool:\n    \"\"\"Check if n is divisible by both x and y\"\"\"\n    return n % x == 0 and n % y == 0\ndef g(x=3, y=5):\n    return x * y\nassert f(g())\n",
        "idx_generation": 302,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"\n    Given a list of integers, find a subset of the list that sums up to the target value\n    \"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    \n    return subset_sum(lst, target)\n\ndef g(target=100):\n    return [15, 22, 10, 5, 17, 8, 12, 25, 19]\n\nassert f(g())\n",
        "idx_generation": 286,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(x: str, a=datetime(2022, 1, 1), b=datetime(2022, 12, 31)) -> bool:\n    \"\"\"Check if the given date, when converted to a datetime object, is between the provided start and end dates.\"\"\"\n    date = datetime.strptime(x, '%Y-%m-%d')\n    return a <= date <= b\ndef g(a=datetime(2022, 1, 1), b=datetime(2022, 12, 31)):\n    return datetime.strftime(a + (b - a) // 2, '%Y-%m-%d')\nassert f(g())\n",
        "idx_generation": 251,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], letter='a') -> bool:\n    \"\"\"\n    Check if any word in the list words starts with the letter.\n    \"\"\"\n    return any(word.startswith(letter) for word in words)\ndef g(letter='a'):\n    words = ['apple', 'banana', 'cherry', 'kiwi']\n    return words\nassert f(g())\n",
        "idx_generation": 322,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=10, y=10) -> bool:\n    \"\"\"\n    Determine if a given point (n, n) is inside a circle with center (x, y) and radius 10.\n    \"\"\"\n    distance = math.sqrt((n - x) ** 2 + (n - y) ** 2)\n    return distance <= 10\ndef g(x=10, y=10):\n    return x\nassert f(g())\n",
        "idx_generation": 209,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(a: float, b: float, c: float, x: float) -> bool:\n    \"\"\"\n    Check if the quadratic equation ax^2 + bx + c = 0 has a real root for a given values of a, b, c, and x.\n    \"\"\"\n    return (b**2 - 4*a*c) >= 0 and math.sqrt(b**2 - 4*a*c) >= x\n\ndef g(a=1, b=2, c=1, x=0):\n    return a, b, c, x\n\nassert f(*g())\n",
        "idx_generation": 251,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers from the list that adds up to the target number\"\"\"\n    from itertools import combinations\n    for i in range(len(nums)):\n        for comb in combinations(nums, i+1):\n            if sum(comb) == target:\n                return True\n    return False\ndef g(nums=[10, 20, 30, 40, 50]):\n    return nums\nassert f(g())\n",
        "idx_generation": 81,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], n=4) -> bool:\n    \"\"\"Check if the given list of numbers contains a sequence of length n that is increasing\"\"\"\n    for i in range(len(nums)-n+1):\n        if nums[i:i+n] == sorted(nums[i:i+n]):\n            return True\n    return False\ndef g(n=4):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 319,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a subsequence where the sum of the elements is equal to the target value.\"\"\"\n    \n    def subsequence_sum(nums, target):\n        n = len(nums)\n        dp = [[False for _ in range(target+1)] for _ in range(n+1)]\n        \n        for i in range(n+1):\n            dp[i][0] = True\n        \n        for i in range(1, n+1):\n            for j in range(1, target+1):\n                if j >= nums[i-1]:\n                    dp[i][j] = dp[i-1][j] or dp[i-1][j-nums[i-1]]\n                else:\n                    dp[i][j] = dp[i-1][j]\n        \n        return dp[n][target]\n\n    return subsequence_sum(nums, target)\n\ndef g(target=0):\n    nums = [1, 2, 3, 4, 5]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 381,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='pre') -> bool:\n    \"\"\"\n    Given a list of words, check if all words in the list start with a given prefix.\n    \"\"\"\n    for word in words:\n        if not word.startswith(prefix):\n            return False\n    return True\ndef g():\n    return ['prefix', 'preference', 'preposition']\nassert f(g())\n",
        "idx_generation": 7,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, numbers=[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59], k=0) -> bool:\n    \"\"\"\n    Given a list of odd integers and an index k, determine if the kth number is a perfect square.\n    \"\"\"\n    assert all((n % 2 != 0 for n in numbers)), 'Hint: numbers are odd integers'\n    return numbers[k] ** 0.5 == int(numbers[k] ** 0.5)\ndef g(numbers = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59], k = 0):\n    return numbers[k]\nassert f(g())\n",
        "idx_generation": 262,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, parts=['numegixuly', 'koxyfihimurukothasyl'], string='numegixulypyjetkoxyfihimurukothasyl') -> bool:\n    \"\"\"\n    Find a separator that when used to join a given string gives a certain result.\n    This is related to the previous problem but there are some edge cases that differ.\n    \"\"\"\n    return x.join(parts) == string\ndef g(parts=['numegixuly', 'koxyfihimurukothasyl'], string='numegixulypyjetkoxyfihimurukothasyl'):\n    if len(parts) <= 1:\n        return \"\"\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]\nassert f(g())\n",
        "idx_generation": 63,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3, target='abcabcabc') -> bool:\n    \"\"\"Determine if a string is a repetition of a smaller string n times\"\"\"\n    return s * n == target\ndef g(n=3, target='abcabcabc'):\n    return target[:len(target)//n]\nassert f(g())\n",
        "idx_generation": 342,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums = [1, 5, 6, 9, 10]):\n    return nums\nassert f(g())\n",
        "idx_generation": 188,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], n: int) -> bool:\n    \"\"\"Given a list of integers and an integer n, determine if it is possible to find three distinct indices i, j, k\n    such that arr[i] + arr[j] + arr[k] = n.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n    n = 12\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            for k in range(j + 1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == n:\n                    return True\n    return False\ndef g(arr = [1, 2, 3, 4, 5], n = 12):\n    return arr, n\nassert f(*g())\n",
        "idx_generation": 257,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, num_list=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if a number is divisible by all the numbers in a list.\"\"\"\n    return all(n % num == 0 for num in num_list)\ndef g(num_list=[1, 2, 3, 4, 5]):\n    return num_list[0] * num_list[1] * num_list[2] * num_list[3] * num_list[4]\nassert f(g())\n",
        "idx_generation": 324,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: int, num=10) -> bool:\n    \"\"\"Check if the number is divisible by the given value.\"\"\"\n    return num % s == 0\n\ndef g(num=10):\n    return num\n\nassert f(g())\n",
        "idx_generation": 259,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], a = 5, b = 10) -> bool:\n    \"\"\"Check if the given list contains both numbers a and b.\"\"\"\n    return a in nums and b in nums\n\ndef g(a = 5, b = 10):\n    return [a, b]\nassert f(g())\n",
        "idx_generation": 303,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6], target=10) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, determine if there exists a subset of the list that sums up to the target value.\n\n    Sample Input:\n    `nums = [1, 2, 3, 4, 5, 6]`\n    `target = 10`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if len(nums) == 0:\n            return False\n        if nums[0] > target:\n            return subset_sum(nums[1:], target)\n        return subset_sum(nums[1:], target) or subset_sum(nums[1:], target - nums[0])\n    \n    return subset_sum(nums, target)\n    \ndef g(nums=[1, 2, 3, 4, 5, 6], target=10):\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if len(nums) == 0:\n            return False\n        if nums[0] > target:\n            return subset_sum(nums[1:], target)\n        return subset_sum(nums[1:], target) or subset_sum(nums[1:], target - nums[0])\n    \n    return subset_sum(nums, target)\n    \nassert f(g())\n",
        "idx_generation": 304,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(d: datetime.date) -> bool:\n    \"\"\"Check if the given date is a palindrome date in the format \"MMDDYYYY\".\"\"\"\n    date_str = d.strftime(\"%m%d%Y\")\n    return date_str == date_str[::-1] and d.day <= 12 and d.month <= 12\n\ndef g():\n    \"\"\"Find the next palindrome date in the format \"MMDDYYYY\".\"\"\"\n    current_date = datetime.date.today()\n    while True:\n        current_date += datetime.timedelta(days=1)\n        if f(current_date):\n            return current_date\n\nassert f(g())\n",
        "idx_generation": 251,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, word='python', sentence='I love coding in python') -> bool:\n    \"\"\"Check if a given word is present in a sentence.\"\"\"\n    return word in sentence\ndef g(word='python', sentence='I love coding in python'):\n    return word\nassert f(g())\n",
        "idx_generation": 351,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=2, b=3, c=5) -> bool:\n    \"\"\"\n    Check if the given number n is divisible by either a, b, or c.\n\n    Sample input:\n    15\n\n    Sample output:\n    True\n\n    Explanation: 15 is divisible by 3.\n    \"\"\"\n    return n % a == 0 or n % b == 0 or n % c == 0\n\ndef g(a=2, b=3, c=5):\n    return math.lcm(a, b, c)\n\nassert f(g())\n",
        "idx_generation": 209,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=-5, b=2) -> bool:\n    \"\"\"Check if n is divisible by b and a is the result of dividing n by b minus 1\"\"\"\n    return n % b == 0 and n // b - 1 == a\ndef g(a = -5, b = 2):\n    return (a + 1) * b\nassert f(g())\n",
        "idx_generation": 264,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int = 10, k: int = 3) -> bool:\n    \"\"\"Find k numbers from the list that sum up to the target\"\"\"\n    from itertools import combinations\n\n    for comb in combinations(nums, k):\n        if sum(comb) == target:\n            return True\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 10, k: int = 3):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 87,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that sums up to the target.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\nassert f(g())\n",
        "idx_generation": 320,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find three distinct numbers in the list that sum up to the target number.\n    \"\"\"\n    nums.sort()\n    for i in range(len(nums)-2):\n        left = i + 1\n        right = len(nums) - 1\n        while left < right:\n            current_sum = nums[i] + nums[left] + nums[right]\n            if current_sum == target:\n                return True\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False\n\ndef g(nums=[1, 4, 2, 6, 9, 15], target=21):\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 385,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, pattern='abcde') -> bool:\n    \"\"\"Check if a given string contains all letters from a given pattern.\"\"\"\n    return all(char in s for char in pattern)\ndef g(pattern = 'abcde'):\n    return ''.join(sorted(pattern))\nassert f(g())\n",
        "idx_generation": 17,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int, start=0, end=-1) -> bool:\n    \"\"\"\n    Given a sorted list of integers, find if there exists two numbers in the list whose sum is equal to the target\n    within the specified range.\n    \"\"\"\n    if end == -1:\n        end = len(nums) - 1\n    while start < end:\n        curr_sum = nums[start] + nums[end]\n        if curr_sum == target:\n            return True\n        elif curr_sum < target:\n            start += 1\n        else:\n            end -= 1\n    return False\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=11):\n    return nums, target\nassert f(*g())\n",
        "idx_generation": 348,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(perm: Tuple[int]) -> bool:\n    \"\"\"Find a permutation of (1, 2, 3, 4, 5) where the product of the first three elements is equal to the sum of the last two elements.\"\"\"\n    return perm[0] * perm[1] * perm[2] == sum(perm[3:])\ndef g():\n    return next(perm for perm in permutations(range(1, 6)) if perm[0] * perm[1] * perm[2] == sum(perm[3:]))\nassert f(g())\n",
        "idx_generation": 69,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(text: str, word_count=100) -> bool:\n    \"\"\"Check if the given text has exactly word_count number of words.\"\"\"\n    return len(text.split()) == word_count\ndef g(word_count=100):\n    return \" \".join([\"word\"] * word_count)\nassert f(g())\n",
        "idx_generation": 350,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=9) -> bool:\n    \"\"\"Find two numbers in nums that add up to target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=9):\n    return [2, 7, 11, 15]\nassert f(g())\n",
        "idx_generation": 189,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes: List[int]) -> bool:\n    \"\"\"Check if a given number is a product of two prime numbers\"\"\"\n    for i in range(len(primes)-1):\n        for j in range(i+1, len(primes)):\n            if primes[i] * primes[j] == n:\n                return True\n    return False\ndef g(primes = [2, 3, 5, 7, 11, 13, 17, 19]):\n    n = 221\n    return n, primes\nassert f(*g())\n",
        "idx_generation": 282,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=7, b=123456) -> bool:\n    \"\"\"Check if a number is a multiple of another number\"\"\"\n    return n % a == 0 and n % b == 0\ndef g(a = 7, b = 123456):\n    ans = a * b\n    return ans\nassert f(g())\n",
        "idx_generation": 358,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Check if a string contains a certain substring\"\"\"\n    return substring in s\ndef g(substring='abc'):\n    return substring + 'de' + substring\nassert f(g())\n",
        "idx_generation": 296,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=5, c=7) -> bool:\n    \"\"\"Check if a number is divisible by any of the given integers.\"\"\"\n    return n % a == 0 or n % b == 0 or n % c == 0\ndef g(a=3, b=5, c=7):\n    return a * b * c\nassert f(g())\n",
        "idx_generation": 303,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a subset of the list that sums up to n.\n    \"\"\"\n    dp = [False] * (n + 1)\n    dp[0] = True\n    for num in nums:\n        for i in range(n, num - 1, -1):\n            if dp[i - num]:\n                dp[i] = True\n    return dp[n]\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    n = sum(nums)\n    return n\n\nassert f(g())\n",
        "idx_generation": 309,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=3, substring='abc') -> bool:\n    \"\"\"Check if a given string contains a specific substring k times.\"\"\"\n    return s.count(substring) >= k\ndef g(k=3, substring='abc'):\n    return substring * k\nassert f(g())\n",
        "idx_generation": 253,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='puzzle', num=3) -> bool:\n    \"\"\"\n    Check if the given string contains the target string 'num' times.\n\n    Sample Input:\n    `\"puzzlepuzzlepuzzle\"`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    return s.count(target) == num\ndef g(target = 'puzzle', num = 3):\n    return target * num\nassert f(g())\n",
        "idx_generation": 378,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=10, b=5) -> bool:\n    \"\"\"Check if the logarithm of x to the base a is equal to b.\"\"\"\n    return math.log(x, a) == b\n\ndef g(a=10, b=5):\n    return a ** b\n\nassert f(g())\n",
        "idx_generation": 212,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, target=100) -> bool:\n    \"\"\"\n    Check if a given number is a perfect square and if it is less than the target value\n    \"\"\"\n    return sqrt(n) == int(sqrt(n)) and n < target\n\ndef g(target=100):\n    return 64\n\nassert f(g())\n",
        "idx_generation": 286,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import combinations\n\ndef f(numbers: list, target=10) -> bool:\n    \"\"\"Check if any combination of numbers in a given list adds up to the target\"\"\"\n    for r in range(1, len(numbers) + 1):\n        for comb in combinations(numbers, r):\n            if sum(comb) == target:\n                return True\n    return False\n\ndef g(target=10):\n    numbers = [1, 2, 3, 4, 5]\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 87,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if the list is sorted in ascending order.\"\"\"\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))\n\ndef g(length: int):\n    lst = random.sample(range(100), length)\n    lst.sort()\n    return lst\n\nassert f(g(10))\n",
        "idx_generation": 322,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"\n    Given a list of words, find if there is a word in the list that contains all the letters of the target word.\n    Return True if such a word exists, otherwise return False.\n    \"\"\"\n    for word in words:\n        if all(letter in word for letter in target):\n            return True\n    return False\n\ndef g(target='python'):\n    return ['pythonista', 'program', 'language', 'coding']\n\nassert f(g())\n",
        "idx_generation": 21,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: bool, a=True, b=False, c=True) -> bool:\n    \"\"\"Perform logical operations on given boolean values.\"\"\"\n    return a and b or c\ndef g(a=True, b=False, c=True):\n    return a\nassert f(g())\n",
        "idx_generation": 351,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['abc', 'def', 'ghi']) -> bool:\n    \"\"\"Check if the string s contains each substring in substrings in any order\"\"\"\n    return all((sub in s for sub in substrings))\ndef g(substrings = ['abc', 'def', 'ghi']):\n    return \"\".join(substrings)\nassert f(g())\n",
        "idx_generation": 89,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(mat: List[List[int]], target=16) -> bool:\n    \"\"\"Check if there is a pair of numbers in mat that sum up to target\"\"\"\n    for i in range(len(mat)):\n        for j in range(len(mat[i])):\n            for k in range(i, len(mat)):\n                for l in range(len(mat[k])):\n                    if mat[i][j] + mat[k][l] == target:\n                        return True\n    return False\ndef g(target = 16):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "idx_generation": 355,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Find if target exists in the matrix\"\"\"\n    for row in matrix:\n        for num in row:\n            if num == target:\n                return True\n    return False\ndef g(target=5):\n    return [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\nassert f(g())\n",
        "idx_generation": 189,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, x: List[int], y: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of indices (i, j) such that x[i] + y[j] = n\"\"\"\n    return any([x[i] + y[j] == n for i in range(len(x)) for j in range(len(y))])\ndef g(n=10, x=[1, 2, 3, 4], y=[5, 6, 7, 8]):\n    return n, x, y\nassert f(*g())\n",
        "idx_generation": 287,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=7, b=8, c=9) -> bool:\n    \"\"\"Check if x is a multiple of a, b, and c\"\"\"\n    return x % a == 0 and x % b == 0 and x % c == 0\ndef g(a=7, b=8, c=9):\n    x = a * b * c\n    return x\nassert f(g())\n",
        "idx_generation": 360,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[2, 3, 5, 7]) -> bool:\n    \"\"\"Check if n is a prime number\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef g(lst=[2, 3, 5, 7]):\n    return lst[0]\nassert f(g())\n",
        "idx_generation": 308,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if n can be expressed as the sum of two prime numbers.\"\"\"\n    for prime in primes:\n        if n - prime in primes:\n            return True\n    return False\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return primes[-1] + primes[-2]\nassert f(g())\n",
        "idx_generation": 304,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target = 0) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target value, determine if the target value can be obtained by summing any\n    combination of numbers in the matrix. Each number can only be used once.\n\n    Sample Input:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    target = 15\n\n    Sample Output:\n    True\n    \"\"\"\n    def backtrack(row, col, curr_sum, visited):\n        if curr_sum == target:\n            return True\n        if curr_sum > target or row >= len(matrix) or col >= len(matrix[0]) or visited[row][col]:\n            return False\n        visited[row][col] = True\n        if backtrack(row+1, col, curr_sum+matrix[row][col], visited) or backtrack(row, col+1, curr_sum+matrix[row][col], visited):\n            return True\n        visited[row][col] = False\n        return False\n        \n    visited = [[False]*len(matrix[0]) for _ in range(len(matrix))]\n    return backtrack(0, 0, 0, visited)\ndef g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target = 15):\n    return matrix, target\nassert f(g())\n",
        "idx_generation": 311,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc', index=0) -> bool:\n    \"\"\"Check if substring is at the specified index in the string\"\"\"\n    return string[index:index+len(substring)] == substring\ndef g(substring = 'abc', index = 0):\n    return 'x' * index + substring + 'x' * (len(substring) - index)\nassert f(g())\n",
        "idx_generation": 254,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(sentence: str, word='puzzle', case_sensitive=False) -> bool:\n    \"\"\"Check if the given word is present in the sentence.\"\"\"\n    if not case_sensitive:\n        sentence = sentence.lower()\n        word = word.lower()\n    return word in sentence\ndef g(word='puzzle', case_sensitive=False):\n    sentence = \"This is a puzzle to solve\"\n    return sentence\nassert f(g())\n",
        "idx_generation": 387,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=5, b=20) -> bool:\n    \"\"\"Check if x is a multiple of a and b\"\"\"\n    return x % a == 0 and x % b == 0\ndef g(a=5, b=20):\n    return a * b\nassert f(g())\n",
        "idx_generation": 215,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, seq=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]) -> bool:\n    \"\"\"Check if the nth number in the sequence is a Fibonacci number\"\"\"\n    return seq[n] in seq\ndef g(seq=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]):\n    return len(seq) - 1\nassert f(g())\n",
        "idx_generation": 289,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['abracadabra', 'hocuspocus', 'simonsays']) -> bool:\n    \"\"\"\n    Find a string that contains each string in substrings alternating, e.g., 'cdaotg' for 'cat' and 'dog'\n    \"\"\"\n    return all((sub in s[i::len(substrings)] for (i, sub) in enumerate(substrings)))\ndef g(substrings = ['abracadabra', 'hocuspocus', 'simonsays']):\n    m = max(len(s) for s in substrings)\n    return \"\".join([(s[i] if i < len(s) else \" \") for i in range(m) for s in substrings])\nassert f(g())\n",
        "idx_generation": 111,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(lst: list, n=3) -> bool:\n    \"\"\"Check if a list contains n consecutive numbers\"\"\"\n    lst.sort()\n    count = 1\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1] + 1:\n            count += 1\n            if count == n:\n                return True\n        else:\n            count = 1\n    return False\n\ndef g(n = 3):\n    lst = random.sample(range(10), 10)\n    return lst\n\nassert f(g())\n",
        "idx_generation": 324,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"\n    Given a string and a substring, determine if the substring is present in the string.\n\n    Sample Input:\n    s = 'abcdefg'\n    substring = 'abc'\n\n    Sample Output:\n    True\n    \"\"\"\n    return substring in s\ndef g(s='abcdefg', substring='abc'):\n    return s\nassert f(g())\n",
        "idx_generation": 24,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=100) -> bool:\n    \"\"\"Check if the given number is a power of another number within a certain range\"\"\"\n    return any(n == i ** j for i in range(2, m) for j in range(2, m))\ndef g(m = 100):\n    return m ** 2\nassert f(g())\n",
        "idx_generation": 373,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(substrings: List[str], s='helloworldhowareyou', count=5) -> bool:\n    \"\"\"Find a list of >= count distinct strings that are all contained in s\"\"\"\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings))\ndef g(s = 'helloworldhowareyou', count = 5):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})\nassert f(g())\n",
        "idx_generation": 97,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, digits=3) -> bool:\n    \"\"\"Check if the given number is a palindrome with a certain number of digits\"\"\"\n    return str(num) == str(num)[::-1] and len(str(num)) == digits\ndef g(digits=3):\n    start = 10 ** (digits - 1)\n    end = 10 ** digits - 1\n    for num in range(end, start - 1, -1):\n        if str(num) == str(num)[::-1]:\n            return num\nassert f(g())\n",
        "idx_generation": 397,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if there are two numbers in the list nums that add up to the target\"\"\"\n    return any(target - n in nums for n in nums)\ndef g(target=15):\n    return [1, target - 1]\nassert f(g())\n",
        "idx_generation": 190,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\ndef f(n: int, a=5, b=10) -> bool:\n    \"\"\"Check if n is a perfect square within the range of a and b (inclusive)\"\"\"\n    return math.isqrt(n) ** 2 == n and a <= n <= b\ndef g(a=5, b=10):\n    for n in range(a, b+1):\n        if math.isqrt(n) ** 2 == n:\n            return n\nassert f(g())\n",
        "idx_generation": 316,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a='racecar', b='madam', c='level') -> bool:\n    \"\"\"Check if s is a palindrome and is present in any of the strings a, b, or c\"\"\"\n    return s == s[::-1] and (s in a or s in b or s in c)\ndef g(a='racecar', b='madam', c='level'):\n    if a == a[::-1]:\n        return a\n    elif b == b[::-1]:\n        return b\n    else:\n        return c\nassert f(g())\n",
        "idx_generation": 370,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers arr and an integer k, determine if there exists two distinct\n    indices i and j such that arr[i] + arr[j] = k.\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if k - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(k=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), k=10)\n",
        "idx_generation": 316,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int=10) -> bool:\n    \"\"\"Find two numbers in a list that sum up to the target\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target: int=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\nassert f(g())\n",
        "idx_generation": 305,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a subset of nums that sums up to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n    return dp[n][target]\n\ndef g(nums = [1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == False\n",
        "idx_generation": 314,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string, find if it is a palindrome.\n\n    Sample Input:\n    s = \"racecar\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return s == s[::-1]\n\ndef g(s = \"racecar\"):\n    return s\n\nassert f(g())\n",
        "idx_generation": 256,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n: int = 3) -> bool:\n    \"\"\"Check if a string s contains a palindrome of length n.\"\"\"\n    for i in range(len(s)-n+1):\n        if s[i:i+n] == s[i:i+n][::-1]:\n            return True\n    return False\n\ndef g(s: str = 'racecar'):\n    return s\n\nassert f(g())\n",
        "idx_generation": 391,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int = 100, n: int = 5) -> bool:\n    \"\"\"\n    Find a list of integers where the sum of the first n numbers is equal to the target\n    \"\"\"\n    return sum(nums[:n]) == target\n\ndef g(target: int = 100, n: int = 5):\n    if n <= 0:\n        return []\n    return [target // n] * n\n\nassert f(g())\n",
        "idx_generation": 222,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a subset of the list, such that the sum of its elements is equal to n.\n\n    Sample Input:\n    `9`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    def subset_sum(nums, n, i):\n        if n == 0:\n            return True\n        if i == 0:\n            return False\n        if nums[i-1] > n:\n            return subset_sum(nums, n, i-1)\n        return subset_sum(nums, n, i-1) or subset_sum(nums, n-nums[i-1], i-1)\n\n    return subset_sum(nums, n, len(nums))\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    n = sum(nums) // 2\n    return f(n)\n    \nassert f(g()) == True\n",
        "idx_generation": 294,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(lst: List[int], target=100, max_length=5) -> bool:\n    \"\"\"Find a sublist of at most max_length whose sum is the target value.\"\"\"\n    for l in lst:\n        assert isinstance(l, int)\n    return len(lst) <= max_length and sum(lst) == target\ndef g(target = 100, max_length = 5):\n    from itertools import combinations\n    for n in range(1, max_length + 1):\n        for c in combinations(range(1, 101), n):\n            if sum(c) == target:\n                return list(c)\nassert f(g())\n",
        "idx_generation": 123,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target_sum=50) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target_sum\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                return True\n    return False\n\ndef g(arr=[10, 20, 30, 40, 50]):\n    return arr\nassert f(g())\n",
        "idx_generation": 327,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome\"\"\"\n    return nums == nums[::-1]\ndef g():\n    return [1, 2, 3, 2, 1]\nassert f(g())\n",
        "idx_generation": 66,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=4) -> bool:\n    \"\"\"\n    Given a string consisting of 'a's, 'b's and 'c's, find any substring of length 4 or greater that contains at least\n    two different characters.\n\n    Sample Input:\n    `\"abbbbbcc\"`\n\n    Sample Output:\n    `\"abbbb\"`\n    \"\"\"\n    substrings = [s[i:i+target] for i in range(len(s)-target+1)]\n    return any(len(set(sub)) >= 2 for sub in substrings)\ndef g(target=4):\n    return \"ab\" + \"b\" * (target-2)\nassert f(g())\n",
        "idx_generation": 99,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return nums, target\nassert f(*g())\n",
        "idx_generation": 225,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], a=15, b=30, count=5) -> bool:\n    \"\"\"Find a list of count or more numbers each between a and b that are divisible by 3.\"\"\"\n    return len([n for n in nums if a <= n <= b and n % 3 == 0]) >= count\ndef g(a=15, b=30, count=5):\n    return [n for n in range(a, b + 1) if n % 3 == 0]\nassert f(g())\n",
        "idx_generation": 329,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=0, m=0) -> bool:\n    \"\"\"Check if the sum of the last m digits of 2^n is equal to s\"\"\"\n    return sum(map(int, str(2 ** n)[-m:])) == int(s)\ndef g(n=0, m=0):\n    return str(2 ** n)\nassert f(g())\n",
        "idx_generation": 385,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring=\"world\") -> bool:\n    \"\"\"Check if a string contains a specific substring.\"\"\"\n    return substring in s\ndef g(substring=\"world\"):\n    return \"hello \" + substring\nassert f(g())\n",
        "idx_generation": 324,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums=[5, 10, 15, 25]):\n    return nums\nassert f(g())\n",
        "idx_generation": 305,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"\n    Check if it is possible to form the target number using a combination of the given numbers.\n    Each number can only be used once.\n    \"\"\"\n    def helper(numbers, target):\n        if target == 0:\n            return True\n        for i in range(len(numbers)):\n            if helper(numbers[:i] + numbers[i+1:], target - numbers[i]):\n                return True\n        return False\n    return helper(numbers, target)\ndef g(numbers=[1, 2, 3, 4, 5]):\n    return numbers\nassert f(g())\n",
        "idx_generation": 315,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k: int, target: str = 'abc') -> bool:\n    \"\"\"Given a string s and an integer k, determine if it is possible to construct the target string by\n    concatenating k copies of s.\n\n    Sample Input:\n    s = 'abc'\n    k = 3\n    target = 'abcabcabc'\n\n    Sample Output:\n    True\n    \"\"\"\n    return s * k == target\ndef g(s = 'abc', k = 3, target = 'abcabcabc'):\n    return s, k, target\nassert f(*g())\n",
        "idx_generation": 257,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the given string is a palindrome\"\"\"\n    return s[:n] == s[:n][::-1]\ndef g(n=3):\n    return str(n) + str(n) + str(n)\nassert f(g())\n",
        "idx_generation": 393,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, radius=1.0) -> bool:\n    \"\"\"Check if the given point lies inside the circle with the given radius centered at (0,0).\"\"\"\n    distance = math.sqrt(x**2 + y**2)\n    return distance < radius\ndef g(x=0.5, y=0.5, radius=1.0):\n    return x, y\nassert f(*g())\n",
        "idx_generation": 223,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(d: datetime, t=6) -> bool:\n    \"\"\"Check if the hour of the datetime d is between 6 AM and 6 PM\"\"\"\n    return 6 <= d.hour < 18\ndef g():\n    return datetime.now()\nassert f(g())\n",
        "idx_generation": 308,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=7, c=3, d=9) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers) + d\"\"\"\n    return n + a == b * sum([i for i in range(1, c+1)]) + d\ndef g(a = 5, b = 7, c = 3, d = 9):\n    return -a + b * sum([i for i in range(1, c+1)]) + d\nassert f(g())\n",
        "idx_generation": 125,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list whose sum is equal to the target.\"\"\"\n    return any([target - num in numbers for num in numbers])\n\ndef g(target=10):\n    import random\n    numbers = [random.randint(1, 9) for _ in range(10)]\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 336,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"Check if s1 and s2 are anagrams of each other.\"\"\"\n    return sorted(s1) == sorted(s2)\ndef g(s1 = '', s2 = ''):\n    from random import shuffle\n    s1 = ''.join(chr(ord('a') + i) for i in range(26))\n    s2 = list(s1)\n    shuffle(s2)\n    return (s1, ''.join(s2))\nassert f(*g())\n",
        "idx_generation": 76,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, start_char='a', end_char='z') -> bool:\n    \"\"\"Check if the string starts with the start_char and ends with the end_char\"\"\"\n    return s.startswith(start_char) and s.endswith(end_char)\n\ndef g(start_char='a', end_char='z'):\n    return start_char + 'bcde' + end_char\n\nassert f(g())\n",
        "idx_generation": 100,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find two numbers such that they add up to a specific target number.\n    The function should return True if such numbers exist, and False otherwise.\n    \"\"\"\n    complements = set()\n    for num in nums:\n        if num in complements:\n            return True\n        complements.add(target - num)\n    return False\n\ndef g(nums = [2, 7, 11, 15], target = 9):\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 230,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[5, 10, 15, 20, 25]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is equal to n\"\"\"\n    return any((n % num == 0 and n // num in nums for num in nums))\ndef g(nums=[5, 10, 15, 20, 25]):\n    return max(nums) * min(nums)\nassert f(g())\n",
        "idx_generation": 359,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a string has at least n consecutive vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s.lower():\n        if char in vowels:\n            count += 1\n            if count >= n:\n                return True\n        else:\n            count = 0\n    return False\ndef g(n=3):\n    return 'ae' * n + 'a'\nassert f(g())\n",
        "idx_generation": 394,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_value=1) -> bool:\n    \"\"\"Check if the target_value is present in the matrix.\"\"\"\n    return any([target_value in row for row in matrix])\ndef g(target_value=1):\n    return [[0, 0, 0], [0, 1, 0], [0, 0, 0]]\nassert f(g())\n",
        "idx_generation": 350,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=30) -> bool:\n    \"\"\"Check if the target number is present in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(matrix=[[10, 20, 30], [40, 50, 60], [70, 80, 90]]):\n    return matrix\nassert f(g())\n",
        "idx_generation": 305,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, arr=[5, 8, 2, 3, 1]) -> bool:\n    \"\"\"\n    Given an array of integers, find the maximum sum of a subsequence such that no two elements in the subsequence\n    are adjacent.\n\n    Sample input:\n    10\n\n    Sample output:\n    13\n\n    (Sample output hidden because showing sample output would give away too much information.)\n    \"\"\"\n    if len(arr) == 0:\n        return False\n    if len(arr) <= 2:\n        return max(arr) <= n\n    dp = [0] * len(arr)\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n    for i in range(2, len(arr)):\n        dp[i] = max(dp[i-1], dp[i-2] + arr[i])\n    return dp[-1] <= n\ndef g(arr = [5, 8, 2, 3, 1]):\n    if len(arr) == 0:\n        return 0\n    if len(arr) <= 2:\n        return max(arr)\n    dp = [0] * len(arr)\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n    for i in range(2, len(arr)):\n        dp[i] = max(dp[i-1], dp[i-2] + arr[i])\n    return dp[-1]\nassert f(g())\n",
        "idx_generation": 323,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(names: List[str], target='Python') -> bool:\n    \"\"\"\n    Check if the list of names contains the target string.\n    \"\"\"\n    return any(name == target for name in names)\n\ndef g(names = ['Java', 'Python', 'C++', 'JavaScript']):\n    return names\n\nassert f(g())\n",
        "idx_generation": 259,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s1: str, s2: str, s3: str) -> bool:\n    \"\"\"Check if a string s3 can be formed by interleaving strings s1 and s2\"\"\"\n    def is_interleave(s1, s2, s3):\n        if len(s1) + len(s2) != len(s3):\n            return False\n        if not s1:\n            return s2 == s3\n        if not s2:\n            return s1 == s3\n        if s1[0] == s3[0] and is_interleave(s1[1:], s2, s3[1:]):\n            return True\n        if s2[0] == s3[0] and is_interleave(s1, s2[1:], s3[1:]):\n            return True\n        return False\n    return is_interleave(s1, s2, s3)\ndef g():\n    return \"abcd\", \"efgh\", \"aebcfghd\"\nassert f(*g())\n",
        "idx_generation": 397,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if n is a prime number.\"\"\"\n    if n < 2:\n        return False\n    if n in primes:\n        return True\n    for i in range(2, math.isqrt(n) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef g(primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    n = primes[-1]\n    while True:\n        n += 1\n        if f(n):\n            primes.append(n)\n            return n\nassert f(g())\n",
        "idx_generation": 226,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\ndef f(d: datetime, n=datetime(2022, 1, 1)) -> bool:\n    \"\"\"\n    Check if the given datetime is after n.\n    \"\"\"\n    return d > n\ndef g(n=datetime(2022, 1, 1)):\n    return datetime(2022, 1, 2)\nassert f(g())\n",
        "idx_generation": 312,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], k=3, target=20) -> bool:\n    \"\"\"Find if there exists a subset of the list of integers where the sum of the subset is equal to the target and\n    the length of the subset is greater than or equal to k.\n\n    Sample Input:\n    nums = [4, 6, 7, 8, 9, 10]\n    k = 3\n    target = 20\n\n    Sample Output:\n    True\n    \"\"\"\n    subsets = []\n    for i in range(1, len(nums) + 1):\n        subsets += list(itertools.combinations(nums, i))\n    for subset in subsets:\n        if sum(subset) == target and len(subset) >= k:\n            return True\n    return False\ndef g(nums = [4, 6, 7, 8, 9, 10], k = 3, target = 20):\n    return nums\nassert f(g())\n",
        "idx_generation": 129,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        if target - num in num_set:\n            return True\n    return False\ndef g(nums: List[int], target: int):\n    return nums, target\nassert f(*g([1, 2, 3, 4, 5], 8))\n",
        "idx_generation": 337,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"\n    Check if a target string is an anagram of the given string.\n    \"\"\"\n    return sorted(s) == sorted(target)\ndef g(target = 'python'):\n    return ''.join(sorted(target, reverse=True))\nassert f(g())\n",
        "idx_generation": 80,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], n=3) -> bool:\n    \"\"\"Check if there exists n consecutive numbers in the list that are multiples of 5\"\"\"\n    for i in range(len(nums)-n+1):\n        if all(nums[i+j] % 5 == 0 for j in range(n)):\n            return True\n    return False\ndef g(n = 3):\n    return [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]\nassert f(g())\n",
        "idx_generation": 101,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\nassert f(g())\n",
        "idx_generation": 239,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if all elements in the list are divisible by n\"\"\"\n    return all(x % n == 0 for x in lst)\n\ndef g(n: int = 2, lst: List[int] = [4, 8, 12, 16]):\n    return n, lst\n\nassert f(*g())\n",
        "idx_generation": 389,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, nums=[4, 8, 15, 16, 23, 42]) -> bool:\n    \"\"\"Check if the given number is present in a list of numbers.\"\"\"\n    return n in nums and len(nums) > 0\n\ndef g(nums=[4, 8, 15, 16, 23, 42]):\n    \"\"\"Select a random number from the list.\"\"\"\n    return random.choice(nums)\nassert f(g())\n",
        "idx_generation": 367,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the matrix is symmetric along the main diagonal\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\nassert f(g())\n",
        "idx_generation": 307,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, arr: List[int]) -> bool:\n    \"\"\"Check if it is possible to divide the array arr into exactly n groups, \n    where each group has the same sum and the sum of each group is odd.\"\"\"\n    if sum(arr) % n != 0:\n        return False\n    target_sum = sum(arr) // n\n    group_sums = [0] * n\n    return group_sum_helper(arr, group_sums, target_sum, 0)\n    \ndef group_sum_helper(arr: List[int], group_sums: List[int], target_sum: int, i: int) -> bool:\n    if i == len(arr):\n        return len(set(group_sums)) == 1\n    for j in range(len(group_sums)):\n        if group_sums[j] + arr[i] <= target_sum:\n            group_sums[j] += arr[i]\n            if group_sum_helper(arr, group_sums, target_sum, i+1):\n                return True\n            group_sums[j] -= arr[i]\n    return False\n\ndef g(n=3, arr=[1, 2, 3, 4, 5, 6]):\n    return (n, arr)\nassert f(*g())\n",
        "idx_generation": 343,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='python') -> bool:\n    \"\"\"Check if the substring is present in the string\"\"\"\n    return substring in string\ndef g(string = 'I love python programming'):\n    return string\nassert f(g())\n",
        "idx_generation": 259,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date_str: str, format_str='%Y-%m-%d', year=2022) -> bool:\n    \"\"\"Check if the year of date_str is equal to the given year\"\"\"\n    date_obj = datetime.datetime.strptime(date_str, format_str)\n    return date_obj.year == year\n\ndef g(year = 2022):\n    date_obj = datetime.datetime(year, 1, 1)\n    return date_obj.strftime('%Y-%m-%d')\n\nassert f(g())\n",
        "idx_generation": 233,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"\n    Determine if a given number n is a perfect square and it is divisible by the sum of all the numbers in the list.\n    \"\"\"\n    return n in [x*x for x in range(1, int(n**0.5)+1)] and n % sum(nums) == 0\ndef g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return sum(nums) ** 2\nassert f(g())\n",
        "idx_generation": 328,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target_sum.\"\"\"\n    from itertools import combinations\n    return any(sum(pair) == target_sum for pair in combinations(numbers, 2))\ndef g(target_sum=10):\n    numbers = [3, 5, 2, 7, 1, 9]\n    return numbers\nassert f(g())\n",
        "idx_generation": 145,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\n\ndef f(arr: list, target=9) -> bool:\n    \"\"\"\n    Given a list of positive integers and a target value, determine if there is any combination of numbers\n    in the list whose sum is equal to the target.\n    \"\"\"\n    for r in range(1, len(arr)+1):\n        for combination in itertools.combinations(arr, r):\n            if sum(combination) == target:\n                return True\n    return False\n\ndef g(target=9):\n    arr = [2, 3, 5, 7, 11]\n    return arr\n\nassert f(g())\n",
        "idx_generation": 0,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\ndef g(lst=[10, 20, 30, 40, 50, 60, 70, 80, 90]):\n    return lst\nassert f(g())\n",
        "idx_generation": 338,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], s='abracadabra') -> bool:\n    \"\"\"\n    Check if all words in the list can be formed by rearranging the characters in s\n    \"\"\"\n    return all(set(word) <= set(s) and all(word.count(char) <= s.count(char) for char in set(word)) for word in words)\ndef g(s='abracadabra'):\n    return sorted(set(s))\nassert f(g())\n",
        "idx_generation": 88,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target: str = \"aeiou\") -> bool:\n    \"\"\"Check if a string contains all vowels\"\"\"\n    return all(char in s for char in target)\ndef g(target: str = \"aeiou\"):\n    vowels = \"aeiou\"\n    return vowels + target\nassert f(g())\n",
        "idx_generation": 114,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there exists a subarray in the given list whose sum is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            subarray = nums[i:j+1]\n            if sum(subarray) == target:\n                return True\n    return False\ndef g(nums = [1, 2, 3, 4, 5], target = 10):\n    return nums\nassert f(g())\n",
        "idx_generation": 242,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the given number is prime and if it exists in the list of numbers.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return n in nums\ndef g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums[1]\nassert f(g())\n",
        "idx_generation": 394,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(i: int, li=[78, 91, -67, -5, 30, -42, 68, 32, 96, -55, -39, -46, 90], target=78) -> bool:\n    \"\"\"Find the index of an item in a list using positive indexing.\"\"\"\n    return li[i] == target and i >= 0\ndef g(li=[78, 91, -67, -5, 30, -42, 68, 32, 96, -55, -39, -46, 90], target=78):\n    return li.index(target)\nassert f(g())\n",
        "idx_generation": 375,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in a list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums = [2, 3, 5, 7, 8]):\n    return nums\nassert f(g())\n",
        "idx_generation": 307,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a subset of arr that sums up to the target\"\"\"\n    n = len(arr)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if arr[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target]\ndef g(arr=[4, 2, 7, 1, 3], target=10):\n    return arr\nassert f(g())\n",
        "idx_generation": 344,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='radar') -> bool:\n    \"\"\"Check if the word is a palindrome.\"\"\"\n    return word == word[::-1]\n\ndef g(word='radar'):\n    return word\n\nassert f(g())\n",
        "idx_generation": 259,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(x: datetime.datetime) -> bool:\n    \"\"\"Check if the given date is a leap year\"\"\"\n    return x.year % 4 == 0 and (x.year % 100 != 0 or x.year % 400 == 0)\n\ndef g(year: int = 2020, month: int = 2, day: int = 29) -> datetime.datetime:\n    \"\"\"Return a datetime object representing a leap year date\"\"\"\n    return datetime.datetime(year, month, day)\n\nassert f(g())\n",
        "idx_generation": 234,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=10, b=25) -> bool:\n    \"\"\"Check if the square root of n is between a and b\"\"\"\n    return a <= math.sqrt(n) <= b\ndef g(a=10, b=25):\n    n = a ** 2\n    while True:\n        if f(n, a, b):\n            return n\n        n += 1\nassert f(g())\n",
        "idx_generation": 332,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\n\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"\n    Given a list of integers, find a subset of numbers that add up to the target_sum.\n    Return True if such a subset exists, False otherwise.\n    \"\"\"\n    for i in range(len(nums)):\n        for combination in itertools.combinations(nums, i+1):\n            if sum(combination) == target_sum:\n                return True\n    \n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target_sum=10):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 161,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc', count=3) -> bool:\n    \"\"\"Check if a string contains a certain number of copies of a given substring\"\"\"\n    return string.count(substring) == count\ndef g(substring = 'abc', count = 3):\n    return substring * count\nassert f(g())\n",
        "idx_generation": 1,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"\n    Find a pair of numbers from the given list whose sum is equal to the target value\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 345,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='nojapoxe') -> bool:\n    \"\"\"Check if the given string is a palindrome\"\"\"\n    return s == s[::-1]\ndef g(word='nojapoxe'):\n    return word + word[::-1]\nassert f(g())\n",
        "idx_generation": 97,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(numbers: List[int], threshold=500, k=3) -> bool:\n    \"\"\"\n    Check if there exists a subset of k numbers whose sum is greater than or equal to the threshold\n    \"\"\"\n    from itertools import combinations\n    return any(sum(comb) >= threshold for comb in combinations(numbers, k))\ndef g(threshold = 500, k = 3):\n    numbers = [10, 50, 100, 200, 300, 400, 600, 700, 800, 900]\n    return numbers\nassert f(g())\n",
        "idx_generation": 124,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: list, target=[1, 2, 3]) -> bool:\n    \"\"\"Check if the target list is a subsequence of arr\"\"\"\n    n = len(target)\n    m = len(arr)\n    if n > m:\n        return False\n    i = 0\n    j = 0\n    while i < n and j < m:\n        if target[i] == arr[j]:\n            i += 1\n        j += 1\n    return i == n\ndef g(target = [1, 2, 3]):\n    return target\nassert f(g())\n",
        "idx_generation": 263,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"\n    Check if the given number n is in the list lst.\n    \"\"\"\n    return n in lst\n\ndef g(lst: List[int] = [1, 2, 3, 4, 5]):\n    return random.choice(lst)\n\nassert f(g(), [1, 2, 3, 4, 5])\n",
        "idx_generation": 387,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the list that sums up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\nassert f(g())\n",
        "idx_generation": 308,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], target=30) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, determine if there exists a subset of the list that adds up to the target\n    \"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    return subset_sum(nums, target)\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], target=30):\n    return target\nassert f(g())\n",
        "idx_generation": 345,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport re\n\ndef f(s: str, pattern='[0-9]{3}-[0-9]{3}-[0-9]{4}') -> bool:\n    \"\"\"Check if the given string matches a specific pattern.\"\"\"\n    return bool(re.match(pattern, s))\ndef g(pattern='[0-9]{3}-[0-9]{3}-[0-9]{4}'):\n    return '123-456-7890'\nassert f(g())\n",
        "idx_generation": 260,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(radius: float, volume=523.6) -> bool:\n    \"\"\"Check if the volume of a sphere with a given radius is equal to a target volume\"\"\"\n    return abs((4/3) * math.pi * (radius ** 3) - volume) < 1e-06\n    \ndef g(volume=523.6):\n    radius = (3 * volume / (4 * math.pi))**(1/3)\n    return radius\nassert f(g())\n",
        "idx_generation": 236,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, prime: bool = True) -> bool:\n    \"\"\"\n    Determine if a number is a perfect square or a prime number.\n    If prime is True, return True if the number is prime, otherwise return True if the number is a perfect square.\n    \"\"\"\n    if prime:\n        if n < 2:\n            return False\n        for i in range(2, int(sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    else:\n        return sqrt(n) == int(sqrt(n))\n        \ndef g(prime: bool = True):\n    if prime:\n        return 17\n    else:\n        return 25\n        \nassert f(g())\n",
        "idx_generation": 367,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import combinations\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there are three distinct elements in arr that add up to the target.\"\"\"\n    return any((sum(comb) == target for comb in combinations(arr, 3)))\ndef g(target = 10):\n    arr = [1, 2, 3, 4, 5]\n    return arr\nassert f(g())\n",
        "idx_generation": 198,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='python', count=3) -> bool:\n    \"\"\"Check if a word appears in a string a certain number of times.\"\"\"\n    return s.count(word) == count\ndef g(word='python', count=3):\n    return word * count\nassert f(g())\n",
        "idx_generation": 7,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers from the list that adds up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums=[2, 4, 6, 8]):\n    return nums\nassert f(g())\n",
        "idx_generation": 347,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if s is a palindrome and has a length of n\"\"\"\n    return s == s[::-1] and len(s) == n\ndef g(n = 3):\n    return \"a\" * n\nassert f(g())\n",
        "idx_generation": 98,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char=\"a\", n=5) -> bool:\n    \"\"\"Check if a given character appears at least n times in a string\"\"\"\n    return s.count(char) >= n\ndef g(char=\"a\", n=5):\n    return char * n\nassert f(g())\n",
        "idx_generation": 126,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Return True if there exist two integers in nums such that their sum is equal to target\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target = 5):\n    return [1, 2, 3, 4, target-10]\nassert f(g())\n",
        "idx_generation": 269,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums = [1, 2, 3, 4, 5], target = 9):\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 393,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(x: int, nums=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if x is included in a list of random numbers\"\"\"\n    return x in nums\ndef g(nums=[1, 2, 3, 4, 5]):\n    random.shuffle(nums)\n    return nums[0]\nassert f(g())\n",
        "idx_generation": 310,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=0, b=1, c=1) -> bool:\n    \"\"\"Check if a number is a Fibonacci number\"\"\"\n    fib = [a, b]\n    while fib[-1] < n:\n        fib.append(fib[-1] + fib[-2])\n    return fib[-1] == n\ndef g(a=0, b=1, c=1):\n    if a == 0:\n        return b\n    else:\n        return a + b\nassert f(g())\n",
        "idx_generation": 365,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, lst=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape'], index=3) -> bool:\n    \"\"\"Check if the string is in the list at the given index position\"\"\"\n    return lst[index] == s\ndef g(lst=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape'], index=3):\n    return lst[index]\nassert f(g())\n",
        "idx_generation": 261,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(d: datetime, year=2022) -> bool:\n    \"\"\"Check if the year of the given date is equal to the specified year\"\"\"\n    return d.year == year\n\ndef g(year=2022):\n    return datetime(year, 10, 1)\n\nd = g()\nassert f(d)\n",
        "idx_generation": 241,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(seq: List[int], target_length=4, target_sum=10) -> bool:\n    \"\"\"Find a subsequence of 'seq' with length 'target_length' that adds up to 'target_sum'\"\"\"\n    def find_subsequence(seq, target_length, target_sum):\n        if target_length == 0 and target_sum == 0:\n            return True\n        if target_length == 0 or len(seq) == 0:\n            return False\n        if seq[0] > target_sum:\n            return find_subsequence(seq[1:], target_length, target_sum)\n        return find_subsequence(seq[1:], target_length - 1, target_sum - seq[0]) or find_subsequence(seq[1:], target_length, target_sum)\n\n    return find_subsequence(seq, target_length, target_sum)\n\ndef g(target_length=4, target_sum=10):\n    seq = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return [x for x in seq if x <= target_sum][:target_length]\n\nassert f(g())\n",
        "idx_generation": 388,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, n=4) -> bool:\n    \"\"\"Find n distinct positive integers in nums that sum to target\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, n))\ndef g(target = 100, n = 4):\n    return [i for i in range(1, target+1)]\nassert f(g())\n",
        "idx_generation": 204,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring=\"abc\", n=3) -> bool:\n    \"\"\"Check if a given substring appears n times in a string\"\"\"\n    count = s.count(substring)\n    return count == n\ndef g(substring=\"abc\", n=3):\n    return substring * n\nassert f(g())\n",
        "idx_generation": 12,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=6) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list that sum up to the target\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target = 6):\n    return [1, 2, 3, 4]\nassert f(g())\n",
        "idx_generation": 351,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_len=10) -> bool:\n    \"\"\"Check if a string can be modified to have the target length by adding or removing characters.\"\"\"\n    return len(s) == target_len\ndef g(target_len = 10):\n    return \"?\" * target_len\nassert f(g())\n",
        "idx_generation": 103,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='abc', count=2) -> bool:\n    \"\"\"\n    Given a string, find if it contains a substring `substr` occurring `count` number of times.\n\n    Example Input:\n    \"abcabcabc\"\n\n    Example Output:\n    True (The substring 'abc' occurs 3 times)\n    \"\"\"\n    return s.count(substr) == count\n\ndef g(substr = 'abc', count = 2):\n    \"\"\"\n    Returns a string that contains the substring `substr` occurring `count` number of times.\n    \"\"\"\n    return substr * count\n\nassert f(g())\n",
        "idx_generation": 127,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, li=[1, 8, 3, 5, 2, 7, 4, 6], target=10) -> bool:\n    \"\"\"\n    Check if a target sum can be obtained by adding any two numbers from the list.\n\n    Sample Input:\n    li = [1, 8, 3, 5, 2, 7, 4, 6]\n    target = 10\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i] + li[j] == target:\n                return True\n    return False\ndef g(li=[1, 8, 3, 5, 2, 7, 4, 6], target=10):\n    return li\nassert f(g())\n",
        "idx_generation": 272,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer, return True if there are two numbers in the list that add up to the target, and False otherwise.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[2, 7, 11, 15], target=9):\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 395,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Find n such that n is the sum of two distinct numbers in the given list.\"\"\"\n    return any(nums[i] + nums[j] == n for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums[0] + nums[1]\nassert f(g())\n",
        "idx_generation": 313,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_word=\"hello\") -> bool:\n    \"\"\"Check if the target word exists in the string s\"\"\"\n    i = 0\n    for char in s:\n        if char == target_word[i]:\n            i += 1\n            if i == len(target_word):\n                return True\n    return False\n\ndef g(target_word=\"hello\"):\n    return \"h\" + \"e\" * 100 + \"l\" * 100 + \"o\"\n\nassert f(g())\n",
        "idx_generation": 380,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substr='hello') -> bool:\n    \"\"\"Check if a given substring is present in a string\"\"\"\n    return substr in string\ndef g(substr='hello'):\n    string = \"This is a hello world example\"\n    return string\nassert f(g())\n",
        "idx_generation": 261,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\nimport math\n\ndef f(num: float, divisor=10) -> bool:\n    \"\"\"Check if the given number is divisible by the divisor without remainder\"\"\"\n    return math.floor(num) % divisor == 0\n\ndef g(divisor=10):\n    return random.randint(1, 100) * divisor\n\nassert f(g())\n",
        "idx_generation": 242,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\n\ndef f(lst: list, k: int) -> bool:\n    \"\"\"\n    Find a subset of lst that has a sum of k.\n    \"\"\"\n    return any(sum(subset) == k for r in range(len(lst)+1) for subset in itertools.combinations(lst, r))\n    \ndef g(lst: list, k: int):\n    return lst\n\n# example usage\nlst = [1, 4, 6, 2, 3]\nk = 8\nassert f(g(lst, k), k)\n",
        "idx_generation": 207,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc', count=2, length=10) -> bool:\n    \"\"\"Check if the string contains a certain number of copies of a given substring and has a certain length\"\"\"\n    return string.count(substring) == count and len(string) == length\ndef g(substring = 'abc', count = 2, length = 10):\n    return substring * count + 'x' * (length - len(substring) * count)\nassert f(g())\n",
        "idx_generation": 16,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"\n    Given a number and a list of integers, return True if the number is in the list and False otherwise.\n    \"\"\"\n    return num in lst\ndef g(lst=[1, 2, 3, 4, 5]):\n    num = lst[2]\n    return num\nassert f(g())\n",
        "idx_generation": 354,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a='hello', b='world') -> bool:\n    \"\"\"Check if a string contains both a and b\"\"\"\n    return a in s and b in s\ndef g(a = 'hello', b = 'world'):\n    return a + ' ' + b\nassert f(g())\n",
        "idx_generation": 115,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(names: List[str], target_length=5, max_count=3, words=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Check if there are at most max_count names in the list that have a length greater than or equal to target_length.\"\"\"\n    return sum(len(name) >= target_length for name in names) <= max_count\ndef g(target_length=5, max_count=3, words=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return [word for word in words if len(word) >= target_length][:max_count]\nassert f(g())\n",
        "idx_generation": 132,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find if there are two numbers in the list that add up to the target.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(nums = [2, 7, 11, 15], target = 9):\n    return nums, target\nassert f(*g())\n",
        "idx_generation": 278,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char: str) -> bool:\n    \"\"\"Check if the character is the first character in the string\"\"\"\n    return s[0] == char\n\ndef g(char: str):\n    return char + 'abcde'\n\nassert f(g(char='a'), char='a')\n",
        "idx_generation": 313,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is a Fibonacci sequence.\"\"\"\n    if len(nums) < 3:\n        return False\n    for i in range(2, len(nums)):\n        if nums[i] != nums[i-1] + nums[i-2]:\n            return False\n    return True\ndef g():\n    import random\n    a, b = random.randint(1, 10), random.randint(1, 10)\n    nums = [a, b]\n    while len(nums) < 10:\n        next_num = nums[-1] + nums[-2]\n        nums.append(next_num)\n    return nums\nassert f(g())\n",
        "idx_generation": 387,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if s is a substring of the concatenation of n copies of itself\"\"\"\n    return s in (s * n)\n\ndef g(n=3):\n    return \"abc\"\n\nassert f(g())\n",
        "idx_generation": 261,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, target=5) -> bool:\n    \"\"\"\n    Given a positive integer num, determine if it is a perfect square.\n\n    Sample Input:\n    16\n\n    Sample Output:\n    True\n    \"\"\"\n    return num >= target and int(num ** 0.5) ** 2 == num\ndef g(target = 5):\n    return target ** 2\nassert f(g())\n",
        "idx_generation": 242,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the array that add up to the target value\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(arr, 3))\ndef g(arr = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]):\n    return arr\nassert f(g())\n",
        "idx_generation": 208,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(s: str, target='hello', max_occurrences=2) -> bool:\n    \"\"\"Check if the target string occurs at most max_occurrences times in s.\"\"\"\n    count = s.count(target)\n    return count <= max_occurrences\ndef g(target='hello', max_occurrences=2):\n    from random import randint\n    s = ''.join([chr(randint(97, 122)) for _ in range(100)])\n    return s\nassert f(g())\n",
        "idx_generation": 18,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, return True if there exists a pair of numbers in the list\n    that sum up to the target number, otherwise return False.\n    \"\"\"\n    return any(target - n in nums for n in nums)\ndef g(nums=[2, 4, 6, 8, 10], target=12):\n    return nums, target\nassert f(*g())\n",
        "idx_generation": 357,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(text: str, a=4, b=2) -> bool:\n    \"\"\"Check if the given text is a palindrome\"\"\"\n    return text == text[::-1]\ndef g(text='racecar', a=4, b=2):\n    return text\nassert f(g())\n",
        "idx_generation": 122,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the list such that all elements are unique.\"\"\"\n    for i in range(len(nums) - k + 1):\n        subarray = nums[i:i+k]\n        if len(subarray) == len(set(subarray)):\n            return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 143,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(li: List[int], target_sum=100) -> bool:\n    \"\"\"Find a sublist in a list that sums up to a target value\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if sum(li[i:j+1]) == target_sum:\n                return True\n    return False\n\ndef g(target_sum=100):\n    return [i for i in range(1, target_sum+1)]\n\nassert f(g())\n",
        "idx_generation": 279,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the given number is in the list\"\"\"\n    return n in lst\n\ndef g(lst=[1, 2, 3, 4, 5]):\n    return random.choice(lst)\n\nassert f(g())\n",
        "idx_generation": 314,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='abcdefg', start_index=0) -> bool:\n    \"\"\"Check if the given string is a substring of the target string.\"\"\"\n    return s in target[start_index:]\ndef g(target='abcdefg', start_index=0):\n    return target[start_index:]\nassert f(g())\n",
        "idx_generation": 264,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, x=10, y=5, z=3) -> bool:\n    \"\"\"Check if n can be expressed as the sum of x, y, and z.\"\"\"\n    return n == (x + y + z)\ndef g(x = 10, y = 5, z = 3):\n    return x + y + z\nassert f(g())\n",
        "idx_generation": 243,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, c1='a', c2='b', c3='c', count1=10, count2=5, count3=3) -> bool:\n    \"\"\"\n    Find a string that has count1 occurrences of c1, count2 occurrences of c2, and count3 occurrences of c3,\n    and the counts are in increasing order.\n    \"\"\"\n    return s.count(c1) == count1 and s.count(c2) == count2 and s.count(c3) == count3 and s.index(c1) < s.index(c2) < s.index(c3)\ndef g(c1 = 'a', c2 = 'b', c3 = 'c', count1 = 10, count2 = 5, count3 = 3):\n    return c1 * count1 + c2 * count2 + c3 * count3\nassert f(g())\n",
        "idx_generation": 212,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='xyz', count=3, length=12) -> bool:\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length\ndef g(substring='xyz', count=3, length=12):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * c\nassert f(g())\n",
        "idx_generation": 18,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=7) -> bool:\n    \"\"\"Find if the target number exists in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(target=7):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "idx_generation": 358,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, target_word='python') -> bool:\n    \"\"\"Check if a word is an anagram of target_word\"\"\"\n    return sorted(word.lower()) == sorted(target_word)\n\ndef g(target_word='python'):\n    return 'typhon'\n\nassert f(g())\n",
        "idx_generation": 131,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_len=6) -> bool:\n    \"\"\"\n    Determine if a string has a length equal to the target length and contains at least one uppercase letter, \n    one lowercase letter, and one numeric digit.\n    \"\"\"\n    return len(s) == target_len and any(c.isupper() for c in s) and any(c.islower() for c in s) and any(c.isdigit() for c in s)\ndef g(target_len = 6):\n    return 'Aa1' + '0' * (target_len - 3)\nassert f(g())\n",
        "idx_generation": 149,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums = [1, 5, 10, 15]):\n    return nums\nassert f(g())\n",
        "idx_generation": 284,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if the target number is a sum of any two numbers in the list.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    \"\"\"Generate a list of numbers and a target number.\"\"\"\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 314,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix=\"py\", suffix=\"on\") -> bool:\n    \"\"\"Find a word in the list that starts with the given prefix and ends with the given suffix.\"\"\"\n    return any(word.startswith(prefix) and word.endswith(suffix) for word in words)\ndef g(prefix=\"py\", suffix=\"on\"):\n    return [\"python\", \"pycharm\", \"jupyter\", \"spyder\"]\nassert f(g())\n",
        "idx_generation": 265,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=4, b=5, c=6) -> bool:\n    \"\"\"Check if n is a perfect square.\"\"\"\n    return n == a ** 2 or n == b ** 2 or n == c ** 2\ndef g(a = 4, b = 5, c = 6):\n    return max(a, b, c) ** 2\nassert f(g())\n",
        "idx_generation": 243,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are three numbers in the list that sum up to the target\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, 3))\ndef g(nums = [1, 2, 3, 4, 5], target = 9):\n    return nums, target\nassert f(*g())\n",
        "idx_generation": 213,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, num_list=['one', 'two', 'three', 'four']) -> bool:\n    \"\"\"Check if all elements in num_list are present in s\"\"\"\n    return all(num in s for num in num_list)\ndef g(num_list=['one', 'two', 'three', 'four']):\n    return ' '.join(num_list)\nassert f(g())\n",
        "idx_generation": 31,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(moves: List[List[int]], initial_state=[4, 5, 2, 1, 0]) -> bool:\n    \"\"\"\n    Beat a bot at Nim, a two-player game involving a number of heaps of objects. Players alternate, in each turn\n    removing one or more objects from a single non-empty heap. The player who takes the last object wins.\n    - initial_state is list of numbers of objects in each heap\n    - moves is a list of your moves: [heap, number of objects to take]\n    - you play first\n    \"\"\"\n\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state = [4, 5, 2, 1, 0]):\n\n    state = initial_state[:]\n    moves = []\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    def losing(h):  # return True if h is a losing state\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g())\n",
        "idx_generation": 360,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'orange', 'peach']) -> bool:\n    \"\"\"Check if a word is a valid word in a list of words\"\"\"\n    return s in words\ndef g(words=['apple', 'banana', 'orange', 'peach']):\n    return words[0]\nassert f(g())\n",
        "idx_generation": 139,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5, m=2) -> bool:\n    \"\"\"Check if there are exactly n occurrences of the character 'a' in the string s\"\"\"\n    return s.count('a') == n\ndef g(n = 5, m = 2):\n    return 'a' * n + 'b' * m\nassert f(g())\n",
        "idx_generation": 159,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: list, target_sum=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target sum.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target_sum:\n                return True\n    return False\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return lst\nassert f(g())\n",
        "idx_generation": 297,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=10, c=7) -> bool:\n    \"\"\"Check if n is divisible by a and b, and is greater than c\"\"\"\n    return n % a == 0 and n % b == 0 and n > c\ndef g(a=5, b=10, c=7):\n    n = c\n    while True:\n        n += 1\n        if n % a == 0 and n % b == 0:\n            return n\nassert f(g())\n",
        "idx_generation": 316,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='tacocat') -> bool:\n    \"\"\"\n    Check if the given string is a palindrome.\n    \"\"\"\n    return s == s[::-1]\n\ndef g(target='tacocat'):\n    return target\n\nassert f(g())\n",
        "idx_generation": 265,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: float, a=3.14, b=2) -> bool:\n    \"\"\"Check if the square root of n is equal to a divided by b\"\"\"\n    return math.sqrt(n) == a / b\n\ndef g(a=3.14, b=2):\n    return (a / b) ** 2\n\nassert f(g())\n",
        "idx_generation": 247,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import combinations\n\ndef f(num_list: List[int], target_sum=20, num_elements=4) -> bool:\n    \"\"\"Find num_elements distinct integers from num_list that sum up to target_sum\"\"\"\n    for combination in combinations(num_list, num_elements):\n        if sum(combination) == target_sum:\n            return True\n    return False\n\ndef g(num_list: List[int], target_sum=20, num_elements=4):\n    return num_list\n\nassert f(g([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n",
        "idx_generation": 214,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, ops=['x--', 'x++', '++x', '--x', 'x++', '--x', 'x--'], target=28713) -> bool:\n    \"\"\"\n    Given a sequence of operations \"++x\", \"x++\", \"--x\", \"x--\", and a target value, find initial value so that the\n    final value is the target value.\n\n    Sample Input:\n    ops = [\"x++\", \"--x\", \"--x\"]\n    target = 12\n\n    Sample Output:\n    13\n    \"\"\"\n    for op in ops:\n        if op in ['++x', 'x++']:\n            n += 1\n        else:\n            assert op in ['--x', 'x--']\n            n -= 1\n    return n == target\ndef g(ops = ['x--', 'x++', '++x', '--x', 'x++', '--x', 'x--'], target = 28713):\n    return target - ops.count(\"++x\") - ops.count(\"x++\") + ops.count(\"--x\") + ops.count(\"x--\")\nassert f(g())\n",
        "idx_generation": 36,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    nums.sort()\n    i, j = 0, len(nums) - 1\n    while i < j:\n        if nums[i] + nums[j] == target:\n            return True\n        elif nums[i] + nums[j] < target:\n            i += 1\n        else:\n            j -= 1\n    return False\n\ndef g(nums = [1, 5, 3, 9, 2], target = 8):\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 362,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport string\n\ndef f(s: str, n: int) -> bool:\n    \"\"\"\n    Given a string s and an integer n, check if s contains at least n unique lowercase letters.\n    \"\"\"\n    unique_letters = set(s.lower())\n    lowercase_letters = set(string.ascii_lowercase)\n    return len(unique_letters.intersection(lowercase_letters)) >= n\n\ndef g(s: str = \"Hello World!\", n: int = 5):\n    return s, n\n\nassert f(*g())\n",
        "idx_generation": 154,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, s1='a', s2='b', count1=50, count2=30, substring='cde') -> bool:\n    \"\"\"\n    Find a string that has count1 occurrences of s1, count2 occurrences of s2, starts and ends with the same 10 characters,\n    and contains the substring at least once.\n    \"\"\"\n    return s.count(s1) == count1 and s.count(s2) == count2 and (s[:10] == s[-10:]) and (substring in s)\ndef g(s1 = 'a', s2 = 'b', count1 = 50, count2 = 30, substring = 'cde'):\n    if s1 == s2:\n        ans = (s1 + \"?\") * count1\n    elif s1.count(s2):\n        ans = (s1 + \"?\") * count1\n        ans += (s2 + \"?\") * (count2 - ans.count(s2))\n    else:\n        ans = (s2 + \"?\") * count2\n        ans += (s1 + \"?\") * (count1 - ans.count(s1))\n    return \"?\" * 10 + ans + \"?\" * 10 + substring + \"?\" * 10\nassert f(g())\n",
        "idx_generation": 160,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=9) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=9):\n    return [2, 7, 11, 15, 3, 6, 4, 8]\nassert f(g())\n",
        "idx_generation": 304,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], min_length=3, max_length=5) -> bool:\n    \"\"\"Check if there is a subarray of length between min_length and max_length (inclusive) whose sum is zero.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + min_length, min(i + max_length + 1, len(arr) + 1)):\n            if sum(arr[i:j]) == 0:\n                return True\n    return False\ndef g(arr = [1, -2, 3, 4, -5, 6, -7, 8, 9]):\n    return arr\nassert f(g())\n",
        "idx_generation": 317,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='hello') -> bool:\n    \"\"\"Check if a given substring is present in a string\"\"\"\n    return substr in s\n\ndef g(substr = 'hello'):\n    return 'This is a hello world string.'\n\nassert f(g())\n",
        "idx_generation": 266,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, x=100) -> bool:\n    \"\"\"Check if n is a perfect square and is divisible by x\"\"\"\n    return n == int(sqrt(n))**2 and n % x == 0\n\ndef g(x=100):\n    return x**2\n\nassert f(g())\n",
        "idx_generation": 251,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(x: List[int], target=20, k=3) -> bool:\n    \"\"\"Find if there exists a combination of k elements in the list that adds up to the target\"\"\"\n    from itertools import combinations\n    for combo in combinations(x, k):\n        if sum(combo) == target:\n            return True\n    return False\n\ndef g(target=20, k=3):\n    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return x\n\nassert f(g())\n",
        "idx_generation": 216,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char_count=3) -> bool:\n    \"\"\"\n    Find a string that contains exactly char_count occurrences of each character.\n    \"\"\"\n    char_set = set(s)\n    return all(s.count(char) == char_count for char in char_set)\n\ndef g(char_count=3):\n    return \"abc\" * char_count\n\nassert f(g())\n",
        "idx_generation": 38,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    subarray_sum = 0\n    for i in range(len(x)):\n        subarray_sum += x[i]\n        if subarray_sum % k == 0:\n            return True\n    return False\ndef g(k=3):\n    nums = [4, 5, 6, 7, 8, 9, 10]\n    return nums\nassert f(g())\n",
        "idx_generation": 363,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], a=5, b=10) -> bool:\n    \"\"\"Check if all elements in the list 'li' are between 'a' and 'b'\"\"\"\n    return all(a <= x <= b for x in li)\ndef g(a = 5, b = 10):\n    return [6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 159,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"\n    Given a string, determine if it can be divided into k equal parts.\n    \"\"\"\n    n = len(s)\n    if n % k != 0:\n        return False\n    part_len = n // k\n    \n    for i in range(0, n, part_len):\n        if s[i:i+part_len] != s[:part_len]:\n            return False\n    return True\n\ndef g(s=\"abcabcabc\"):\n    \"\"\"\n    This solution checks if the string can be divided into k equal parts by comparing each part with the first part.\n    \"\"\"\n    return s\n\nassert f(g())\n",
        "idx_generation": 160,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Find two numbers in the list nums that sum up to the target.\n    \"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\nassert f(g())\n",
        "idx_generation": 322,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=\"Hello, World!\") -> bool:\n    \"\"\"\n    Check if a given string is equal to the target string\n    \"\"\"\n    return s == target\ndef g(target=\"Hello, World!\"):\n    return target\nassert f(g())\n",
        "idx_generation": 317,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='apple', n=2) -> bool:\n    \"\"\"\n    Check if a target string appears n times in a given string.\n    \"\"\"\n    return s.count(target) == n\ndef g(target='apple', n=2):\n    return target * n\nassert f(g())\n",
        "idx_generation": 266,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import gcd\n\ndef f(n: int, a=4, b=6, c=8) -> bool:\n    \"\"\"Check if n is a common multiple of a, b, and c.\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0\ndef g(a = 4, b = 6, c = 8):\n    lcm = abs(a*b*c) // gcd(gcd(a, b), c)\n    return lcm\nassert f(g())\n",
        "idx_generation": 253,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10, n=2) -> bool:\n    \"\"\"\n    Find N-sum\n\n    Given a list of integers, find N numbers that sum up to the target value.\n\n    Example:\n    nums = [2, 5, 7, 3, 9]\n    target = 10\n    n = 3\n    output: True\n    \"\"\"\n    from itertools import combinations\n    for comb in combinations(nums, n):\n        if sum(comb) == target:\n            return True\n    return False\ndef g(nums=[2, 5, 7, 3, 9], target=10, n=3):\n    return nums\nassert f(g())\n",
        "idx_generation": 220,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], a=-100, b=100, count=5) -> bool:\n    \"\"\"Find a list of count or more different numbers each between a and b that each have no repeated digits\"\"\"\n    assert all((len(str(n)) == len(set(str(n))) and a <= n <= b for n in nums))\n    return len(set(nums)) >= count\ndef g(a = -100, b = 100, count = 5):\n    return [n for n in range(a, b + 1) if len(str(n)) == len(set(str(n)))]\nassert f(g())\n",
        "idx_generation": 43,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find two numbers in a list that add up to a given target.\"\"\"\n    num_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False\ndef g(nums = [2, 7, 11, 15], target = 9):\n    return nums, target\nassert f(*g())\n",
        "idx_generation": 365,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, vowels=\"aeiou\") -> bool:\n    \"\"\"Check if the given string contains all vowels.\"\"\"\n    return all(v in s for v in vowels)\n\ndef g(vowels=\"aeiou\"):\n    return \"\".join(vowels)\n\nassert f(g())\n",
        "idx_generation": 165,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=10) -> bool:\n    \"\"\"Return True if the given string contains at least k distinct characters.\"\"\"\n    return len(set(s)) >= k\ndef g(k = 10):\n    return \"abcdefghijklmnopqrstuvwxyz\"[:k]\nassert f(g())\n",
        "idx_generation": 162,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Find two numbers from a list that add up to a target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=15):\n    return [3, 6, 9, 12, 15, 18]\nassert f(g())",
        "idx_generation": 341,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring=\"python\") -> bool:\n    \"\"\"Check if the given substring is contained in the string s\"\"\"\n    return substring in s\ndef g(substring=\"python\"):\n    return \"I love programming in \" + substring\nassert f(g())\n",
        "idx_generation": 317,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=\"hello\") -> bool:\n    \"\"\"\n    Given a string `s`, determine if it contains the substring `target`.\n    \"\"\"\n    return target in s\ndef g(target=\"hello\"):\n    return \"This is a hello world example\"\nassert f(g())\n",
        "idx_generation": 267,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, m: int, s: int) -> bool:\n    \"\"\"\n    Given three positive integers n, m, and s, find if there exists a right triangle with side lengths n, m, and s.\n\n    Sample Input:\n    n = 3\n    m = 4\n    s = 5\n\n    Sample Output:\n    True\n    \"\"\"\n    return math.sqrt(n**2 + m**2) == s\n\ndef g(n = 3, m = 4, s = 5):\n    return n, m, s\n\nassert f(*g())\n",
        "idx_generation": 256,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"\n    Given a list of integers nums and a target number, find a sublist of nums such that the sum of the numbers\n    in the sublist is equal to the target number.\n    \"\"\"\n    for i in range(1, len(nums) + 1):\n        for j in range(len(nums) - i + 1):\n            if sum(nums[j:j+i]) == target:\n                return True\n    return False\ndef g(target = 100):\n    return [i for i in range(1, target + 1)]\nassert f(g())\n",
        "idx_generation": 225,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['abc', 'defg']) -> bool:\n    \"\"\"\n    Find a string that contains each string in substrings alternating, e.g., 'cdaotg' for 'cat' and 'dog'\n    \"\"\"\n    return all((sub in s[i::len(substrings)] for (i, sub) in enumerate(substrings)))\ndef g(substrings = ['abc', 'defg']):\n    m = max(len(s) for s in substrings)\n    return \"\".join([(s[i] if i < len(s) else \" \") for i in range(m) for s in substrings])\nassert f(g())\n",
        "idx_generation": 43,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of integers is sorted in non-decreasing order.\"\"\"\n    return nums == sorted(nums)\n\ndef g(nums: List[int]):\n    return nums\n\nassert f(g([1, 2, 3, 4, 5]))\n",
        "idx_generation": 369,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, strings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grapefruit', 'honeydew', 'imbe', 'jackfruit']) -> bool:\n    \"\"\"Check if the input string is a substring of any string in the list.\"\"\"\n    return any((s in string for string in strings))\ndef g(strings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grapefruit', 'honeydew', 'imbe', 'jackfruit']):\n    return strings[3][2:]\nassert f(g())\n",
        "idx_generation": 171,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"Check if string s has a length of n\"\"\"\n    return len(s) == n\ndef g(n=10):\n    return \"a\" * n\nassert f(g(), n=10)\n",
        "idx_generation": 170,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"\n    Given a list of integers and an integer k, determine if there exists two distinct indices i and j\n    such that abs(arr[i] - arr[j]) <= k.\n    \"\"\"\n    return any(abs(arr[i] - arr[j]) <= k for i in range(len(arr)) for j in range(len(arr)) if i != j)\ndef g(arr = [1, 2, 3, 4, 5], k = 3):\n    return arr\nassert f(g())\n",
        "idx_generation": 348,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, x=2, y=3) -> bool:\n    \"\"\"Check if the sum of x and y is equal to n.\"\"\"\n    return x + y == n\ndef g(x=2, y=3):\n    return x + y\nassert f(g())\n",
        "idx_generation": 319,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a palindrome\"\"\"\n    return s == s[::-1]\n\ndef g():\n    s = \"racecar\"\n    return s\n\nassert f(g())\n",
        "idx_generation": 268,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(s: float, num=10) -> bool:\n    \"\"\"Check if the square root of the number is equal to the given value.\"\"\"\n    return math.sqrt(num) == s\n\ndef g(num=10):\n    return math.sqrt(num)\n\nassert f(g())\n",
        "idx_generation": 259,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target value.\"\"\"\n    from itertools import combinations\n    for c in combinations(nums, 3):\n        if sum(c) == target:\n            return True\n    return False\ndef g(nums = [2, 6, 8, 10, 5, 4, 11, 3, 9, 7]):\n    return nums\nassert f(g())\n",
        "idx_generation": 234,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix=\"pre\", suffix=\"fix\") -> bool:\n    \"\"\"Check if any word in the list starts with the prefix and ends with the suffix\"\"\"\n    return any(word.startswith(prefix) and word.endswith(suffix) for word in words)\ndef g(prefix = \"pre\", suffix = \"fix\"):\n    return [\"prefix\", \"suffix\", \"infix\"]\nassert f(g())\n",
        "idx_generation": 45,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=3) -> bool:\n    \"\"\"Check if a list contains a target number\"\"\"\n    return target in nums\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\nassert f(g())\n",
        "idx_generation": 370,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='') -> bool:\n    \"\"\"Check if a substring is present in the given string.\"\"\"\n    return substr in s\ndef g(substr = ''):\n    return \"Hello, World!\"\nassert f(g())\n",
        "idx_generation": 175,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, find three integers in the list that sum up to the target value.\n    Return True if such a triplet exists, False otherwise.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    for perm in permutations(nums, 3):\n        if sum(perm) == target:\n            return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 179,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], t=10, a=0, e=5, s=1) -> bool:\n    \"\"\"Check if the sum of sublist equals t.\"\"\"\n    return sum(x[a:e:s]) == t\n\ndef g(t=10, a=0, e=5, s=1):\n    x = [i for i in range(10)]\n    return x\n\nassert f(g())\n",
        "idx_generation": 352,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"Find a combination of four numbers that equals the target\"\"\"\n    from itertools import combinations\n    for c in combinations(nums, 4):\n        if sum(c) == target:\n            return True\n    return False\ndef g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\nassert f(g())\n",
        "idx_generation": 320,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, letter='a') -> bool:\n    \"\"\"Check if a specific letter is present in a word\"\"\"\n    return letter in word\ndef g(word='apple', letter='a'):\n    return word\nassert f(g())\n",
        "idx_generation": 271,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=5, b=7, c=9) -> bool:\n    \"\"\"Solve an equation\"\"\"\n    return a*x**2 + b*x + c == 0\ndef g(a=5, b=7, c=9):\n    import numpy as np\n    roots = np.roots([a, b, c])\n    return roots[0]\nassert f(g())\n",
        "idx_generation": 259,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_word='python') -> bool:\n    \"\"\"\n    Given a list of words and a target word, determine if the target word is an anagram of any word in the list.\n    \"\"\"\n    def is_anagram(word1, word2):\n        if len(word1) != len(word2):\n            return False\n        count = {}\n        for char in word1:\n            count[char] = count.get(char, 0) + 1\n        for char in word2:\n            if char not in count:\n                return False\n            count[char] -= 1\n            if count[char] == 0:\n                del count[char]\n        return len(count) == 0\n    \n    return any(is_anagram(word, target_word) for word in words)\n\ndef g(words=['python', 'java', 'ruby', 'javascript']):\n    return words\n\nassert f(g())\n",
        "idx_generation": 240,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=4, words=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grapefruit']) -> bool:\n    \"\"\"Check if a given string has exactly k words from a list of words.\"\"\"\n    count = sum((word in s for word in words))\n    return count == k\ndef g(k = 4, words = ['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grapefruit']):\n    return ' '.join(words[:k])\nassert f(g())\n",
        "idx_generation": 51,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 375,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target=0) -> bool:\n    \"\"\"Check if the sum of all elements in a given numpy array is equal to a target value\"\"\"\n    return np.sum(arr) == target\n\ndef g(target = 0):\n    return np.zeros((3, 3))\n\nassert f(g())\n",
        "idx_generation": 182,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"\n    Find if there are n consecutive vowels in the string s.\n    \"\"\"\n    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n            if count >= n:\n                return True\n        else:\n            count = 0\n    return False\ndef g(n = 5):\n    return \"aeiou\" * n\nassert f(g())\n",
        "idx_generation": 181,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], n=6) -> bool:\n    \"\"\"Check if the given list contains n consecutive numbers.\"\"\"\n    return any(x[i:i+n] == list(range(x[i], x[i]+n)) for i in range(len(x)-n+1))\n\ndef g(n=6):\n    x = [i for i in range(10)]\n    return x\n\nassert f(g())\n",
        "idx_generation": 352,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(target = 10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 321,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_char='a') -> bool:\n    \"\"\"\n    Check if a given character is present in a string.\n\n    Sample Input:\n    s = \"Hello, World!\"\n    target_char = \"o\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return target_char in s\ndef g(s='Hello, World!', target_char='a'):\n    return target_char\nassert f(g())\n",
        "idx_generation": 272,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=10, b=5) -> bool:\n    \"\"\"Check if a number is a multiple of two other numbers\"\"\"\n    return n % a == 0 and n % b == 0\ndef g(a=10, b=5):\n    return a * b\nassert f(g())\n",
        "idx_generation": 262,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k: int) -> bool:\n    \"\"\"Check if a string can be rearranged to have all k adjacent characters distinct\"\"\"\n    if len(s) < k:\n        return False\n    char_counts = {}\n    for char in s:\n        char_counts[char] = char_counts.get(char, 0) + 1\n        if char_counts[char] > k:\n            return False\n    return True\n\ndef g():\n    s = \"ababcc\"\n    k = 3\n    return s, k\n\nassert f(*g())\n",
        "idx_generation": 246,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\nimport string\n\ndef f(string: str, substring = 'abc', count = 5, length = 15) -> bool:\n    \"\"\"Check if the given string contains a certain number of copies of a given substring and has a specific length\"\"\"\n    return string.count(substring) == count and len(string) == length\n\ndef g(substring = 'abc', count = 5, length = 15):\n    chars = string.ascii_lowercase\n    return substring * count + ''.join(random.choice(chars) for _ in range(length - len(substring) * count))\n\nassert f(g())\n",
        "idx_generation": 56,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"\n    Find if the given target exists in the given matrix.\n    \"\"\"\n    row = len(matrix)\n    col = len(matrix[0])\n    left = 0\n    right = row * col - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        num = matrix[mid // col][mid % col]\n        if num == target:\n            return True\n        elif num < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return False\ndef g(target=5):\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    return matrix\nassert f(g())\n",
        "idx_generation": 376,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5, m=3) -> bool:\n    \"\"\"Check if s contains the substring 'hello' n times and the substring 'world' m times\"\"\"\n    return s.count('hello') == n and s.count('world') == m\ndef g(n=5, m=3):\n    return 'hello' * n + 'world' * m\nassert f(g())\n",
        "idx_generation": 195,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=10) -> bool:\n    \"\"\"Return True if the string s contains exactly n numbers separated by commas\"\"\"\n    return len(s.split(',')) == n\ndef g(n = 10):\n    return ','.join(str(i) for i in range(1, n+1))\nassert f(g())\n",
        "idx_generation": 200,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find two numbers that sum to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=20):\n    nums = [10, 5, 15, 7, 2]\n    return nums\nassert f(g())\n",
        "idx_generation": 377,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"\n    Find a row in the matrix where the sum of its elements is equal to the target.\n    \"\"\"\n    return any(sum(row) == target for row in matrix)\ndef g(target=15):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n",
        "idx_generation": 322,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, max_length=5) -> bool:\n    \"\"\"Check if there exists a substring of length at most max_length that contains all distinct letters in the given string\"\"\"\n    distinct_letters = set(s)\n    \n    for i in range(len(s)):\n        for j in range(i, min(i+max_length, len(s))):\n            substring = s[i:j+1]\n            if len(set(substring)) == len(distinct_letters):\n                return True\n    \n    return False\n\ndef g(s='abacabacaba'):\n    return s\n\nassert f(g())\n",
        "idx_generation": 273,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\nimport datetime\n\ndef f(year: int, month=1, day=1) -> bool:\n    \"\"\"Check if a date is in the past.\"\"\"\n    current_date = datetime.date.today()\n    check_date = datetime.date(year, month, day)\n    return check_date < current_date\n\ndef g(month=1, day=1):\n    current_year = datetime.date.today().year\n    random_year = random.randint(1900, current_year)\n    return random_year\n\nassert f(g())\n",
        "idx_generation": 262,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"\n    Find a combination of the numbers in the list that add up to the target\n    \"\"\"\n    import itertools\n    for r in range(1, len(nums) + 1):\n        for combination in itertools.combinations(nums, r):\n            if sum(combination) == target:\n                return True\n    return False\ndef g(nums = [10, 20, 30, 40, 50]):\n    return nums\nassert f(g())\n",
        "idx_generation": 260,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, perm='abcdefghijklmnopqrstuvwxyz', target='python is great') -> bool:\n    \"\"\"Find a string that, when a given permutation of characters is applied, has a given result.\"\"\"\n    return ''.join((perm[(perm.index(c) + 1) % len(perm)] if c in perm else c for c in s)) == target\ndef g(perm = 'abcdefghijklmnopqrstuvwxyz', target = 'python is great'):\n    return \"\".join((perm[(perm.index(c) - 1) % len(perm)] if c in perm else c) for c in target)\nassert f(g())\n",
        "idx_generation": 57,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, strings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'indigo', 'jackfruit']) -> bool:\n    \"\"\"Find the index of the first occurrence of a string in a list.\"\"\"\n    return strings.index(s) == 0\ndef g(strings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'indigo', 'jackfruit']):\n    return strings[0]\nassert f(g())\n",
        "idx_generation": 383,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry']) -> bool:\n    \"\"\"\n    Check if a string contains all the substrings in a specific order\n    \"\"\"\n    indices = [s.find(sub) for sub in substrings]\n    return all((indices[i] < indices[i+1] for i in range(len(indices)-1)))\ndef g(substrings=['apple', 'banana', 'cherry']):\n    return \"\".join(substrings)\nassert f(g())\n",
        "idx_generation": 195,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='ab', count=2) -> bool:\n    \"\"\"\n    Given a string s and a target string of length n, find the number of occurrences of the target string in s.\n\n    Sample Input:\n    `\"ababab\"`\n\n    Sample Output:\n    `3`\n    \"\"\"\n    return s.count(target) == count\ndef g(target='ab', count=2):\n    return target * count\nassert f(g())\n",
        "idx_generation": 211,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, return True if there exist two integers in the list whose sum is equal to the target value.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target = 10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), target=10)\n",
        "idx_generation": 382,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], m=5, n=10) -> bool:\n    \"\"\"Check if the list contains at least m odd numbers and at most n even numbers\"\"\"\n    odd_count = sum([1 for num in x if num % 2 != 0])\n    even_count = sum([1 for num in x if num % 2 == 0])\n    return odd_count >= m and even_count <= n\n\ndef g(m=5, n=10):\n    x = [2*i + 1 for i in range(n)]  # Generate a list of n odd numbers\n    return x\n\nassert f(g())\n",
        "idx_generation": 322,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring=\"python\") -> bool:\n    \"\"\"\n    Check if the given substring is present in the given string.\n    Return True if the substring is present, False otherwise.\n    \"\"\"\n    return substring in string\n\ndef g(substring=\"python\"):\n    string = \"I love programming in python.\"\n    return string\n\nassert f(g())\n",
        "idx_generation": 274,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=2, y=3) -> bool:\n    \"\"\"Check if n is the hypotenuse of a right triangle with sides x and y\"\"\"\n    return math.sqrt(x**2 + y**2) == n\ndef g(x = 2, y = 3):\n    return math.hypot(x, y)\nassert f(g())\n",
        "idx_generation": 264,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\nimport itertools\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there is a combination of numbers in nums that sums up to the target\"\"\"\n    return any(sum(combination) == target for r in range(len(nums)+1) for combination in itertools.combinations(nums, r))\n\ndef g(target=100):\n    nums = random.sample(range(1, target+1), target)\n    return nums\n\nassert f(g())\n",
        "idx_generation": 262,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, count=2, letter='a') -> bool:\n    \"\"\"Check if a specific letter appears a certain number of times in a string\"\"\"\n    return s.count(letter) == count\ndef g(count=2, letter='a'):\n    return 'a' * count\nassert f(g())\n",
        "idx_generation": 62,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to n.\"\"\"\n    return any((n - num) in lst for num in lst)\ndef g(lst = [1, 2, 3, 4, 5, 6]):\n    return lst\nassert f(10, g())\n",
        "idx_generation": 386,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"\n    Determine if two strings are anagrams of each other.\n    \"\"\"\n    return sorted(s) == sorted(t)\ndef g(s='anagram', t='nagaram'):\n    return s, t\nassert f(g()[0], g()[1])\n",
        "idx_generation": 197,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, pattern: str) -> bool:\n    \"\"\"\n    Given a word and a pattern, determine if the word follows the same pattern.\n    The pattern consists of a string of unique lowercase letters, and the word is a string of words separated by a space.\n    Return True if the word follows the pattern, and False otherwise.\n    \"\"\"\n    word_list = word.split()\n    if len(word_list) != len(pattern):\n        return False\n    pattern_map = {}\n    word_map = {}\n    for p, w in zip(pattern, word_list):\n        if p not in pattern_map and w not in word_map:\n            pattern_map[p] = w\n            word_map[w] = p\n        elif pattern_map.get(p) != w or word_map.get(w) != p:\n            return False\n    return True\n\ndef g(word = \"dog cat cat dog\", pattern = \"abba\"):\n    return word, pattern\n\nassert f(*g())\n",
        "idx_generation": 230,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Determine if it is possible to find a subarray of the given list whose sum is equal to the target value.\"\"\"\n    return any(sum(nums[i:j]) == target for i in range(len(nums)) for j in range(i+1, len(nums)+1))\ndef g():\n    import random\n    nums = [random.randint(1, 9) for _ in range(10)]\n    return nums\nassert f(g())\n",
        "idx_generation": 323,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, s='Python', t='python') -> bool:\n    \"\"\"Ignoring case, compare s, t lexicographically. Output 0 if they are =, -1 if s < t, 1 if s > t.\"\"\"\n    if n == 0:\n        return s.lower() == t.lower()\n    if n == 1:\n        return s.lower() > t.lower()\n    if n == -1:\n        return s.lower() < t.lower()\n    return False\ndef g(s = 'Python', t = 'python'):\n    if s.lower() == t.lower():\n        return 0\n    if s.lower() > t.lower():\n        return 1\n    return -1\nassert f(g())\n",
        "idx_generation": 275,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m: int, target=12) -> bool:\n    \"\"\"\n    Given two integers `n` and `m`, determine if their product is equal to the target value.\n    \"\"\"\n    return n * m == target\ndef g(target=12):\n    return 3, 4\nassert f(*g())\n",
        "idx_generation": 267,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(arr: List[int], target=25, count=5) -> bool:\n    \"\"\"Find if there are 'count' numbers in the array that sum up to 'target'\"\"\"\n    from itertools import combinations\n    for c in combinations(arr, count):\n        if sum(c) == target:\n            return True\n    return False\ndef g(target=25, count=5):\n    return list(range(1, target+1))\nassert f(g())\n",
        "idx_generation": 283,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_length=6) -> bool:\n    \"\"\"\n    Given a string and a target length, find a substring of the string that has the same length as the target length.\n    \"\"\"\n    for i in range(len(s) - target_length + 1):\n        substring = s[i:i+target_length]\n        if len(substring) == target_length:\n            return True\n    return False\ndef g(target_length=6):\n    s = \"Hello, world!\"\n    return s\nassert f(g())\n",
        "idx_generation": 67,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a list that sum up to a target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                return True\n    return False\ndef g(arr=[2, 5, 3, 8, 6]):\n    return arr\nassert f(g())\n",
        "idx_generation": 386,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray, target: int) -> bool:\n    \"\"\"\n    Given a 2D numpy array, check if the target number is present in the array.\n    \"\"\"\n    return np.isin(target, arr)\n    \ndef g(arr: np.ndarray, target: int):\n    return arr\n\n# example usage\narr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ntarget = 5\nassert f(g(arr, target), target)\n",
        "idx_generation": 207,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(words: List[str], target=\"python\") -> bool:\n    \"\"\"Find a word in the list that is an anagram of the target word.\"\"\"\n    from itertools import permutations\n    for p in permutations(target):\n        if ''.join(p) in words:\n            return True\n    return False\ndef g(words = [\"typhon\", \"hot\", \"python\", \"not\", \"ton\", \"pot\"]):\n    return words\nassert f(g())\n",
        "idx_generation": 234,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31]) -> bool:\n    \"\"\"Check if a number is a prime number\"\"\"\n    if n < 2:\n        return False\n    for prime in primes:\n        if n % prime == 0:\n            return False\n    return True\ndef g():\n    num = 37\n    return num\nassert f(g())\n",
        "idx_generation": 323,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target: str = 'apple') -> bool:\n    \"\"\"Check if the given string contains the target string.\"\"\"\n    return target in s\ndef g(target: str = 'apple'):\n    return 'I love eating ' + target\nassert f(g())\n",
        "idx_generation": 277,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: int, y: int, z: int) -> bool:\n    \"\"\"Check if x is a perfect square and y is a perfect cube and z is a perfect 4th power\"\"\"\n    return math.isqrt(x) ** 2 == x and round(y ** (1/3)) ** 3 == y and round(z ** (1/4)) ** 4 == z\n\ndef g():\n    x = 16\n    y = 27\n    z = 256\n    return x, y, z\n\nassert f(*g())\n",
        "idx_generation": 268,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find three numbers from the list that add up to the target\"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, 3):\n        if sum(combo) == target:\n            return True\n    return False\ndef g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\nassert f(g())\n",
        "idx_generation": 291,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(strings: List[str], substring='') -> bool:\n    \"\"\"Return True if any of the strings in the list contains the given substring.\"\"\"\n    return any((substring in s for s in strings))\ndef g(strings=['apple', 'banana', 'cherry'], substring=''):\n    return strings\nassert f(g())\n",
        "idx_generation": 73,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(seq: List[int], target_length=4) -> bool:\n    \"\"\"Check if there exists a subsequence of 'seq' with length 'target_length' that is strictly increasing\"\"\"\n    for i in range(len(seq) - target_length + 1):\n        if seq[i:i+target_length] == sorted(seq[i:i+target_length]):\n            return True\n    return False\n\ndef g(target_length=4):\n    seq = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return seq[:target_length]\n\nassert f(g())\n",
        "idx_generation": 388,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, s=\"loornt\", t=\"ornlot\") -> bool:\n    \"\"\"Determine whether s and t are anagrams of each other.\"\"\"\n    return sorted(list(s.lower())) == sorted(list(t.lower()))\ndef g(s=\"loornt\", t=\"ornlot\"):\n    return sorted(list(s.lower()))\nassert f(g()) == True",
        "idx_generation": 211,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target='python', upper=50) -> bool:\n    \"\"\"\n    Given an integer n, find a string of length n such that it contains the characters of the target string\n    in the same order, with minimal sum of absolute values of the differences between the indices of consecutive\n    characters in the target string.\n\n    For example, if the target string is 'python' and n = 12, a valid string would be 'ppythonnnnnn' with a total\n    of 8.\n    \"\"\"\n    s = 'abcdefghijklmnopqrstuvwxyz'\n    indices = [s.index(c) for c in target]\n    total_diff = sum(abs(indices[i] - indices[i-1]) for i in range(1, len(indices)))\n    return total_diff <= upper\ndef g(target='python', upper=50):\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    ans = []\n    for c in target:\n        i = s.index(c)\n        ans.append(i)\n    return ''.join([target[i] * (ans[i+1] - ans[i]) for i in range(len(ans)-1)]) + target[-1] * (upper - len(target) + 1)\nassert f(g())\n",
        "idx_generation": 235,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import gcd\n\ndef f(a: int, b: int, c: int) -> bool:\n    \"\"\"Check if a, b, and c are pairwise coprime\"\"\"\n    return gcd(a, b) == gcd(b, c) == gcd(a, c) == 1\ndef g():\n    a = 15\n    b = 28\n    c = 41\n    return a, b, c\nassert f(*g())\n",
        "idx_generation": 323,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"Find if two strings are isomorphic.\"\"\"\n    if len(s) != len(t):\n        return False\n    mapping_s = {}\n    mapping_t = {}\n    for i in range(len(s)):\n        char_s = s[i]\n        char_t = t[i]\n        if char_s in mapping_s:\n            if mapping_s[char_s] != char_t:\n                return False\n        else:\n            mapping_s[char_s] = char_t\n        if char_t in mapping_t:\n            if mapping_t[char_t] != char_s:\n                return False\n        else:\n            mapping_t[char_t] = char_s\n    return True\ndef g(s = \"egg\", t = \"add\"):\n    return s, t\nassert f(*g())\n",
        "idx_generation": 278,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\ndef f(n: int, m=4) -> bool:\n    \"\"\"Determine if n is a power of m\"\"\"\n    return n > 0 and m > 1 and m ** (int(math.log(n, m))) == n\ndef g(m = 4):\n    return m ** 3\nassert f(g())\n",
        "idx_generation": 269,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, char='a') -> bool:\n    \"\"\"Check if the given character is the most frequent character in the word\"\"\"\n    count = {}\n    for c in word:\n        count[c] = count.get(c, 0) + 1\n    max_count = max(count.values())\n    most_frequent_chars = [c for c, freq in count.items() if freq == max_count]\n    return char in most_frequent_chars\ndef g(char = 'a'):\n    return 'banana'\nassert f(g())\n",
        "idx_generation": 301,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], char='e', count=3) -> bool:\n    \"\"\"Find a list of 'count' words from words that contain the character 'char'.\"\"\"\n    return len([w for w in words if char in w]) >= count\ndef g(char='e', count=3):\n    words = ['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape']\n    return words\nassert f(g())\n",
        "idx_generation": 80,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(a: list, b: list, n=10) -> bool:\n    \"\"\"Check if the sum of the first n elements in list a is greater than the sum of the first n elements in list b\"\"\"\n    return sum(a[:n]) > sum(b[:n])\n\ndef g(n=10):\n    a = random.sample(range(100), n)\n    b = random.sample(range(100), n)\n    return a, b\n\nassert f(*g())\n",
        "idx_generation": 389,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, t='aeiou') -> bool:\n    \"\"\"Check if all vowels in s are present in t\"\"\"\n    return all(c in t for c in s if c.lower() in 'aeiou')\ndef g(t='aeiou'):\n    return ''.join(sorted(t, reverse=True))\nassert f(g())\n",
        "idx_generation": 215,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='abc', count=2) -> bool:\n    \"\"\"\n    Given a string, check if there are count number of occurrences of the substring in the string.\n    \"\"\"\n    return s.count(substring) == count\ndef g(substring='abc', count=2):\n    s = substring * count\n    return s\nassert f(g())\n",
        "idx_generation": 243,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a string has n consecutive vowels\"\"\"\n    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n            if count == n:\n                return True\n        else:\n            count = 0\n    return False\n\ndef g(n = 3):\n    return \"aeiou\" * n\n\nassert f(g())\n",
        "idx_generation": 324,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, sub='Python') -> bool:\n    \"\"\"Check if the given string contains the substring 'Python'.\"\"\"\n    return sub in s\n\ndef g(sub='Python'):\n    return f\"This is a string that contains {sub}.\"\n\nassert f(g())\n",
        "idx_generation": 280,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], n=5) -> bool:\n    \"\"\"Check if the sum of the first n elements of li is equal to the sum of the last n elements\"\"\"\n    return sum(li[:n]) == sum(li[-n:])\ndef g(n = 5):\n    return [1] * (2*n)\nassert f(g())\n",
        "idx_generation": 269,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\n\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers that sum up to a target value.\"\"\"\n    for r in range(1, len(numbers) + 1):\n        for combination in itertools.combinations(numbers, r):\n            if sum(combination) == target:\n                return True\n    return False\n\ndef g(numbers=[10, 20, 30, 40, 50]):\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 316,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(string: str, target='Hello World!', max_changes=3) -> bool:\n    \"\"\"Find a string with at most max_changes changes that matches the target value.\"\"\"\n    assert len(string) == len(target)\n    return sum(a != b for a, b in zip(string, target)) <= max_changes\ndef g(target = 'Hello World!', max_changes = 3):\n    import random\n    string = 'Hello World!'\n    for i in range(max_changes):\n        index = random.randint(0, len(string) - 1)\n        string = string[:index] + random.choice('abcdefghijklmnopqrstuvwxyz') + string[index+1:]\n    return string\nassert f(g())\n",
        "idx_generation": 88,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if a list of numbers nums contains a pair of numbers whose sum is even.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if (nums[i] + nums[j]) % 2 == 0:\n                return True\n    return False\n\ndef g():\n    return [1, 3, 5, 7, 2]\n\nassert f(g())\n",
        "idx_generation": 391,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"\n    Check if a given number is a Palindrome number in base m.\n\n    Example:\n    n = 12321\n    m = 10\n\n    The number 12321 is a Palindrome number in base 10.\n\n    Therefore, f(n, m) returns True.\n    \"\"\"\n    assert n >= 0, 'The number cannot be negative'\n    digits = []\n    while n > 0:\n        digits.append(n % m)\n        n //= m\n    return digits == digits[::-1]\ndef g(n = 12321, m = 10):\n    return n\nassert f(g())\n",
        "idx_generation": 217,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(substrings: List[str], s='hellothisisapuzzle', count=2) -> bool:\n    \"\"\"Find a list of >= count distinct strings that are all contained in s\"\"\"\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings))\ndef g(s='hellothisisapuzzle', count=2):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})\nassert f(g())\n",
        "idx_generation": 279,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=5, c=7) -> bool:\n    \"\"\"Check if n is a multiple of a, b, or c\"\"\"\n    return n % a == 0 or n % b == 0 or n % c == 0\ndef g(a = 3, b = 5, c = 7):\n    return a * b * c\nassert f(g())\n",
        "idx_generation": 327,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(s: str, substr: str) -> bool:\n    \"\"\"Check if a given substring is present in the string\"\"\"\n    return substr in s\n\ndef g(s_length=10, substr_length=3):\n    \"\"\"\n    Generate a random string of specified length and return a random substring from it.\n    \"\"\"\n    import random\n    import string\n\n    s = ''.join(random.choices(string.ascii_lowercase, k=s_length))\n    substr_start = random.randint(0, s_length - substr_length)\n    substr = s[substr_start: substr_start + substr_length]\n    return s, substr\n\nassert f(*g())\n",
        "idx_generation": 280,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(radius: float, volume=904.78) -> bool:\n    \"\"\"Check if the volume of a sphere matches the given value.\"\"\"\n    return abs(4 / 3 * 3.14159 * radius ** 3 - volume) < 0.01\ndef g(volume = 904.78):\n    radius = (volume * 3 / (4 * 3.14159)) ** (1 / 3)\n    return radius\nassert f(g())\n",
        "idx_generation": 270,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int = 10, num_count: int = 3) -> bool:\n    \"\"\"Check if a list of numbers contains a specific target number a certain number of times.\"\"\"\n    return nums.count(target) == num_count\ndef g(target: int = 10, num_count: int = 3):\n    return [10, 20, 10, 30, 40, 10, 50]\nassert f(g())\n",
        "idx_generation": 324,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, x=5, y=2) -> bool:\n    \"\"\"Check if a substring is repeated a certain number of times in a string\"\"\"\n    return s.count(s[:x]) == y\n\ndef g(x=5, y=2):\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    return s * y\n\nassert f(g())\n",
        "idx_generation": 91,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int]) -> bool:\n    \"\"\"Check if the list is a palindrome.\"\"\"\n    return x == x[::-1]\ndef g():\n    return [1, 2, 3, 2, 1]\nassert f(g())\n",
        "idx_generation": 391,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(s: str, n=50) -> bool:\n    \"\"\"\n    Check if the string has at least n characters and if every character is either a letter or a digit.\n    \"\"\"\n    return len(s) >= n and all(c.isalnum() for c in s)\n\ndef g(n=50):\n    import string\n    from random import choice\n\n    s = ''.join(choice(string.ascii_letters + string.digits) for _ in range(n))\n    return s\n\nassert f(g())\n",
        "idx_generation": 229,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, k=3) -> bool:\n    \"\"\"Find if there exists a combination of k numbers in the list that add up to the target.\"\"\"\n    from itertools import combinations\n    for combination in combinations(nums, k):\n        if sum(combination) == target:\n            return True\n    return False\n\ndef g(nums=[10, 20, 30, 40, 50, 60, 70, 80, 90], target=100, k=3):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 300,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[3, 6, 9, 12, 15]) -> bool:\n    \"\"\"Check if n is a multiple of any of the numbers in the list.\"\"\"\n    return any(n % num == 0 for num in nums)\ndef g(nums=[3, 6, 9, 12, 15]):\n    n = 1\n    while True:\n        if f(n, nums):\n            return n\n        n += 1\nassert f(g())\n",
        "idx_generation": 328,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='pre', suffix='fix') -> bool:\n    \"\"\"Check if any word in the list has the given prefix and suffix\"\"\"\n    for word in words:\n        if word.startswith(prefix) and word.endswith(suffix):\n            return True\n    return False\ndef g(words=['prefix', 'suffix', 'word', 'example', 'premature'], prefix='pre', suffix='fix'):\n    return words\nassert f(g())\n",
        "idx_generation": 283,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(num: int, tolerance=0.001) -> bool:\n    \"\"\"\n    Check if a number is a perfect square within a given tolerance.\n\n    Example:\n    num = 10\n    tolerance = 0.1\n    output: False\n    \"\"\"\n    return abs(num - round(math.sqrt(num))**2) < tolerance\n\ndef g(tolerance=0.001):\n    return tolerance**2\n\nassert f(g())\n",
        "idx_generation": 271,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Determine if there exist four elements in the list such that their sum equals to the target value\"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, 4):\n        if sum(combo) == target:\n            return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 330,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a=1234, b=5678, c=91011) -> bool:\n    \"\"\"Find a string with a specified number of a's, b's, and c's\"\"\"\n    return s.count('a') == a and s.count('b') == b and s.count('c') == c and (len(s) == a + b + c)\ndef g(a = 1234, b = 5678, c = 91011):\n    return \"a\" * a + \"b\" * b + \"c\" * c\nassert f(g())\n",
        "idx_generation": 96,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=15) -> bool:\n    \"\"\"\n    Check if there exists a sublist in lst that sums up to the target value.\n    Return True if such sublist exists, otherwise return False.\n    \"\"\"\n    n = len(lst)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if sum(lst[i:j]) == target:\n                return True\n    return False\ndef g(target=15):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 391,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, t='abc') -> bool:\n    \"\"\"\n    Given two strings s and t, determine if s is a subsequence of t.\n    \"\"\"\n    i, j = 0, 0\n    while i < len(s) and j < len(t):\n        if s[i] == t[j]:\n            i += 1\n        j += 1\n    return i == len(s)\ndef g(s='abc', t='abcdef'):\n    return s\nassert f(g())\n",
        "idx_generation": 235,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k: int) -> bool:\n    \"\"\"Given a string s and an integer k, determine whether we can rearrange the characters of s such that the same characters are at least k distance apart.\"\"\"\n    from collections import Counter\n    if k <= 1:\n        return True\n    counts = sorted(Counter(s).values(), reverse=True)\n    max_freq = counts[0]\n    max_count = counts.count(max_freq)\n    return (len(s) - max_freq * max_count) >= (max_freq - 1) * (k - max_count)\ndef g(s: str = \"aabbcc\", k: int = 3):\n    return s, k\nassert f(*g())\n",
        "idx_generation": 303,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10], target=50) -> bool:\n    \"\"\"Check if the product of n and any number in the list nums is equal to the target value.\"\"\"\n    return any(n * num == target for num in nums)\ndef g(nums=[2, 4, 6, 8, 10], target=50):\n    n = 1\n    while True:\n        if f(n, nums, target):\n            return n\n        n += 1\nassert f(g())\n",
        "idx_generation": 328,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"Check if any word in the list contains the target string\"\"\"\n    for word in words:\n        if target in word:\n            return True\n    return False\ndef g(words = ['puzzle', 'python', 'programming']):\n    return words\nassert f(g())\n",
        "idx_generation": 284,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10], lower_bound=1) -> bool:\n    \"\"\"Check if n is a prime number greater than the lower bound.\"\"\"\n    if n <= lower_bound:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g(nums=[2, 4, 6, 8, 10], lower_bound=1):\n    n = max(nums) + 1\n    while True:\n        if f(n, nums, lower_bound):\n            return n\n        n += 1\n\nassert f(g())\n",
        "idx_generation": 272,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Find if there are three numbers in the list that sum up to the target value.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(lst, 3))\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    from itertools import combinations\n    return next(comb for comb in combinations(lst, 3) if sum(comb) == 10)\nassert f(g())\n",
        "idx_generation": 334,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, vowels='aeiou') -> bool:\n    \"\"\"\n    Check if a given string contains all the vowels in a given order.\n    \"\"\"\n    return vowels in s\n\ndef g(vowels='aeiou'):\n    return ''.join(vowels)\nassert f(g())\n",
        "idx_generation": 97,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], a=0, b=10, c=20) -> bool:\n    \"\"\"Check if all elements in the list are within a certain range.\"\"\"\n    return all([a <= num <= c for num in x])\ndef g(a=0, b=10, c=20):\n    return list(range(a, b + 1)) + list(range(b, c + 1))\nassert f(g())\n",
        "idx_generation": 394,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='abc') -> bool:\n    \"\"\"Check if s contains all characters in target\"\"\"\n    return all(char in s for char in target)\ndef g(target = 'abc'):\n    return ''.join([char * 2 for char in target])\nassert f(g())\n",
        "idx_generation": 236,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, substring='abc', count=10) -> bool:\n    \"\"\"Check if a string contains a certain number of copies of a given substring\"\"\"\n    return x.count(substring) == count\n\ndef g(substring='abc', count=10):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count\n\nassert f(g())\n",
        "idx_generation": 305,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[5, 10, 15, 20, 25], target=200) -> bool:\n    \"\"\"Check if the sum of n and any number in the list nums is equal to the target value.\"\"\"\n    return any(n + num == target for num in nums)\ndef g(nums=[5, 10, 15, 20, 25], target=200):\n    n = 1\n    while True:\n        if f(n, nums, target):\n            return n\n        n += 1\nassert f(g())\n",
        "idx_generation": 328,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='Hello, World!') -> bool:\n    \"\"\"Check if a given string is a palindrome\"\"\"\n    return s == target[::-1]\ndef g(target = 'Hello, World!'):\n    return target[::-1]\nassert f(g())\n",
        "idx_generation": 284,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(radius: float, volume=523.6) -> bool:\n    \"\"\"Check if the volume of a sphere with given radius is approximately equal to the provided value.\"\"\"\n    return abs((4/3) * math.pi * radius**3 - volume) < 0.01\ndef g(volume=523.6):\n    return (3 * volume / (4 * math.pi))**(1/3)\nassert f(g())\n",
        "idx_generation": 275,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(inds: List[int], s='abcdefg', target='c') -> bool:\n    \"\"\"Find the three slice indices that give the specific target in string s\"\"\"\n    (i, j, k) = inds\n    return s[i:j:k] == target\ndef g(s = 'abcdefg', target = 'c'):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\nassert f(g())\n",
        "idx_generation": 337,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a=3, b=4) -> bool:\n    \"\"\"Check if a string contains a certain number of 'a' and 'b' characters\"\"\"\n    return s.count('a') == a and s.count('b') == b\ndef g(a=3, b=4):\n    return \"a\" * a + \"b\" * b\nassert f(g())\n",
        "idx_generation": 106,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[2, 4, 6, 8, 10]) -> bool:\n    \"\"\"Check if n is in the list\"\"\"\n    return n in lst\ndef g(lst=[2, 4, 6, 8, 10]):\n    return lst[0]\nassert f(g())\n",
        "idx_generation": 398,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(strings: List[str], target_string=\"hello\") -> bool:\n    \"\"\"Check if all the strings in the list are anagrams of the target string\"\"\"\n    sorted_target = sorted(target_string)\n    for string in strings:\n        if sorted(string.lower()) != sorted_target:\n            return False\n    return True\n\ndef g(target_string=\"hello\"):\n    strings = [\"HELLO\", \"oellh\", \"llohe\", \"lehol\"]\n    return strings\n\nassert f(g())\n",
        "idx_generation": 238,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3, m=5) -> bool:\n    \"\"\"Check if there are n consecutive occurrences of a substring s in a larger string\"\"\"\n    return s*n in s*m\ndef g(s=\"abcde\", n=3, m=5):\n    return s\nassert f(g())\n",
        "idx_generation": 320,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the matrix is symmetric\"\"\"\n    return all((matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(i+1, len(matrix))))\ndef g():\n    matrix = [[1, 2, 3],\n              [2, 4, 5],\n              [3, 5, 6]]\n    return matrix\nassert f(g())\n",
        "idx_generation": 329,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, target='') -> bool:\n    \"\"\"Check if the target string is a substring of the given string.\"\"\"\n    return target in string\ndef g(string='hello world', target='world'):\n    return string\nassert f(g())\n",
        "idx_generation": 292,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes: List[int] = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]) -> bool:\n    \"\"\"Check if the given number is prime.\"\"\"\n    return n in primes\ndef g(n: int = 23):\n    return n\nassert f(g())\n",
        "idx_generation": 277,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import combinations\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a subset of the list whose sum is equal to the target.\n    \"\"\"\n    for r in range(1, len(nums) + 1):\n        for subset in combinations(nums, r):\n            if sum(subset) == target:\n                return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=20):\n    return nums, target\nassert f(*g())\n",
        "idx_generation": 348,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, sub='Python') -> bool:\n    \"\"\"\n    Check if a given substring is present in the string.\n    \"\"\"\n    return sub in string\n\ndef g(sub='Python'):\n    string = \"I love Python programming\"\n    return string\n\nassert f(g())\n",
        "idx_generation": 108,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"\n    Find the sum of the smallest and largest elements in a list.\n\n    Given a list of integers, find the sum of the smallest and largest elements in the list.\n    Return True if the sum is equal to n, False otherwise.\n\n    Example:\n    n = 10\n    lst = [1, 2, 3, 4, 5]\n    output: True\n    \"\"\"\n    assert len(lst) > 0\n    assert isinstance(n, int) and isinstance(lst, list) and all(isinstance(x, int) for x in lst)\n    return sum([min(lst), max(lst)]) == n\n\ndef g(lst: List[int]):\n    return sum([min(lst), max(lst)])\n\nassert f(g([1, 2, 3, 4, 5]), [1, 2, 3, 4, 5])\n",
        "idx_generation": 398,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=3, x=7) -> bool:\n    \"\"\"\n    Given a sorted list of integers, find if there exists a subarray with length at least k\n    whose absolute difference between the maximum and minimum element is less than or equal to x.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    k = 3\n    x = 7\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(arr)-k+1):\n        subarray = arr[i:i+k]\n        if max(subarray) - min(subarray) <= x:\n            return True\n    return False\n\ndef g(k=3, x=7):\n    return [i+1 for i in range(k+2)]\n\nassert f(g())\n",
        "idx_generation": 244,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if a given string contains all the vowels in a specific order\"\"\"\n    vowel_index = 0\n    for char in s:\n        if char == vowels[vowel_index]:\n            vowel_index += 1\n            if vowel_index == len(vowels):\n                return True\n    return False\n\ndef g(vowels=['a', 'e', 'i', 'o', 'u']):\n    return ''.join(vowels)\n\nassert f(g())\n",
        "idx_generation": 330,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find three elements from the list such that their sum equals the target value\"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, 3):\n        if sum(combo) == target:\n            return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 330,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport re\n\ndef f(s: str, pattern=r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$') -> bool:\n    \"\"\"\n    Check if the given string is a valid email address.\n    \"\"\"\n    return re.match(pattern, s) is not None\n\ndef g(pattern=r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$'):\n    return \"test@example.com\"\n\nassert f(g())\n",
        "idx_generation": 292,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target=48) -> bool:\n    \"\"\"Check if n is a multiple of the target number\"\"\"\n    return n % target == 0\ndef g(target=48):\n    return target * 2\nassert f(g())\n",
        "idx_generation": 278,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lb: List[bool], trips=[[1, 1, 0], [1, 0, 0], [0, 0, 0], [0, 1, 1], [0, 1, 1], [1, 1, 1], [1, 0, 1]]) -> bool:\n    \"\"\"\n    Given a list of lists of triples of integers, return True for each list with a total of 1 or 3 and\n    False for each other list.\n    \"\"\"\n    return len(lb) == len(trips) and all((b is True if sum(s) == 1 or sum(s) == 3 else b is False for (b, s) in zip(lb, trips)))\ndef g(trips = [[1, 1, 0], [1, 0, 0], [0, 0, 0], [0, 1, 1], [0, 1, 1], [1, 1, 1], [1, 0, 1]]):\n    return [sum(s) == 1 or sum(s) == 3 for s in trips]\nassert f(g())\n",
        "idx_generation": 394,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3, m=2) -> bool:\n    \"\"\"Check if there exists a substring of length n that occurs at least m times in the given string.\"\"\"\n    count = {}\n    for i in range(len(s) - n + 1):\n        substring = s[i:i+n]\n        if substring in count:\n            count[substring] += 1\n        else:\n            count[substring] = 1\n    return any(count[substring] >= m for substring in count)\ndef g(n=3, m=2):\n    s = \"ababaababa\"\n    return s\nassert f(g())\n",
        "idx_generation": 115,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, y: int) -> bool:\n    \"\"\"Check if x is a multiple of y\"\"\"\n    return x % y == 0\n\ndef g():\n    x = 15\n    y = 3\n    return x, y\n\nassert f(*g())\n",
        "idx_generation": 106,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(s: str, target='abc') -> bool:\n    \"\"\"\n    Determine if a given string is a permutation of a target string.\n\n    Sample Input:\n    `\"bac\"`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    return sorted(s) == sorted(target)\n\ndef g(target='abc'):\n    return ''.join(random.sample(target, len(target)))\n\nassert f(g())\n",
        "idx_generation": 250,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target number is present in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(matrix = []):\n    from random import randint\n    matrix = [[randint(1, 10) for _ in range(5)] for _ in range(5)]\n    target = randint(1, 10)\n    return matrix, target\nassert f(*g())\n",
        "idx_generation": 334,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13]) -> bool:\n    \"\"\"Check if n is divisible by all the primes in the list.\"\"\"\n    return all(n % p == 0 for p in primes)\ndef g(primes=[2, 3, 5, 7, 11, 13]):\n    from random import randint\n    n = primes[0]\n    while any(n % p != 0 for p in primes):\n        n += randint(1, 100)\n    return n\nassert f(g())\n",
        "idx_generation": 332,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"\n    Given a string and a target word, determine if the target word is a substring of the string.\n\n    Sample input:\n    s = \"I love python programming\"\n    target = \"python\"\n\n    Sample output:\n    True\n\n    Explanation:\n    The target word \"python\" is a substring of the given string.\n    \"\"\"\n    if target in s:\n        return True\n    return False\n\ndef g(s = \"I love python programming\", target = \"python\"):\n    return s\nassert f(g())\n",
        "idx_generation": 293,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(d: datetime.date, year=2023, month=1, day=1) -> bool:\n    \"\"\"Check if the given date is the start of a new year.\"\"\"\n    return d.year == year and d.month == month and d.day == day\n\ndef g(year=2023, month=1, day=1):\n    return datetime.date(year, month, day)\n\nassert f(g())\n",
        "idx_generation": 280,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if a string contains a specific substring\"\"\"\n    return s.count(\"hello\") >= n\ndef g(n = 5):\n    return \"hello \" * n + \"world\"\nassert f(g())\n",
        "idx_generation": 124,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst1: List[int], lst2: List[int]) -> bool:\n    \"\"\"Find the common elements between lst1 and lst2\"\"\"\n    return any(x for x in lst1 if x in lst2)\ndef g():\n    return [1, 2, 3, 4, 5], [4, 5, 6, 7, 8]\nassert f(*g())\n",
        "idx_generation": 108,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(s: str, target='hello') -> bool:\n    \"\"\"Check if a string can be transformed into a target string by rearranging its characters.\"\"\"\n    return sorted(s) == sorted(target)\ndef g(target = 'hello'):\n    import random\n    return ''.join(random.sample(target, len(target)))\nassert f(g())\n",
        "idx_generation": 257,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(t: str, s='aabbcc') -> bool:\n    \"\"\"Add parentheses to the beginning and end of s to make all parentheses balanced\"\"\"\n    for i in range(len(t) + 1):\n        depth = t[:i].count('a') - t[:i].count('b')\n        assert depth >= 0\n    return depth == 0 and s in t\ndef g(s = 'aabbcc'):\n    return \"a\" * s.count(\"b\") + s + \"b\" * s.count(\"a\")\nassert f(g())\n",
        "idx_generation": 337,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6]) -> bool:\n    \"\"\"Find n such that n is the maximum value in a random permutation of the given list\"\"\"\n    return n == max(random.sample(lst, len(lst)))\ndef g(lst=[1, 2, 3, 4, 5, 6]):\n    return max(random.sample(lst, len(lst)))\nassert f(g())\n",
        "idx_generation": 333,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='Python') -> bool:\n    \"\"\"\n    Check if the target string is a substring of the given string.\n    \"\"\"\n    return target in s\ndef g(target='Python'):\n    return target\nassert f(g())\n",
        "idx_generation": 295,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=100, b=200) -> bool:\n    \"\"\"Check if a number n is a perfect square between a and b (inclusive).\"\"\"\n    return a <= n <= b and math.isqrt(n) ** 2 == n\n\ndef g(a=100, b=200):\n    for i in range(math.isqrt(a), math.isqrt(b) + 1):\n        if i ** 2 >= a:\n            return i ** 2\n\nassert f(g())\n",
        "idx_generation": 280,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, pattern=\"\") -> bool:\n    \"\"\"Check if the given string matches the pattern.\"\"\"\n    if len(s) != len(pattern):\n        return False\n    pattern_dict = {}\n    for i in range(len(s)):\n        if s[i] not in pattern_dict:\n            pattern_dict[s[i]] = pattern[i]\n        elif pattern_dict[s[i]] != pattern[i]:\n            return False\n    return True\ndef g(pattern=\"\"):\n    s = pattern.replace(\"a\", \"A\").replace(\"b\", \"B\").replace(\"c\", \"C\")\n    return s\nassert f(g())\n",
        "idx_generation": 130,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the list contains all even numbers.\"\"\"\n    return all(num % 2 == 0 for num in arr)\ndef g():\n    return [2, 4, 6, 8, 10]\nassert f(g())\n",
        "idx_generation": 111,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a='hello', b='world') -> bool:\n    \"\"\"Check if two strings are anagrams of each other\"\"\"\n    return sorted(s) == sorted(a + b)\ndef g(a='hello', b='world'):\n    return a[::-1] + b[::-1]\nassert f(g())\n",
        "idx_generation": 262,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target: str) -> bool:\n    \"\"\"\n    Find if the target string can be formed by rearranging the characters of the given string.\n    \"\"\"\n    return sorted(s) == sorted(target)\n\ndef g():\n    return [\"python\", \"typhon\"]\n\nassert f(*g())\n",
        "idx_generation": 339,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6]) -> bool:\n    \"\"\"Find n such that n is the sum of the first half of the elements in the list\"\"\"\n    return n == sum(lst[:len(lst)//2])\ndef g(lst=[1, 2, 3, 4, 5, 6]):\n    return sum(lst[:len(lst)//2])\nassert f(g())\n",
        "idx_generation": 333,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"\n    Check if a given string has a length greater than a specified number.\n\n    Sample input:\n    \"Hello, world!\"\n\n    Sample output:\n    True\n\n    The string \"Hello, world!\" has a length of 13, which is greater than the specified number 5.\n    \"\"\"\n    return len(s) > n\n\ndef g(s: str):\n    return s\n\ns = \"Hello, world!\"\n\nassert f(g(s))\n",
        "idx_generation": 298,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import factorial\n\ndef f(n: int, target: int = 120) -> bool:\n    \"\"\"Check if the factorial of n is equal to the target value\"\"\"\n    return factorial(n) == target\n\ndef g(target: int = 120):\n    n = 5\n    return n\n\nassert f(g())\n",
        "idx_generation": 286,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, ops=['x++', '--x', '--x'], target=100) -> bool:\n    \"\"\"\n    Given a sequence of operations \"++x\", \"x++\", \"--x\", \"x--\", and a target value, find initial value so that the\n    final value is the target value.\n\n    Sample Input:\n    ops = [\"x++\", \"--x\", \"--x\"]\n    target = 12\n\n    Sample Output:\n    13\n    \"\"\"\n    for op in ops:\n        if op in ['++x', 'x++']:\n            n += 1\n        else:\n            assert op in ['--x', 'x--']\n            n -= 1\n    return n == target\ndef g(ops=['x++', '--x', '--x'], target=100):\n    return target - ops.count(\"++x\") - ops.count(\"x++\") + ops.count(\"--x\") + ops.count(\"x--\")\nassert f(g())\n",
        "idx_generation": 137,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=8) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 112,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[str], a=\"apple\", b=\"banana\", c=\"cherry\") -> bool:\n    \"\"\"Check if the list contains all three specified fruits\"\"\"\n    return a in x and b in x and c in x\n\ndef g(a=\"apple\", b=\"banana\", c=\"cherry\"):\n    return [a, b, c]\n\nassert f(g())\n",
        "idx_generation": 265,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, t: str, k: int) -> bool:\n    \"\"\"Check if it is possible to convert string s to string t in exactly k steps, \n    where in each step, you can either add a character at any position or delete a character from any position.\"\"\"\n    if len(t) > len(s) + k:\n        return False\n    if len(t) < len(s) - k:\n        return False\n    diff = len(t) - len(s)\n    if diff == 0:\n        return s == t\n    if diff > k:\n        return False\n    if k % 2 == diff % 2:\n        return True\n    return False\ndef g(s = \"abc\", t = \"abcdef\", k = 3):\n    return (s, t, k)\nassert f(*g())\n",
        "idx_generation": 343,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=15) -> bool:\n    \"\"\"Check if n is a multiple of m\"\"\"\n    return n % m == 0\ndef g(m = 15):\n    return m * 5\nassert f(g())\n",
        "idx_generation": 333,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, d='aeiou') -> bool:\n    \"\"\"Find a string where all vowels are replaced by a specific character.\"\"\"\n    return all(c not in d for c in s)\ndef g(d='aeiou'):\n    return ''.join(['*' if c in d else c for c in 'puzzle'])\nassert f(g())\n",
        "idx_generation": 299,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, d=3) -> bool:\n    \"\"\"Check if a number is divisible by a given divisor.\"\"\"\n    return n % d == 0\ndef g(d=3):\n    return d * 7\nassert f(g())\n",
        "idx_generation": 286,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='ok', count=2, length=10) -> bool:\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length\ndef g(substring = 'ok', count = 2, length = 10):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'\nassert f(g())\n",
        "idx_generation": 140,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Check if a target number exists in the given matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    left = 0\n    right = rows * cols - 1\n    while left <= right:\n        mid = (left + right) // 2\n        num = matrix[mid // cols][mid % cols]\n        if num == target:\n            return True\n        elif num < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False\ndef g(matrix = [[1, 3, 5], [7, 9, 11], [13, 15, 17]], target = 9):\n    return matrix, target\nassert f(*g())\n",
        "idx_generation": 113,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(characters: List[str], target='python') -> bool:\n    \"\"\"Check if the characters in the list can be rearranged to form the target string\"\"\"\n    return sorted(characters) == sorted(target)\ndef g(target = 'python'):\n    return list(target)\nassert f(g())\n",
        "idx_generation": 269,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists two numbers in the list that sum up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 347,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport re\n\ndef f(string: str, pattern=r'\\d{3}-\\d{3}-\\d{4}') -> bool:\n    \"\"\"Check if a string matches a given pattern\"\"\"\n    return bool(re.match(pattern, string))\n\ndef g(pattern=r'\\d{3}-\\d{3}-\\d{4}'):\n    return '123-456-7890'\n  \nassert f(g())\n",
        "idx_generation": 334,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='hello world', length=5) -> bool:\n    \"\"\"Check if the substring of length 5 is present at the start of the target string.\"\"\"\n    return target[:length] == s\ndef g(target='hello world', length=5):\n    return target[:length]\nassert f(g())\n",
        "idx_generation": 300,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(res: List[int], lst: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, return True if the sum of the even numbers in the list is equal to the sum of the odd numbers,\n    and False otherwise.\n    \"\"\"\n    even_sum = sum([x for x in lst if x % 2 == 0])\n    odd_sum = sum([x for x in lst if x % 2 != 0])\n    return res == (even_sum == odd_sum)\n\ndef g(lst: List[int]):\n    even_sum = sum([x for x in lst if x % 2 == 0])\n    odd_sum = sum([x for x in lst if x % 2 != 0])\n    return even_sum == odd_sum\n\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g(lst), lst)\n",
        "idx_generation": 288,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\n\ndef f(nums: list, target: int=10, combination: int=3) -> bool:\n    \"\"\"Check if there exists a combination of numbers that sum up to the target.\"\"\"\n    for combo in itertools.combinations(nums, combination):\n        if sum(combo) == target:\n            return True\n    return False\n\ndef g(target: int=10, combination: int=3):\n    nums = [1, 2, 3, 4, 5]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 148,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subarray in the array that sums up to the target value.\"\"\"\n    n = len(arr)\n    prefix_sum = 0\n    prefix_sums = set()\n    for num in arr:\n        prefix_sum += num\n        if prefix_sum == target or prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False\ndef g(arr = [1, 2, 3, 4, 5, 6], target = 9):\n    return arr, target\nassert f(*g())\n",
        "idx_generation": 113,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s1: str, s2: str, k: int) -> bool:\n    \"\"\"\n    Check if two strings are k-similar.\n\n    Two strings are k-similar if they can be made identical by swapping characters in the same position for at most k times.\n\n    Example:\n    s1 = \"abc\"\n    s2 = \"acb\"\n    k = 2\n    output: True\n    \"\"\"\n    if s1 == s2:\n        return True\n    if sorted(s1) != sorted(s2):\n        return False\n    n = len(s1)\n    swaps = 0\n    for i in range(n):\n        if s1[i] != s2[i]:\n            swaps += 1\n        if swaps > k:\n            return False\n    return True\n\ndef g(k=2):\n    return k\n\nassert f(\"abc\", \"acb\", g())\n",
        "idx_generation": 271,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[str], substring='abc') -> bool:\n    \"\"\"Check if any string in the list contains a specific substring\"\"\"\n    return any(substring in string for string in li)\ndef g(substring='abc'):\n    return [substring + str(i) for i in range(10)]\nassert f(g())\n",
        "idx_generation": 353,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"\n    Check if a number n is a prime number.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    \"\"\"\n    Generate a prime number from the given list.\n    \"\"\"\n    return primes[-1]\n\nassert f(g())\n",
        "idx_generation": 335,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, s='abcde', t='zyx') -> bool:\n    \"\"\"\n    Given two strings, find the index of the first occurrence of the second string in the first string.\n    \"\"\"\n    return s.find(t) == n\ndef g(s='abcde', t='zyx'):\n    return s.find(t)\nassert f(g())\n",
        "idx_generation": 300,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(d: datetime.date, year=2022) -> bool:\n    \"\"\"Check if the year of a given date is equal to a target year\"\"\"\n    return d.year == year\n\ndef g(year=2022):\n    return datetime.date(year, 6, 15)\n\nassert f(g())\n",
        "idx_generation": 289,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\n\ndef f(arr: List[int], k=3, target=15) -> bool:\n    \"\"\"Find a combination of k elements from arr whose sum is equal to the target value\"\"\"\n    combinations = itertools.combinations(arr, k)\n    for combination in combinations:\n        if sum(combination) == target:\n            return True\n    return False\n\ndef g(k=3, target=15):\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return arr\n\nassert f(g())\n",
        "idx_generation": 161,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers 'numbers' and a target integer 'target', determine if there exists a pair of numbers in the list whose sum is equal to the target.\n    \"\"\"\n    num_set = set(numbers)\n    for num in numbers:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False\n\ndef g(numbers: List[int], target: int):\n    return numbers, target\n\nnumbers = [1, 2, 3, 4, 5]\ntarget = 7\n\nassert f(*g(numbers, target))\n",
        "idx_generation": 117,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target=\"programming\") -> bool:\n    \"\"\"\n    Find a list of words where the first letter of each word is the same as the target word\n    \"\"\"\n    return all(word[0] == target[0] for word in words)\n\ndef g(target=\"programming\"):\n    words = [\"python\", \"puzzle\", \"programming\", \"problem\", \"practice\"]\n    return words\n\nassert f(g())\n",
        "idx_generation": 274,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(s: str, nums=[1, 2, 3, 4, 5], target=15) -> bool:\n    \"\"\"Check if there is a combination of numbers in the list that equals the target\"\"\"\n    from itertools import combinations\n    for i in range(1, len(nums) + 1):\n        for comb in combinations(nums, i):\n            if sum(comb) == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=15):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 361,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(li: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, find the sum of the squares of all even numbers in the list.\n    \"\"\"\n    even_numbers = [x for x in li if x % 2 == 0]\n    sum_of_squares = sum([x**2 for x in even_numbers])\n    return sum_of_squares % 2 == 0\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 335,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(encrypted: str, shift=3) -> bool:\n    \"\"\"Decrypt a Caesar cipher\"\"\"\n    decrypted = \"\"\n    for char in encrypted:\n        if char.isalpha():\n            ascii_val = ord(char)\n            if char.islower():\n                decrypted += chr((ascii_val - shift - 97) % 26 + 97)\n            else:\n                decrypted += chr((ascii_val - shift - 65) % 26 + 65)\n        else:\n            decrypted += char\n    return decrypted\n\ndef g(shift=3):\n    \"\"\"Encrypt a message using a Caesar cipher\"\"\"\n    message = \"Hello, world!\"\n    encrypted = \"\"\n    for char in message:\n        if char.isalpha():\n            ascii_val = ord(char)\n            if char.islower():\n                encrypted += chr((ascii_val + shift - 97) % 26 + 97)\n            else:\n                encrypted += chr((ascii_val + shift - 65) % 26 + 65)\n        else:\n            encrypted += char\n    return encrypted\n\nassert f(g()) == \"Hello, world!\"\n",
        "idx_generation": 301,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, primes=[2]) -> bool:\n    \"\"\"\n    Given an integer n, determine if it is a prime number. A prime number is a positive integer greater than 1 that has no\n    positive integer divisors other than 1 and itself.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g(n=2):\n    return n\n\nassert f(g())\n",
        "idx_generation": 290,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, sentence='The quick brown fox jumps over the lazy dog.') -> bool:\n    \"\"\"Check if a word is present in a given sentence.\"\"\"\n    return word in sentence\ndef g(sentence='The quick brown fox jumps over the lazy dog.'):\n    words = sentence.split()\n    return words[0]\nassert f(g())\n",
        "idx_generation": 163,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers 'nums' and a target integer 'target', determine if there exists a subarray such that the sum of its elements is equal to the target.\n    \"\"\"\n    prefix_sums = {0: -1}\n    curr_sum = 0\n    for i, num in enumerate(nums):\n        curr_sum += num\n        if curr_sum - target in prefix_sums:\n            return True\n        prefix_sums[curr_sum] = i\n    return False\n\ndef g(nums: List[int], target: int):\n    return nums, target\n\nnums = [1, 2, 3, 4, 5]\ntarget = 9\n\nassert f(*g(nums, target))\n",
        "idx_generation": 117,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, prefix='un', suffix='able') -> bool:\n    \"\"\"Check if a word starts with a given prefix and ends with a given suffix\"\"\"\n    return word.startswith(prefix) and word.endswith(suffix)\ndef g(word = 'unbelievable'):\n    return word\nassert f(g())\n",
        "idx_generation": 291,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import combinations\n\ndef f(words: List[str], pattern='abc') -> bool:\n    \"\"\"Check if any combination of characters in the words list matches the given pattern\"\"\"\n    for i in range(1, len(words)+1):\n        for combination in combinations(words, i):\n            if ''.join(combination) == pattern:\n                return True\n    return False\n\ndef g(words=['a', 'b', 'c', 'd']):\n    return words\n\nassert f(g())\n",
        "idx_generation": 363,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(li: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a pair of numbers in the list whose sum is equal to 10.\n    \"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i] + li[j] == 10:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 335,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"Check if the string s contains a substring of length k with all distinct characters.\"\"\"\n    return any([len(set(s[i:i+k])) == k for i in range(len(s)-k+1)])\ndef g(k=3):\n    return \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"[k-1:k+k-1]\nassert f(g())\n",
        "idx_generation": 302,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: str, day=datetime.datetime.now().day, month=datetime.datetime.now().month, year=datetime.datetime.now().year) -> bool:\n    \"\"\"\n    Check if the given date is in the past.\n    \"\"\"\n    given_date = datetime.datetime.strptime(date, \"%Y-%m-%d\")\n    current_date = datetime.datetime(year, month, day)\n    return given_date < current_date\n\ndef g(day=datetime.datetime.now().day, month=datetime.datetime.now().month, year=datetime.datetime.now().year):\n    return str(year - 1) + \"-\" + str(month) + \"-\" + str(day)\n\nassert f(g())\n",
        "idx_generation": 292,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, c1='a', c2='b', count1=5, count2=3) -> bool:\n    \"\"\"\n    Find a string that has count1 occurrences of c1 and count2 occurrences of c2 and starts and ends with\n    the same 3 characters\n    \"\"\"\n    return s.count(c1) == count1 and s.count(c2) == count2 and (s[:3] == s[-3:])\ndef g(c1='a', c2='b', count1=5, count2=3):\n    if c1 == c2:\n        ans = (c1 + \"?\") * count1\n    elif c1.count(c2):\n        ans = (c1 + \"?\") * count1\n        ans += (c2 + \"?\") * (count2 - ans.count(c2))\n    else:\n        ans = (c2 + \"?\") * count2\n        ans += (c1 + \"?\") * (count1 - ans.count(c1))\n    return \"???\" + ans + \"???\"\nassert f(g())\n",
        "idx_generation": 176,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the list is sorted in non-decreasing order\"\"\"\n    return arr == sorted(arr)\ndef g(arr: List[int]):\n    return sorted(arr)\nassert f(g([1, 2, 3, 4, 5]))\n",
        "idx_generation": 119,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\nimport string\n\ndef f(s: str, chars=string.ascii_lowercase) -> bool:\n    \"\"\"Check if s starts with any character in a given list\"\"\"\n    return s[0] in chars\ndef g(chars=string.ascii_lowercase):\n    return random.choice(chars)\nassert f(g())\n",
        "idx_generation": 310,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=4, m=2) -> bool:\n    \"\"\"Check if there are n or more occurrences of a substring of length m in s\"\"\"\n    count = 0\n    for i in range(len(s) - m + 1):\n        substring = s[i:i + m]\n        if s.count(substring) >= n:\n            count += 1\n    return count >= n\ndef g(n = 4, m = 2):\n    s = \"abababab\"\n    return s\nassert f(g())\n",
        "idx_generation": 374,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers that sums up to a target value.\"\"\"\n    return sum(nums) == target\ndef g(target=100):\n    nums = [10, 20, 30, 40]\n    return nums\nassert f(g())\n",
        "idx_generation": 338,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return s == s[::-1]\ndef g():\n    return \"racecar\"\nassert f(g())\n",
        "idx_generation": 302,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(a: int, b: int, c: int) -> bool:\n    \"\"\"Check if the given values form a Pythagorean triple\"\"\"\n    return math.sqrt(a**2 + b**2) == c\ndef g():\n    return (3, 4, 5)\nassert f(*g())\n",
        "idx_generation": 297,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc') -> bool:\n    \"\"\"Check if the substring appears in the string in any order.\"\"\"\n    char_count_string = {}\n    char_count_substring = {}\n    \n    for char in string:\n        if char in char_count_string:\n            char_count_string[char] += 1\n        else:\n            char_count_string[char] = 1\n    \n    for char in substring:\n        if char in char_count_substring:\n            char_count_substring[char] += 1\n        else:\n            char_count_substring[char] = 1\n    \n    for char in char_count_substring:\n        if char_count_substring[char] > char_count_string.get(char, 0):\n            return False\n    \n    return True\n\ndef g(substring = 'abc'):\n    return 'abracadabra'\n\nassert f(g())\n",
        "idx_generation": 190,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, num_list=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if a number is present in a list.\"\"\"\n    return n in num_list\ndef g(num_list=[1, 2, 3, 4, 5]):\n    return num_list[0]\nassert f(g())\n",
        "idx_generation": 123,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_word='python') -> bool:\n    \"\"\"Find a word that is a permutation of the target_word.\"\"\"\n    return any((sorted(word) == sorted(target_word) for word in words))\ndef g(words=['typhon', 'nohtyp', 'python', 'onhtyp']):\n    return words\nassert f(g())\n",
        "idx_generation": 315,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_length=10) -> bool:\n    \"\"\"Check if the string s can be compressed to the target_length\"\"\"\n    compressed = \"\"\n    count = 1\n    for i in range(1, len(s)):\n        if s[i] == s[i - 1]:\n            count += 1\n        else:\n            compressed += s[i - 1] + str(count)\n            count = 1\n            if len(compressed) > target_length:\n                return False\n    compressed += s[-1] + str(count)\n    return len(compressed) <= target_length\n\ndef g(target_length=10):\n    return \"a\" * (target_length // 2)\n\nassert f(g())\n",
        "idx_generation": 380,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Find the indices of a target value in a given matrix.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == target:\n                return True\n    return False\ndef g(target=5):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n",
        "idx_generation": 338,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_char='a') -> bool:\n    \"\"\"Check if the target character appears in the string s\"\"\"\n    return target_char in s\ndef g(target_char = 'a'):\n    return 'abcdefghijklmnopqrstuvwxyz'\nassert f(g())\n",
        "idx_generation": 307,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=10, b=5) -> bool:\n    \"\"\"Check if the difference between n and the product of a and b is less than or equal to 10.\"\"\"\n    return abs(n - (a * b)) <= 10\ndef g(a=10, b=5):\n    return a * b\nassert f(g())\n",
        "idx_generation": 300,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='world', n=3) -> bool:\n    \"\"\"Check if the target string appears n or more times in the given string.\"\"\"\n    return s.count(target) >= n\ndef g(target='world', n=3):\n    return ''.join([target for _ in range(n)])\nassert f(g())\n",
        "idx_generation": 190,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring: str='abc') -> bool:\n    \"\"\"Check if the given substring is a permutation of s\"\"\"\n    return sorted(substring) == sorted(s)\n\ndef g(substring: str='abc'):\n    return substring\n\nassert f(g())\n",
        "idx_generation": 128,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"\n    Find a string that contains all the substrings in alphabetical order\n    \"\"\"\n    sorted_substrings = sorted(substrings)\n    return all((sub in s for sub in sorted_substrings))\ndef g(substrings = ['apple', 'banana', 'cherry', 'date']):\n    return \"\".join(sorted(substrings))\nassert f(g())\n",
        "idx_generation": 318,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n: int = 5, m: int = 3) -> bool:\n    \"\"\"Check if the length of s is equal to n and the count of 'a' in s is equal to m\"\"\"\n    return len(s) == n and s.count('a') == m\ndef g(n: int = 5, m: int = 3):\n    return 'a' * m + 'b' * (n - m)\nassert f(g())\n",
        "idx_generation": 382,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, numbers=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) -> bool:\n    \"\"\"Check if a number is a multiple of any number in a list.\"\"\"\n    return any(n % x == 0 for x in numbers)\ndef g(numbers = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]):\n    return numbers[-1] * 2\nassert f(g())\n",
        "idx_generation": 339,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=8) -> bool:\n    \"\"\"Check if the string s contains at least n uppercase letters\"\"\"\n    return sum(1 for c in s if c.isupper()) >= n\ndef g(n = 8):\n    return \"ABC\" * n\nassert f(g())\n",
        "idx_generation": 308,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=5, b=12) -> bool:\n    \"\"\"\n    Check if the given number is a perfect square between a and b (inclusive).\n    \"\"\"\n    return a <= n <= b and math.isqrt(n)**2 == n\ndef g(a=5, b=12):\n    return next(i for i in range(a, b+1) if math.isqrt(i)**2 == i)\nassert f(g())\n",
        "idx_generation": 300,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc', count=5, length=100) -> bool:\n    \"\"\"Find a string with a certain number of occurrences of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length\ndef g(substring = 'abc', count = 5, length = 100):\n    c = chr(1 + max(ord(c) for c in (substring or \"abc\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * c\nassert f(g())\n",
        "idx_generation": 191,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=20) -> bool:\n    \"\"\"Find two numbers in a list whose sum is equal to target_sum\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=20):\n    return [10, target_sum-10]\n\nassert f(g())\n",
        "idx_generation": 131,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(letters: List[str], target='python', max_letters=6) -> bool:\n    \"\"\"Find a combination of at most max_letters letters that can be rearranged to form the target word\"\"\"\n    word = ''.join(letters)\n    return sorted(word) == sorted(target) and len(word) <= max_letters\ndef g(target='python', max_letters=6):\n    from itertools import permutations\n    for n in range(1, max_letters + 1):\n        for p in permutations(target, n):\n            if ''.join(p) == target:\n                return list(p)\nassert f(g())\n",
        "idx_generation": 322,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_length=10) -> bool:\n    \"\"\"Check if there is a word in the list whose length is equal to the target_length\"\"\"\n    return any(len(word) == target_length for word in words)\ndef g(target_length = 10):\n    words = ['apple', 'banana', 'cherry', 'dragonfruit', 'elderberry']\n    return words\nassert f(g())\n",
        "idx_generation": 391,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if n is a prime number\"\"\"\n    if n < 2:\n        return False\n    for p in primes:\n        if n % p == 0:\n            return False\n    return True\ndef g(n=31, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return n\nassert f(g())\n",
        "idx_generation": 340,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='abc', target='def') -> bool:\n    \"\"\"Check if the given string can be transformed into the target string by replacing all occurrences of a certain substring\"\"\"\n    return s.replace(substr, target) == target\ndef g(substr = 'abc', target = 'def'):\n    return target.replace(substr, substr)\nassert f(g())\n",
        "idx_generation": 310,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, m=5) -> bool:\n    \"\"\"Check if the square root of n is an integer and divisible by m.\"\"\"\n    return math.sqrt(n).is_integer() and math.sqrt(n) % m == 0\n\ndef g(m=5):\n    n = m**2\n    return n\n\nassert f(g())\n",
        "idx_generation": 306,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], n=4) -> bool:\n    \"\"\"Given a list of integers and n, check if the sum of any n consecutive integers in the list is 0.\"\"\"\n    return any(sum(li[i:i+n]) == 0 for i in range(len(li)-n+1))\ndef g(n=4):\n    return [1, -1] * (n // 2)\nassert f(g())\n",
        "idx_generation": 191,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: list, target: int, start=0, end=None) -> bool:\n    \"\"\"Check if the target number is in the list within the specified range\"\"\"\n    if end is None:\n        end = len(lst)\n    sublist = lst[start:end]\n    return target in sublist\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9], target=5, start=0, end=None):\n    return lst, target, start, end\nassert f(*g())\n",
        "idx_generation": 137,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if s is a palindrome\"\"\"\n    return s == s[::-1]\ndef g(n=5):\n    return 'racecar'\nassert f(g())\n",
        "idx_generation": 340,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target.\"\"\"\n    from itertools import combinations\n    return any(sum(combo) == target for combo in combinations(nums, 2))\ndef g(target = 100):\n    nums = [i for i in range(1, target)]\n    return nums\nassert f(g())\n",
        "idx_generation": 396,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(arr: list, target=5) -> bool:\n    \"\"\"\n    Find a pair of numbers from the given list that add up to the target value.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5]):\n    random.shuffle(arr)\n    return arr\n\nassert f(g())\n",
        "idx_generation": 341,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport re\n\ndef f(s: str, pattern: str) -> bool:\n    \"\"\"Check if the pattern matches the entire string.\"\"\"\n    return re.fullmatch(pattern, s) is not None\n\ndef g(pattern: str) -> str:\n    \"\"\"Generate a string that matches the pattern.\"\"\"\n    match = re.match(pattern, \"abcdefg\")\n    if match:\n        return match.group()\n    else:\n        return \"\"\n\nassert f(g(pattern='[a-z]+'), pattern='[a-z]+')\n",
        "idx_generation": 312,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, r=4) -> bool:\n    \"\"\"Check if x is within a certain distance from a given radius\"\"\"\n    return abs(x) <= r\ndef g(r=4):\n    return math.fabs(r) * (-1 if r < 0 else 1)\nassert f(g())\n",
        "idx_generation": 310,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"\n    Determine if one string is a rotation of another string.\n    \"\"\"\n    return len(s) == len(t) and t in s + s\ndef g(s='waterbottle', t='erbottlewat'):\n    return s, t\nassert f(g()[0], g()[1])\n",
        "idx_generation": 197,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17]) -> bool:\n    \"\"\"\n    Check if a number is divisible by all the prime numbers in the given list\n    \"\"\"\n    return all((n % prime == 0 for prime in primes))\n\ndef g(primes=[2, 3, 5, 7, 11, 13, 17]):\n    \"\"\"\n    Generate a number that is divisible by all the prime numbers in the given list\n    \"\"\"\n    return math.prod(primes)\n\nassert f(g())\n",
        "idx_generation": 139,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: datetime.date) -> bool:\n    \"\"\"Check if the given date is a weekend.\"\"\"\n    return date.weekday() >= 5\n\ndef g():\n    return datetime.date.today()\n\nassert f(g())\n",
        "idx_generation": 347,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if any two numbers in a list sum up to a target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 342,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"Check if a given substring is in a string.\"\"\"\n    return target in s\ndef g(target='python'):\n    return 'I love ' + target\nassert f(g())\n",
        "idx_generation": 312,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(result: bool, n=10, m=5) -> bool:\n    \"\"\"\n    Determine if the sum of the first n positive integers is divisible by m.\n    \"\"\"\n    return (n * (n + 1) // 2) % m == 0\ndef g(n=10, m=5):\n    return (n * (n + 1) // 2) % m == 0\nassert f(g())\n",
        "idx_generation": 311,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a='hello', b='world') -> bool:\n    \"\"\"Check if both strings are present in s\"\"\"\n    return a in s and b in s\ndef g(a='hello', b='world'):\n    s = a + ' ' + b\n    return s\nassert f(g())\n",
        "idx_generation": 211,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: list, target=10) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, determine if there exists a subarray (consecutive elements) in the list\n    that sums up to the target.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            if sum(arr[i:j]) == target:\n                return True\n    return False\n\ndef g(target=10):\n    arr = [1, 2, 3, 4, 5]\n    return arr\n\nassert f(g())\n",
        "idx_generation": 143,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Find if the target number exists in the matrix\"\"\"\n    return any(target in row for row in matrix)\ndef g(target = 5):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "idx_generation": 351,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(target=10):\n    return [2, 8, 3, 5, 6]\nassert f(g())\n",
        "idx_generation": 343,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Find n such that n is the index of the first word in the given list that starts with a vowel.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return any(lst[i][0].lower() in vowels for i in range(len(lst)))\ndef g(lst=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return next(i for i in range(len(lst)) if lst[i][0].lower() in 'aeiou')\nassert f(g())\n",
        "idx_generation": 313,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=2.5, b=4.8) -> bool:\n    \"\"\"Check if x is within the range [a, b].\"\"\"\n    return a <= x <= b\ndef g(a=2.5, b=4.8):\n    return math.sqrt(a * b)\nassert f(g())\n",
        "idx_generation": 311,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc', count=4, length=16) -> bool:\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length\ndef g(substring = 'abc', count = 4, length = 16):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'\nassert f(g())\n",
        "idx_generation": 222,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], n=5) -> bool:\n    \"\"\"Check if the list contains a subarray of length n that forms an arithmetic progression.\"\"\"\n    for i in range(len(nums) - n + 1):\n        subarray = nums[i:i+n]\n        diff = subarray[1] - subarray[0]\n        if all(subarray[j] - subarray[j-1] == diff for j in range(2, n)):\n            return True\n    return False\n\ndef g(nums=[1, 3, 5, 7, 9, 11, 13]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 143,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"\n    Given two strings s and t, determine if t is an anagram of s.\n\n    Example:\n    s = \"listen\"\n    t = \"silent\"\n\n    The function should return True because t is an anagram of s.\n    \"\"\"\n    return sorted(s) == sorted(t)\ndef g(s = \"listen\", t = \"silent\"):\n    return s, t\nassert f(*g())\n",
        "idx_generation": 359,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], row_sum=10) -> bool:\n    \"\"\"Check if any row in the matrix has a sum equal to row_sum\"\"\"\n    return any((sum(row) == row_sum for row in matrix))\ndef g(row_sum=10):\n    return [[1, 2, 3], [4, 5, 1], [2, 3, 4]]\nassert f(g())\n",
        "idx_generation": 343,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, s='Hello, World!') -> bool:\n    \"\"\"Find n such that n is the number of occurrences of the letter 'l' in the given string.\"\"\"\n    return s.count('l') == n\ndef g(s='Hello, World!'):\n    return s.count('l')\nassert f(g())\n",
        "idx_generation": 313,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, nums=[3, 5, 7]) -> bool:\n    \"\"\"Check if a number is divisible by all the numbers in a list.\"\"\"\n    return all(n % i == 0 for i in nums)\ndef g(nums=[3, 5, 7]):\n    lcm = 1\n    for i in nums:\n        lcm = lcm * i // math.gcd(lcm, i)\n    return lcm\nassert f(g())\n",
        "idx_generation": 312,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(s: str, n=10) -> bool:\n    \"\"\"Find if there exists a permutation of the string that is a palindrome\"\"\"\n    return any(s == s[::-1] for s in permutations(s, n))\ndef g(n=10):\n    return 'aba' + 'b' * (n-3)\nassert f(g())\n",
        "idx_generation": 225,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(arr: List[int], target_length=3) -> bool:\n    \"\"\"Check if there exists a permutation of the list that has a consecutive subsequence of length target_length.\"\"\"\n    perms = permutations(arr)\n    for perm in perms:\n        for i in range(len(perm)-target_length+1):\n            subseq = perm[i:i+target_length]\n            if sorted(subseq) == list(subseq):\n                return True\n    return False\ndef g(arr = [1, 2, 3, 4, 5], target_length = 3):\n    return arr\nassert f(g())\n",
        "idx_generation": 151,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, a='Python') -> bool:\n    \"\"\"Check if the given string contains the word 'Python'\"\"\"\n    return a in x\ndef g(a = 'Python'):\n    return 'I love ' + a\nassert f(g())\n",
        "idx_generation": 360,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k: int) -> bool:\n    \"\"\"\n    Given an array of integers and an integer k, return True if there are two distinct indices i and j in the array\n    such that arr[i] - arr[j] == k, and False otherwise.\n    \"\"\"\n    return any(abs(arr[i] - arr[j]) == k for i in range(len(arr)) for j in range(len(arr)) if i != j)\ndef g(arr = [1, 5, 3, 2, 4], k = 2):\n    return arr, k\nassert f(*g())\n",
        "idx_generation": 344,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3, target='hello') -> bool:\n    \"\"\"\n    Count the number of occurrences of a target substring in a given string.\n    - s is the given string\n    - n is the number of occurrences to count\n    - target is the substring to search for\n    \"\"\"\n    return s.count(target) == n\ndef g(n = 3, target = 'hello'):\n    return 'hello world ' * n\nassert f(g())\n",
        "idx_generation": 313,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(dt: datetime.datetime, year=2022) -> bool:\n    \"\"\"\n    Check if the year of a given datetime object is equal to a specific year\n    \"\"\"\n    return dt.year == year\ndef g(year=2022):\n    return datetime.datetime(year, 1, 1)\nassert f(g())\n",
        "idx_generation": 317,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'imbe', 'jackfruit']) -> bool:\n    \"\"\"Check if the input string contains all the words in the list\"\"\"\n    return all(word in s for word in words)\ndef g(words=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'imbe', 'jackfruit']):\n    return ' '.join(words)\nassert f(g())\n",
        "idx_generation": 227,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"Check if s1 and s2 have the same characters.\"\"\"\n    return sorted(s1) == sorted(s2)\ndef g():\n    s1 = \"listen\"\n    s2 = \"silent\"\n    return s1, s2\nassert f(*g())\n",
        "idx_generation": 151,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, s = 'abcdefghijklmnopqrstuvwxyz', t = 'zyxwvutsrqponmlkjihgfedcba') -> bool:\n    \"\"\"\n    Given a string s and a string t, determine if t is an anagram of s. An anagram is a word that can be formed by\n    rearranging the letters of another word.\n\n    Sample input:\n    'listen', 'silent'\n\n    Sample output:\n    True\n\n    The string 'silent' is an anagram of 'listen' because it contains the same letters, just rearranged.\n    \"\"\"\n    return sorted(s.lower()) == sorted(t.lower())\ndef g(s = 'abcdefghijklmnopqrstuvwxyz', t = 'zyxwvutsrqponmlkjihgfedcba'):\n    return (s, t[::-1])\nassert f(g())\n",
        "idx_generation": 370,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], x=10, y=20, z=30) -> bool:\n    \"\"\"Check if the sum of the list elements is equal to x + y + z\"\"\"\n    return sum(lst) == x + y + z\n\ndef g(x=10, y=20, z=30):\n    return [x, y, z]\n\nassert f(g())\n",
        "idx_generation": 346,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"\n    Given a string s and an integer n, determine if there exists a substring of length n\n    in s that contains only unique characters.\n    \"\"\"\n    for i in range(len(s)-n+1):\n        if len(set(s[i:i+n])) == n:\n            return True\n    return False\n\ndef g(n=4):\n    return \"pythonprogramming\"\n\nassert f(g(), n=4)\n",
        "idx_generation": 316,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(a: float, b: float, c: float) -> bool:\n    \"\"\"Check if the given values can form a right-angled triangle\"\"\"\n    return a**2 + b**2 == c**2\ndef g():\n    a = 3\n    b = 4\n    c = sqrt(a**2 + b**2)\n    return a, b, c\nassert f(*g())\n",
        "idx_generation": 318,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_length=5) -> bool:\n    \"\"\"Check if the string has the target length\"\"\"\n    return len(s) == target_length\ndef g(target_length=5):\n    return \"hello\"[:target_length]\nassert f(g())\n",
        "idx_generation": 229,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], n=0) -> bool:\n    \"\"\"Find two integers in the list whose product is equal to n\"\"\"\n    return any(nums[i] * nums[j] == n for i in range(len(nums)) for j in range(i + 1, len(nums)))\ndef g(n = 0):\n    return [n, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 154,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, sub='abc', count=3) -> bool:\n    \"\"\"Find a string that has count or more occurrences of sub\"\"\"\n    return s.count(sub) >= count\ndef g(sub='abc', count=3):\n    ans = sub * count\n    return ans\nassert f(g())\n",
        "idx_generation": 372,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(i+1, len(matrix)):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 347,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=2) -> bool:\n    \"\"\"\n    Given a string, check if it contains a substring that is a palindrome of length target.\n\n    Sample Input:\n    \"abcdeedcba\"\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(s) - target + 1):\n        sub = s[i:i+target]\n        if sub == sub[::-1]:\n            return True\n    return False\n      \ndef g(target=2):\n    return \"abcdeedcba\"\n\nassert f(g())\n",
        "idx_generation": 318,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=1, y=1) -> bool:\n    \"\"\"\n    Given two positive integers x and y, determine if n is a perfect square.\n\n    Sample Input:\n    `16`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    return x * y == n and math.sqrt(n) % 1 == 0\n\ndef g(x=1, y=1):\n    return x * y\n\nassert f(g())\n",
        "idx_generation": 325,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=2) -> bool:\n    \"\"\"Check if the string contains exactly n vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count == n\ndef g(n=2):\n    string = \"Hello, how are you today?\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    ans = []\n    for char in string:\n        if char.lower() in vowels:\n            ans.append(char)\n    return ''.join(ans)[:n]\nassert f(g())\n",
        "idx_generation": 232,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target number, find if the target exists in the matrix.\n    \"\"\"\n    m, n = len(matrix), len(matrix[0])\n    if target < matrix[0][0] or target > matrix[m-1][n-1]:\n        return False\n    \n    def binary_search(row):\n        left, right = 0, n-1\n        while left <= right:\n            mid = (left + right) // 2\n            if matrix[row][mid] == target:\n                return True\n            elif matrix[row][mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False\n    \n    for i in range(m):\n        if binary_search(i):\n            return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    \"\"\"\n    This solution performs a binary search on each row of the matrix to find the target number.\n    \"\"\"\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 160,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(year: int, month: int, day: int) -> bool:\n    \"\"\"Check if the provided date is a Monday\"\"\"\n    return datetime(year, month, day).weekday() == 0\ndef g(year: int = 2022, month: int = 1, day: int = 3):\n    return year, month, day\nassert f(*g())\n",
        "idx_generation": 377,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], n=100) -> bool:\n    \"\"\"Find two integers whose sum is equal to n\"\"\"\n    return len(nums) <= 2 and sum(nums) == n\n\ndef g(n = 100):\n    if n % 2 == 0:\n        return [n // 2, n // 2]\n    else:\n        return [n // 2, n // 2 + 1]\n\nassert f(g())\n",
        "idx_generation": 349,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='aeiou') -> bool:\n    \"\"\"Check if all characters in the string are vowels\"\"\"\n    return all((c in target for c in s))\ndef g(target = 'aeiou'):\n    return target\nassert f(g())\n",
        "idx_generation": 318,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=7, b=3, c=5) -> bool:\n    \"\"\"Check if n is divisible by a, b, and c\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0\ndef g(a = 7, b = 3, c = 5):\n    return a * b * c\nassert f(g())\n",
        "idx_generation": 327,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, s1='hello', s2='world', count1=10, count2=5) -> bool:\n    \"\"\"\n    Find a string that has count1 occurrences of s1 and count2 occurrences of s2 and starts and ends with\n    the same 5 characters\n    \"\"\"\n    return s.count(s1) == count1 and s.count(s2) == count2 and (s[:5] == s[-5:])\ndef g(s1='hello', s2='world', count1=10, count2=5):\n    if s1 == s2:\n        ans = (s1 + \"!\") * count1\n    elif s1.count(s2):\n        ans = (s1 + \"!\") * count1\n        ans += (s2 + \"!\") * (count2 - ans.count(s2))\n    else:\n        ans = (s2 + \"!\") * count2\n        ans += (s1 + \"!\") * (count1 - ans.count(s1))\n    return \"!\" * 5 + ans + \"!\" * 5\nassert f(g())\n",
        "idx_generation": 235,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(n: int, a=1, b=6) -> bool:\n    \"\"\"\n    Generate n random numbers between a and b (inclusive)\n    and check if the minimum number is less than or equal to 3.\n    \"\"\"\n    numbers = [random.randint(a, b) for _ in range(n)]\n    return min(numbers) <= 3\n\ndef g(a = 1, b = 6):\n    return 5\n\nassert f(g())\n",
        "idx_generation": 162,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst1=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], lst2=[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) -> bool:\n    \"\"\"Check if the sum of the first n elements in lst1 is equal to the sum of the last n elements in lst2\"\"\"\n    return sum(lst1[:n]) == sum(lst2[-n:])\ndef g(lst1 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], lst2 = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]):\n    return len(lst1) // 2\nassert f(g())\n",
        "idx_generation": 382,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(nums: List[int], n=100) -> bool:\n    \"\"\"Find two integers whose product is equal to n\"\"\"\n    return len(nums) <= 2 and nums[0] * nums[1] == n\n\ndef g(n = 100):\n    for i in range(1, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return [i, n // i]\n\nassert f(g())\n",
        "idx_generation": 349,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, delimiter=' ', target='Hello World') -> bool:\n    \"\"\"Check if a target string can be formed by joining the elements of a given string with a delimiter.\"\"\"\n    return delimiter.join(s.split(delimiter)) == target\ndef g(delimiter=' ', target='Hello World'):\n    return delimiter.join(target.split())\nassert f(g())\n",
        "idx_generation": 319,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(circle_area: float, radius=5) -> bool:\n    \"\"\"Check if the area of a circle is equal to the given circle_area\"\"\"\n    return math.isclose(math.pi * radius**2, circle_area)\n\ndef g(radius = 5):\n    return math.pi * radius**2\n\nassert f(g())\n",
        "idx_generation": 329,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if there are exactly n occurrences of the letter 'a' in the string\"\"\"\n    return s.count('a') == n\n\ndef g(n=3):\n    return 'a' * n + 'b' * (n + 1)\n\ns = g()\nassert f(s)\n",
        "idx_generation": 241,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) -> bool:\n    \"\"\"Check if the given number is a prime number.\"\"\"\n    return n in primes\n\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]):\n    return primes[-1]\n\nassert f(g())\n",
        "idx_generation": 165,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='pre', suffix='fix') -> bool:\n    \"\"\"Check if any of the words in the list has the given prefix and suffix.\"\"\"\n    return any(word.startswith(prefix) and word.endswith(suffix) for word in words)\n\ndef g(prefix='pre', suffix='fix'):\n    words = ['prefix', 'suffix', 'infix']\n    return words\n\nassert f(g())\n",
        "idx_generation": 386,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=1) -> bool:\n    \"\"\"\n    Check if the sum of the elements in the array is equal to the target value.\n    \"\"\"\n    return sum(arr) == target\n\ndef g(target=1):\n    return [1] * target\n\nassert f(g())\n",
        "idx_generation": 349,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='puzzle') -> bool:\n    \"\"\"Determine if the given substring appears in the given string in a case-insensitive manner.\"\"\"\n    return substring.lower() in s.lower()\ndef g(substring='puzzle'):\n    string = 'This is a puzzle that needs to be solved.'\n    return string\nassert f(g())\n",
        "idx_generation": 323,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(a: int, b: int, c: int, d: int) -> bool:\n    \"\"\"Check if the given system of equations has a unique solution\"\"\"\n    det = a * d - b * c\n    return det != 0\ndef g(a = 3, b = 2, c = 4, d = 6):\n    return (a, b, c, d)\nassert f(*g())\n",
        "idx_generation": 331,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, n=7, m=8) -> bool:\n    \"\"\"Determine if a word has exactly n consonants and m vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']\n    count_vowels = sum([1 for letter in word if letter.lower() in vowels])\n    count_consonants = sum([1 for letter in word if letter.lower() in consonants])\n    return count_vowels == m and count_consonants == n\n\ndef g(n=7, m=8):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']\n    word = \"\"\n    for _ in range(n):\n        word += consonants[_ % len(consonants)]\n    for _ in range(m):\n        word += vowels[_ % len(vowels)]\n    return word\n\nassert f(g())\n",
        "idx_generation": 256,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], n=3) -> bool:\n    \"\"\"Check if there are n consecutive numbers in the array.\"\"\"\n    arr.sort()\n    for i in range(len(arr) - n + 1):\n        if arr[i] + n - 1 == arr[i + n - 1]:\n            return True\n    return False\n\ndef g(n=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 167,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Check if it is possible to find two numbers in the list that add up to the target_sum.\"\"\"\n    return any([(x + y) == target_sum for x in numbers for y in numbers if x != y])\ndef g(target_sum=100):\n    return list(range(1, target_sum))\nassert f(g())\n",
        "idx_generation": 350,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Given a string, check if it is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g(s: str):\n    return s\n\nassert f(g(\"radar\"))\n",
        "idx_generation": 326,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, x: int = 0) -> bool:\n    \"\"\"Check if the given number is a perfect square\"\"\"\n    return math.isqrt(n+x)**2 == n+x\n\ndef g(x: int = 0):\n    return x**2\n\nassert f(g())\n",
        "idx_generation": 331,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"\n    Given a string s, check if it can be divided into n equal parts.\n\n    Sample input:\n    \"abcdef\"\n\n    Sample output:\n    True\n\n    (Sample output hidden because showing sample output would give away too much information.)\n    \"\"\"\n    return len(s) % n == 0 and all(s[i:i + len(s) // n] == s[:len(s) // n] for i in range(0, len(s), len(s) // n))\ndef g(n = 5):\n    return \"abc\" * n\nassert f(g())\n",
        "idx_generation": 289,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"Check if s1 and s2 are anagrams\"\"\"\n    return sorted(s1) == sorted(s2)\n\ndef g():\n    return \"hello\", \"olleh\"\n\nassert f(*g())\n",
        "idx_generation": 170,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are 2 numbers in a list that sum up to a target number.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(target = 10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 350,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='python', max_len=6) -> bool:\n    \"\"\"Check if s is a substring of word\"\"\"\n    return s in word\ndef g(word = 'python', max_len = 6):\n    return word[1:4]\nassert f(g())\n",
        "idx_generation": 327,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(num: int, x=5, y=7) -> bool:\n    \"\"\"\n    Determine if the given number is a multiple of x and y, and if it is divisible by the sum of x and y.\n\n    Sample Input:\n    num = 35\n\n    Sample Output:\n    True\n    \"\"\"\n    return num % x == 0 and num % y == 0 and num % (x + y) == 0\n\ndef g(x=5, y=7):\n    num = x * y * (x + y)\n    return num\n\nassert f(g())\n",
        "idx_generation": 333,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='aeiou', max_count=3) -> bool:\n    \"\"\"Check if a string contains at least a certain number of vowels\"\"\"\n    count = sum(1 for char in s if char in target)\n    return count >= max_count\ndef g(target='aeiou', max_count=3):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return ''.join(vowels[:max_count]) + ''.join(target) + ''.join(vowels[max_count:])\nassert f(g())\n",
        "idx_generation": 296,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers, return True if there exists a pair of numbers that sum up to the target\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums))))\n    \ndef g(nums_length: int = 10, target: int = 10):\n    nums = [random.randint(1, 10) for _ in range(nums_length)]\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 170,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom functools import reduce\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if it is possible to obtain the target number by applying the four basic arithmetic operations (+, -, *, /) to the given numbers.\"\"\"\n    return target in reduce(lambda a, b: set(x+y for x in a for y in b) | set(x-y for x in a for y in b) | set(x*y for x in a for y in b) | set(x/y for x in a for y in b) if b else set(a), nums)\ndef g(nums = [5, 2, 10, 3, 25]):\n    return [[n] for n in nums]\nassert f(g())\n",
        "idx_generation": 351,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, target_char='e') -> bool:\n    \"\"\"Check if the target_char exists in the string.\"\"\"\n    return target_char in string\n\ndef g(target_char='e'):\n    string = \"Hello, world!\"\n    return string\n\nassert f(g())\n",
        "idx_generation": 328,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=3, c=7, d=2) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers) - d\"\"\"\n    return n + a == (b * sum([i for i in range(1, c+1)])) - d\ndef g(a = 5, b = 3, c = 7, d = 2):\n    return -a + (b * sum([i for i in range(1, c+1)])) - d\nassert f(g())\n",
        "idx_generation": 333,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substr='abc') -> bool:\n    \"\"\"Determine if a string contains a substring\"\"\"\n    return substr in string\ndef g(substr = 'abc'):\n    return \"def\" + substr + \"ghi\"\nassert f(g())\n",
        "idx_generation": 297,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the sum of all even numbers in the given list is greater than the sum of all odd numbers.\"\"\"\n    even_sum = sum(num for num in nums if num % 2 == 0)\n    odd_sum = sum(num for num in nums if num % 2 != 0)\n    return even_sum > odd_sum\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 172,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(x: int, numbers=[1,2,3,4,5,6,7,8,9,10]) -> bool:\n    \"\"\"Check if a given number is present in a list of numbers.\"\"\"\n    return x in numbers\ndef g(numbers=[1,2,3,4,5,6,7,8,9,10]):\n    return random.choice(numbers)\nassert f(g())\n",
        "idx_generation": 351,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc') -> bool:\n    \"\"\"Check if a substring is present in a given string\"\"\"\n    return substring in string\ndef g(substring='abc'):\n    return substring + 'def'\nassert f(g())\n",
        "idx_generation": 330,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, k=3) -> bool:\n    \"\"\"Check if n is a perfect square and divisible by k\"\"\"\n    return math.isqrt(n) ** 2 == n and n % k == 0\ndef g(k = 3):\n    return k ** 2 * 9\nassert f(g())\n",
        "idx_generation": 333,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\n\ndef f(words: List[str], phrase='thequickbrownfoxjumpsoverthelazydog') -> bool:\n    \"\"\"Check if it is possible to form the phrase using the given list of words\"\"\"\n    perms = itertools.permutations(words)\n    for perm in perms:\n        s = \"\".join(perm)\n        if s == phrase:\n            return True\n    return False\ndef g(phrase='thequickbrownfoxjumpsoverthelazydog'):\n    return ['the', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\nassert f(g())\n",
        "idx_generation": 304,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target value.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=20):\n    nums = [5, 10, 15, 20, 25]\n    return nums\nassert f(g())\n",
        "idx_generation": 174,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], a=2, b=3) -> bool:\n    \"\"\"Check if the given list contains a sublist that sums up to a*b.\"\"\"\n    return any(sum(x[i:j]) == a*b for i in range(len(x)) for j in range(i+1, len(x)+1))\n\ndef g(a=2, b=3):\n    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return x\n\nassert f(g())\n",
        "idx_generation": 352,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, x: int = 3) -> bool:\n    \"\"\"Check if the given string is a palindrome\"\"\"\n    return s == s[::-1]\n\ndef g(x: int = 3):\n    return str(x)\n\nassert f(g())\n",
        "idx_generation": 331,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"\n    Check if a number n is a product of any two distinct prime numbers in the given list.\n    \"\"\"\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            if primes[i] * primes[j] == n:\n                return True\n    return False\n\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    \"\"\"\n    Generate a number that is a product of any two distinct prime numbers in the given list.\n    \"\"\"\n    return primes[0] * primes[1]\n\nassert f(g())\n",
        "idx_generation": 335,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='pre') -> bool:\n    \"\"\"Check if all the words in the list start with the given prefix.\"\"\"\n    return all(word.startswith(prefix) for word in words)\ndef g(words = ['prefix', 'prestige', 'present', 'premise']):\n    return words\nassert f(g())\n",
        "idx_generation": 317,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if the target number is present in the list\"\"\"\n    return target in nums\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\nassert f(g())\n",
        "idx_generation": 176,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target_sum.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False\ndef g(target_sum=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return [nums[i], nums[j]]\n    return []\nassert f(g())\n",
        "idx_generation": 352,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n = 3, target = 'abc') -> bool:\n    \"\"\"\n    Find if the string 'abc' appears exactly n times in the given string s.\n    \"\"\"\n    count = s.count(target)\n    return count == n\ndef g(n = 3, target = 'abc'):\n    return target * n\nassert f(g())\n",
        "idx_generation": 332,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, li: List[int]) -> bool:\n    \"\"\"\n    Given an integer and a list of integers, find if the integer is a factor of the sum of all the numbers in the list.\n    \"\"\"\n    sum_of_numbers = sum(li)\n    return sum_of_numbers % n == 0\n\ndef g():\n    return 5, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(*g())\n",
        "idx_generation": 335,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(string: str, n=3) -> bool:\n    \"\"\"Check if the string contains at least 'n' number of vowels\"\"\"\n    vowels = 'aeiou'\n    count = 0\n    for char in string.lower():\n        if char in vowels:\n            count += 1\n    return count >= n\n\ndef g(n=3):\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    string = ''\n    for _ in range(n):\n        string += random.choice(vowels)\n        string += random.choice(consonants)\n    return string\n\nassert f(g())\n",
        "idx_generation": 334,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a sorted list of integers, determine if there exist two elements in the list whose sum is equal to the target.\n    Return True if such elements exist, False otherwise.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        curr_sum = arr[left] + arr[right]\n        if curr_sum == target:\n            return True\n        elif curr_sum < target:\n            left += 1\n        else:\n            right -= 1\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5], target=9):\n    return arr, target\n\nassert f(*g())\n",
        "idx_generation": 180,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if a given number is present in a list.\"\"\"\n    return n in lst\ndef g(lst: List[int]):\n    import random\n    random.seed(0)\n    return random.choice(lst)\nassert f(g([1, 2, 3, 4, 5]), [1, 2, 3, 4, 5])\n",
        "idx_generation": 353,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, c='a') -> bool:\n    \"\"\"Check if character c is present in string s\"\"\"\n    return c in s\ndef g(c = 'a'):\n    return 'abc'\nassert f(g())\n",
        "idx_generation": 333,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m: int, k: int) -> bool:\n    \"\"\"Check if the sum of n, m, and k is divisible by 3\"\"\"\n    return (n + m + k) % 3 == 0\ndef g(n: int, m: int, k: int):\n    return n, m, k\nassert f(*g(3, 6, 9))\n",
        "idx_generation": 337,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char='e', n=3) -> bool:\n    \"\"\"Check if a string has a specific character at least n times.\"\"\"\n    return s.count(char) >= n\ndef g(char = 'e', n = 3):\n    return char * n\nassert f(g())\n",
        "idx_generation": 339,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers that sum up to a target value\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums))))\ndef g(target=0):\n    return [-2, -1, 0, 1, 2]\nassert f(g())\n",
        "idx_generation": 184,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, determine if each row and column contains at least one even number.\n\n    Example:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n\n    The function should return True because each row and column contains at least one even number.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] % 2 == 0:\n                break\n        else:\n            return False\n    for j in range(cols):\n        for i in range(rows):\n            if matrix[i][j] % 2 == 0:\n                break\n        else:\n            return False\n    return True\ndef g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\nassert f(g())\n",
        "idx_generation": 359,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substr='abc') -> bool:\n    \"\"\"\n    Check if a given string contains a specific substring.\n    \"\"\"\n    return substr in string\ndef g(substr='abc'):\n    return 'abcdefg'\nassert f(g())\n",
        "idx_generation": 334,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, a=10, b=-5, c=3) -> bool:\n    \"\"\"Check if a point is inside a sphere.\"\"\"\n    return math.sqrt((x-a)**2 + (y-b)**2 + (z-c)**2) <= 5\n\ndef g(a=10, b=-5, c=3):\n    return (a, b, c)\n\nassert f(*g())\n",
        "idx_generation": 337,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, words=['ex', 'in', 'on', 'at', 'it', 'is', 'as', 'if', 'an', 'am', 'up', 'us', 'we', 'do', 'or', 'no', 'to', 'by', 'my', 'me', 'be', 'go', 'so', 'he', 'is', 'of', 'to', 'and', 'the', 'for', 'that', 'have', 'i', 'a', 'you', 'it']) -> bool:\n    \"\"\"\n    Given a string s and a list of words, check if the string can be formed by concatenating the words from the list\n    without any spaces.\n\n    Sample Input:\n    s = \"itisanexcellentday\"\n\n    Sample Output:\n    True\n\n    Explanation:\n    The string can be formed by concatenating the words \"it\", \"is\", \"an\", \"ex\", \"cell\", \"ent\", \"day\".\n    \"\"\"\n    start = 0\n    for i in range(len(s)):\n        if s[start:i+1] in words:\n            start = i + 1\n    return start == len(s)\ndef g(s = \"itisanexcellentday\"):\n    words = ['ex', 'in', 'on', 'at', 'it', 'is', 'as', 'if', 'an', 'am', 'up', 'us', 'we', 'do', 'or', 'no', 'to', 'by', 'my', 'me', 'be', 'go', 'so', 'he', 'is', 'of', 'to', 'and', 'the', 'for', 'that', 'have', 'i', 'a', 'you', 'it']\n    result = []\n    i = 0\n    while i < len(s):\n        found = False\n        for word in words:\n            if s[i:].startswith(word):\n                result.append(word)\n                i += len(word)\n                found = True\n                break\n        if not found:\n            return []\n    return result\nassert f(g())\n",
        "idx_generation": 356,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if n is present in the list\"\"\"\n    return n in nums\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums[0]\nassert f(g())\n",
        "idx_generation": 185,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[15, 20, 35, 40, 55, 60]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to n\"\"\"\n    return any((n - num in nums for num in nums))\ndef g(nums=[15, 20, 35, 40, 55, 60]):\n    return max(nums) + min(nums)\nassert f(g())\n",
        "idx_generation": 359,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, count=3) -> bool:\n    \"\"\"Check if a string contains at least a given number of vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return sum((ch in vowels for ch in s.lower())) >= count\ndef g(count=3):\n    return 'hello world'\nassert f(g())\n",
        "idx_generation": 336,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=10, b=3, c=5) -> bool:\n    \"\"\"Find n that when divided by a is b and leaves a remainder of c\"\"\"\n    return n % a == c and n // a == b\ndef g(a=10, b=3, c=5):\n    return (a * b) + c\nassert f(g())\n",
        "idx_generation": 338,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, strings=['ryzapychybykydege', 'mivowepe', 'sovywos', 'chanyrorybynid', 'vafechajufo', 'nokymocymoxac', 'jahejafuquoduk', 'gogy', 'bytothice', 'ruminuvixixutudigom']) -> bool:\n    \"\"\"Find the number of occurrences of a given string in a list of strings.\"\"\"\n    return strings.count(s) > 0\ndef g(strings = ['ryzapychybykydege', 'mivowepe', 'sovywos', 'chanyrorybynid', 'vafechajufo', 'nokymocymoxac', 'jahejafuquoduk', 'gogy', 'bytothice', 'ruminuvixixutudigom']):\n    return strings[0]\nassert f(g())\n",
        "idx_generation": 363,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums=[2, 4, 6, 8, 10], target=16):\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 186,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(x: np.ndarray, n=3) -> bool:\n    \"\"\"Check if the given numpy array has a shape of (n, n)\"\"\"\n    return x.shape == (n, n)\n\ndef g(n=3):\n    return np.zeros((n, n))\n\nassert f(g())\n",
        "idx_generation": 359,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='puzzle', case_sensitive=False) -> bool:\n    \"\"\"Check if the substring is present in the string.\"\"\"\n    if not case_sensitive:\n        string = string.lower()\n        substring = substring.lower()\n    return substring in string\n\ndef g(substring='puzzle', case_sensitive=False):\n    string = \"This is a puzzle that needs to be solved.\"\n    return string\n\nassert f(g())\n",
        "idx_generation": 336,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, n=10) -> bool:\n    \"\"\"\n    Given a number, return True if it is divisible by n, False otherwise.\n    \"\"\"\n    return num % n == 0\ndef g(n=10):\n    return n * 5\nassert f(g())\n",
        "idx_generation": 338,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='abc') -> bool:\n    \"\"\"Check if a given string contains a specific substring.\"\"\"\n    return substr in s\ndef g(substr='abc'):\n    return substr + 'xyz'\nassert f(g())\n",
        "idx_generation": 366,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target value.\n\n    Sample Input:\n    nums = [2, 4, 6, 8]\n    target = 10\n\n    Sample Output:\n    True\n    \"\"\"\n    return any(target - num in nums for num in nums)\ndef g(nums = [2, 4, 6, 8], target = 10):\n    return nums, target\nassert f(*g())\n",
        "idx_generation": 189,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(s: str, nums=[1, 2, 3, 4, 5], target=8) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that adds up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=8):\n    random.shuffle(nums)\n    return nums\n\nassert f(g())\n",
        "idx_generation": 361,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(phrase: str, target = 'python') -> bool:\n    \"\"\"Check if the target word is a substring of the given phrase\"\"\"\n    return target in phrase.lower()\ndef g(target = 'python'):\n    return target\nassert f(g())\n",
        "idx_generation": 337,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=5) -> bool:\n    \"\"\"Check if n is divisible by m\"\"\"\n    return n % m == 0\ndef g(m=5):\n    return 25\nassert f(g())\n",
        "idx_generation": 340,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target = 6) -> bool:\n    \"\"\"Determine if a string s is a valid palindrome and contains at least target number of vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return s.lower() == s.lower()[::-1] and count >= target\ndef g():\n    return \"Able was I ere I saw Elba\"\nassert f(g())\n",
        "idx_generation": 368,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(t: List[int], s=[1, 2, 3, 4, 5, 6, 7]) -> bool:\n    \"\"\"Given a list of integers s, remove all even numbers and return the resulting list\"\"\"\n    assert t == [i for i in s if i % 2 != 0], f'expecting `{[i for i in s if i % 2 != 0]}`'\n    return all(i % 2 != 0 for i in t)\ndef g(s=[1, 2, 3, 4, 5, 6, 7]):\n    return [i for i in s if i % 2 != 0]\nassert f(g())",
        "idx_generation": 193,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], target=20) -> bool:\n    \"\"\"Find any combination of numbers in the list that multiply to the target value.\"\"\"\n    product = 1\n    for num in x:\n        product *= num\n    return product == target\ndef g(target=20):\n    nums = [2, 4, 5, 10]\n    result = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                result.append(nums[i])\n                result.append(nums[j])\n                return result\n    return result\nassert f(g())\n",
        "idx_generation": 363,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, search='python') -> bool:\n    \"\"\"Check if the search string is present in the given string\"\"\"\n    return search in s\ndef g(search='python'):\n    return \"I love programming in \" + search\nassert f(g())\n",
        "idx_generation": 338,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=5, b=2, c=3) -> bool:\n    \"\"\"\n    Find n such that n + a is divisible by b raised to the power of c.\n    \"\"\"\n    return (n + a) % math.pow(b, c) == 0\n\ndef g(a=5, b=2, c=3):\n    return math.pow(b, c) - a\n\nassert f(g())\n",
        "idx_generation": 341,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='python') -> bool:\n    \"\"\"Check if a string contains a specified substring.\"\"\"\n    return substring in s\ndef g(substring='python'):\n    return 'I love ' + substring\nassert f(g())\n",
        "idx_generation": 383,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains duplicate elements.\n    \"\"\"\n    return len(li) != len(set(li))\ndef g():\n    return [1, 2, 3, 4, 5, 5]\nassert f(g())\n",
        "idx_generation": 196,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(numbers: List[float], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(numbers=[2, 4, 6, 8]):\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 363,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5, m=2) -> bool:\n    \"\"\"Check if a string contains a specific substring\"\"\"\n    return s.count('a'*n) >= m\ndef g(n = 5, m = 2):\n    return 'a'*n*m\nassert f(g())\n",
        "idx_generation": 338,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix\n    \"\"\"\n    for i in range(len(matrix)):\n        for j in range(i+1, len(matrix)):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 345,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc', count=3, length=9, case_sensitive=False) -> bool:\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length, with an option for case sensitivity\"\"\"\n    if case_sensitive:\n        return string.count(substring) == count and len(string) == length\n    else:\n        return string.lower().count(substring.lower()) == count and len(string) == length\ndef g(substring = 'abc', count = 3, length = 9, case_sensitive=False):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * c\nassert f(g())\n",
        "idx_generation": 386,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(ls: List[int]) -> bool:\n    \"\"\"Check if the list contains consecutive numbers starting from 1.\"\"\"\n    return sorted(ls) == list(range(1, len(ls)+1))\ndef g(n: int):\n    return list(range(1, n+1))\nassert f(g(5))\n",
        "idx_generation": 198,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a='cat') -> bool:\n    \"\"\"Check if a string is a substring of another string\"\"\"\n    return a in s\ndef g(a='cat'):\n    return 'I have a cat'\nassert f(g())\n",
        "idx_generation": 364,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, s='abc', t='def') -> bool:\n    \"\"\"Compare s, t lexicographically. Output 0 if they are =, -1 if s < t, 1 if s > t.\"\"\"\n    if n == 0:\n        return s == t\n    if n == 1:\n        return s > t\n    if n == -1:\n        return s < t\n    return False\ndef g(s='abc', t='def'):\n    if s == t:\n        return 0\n    if s > t:\n        return 1\n    return -1\nassert f(g())\n",
        "idx_generation": 341,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=5, b=2) -> bool:\n    \"\"\"Check if the square root of x divided by a is equal to b\"\"\"\n    return math.sqrt(x) / a == b\n\ndef g(a=5, b=2):\n    return (a * b) ** 2\n\nassert f(g())\n",
        "idx_generation": 354,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(chars: List[str], target: str = 'hello', n: int = 1) -> bool:\n    \"\"\"Check if the target string can be constructed from a combination of the characters\"\"\"\n    return ''.join(chars).count(target) >= n\ndef g(target: str = 'hello', n: int = 1):\n    return list(target * n)\nassert f(g())\n",
        "idx_generation": 393,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if the given list contains duplicate numbers\"\"\"\n    return len(lst) != len(set(lst))\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]\nassert f(g())\n",
        "idx_generation": 202,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, li=[4, 8, 15, 16, 23, 42]) -> bool:\n    \"\"\"Check if a number is in a list\"\"\"\n    return n in li\ndef g(li=[4, 8, 15, 16, 23, 42]):\n    return li[0]\nassert f(g())\n",
        "idx_generation": 365,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring=\"world\") -> bool:\n    \"\"\"Check if the given substring is present in the string\"\"\"\n    return substring in string\ndef g(substring=\"world\"):\n    return \"Hello, world!\"\nassert f(g())\n",
        "idx_generation": 343,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(result: int, x=5, y=3) -> bool:\n    \"\"\"\n    Find the result of taking the power of x raised to the y-th power and then taking the square root of the result.\n    \"\"\"\n    return result == math.sqrt(math.pow(x, y))\n    \ndef g(x=5, y=3):\n    return math.sqrt(math.pow(x, y))\n\nassert f(g())\n",
        "idx_generation": 355,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers that sums up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 203,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], threshold=100) -> bool:\n    \"\"\"Check if the sum of a list of numbers is greater than a threshold.\"\"\"\n    return sum(nums) > threshold\ndef g(threshold=100):\n    return list(range(threshold+1))\nassert f(g())\n",
        "idx_generation": 366,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string, determine if it is a palindrome.\n    A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward.\n\n    Sample input:\n    \"racecar\"\n\n    Sample output:\n    True\n    \"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n",
        "idx_generation": 346,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=4, b=10) -> bool:\n    \"\"\"Check if a number is a power of another number\"\"\"\n    return a ** b == n\ndef g(a = 4, b = 10):\n    ans = a ** b\n    return ans\nassert f(g())\n",
        "idx_generation": 358,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Find a number in the list that is equal to the target\"\"\"\n    return target in nums\ndef g(target=5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 203,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if a given matrix has a value equal to n.\"\"\"\n    return any(n in row for row in matrix)\ndef g(n=3):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "idx_generation": 366,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, sub: str=\"abc\") -> bool:\n    \"\"\"Check if the given string contains the substring\"\"\"\n    return sub in s\n\ndef g(sub=\"abc\"):\n    return \"def\" + sub + \"ghi\"\n\nassert f(g())\n",
        "idx_generation": 346,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, m: int, total=100) -> bool:\n    \"\"\"\n    Determine whether there exists a Pythagorean triple (a, b, c) where a, b, and c are positive integers,\n    a < b < c, and a^m + b^m = c^n.\n\n    Sample Input:\n    n = 2, m = 3\n\n    Sample Output:\n    True\n\n    Explanation:\n    (a, b, c) = (3, 4, 5)\n    3^3 + 4^3 = 5^2\n    \"\"\"\n    for a in range(1, total + 1):\n        for b in range(a + 1, total + 1):\n            c = int(sqrt(a ** m + b ** m))\n            if c ** n == a ** m + b ** m:\n                return True\n    return False\n\ndef g(n=2, m=3):\n    return n, m\n\nassert f(*g())\n",
        "idx_generation": 359,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"\n    Given a matrix and a target number, find if the target number exists in the matrix.\n    \"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    left = 0\n    right = m * n - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        num = matrix[mid // n][mid % n]\n        if num == target:\n            return True\n        elif num < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return False\n\ndef g(target=5):\n    matrix = [\n        [1, 3, 5, 7],\n        [10, 11, 16, 20],\n        [23, 30, 34, 60]\n    ]\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 210,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given list that add up to the target value.\n    If target is provided, return True if there exists a pair of numbers that add up to the target value,\n    otherwise return True if the list is empty.\n    \"\"\"\n    if target:\n        seen = set()\n        for num in nums:\n            if target - num in seen:\n                return True\n            seen.add(num)\n        return False\n    else:\n        return not nums\n        \ndef g(target: int = 0):\n    if target:\n        return [1, 2, 3, 4, 5]\n    else:\n        return []\n        \nassert f(g())\n",
        "idx_generation": 367,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_length=10) -> bool:\n    \"\"\"Check if a string can be repeated to obtain the target length.\"\"\"\n    return len(s * (target_length // len(s))) == target_length\n\ndef g(target_length=10):\n    return \"abcde\"[:target_length]\n\nassert f(g())\n",
        "idx_generation": 347,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=5.0) -> bool:\n    \"\"\"Check if the given number is the square root of a\"\"\"\n    return math.isclose(x**2, a)\ndef g(a = 5.0):\n    return math.sqrt(a)\nassert f(g())\n",
        "idx_generation": 360,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are three elements in the list that sum up to the target value.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), target=10)\n",
        "idx_generation": 218,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(numbers: list) -> bool:\n    \"\"\"Check if the list contains a pair of numbers whose sum is divisible by 7\"\"\"\n    return any((numbers[i] + numbers[j]) % 7 == 0 for i in range(len(numbers)) for j in range(i+1, len(numbers)))\n    \ndef g():\n    \"\"\"Generate a list of 10 random numbers\"\"\"\n    return [random.randint(1, 100) for _ in range(10)]\n\nassert f(g())\n",
        "idx_generation": 367,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s1: str, s2: str, common_length=3) -> bool:\n    \"\"\"Check if the common substring of length common_length exists between s1 and s2\"\"\"\n    return any(s1[i:i+common_length] in s2 for i in range(len(s1)-common_length+1))\ndef g(common_length=3):\n    return 'abc' + 'd' * (common_length-1)\nassert f(g(), 'xyzabcd')\n",
        "idx_generation": 350,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=2, y=3) -> bool:\n    \"\"\"Check if the given number n is a power of x raised to the y.\"\"\"\n    return n == x ** y and math.log(n, x) % 1 == 0\ndef g(x=2, y=3):\n    return x ** y\nassert f(g())\n",
        "idx_generation": 360,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Find Pair Sum\n\n    Given a list of integers, find a pair of numbers that sum up to the target value.\n\n    Example:\n    nums = [2, 5, 7, 3, 9]\n    target = 10\n    output: True\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums=[2, 5, 7, 3, 9], target=10):\n    return nums\nassert f(g())\n",
        "idx_generation": 220,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list of integers is a palindrome.\"\"\"\n    return arr == arr[::-1]\n\ndef g(arr: List[int]):\n    return arr[::-1]\n\nassert f(g([1, 2, 3, 2, 1]))\n",
        "idx_generation": 369,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Check if a substring is present in a string, ignoring case.\"\"\"\n    return substring.lower() in s.lower()\ndef g(substring='abc'):\n    return \"Abcdef\"\nassert f(g())\n",
        "idx_generation": 350,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=123456789, b=987654321) -> bool:\n    \"\"\"Check if the product of two numbers is equal to the given number\"\"\"\n    return n % a == 0 and n % b == 0 and (n == a * b)\ndef g(a=123456789, b=987654321):\n    return a * b\nassert f(g())\n",
        "idx_generation": 361,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: list) -> bool:\n    \"\"\"Check if a list of numbers is sorted in non-decreasing order.\"\"\"\n    return nums == sorted(nums)\ndef g(nums = [1, 5, 3, 7, 9]):\n    return sorted(nums)\nassert f(g())\n",
        "idx_generation": 222,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=11, b=13, c=15) -> bool:\n    \"\"\"Check if n is divisible by any of the numbers a, b, or c\"\"\"\n    return n % a == 0 or n % b == 0 or n % c == 0\ndef g(a=11, b=13, c=15):\n    n = a * b * c\n    return n\nassert f(g())\n",
        "idx_generation": 370,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='Hello', count=3) -> bool:\n    \"\"\"Check if the target string appears count times within s\"\"\"\n    return s.count(target) == count\ndef g(target = 'Hello', count = 3):\n    return 'HelloHelloHello'\nassert f(g())\n",
        "idx_generation": 351,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29], target=6469693230) -> bool:\n    \"\"\"Check if the product of a list of prime numbers is equal to the target number.\"\"\"\n    product = 1\n    for num in nums:\n        product *= num\n    return product == target and n > 0\n\ndef g(nums=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    \"\"\"Find the target number by multiplying a list of prime numbers.\"\"\"\n    target = 1\n    for num in nums:\n        target *= num\n    return target\nassert f(g())\n",
        "idx_generation": 367,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"\n    Three Sum\n\n    Given an array of integers, return True if there exists three numbers such that their sum is equal to the target.\n    Otherwise, return False.\n\n    Example:\n    arr = [-1, 0, 1, 2, -1, -4], target = 0\n    output: True\n    \"\"\"\n    n = len(arr)\n    arr.sort()\n\n    for i in range(n-2):\n        if i > 0 and arr[i] == arr[i-1]:\n            continue\n        left = i + 1\n        right = n - 1\n        while left < right:\n            total = arr[i] + arr[left] + arr[right]\n            if total == target:\n                return True\n            elif total > target:\n                right -= 1\n            else:\n                left += 1\n    \n    return False\n\ndef g(arr=[-1, 0, 1, 2, -1, -4], target=0):\n    \"\"\"\n    Returns the three numbers that sum up to the target.\n    \"\"\"\n    n = len(arr)\n    arr.sort()\n\n    for i in range(n-2):\n        if i > 0 and arr[i] == arr[i-1]:\n            continue\n        left = i + 1\n        right = n - 1\n        while left < right:\n            total = arr[i] + arr[left] + arr[right]\n            if total == target:\n                return [arr[i], arr[left], arr[right]]\n            elif total > target:\n                right -= 1\n            else:\n                left += 1\n    \n    return []\n\nassert f(g())\n",
        "idx_generation": 224,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find the indices of two elements in the matrix that sum up to the target value\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            for k in range(i, len(matrix)):\n                for l in range(len(matrix[k])):\n                    if i != k or j != l:\n                        if matrix[i][j] + matrix[k][l] == target:\n                            return True\n    return False\n\ndef g(target=10):\n    \"\"\"\n    This solution generates a 2D matrix with random values.\n    \"\"\"\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 371,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, a=\"hello\", b=\"world\") -> bool:\n    \"\"\"Check if x is equal to the concatenation of a and b\"\"\"\n    return x == a + b\n\ndef g(a=\"hello\", b=\"world\"):\n    return a + b\n\nassert f(g())\n",
        "idx_generation": 354,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, x=2, y=3, z=5) -> bool:\n    \"\"\"Check if n is evenly divisible by x, y, and z\"\"\"\n    return n % x == 0 and n % y == 0 and n % z == 0\ndef g(x=2, y=3, z=5):\n    n = x * y * z\n    return n\nassert f(g())\n",
        "idx_generation": 370,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target value, determine if the target value exists in the matrix.\n    \"\"\"\n    m, n = len(matrix), len(matrix[0])\n    i, j = 0, n - 1\n    while i < m and j >= 0:\n        if matrix[i][j] == target:\n            return True\n        elif matrix[i][j] < target:\n            i += 1\n        else:\n            j -= 1\n    return False\n\ndef g(matrix: List[List[int]], target: int):\n    return matrix, target\n\n# Example usage:\nmatrix = [\n    [1, 4, 7, 11, 15],\n    [2, 5, 8, 12, 19],\n    [3, 6, 9, 16, 22],\n    [10, 13, 14, 17, 24],\n    [18, 21, 23, 26, 30]\n]\ntarget = 9\nassert f(*g(matrix, target)) == True\n",
        "idx_generation": 226,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, target=10) -> bool:\n    \"\"\"Check if a given number is divisible by the target number.\"\"\"\n    return n % target == 0\n\ndef g(target=10):\n    return math.factorial(target)\n\nassert f(g())\n",
        "idx_generation": 372,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='python') -> bool:\n    \"\"\"Check if the given string contains the given substring\"\"\"\n    return substr in s\ndef g(substr = 'python'):\n    return 'I love ' + substr\nassert f(g())\n",
        "idx_generation": 355,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=50.0, b=2.0) -> bool:\n    \"\"\"Check if the square root of a number is equal to a multiplied by b\"\"\"\n    return math.sqrt(x) == a * b\n\ndef g(a=50.0, b=2.0):\n    x = (a * b) ** 2\n    return x\n\nassert f(g())\n",
        "idx_generation": 372,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target: int):\n    arr = [1, 2, 3, 4, 5]\n    return arr\n\nassert f(g(target=7), target=7)\n",
        "idx_generation": 227,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Check if it is possible to find a pair of numbers in a list whose sum is equal to a target value.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [i for i in range(target-1)]\n\nassert f(g())\n",
        "idx_generation": 372,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, pattern=\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\") -> bool:\n    \"\"\"\n    Given a string s and a pattern, check if the string matches the pattern.\n\n    Sample Input:\n    s = \"test@example.com\"\n    pattern = \"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\"\n\n    Sample Output:\n    True\n\n    Explanation:\n    The string matches the pattern for a valid email address.\n    \"\"\"\n    import re\n    return bool(re.match(pattern, s))\ndef g(s = \"test@example.com\", pattern = \"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\"):\n    return s, pattern\nassert f(*g())\n",
        "idx_generation": 356,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=2) -> bool:\n    \"\"\"Find the square root of a number and check if it is close to the given value\"\"\"\n    return abs(math.sqrt(x) - a) < 10 ** (-3)\ndef g(a = 2):\n    return a ** 2\nassert f(g())\n",
        "idx_generation": 373,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there is a subarray in the list that sums up to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            if sum(arr[i:j]) == target:\n                return True\n    return False\n\ndef g(target: int):\n    arr = [1, 2, 3, 4, 5]\n    return arr\n\nassert f(g(target=9), target=9)\n",
        "idx_generation": 227,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], a=-10, b=10, count=5) -> bool:\n    \"\"\"Find a list of count or more different numbers each between a and b that are divisible by 3\"\"\"\n    return len([n for n in nums if n % 3 == 0]) >= count\ndef g(a = -10, b = 10, count = 5):\n    return [n for n in range(a, b + 1) if n % 3 == 0]\nassert f(g())\n",
        "idx_generation": 372,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, char: str) -> bool:\n    \"\"\"\n    Given a string and a character, return True if the character appears at least twice in the string,\n    otherwise return False.\n    \"\"\"\n    return string.count(char) >= 2\ndef g(string=\"programming\", char=\"m\"):\n    return string, char\nassert f(*g())\n",
        "idx_generation": 357,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(num: float, tolerance=0.0001) -> bool:\n    \"\"\"Check if the given number is a perfect square\"\"\"\n    return abs(sqrt(num) - int(sqrt(num))) < tolerance\ndef g(num = 16, tolerance = 0.0001):\n    return num\nassert f(g())\n",
        "idx_generation": 376,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given an n x m matrix where each row and each column is sorted in ascending order,\n    determine if a target integer exists in the matrix.\n    Return True if the target integer exists, and False otherwise.\n    \"\"\"\n    if not matrix or not matrix[0]:\n        return False\n    n, m = len(matrix), len(matrix[0])\n    row, col = n - 1, 0\n    while row >= 0 and col < m:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            col += 1\n        else:\n            row -= 1\n    return False\n\ndef g(matrix = [[1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 60]], target = 3):\n    return matrix, target\n\nassert f(*g())\n",
        "idx_generation": 230,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, n=10) -> bool:\n    \"\"\"\n    Given a number, check if it is divisible by n.\n\n    Sample Input:\n    num = 20\n    n = 10\n\n    Sample Output:\n    True\n    \"\"\"\n    return num % n == 0\ndef g(n = 10):\n    return n * n\nassert f(g())\n",
        "idx_generation": 373,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if there are at least n occurrences of the same character in a row in the string\"\"\"\n    return any((s[i] == s[i+1] == s[i+2] for i in range(len(s) - 2)))\ndef g(n=3):\n    return \"aaa\" * n\nassert f(g())\n",
        "idx_generation": 359,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, d=3.5) -> bool:\n    \"\"\"Check if the square root of x is greater than d\"\"\"\n    return math.sqrt(x) > d\n\ndef g(d=3.5):\n    return d**2 + 1\n\nassert f(g())\n",
        "idx_generation": 378,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(lst: List[int], n=5) -> bool:\n    \"\"\"\n    Check if the given list contains at least n distinct elements\n    \"\"\"\n    return len(set(lst)) >= n\ndef g(n=5):\n    return random.sample(range(10), n)\nassert f(g())\n",
        "idx_generation": 231,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"\n    Given a list of integers, find any two numbers that add up to the target value.\n\n    Sample Input:\n    [2, 7, 11, 15], 9\n\n    Sample Output:\n    [2, 7]\n    \"\"\"\n    return any((arr[i] + arr[j] == target for i in range(len(arr)) for j in range(i + 1, len(arr))))\ndef g(target=0):\n    return [1, target - 1]\nassert f(g())\n",
        "idx_generation": 374,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, a='Hello', b='World') -> bool:\n    \"\"\"Check if the given string starts with 'Hello' and ends with 'World'\"\"\"\n    return x.startswith(a) and x.endswith(b)\ndef g(a = 'Hello', b = 'World'):\n    return a + ' Python ' + b\nassert f(g())\n",
        "idx_generation": 360,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=4) -> bool:\n    \"\"\"\n    Check if all the elements in the given matrix are divisible by n.\n    \"\"\"\n    for row in matrix:\n        for num in row:\n            if num % n != 0:\n                return False\n    return True\n\ndef g(n=4):\n    return [[4, 8, 12], [16, 20, 24], [28, 32, 36]]\n\nassert f(g())\n",
        "idx_generation": 380,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Check if the target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target = 5):\n    return matrix, target\n\nassert f(*g())\n",
        "idx_generation": 232,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Find if a given target value exists in a matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target = 5):\n    for row in matrix:\n        if target in row:\n            return matrix\n    return []\n\nassert f(g())\n",
        "idx_generation": 374,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, target: str) -> bool:\n    \"\"\"Check if all characters in the string are present in the target string\"\"\"\n    return all(char in target for char in string)\n\ndef g(string = \"hello\", target = \"helloworld\"):\n    return string, target\n\nassert f(*g())\n",
        "idx_generation": 362,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, divisor=5) -> bool:\n    \"\"\"\n    Given a number, check if it is divisible by a specific divisor.\n\n    Example:\n    num = 15\n    divisor = 3\n    The number 15 is divisible by 3.\n    \"\"\"\n    return num % divisor == 0\n\ndef g(num=15, divisor=3):\n    return num\n\nassert f(g())\n",
        "idx_generation": 384,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that adds up to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 233,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 375,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='python') -> bool:\n    \"\"\"Check if a given substring is present in a string\"\"\"\n    return substring in s\ndef g(substring='python'):\n    return 'I love programming in ' + substring\nassert f(g())\n",
        "idx_generation": 362,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, y: float, z: float, target_sum=10.0) -> bool:\n    \"\"\"\n    Determine if the sum of the logarithms of three numbers is equal to a target sum.\n    \"\"\"\n    return math.log(x) + math.log(y) + math.log(z) == target_sum\n\ndef g(target_sum=10.0):\n    x = math.e ** ((target_sum - 2) / 3)\n    y = math.e ** ((target_sum - math.log(x) - 1) / 2)\n    z = math.e ** (target_sum - math.log(x) - math.log(y))\n    return (x, y, z)\n\nassert f(*g())\n",
        "idx_generation": 385,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target = 0) -> bool:\n    \"\"\"Check if there exist two numbers such that their sum is equal to the target value.\"\"\"\n    return any((arr[i] + arr[j] == target for i in range(len(arr)) for j in range(i+1, len(arr))))\ndef g(arr):\n    return arr\nassert f(g([1, 2, 3, 4, 5]), target=9)\n",
        "idx_generation": 238,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if any two numbers in a list sum up to a given target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 376,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=\"Python\") -> bool:\n    \"\"\"Check if a given string contains a target substring.\"\"\"\n    return target in s\ndef g(target=\"Python\"):\n    return \"Hello, I love Python!\"\nassert f(g())\n",
        "idx_generation": 364,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=25) -> bool:\n    \"\"\"Find a number that when squared is equal to a.\"\"\"\n    return math.isclose(x ** 2, a)\ndef g(a=25):\n    return math.sqrt(a)\nassert f(g())\n",
        "idx_generation": 390,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the array is sorted in non-decreasing order.\"\"\"\n    return all((arr[i] <= arr[i+1] for i in range(len(arr)-1)))\ndef g(arr):\n    return arr\nassert f(g([1, 2, 3, 4, 5]))\n",
        "idx_generation": 238,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], n=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the array whose sum is equal to n\"\"\"\n    seen = set()\n    for num in arr:\n        complement = n - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(n=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 376,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char='a') -> bool:\n    \"\"\"Check if the given character is the first character of any word in the string.\"\"\"\n    words = s.split()\n    for word in words:\n        if word[0] == char:\n            return True\n    return False\n\ndef g(char='a'):\n    return \"apple banana cherry durian\"\n\nassert f(g())\n",
        "idx_generation": 366,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=2, b=3, c=4) -> bool:\n    \"\"\"Check if n raised to the power of a is greater than the product of b and the square root of c\"\"\"\n    return n ** a > b * math.sqrt(c)\ndef g(a = 2, b = 3, c = 4):\n    return math.ceil((b * math.sqrt(c)) ** (1 / a))\nassert f(g())\n",
        "idx_generation": 398,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exist three numbers in the list whose sum is equal to the target sum\"\"\"\n    for i in range(len(numbers) - 2):\n        for j in range(i+1, len(numbers) - 1):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target_sum:\n                    return True\n    return False\n\ndef g(target_sum=100):\n    numbers = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 238,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target_sum.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target_sum:\n                    return True\n    return False\ndef g(target_sum=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\nassert f(g())\n",
        "idx_generation": 377,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring: str = 'is') -> bool:\n    \"\"\"\n    Determine if a given string contains a particular substring.\n    If substring is provided, return True if the substring is found in the string, otherwise return True if the string is empty.\n    \"\"\"\n    if substring:\n        return substring in s\n    else:\n        return not s\n        \ndef g(substring: str = 'is'):\n    if substring:\n        return \"This is a string\"\n    else:\n        return \"\"\n        \nassert f(g())\n",
        "idx_generation": 367,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(num: int) -> bool:\n    \"\"\"\n    Find a number that is a perfect square and divisible by 3.\n    \"\"\"\n    return math.sqrt(num) % 1 == 0 and num % 3 == 0\n\ndef g():\n    return 9\n\nassert f(g())\n",
        "idx_generation": 399,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=17) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find three distinct numbers from the list\n    whose sum is equal to the target number.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            for k in range(j + 1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g(target=17):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 247,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Check if a target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target = 5):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 377,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, target='abc') -> bool:\n    \"\"\"Check if a string starts with a target sequence\"\"\"\n    return string.startswith(target)\ndef g(string='abcdefg'):\n    return string\nassert f(g())\n",
        "idx_generation": 370,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if n is a perfect square\"\"\"\n    return math.isqrt(n)**2 == n\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return lst[-1]**2\nassert f(g())\n",
        "idx_generation": 84,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find two numbers from the list\n    whose sum is equal to the target number.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 247,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, start=10) -> bool:\n    \"\"\"Check if the given number is a prime number\"\"\"\n    return all((num % i != 0 for i in range(2, int(num ** 0.5) + 1))) and num > 1\ndef g(start = 10):\n    num = start\n    while True:\n        num += 1\n        if all((num % i != 0 for i in range(2, int(num ** 0.5) + 1))):\n            return num\nassert f(g())\n",
        "idx_generation": 378,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=10) -> bool:\n    \"\"\"Check if a string has a certain number of uppercase letters\"\"\"\n    count = 0\n    for char in s:\n        if char.isupper():\n            count += 1\n    return count == n\n\ndef g(n=10):\n    \"\"\"Generate a string with a certain number of uppercase letters\"\"\"\n    return 'A' * n\n\nassert f(g())\n",
        "idx_generation": 370,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, x=100, y=200) -> bool:\n    \"\"\"Check if the sum of two numbers is divisible by a given number.\"\"\"\n    return (x + y) % n == 0\ndef g(x=100, y=200, n=5):\n    return n\nassert f(g())\n",
        "idx_generation": 85,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]) -> bool:\n    \"\"\"Check if the sum of the main diagonal elements of nums is equal to n\"\"\"\n    return sum(nums[i][i] for i in range(len(nums))) == n\ndef g(nums=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return nums[0][0] + nums[1][1] + nums[2][2]\nassert f(g())\n",
        "idx_generation": 249,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"\n    Given a list of integers, find any combination of three numbers that sum up to the target.\n\n    Sample Input:\n    `[10, 20, 30, 40, 50]`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g(target=100):\n    arr = [random.randint(1, 100) for _ in range(10)]\n    return arr\n\nassert f(g())\n",
        "idx_generation": 379,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(strings: List[str], target='abc') -> bool:\n    \"\"\"Check if any of the strings in the list contains the target substring\"\"\"\n    for s in strings:\n        if target in s:\n            return True\n    return False\n\ndef g(target='abc'):\n    \"\"\"\n    This solution generates a list of random strings.\n    \"\"\"\n    strings = ['def', 'ghi', 'abc', 'jkl', 'mno']\n    return strings\n\nassert f(g())\n",
        "idx_generation": 371,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(e: List[int], a=5, b=7, c=3, d=1) -> bool:\n    \"\"\"\n    Check if the given numbers are the coefficients of the equation y = ax + b and y = cx + d,\n    and if they intersect at a point with integer coordinates.\n    \"\"\"\n    x = (d - b) / (a - c)\n    return x.is_integer() and (a * x + b).is_integer() and (c * x + d).is_integer()\ndef g(a=5, b=7, c=3, d=1):\n    return [a, b, c, d]\nassert f(g())\n",
        "idx_generation": 88,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) -> bool:\n    \"\"\"\n    Check if a number is prime.\n    \"\"\"\n    if num < 2:\n        return False\n    for prime in primes:\n        if prime * prime > num:\n            break\n        if num % prime == 0:\n            return False\n    return True\n\ndef g():\n    num = 53\n    return num\n\nassert f(g())\n",
        "idx_generation": 252,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the matrix is a diagonal matrix.\"\"\"\n    return all((matrix[i][j] == 0 for i in range(len(matrix)) for j in range(len(matrix[i])) if i != j))\ndef g(matrix: List[List[int]]):\n    return matrix\nassert f(g([[1, 0, 0], [0, 2, 0], [0, 0, 3]]))\n",
        "idx_generation": 379,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc') -> bool:\n    \"\"\"Check if the given substring is present in the given string\"\"\"\n    return substring in string\ndef g(substring = 'abc'):\n    return \"def\" + substring + \"ghi\"\nassert f(g())\n",
        "idx_generation": 373,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=5, b=17, c=31) -> bool:\n    \"\"\"Check if the number is divisible by a, b, and c\"\"\"\n    return x % a == 0 and x % b == 0 and x % c == 0\ndef g(a = 5, b = 17, c = 31):\n    x = a * b * c\n    return x\nassert f(g())\n",
        "idx_generation": 92,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(points: List[Tuple[int, int]], origin=(0, 0)) -> bool:\n    \"\"\"Check if all points are located in the first quadrant (positive x and y values)\"\"\"\n    return all((x > origin[0] and y > origin[1] for x, y in points))\ndef g():\n    return [(1, 2), (3, 4), (5, 6)]\nassert f(g())\n",
        "idx_generation": 252,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], n=3) -> bool:\n    \"\"\"\n    Check if there exists a subarray of length n in the given array such that the sum of its elements is equal to 0.\n    \"\"\"\n    for i in range(len(arr) - n + 1):\n        if sum(arr[i:i+n]) == 0:\n            return True\n    return False\n\ndef g(n=3):\n    return [0] * n\n\nassert f(g())\n",
        "idx_generation": 380,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"\n    Check if the given string contains at least n uppercase letters.\n    \"\"\"\n    return sum(1 for c in s if c.isupper()) >= n\n\ndef g(n=3):\n    \"\"\"\n    Generate a random string with a mix of lowercase and uppercase letters.\n    \"\"\"\n    import random\n    import string\n    return ''.join(random.choices(string.ascii_letters, k=10))\nassert f(g())\n",
        "idx_generation": 374,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=3) -> bool:\n    \"\"\"Check if the number is divisible by the given divisor\"\"\"\n    return n % m == 0\ndef g(m=3):\n    return m\nassert f(g())\n",
        "idx_generation": 93,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if the list is sorted in non-descending order.\"\"\"\n    return lst == sorted(lst)\ndef g():\n    lst = [5, 2, 9, 1, 7]\n    return sorted(lst)\nassert f(g())\n",
        "idx_generation": 253,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(d: datetime.date, y=2022, m=10, day=31) -> bool:\n    \"\"\"Check if the given date is a specific day of the week.\"\"\"\n    return d.year == y and d.month == m and d.day == day and d.weekday() == 0\n\ndef g(y=2022, m=10, day=31):\n    return datetime.date(y, m, day)\n\nassert f(g())\n",
        "idx_generation": 381,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=0) -> bool:\n    \"\"\"\n    Given a string, determine if it is a palindrome when ignoring non-alphanumeric characters.\n\n    Sample Input:\n    \"A man, a plan, a canal: Panama\"\n\n    Sample Output:\n    True\n    \"\"\"\n    s = ''.join((c.lower() for c in s if c.isalnum()))\n    return s == s[::-1]\ndef g():\n    return \"A man, a plan, a canal: Panama\"\nassert f(g())\n",
        "idx_generation": 374,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, y: int, z: int, t=100) -> bool:\n    \"\"\"Check if the sum of three numbers is equal to a target number.\"\"\"\n    return x + y + z == t\ndef g(t=100):\n    return 40, 30, 30\nassert f(*g())\n",
        "idx_generation": 93,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: list, target=5) -> bool:\n    \"\"\"Check if the target is present in the array\"\"\"\n    return target in arr\ndef g(target = 5):\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return arr\nassert f(g())\n",
        "idx_generation": 254,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, lst: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if n is a prime number and also present in the given list\"\"\"\n    return n in lst and all(n % i != 0 for i in range(2, int(n**0.5)+1))\ndef g(lst: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return next(x for x in lst if all(x % i != 0 for i in range(2, int(x**0.5)+1)))\nassert f(g())\n",
        "idx_generation": 382,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc') -> bool:\n    \"\"\"Check if a given substring exists in a string.\"\"\"\n    return substring in string\n\ndef g(string = 'abcdefg', substring = 'abc'):\n    return string\n\nassert f(g())\n",
        "idx_generation": 374,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(num: int, n=15) -> bool:\n    \"\"\"\n    Check if a given number is a perfect square and if it is divisible by a given number.\n    \"\"\"\n    return sqrt(num) == int(sqrt(num)) and num % n == 0\n\ndef g(n=15):\n    return n**2\nassert f(g())\n",
        "idx_generation": 97,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find if there exists a pair of numbers in the list that adds up to the target number.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 7\n\n    Sample Output:\n    True\n    \"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\n\ndef g(nums = [1, 2, 3, 4, 5], target = 7):\n    random.shuffle(nums)\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 256,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) -> bool:\n    \"\"\"Check if the given number is a multiple of any number in the list.\"\"\"\n    return any(n % num == 0 for num in nums)\ndef g(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]):\n    return nums[0]\nassert f(g())\n",
        "idx_generation": 382,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='Python') -> bool:\n    \"\"\"Check if a substring is present in a string.\"\"\"\n    return substr in s\ndef g(substr='Python'):\n    return f\"The programming language is {substr}\"\nassert f(g())\n",
        "idx_generation": 376,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=7, b=5, c=10) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(c)])\ndef g(a = 7, b = 5, c = 10):\n    return -a + sum([b * i for i in range(c)])\nassert f(g())\n",
        "idx_generation": 97,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the given number n is in the list lst\"\"\"\n    return n in lst\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return lst[0]\nassert f(g())\n",
        "idx_generation": 256,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, strings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'indigo', 'jackfruit']) -> bool:\n    \"\"\"Check if the given string is the longest string in the list.\"\"\"\n    return s in strings and max(len(t) for t in strings) == len(s)\ndef g(strings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'indigo', 'jackfruit']):\n    return max(strings, key=len)\nassert f(g())\n",
        "idx_generation": 383,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the string is a palindrome\"\"\"\n    return s == s[::-1]\ndef g(s: str = \"madam\"):\n    return s\nassert f(g())\n",
        "idx_generation": 377,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a=3, b=4, c=5) -> bool:\n    \"\"\"Check if the sum of a, b, and c is equal to the length of s\"\"\"\n    return len(s) == a + b + c\ndef g(a = 3, b = 4, c = 5):\n    return \"x\" * a + \"y\" * b + \"z\" * c\nassert f(g())\n",
        "idx_generation": 98,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the given number is a multiple of any number in the list\"\"\"\n    for num in lst:\n        if n % num == 0:\n            return True\n    return False\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return lst[-1]\nassert f(g())\n",
        "idx_generation": 261,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=1000) -> bool:\n    \"\"\"\n    Given a list of integers, find a pair of numbers whose sum is equal to the target value.\n\n    Sample Input:\n    `[200, 400, 500, 300, 250, 350]`\n\n    Sample Output:\n    `(500, 500)`\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(arr=[200, 400, 500, 300, 250, 350]):\n    return arr[2], arr[2]\n\nassert f(g())\n",
        "idx_generation": 383,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, num_repetitions=3) -> bool:\n    \"\"\"Repeat the given string num_repetitions times.\"\"\"\n    repeated_string = string * num_repetitions\n    return repeated_string\ndef g(num_repetitions=3):\n    string = \"Hello, world! \"\n    return string\nassert f(g()) == \"Hello, world! Hello, world! Hello, world! \"\n",
        "idx_generation": 377,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(i: int) -> bool:\n    \"\"\"Find a number whose square root is an integer.\"\"\"\n    return math.sqrt(i).is_integer()\ndef g():\n    return 16\nassert f(g())\n",
        "idx_generation": 100,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(lst: list, n=3) -> bool:\n    \"\"\"Check if a number is present in the list.\"\"\"\n    return n in lst\n\ndef g(n=3):\n    lst = [random.randint(1, 10) for _ in range(5)]\n    return lst\n\nassert f(g())\n",
        "idx_generation": 262,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=5, target=20) -> bool:\n    \"\"\"Find if there exists a subarray of length k with sum equal to target\"\"\"\n    assert len(nums) >= k and k > 0\n    for i in range(len(nums) - k + 1):\n        if sum(nums[i:i+k]) == target:\n            return True\n    return False\ndef g(k=5, target=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 384,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport re\n\ndef f(s: str, pattern=r'\\d{3}-\\d{3}-\\d{4}') -> bool:\n    \"\"\"Check if the string matches a specific pattern\"\"\"\n    return bool(re.match(pattern, s))\n\ndef g(pattern=r'\\d{3}-\\d{3}-\\d{4}'):\n    return '123-456-7890'\n\nassert f(g())\n",
        "idx_generation": 378,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, x: float) -> bool:\n    \"\"\"Check if the square root of n is greater than x\"\"\"\n    return sqrt(n) > x\n\ndef g(x: float):\n    return x**2 + 1\n\nassert f(g(x=3), x=2)\n",
        "idx_generation": 102,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers `arr`, determine if there are two elements in the list that add up to the target value.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [2, 4, 6, 8]\nassert f(g())\n",
        "idx_generation": 267,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find two distinct indices such that the sum of the numbers\n    at those indices equals the target number.\n    \"\"\"\n    seen = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in seen:\n            return True\n        seen[num] = i\n    return False\n\ndef g(nums=[3, 5, 2, 8, 11, 9], target=20):\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 385,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s1: str, s2='puzzle') -> bool:\n    \"\"\"\n    Check if all characters in s1 are also present in s2.\n\n    Sample Input:\n    `\"puzzle\"`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    return set(s1).issubset(set(s2))\ndef g(s2 = 'puzzle'):\n    return s2\nassert f(g())\n",
        "idx_generation": 378,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=3, y=5) -> bool:\n    \"\"\"Check if a number is a perfect square or a perfect cube\"\"\"\n    sqrt = math.isqrt(n)\n    cbrt = round(n ** (1/3))\n    return sqrt ** 2 == n or cbrt ** 3 == n\ndef g(x=3, y=5):\n    n = max(x, y)\n    while not f(n, x, y):\n        n += 1\n    return n\nassert f(g())\n",
        "idx_generation": 107,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a non-empty sublist of a given list of integers that has a sum equal to the target.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 7\n\n    Sample Output:\n    True\n    \"\"\"\n    for r in range(1, len(nums) + 1):\n        for subset in itertools.combinations(nums, r):\n            if sum(subset) == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=7):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 267,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, target=42, threshold=5, square=True) -> bool:\n    \"\"\"Find if the given number, or its square if `square` is True, is greater than the target number by at least the threshold.\"\"\"\n    if square:\n        return num**2 - target >= threshold\n    else:\n        return num - target >= threshold\n\ndef g(target=42, threshold=5, square=True):\n    num = 7\n    if square:\n        return num ** 2\n    else:\n        return num\n\nassert f(g())\n",
        "idx_generation": 386,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, t='python') -> bool:\n    \"\"\"\n    Given two strings, check if the first string is a subsequence of the second string.\n\n    Sample Input:\n    `(\"ton\", \"python\")`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    i = 0\n    for c in t:\n        if i < len(s) and c == s[i]:\n            i += 1\n    return i == len(s)\n\ndef g(s='python', t='python'):\n    return s\n\nassert f(g())\n",
        "idx_generation": 379,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=123456789, b=987654321) -> bool:\n    \"\"\"Check if the sum of two numbers is equal to a given number\"\"\"\n    return a + b == n\ndef g(a=123456789, b=987654321):\n    return a + b\nassert f(g())\n",
        "idx_generation": 109,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the product of any two numbers in lst is equal to n\"\"\"\n    return any(n / num in lst for num in lst)\ndef g(lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return len(lst)\nassert f(g())\n",
        "idx_generation": 270,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\ndef f(nums: List[int], target=10, operation='+') -> bool:\n    \"\"\"Check if the sum or product of the given list of numbers equals the target number.\"\"\"\n    if operation == '+':\n        return sum(nums) == target\n    elif operation == '*':\n        return math.prod(nums) == target\n    else:\n        return False\n\ndef g(target=10, operation='+'):\n    nums = [2, 3, 5]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 386,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string, return True if all the characters in the string are unique, False otherwise.\n    \"\"\"\n    return len(set(s)) == len(s)\n\ndef g():\n    return \"abcdefghijklmnopqrstuvwxyz\"\n\nassert f(g())\n",
        "idx_generation": 382,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=2, b=5) -> bool:\n    \"\"\"Check if n is a perfect square divisible by a and b.\"\"\"\n    return math.isqrt(n) ** 2 == n and n % a == 0 and n % b == 0\n\ndef g(a=2, b=5):\n    return (a * b) ** 2\n\nassert f(g())\n",
        "idx_generation": 111,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Return True if there are exactly k consecutive numbers in the list\"\"\"\n    nums.sort()\n    for i in range(len(nums) - k + 1):\n        if nums[i] + k - 1 == nums[i + k - 1]:\n            return True\n    return False\ndef g(k = 3):\n    return [1, 2, 3, 4, 5, 6]\nassert f(g())\n",
        "idx_generation": 270,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the number n is divisible by all elements in the list a\"\"\"\n    for num in a:\n        if n % num != 0:\n            return False\n    return True\n\ndef g(a=[1, 2, 3, 4, 5]):\n    n = 1\n    for num in a:\n        n *= num\n    return n\n\nassert f(g())\n",
        "idx_generation": 389,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, sub='world') -> bool:\n    \"\"\"Check if a substring is present in a string\"\"\"\n    return sub in s\ndef g(sub='world'):\n    return \"hello \" + sub\nassert f(g())\n",
        "idx_generation": 388,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], t=0, a=0, e=0, s=1) -> bool:\n    \"\"\"Check if the sum of sublist values is equal to t\"\"\"\n    return t == sum([x[i] for i in range(a, e, s)])\n    \ndef g(t = 0, a = 0, e = 0, s = 1):\n    x = [1, 2, 3, 4, 5]\n    return x\nassert f(g())\n",
        "idx_generation": 113,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], n=10) -> bool:\n    \"\"\"Check if the sum of the numbers is greater than a specific value\"\"\"\n    return sum(nums) > n\ndef g(nums=[1, 2, 3, 4, 5], n=10):\n    return nums\nassert f(g())\n",
        "idx_generation": 271,
        "target_skills": null
    }
]