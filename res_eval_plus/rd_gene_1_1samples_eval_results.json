{"date": "2024-02-20 16:09", "hash": "84f4b93a1270b492e4c54d5212da7a5b", "eval": {"HumanEval/6": [{"task_id": "HumanEval/6", "solution": "\nfrom typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    levels = []\n    max_level = 0\n    current_level = 0\n\n    for char in paren_string:\n        if char == '(':\n            current_level += 1\n            max_level = max(max_level, current_level)\n        elif char == ')':\n            current_level -= 1\n        levels.append(max_level)\n\n    return levels\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["((()))"]]}], "HumanEval/2": [{"task_id": "HumanEval/2", "solution": "\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    # Extract the integer part and the decimal part from the number\n    integer_part = int(number)\n    decimal_part = number - integer_part\n\n    # Check if the decimal part is less than 1\n    if decimal_part < 1:\n        return decimal_part\n    else:\n        # If the decimal part is not less than 1, round it to the nearest decimal\n        return round(decimal_part, 1)\n\n# Test the function\nprint(truncate_number(3.5))  # Output: 0.5\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/3": [{"task_id": "HumanEval/3", "solution": "\nfrom typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/4": [{"task_id": "HumanEval/4", "solution": "\nfrom typing import List\nimport math\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    diffs = [abs(x - mean) for x in numbers]\n    mad = sum(diffs) / len(diffs)\n    return mad\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/0": [{"task_id": "HumanEval/0", "solution": "\nfrom typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n\n# Test cases\nprint(has_close_elements([1.0, 2.0, 3.0], 0.5))  # False\nprint(has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3))  # True\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/12": [{"task_id": "HumanEval/12", "solution": "\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/7": [{"task_id": "HumanEval/7", "solution": "\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/9": [{"task_id": "HumanEval/9", "solution": "\n    result = []\n    max_val = float('-inf')\n    \n    for num in numbers:\n        max_val = max(max_val, num)\n        result.append(max_val)\n    \n    return result\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/5": [{"task_id": "HumanEval/5", "solution": "\nfrom typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n\n    result = []\n    for number in numbers:\n        result.append(number)\n        result.append(delimeter)\n\n    # Remove the last extra delimeter\n    result = result[:-1]\n\n    return result\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/1": [{"task_id": "HumanEval/1", "solution": "\nfrom typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")\n    groups = []\n    stack = []\n    start = 0\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            if len(stack) == 0:\n                start = i\n            stack.append('(')\n        elif paren_string[i] == ')':\n            stack.pop()\n            if len(stack) == 0:\n                groups.append(paren_string[start:i+1])\n    return groups\n\nprint(separate_paren_groups('( ) (( )) (( )( ))'))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/13": [{"task_id": "HumanEval/13", "solution": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/10": [{"task_id": "HumanEval/10", "solution": "\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if is_palindrome(string):\n        return string\n\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            prefix = string[:i]\n            return string + prefix[::-1]\n\n    return string + string[::-1]\n\nprint(make_palindrome(''))  # ''\nprint(make_palindrome('cat'))  # 'catac'\nprint(make_palindrome('cata'))  # 'catac'\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/14": [{"task_id": "HumanEval/14", "solution": "\nfrom typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[0:i] for i in range(1, len(string) + 1)]\n\n# Testing the function\nprint(all_prefixes('abc'))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/11": [{"task_id": "HumanEval/11", "solution": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # Check if lengths of the strings are equal\n    if len(a) != len(b):\n        raise ValueError(\"Strings should be of the same length\")\n\n    # Initialize result as empty string\n    result = \"\"\n    \n    # Loop through each character in the strings\n    for i in range(len(a)):\n        # Perform XOR operation on the characters and append to result\n        result += str(int(a[i]) ^ int(b[i]))\n    \n    return result\n\nprint(string_xor('010', '110'))  # Output: '100'\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/8": [{"task_id": "HumanEval/8", "solution": "\nfrom typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_result = 0\n    product = 1\n    for num in numbers:\n        sum_result += num\n        product *= num\n    return (sum_result, product)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/17": [{"task_id": "HumanEval/17", "solution": "\nfrom typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    # Split the string into a list of notes\n    notes = music_string.split()\n\n    # Initialize a list to store the note lengths\n    note_lengths = []\n\n    # Iterate over the notes\n    for note in notes:\n        # If the note is a whole note, add 4 to the note length list\n        if 'o' in note:\n            note_lengths.append(4)\n        # If the note is a half note, add 2 to the note length list\n        elif 'o|' in note:\n            note_lengths.append(2)\n        # If the note is a quarter note, add 1 to the note length list\n        elif '.|' in note:\n            note_lengths.append(1)\n\n    return note_lengths\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["o| o| .| .| o o o o"]], "plus_fail_tests": []}], "HumanEval/16": [{"task_id": "HumanEval/16", "solution": "\ndef count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/21": [{"task_id": "HumanEval/21", "solution": "\nfrom typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_number = min(numbers)\n    max_number = max(numbers)\n    difference = max_number - min_number\n\n    return [(number - min_number) / difference for number in numbers]\n\n\n# Test cases\nprint(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]))  # should return [0.0, 0.25, 0.5, 0.75, 1.0]\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[0.1, 0.5, 0.9, 0.3, 0.7]]]}], "HumanEval/19": [{"task_id": "HumanEval/19", "solution": "\nfrom typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n\n    # Define the mapping from string to integer\n    number_mapping = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    # Split the input string into a list of words\n    words = numbers.split()\n\n    # Map each word to its corresponding integer and sort the list\n    sorted_words = sorted(words, key=lambda word: number_mapping[word])\n\n    # Join the sorted words back into a string\n    return ' '.join(sorted_words)\n\nprint(sort_numbers('three one five'))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/30": [{"task_id": "HumanEval/30", "solution": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num > 0]\n\nprint(get_positive([-1, 2, -4, 5, 6]))\nprint(get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/20": [{"task_id": "HumanEval/20", "solution": "\nfrom typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    if len(numbers) < 2:\n        raise ValueError(\"The input list should have at least two elements\")\n\n    min_diff = float('inf')\n    closest_elements = (None, None)\n\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            diff = numbers[i] - numbers[j]\n            if diff < min_diff:\n                min_diff = diff\n                closest_elements = (numbers[i], numbers[j])\n\n    return closest_elements\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/29": [{"task_id": "HumanEval/29", "solution": "\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [string for string in strings if string.startswith(prefix)]\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/23": [{"task_id": "HumanEval/23", "solution": "\ndef strlen(string: str) -> int:\n    return len(string)\n\nprint(strlen(''))  # Output: 0\nprint(strlen('abc'))  # Output: 3\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/25": [{"task_id": "HumanEval/25", "solution": "\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n = n / divisor\n        else:\n            divisor += 1\n    return factors\n\nprint(factorize(8))\nprint(factorize(25))\nprint(factorize(70))\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/18": [{"task_id": "HumanEval/18", "solution": "\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/22": [{"task_id": "HumanEval/22", "solution": "\nfrom typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[true, false, null, 0, -10, "test", [], {}, 3.14]]]}], "HumanEval/26": [{"task_id": "HumanEval/26", "solution": "\nfrom typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 2, 4, 3, 5]]], "plus_fail_tests": []}], "HumanEval/27": [{"task_id": "HumanEval/27", "solution": "\ndef flip_case(string: str) -> str:\n    \"\"\"\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n\n# Test\nprint(flip_case('Hello'))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/28": [{"task_id": "HumanEval/28", "solution": "\nfrom typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/32": [{"task_id": "HumanEval/32", "solution": "\nimport math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    Return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\"\n    xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only zero points, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    # find the maximum non-zero coefficient in xs\n    max_coeff = max(filter(lambda x: x != 0, xs), key=abs)\n\n    # find the index of the maximum non-zero coefficient in xs\n    max_index = xs.index(max_coeff)\n\n    # return the point at which the polynomial equals zero\n    return -max_coeff / max_index\n\n# Test the function\nprint(round(find_zero([1, 2]), 2)) # f(x) = 1 + 2x\nprint(round(find_zero([-6, 11, -6, 1]), 2)) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/31": [{"task_id": "HumanEval/31", "solution": "def is_prime(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n# Test cases\nprint(is_prime(6))\nprint(is_prime(101))\nprint(is_prime(11))\nprint(is_prime(13441))\nprint(is_prime(61))\nprint(is_prime(4))\nprint(is_prime(1))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/38": [{"task_id": "HumanEval/38", "solution": "\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # uncycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/37": [{"task_id": "HumanEval/37", "solution": "def sort_even(l: list):\n    even_indices_values = [l[i] for i in range(0, len(l), 2)]\n    even_indices_values.sort()\n    for i in range(0, len(l), 2):\n        l[i] = even_indices_values[i // 2]\n    return l\n\nprint(sort_even([1, 2, 3]))\nprint(sort_even([5, 6, 3, 4]))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/33": [{"task_id": "HumanEval/33", "solution": "\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    divisible_by_three_indices = [i for i in range(len(l)) if i % 3 == 0]\n    divisible_by_three_values = sorted([l[i] for i in divisible_by_three_indices])\n\n    l_prime = list(l)\n    for i, divisible_by_three_value in zip(divisible_by_three_indices, divisible_by_three_values):\n        l_prime[i] = divisible_by_three_value\n\n    return l_prime\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/34": [{"task_id": "HumanEval/34", "solution": "\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(list(set(l)))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/35": [{"task_id": "HumanEval/35", "solution": "\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/41": [{"task_id": "HumanEval/41", "solution": "\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/44": [{"task_id": "HumanEval/44", "solution": "\ndef change_base(x: int, base: int) -> str:\n    convert_string = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    if x < base:\n        return convert_string[x]\n    else:\n        return change_base(x // base, base) + convert_string[x % base]\n\nprint(change_base(8, 3))  # Outputs: '22'\nprint(change_base(8, 2))  # Outputs: '1000'\nprint(change_base(7, 2))  # Outputs: '111'\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/42": [{"task_id": "HumanEval/42", "solution": "\ndef incr_list(l: list):\n    return [i + 1 for i in l]\n\n# Testing the function\nprint(incr_list([1, 2, 3]))\nprint(incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/43": [{"task_id": "HumanEval/43", "solution": "\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    if len(l) < 2:\n        return False\n\n    seen = set()\n    for num in l:\n        if num in seen:\n            return True\n        seen.add(-num)\n\n    return False\n\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/40": [{"task_id": "HumanEval/40", "solution": "\ndef triples_sum_to_zero(l: list):\n    n = len(l)\n    for i in range(0, n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/48": [{"task_id": "HumanEval/48", "solution": "\ndef is_palindrome(text: str):\n    text = text.lower()\n    return text == text[::-1]\n\nprint(is_palindrome(''))\nprint(is_palindrome('aba'))\nprint(is_palindrome('aaaaa'))\nprint(is_palindrome('zbcd'))\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["Rats live on no evil star"]]}], "HumanEval/47": [{"task_id": "HumanEval/47", "solution": "\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    sorted_list = sorted(l)\n    length = len(sorted_list)\n    \n    if length % 2 == 0:\n        median1 = sorted_list[length // 2]\n        median2 = sorted_list[length // 2 - 1]\n        median = (median1 + median2) / 2\n    else:\n        median = sorted_list[length // 2]\n        \n    return median\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/45": [{"task_id": "HumanEval/45", "solution": "\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h\n\n# Test the function\nprint(triangle_area(5, 3))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/46": [{"task_id": "HumanEval/46", "solution": "\ndef fib4(n: int) -> int:\n    # Define the base cases\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n\n    # Define an array to store the fib4 sequence\n    fib4_sequence = [0] * (n + 1)\n\n    # Initialize the first four elements\n    fib4_sequence[0] = 0\n    fib4_sequence[1] = 0\n    fib4_sequence[2] = 2\n    fib4_sequence[3] = 0\n\n    # Compute the fib4 sequence\n    for i in range(4, n + 1):\n        fib4_sequence[i] = fib4_sequence[i - 1] + fib4_sequence[i - 2] + fib4_sequence[i - 3] + fib4_sequence[i - 4]\n\n    # Return the n-th element\n    return fib4_sequence[n]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/50": [{"task_id": "HumanEval/50", "solution": "\n    return \"\".join([chr(((ord(ch) - 6 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/51": [{"task_id": "HumanEval/51", "solution": "\ndef remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])\n\n# Test cases\nprint(remove_vowels(''))\nprint(remove_vowels(\"abcdef\\nghijklm\"))\nprint(remove_vowels('abcdef'))\nprint(remove_vowels('aaaaa'))\nprint(remove_vowels('aaBAA'))\nprint(remove_vowels('zbcd'))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/55": [{"task_id": "HumanEval/55", "solution": "\ndef fib(n: int) -> int:\n    if n <= 2:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\nprint(fib(10))\nprint(fib(1))\nprint(fib(8))\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/56": [{"task_id": "HumanEval/56", "solution": "\ndef correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/52": [{"task_id": "HumanEval/52", "solution": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n\n    for num in l:\n        if num >= t:\n            return False\n    return True\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/54": [{"task_id": "HumanEval/54", "solution": "\ndef same_chars(s0: str, s1: str) -> bool:\n    return sorted(s0) == sorted(s1)\n\n# Test cases\nprint(same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc'))  # True\nprint(same_chars('abcd', 'dddddddabc'))  # True\nprint(same_chars('dddddddabc', 'abcd'))  # True\nprint(same_chars('eabcd', 'dddddddabc'))  # False\nprint(same_chars('abcd', 'dddddddabce'))  # False\nprint(same_chars('eabcdzzzz', 'dddzzzzzzzddddabc'))  # False\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["aaabbbccc", "abbabcbc"]]}], "HumanEval/53": [{"task_id": "HumanEval/53", "solution": "\ndef add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/58": [{"task_id": "HumanEval/58", "solution": "\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common_list = sorted(list(set(l1) & set(l2)))\n    return common_list\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/59": [{"task_id": "HumanEval/59", "solution": "\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/57": [{"task_id": "HumanEval/57", "solution": "\ndef monotonic(l: list):\n    if len(l) < 2:\n        return True\n    \n    diff = l[1] - l[0]\n    for i in range(2, len(l)):\n        if diff == 0:\n            diff = l[i] - l[i - 1]\n        if diff > 0:\n            if l[i] - l[i - 1] < 0:\n                return False\n        else:\n            if l[i] - l[i - 1] > 0:\n                return False\n    \n    return True\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/64": [{"task_id": "HumanEval/64", "solution": "\ndef vowels_count(s):\n    vowels = \"aeiou\"\n    count = 0\n    for char in s.lower():\n        if char in vowels:\n            count += 1\n    if s[-1].lower() == \"y\":\n        count += 1\n    return count\n\n# Test cases\nprint(vowels_count(\"abcde\"))  # Should print 2\nprint(vowels_count(\"ACEDY\"))  # Should print 3\nprint(vowels_count(\"Testing\"))  # Should print 4\nprint(vowels_count(\"Code\"))  # Should print 2\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[""]]}], "HumanEval/61": [{"task_id": "HumanEval/61", "solution": "\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack or stack.pop() != \"(\":\n                return False\n    return not stack\n\n# Test cases\nprint(correct_bracketing(\"(\"))  # False\nprint(correct_bracketing(\"()\"))  # True\nprint(correct_bracketing(\"(()())\"))  # True\nprint(correct_bracketing(\")(()\"))  # False\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/62": [{"task_id": "HumanEval/62", "solution": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n    derivative_list = [i * xs[i] for i in range(1, len(xs))]\n    return derivative_list\n\nprint(derivative([3, 1, 2, 4, 5]))\nprint(derivative([1, 2, 3]))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/63": [{"task_id": "HumanEval/63", "solution": "\ndef fibfib(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b\n        return c\n\nprint(fibfib(1))  # Output: 0\nprint(fibfib(5))  # Output: 4\nprint(fibfib(8))  # Output: 24\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5]], "plus_fail_tests": []}], "HumanEval/69": [{"task_id": "HumanEval/69", "solution": "def search(lst):\n    freq = {}\n    for i in lst:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n\n    for i in range(len(lst), 0, -1):\n        if freq[i] >= i:\n            return i\n\n    return -1\n\nprint(search([4, 1, 2, 2, 3, 1]))\nprint(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))\nprint(search([5, 5, 4, 4, 4]))\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/65": [{"task_id": "HumanEval/65", "solution": "\ndef circular_shift(x, shift):\n    x = str(x)\n    digits = list(x)\n    if shift > len(digits):\n        shift = shift % len(digits)\n    return digits[-shift:] + digits[:-shift]\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/68": [{"task_id": "HumanEval/68", "solution": "\ndef pluck(arr):\n    even_values = [value for value in arr if value % 2 == 0]\n    if even_values:\n        smallest_even_value = min(even_values)\n        smallest_even_indices = [index for index, value in enumerate(arr) if value == smallest_even_value]\n        return [smallest_even_value, min(smallest_even_indices)]\n    else:\n        return []\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/67": [{"task_id": "HumanEval/67", "solution": "\ndef fruit_distribution(s, n):\n    # Splitting the string into a list of words\n    words = s.split()\n\n    # Getting the number of apples and oranges\n    apples = int(words[0].split(' ')[0])\n    oranges = int(words[1].split(' ')[0])\n\n    # Return the number of mango fruits\n    return n - apples - oranges\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/66": [{"task_id": "HumanEval/66", "solution": "\ndef digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())\n\n# Test cases\nprint(digitSum(\"\")) # Expected: 0\nprint(digitSum(\"abAB\")) # Expected: 131\nprint(digitSum(\"abcCd\")) # Expected: 67\nprint(digitSum(\"helloE\")) # Expected: 69\nprint(digitSum(\"woArBld\")) # Expected: 131\nprint(digitSum(\"aAaaaXa\")) # Expected: 153\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/71": [{"task_id": "HumanEval/71", "solution": "\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n\n    # Check if the three numbers can form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n\n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n\n    # Calculate the area using Heron's formula\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\n    # Return the area rounded to 2 decimal points\n    return round(area, 2)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/75": [{"task_id": "HumanEval/75", "solution": "\ndef is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, int(a**0.5) + 1):\n        if a % i == 0:\n            if is_prime(i):\n                factors.append(i)\n            if is_prime(a // i):\n                factors.append(a // i)\n    factors = list(set(factors))\n    factors.sort()\n\n    if len(factors) != 3:\n        return False\n\n    return factors[0]**2 == a and factors[1]**2 == factors[0] * factors[2] and factors[2]**2 == a\n\n# Test cases\nprint(is_multiply_prime(30))  # True\nprint(is_multiply_prime(50))  # False\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[30]], "plus_fail_tests": [[99]]}], "HumanEval/70": [{"task_id": "HumanEval/70", "solution": "\ndef strange_sort_list(lst):\n    result = []\n    while lst:\n        result.append(min(lst))\n        lst.remove(min(lst))\n        if lst:\n            result.append(max(lst))\n            lst.remove(max(lst))\n    return result\n\nprint(strange_sort_list([1, 2, 3, 4])) # [1, 4, 2, 3]\nprint(strange_sort_list([5, 5, 5, 5])) # [5, 5, 5, 5]\nprint(strange_sort_list([])) # []\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/73": [{"task_id": "HumanEval/73", "solution": "\ndef smallest_change(arr):\n    n = len(arr)\n    changes = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-i-1]:\n            changes += 1\n    return changes\n\nprint(smallest_change([1, 2, 3, 5, 4, 7, 9, 6]))\nprint(smallest_change([1, 2, 3, 4, 3, 2, 2]))\nprint(smallest_change([1, 2, 3, 2, 1]))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/72": [{"task_id": "HumanEval/72", "solution": "\ndef will_it_fly(q, w):\n    def is_palindrome(lst):\n        return lst == lst[::-1]\n\n    def sum_of_elements(lst):\n        return sum(lst)\n\n    def is_balanced(lst):\n        return is_palindrome(lst)\n\n    def is_weight_within_limit(lst, max_weight):\n        return sum_of_elements(lst) <= max_weight\n\n    return is_balanced(q) and is_weight_within_limit(q, w)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/77": [{"task_id": "HumanEval/77", "solution": "\ndef iscube(a):\n    if a < 0:\n        return False\n    cube_root = round(a ** (1. / 3))\n    return cube_root ** 3 == a\n\n# Test cases\nprint(iscube(1))  # True\nprint(iscube(2))  # False\nprint(iscube(-1))  # True\nprint(iscube(64))  # True\nprint(iscube(0))  # True\nprint(iscube(180))  # False\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[-1]], "plus_fail_tests": []}], "HumanEval/76": [{"task_id": "HumanEval/76", "solution": "\ndef is_simple_power(x, n):\n    if x == 1 or n == 1:\n        return True\n    elif x == n or n == 2 or n == 3:\n        return False\n    elif x < 2:\n        return False\n    else:\n        for i in range(2, x):\n            if x % i == 0:\n                return False\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n\nprint(is_simple_power(1, 4))  # True\nprint(is_simple_power(2, 2))  # True\nprint(is_simple_power(8, 2))  # False\nprint(is_simple_power(3, 2))  # False\nprint(is_simple_power(3, 1))  # False\nprint(is_simple_power(5, 3))  # False\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/78": [{"task_id": "HumanEval/78", "solution": "\ndef hex_key(num):\n    # Hexadecimal digits\n    hex_digits = \"0123456789ABCDEF\"\n    \n    # Dictionary to store the counts of hex digit\n    hex_count = {hex_digit: 0 for hex_digit in hex_digits}\n    \n    # Loop through each character in the input\n    for char in num:\n        # If the character is a hex digit, increment the count\n        if char in hex_count:\n            hex_count[char] += 1\n    \n    # Filter out the hex digits that are not primes\n    prime_hex_digits = [hex_digit for hex_digit, count in hex_count.items() if is_prime(int(hex_digit))]\n    \n    # Return the count of prime hex digits\n    return len(prime_hex_digits)\n\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n\n# Test the function\nprint(hex_key(\"AB\"))  # Output: 1\nprint(hex_key(\"1077E\"))  # Output: 2\nprint(hex_key(\"ABED1A33\"))  # Output: 4\nprint(hex_key(\"123456789ABCDEF0\"))  # Output: 6\nprint(hex_key(\"2020\"))  # Output: 2\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/74": [{"task_id": "HumanEval/74", "solution": "\ndef total_match(lst1, lst2):\n    def len_list(lst):\n        return sum(len(x) for x in lst)\n\n    len_lst1 = len_list(lst1)\n    len_lst2 = len_list(lst2)\n\n    if len_lst1 <= len_lst2:\n        return lst1\n    else:\n        return lst2\n\n# Test cases\nprint(total_match([], []))  # \u279e []\nprint(total_match(['hi', 'admin'], ['hI', 'Hi']))  # \u279e ['hI', 'Hi']\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']))  # \u279e ['hi', 'admin']\nprint(total_match(['hi', 'admin'], ['hI', 'hi', 'hi']))  # \u279e ['hI', 'hi', 'hi']\nprint(total_match(['4'], ['1', '2', '3', '4', '5']))  # \u279e ['4']\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/24": [{"task_id": "HumanEval/24", "solution": "\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/80": [{"task_id": "HumanEval/80", "solution": "\ndef is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) == 3:\n            return False\n    return True\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["abcd"]], "plus_fail_tests": []}], "HumanEval/79": [{"task_id": "HumanEval/79", "solution": "\ndef decimal_to_binary(decimal):\n    binary = bin(decimal).replace(\"0b\", \"\")\n    binary_with_padding = \"db\" + binary + \"db\"\n    return binary_with_padding\n\n# Test cases\nprint(decimal_to_binary(15))\nprint(decimal_to_binary(32))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/82": [{"task_id": "HumanEval/82", "solution": "\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, length):\n        if length % i == 0:\n            return False\n    return True\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/85": [{"task_id": "HumanEval/85", "solution": "def add(lst):\n    sum = 0\n    for i in range(len(lst)):\n        if i % 2 != 0 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return sum\n\nprint(add([4, 2, 6, 7]))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/81": [{"task_id": "HumanEval/81", "solution": "\ndef numerical_letter_grade(grades):\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/84": [{"task_id": "HumanEval/84", "solution": "\ndef solve(N):\n    # Convert the integer to binary and remove the '0b' prefix\n    binary = bin(N)[2:]\n    \n    # Convert the binary to a list of digits\n    binary_list = list(binary)\n    \n    # Calculate the sum of the digits\n    sum_of_digits = sum(int(digit) for digit in binary_list)\n    \n    # Convert the sum to a binary number\n    binary_sum = bin(sum_of_digits)[2:]\n    \n    return binary_sum\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[10]]}], "HumanEval/87": [{"task_id": "HumanEval/87", "solution": "\ndef get_row(lst, x):\n    coords = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                coords.append((i, j))\n    coords.sort(key=lambda t: (t[0], -t[1]))\n    return coords\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/88": [{"task_id": "HumanEval/88", "solution": "\ndef sort_array(array):\n    if not array:\n        return []\n    if len(array) == 1:\n        return array\n    if sum(array[0], array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[2, 4, 3, 0, 1, 5]]], "plus_fail_tests": []}], "HumanEval/91": [{"task_id": "HumanEval/91", "solution": "\ndef is_bored(S):\n    sentences = [sentence.strip() for sentence in S.replace('.', '!. ').replace('?', '?! ').replace('!', '!. ') if sentence]\n    boredom_count = sum(1 for sentence in sentences if sentence.startswith('I'))\n    return boredom_count\n\nprint(is_bored(\"Hello world\"))\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Is the sky blue?"]], "plus_fail_tests": [["I forgot my phone in the car. Oh no, now I have to go back and get it."]]}], "HumanEval/89": [{"task_id": "HumanEval/89", "solution": "\ndef encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2\n            if char.isupper():\n                if ord(char) + shift > ord('Z'):\n                    result += chr(ord(char) + shift - 26)\n                else:\n                    result += chr(ord(char) + shift)\n            else:\n                if ord(char) + shift > ord('z'):\n                    result += chr(ord(char) + shift - 26)\n                else:\n                    result += chr(ord(char) + shift)\n        else:\n            result += char\n    return result\n\n# Test cases\nprint(encrypt('hi'))  # 'lm'\nprint(encrypt('asdfghjkl'))  # 'ewhjklnop'\nprint(encrypt('gf'))  # 'kj'\nprint(encrypt('et'))  # 'ix'\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/86": [{"task_id": "HumanEval/86", "solution": "\ndef anti_shuffle(s):\n    words = s.split(' ')\n    sorted_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(sorted_words)\n\n# Test cases\nprint(anti_shuffle('Hi'))\nprint(anti_shuffle('hello'))\nprint(anti_shuffle('Hello World!!!'))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/93": [{"task_id": "HumanEval/93", "solution": "\ndef encode(message):\n    vowels = \"aeiou\"\n    result = \"\"\n    for char in message:\n        if char.lower() in vowels:\n            index = vowels.find(char.lower())\n            if char.isupper():\n                result += chr(ord('A') + (index + 2) % 26)\n            else:\n                result += chr(ord('a') + (index + 2) % 26)\n        else:\n            result += char\n    return result\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/92": [{"task_id": "HumanEval/92", "solution": "\ndef any_int(x, y, z):\n    if all(isinstance(i, int) for i in [x, y, z]):\n        return x == y + z or y == x + z or z == x + y\n    else:\n        return False\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/90": [{"task_id": "HumanEval/90", "solution": "\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    smallest = min(lst)\n    lst.remove(smallest)\n    if len(lst) == 0:\n        return None\n    next_smallest = min(lst)\n    return next_smallest\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 1]]], "plus_fail_tests": [[[2, 2, 2, 2, 2, 2, 3, 3, 3, 3]]]}], "HumanEval/97": [{"task_id": "HumanEval/97", "solution": "\ndef multiply(a, b):\n    if a < 10 and b < 10:\n        return a * b\n    else:\n        units_a = a % 10\n        units_b = b % 10\n        return units_a * units_b\n\n# Testing the function\nprint(multiply(148, 412))  # Outputs: 16\nprint(multiply(19, 28))  # Outputs: 72\nprint(multiply(2020, 1851))  # Outputs: 0\nprint(multiply(14, -15))  # Outputs: 20\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-87, 5]]}], "HumanEval/98": [{"task_id": "HumanEval/98", "solution": "\ndef count_upper(s):\n    uppercase_vowels = 'AEIOU'\n    return sum(1 for i in range(len(s)) if s[i] in uppercase_vowels and i % 2 == 0)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/60": [{"task_id": "HumanEval/60", "solution": "\ndef sum_to_n(n: int):\n    return sum(range(1, n+1))\n\n# Test cases\nprint(sum_to_n(30))  # Expected output: 465\nprint(sum_to_n(100))  # Expected output: 5050\nprint(sum_to_n(5))  # Expected output: 15\nprint(sum_to_n(10))  # Expected output: 55\nprint(sum_to_n(1))  # Expected output: 1\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/95": [{"task_id": "HumanEval/95", "solution": "\ndef check_dict_case(dictionary):\n    if not dictionary:\n        return False\n\n    keys_lower = all(key.islower() for key in dictionary.keys())\n    keys_upper = all(key.isupper() for key in dictionary.keys())\n\n    return keys_lower or keys_upper\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/99": [{"task_id": "HumanEval/99", "solution": "\ndef closest_integer(value):\n    value = float(value)\n    if value < 0:\n        result = int(value) if value - int(value) < 0.5 else int(value) + 1\n    else:\n        result = int(value) if int(value) - value < 0.5 else int(value) - 1\n    return result\n\n# test cases\nprint(closest_integer(\"10\"))  # output: 10\nprint(closest_integer(\"15.3\"))  # output: 15\nprint(closest_integer(\"14.5\"))  # output: 15\nprint(closest_integer(\"-14.5\"))  # output: -15\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["14.5"]], "plus_fail_tests": []}], "HumanEval/101": [{"task_id": "HumanEval/101", "solution": "\ndef words_string(s):\n    import re\n    words = re.split(', |, |, ', s)\n    return [word.strip() for word in words]\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/102": [{"task_id": "HumanEval/102", "solution": "\ndef choose_num(x, y):\n    if x % 2 != 0:\n        x += 1\n    if y % 2 != 0:\n        y -= 1\n    if x > y:\n        return -1\n    return y\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/36": [{"task_id": "HumanEval/36", "solution": "\ndef fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/104": [{"task_id": "HumanEval/104", "solution": "\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n    def all_even(lst):\n        for num in lst:\n            if str(num)[0] == '0' or str(num)[-1] == '0':\n                return False\n        return True\n\n    return sorted(x for x in x if all_even(str(x)) == False)\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/49": [{"task_id": "HumanEval/49", "solution": "def modp(n: int, p: int):\n    power = 2 ** n\n    return power % p\n\nprint(modp(3, 5))\nprint(modp(1101, 101))\nprint(modp(0, 101))\nprint(modp(3, 11))\nprint(modp(100, 101))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/105": [{"task_id": "HumanEval/105", "solution": "\ndef by_length(arr):\n    One_to_Nine = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    One_to_Nine = One_to_Nine[::-1]\n    one_to_nine_to_num = {v: i for i, v in enumerate(One_to_Nine)}\n    \n    one_to_nine_filter = lambda x: x in one_to_nine_to_num\n    one_to_nine_map = lambda x: one_to_nine_to_num[x]\n    \n    arr = [one_to_nine_map(i) for i in arr if one_to_nine_filter(i)]\n    arr.sort(reverse=True)\n    \n    return One_to_Nine[::-1][:len(arr)]\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/107": [{"task_id": "HumanEval/107", "solution": "\ndef even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_palindromes = 0\n    odd_palindromes = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_palindromes += 1\n            else:\n                odd_palindromes += 1\n\n    return (even_palindromes, odd_palindromes)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/108": [{"task_id": "HumanEval/108", "solution": "\ndef count_nums(arr):\n    def sum_digits(n):\n        if n < 0:\n            return -sum_digits(-n)\n        digits = []\n        while n > 0:\n            digits.append(n % 10)\n            n //= 10\n        return sum(digits)\n\n    return sum(sum_digits(x) > 0 for x in arr)\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[12, 23, 34, -45, -56, 0]]], "plus_fail_tests": [[[123, -456, 789]]]}], "HumanEval/106": [{"task_id": "HumanEval/106", "solution": "\ndef f(n):\n    def factorial(num):\n        if num == 0 or num == 1:\n            return 1\n        else:\n            return num * factorial(num - 1)\n\n    def sum_of_numbers(num):\n        return num * (num + 1) // 2\n\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_of_numbers(i))\n\n    return result\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/109": [{"task_id": "HumanEval/109", "solution": "\ndef move_one_ball(arr):\n    if len(arr) == 0:\n        return True\n    else:\n        sorted_arr = sorted(arr)\n        return arr == sorted_arr\n\nprint(move_one_ball([3, 4, 5, 1, 2]))  # True\nprint(move_one_ball([3, 5, 4, 1, 2]))  # False\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[5, 6, 7, 8, 1, 2, 3, 4]]]}], "HumanEval/96": [{"task_id": "HumanEval/96", "solution": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    prime_numbers = [num for num in range(2, n) if is_prime(num)]\n    return prime_numbers\n\nprint(count_up_to(5))  # Output: [2, 3]\nprint(count_up_to(11))  # Output: [2, 3, 5, 7]\nprint(count_up_to(0))  # Output: []\nprint(count_up_to(20))  # Output: [2, 3, 5, 7, 11, 13, 17, 19]\nprint(count_up_to(1))  # Output: []\nprint(count_up_to(18))  # Output: [2, 3, 5, 7, 11, 13, 17]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/112": [{"task_id": "HumanEval/112", "solution": "\ndef reverse_delete(s, c):\n    # Remove all the characters in s that are equal to any character in c\n    result = ''.join([i for i in s if i not in c])\n\n    # Check if the result string is palindrome\n    is_palindrome = result == result[::-1]\n\n    # Return the result string and the check\n    return result, is_palindrome\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/110": [{"task_id": "HumanEval/110", "solution": "\ndef exchange(lst1, lst2):\n    odd_count1 = sum(1 for num in lst1 if num % 2 != 0)\n    even_count2 = sum(1 for num in lst2 if num % 2 == 0)\n    \n    if odd_count1 > even_count2:\n        return \"NO\"\n    else:\n        return \"YES\"\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/111": [{"task_id": "HumanEval/111", "solution": "\ndef histogram(test):\n    counts = {}\n    for letter in test.split():\n        if letter in counts:\n            counts[letter] += 1\n        else:\n            counts[letter] = 1\n    max_count = max(counts.values()) if counts else 0\n    return {letter: count for letter, count in counts.items() if count == max_count}\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/113": [{"task_id": "HumanEval/113", "solution": "def odd_count(lst):\n    result = []\n    for i, string in enumerate(lst):\n        count = sum(1 for c in string if int(c) % 2 == 1)\n        result.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(count, i, count, i))\n    return result\n\nprint(odd_count(['1234567']))\nprint(odd_count(['3',\"11111111\"]))\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[["0", "00", "000"]]]}], "HumanEval/115": [{"task_id": "HumanEval/115", "solution": "\nimport math\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n\n    # Initialize the number of times the buckets are lowered to 0\n    lower_count = 0\n\n    # Iterate over rows in the grid\n    for row in grid:\n        # Initialize the sum of the water in the current row to 0\n        row_sum = 0\n\n        # Iterate over the wells in the current row\n        for well in row:\n            # If a well is empty, add the water in the well to the sum\n            if well == 0:\n                row_sum += 1\n            # If a well is filled, clear the well by lowering the bucket\n            elif well == 1:\n                # Lower the bucket as", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/120": [{"task_id": "HumanEval/120", "solution": "\ndef maximum(arr, k):\n    return sorted(arr, key=lambda x: (-x, arr.index(x)))[:k]\n\n# Test cases\nprint(maximum([-3, -4, 5], 3))  # Expected output: [-4, -3, 5]\nprint(maximum([4, -4, 4], 2))  # Expected output: [4, 4]\nprint(maximum([-3, 2, 1, 2, -1, -2, 1], 1))  # Expected output: [2]\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/119": [{"task_id": "HumanEval/119", "solution": "\ndef match_parens(lst):\n    s1, s2 = lst\n    stack = []\n    for char in s1 + s2:\n        if char in '(':\n            stack.append(char)\n        elif char in ')':\n            if not stack or stack.pop() != '(':\n                return 'No'\n    return 'Yes' if not stack else 'No'\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[")())", "(()()("]]], "plus_fail_tests": [[[")()()()(()()))", "(("]]]}], "HumanEval/117": [{"task_id": "HumanEval/117", "solution": "\ndef select_words(s, n):\n    if not s:\n        return []\n\n    words = s.split()\n    result = []\n\n    for word in words:\n        count = 0\n        for char in word:\n            if char.lower() not in 'aeiou':\n                count += 1\n        if count == n:\n            result.append(word)\n\n    return result\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/118": [{"task_id": "HumanEval/118", "solution": "\ndef get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    word = word[1:-1]  # exclude the first and last character\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels and word[i-1] not in vowels:\n            return word[i]\n    return \"\"\n\nprint(get_closest_vowel(\"yogurt\"))  # \"u\"\nprint(get_closest_vowel(\"FULL\"))  # \"U\"\nprint(get_closest_vowel(\"quick\"))  # \"\"\nprint(get_closest_vowel(\"ab\"))  # \"\"\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["easy"]], "plus_fail_tests": [["cup"]]}], "HumanEval/114": [{"task_id": "HumanEval/114", "solution": "\ndef minSubArraySum(nums):\n    if not nums:\n        return 0\n\n    min_sum = float('inf')\n    cur_sum = 0\n\n    for num in nums:\n        cur_sum += num\n        if cur_sum < min_sum:\n            min_sum = cur_sum\n        if cur_sum > 0:\n            cur_sum = 0\n\n    return min_sum\n\nprint(minSubArraySum([2, 3, 4, 1, 2, 4]))  # Output: 1\nprint(minSubArraySum([-1, -2, -3]))  # Output: -6\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/116": [{"task_id": "HumanEval/116", "solution": "\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/121": [{"task_id": "HumanEval/121", "solution": "\ndef solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/122": [{"task_id": "HumanEval/122", "solution": "\ndef add_elements(arr, k):\n    return sum(arr[:k])\n\narr = [111,21,3,4000,5,6,7,8,9]\nk = 4\nprint(add_elements(arr, k))\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[111, 121, 3, 4000, 5, 6], 2]], "plus_fail_tests": [[[100, 200, 300, 400, 500, 600], 3]]}], "HumanEval/124": [{"task_id": "HumanEval/124", "solution": "\ndef valid_date(date):\n    # Check if date string is empty\n    if not date:\n        return False\n    \n    # Split date string into month, day, and year\n    parts = date.split('-')\n    \n    # Check if date has correct number of parts\n    if len(parts) != 3:\n        return False\n    \n    # Check if month, day, and year are all numbers\n    try:\n        month = int(parts[0])\n        day = int(parts[1])\n        year = int(parts[2])\n    except ValueError:\n        return False\n    \n    # Check if month, day, and year are valid\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > 31:\n        return False\n    if year < 1 or year > 9999:\n        return False\n    \n    # Check if day is valid for the given month and year\n    if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n        return False\n    if month == 2 and day > 29:\n        return False\n    if month == 4, 6, 9, 11 and day > 30:\n        return False\n    \n    return True\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/123": [{"task_id": "HumanEval/123", "solution": "\ndef get_odd_collatz(n):\n    # Initialize the list with the first number of the sequence\n    collatz_sequence = [n]\n\n    # Generate the rest of the sequence\n    while n != 1:\n        if n % 2 != 0:\n            collatz_sequence.append(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n\n    # Filter the list to only include the odd numbers\n    odd_numbers = [num for num in collatz_sequence if num % 2 != 0]\n\n    # Sort the list\n    odd_numbers.sort()\n\n    return odd_numbers\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/126": [{"task_id": "HumanEval/126", "solution": "\ndef is_sorted(lst):\n    count_dict = {}\n    for num in lst:\n        if num not in count_dict:\n            count_dict[num] = 1\n        else:\n            count_dict[num] += 1\n    for key, value in count_dict.items():\n        if value > 1:\n            return False\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))\n\nprint(is_sorted([5]))\nprint(is_sorted([1, 2, 3, 4, 5]))\nprint(is_sorted([1, 3, 2, 4, 5]))\nprint(is_sorted([1, 2, 3, 4, 5, 6]))\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))\nprint(is_sorted([1, 2, 2, 3, 3, 4]))\nprint(is_sorted([1, 2, 2, 2, 3, 4]))\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 2, 3, 3, 4]]], "plus_fail_tests": [[[1, 1, 2, 2, 3, 3, 4]]]}], "HumanEval/125": [{"task_id": "HumanEval/125", "solution": "\ndef split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt:\n            if char.islower() and (ord(char) - ord('a')) % 2 != 0:\n                count += 1\n        return count\n\nprint(split_words(\"Hello world!\"))  # \u279e [\"Hello\", \"world!\"]\nprint(split_words(\"Hello,world!\"))  # \u279e [\"Hello\", \"world!\"]\nprint(split_words(\"abcdef\"))  # == 3\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/128": [{"task_id": "HumanEval/128", "solution": "\ndef prod_signs(arr):\n    if not arr:\n        return None\n    \n    product_sign = 1\n    sum_magnitudes = 0\n    \n    for num in arr:\n        if num < 0:\n            product_sign *= -1\n        sum_magnitudes += abs(num)\n    \n    return product_sign * sum_magnitudes\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[0, 1]]], "plus_fail_tests": [[[-1, 0, 1, 2]]]}], "HumanEval/127": [{"task_id": "HumanEval/127", "solution": "def intersection(interval1, interval2):\n    \"\"\"\n    Determines if the intersection length of two intervals is a prime number.\n    \"\"\"\n    def is_prime(n):\n        \"\"\"\n        Checks if a number is prime.\n        \"\"\"\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Check if the intervals intersect\n    if interval2[0] > interval1[1] or interval2[1] < interval1[0]:\n        return \"NO\"\n\n    # Calculate the intersection length\n    intersection_start = max(interval1[0], interval2[0])\n    intersection_end = min(interval1[1], interval2[1])\n    intersection_length = intersection_end - intersection_start\n\n    # Check if the intersection length is a prime number\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/129": [{"task_id": "HumanEval/129", "solution": "\nfrom heapq import heappop, heappush\nfrom collections import defaultdict\n\ndef minPath(grid, k):\n    N = len(grid)\n    moves = [(0,1,1), (0, -1, 1), (1, 0, 1), (-1, 0, 1)]\n    dist = defaultdict(lambda: float('inf'))\n    heap = [(grid[0][0], 0, 0)]\n    paths = []\n\n    while heap:\n        d, x, y = heappop(heap)\n        if len(paths) == k:\n            return paths\n        if len(paths) < k - 1:\n            for dx, dy, dt in moves:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < N and 0 <= ny < N:\n                    new_d = d + dt\n                    if new_d < dist[(nx,ny)]:\n                        dist[(nx,ny)] = new_d\n                        heappush(heap, (new_d, nx, ny))\n        paths.append(grid[x][y])\n        if len(paths) == k:\n            return paths\n    return paths\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 9]]}], "HumanEval/137": [{"task_id": "HumanEval/137", "solution": "\ndef compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        return max(a, b)\n    elif isinstance(a, (int, float)):\n        return a\n    elif isinstance(b, (int, float)):\n        return b\n    elif isinstance(a, str) and isinstance(b, str):\n        try:\n            a = float(a.replace(',', '.'))\n            b = float(b.replace(',', '.'))\n            return max(a, b)\n        except ValueError:\n            return None\n    else:\n        return None\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1, "2,3"]], "plus_fail_tests": []}], "HumanEval/133": [{"task_id": "HumanEval/133", "solution": "\ndef sum_squares(lst):\n    return sum(int(round(num)) ** 2 for num in lst)\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1.4, 4.2, 0]]], "plus_fail_tests": [[[0, 3.3, 7.7, -2.2]]]}], "HumanEval/132": [{"task_id": "HumanEval/132", "solution": "\ndef is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n# Testing the function\nprint(is_nested('[[]]'))  # \u279e True\nprint(is_nested('[]]]]]]][[[[[]'))  # \u279e False\nprint(is_nested('[][]'))  # \u279e False\nprint(is_nested('[]'))  # \u279e False\nprint(is_nested('[[][]]'))  # \u279e True\nprint(is_nested('[[]][['))  # \u279e True\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["[][]"]], "plus_fail_tests": [["[[]]]"]]}], "HumanEval/138": [{"task_id": "HumanEval/138", "solution": "\ndef is_equal_to_sum_even(n):\n    if n % 2 == 0:\n        return n // 2 % 2 == 0 and n // 4 % 2 == 0\n    else:\n        return n // 2 % 2 == 0 and n // 3 % 2 == 0 and n // 4 % 2 == 0 and n // 5 % 2 == 0\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": []}], "HumanEval/131": [{"task_id": "HumanEval/131", "solution": "\ndef digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product if product != 1 else 0\n\n# Test cases\nprint(digits(1))  # == 1\nprint(digits(4))  # == 0\nprint(digits(235))  # == 15\nprint(digits(1234))  # == 0\nprint(digits(1111))  # == 1\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[120]], "plus_fail_tests": [[111]]}], "HumanEval/135": [{"task_id": "HumanEval/135", "solution": "\ndef can_arrange(arr):\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            for j in range(i - 1, -1, -1):\n                if arr[j] > arr[i]:\n                    return j\n    return -1\n\nprint(can_arrange([1, 2, 4, 3, 5]))  # Output: 3\nprint(can_arrange([1, 2, 3]))  # Output: -1\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[5, 4, 3, 2, 1]]]}], "HumanEval/134": [{"task_id": "HumanEval/134", "solution": "\ndef check_if_last_char_is_a_letter(txt):\n    # Check if the string is empty\n    if not txt:\n        return False\n\n    # Get the last character\n    last_char = txt[-1]\n\n    # Check if the character is a letter\n    if last_char.isalpha():\n        # Check if the character is not a part of a word\n        if last_char != ' ' and last_char != '.' and last_char != ',' and last_char != ';' and last_char != ':':\n            return True\n    return False\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["pUMPKIN PIE"]]}], "HumanEval/136": [{"task_id": "HumanEval/136", "solution": "def largest_smallest_integers(lst):\n    negatives = [i for i in lst if i < 0]\n    positives = [i for i in lst if i > 0]\n    return (max(negatives) if negatives else None, min(positives) if positives else None)\n\nprint(largest_smallest_integers([2, 4, 1, 3, 5, 7]))  # Output: (None, 1)\nprint(largest_smallest_integers([]))  # Output: (None, None)\nprint(largest_smallest_integers([0]))  # Output: (None, None)\nprint(largest_smallest_integers([-2, -4, -1, -3, -5, -7]))  # Output: (-2, 1)\nprint(largest_smallest_integers([2, 4, -1, -3, 5, -7]))  # Output: (4, -1)\nprint(largest_smallest_integers([2, 4, 1, 3, -5, -7]))  # Output: (1, -5)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/140": [{"task_id": "HumanEval/140", "solution": "\ndef fix_spaces(text):\n    new_text = \"\"\n    prev_space = None\n    for c in text:\n        if c == \" \":\n            if prev_space is None:\n                new_text += c\n            elif prev_space == True and c == \" \":\n                new_text += \"_\"\n            elif prev_space == True and c != \" \":\n                new_text += \"-\"\n        else:\n            new_text += c\n        prev_space = c == \" \"\n    return new_text\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Mudasir Hanif "]], "plus_fail_tests": []}], "HumanEval/141": [{"task_id": "HumanEval/141", "solution": "\ndef file_name_check(file_name):\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    name_parts = file_name.split('.')\n    if not name_parts[0].isalpha() or not name_parts[0].isascii():\n        return 'No'\n    if name_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["hello world.exe"]]}], "HumanEval/83": [{"task_id": "HumanEval/83", "solution": "\ndef starts_one_ends(n):\n    count = 0\n    # The range of n-digit numbers is from 10^(n-1) to 9*10^(n-1) - 1\n    for i in range(10**(n-1), 10**n):\n        # Convert the integer to a string\n        str_i = str(i)\n        # Check if the first or last digit is 1\n        if str_i[0] == '1' or str_i[-1] == '1':\n            count += 1\n    return count\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[10]]}], "HumanEval/148": [{"task_id": "HumanEval/148", "solution": "\ndef bf(planet1, planet2):\n    planets_orbiting = {\n        \"Mercury\": \"Venus\",\n        \"Venus\": \"Earth\",\n        \"Earth\": \"Mars\",\n        \"Mars\": \"Jupiter\",\n        \"Jupiter\": \"Saturn\",\n        \"Saturn\": \"Uranus\",\n        \"Uranus\": \"Neptune\",\n    }\n    \n    if planet1 not in planets_orbiting or planet2 not in planets_orbiting:\n        return ()\n    \n    result = []\n    current_planet = planet1\n    \n    while current_planet != planet2:\n        result.append(current_planet)\n        current_planet = planets_orbiting[current_planet]\n    \n    result.append(current_planet)\n    return tuple(result)\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/145": [{"task_id": "HumanEval/145", "solution": "\ndef order_by_points(nums):\n    def sum_digits(n):\n        return sum(map(int, str(abs(n))))\n\n    return sorted(nums, key=lambda x: (sum_digits(x), nums.index(x)))\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[-5, -12, 9, 15]]]}], "HumanEval/144": [{"task_id": "HumanEval/144", "solution": "\ndef simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n\n    gcd = x_num if x_num < n_num else n_num\n\n    while gcd > 1:\n        if x_num % gcd == 0 and n_num % gcd == 0:\n            x_num /= gcd\n            n_num /= gcd\n            gcd = x_num if x_num < n_num else n_num\n        else:\n            gcd -= 1\n\n    return x_num == int(x_num) and n_num == int(n_num)\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["1/6", "2/1"]], "plus_fail_tests": [["6/8", "3/4"]]}], "HumanEval/146": [{"task_id": "HumanEval/146", "solution": "\ndef specialFilter(nums):\n    count = 0\n    for num in nums:\n        str_num = str(abs(num))\n        if num > 10 and str_num[0] in '13579' and str_num[-1] in '13579':\n            count += 1\n    return count\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/143": [{"task_id": "HumanEval/143", "solution": "\ndef words_in_sentence(sentence):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)\n\nprint(words_in_sentence(\"This is a test\"))  # Output: \"is\"\nprint(words_in_sentence(\"lets go for swimming\"))  # Output: \"go for\"\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/139": [{"task_id": "HumanEval/139", "solution": "\ndef special_factorial(n):\n    \"\"\"\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    result = 1\n    for i in range(1, n+1):\n        result *= factorial(i)\n\n    return result\n\nprint(special_factorial(4))\n", "base_status": "pass", "plus_status": "timeout", "base_fail_tests": [], "plus_fail_tests": [[500]]}], "HumanEval/142": [{"task_id": "HumanEval/142", "solution": "\ndef sum_squares(lst):\n    sum_ = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            sum_ += num ** 2\n        elif i % 4 == 0:\n            sum_ += num ** 3\n        else:\n            sum_ += num\n    return sum_\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/149": [{"task_id": "HumanEval/149", "solution": "\ndef sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    lst = [word for word in lst if len(word) % 2 == 0]\n    # Sort the resulting list by length and alphabetically\n    lst.sort()\n    return lst\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["aaaa", "bbbb", "dd", "cc"]]], "plus_fail_tests": []}], "HumanEval/151": [{"task_id": "HumanEval/151", "solution": "\ndef double_the_difference(lst):\n    if not lst:\n        return 0\n    sum_of_squares = 0\n    for num in lst:\n        if not isinstance(num, int) or num < 0:\n            continue\n        if num % 2 != 0:\n            sum_of_squares += num ** 2\n    return sum_of_squares\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/150": [{"task_id": "HumanEval/150", "solution": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y\n\nprint(x_or_y(7, 34, 12))\nprint(x_or_y(15, 8, 5))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/154": [{"task_id": "HumanEval/154", "solution": "def cycpattern_check(a, b):\n    def rotate(s):\n        return s[-1] + s[:-1]\n    \n    def is_substring(s1, s2):\n        return s2 in s1\n    \n    for _ in range(len(b)):\n        if is_substring(a, b):\n            return True\n        b = rotate(b)\n    return False\n\n# Test cases\nprint(cycpattern_check(\"abcd\",\"abd\"))    # False\nprint(cycpattern_check(\"hello\",\"ell\"))   # True\nprint(cycpattern_check(\"whassup\",\"psus\")) # False\nprint(cycpattern_check(\"abab\",\"baa\"))    # True\nprint(cycpattern_check(\"efef\",\"eeff\"))   # False\nprint(cycpattern_check(\"himenss\",\"simen\"))# True\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["", ""]]}], "HumanEval/152": [{"task_id": "HumanEval/152", "solution": "\ndef compare(game, guess):\n    return [abs(g - gi) for g, gi in zip(game, guess)]\n\nprint(compare([1,2,3,4,5,1], [1,2,3,4,2,-2]))\nprint(compare([0,5,0,0,0,4], [4,1,1,0,0,-2]))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/157": [{"task_id": "HumanEval/157", "solution": "\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n\n    # Check if any side is 0\n    if a == 0 or b == 0 or c == 0:\n        return False\n\n    # Check if any side is the sum of the others\n    if a == b + c or b == a + c or c == a + b:\n        return True\n\n    return False\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/130": [{"task_id": "HumanEval/130", "solution": "\ndef tri(n):\n    sequence = [3]\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            sequence.append(sequence[i // 2])\n        else:\n            sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i + 1])\n    return sequence\n\nprint(tri(3))\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/153": [{"task_id": "HumanEval/153", "solution": "\ndef Strongest_Extension(class_name, extensions):\n    strongest_extension = extensions[0]\n    strongest_strength = calculate_strength(extensions[0])\n\n    for extension in extensions[1:]:\n        strength = calculate_strength(extension)\n        if strength > strongest_strength:\n            strongest_extension = extension\n            strongest_strength = strength\n\n    return f'{class_name}.{strongest_extension}'\n\ndef calculate_strength(extension):\n    uppercase_letters = sum(1 for c in extension if c.isupper())\n    lowercase_letters = sum(1 for c in extension if c.islower())\n    return uppercase_letters - lowercase_letters\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/158": [{"task_id": "HumanEval/158", "solution": "\ndef find_max(words):\n    max_unique = 0\n    max_word = \"\"\n\n    for word in words:\n        unique_chars = set(word)\n        if len(unique_chars) > max_unique:\n            max_unique = len(unique_chars)\n            max_word = word\n\n    return max_word\n\nprint(find_max([\"name\", \"of\", \"string\"]))\nprint(find_max([\"name\", \"enam\", \"game\"]))\nprint(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]))\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["name", "enam", "game"]]], "plus_fail_tests": [[["xyz", "pqr"]]]}], "HumanEval/156": [{"task_id": "HumanEval/156", "solution": "\ndef int_to_mini_roman(number):\n    if not (1 <= number <= 1000):\n        raise ValueError(\"Input number should be between 1 and 1000.\")\n\n    mini_roman_numeral_map = [(1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n                              (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n                              (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')]\n\n    result = \"\"\n    for value, numeral in mini_roman_numeral_map:\n        while number >= value:\n            result += numeral\n            number -= value\n    return result\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/155": [{"task_id": "HumanEval/155", "solution": "\ndef even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\nprint(even_odd_count(-12))  # Output: (1, 1)\nprint(even_odd_count(123))  # Output: (1, 2)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/159": [{"task_id": "HumanEval/159", "solution": "\ndef eat(number, need, remaining):\n    total_eaten = number\n    if need > remaining:\n        total_eaten += remaining\n        remaining = 0\n    else:\n        remaining -= need\n    return [total_eaten, remaining]\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[2, 2, 2]]}], "HumanEval/94": [{"task_id": "HumanEval/94", "solution": "\ndef is_prime(num):\n    if num <= 1:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    for current in range(3, int(num ** 0.5) + 1, 2):\n        if num % current == 0:\n            return False\n    return True\n\ndef sum_of_digits(num):\n    return sum(int(digit) for digit in str(num))\n\ndef skjkasdkd(lst):\n    largest_prime = -1\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n    return sum_of_digits(largest_prime)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/160": [{"task_id": "HumanEval/160", "solution": "\ndef do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["+", "*", "-"], [2, 3, 4, 5]]], "plus_fail_tests": []}], "HumanEval/163": [{"task_id": "HumanEval/163", "solution": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    even_list = []\n\n    for i in range(a, b + 1):\n        if i % 2 == 0:\n            even_list.append(i)\n\n    return even_list\n\nprint(generate_integers(2, 8))  # Output: [2, 4, 6, 8]\nprint(generate_integers(8, 2))  # Output: [2, 4, 6, 8]\nprint(generate_integers(10, 14))  # Output: []\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/161": [{"task_id": "HumanEval/161", "solution": "\ndef solve(s):\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.upper() if c.islower() else c.lower() for c in s)\n\n# Test cases\nprint(solve(\"1234\"))  # Output: \"4321\"\nprint(solve(\"ab\"))  # Output: \"AB\"\nprint(solve(\"#a@C\"))  # Output: \"#A@c\"\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/39": [{"task_id": "HumanEval/39", "solution": "\ndef prime_fib(n: int):\n    def is_prime(num: int):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_fibonacci(num: int):\n        x = 0\n        y = 1\n        while y < num:\n            z = x + y\n            x = y\n            y = z\n        return y == num\n\n    count = 0\n    num = 0\n    while count < n:\n        if is_prime(num) and is_fibonacci(num):\n            count += 1\n        num += 1\n    return num - 1\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[9]], "plus_fail_tests": []}], "HumanEval/162": [{"task_id": "HumanEval/162", "solution": "\nimport hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()\n\n# Test cases\nprint(string_to_md5('Hello world'))  # '3e25960a79dbc69b674cd4ec67a72c62'\nprint(string_to_md5(''))  # None\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/100": [{"task_id": "HumanEval/100", "solution": "\ndef make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = [n]\n    while True:\n        if n % 2 == 0:\n            next_level = n + 2\n        else:\n            next_level = n + 1\n        pile.append(next_level)\n        n = next_level\n        if n == 1:\n            break\n    return pile\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/147": [{"task_id": "HumanEval/147", "solution": "\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/103": [{"task_id": "HumanEval/103", "solution": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    total = 0\n    count = 0\n    for i in range(n, m+1):\n        total += i\n        count += 1\n\n    average = round(total / count)\n\n    binary = bin(average)\n\n    return binary\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/15": [{"task_id": "HumanEval/15", "solution": "\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n + 1))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}]}}