{"task_id": "HumanEval/0", "solution": "\n    # Check each pair of adjacent numbers.\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False\n\nprint(has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3))\n"}
{"task_id": "HumanEval/1", "solution": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    # Remove spaces from the input string\n    no_space_string = \"\".join(paren_string.split(\" \"))\n    groups = []\n    start = 0\n    level = 0\n    for i, char in enumerate(no_space_string):\n        if char == '(':\n            level += 1\n        elif char == ')':\n            level -= 1\n        if level == 0 and char == ')':\n            groups.append(no_space_string[start:i+1])\n            start = i+1\n    return groups\n\n# Test case\nprint(separate_paren_groups('( ) (( )) (( )( ))'))  # ['()', '(())', '(()())']\n"}
{"task_id": "HumanEval/2", "solution": "\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)\n\nprint(truncate_number(3.5))\n"}
{"task_id": "HumanEval/3", "solution": "\nfrom typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n"}
{"task_id": "HumanEval/4", "solution": "\nfrom typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    if len(numbers) == 0:\n        return 0\n\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n"}
{"task_id": "HumanEval/5", "solution": "\nfrom typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    \"\"\"Insert a number 'delimiter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    interspersed = []\n    for i, num in enumerate(numbers):\n        if i != 0:\n            interspersed.append(delimiter)\n        interspersed.append(num)\n    return interspersed\n"}
{"task_id": "HumanEval/6", "solution": "\nfrom typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def find_max_depth(s: str) -> int:\n        max_depth = 0\n        current_depth = 0\n        for char in s:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        return max_depth\n\n    return [find_max_depth(group) for group in paren_string.split()]\n\nprint(parse_nested_parens('(()()) ((())) () ((())()())'))\n"}
{"task_id": "HumanEval/7", "solution": "\nfrom typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/8", "solution": "\nfrom typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    return (sum(numbers), prod(numbers))\n\ndef prod(numbers: List[int]) -> int:\n    result = 1\n    for num in numbers:\n        result *= num\n    return result\n\n# Test cases\nprint(sum_product([]))\nprint(sum_product([1, 2, 3, 4]))\n"}
{"task_id": "HumanEval/9", "solution": "\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = numbers[0]\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n"}
{"task_id": "HumanEval/10", "solution": "\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n\n    return string + string[::-1]\n"}
{"task_id": "HumanEval/11", "solution": "\nfrom typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    \"\"\"\n    if len(a) != len(b):\n        raise ValueError(\"Input strings must be of equal length\")\n\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n\n    return result\n\nprint(string_xor('010', '110'))\n"}
{"task_id": "HumanEval/12", "solution": "\nfrom typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if len(strings) == 0:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n"}
{"task_id": "HumanEval/13", "solution": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if a == b:\n        return a\n    elif a == 0 or b == 0:\n        return max(a, b)\n    else:\n        while b != 0:\n            a, b = b, a % b\n        return a\n\nprint(greatest_common_divisor(3, 5))  # 1\nprint(greatest_common_divisor(25, 15))  # 5\nprint(greatest_common_divisor(101, 103))  # 1\n"}
{"task_id": "HumanEval/14", "solution": "\nfrom typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[0:i] for i in range(1, len(string) + 1)]\n\nprint(all_prefixes('abc'))\n"}
{"task_id": "HumanEval/15", "solution": "\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n + 1))\n"}
{"task_id": "HumanEval/16", "solution": "\ndef count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))\n\nprint(count_distinct_characters('xyzXYZ'))\nprint(count_distinct_characters('Jerry'))\n"}
{"task_id": "HumanEval/17", "solution": "\nfrom typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    note_map = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1,\n    }\n\n    result = []\n    for note in music_string.split():\n        result.append(note_map[note])\n\n    return result\n"}
{"task_id": "HumanEval/18", "solution": "\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\"\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    for i in range(0, len(string), len(substring)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/19", "solution": "\nfrom typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    words = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    numbers_list = list(map(words.index, numbers.split()))\n    return ' '.join(map(words.__getitem__, sorted(numbers_list)))\n\nprint(sort_numbers('three one five'))\n"}
{"task_id": "HumanEval/20", "solution": "\nfrom typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements\")\n\n    min_diff = float('inf')\n    result = None\n\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[j] - numbers[i] < min_diff:\n                min_diff = numbers[j] - numbers[i]\n                result = (numbers[i], numbers[j])\n\n    return result\n"}
{"task_id": "HumanEval/21", "solution": "\nfrom typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    diff = max_val - min_val\n    \n    rescaled_numbers = [(num - min_val) / diff for num in numbers]\n    return rescaled_numbers\n"}
{"task_id": "HumanEval/22", "solution": "\nfrom typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]\n"}
{"task_id": "HumanEval/23", "solution": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    count = 0\n    for _ in string:\n        count += 1\n    return count\n"}
{"task_id": "HumanEval/24", "solution": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i\n\nprint(largest_divisor(15))\n"}
{"task_id": "HumanEval/25", "solution": "\nfrom typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        divisor += 1\n    return factors\n\nprint(factorize(8))\nprint(factorize(25))\nprint(factorize(70))\n"}
{"task_id": "HumanEval/26", "solution": "\nfrom typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    count = {}\n    result = []\n\n    for num in numbers:\n        if num not in count:\n            count[num] = 1\n            result.append(num)\n        else:\n            count[num] += 1\n\n    return result\n"}
{"task_id": "HumanEval/27", "solution": "\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    result = ''\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result\n\n# Testing the function\nprint(flip_case('Hello'))  # Output: hELLO\n"}
{"task_id": "HumanEval/28", "solution": "\nfrom typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n"}
{"task_id": "HumanEval/29", "solution": "\nfrom typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n"}
{"task_id": "HumanEval/30", "solution": "\ndef get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num > 0]\n"}
{"task_id": "HumanEval/31", "solution": "\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i:\n            continue\n        return False\n    return True\n"}
{"task_id": "HumanEval/32", "solution": "\nimport math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n\n    # Check if the number of coefficients is even\n    if len(xs) % 2 != 0:\n        raise ValueError(\"find_zero only takes list xs having even number of coefficients\")\n\n    # Check if the largest coefficient is non-zero\n    max_coeff = max(xs)\n    if max_coeff == 0:\n        raise ValueError(\"find_zero only takes list xs having largest non-zero coefficient\")\n\n    # Bisection method\n    # Starting from the end of the list\n    x = x\n    while abs(poly(xs, x)) > 1e-6:\n        # Choose the interval (a, b) with the largest absolute value of the function value\n        if poly(xs, x - 1) * poly(xs, x) < 0:\n            b = x - 1\n        else:\n            a = x\n        # Find the middle point\n        x = a - ((poly"}
{"task_id": "HumanEval/33", "solution": "\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n\n    third_elements = [el for i, el in enumerate(l) if i % 3 == 0]\n    sorted_third_elements = sorted(third_elements)\n\n    new_list = list(l)\n    for i, el in enumerate(new_list):\n        if i % 3 == 0:\n            new_list[i] = sorted_third_elements.pop(0)\n\n    return new_list\n\n# Test cases\nprint(sort_third([1, 2, 3]))\nprint(sort_third([5, 6, 3, 4, 8, 9, 2]))\n"}
{"task_id": "HumanEval/34", "solution": "\ndef unique(l: list):\n    return sorted(list(set(l)))\n\nprint(unique([5, 3, 5, 2, 3, 3, 9, 0, 123]))\n"}
{"task_id": "HumanEval/35", "solution": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n"}
{"task_id": "HumanEval/36", "solution": "\ndef fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n"}
{"task_id": "HumanEval/37", "solution": "def sort_even(l: list):\n    even_list = sorted([l[i] for i in range(0, len(l), 2)])\n    return [even_list.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]\n\n# testing the function\nprint(sort_even([1, 2, 3]))  # should print: [1, 2, 3]\nprint(sort_even([5, 6, 3, 4]))  # should print: [3, 6, 5, 4]\n"}
{"task_id": "HumanEval/38", "solution": "\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle on each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"}
{"task_id": "HumanEval/39", "solution": "\ndef prime_fib(n):\n    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 1:\n            return n\n        else:\n            a, b = 0, 1\n            for _ in range(n - 1):\n                a, b = b, a + b\n            return b\n\n    i = 0\n    while True:\n        fib = fibonacci(i)\n        if fib >= 4 and is_prime(fib):\n            if n == i:\n                return fib\n        i += 1\n"}
{"task_id": "HumanEval/40", "solution": "\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n\n    # sort the list\n    l.sort()\n\n    # iterate over the list\n    for i in range(len(l) - 2):\n        # calculate the sum of three elements\n        three_sum = l[i] + l[i + 1] + l[i + 2]\n\n        # if sum is zero, return True\n        if three_sum == 0:\n            return True\n\n    # if no three elements sum to zero, return False\n    return False\n"}
{"task_id": "HumanEval/41", "solution": "\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    collisions = 0\n    for i in range(n):\n        for j in range(n):\n            if i == j:  # same car\n                continue\n            if (i < j and n == 2) or (i > j and n == 2):  # for two cars collision\n                continue\n            if (i % n == j % n and n == 2) or (i % n != j % n and n == 2):  # same speed collision\n                continue\n            if (i < j and i + 1 == j) or (i > j and i - 1 == j):  # for two cars collision\n                collisions += 1\n    return collisions\n"}
{"task_id": "HumanEval/42", "solution": "\ndef incr_list(l: list):\n    return [i + 1 for i in l]\n\nprint(incr_list([1, 2, 3]))\nprint(incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]))\n"}
{"task_id": "HumanEval/43", "solution": "\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n\n# Test cases\nprint(pairs_sum_to_zero([1, 3, 5, 0]))  # False\nprint(pairs_sum_to_zero([1, 3, -2, 1]))  # False\nprint(pairs_sum_to_zero([1, 2, 3, 7]))  # False\nprint(pairs_sum_to_zero([2, 4, -5, 3, 5, 7]))  # True\nprint(pairs_sum_to_zero([1]))  # False\n"}
{"task_id": "HumanEval/44", "solution": "\ndef change_base(x: int, base: int):\n    digits = \"0123456789ABCDEF\"\n    result = \"\"\n    while x > 0:\n        digit = x % base\n        result = digits[digit] + result\n        x = x // base\n    return result\n\nprint(change_base(8, 3))\nprint(change_base(8, 2))\nprint(change_base(7, 2))\n"}
{"task_id": "HumanEval/45", "solution": "\ndef triangle_area(a, h):\n    \"\"\"\n    Given length of a side (a) and height (h),\n    return area for a triangle.\n\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h\n"}
{"task_id": "HumanEval/46", "solution": "\ndef fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        fib_seq = [0, 0, 2, 0]\n        for i in range(4, n+1):\n            fib_seq.append(fib_seq[-1] + fib_seq[-2] + fib_seq[-3] + fib_seq[-4])\n        return fib_seq[n]\n"}
{"task_id": "HumanEval/47", "solution": "\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if not l:\n        raise ValueError(\"List is empty\")\n\n    n = len(l)\n    s = sorted(l)\n\n    if n % 2 == 0:\n        return (s[n // 2 - 1] + s[n // 2]) / 2\n    else:\n        return s[n // 2]\n"}
{"task_id": "HumanEval/48", "solution": "\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n# Test cases\nprint(is_palindrome(''))  # True\nprint(is_palindrome('aba'))  # True\nprint(is_palindrome('aaaaa'))  # True\nprint(is_palindrome('zbcd'))  # False\n"}
{"task_id": "HumanEval/49", "solution": "\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n        half_p = p // 2\n        return (modp(n // 2, half_p) * modp(n // 2, half_p)) % p\n    else:\n        half_p = p // 2\n        return (modp(n // 2, half_p) * modp(n // 2 + 1, half_p)) % p\n"}
{"task_id": "HumanEval/50", "solution": "\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"}
{"task_id": "HumanEval/51", "solution": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result\n"}
{"task_id": "HumanEval/52", "solution": "\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n\n    for num in l:\n        if num >= t:\n            return False\n    return True\n"}
{"task_id": "HumanEval/53", "solution": "\ndef add(x: int, y: int) -> int:\n    return x + y\n\nprint(add(2, 3))\nprint(add(5, 7))\n"}
{"task_id": "HumanEval/54", "solution": "\ndef same_chars(s0: str, s1: str) -> bool:\n    return sorted(s0) == sorted(s1)\n\n# Test cases\nprint(same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc'))  # True\nprint(same_chars('abcd', 'dddddddabc'))  # True\nprint(same_chars('dddddddabc', 'abcd'))  # True\nprint(same_chars('eabcd', 'dddddddabc'))  # False\nprint(same_chars('abcd', 'dddddddabce'))  # False\nprint(same_chars('eabcdzzzz', 'dddzzzzzzzddddabc'))  # False\n"}
{"task_id": "HumanEval/55", "solution": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        fib_sequence = [0, 1]\n        while len(fib_sequence) < n:\n            fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])\n        return fib_sequence[-1]\n"}
{"task_id": "HumanEval/56", "solution": "\ndef correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack or stack.pop() != \"<\":\n                return False\n    return not stack\n"}
{"task_id": "HumanEval/57", "solution": "\ndef monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return True\n    \n    diff = l[1] - l[0]\n    for i in range(2, len(l)):\n        if diff == 0:\n            return True\n        if diff > 0:\n            if l[i] - l[i - 1] < 0:\n                return False\n        else:\n            if l[i] - l[i - 1] > 0:\n                return False\n        diff = l[i] - l[i - 1]\n\n    return True\n"}
{"task_id": "HumanEval/58", "solution": "\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    common_elements = list(set(l1) & set(l2))\n    return sorted(common_elements)\n\nprint(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\nprint(common([5, 3, 2, 8], [3, 2]))\n"}
{"task_id": "HumanEval/59", "solution": "\ndef largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n"}
{"task_id": "HumanEval/60", "solution": "\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return sum(range(1, n+1))\n"}
{"task_id": "HumanEval/61", "solution": "\ndef correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\nprint(correct_bracketing(\"(\"))  # False\nprint(correct_bracketing(\"()\"))  # True\nprint(correct_bracketing(\"(()())\"))  # True\nprint(correct_bracketing(\")(()\"))  # False\n"}
{"task_id": "HumanEval/62", "solution": "\ndef derivative(xs: list):\n    \"\"\"\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [xs[i] * i for i in range(1, len(xs))]\n"}
{"task_id": "HumanEval/63", "solution": "def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fibfib_sequence = [0, 0, 1]\n        for i in range(3, n + 1):\n            fibfib_sequence.append(fibfib_sequence[i - 1] + fibfib_sequence[i - 2] + fibfib_sequence[i - 3])\n        return fibfib_sequence[n]\n"}
{"task_id": "HumanEval/64", "solution": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = \"aeiou\"\n    count = 0\n    for char in s.lower():\n        if char in vowels:\n            count += 1\n    if s[-1].lower() == 'y':\n        count += 1\n    return count\n\nprint(vowels_count(\"abcde\"))  # Output: 2\nprint(vowels_count(\"ACEDY\"))  # Output: 3\n"}
{"task_id": "HumanEval/65", "solution": "\ndef circular_shift(x, shift):\n    str_x = str(x)\n    length = len(str_x)\n    if shift >= length:\n        return str_x[::-1]\n    else:\n        return str_x[-shift:] + str_x[:-shift]\n\nprint(circular_shift(12, 1))  # Output: \"21\"\nprint(circular_shift(12, 2))  # Output: \"12\"\n"}
{"task_id": "HumanEval/66", "solution": "\ndef digitSum(s):\n    sum_upper = 0\n    for char in s:\n        if char.isupper():\n            sum_upper += ord(char)\n    return sum_upper\n\nprint(digitSum(\"\")) # => 0\nprint(digitSum(\"abAB\")) # => 131\nprint(digitSum(\"abcCd\")) # => 67\nprint(digitSum(\"helloE\")) # => 69\nprint(digitSum(\"woArBld\")) # => 131\nprint(digitSum(\"aAaaaXa\")) # => 153\n"}
{"task_id": "HumanEval/67", "solution": "\ndef fruit_distribution(s, n):\n    # Split the string to get the count of apples and oranges\n    apple_string, orange_string = s.split(' and ')\n    apples = int(apple_string.split(' ')[0])\n    oranges = int(orange_string.split(' ')[0])\n\n    # Subtract the count of apples and oranges from the total count to get the count of mango\n    mango = n - apples - oranges\n\n    return mango\n"}
{"task_id": "HumanEval/68", "solution": "\ndef pluck(arr):\n    smallest_even = float('inf')\n    smallest_index = float('inf')\n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n            if value < smallest_even:\n                smallest_even = value\n                smallest_index = index\n            elif value == smallest_even:\n                smallest_index = min(smallest_index, index)\n    return [] if smallest_even == float('inf') else [smallest_even, smallest_index]\n"}
{"task_id": "HumanEval/69", "solution": "\ndef search(lst):\n    from collections import Counter\n    counter = Counter(lst)\n    for num in range(1, max(counter) + 1):\n        if num in counter and counter[num] >= num:\n            return num\n    return -1\n"}
{"task_id": "HumanEval/70", "solution": "def strange_sort_list(lst):\n    result = []\n    while lst:\n        result.append(min(lst))\n        lst.remove(min(lst))\n        if lst:\n            result.append(max(lst))\n            lst.remove(max(lst))\n    return result\n\nprint(strange_sort_list([1, 2, 3, 4])) # [1, 4, 2, 3]\nprint(strange_sort_list([5, 5, 5, 5])) # [5, 5, 5, 5]\nprint(strange_sort_list([])) # []\n"}
{"task_id": "HumanEval/71", "solution": "\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n\n    # Ensure a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n\n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n\n    # Calculate the area using Heron's formula\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\n    # Return the area rounded to 2 decimal points\n    return round(area, 2)\n"}
{"task_id": "HumanEval/72", "solution": "\ndef will_it_fly(q, w):\n    is_palindromic = q == q[::-1]\n    is_weight_limit_not_exceeded = sum(q) <= w\n    return is_palindromic and is_weight_limit_not_exceeded\n\n# test cases\nprint(will_it_fly([1, 2], 5))\nprint(will_it_fly([3, 2, 3], 1))\nprint(will_it_fly([3, 2, 3], 9))\nprint(will_it_fly([3], 5))\n"}
{"task_id": "HumanEval/73", "solution": "\ndef smallest_change(arr):\n    n = len(arr)\n    changes = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-i-1]:\n            changes += 1\n    return changes\n\nprint(smallest_change([1,2,3,5,4,7,9,6]))  # Expected output: 4\nprint(smallest_change([1, 2, 3, 4, 3, 2, 2]))  # Expected output: 1\nprint(smallest_change([1, 2, 3, 2, 1]))  # Expected output: 0\n"}
{"task_id": "HumanEval/74", "solution": "\ndef total_match(lst1, lst2):\n    lst1_chars = sum(len(s) for s in lst1)\n    lst2_chars = sum(len(s) for s in lst2)\n\n    if lst1_chars < lst2_chars:\n        return lst1\n    elif lst2_chars < lst1_chars:\n        return lst2\n    else:\n        return lst1\n"}
{"task_id": "HumanEval/75", "solution": "\ndef is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            factors.append(i)\n            while a % i == 0:\n                a //= i\n            if len(factors) > 3:\n                return False\n    return len(factors) == 3 and is_prime(a)\n\n# Test cases\nprint(is_multiply_prime(30)) # True\nprint(is_multiply_prime(6))  # False\nprint(is_multiply_prime(10)) # False\nprint(is_multiply_prime(9))  # True\n"}
{"task_id": "HumanEval/76", "solution": "\ndef is_simple_power(x, n):\n    import math\n    if x == 1 or n == 1:\n        return True\n    if x < 1 or n < 1:\n        return False\n    if n == 2:\n        return x in [1, 2, 4]\n    if x == 2 or x == 4:\n        return True\n    if x % n == 0:\n        return is_simple_power(x / n, n)\n    if n % 2 == 0 and n == 2:\n        return is_simple_power(x, n / 2)\n    if n % 3 == 0 and n == 3:\n        return is_simple_power(x, n / 3)\n    return False\n\nprint(is_simple_power(1, 4))  # True\nprint(is_simple_power(2, 2))  # True\nprint(is_simple_power(8, 2))  # True\nprint(is_simple_power(3, 2))  # False\nprint(is_simple_power(3, 1))  # False\nprint(is_simple_power(5, 3))  # False\n"}
{"task_id": "HumanEval/77", "solution": "\ndef iscube(a):\n    if a < 0:\n        a = -a\n    c_root = round(a ** (1. / 3))\n    return c_root ** 3 == a\n"}
{"task_id": "HumanEval/78", "solution": "\ndef hex_key(num):\n    prime_hex_digits = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in prime_hex_digits:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/79", "solution": "\ndef decimal_to_binary(decimal):\n    binary = bin(decimal).replace(\"0b\", \"\")\n    binary = 'db' + binary + 'db'\n    return binary\n\nprint(decimal_to_binary(15))\nprint(decimal_to_binary(32))\n"}
{"task_id": "HumanEval/80", "solution": "\ndef is_happy(s):\n    if len(s) < 3:\n        return False\n    else:\n        for i in range(len(s) - 2):\n            if len(set(s[i:i+3])) != 3:\n                return False\n        return True\n\nprint(is_happy(\"a\"))\nprint(is_happy(\"aa\"))\nprint(is_happy(\"abcd\"))\nprint(is_happy(\"aabb\"))\nprint(is_happy(\"adb\"))\nprint(is_happy(\"xyy\"))\n"}
{"task_id": "HumanEval/81", "solution": "\ndef numerical_letter_grade(grades):\n    \"\"\"\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \"\"\"\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter"}
{"task_id": "HumanEval/82", "solution": "\ndef prime_length(string):\n    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/83", "solution": "\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    # Initialize the count to 0\n    count = 0\n\n    # For each n-digit number\n    for i in range(10**(n-1), 10**n):\n        # Convert the number to a string\n        str_num = str(i)\n\n        # If the first or last digit is 1\n        if str_num[0] == '1' or str_num[-1] == '1':\n            # Increment the count\n            count += 1\n\n    # Return the count\n    return count\n\n# Test the function\nprint(starts_one_ends(2))\n"}
{"task_id": "HumanEval/84", "solution": "\ndef solve(N):\n    # Convert the integer to binary\n    binary = bin(N)[2:]\n    \n    # Calculate the sum of the digits in the binary number\n    sum_of_digits = sum(int(digit) for digit in binary)\n    \n    # Convert the sum of the digits back to a binary number\n    binary_sum = bin(sum_of_digits)[2:]\n    \n    return binary_sum\n"}
{"task_id": "HumanEval/85", "solution": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices.\"\"\"\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)\n\nprint(add([4, 2, 6, 7]))  # Output: 2\n"}
{"task_id": "HumanEval/86", "solution": "\ndef anti_shuffle(s):\n    words = s.split(' ')\n    new_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(new_words)\n\nprint(anti_shuffle('Hi'))\nprint(anti_shuffle('hello'))\nprint(anti_shuffle('Hello World!!!'))\n"}
{"task_id": "HumanEval/87", "solution": "\ndef get_row(lst, x):\n    rows = []\n    for i, row in enumerate(lst):\n        if x in row:\n            rows.append((i, row.index(x)))\n    return sorted(sorted(rows), key=lambda x: x[0])\n"}
{"task_id": "HumanEval/88", "solution": "\ndef sort_array(array):\n    if not array:\n        return []\n    \n    sorted_array = array.copy()\n    sorted_array.sort()\n    \n    if sum(array[0], array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array\n"}
{"task_id": "HumanEval/89", "solution": "\ndef encrypt(s):\n    result = \"\"\n    for char in s:\n        if 'a' <= char <= 'z':\n            if char == 'z':\n                result += 'a'\n            else:\n                result += chr(ord(char) + 2)\n        elif 'A' <= char <= 'Z':\n            if char == 'Z':\n                result += 'A'\n            else:\n                result += chr(ord(char) + 2)\n        else:\n            result += char\n    return result\n"}
{"task_id": "HumanEval/90", "solution": "\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    smallest = min(lst)\n    lst.remove(smallest)\n    return min(lst)\n"}
{"task_id": "HumanEval/91", "solution": "\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n\n    sentences = S.replace('.', '').replace('?', '').replace('!', '').split(' ')\n    return sum(1 for word in sentences if word.lower() == 'i')\n\nprint(is_bored(\"Hello world\"))\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))\n"}
{"task_id": "HumanEval/92", "solution": "\ndef any_int(x, y, z):\n    # Check if all numbers are integers\n    if not all(isinstance(num, int) for num in (x, y, z)):\n        return False\n    # Check if any of the numbers is equal to the sum of the other two\n    return x == y + z or y == x + z or z == x + y\n"}
{"task_id": "HumanEval/93", "solution": "\ndef encode(message):\n    vowels = 'aeiou'\n    encoded_message = []\n\n    for char in message:\n        if char.lower() in vowels:\n            if char.isupper():\n                encoded_message.append(chr(ord('A') + 2))\n            else:\n                encoded_message.append(chr(ord('a') + 2))\n        elif char.isalpha():\n            if char.isupper():\n                encoded_message.append(chr((ord(char) - ord('A') + 2) % 26 + ord('A')))\n            else:\n                encoded_message.append(chr((ord(char) - ord('a') + 2) % 26 + ord('a')))\n        else:\n            encoded_message.append(char)\n\n    return ''.join(encoded_message)\n"}
{"task_id": "HumanEval/94", "solution": "\ndef skjkasdkd(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        i = 3\n        while i * i <= n:\n            if n % i == 0:\n                return False\n            i += 2\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    primes = [num for num in lst if is_prime(num)]\n    if not primes:\n        return 0\n    max_prime = max(primes)\n    return sum_of_digits(max_prime)\n"}
{"task_id": "HumanEval/95", "solution": "\ndef check_dict_case(dictionary):\n    if not dictionary:\n        return False\n\n    # Check if all keys are strings in lower case or all keys are strings in upper case\n    lower_case = all(isinstance(key, str) and key.islower() for key in dictionary.keys())\n    upper_case = all(isinstance(key, str) and key.isupper() for key in dictionary.keys())\n\n    # If all keys are strings in either case, return True\n    if lower_case or upper_case:\n        return True\n\n    # If not all keys are strings in either case, return False\n    return False\n"}
{"task_id": "HumanEval/96", "solution": "\ndef count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [num for num in range(n) if is_prime(num)]\n\nprint(count_up_to(5))\nprint(count_up_to(11))\nprint(count_up_to(0))\nprint(count_up_to(20))\nprint(count_up_to(1))\nprint(count_up_to(18))\n"}
{"task_id": "HumanEval/97", "solution": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # Convert the integers to strings to easily access the unit digit\n    a_str = str(a)\n    b_str = str(b)\n\n    # Initialize the product and the carry\n    product = 0\n    carry = 0\n\n    # Traverse the digits of the larger number\n    for i in range(len(a_str)):\n        digit_a = int(a_str[i])\n        for j in range(len(b_str)):\n            digit_b = int(b_str[j])\n            \n            # Calculate the product of the current digit and the carry\n            temp = digit_a * digit_b * carry\n            \n            # Update the product and carry\n            product += temp\n            carry = temp // 10\n\n    # Add the remaining carry to the product\n    product += carry\n\n    return product\n"}
{"task_id": "HumanEval/98", "solution": "\ndef count_upper(s):\n    upper_vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in upper_vowels:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/99", "solution": "\ndef closest_integer(value):\n    try:\n        num = float(value)\n    except ValueError:\n        return \"Error: Input is not a number\"\n\n    if num >= 0:\n        if num - 0.5 < num - num // 2:\n            return int(num + 0.5)\n        else:\n            return int(num // 2 + 1)\n    else:\n        if abs(num - 0.5) < abs(num - (num // 2)):\n            return int(num - 0.5)\n        else:\n            return int(num // 2 - 1)\n\nprint(closest_integer(\"10\"))\nprint(closest_integer(\"15.3\"))\nprint(closest_integer(\"14.5\"))\nprint(closest_integer(\"-14.5\"))\n"}
{"task_id": "HumanEval/100", "solution": "\ndef make_a_pile(n):\n    pile = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            n += 1\n        else:\n            n += 2\n        pile.append(n)\n    return pile\n"}
{"task_id": "HumanEval/101", "solution": "\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n\n    # Split the string by commas or spaces\n    words = s.split(',')\n\n    # Return the splitted words\n    return words\n\nprint(words_string(\"Hi, my name is John\"))\nprint(words_string(\"One, two, three, four, five, six\"))\n"}
{"task_id": "HumanEval/102", "solution": "\ndef choose_num(x, y):\n    if x % 2 == 0 and y % 2 == 0:\n        if x > y:\n            for i in range(x, y-1, -1):\n                if i % 2 == 0:\n                    return i\n        else:\n            for i in range(y, x-1, -1):\n                if i % 2 == 0:\n                    return i\n    else:\n        return -1\n"}
{"task_id": "HumanEval/103", "solution": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total_sum = sum(range(n, m + 1))\n    avg = round(total_sum / (m - n + 1))\n    return bin(avg)[2:]\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))\n"}
{"task_id": "HumanEval/104", "solution": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([n for n in x if all(int(d) % 2 != 0 for d in str(n))])\n\nprint(unique_digits([15, 33, 1422, 1]))\nprint(unique_digits([152, 323, 1422, 10]))\n"}
{"task_id": "HumanEval/105", "solution": "\ndef by_length(arr):\n    # Filter out the numbers that are not between 1 and 9\n    nums = [n for n in arr if 1 <= n <= 9]\n\n    # Sort the numbers\n    nums.sort()\n\n    # Replace each number with its corresponding name\n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    return [names[n - 1] for n in reversed(nums)]\n"}
{"task_id": "HumanEval/106", "solution": "def f(n):\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    def sum_from_1_to_n(n):\n        return n * (n + 1) // 2\n\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_from_1_to_n(i))\n    return result\n"}
{"task_id": "HumanEval/107", "solution": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_palindromes = sum(is_palindrome(num) for num in range(1, n + 1) if num % 2 == 0)\n    odd_palindromes = sum(is_palindrome(num) for num in range(1, n + 1) if num % 2 != 0)\n\n    return even_palindromes, odd_palindromes\n\n# Test the function\nprint(even_odd_palindrome(3))\nprint(even_odd_palindrome(12))\n"}
{"task_id": "HumanEval/108", "solution": "\ndef count_nums(arr):\n    def sum_digits(n):\n        return sum(int(digit) for digit in str(n) if int(digit) > 0)\n\n    return sum(1 for num in arr if sum_digits(num) > 0)\n\n# Test cases\nprint(count_nums([]) == 0)\nprint(count_nums([-1, 11, -11]) == 1)\nprint(count_nums([1, 1, 2]) == 3)\n"}
{"task_id": "HumanEval/109", "solution": "\ndef move_one_ball(arr):\n    if len(arr) == 0:\n        return True\n    # find the first element which is not in its right place\n    first_out_of_order = -1\n    for i in range(len(arr)):\n        if arr[i] < arr[(i+1)%len(arr)]:\n            first_out_of_order = arr[i]\n            break\n    # if no such element is found, the array is already sorted\n    if first_out_of_order == -1:\n        return True\n    # find the last element which should be in its right place\n    last_in_order = -1\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] > arr[(i+1)%len(arr)]:\n            last_in_order = arr[i]\n            break\n    # perform the right shift operation\n    shift_num = len(arr) - arr[:(first_out_of_order-1)].index(last_in_order)\n    if shift_num == 0:\n        return True\n    arr = arr[(first_out_of_order-1):] + arr[:]\n    return move_one_ball(arr)\n"}
{"task_id": "HumanEval/110", "solution": "\ndef exchange(lst1, lst2):\n    # Count the number of odd numbers in lst1\n    odd_count1 = sum(n % 2 for n in lst1)\n    \n    # Count the number of even numbers in lst2\n    even_count2 = sum(n % 2 for n in lst2)\n    \n    # If the number of odd numbers in lst1 is greater than the number of even numbers in lst2,\n    # it is not possible to exchange elements to make lst1 a list of only even numbers\n    if odd_count1 > even_count2:\n        return \"NO\"\n    \n    # If the number of odd numbers in lst1 is equal to or less than the number of even numbers in lst2,\n    # it is possible to exchange elements to make lst1 a list of only even numbers\n    elif odd_count1 <= even_count2:\n        return \"YES\"\n\n# Test the function\nprint(exchange([1, 2, 3, 4], [1, 2, 3, 4]))  # Output: \"YES\"\nprint(exchange([1, 2, 3, 4], [1, 5, 3, 4]))  # Output: \"NO\"\n"}
{"task_id": "HumanEval/111", "solution": "\ndef histogram(test):\n    counts = {}\n    words = test.split()\n\n    for word in words:\n        if word in counts:\n            counts[word] += 1\n        else:\n            counts[word] = 1\n\n    max_count = max(counts.values()) if counts else 0\n    return {k: v for k, v in counts.items() if v == max_count}\n\nprint(histogram('a b c'))  # {'a': 1, 'b': 1, 'c': 1}\nprint(histogram('a b b a'))  # {'a': 2, 'b': 2}\nprint(histogram('a b c a b'))  # {'a': 2, 'b': 2}\nprint(histogram('b b b b a'))  # {'b': 4}\nprint(histogram(''))  # {}\n"}
{"task_id": "HumanEval/112", "solution": "\ndef reverse_delete(s, c):\n    # Remove characters in c from s\n    s = ''.join([i for i in s if i not in c])\n\n    # Check if s is a palindrome\n    is_palindrome = s == s[::-1]\n\n    # Return the result\n    return s, is_palindrome\n"}
{"task_id": "HumanEval/113", "solution": "def odd_count(lst):\n    result = []\n    for i, s in enumerate(lst):\n        count = sum(int(ch) % 2 for ch in s)\n        result.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(count, i + 1, count, i + 1))\n    return result\n\nprint(odd_count(['1234567']))\nprint(odd_count(['3', \"11111111\"]))\n"}
{"task_id": "HumanEval/114", "solution": "\ndef minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum\n\nprint(minSubArraySum([2, 3, 4, 1, 2, 4]))  # Output: 1\nprint(minSubArraySum([-1, -2, -3]))  # Output: -6\n"}
{"task_id": "HumanEval/115", "solution": "\ndef max_fill(grid, capacity):\n    count = 0\n    while any(row.count(1) for row in grid):\n        for row in grid:\n            if row.count(1):\n                i = row.index(1)\n                if i < len(row)-1 and row[i+1] == 0 and sum(row[i:i+capacity]) < capacity:\n                    row[i:i+capacity] = [0]*capacity\n                    count += 1\n                elif i == len(row)-1 and row[i-1] == 0 and sum(row[i-capacity:i]) < capacity:\n                    row[i-capacity:i] = [0]*capacity\n                    count += 1\n                else:\n                    row[i] = 0\n                break\n    return count\n"}
{"task_id": "HumanEval/116", "solution": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\n# Test cases\nprint(sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5])\nprint(sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2])\nprint(sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4])\n"}
{"task_id": "HumanEval/117", "solution": "\ndef select_words(s, n):\n    if not s:\n        return []\n    vowels = set(\"aeiouAEIOU\")\n    words = s.split()\n    result = []\n    for word in words:\n        if sum(c.lower() in vowels for c in word) == n:\n            result.append(word)\n    return result\n"}
{"task_id": "HumanEval/118", "solution": "\ndef get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    for i in range(1, len(word) - 1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"\n\nprint(get_closest_vowel(\"yogurt\")) # Output: u\nprint(get_closest_vowel(\"FULL\"))   # Output: U\nprint(get_closest_vowel(\"quick\"))  # Output: \nprint(get_closest_vowel(\"ab\"))     # Output: \n"}
{"task_id": "HumanEval/119", "solution": "\ndef match_parens(lst):\n    def is_balanced(s):\n        count = 0\n        for char in s:\n            if char == '(':\n                count += 1\n            elif char == ')':\n                if count == 0:\n                    return False\n                count -= 1\n        return count == 0\n\n    s1, s2 = lst\n    if len(s1) + len(s2) != len(s1 + s2):\n        return 'No'\n    elif is_balanced(s1) and is_balanced(s2):\n        return 'Yes'\n    else:\n        return 'No'\n\n# Test cases\nprint(match_parens(['()(', ')']))  # Should print 'Yes'\nprint(match_parens([')', ')']))  # Should print 'No'\n"}
{"task_id": "HumanEval/120", "solution": "\ndef maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]\n\n# Testing the function\nprint(maximum([-3, -4, 5], 3))            # Output: [-4, -3, 5]\nprint(maximum([4, -4, 4], 2))            # Output: [4, 4]\nprint(maximum([-3, 2, 1, 2, -1, -2, 1], 1))    # Output: [2]\n"}
{"task_id": "HumanEval/121", "solution": "\ndef solution(lst):\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)\n\nprint(solution([5, 8, 7, 1]))\nprint(solution([3, 3, 3, 3, 3]))\nprint(solution([30, 13, 24, 321]))\n"}
{"task_id": "HumanEval/122", "solution": "\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\n    # Filter the first k elements of arr to only include numbers with at most two digits\n    # Cast each number to a string, then check if the length of the string is less than or equal to 2\n    # If the condition is true, convert the string back to a number\n    filtered_arr = [int(str(x) if len(str(x)) <= 2 else str(x)) for x in arr[:k]]\n\n    # Sum up all the numbers in the filtered_arr\n    sum_of_numbers = sum(filtered_arr)\n\n    return sum_of_numbers\n"}
{"task_id": "HumanEval/123", "solution": "\ndef get_odd_collatz(n):\n    def collatz(n):\n        sequence = [n]\n        while n != 1:\n            if n % 2 == 0:\n                n = n // 2\n            else:\n                n = 3 * n + 1\n            sequence.append(n)\n        return sequence\n\n    sequence = collatz(n)\n    odd_sequence = [num for num in sequence if num % 2 != 0]\n    return sorted(odd_sequence)\n\n# Testing the function\nprint(get_odd_collatz(5))  # Outputs: [1, 5]\n"}
{"task_id": "HumanEval/124", "solution": "\ndef valid_date(date):\n    if not date or len(date.split(\"-\")) != 3:\n        return False\n\n    month, day, year = map(int, date.split(\"-\"))\n\n    if month < 1 or month > 12:\n        return False\n\n    if day < 1 or day > 31:\n        return False\n\n    if month in [4, 6, 9, 11] and day > 30:\n        return False\n\n    if month == 2:\n        if year % 4 != 0:\n            if day > 28:\n                return False\n        else:\n            if day > 29:\n                return False\n\n    return True\n"}
{"task_id": "HumanEval/125", "solution": "\ndef split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        lower_case_letters_odd_order = [chr(i) for i in range(ord('a'), ord('z'), 2) if i > ord('m')]\n        return len(lower_case_letters_odd_order)\n\nprint(split_words(\"Hello world!\"))  # \u279e [\"Hello\", \"world!\"]\nprint(split_words(\"Hello,world!\"))  # \u279e [\"Hello\", \"world!\"]\nprint(split_words(\"abcdef\"))  # \u279e 3\n"}
{"task_id": "HumanEval/126", "solution": "\ndef is_sorted(lst):\n    if len(lst) == len(set(lst)):\n        return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))\n    else:\n        return False\n"}
{"task_id": "HumanEval/127", "solution": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def intersection_length(interval1, interval2):\n        start = max(interval1[0], interval2[0])\n        end = min(interval1[1], interval2[1])\n        if start > end:\n            return 0\n        return end - start + 1\n\n    length = intersection_length(interval1, interval2)\n    return \"YES\" if is_prime(length) else \"NO\"\n\nprint(intersection((1, 2), (2, 3)))  # \"NO\"\nprint(intersection((-1, 1), (0, 4)))  # \"NO\"\nprint(intersection((-3, -1), (-5, 5)))  # \"YES\"\n"}
{"task_id": "HumanEval/128", "solution": "\ndef prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    sign_sum = 0\n    for num in arr:\n        product *= num\n        sign_sum += num if num > 0 else -num\n    return abs(sign_sum) * product\n"}
{"task_id": "HumanEval/129", "solution": "\ndef minPath(grid, k):\n    N = len(grid)\n    visited = [[False] * N for _ in range(N)]\n    min_path = [N * N] * k\n    min_cell = [N * N] * k\n\n    def dfs(x, y, path):\n        nonlocal min_path, min_cell\n        if len(path) == k:\n            val = sorted(path)\n            if val < min_path:\n                min_path = val\n                min_cell = path\n            return\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N and not visited[nx][ny]:\n                visited[nx][ny] = True\n                dfs(nx, ny, path + [grid[nx][ny]])\n                visited[nx][ny] = False\n\n    for i in range(N):\n        for j in range(N):\n            visited[i][j] = True\n            dfs(i, j, [grid[i][j]])\n            visited[i][j] = False\n\n    return min_cell\n"}
{"task_id": "HumanEval/130", "solution": "\ndef tri(n):\n    def tri_recur(n):\n        if n == 0:\n            return 3\n        elif n == 1:\n            return 1\n        elif n % 2 == 0:\n            return 1 + n / 2\n        else:\n            return tri_recur(n - 1) + tri_recur(n - 2) + tri_recur(n + 1)\n\n    result = []\n    for i in range(n + 1):\n        result.append(tri_recur(i))\n\n    return result\n"}
{"task_id": "HumanEval/131", "solution": "\ndef digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product if product != 1 else 0\n\nprint(digits(1))  # 1\nprint(digits(4))  # 0\nprint(digits(235))  # 15\n"}
{"task_id": "HumanEval/132", "solution": "\ndef is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            elif stack[-1] == '[':\n                stack.pop()\n            else:\n                while stack[-1] != '[':\n                    stack.pop()\n                stack.pop()\n    return not stack\n\nprint(is_nested('[[]]'))  # True\nprint(is_nested('[]]]]]]][[[[[]'))  # False\nprint(is_nested('[][]'))  # False\nprint(is_nested('[]'))  # False\nprint(is_nested('[[][]]'))  # True\nprint(is_nested('[[]][['))  # True\n"}
{"task_id": "HumanEval/133", "solution": "\ndef sum_squares(lst):\n    return sum(int(round(i)) ** 2 for i in lst)\n"}
{"task_id": "HumanEval/134", "solution": "\ndef check_if_last_char_is_a_letter(txt):\n    if len(txt) == 0:\n        return False\n    elif txt[-1].isalpha():\n        if txt[-2] == ' ':\n            return False\n        else:\n            return True\n    else:\n        return False\n\nprint(check_if_last_char_is_a_letter(\"apple pie\"))  # False\nprint(check_if_last_char_is_a_letter(\"apple pi e\"))  # True\nprint(check_if_last_char_is_a_letter(\"apple pi e \"))  # False\nprint(check_if_last_char_is_a_letter(\"\"))  # False\n"}
{"task_id": "HumanEval/135", "solution": "\ndef can_arrange(arr):\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            for j in range(i-1, -1, -1):\n                if arr[j] > arr[i]:\n                    return i\n    return -1\n\n# Test cases\nprint(can_arrange([1,2,4,3,5])) # should return 3\nprint(can_arrange([1,2,3])) # should return -1\n"}
{"task_id": "HumanEval/136", "solution": "\ndef largest_smallest_integers(lst):\n    negative_integers = [i for i in lst if i < 0]\n    positive_integers = [i for i in lst if i > 0]\n\n    if len(negative_integers) == 0 and len(positive_integers) == 0:\n        return (None, None)\n    elif len(negative_integers) == 0:\n        return (None, min(positive_integers))\n    elif len(positive_integers) == 0:\n        return (max(negative_integers), None)\n    else:\n        return (max(negative_integers), min(positive_integers))\n\nprint(largest_smallest_integers([2, 4, 1, 3, 5, 7]))     # Output: (None, 1)\nprint(largest_smallest_integers([]))                     # Output: (None, None)\nprint(largest_smallest_integers([0]))                     # Output: (None, None)\n"}
{"task_id": "HumanEval/137", "solution": "\ndef compare_one(a, b):\n    def clean_num(num):\n        if isinstance(num, str):\n            num = num.replace(',', '').replace('.', '')\n        return float(num)\n\n    a = clean_num(a)\n    b = clean_num(b)\n\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None\n"}
{"task_id": "HumanEval/138", "solution": "\ndef is_equal_to_sum_even(n):\n    if n < 5:\n        return False\n    else:\n        for i in range(1, n):\n            if i % 2 == 0:\n                for j in range(i, n):\n                    if j % 2 == 0:\n                        for k in range(j, n):\n                            if k % 2 == 0:\n                                for l in range(k, n):\n                                    if l % 2 == 0:\n                                        if i + j + k + l == n:\n                                            return True\n    return False\n"}
{"task_id": "HumanEval/139", "solution": "\ndef special_factorial(n):\n    def factorial(n):\n        result = 1\n        for i in range(1, n + 1):\n            result *= i\n        return result\n\n    result = 1\n    for i in range(n, 0, -1):\n        result *= factorial(i)\n    return result\n\n# Test cases\nprint(special_factorial(4))  # Output: 288\n"}
{"task_id": "HumanEval/140", "solution": "\ndef fix_spaces(text):\n    if \"  \" in text:\n        text = text.replace(\"  \", \"-\")\n    if \"   \" in text:\n        text = text.replace(\"   \", \"_\")\n    return text\n\nprint(fix_spaces(\"Example\"))\nprint(fix_spaces(\"Example 1\"))\nprint(fix_spaces(\" Example 2\"))\nprint(fix_spaces(\" Example   3\"))\n"}
{"task_id": "HumanEval/141", "solution": "\ndef file_name_check(file_name):\n    # Check if the file's name has exactly one dot '.'\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file's name into a list of substrings\n    file_parts = file_name.split('.')\n\n    # Check if the length of the file's name is more than three digits\n    if len(file_parts[0]) > 3:\n        return 'No'\n\n    # Check if the substring before the dot starts with a letter\n    if not file_parts[0][0].isalpha() or not file_parts[0][0].isupper():\n        return 'No'\n\n    # Check if the substring after the dot is one of the valid extensions\n    if file_parts[1].lower() not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    # If all the conditions are met, return 'Yes'\n    return 'Yes'\n"}
{"task_id": "HumanEval/142", "solution": "\ndef sum_squares(lst):\n    sum_val = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum_val += lst[i] ** 2\n        elif i % 4 == 0:\n            sum_val += lst[i] ** 3\n    return sum_val\n\n# Test cases\nprint(sum_squares([1, 2, 3]))  # Expected output: 6\nprint(sum_squares([]))  # Expected output: 0\nprint(sum_squares([-1, -5, 2, -1, -5]))  # Expected output: -126\n"}
{"task_id": "HumanEval/143", "solution": "\ndef is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split(' ')\n    prime_words = []\n    for word in words:\n        if is_prime(len(word)):\n            prime_words.append(word)\n    return ' '.join(prime_words)\n\n# Test cases\nprint(words_in_sentence(\"This is a test\"))  # should print \"is\"\nprint(words_in_sentence(\"lets go for swimming\"))  # should print \"go for\"\n"}
{"task_id": "HumanEval/144", "solution": "\ndef simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n\n    numerator = x_num * n_num\n    denominator = x_den * n_den\n\n    return denominator == numerator\n\n# Test cases\nprint(simplify(\"1/5\", \"5/1\"))  # True\nprint(simplify(\"1/6\", \"2/1\"))  # False\nprint(simplify(\"7/10\", \"10/2\"))  # False\n"}
{"task_id": "HumanEval/145", "solution": "\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    \n    # calculate the sum of the digits for each number\n    sums = [sum(map(int, str(num))) for num in nums]\n    \n    # sort the list based on the calculated sums\n    sorted_nums = sorted(nums, key=lambda num: (sums.count(sum(map(int, str(num))))) if sums.count(sum(map(int, str(num)))) > 1 else (sums.count(sum(map(int, str(num)))), nums.index(num)))\n    \n    return sorted_nums\n"}
{"task_id": "HumanEval/146", "solution": "\ndef specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[-1] in '13579':\n            count += 1\n    return count\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))\n"}
{"task_id": "HumanEval/147", "solution": "\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\nprint(get_max_triples(5))\n"}
{"task_id": "HumanEval/148", "solution": "\ndef bf(planet1, planet2):\n    planets = {\n        'Mercury': 'Venus',\n        'Venus': 'Earth',\n        'Earth': 'Mars',\n        'Mars': 'Jupiter',\n        'Jupiter': 'Saturn',\n        'Saturn': 'Uranus',\n        'Uranus': 'Neptune'\n    }\n\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\n    start_planet = planets[planet1]\n    end_planet = planets[planet2]\n\n    result = set()\n\n    current_planet = start_planet\n    while current_planet != end_planet:\n        result.add(current_planet)\n        current_planet = planets[current_planet]\n\n    result.add(end_planet)\n\n    return tuple(sorted(result))\n\nprint(bf(\"Jupiter\", \"Neptune\"))  # Outputs: ('Saturn', 'Uranus')\nprint(bf(\"Earth\", \"Mercury\"))  # Outputs: ('Venus')\nprint(bf(\"Mercury\", \"Uranus\"))  # Outputs: ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')\n"}
{"task_id": "HumanEval/149", "solution": "\ndef sorted_list_sum(lst):\n    # Filter out the strings that have odd lengths\n    filtered_list = [word for word in lst if len(word) % 2 == 0]\n\n    # Sort the list by length of each word, and if two words have the same length, sort alphabetically\n    sorted_list = sorted(filtered_list, key=lambda x: (len(x), x))\n\n    return sorted_list\n"}
{"task_id": "HumanEval/150", "solution": "\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    def is_prime(n):\n        if n == 1 or n == 0:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y\n"}
{"task_id": "HumanEval/151", "solution": "\ndef double_the_difference(lst):\n    sum_of_squares = 0\n    for num in lst:\n        if num < 0 or not isinstance(num, int):\n            continue\n        if num % 2 != 0:\n            sum_of_squares += num ** 2\n    return sum_of_squares\n"}
{"task_id": "HumanEval/152", "solution": "\ndef compare(game, guess):\n    return [abs(x - y) for x, y in zip(game, guess)]\n\nprint(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) # Output: [0, 0, 0, 0, 3, 3]\nprint(compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])) # Output: [4, 4, 1, 0, 0, 6]\n"}
{"task_id": "HumanEval/153", "solution": "\ndef Strongest_Extension(class_name, extensions):\n    strongest_extension = extensions[0]\n    strongest_extension_strength = get_strength(class_name, extensions[0])\n\n    for extension in extensions[1:]:\n        strength = get_strength(class_name, extension)\n        if strength > strongest_extension_strength:\n            strongest_extension = extension\n            strongest_extension_strength = strength\n\n    return f'{class_name}.{strongest_extension}'\n\ndef get_strength(class_name, extension):\n    uppercase_count = sum(1 for c in extension if c.isupper())\n    lowercase_count = sum(1 for c in extension if c.islower())\n    return uppercase_count - lowercase_count\n\n# Test the function\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\n"}
{"task_id": "HumanEval/154", "solution": "\ndef cycpattern_check(a, b):\n    # Get all rotations of b\n    rotations = [b[i:] + b[:i] for i in range(len(b))]\n    \n    # Check if any of the rotations is a substring of a\n    for rotation in rotations:\n        if rotation in a:\n            return True\n    \n    return False\n\nprint(cycpattern_check(\"abcd\", \"abd\")) # => False\nprint(cycpattern_check(\"hello\", \"ell\")) # => True\nprint(cycpattern_check(\"whassup\", \"psus\")) # => False\nprint(cycpattern_check(\"abab\", \"baa\")) # => True\nprint(cycpattern_check(\"efef\", \"eeff\")) # => False\nprint(cycpattern_check(\"himenss\", \"simen\")) # => True\n"}
{"task_id": "HumanEval/155", "solution": "\ndef even_odd_count(num):\n    even = 0\n    odd = 0\n    num_str = str(abs(num))\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\nprint(even_odd_count(-12))  # Output: (1, 1)\nprint(even_odd_count(123))  # Output: (1, 2)\n"}
{"task_id": "HumanEval/156", "solution": "\ndef int_to_mini_roman(number):\n    values = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n    numerals = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n    \n    roman_numerals = ''\n    i = 12\n    \n    while number:\n        div = number // values[i]\n        number %= values[i]\n        \n        while div:\n            roman_numerals += numerals[i]\n            div -= 1\n            \n        i -= 1\n    \n    return roman_numerals\n\n# Test cases\nprint(int_to_mini_roman(19) == 'xix')\nprint(int_to_mini_roman(152) == 'clii')\nprint(int_to_mini_roman(426) == 'cdxxvi')\n"}
{"task_id": "HumanEval/157", "solution": "\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n\n    # Check if any side is zero\n    if a == 0 or b == 0 or c == 0:\n        return False\n\n    # Check if the three sides are of equal length\n    if a == b and b == c:\n        return True\n\n    # Check if the three sides can form a right-angled triangle\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n\n    return False\n"}
{"task_id": "HumanEval/158", "solution": "\ndef find_max(words):\n    if len(words) == 0:\n        return \"\"\n\n    max_unique_chars = 0\n    max_word = None\n\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = unique_chars\n            max_word = word\n\n    return max_word\n\nprint(find_max([\"name\", \"of\", \"string\"]))  # \"string\"\nprint(find_max([\"name\", \"enam\", \"game\"]))  # \"enam\"\nprint(find_max([\"aaaaaaa\", \"bb\", \"cc\"]))  # \"aaaaaaa\"\n"}
{"task_id": "HumanEval/159", "solution": "\ndef eat(number, need, remaining):\n    if remaining >= need:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]\n"}
{"task_id": "HumanEval/160", "solution": "\ndef do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result\n"}
{"task_id": "HumanEval/161", "solution": "\ndef solve(s):\n    if not s.isalpha():\n        return s[::-1]\n    else:\n        return s[::-1].swapcase()\n\nprint(solve(\"1234\"))  # \"4321\"\nprint(solve(\"ab\"))  # \"AB\"\nprint(solve(\"#a@C\"))  # \"#A@c\"\n"}
{"task_id": "HumanEval/162", "solution": "\nimport hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    md5_obj = hashlib.md5()\n    md5_obj.update(text.encode())\n    return md5_obj.hexdigest()\n"}
{"task_id": "HumanEval/163", "solution": "\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    return sorted(x for x in range(a, b + 1) if x % 2 == 0)\n\nprint(generate_integers(2, 8))\nprint(generate_integers(8, 2))\nprint(generate_integers(10, 14))\n"}
